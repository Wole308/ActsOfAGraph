#ifndef TITAN_H
#define TITAN_H
#include "../src/common.h"

#define COLLECTSTATSPROCESS 5
#define SPREADPROCESS 6

{%if(context['XWARE'] != "HW")%}
#define _LDEBUGMODE_HEADER _DEBUGMODE_HEADER //
{%endif%}

#define LSRCKVBUFFERSZ KVBUFFERSZ
#define LSRCKVBUFFERSZ_KVS (LSRCKVBUFFERSZ / VECTOR_SIZE)

#define LDESTKVBUFFERSZ KVBUFFERSZ
#define LDESTKVBUFFERSZ_KVS (LDESTKVBUFFERSZ / VECTOR_SIZE)

#define LCAPSULEBUFFERSZ LSRCKVBUFFERSZ
#define LCAPSULEBUFFERSZ_KVS (LCAPSULEBUFFERSZ / VECTOR_SIZE)

#define LSTATSBUFFERSZ LSRCKVBUFFERSZ_KVS

#define LKVSTATSBIGBUFFERSZ_KVS KVBUFFERSZ_KVS

class titan {
public:
	titan();
	~titan();
	
	void topkernel(
		{%for ddrs, ddrs_ in zip(context['NUMINSTANCES_seq'], context['INSTANCES_charseq'])%}
		{%if(ddrs==0)%}{%else%},{%endif%}uint512_dt * kvdram{{ddrs_}}
		{%endfor%}
		{%for ddrs, ddrs_ in zip(context['NUMINSTANCES_seq'], context['INSTANCES_charseq'])%}
		,metadata_t * kvstats{{ddrs_}}
		{%endfor%}
		{%for ddrs, ddrs_ in zip(context['NUMINSTANCES_seq'], context['INSTANCES_charseq'])%}
		,int * messages{{ddrs_}}
		{%endfor%}
        );
		
	#ifdef _LDEBUGMODE_HEADER
	void checkoutofbounds(string message, unsigned int data, unsigned int upper_bound);
	void checkforequal(string message, unsigned int data1, unsigned int data2);
	void print1(string messagea, unsigned int dataa);
	void print4(string messagea, string messageb, string messagec, string messaged, unsigned int dataa, unsigned int datab, unsigned int datac, unsigned int datad);
	void print5(string messagea, string messageb, string messagec, string messaged, string messagee, unsigned int dataa, unsigned int datab, unsigned int datac, unsigned int datad, unsigned int datae);
	void print6(string messagea, string messageb, string messagec, string messaged, string messagee, string messagef, unsigned int dataa, unsigned int datab, unsigned int datac, unsigned int datad, unsigned int datae, unsigned int datef);
	void printkeyvalues(string message, keyvalue_t * keyvalues, unsigned int size);
	void printkeyvalues(string message, keyvalue_t * keyvalues1, keyvalue_t * keyvalues2, unsigned int size);
	void printkeyvalues(string message, uint512_dt * keyvalues, unsigned int size_kvs);
	void getvaluecount(string message, keyvalue_t * keyvalues, unsigned int size);
	void printparameters();
	#endif
	#ifdef _DEBUGMODE_STATS
	void printglobalvars();
	void clearglobalvars();
	void globalstats_countkvstatsread(unsigned int count);
	void globalstats_countkvstatscollected(unsigned int count);
	void globalstats_countkvstatswritten(unsigned int count);
	void globalstats_countkvsread(unsigned int count);
	void globalstats_countkvspartitionswritten(unsigned int count);
	void globalstats_countkvspartitioned(unsigned int count);
	void globalstats_countkvsreduced(unsigned int count);
	void globalstats_countkvsreducewritten(unsigned int count);
	#endif
	
	void printstate();
	unsigned int ceildiv(unsigned int val1, unsigned int val2);
	unsigned int min8(unsigned int val0, unsigned int val1, unsigned int val2, unsigned int val3, unsigned int val4, unsigned int val5, unsigned int val6, unsigned int val7);
	unsigned int min(unsigned int val1, unsigned int val2);
	unsigned int max(unsigned int val1, unsigned int val2);
	unsigned int minorzero(int val1);
	unsigned int allignup_KV(unsigned int val);
	unsigned int alligndown_KV(unsigned int val);
	vertex_t GETKVDATA_RANGE_PERSSDPARTITION(unsigned int ssdpartitonid);
	vertex_t GETKVDATA_RANGE_PERSSDPARTITION_POW(unsigned int ssdpartitonid);
	vertex_t GETAPPLYVERTEXBUFFERSZ_PERSSDPARTITION(unsigned int ssdpartitonid);
	vertex_t GETAPPLYVERTEXBUFFERSZ_PERSSDPARTITION_KVS(unsigned int ssdpartitonid);
	unsigned int GETTREEDEPTH(unsigned int ssdpartitonid);
	unsigned int hashfunc(unsigned int currentLOP, keyvalue_t kventry, vertex_t upperlimit, vertex_t range);
	unsigned int hashfunc2(unsigned int currentLOP, keyvalue_t kventry, vertex_t upperlimit, unsigned int ssdpartitonid);
	unsigned int hashfunc3(unsigned int currentLOP, keyvalue_t kventry, vertex_t upperlimit, unsigned int ssdpartitonid);
	unsigned int hashfunc4(unsigned int currentLOP, keyvalue_t kventry, vertex_t upperlimit, unsigned int ssdpartitonid);
	unsigned int hashfunc5(unsigned int currentLOP, keyvalue_t kventry, vertex_t upperlimit, unsigned int range);
	keyvalue_t getkventry(int addr, uint512_dt kvbuffer[KVSRCBUFFERSZ_KVS]);
	keyvalue_t getkventryII(int addr, uint512_dt kvbuffer[KVSRCBUFFERSZ_KVS]);
	keyvalue_t getkventryIII(int addr, uint512_dt kvbuffer[KVSRCBUFFERSZ_KVS]);
	keyvalue_t getkventryIV(int addr, uint512_dt kvbuffer[APPLYVERTEXBUFFERSZ_KVS]);
	void setkventry(uint512_dt kvbuffer[KVSRCBUFFERSZ_KVS], unsigned int addr, keyvalue_t kventry);
	void setkventryII(uint512_dt kvbuffer[KVSRCBUFFERSZ_KVS], unsigned int addr, keyvalue_t kventry);
	void setkventryIII(
		{%for vec in context['VECTOR_SIZE_seq']%}
		keyvalue_t kvbuffer_vec{{vec}}[KVDESTBUFFERSZ_KVS], 
		{%endfor%}
		unsigned int addr, keyvalue_t kventry);
	void setkventry4(
		{%for vec in context['VECTOR_SIZE_seq']%}
		keyvalue_t kvbuffer_vec{{vec}}[APPLYVERTEXBUFFERSZ_KVS], 
		{%endfor%}
		unsigned int addr, keyvalue_t kventry);
	keyvalue_t getkventry3(uint512_dt tmpV1, unsigned int idx);
	keyvalue_t getkventry4(
		{%for vec in context['VECTOR_SIZE_seq']%}
		keyvalue_t kvbuffer_vec{{vec}}[KVSRCBUFFERSZ_APPLY_KVS], 
		{%endfor%}
		unsigned int addr);
	unsigned int getsourceskipsize(unsigned int currentLOP, unsigned int param);
	unsigned int getdestskipsize(unsigned int currentLOP, unsigned int param);
	void loaddeststats(metadata_t * kvstats, metadata_t kvdeststats_tmp[NUM_PARTITIONS], unsigned int partitionoffset, unsigned int currentLOP, vertex_t finalnumpartitions);
	void storedeststats(metadata_t * kvstats, metadata_t kvdeststats_tmp[NUM_PARTITIONS], unsigned int partitionoffset, unsigned int currentLOP, vertex_t finalnumpartitions);
	unsigned int get_num_source_partitions(unsigned int currentLOP);
	unsigned int reducefunc(keyy_t vid, value_t value, value_t edgeval, unsigned int IterCount);
	
	/// Main Functions
	// READ	
	{%for ddrs, ddrs_ in zip(context['NUMINSTANCES_seq'], context['INSTANCES_charseq'])%}
	{%for w in context['BUNDLEFACTOR_seq']%}
	{%for sw in context['NUMSUBWORKERS_seq']%}
	void read_ddr{{ddrs}}_w{{w}}_sw{{sw}}(unsigned int workerid, uint512_dt * kvdram, unsigned int baseaddr_kvs, unsigned int offset_kvs, unsigned int kvsize_kvs, uint512_dt kvbuffer[KVSRCBUFFERSZ_KVS]);
	{%endfor%}
	{%endfor%}
	{%endfor%}

	{%if(context['_ACTSACCEL3'] == 1)%}
	{%for ddrs, ddrs_ in zip(context['NUMINSTANCES_seq'], context['INSTANCES_charseq'])%}
	{%for w in context['BUNDLEFACTOR_seq']%}
	{%for sw in context['NUMSUBWORKERS_seq']%}
	#if defined(_ACTSACCEL3)
	void accel3_read_ddr{{ddrs}}_w{{w}}_sw{{sw}}(unsigned int workerid, uint512_dt * kvdram, unsigned int baseaddr_kvs, unsigned int offset_kvs, unsigned int kvsize_kvs		
			{%for vec in context['VECTOR_SIZE_seq']%}
			,keyvalue_t kvbuffer_src_vec{{vec}}[KVSRCBUFFERSZ_KVS]
			{%endfor%}
			);
	#endif
	{%endfor%}
	{%endfor%}
	{%endfor%}
	{%endif%}

	{%for ddrs, ddrs_ in zip(context['NUMINSTANCES_seq'], context['INSTANCES_charseq'])%}
	{%for w in context['BUNDLEFACTOR_seq']%}
	{%for sw in context['NUMSUBWORKERS_seq']%}
	void readAU_VU_ddr{{ddrs}}_w{{w}}_sw{{sw}}(unsigned int workerid, uint512_dt * kvdram, unsigned int baseaddr_kvs, unsigned int offset_kvs, unsigned int kvsize_kvs, uint512_dt kvbuffer[KVSRCBUFFERSZ_APPLY_KVS]);
	{%endfor%}
	{%endfor%}
	{%endfor%}
		
	{%if(context['_ACTSACCEL3'] == 1)%}
	{%for ddrs, ddrs_ in zip(context['NUMINSTANCES_seq'], context['INSTANCES_charseq'])%}
	{%for w in context['BUNDLEFACTOR_seq']%}
	{%for sw in context['NUMSUBWORKERS_seq']%}
	#ifdef _ACTSACCEL3
	void accel3_readAU_VU_ddr{{ddrs}}_w{{w}}_sw{{sw}}(unsigned int workerid, uint512_dt * kvdram, unsigned int baseaddr_kvs, unsigned int offset_kvs, unsigned int kvsize_kvs
			{%for vec in context['VECTOR_SIZE_seq']%}
			,keyvalue_t kvbuffer_vec{{vec}}[KVSRCBUFFERSZ_APPLY_KVS]
			{%endfor%}
			);
	#endif 
	{%endfor%}
	{%endfor%}
	{%endfor%}
	{%endif%}

	{%for ddrs, ddrs_ in zip(context['NUMINSTANCES_seq'], context['INSTANCES_charseq'])%}
	{%for w in context['BUNDLEFACTOR_seq']%}
	{%for sw in context['NUMSUBWORKERS_APPLYPH_seq']%}
	void readAU_V_ddr{{ddrs}}_w{{w}}_sw{{sw}}(unsigned int ssdpartitonid, unsigned int workerid, uint512_dt * kvdram, unsigned int baseaddr_kvs, unsigned int offset_kvs, unsigned int kvsize_kvs, uint512_dt verticesbuffer[APPLYVERTEXBUFFERSZ_KVS]);
	{%endfor%}
	{%endfor%}
	{%endfor%}

	{%if(context['_ACTSACCEL3'] == 1)%}
	{%for ddrs, ddrs_ in zip(context['NUMINSTANCES_seq'], context['INSTANCES_charseq'])%}
	{%for w in context['BUNDLEFACTOR_seq']%}
	{%for sw in context['NUMSUBWORKERS_APPLYPH_seq']%}
	#ifdef _ACTSACCEL3
	void accel3_readAU_V_ddr{{ddrs}}_w{{w}}_sw{{sw}}(unsigned int ssdpartitonid, unsigned int workerid, uint512_dt * kvdram, unsigned int baseaddr_kvs, unsigned int offset_kvs, unsigned int kvsize_kvs
		{%for vec in context['VECTOR_SIZE_seq']%}
		,keyvalue_t verticesbuffer_vec{{vec}}[APPLYVERTEXBUFFERSZ_KVS]
		{%endfor%}
		);
	#endif
	{%endfor%}
	{%endfor%}
	{%endfor%}
	{%endif%}

	// PARTITION
	{%for ddrs, ddrs_ in zip(context['NUMINSTANCES_seq'], context['INSTANCES_charseq'])%}
	{%for w in context['BUNDLEFACTOR_seq']%}
	{%for sw in context['NUMSUBWORKERS_seq']%}
	void partition_ddr{{ddrs}}_w{{w}}_sw{{sw}}(unsigned int ssdpartitonid, unsigned int workerid, unsigned int subworkerid, unsigned int kvreadoffset_kvs, unsigned int kvsize_kvs, unsigned int currentLOP, unsigned int destpartitionoffset, unsigned int upperlimit, unsigned int destpartitionrange,
			uint512_dt kvbuffer_src[KVSRCBUFFERSZ_KVS], uint512_dt kvbuffer_dest[KVDESTBUFFERSZ_KVS], smalluint_t kvbufferstats_offset[NUM_PARTITIONS]
			#ifdef _PARTITIONED_KVBUFFERSTATS
			,smalluint_t kvbufferstats_size[NUM_PARTITIONS]
			#else 
			,smalluint_t kvbufferstats_tmp_size[NUM_PARTITIONS]
			#endif 
			,smallmargin_t ov[NUM_PARTITIONS], uint512_dt ovkvs_tmp[NUM_PARTITIONS]);
	{%endfor%}
	{%endfor%}
	{%endfor%}

	{%for ddrs, ddrs_ in zip(context['NUMINSTANCES_seq'], context['INSTANCES_charseq'])%}
	{%for w in context['BUNDLEFACTOR_seq']%}
	{%for sw in context['NUMSUBWORKERS_seq']%}
	#ifdef _SEPERATE_EXTRACTANDPARTITIONFUNC
	void extractstats2_ddr{{ddrs}}_w{{w}}_sw{{sw}}(unsigned int ssdpartitonid, unsigned int workerid, unsigned int subworkerid, unsigned int kvreadoffset_kvs, unsigned int kvsize_kvs, unsigned int currentLOP, unsigned int destpartitionoffset, unsigned int upperlimit, unsigned int destpartitionrange,
			uint512_dt kvbuffer_src[KVSRCBUFFERSZ_KVS], uint512_dt kvbuffer_dest[KVDESTBUFFERSZ_KVS], smalluint_t kvbufferstats_offset[NUM_PARTITIONS], smalluint_t kvbufferstats_size[NUM_PARTITIONS], smallmargin_t ov[NUM_PARTITIONS], uint512_dt ovkvs_tmp[NUM_PARTITIONS]);
	#endif 
	{%endfor%}
	{%endfor%}
	{%endfor%}

	{%for ddrs, ddrs_ in zip(context['NUMINSTANCES_seq'], context['INSTANCES_charseq'])%}
	{%for w in context['BUNDLEFACTOR_seq']%}
	{%for sw in context['NUMSUBWORKERS_seq']%}
	#ifdef _SEPERATE_EXTRACTANDPARTITIONFUNC
	void partition2_ddr{{ddrs}}_w{{w}}_sw{{sw}}(unsigned int ssdpartitonid, unsigned int workerid, unsigned int subworkerid, unsigned int kvreadoffset_kvs, unsigned int kvsize_kvs, unsigned int currentLOP, unsigned int destpartitionoffset, unsigned int upperlimit, unsigned int destpartitionrange,
			uint512_dt kvbuffer_src[KVSRCBUFFERSZ_KVS], uint512_dt kvbuffer_dest[KVDESTBUFFERSZ_KVS], smalluint_t kvbufferstats_offset[NUM_PARTITIONS], smalluint_t kvbufferstats_size[NUM_PARTITIONS], smallmargin_t ov[NUM_PARTITIONS], uint512_dt ovkvs_tmp[NUM_PARTITIONS]);
	#endif 
	{%endfor%}
	{%endfor%}
	{%endfor%}

	{%if(context['_ACTSACCEL3'] == 1)%}
	{%for ddrs, ddrs_ in zip(context['NUMINSTANCES_seq'], context['INSTANCES_charseq'])%}
	{%for w in context['BUNDLEFACTOR_seq']%}
	{%for sw in context['NUMSUBWORKERS_seq']%}
	{%for vec in context['VECTOR_SIZE_seq']%}
	#ifdef _ACTSACCEL3
	void accel3_partition_ddr{{ddrs}}_w{{w}}_sw{{sw}}_vec{{vec}}(unsigned int ssdpartitonid, unsigned int workerid, unsigned int subworkerid, unsigned int currentLOP, unsigned int upperlimit, unsigned int destpartitionrange, tracker_t kvbuffer1_kvs_tracker,
		keyvalue_t kvbuffer_src[KVSRCBUFFERSZ_KVS], keyvalue_t kvbuffer_intermediate[KVDESTBUFFERSZ_KVS], smalluint_t kvbufferstats_offset[NUM_PARTITIONS], smalluint_t kvbufferstats_size[NUM_PARTITIONS]);
	#endif 
	{%endfor%}
	{%endfor%}
	{%endfor%}
	{%endfor%}
	{%endif%}

	{%if(context['_ACTSACCEL3'] == 1)%}
	{%for ddrs, ddrs_ in zip(context['NUMINSTANCES_seq'], context['INSTANCES_charseq'])%}
	{%for w in context['BUNDLEFACTOR_seq']%}
	{%for sw in context['NUMSUBWORKERS_seq']%}
	#ifdef _ACTSACCEL3
	#ifdef _BUFFERB4WRITE
	void accel3_transfer_ddr{{ddrs}}_w{{w}}_sw{{sw}}(unsigned int ssdpartitonid, unsigned int workerid, 		
			{%for vec in context['VECTOR_SIZE_seq']%}
			keyvalue_t kvbuffer_interm_vec{{vec}}[KVDESTBUFFERSZ_KVS], smalluint_t kvbufferstats_offset_vec{{vec}}[NUM_PARTITIONS], smalluint_t kvbufferstats_size_vec{{vec}}[NUM_PARTITIONS], 
			{%endfor%}
			{%for vec in context['VECTOR_SIZE_seq']%}
			keyvalue_t kvbuffer_dest_vec{{vec}}[KVDESTBUFFERSZ_KVS], 
			{%endfor%}		
			smalluint_t kvbufferstats_dest_offset[NUM_PARTITIONS], smalluint_t kvbufferstats_dest_size[NUM_PARTITIONS]);
	#endif 
	#endif 
	{%endfor%}
	{%endfor%}
	{%endfor%}
	{%endif%}

	// APPLY
	{%for ddrs, ddrs_ in zip(context['NUMINSTANCES_seq'], context['INSTANCES_charseq'])%}
	{%for w in context['BUNDLEFACTOR_seq']%}
	{%for sw in context['NUMSUBWORKERS_APPLYPH_seq']%}
	void reduce_ddr{{ddrs}}_w{{w}}_sw{{sw}}(unsigned int IterCount, unsigned int ssdpartitonid, unsigned int workerid, unsigned int verticesreadoffset_vs, unsigned int kvreadoffset_kvs, unsigned int kvsize_kvs, metadata_t sourcestatbuffer, uint512_dt verticesbuffer[APPLYVERTEXBUFFERSZ_KVS], uint512_dt kvbuffer[KVSRCBUFFERSZ_APPLY_KVS]);				
	{%endfor%}
	{%endfor%}
	{%endfor%}

	{%if(context['_ACTSACCEL3'] == 1)%}
	{%for ddrs, ddrs_ in zip(context['NUMINSTANCES_seq'], context['INSTANCES_charseq'])%}
	{%for w in context['BUNDLEFACTOR_seq']%}
	{%for sw in context['NUMSUBWORKERS_APPLYPH_seq']%}
	#ifdef _ACTSACCEL3
	void accel3_reduce_ddr{{ddrs}}_w{{w}}_sw{{sw}}(unsigned int IterCount, unsigned int ssdpartitonid, unsigned int workerid, unsigned int verticesreadoffset_vs, unsigned int kvreadoffset_kvs, unsigned int kvsize_kvs
			{%for vec in context['VECTOR_SIZE_seq']%}
			,keyvalue_t verticesbuffer_vec{{vec}}[APPLYVERTEXBUFFERSZ_KVS]
			{%endfor%}
			{%for vec in context['VECTOR_SIZE_seq']%}
			,keyvalue_t kvbuffer_vec{{vec}}[KVSRCBUFFERSZ_APPLY_KVS]
			{%endfor%}
			);
	#endif 
	{%endfor%}
	{%endfor%}
	{%endfor%}
	{%endif%}

	// WRITE
	{%for ddrs, ddrs_ in zip(context['NUMDRAMBANKS_seq'], context['DRAMBANKS_charseq'])%}
	{%for w in context['BUNDLEFACTOR_seq']%}
	{%for sw in context['NUMSUBWORKERS_seq']%}
	void write_fake_ddr{{ddrs}}_w{{w}}_sw{{sw}}(uint512_dt * kvdram, uint512_dt kvbuffer[KVDESTBUFFERSZ_KVS], unsigned int dramoffset_kvs, unsigned int bramoffset_kvs, unsigned int size_kvs);
	{%endfor%}
	{%endfor%}
	{%endfor%}
	
	{%for ddrs, ddrs_ in zip(context['NUMINSTANCES_seq'], context['INSTANCES_charseq'])%}
	{%for w in context['BUNDLEFACTOR_seq']%}
	{%for sw in context['NUMSUBWORKERS_seq']%}
	void writeburst_ddr{{ddrs}}_w{{w}}_sw{{sw}}(uint512_dt * kvdram, unsigned int baseaddr_kvs, unsigned int dramoffset_kvs, unsigned int offset_kvs, unsigned int size_kvs, uint512_dt kvbuffer[KVSRCBUFFERSZ_KVS]);
	{%endfor%}
	{%endfor%}
	{%endfor%}
	{%for ddrs, ddrs_ in zip(context['NUMINSTANCES_seq'], context['INSTANCES_charseq'])%}
	{%for w in context['BUNDLEFACTOR_seq']%}
	{%for sw in context['NUMSUBWORKERS_seq']%}
	void write_ddr{{ddrs}}_w{{w}}_sw{{sw}}(unsigned int ssdpartitonid, unsigned int workerid, unsigned int currentLOP, unsigned int destpartitionoffset,
			uint512_dt kvbuffer[KVDESTBUFFERSZ_KVS], uint512_dt * kvdram, unsigned int baseaddr_kvs);
	{%endfor%}
	{%endfor%}
	{%endfor%}

	{%for ddrs, ddrs_ in zip(context['NUMINSTANCES_seq'], context['INSTANCES_charseq'])%}
	{%for w in context['BUNDLEFACTOR_seq']%}
	{%for sw in context['NUMSUBWORKERS_seq']%}
	void writeremainingovs_ddr{{ddrs}}_w{{w}}_sw{{sw}}(unsigned int ssdpartitonid, unsigned int workerid, uint512_dt * kvdram, metadata_t kvdeststats_tmp[NUM_PARTITIONS], uint512_dt ovkvs_tmp_ddr[NUM_PARTITIONS], smallmargin_t ov[NUM_PARTITIONS], unsigned int baseaddr_kvs);
	{%endfor%}
	{%endfor%}
	{%endfor%}

	// BRAM 2 TMP TRANSFERS
	{%for ddrs, ddrs_ in zip(context['NUMINSTANCES_seq'], context['INSTANCES_charseq'])%}
	{%for w in context['BUNDLEFACTOR_seq']%}
	#ifdef _BUFFERB4WRITE
	void mergeoffsetsandsizes_ddr{{ddrs}}_w{{w}}(unsigned int ssdpartitonid, unsigned int workerid
			,smalluint_t DESTtmpkvbufferstats_offset[NUM_PARTITIONS], smalluint_t DESTtmpkvbufferstats_size[NUM_PARTITIONS]
			{%for sw in context['NUMSUBWORKERS_seq']%}
			,smalluint_t kvbufferstats_sw{{sw}}_size[NUM_PARTITIONS]
			{%endfor%}
			);
	#endif
	{%endfor%}
	{%endfor%}

	{%for ddrs, ddrs_ in zip(context['NUMINSTANCES_seq'], context['INSTANCES_charseq'])%}
	{%for w in context['BUNDLEFACTOR_seq']%}
	{%for sw in context['NUMSUBWORKERS_seq']%}
	#ifdef _BUFFERB4WRITE
	void write_bram2tmp_ddr{{ddrs}}_w{{w}}_sw{{sw}}(unsigned int ssdpartitonid, unsigned int workerid, 
			uint512_dt kvbuffer[KVDESTBUFFERSZ_KVS], uint512_dt DESTtmpkvbuffer[TOTALDESTTMPKVBUFFERSZ_KVS], smallmetadata_t DESTtmpkvbuffer_weof[NUM_PARTITIONS], smalluint_t kvbufferstats_offset[NUM_PARTITIONS], smalluint_t kvbufferstats_size[NUM_PARTITIONS], unsigned int baseaddr_kvs);
	#endif 
	{%endfor%}
	{%endfor%}
	{%endfor%}

	{%if(context['_ACTSACCEL1'] == 1)%}
	{%for ddrs, ddrs_ in zip(context['NUMINSTANCES_seq'], context['INSTANCES_charseq'])%}
	{%for w in context['BUNDLEFACTOR_seq']%}
	{%for sw in context['NUMSUBWORKERS_seq']%}
	#ifdef _ACTSACCEL1
	#ifdef _BUFFERB4WRITE
	void accel1_write_bram2tmp_ddr{{ddrs}}_w{{w}}_sw{{sw}}(unsigned int ssdpartitonid, unsigned int workerid
			,uint512_dt kvbuffer[KVDESTBUFFERSZ_KVS], smalluint_t kvbufferstats_offset[NUM_PARTITIONS], smalluint_t kvbufferstats_size[NUM_PARTITIONS]
			,uint512_dt DESTtmpkvbuffer[TOTALDESTTMPKVBUFFERSZ_KVS], smalluint_t DESTtmpkvbufferstats_offset[NUM_PARTITIONS], smalluint_t DESTtmpkvbufferstats_size[NUM_PARTITIONS]);
	#endif 
	#endif 
	{%endfor%}
	{%endfor%}
	{%endfor%}
	{%endif%}

	{%if(context['_ACTSACCEL3'] == 1)%}
	{%for ddrs, ddrs_ in zip(context['NUMINSTANCES_seq'], context['INSTANCES_charseq'])%}
	{%for w in context['BUNDLEFACTOR_seq']%}
	{%for sw in context['NUMSUBWORKERS_seq']%}
	#ifdef _ACTSACCEL3
	#ifdef _BUFFERB4WRITE
	void accel3_write_bram2tmp_ddr{{ddrs}}_w{{w}}_sw{{sw}}(unsigned int ssdpartitonid, unsigned int workerid
			{%for vec in context['VECTOR_SIZE_seq']%}
			,keyvalue_t kvbuffer_vec{{vec}}[KVDESTBUFFERSZ_KVS]
			{%endfor%}
			,smalluint_t kvbufferstats_offset[NUM_PARTITIONS], smalluint_t kvbufferstats_size[NUM_PARTITIONS]
			,uint512_dt DESTtmpkvbuffer[TOTALDESTTMPKVBUFFERSZ_KVS], smalluint_t DESTtmpkvbufferstats_offset[NUM_PARTITIONS], smalluint_t DESTtmpkvbufferstats_size[NUM_PARTITIONS]);
	#endif 
	#endif 
	{%endfor%}
	{%endfor%}
	{%endfor%}
	{%endif%}

	// BRAM 2 DRAM TRANSFERS
	{%for ddrs, ddrs_ in zip(context['NUMINSTANCES_seq'], context['INSTANCES_charseq'])%}
	{%for w in context['BUNDLEFACTOR_seq']%}
	{%for sw in context['NUMSUBWORKERS_seq']%}
	#ifdef _BUFFERB4WRITE
	void write_bram2dram_ddr{{ddrs}}_w{{w}}_sw{{sw}}(unsigned int ssdpartitonid, unsigned int workerid, 
			uint512_dt kvbuffer[KVDESTBUFFERSZ_KVS], smallmetadata_t DESTtmpkvbuffer_weof[NUM_PARTITIONS], smalluint_t kvbufferstats_offset[NUM_PARTITIONS], smalluint_t kvbufferstats_size[NUM_PARTITIONS], uint512_dt * kvdram, metadata_t kvdeststats_tmp[NUM_PARTITIONS], unsigned int baseaddr_kvs);
	#endif 
	{%endfor%}
	{%endfor%}
	{%endfor%}

	// WRITE VERTICES TO DRAM (APPLY PHASE)
	{%for ddrs, ddrs_ in zip(context['NUMINSTANCES_seq'], context['INSTANCES_charseq'])%}
	{%for w in context['BUNDLEFACTOR_seq']%}
	{%for sw in context['NUMSUBWORKERS_APPLYPH_seq']%}
	void writeAU_Vs_ddr{{ddrs}}_w{{w}}_sw{{sw}}(unsigned int ssdpartitonid, unsigned int workerid, uint512_dt * kvdram, unsigned int offset_vs, unsigned int baseaddr_vs, uint512_dt verticesbuffer[APPLYVERTEXBUFFERSZ_KVS]);
	{%endfor%}
	{%endfor%}
	{%endfor%}

	{%if(context['_ACTSACCEL3'] == 1)%}
	{%for ddrs, ddrs_ in zip(context['NUMINSTANCES_seq'], context['INSTANCES_charseq'])%}
	{%for w in context['BUNDLEFACTOR_seq']%}
	{%for sw in context['NUMSUBWORKERS_APPLYPH_seq']%}
	#ifdef _ACTSACCEL3
	void accel3_writeAU_Vs_ddr{{ddrs}}_w{{w}}_sw{{sw}}(unsigned int ssdpartitonid, unsigned int workerid, uint512_dt * kvdram, unsigned int offset_vs, unsigned int baseaddr_vs
			{%for vec in context['VECTOR_SIZE_seq']%}
			,keyvalue_t verticesbuffer_vec{{vec}}[APPLYVERTEXBUFFERSZ_KVS]
			{%endfor%}
			);
	#endif 
	{%endfor%}
	{%endfor%}
	{%endfor%}
	{%endif%}

	// READ MANY
	{%for ddrs, ddrs_ in zip(context['NUMINSTANCES_seq'], context['INSTANCES_charseq'])%}
	{%for w in context['BUNDLEFACTOR_seq']%}
	void readmany_ddr{{ddrs}}_w{{w}}(unsigned int beginworkerid, uint512_dt * kvdram, unsigned int baseaddr_kvs, unsigned int kvreadoffset_kvs, unsigned int kvsize_kvs
		{%for sw in context['NUMSUBWORKERS_seq']%}
		,uint512_dt kvbuffer{{sw}}[KVSRCBUFFERSZ_KVS]
		{%endfor%}
		);
	{%endfor%}
	{%endfor%}

	{%if(context['_ACTSACCEL3'] == 1)%}
	{%for ddrs, ddrs_ in zip(context['NUMINSTANCES_seq'], context['INSTANCES_charseq'])%}
	{%for w in context['BUNDLEFACTOR_seq']%}
	#if defined(_ACTSACCEL3)
	void accel3_readmany_ddr{{ddrs}}_w{{w}}(unsigned int beginworkerid, uint512_dt * kvdram, unsigned int baseaddr_kvs, unsigned int kvreadoffset_kvs, unsigned int kvsize_kvs
		{%for sw in context['NUMSUBWORKERS_seq']%}
		{%for vec in context['VECTOR_SIZE_seq']%}
		,keyvalue_t kvbuffer_sw{{sw}}_vec{{vec}}[KVSRCBUFFERSZ_KVS]
		{%endfor%}
		{%endfor%}
		);
	#endif 
	{%endfor%}
	{%endfor%}
	{%endif%}

	{%for ddrs, ddrs_ in zip(context['NUMINSTANCES_seq'], context['INSTANCES_charseq'])%}
	{%for w in context['BUNDLEFACTOR_seq']%}
	void readmanyAU_Vs_ddr{{ddrs}}_w{{w}}(unsigned int ssdpartitonid, unsigned int beginworkerid, uint512_dt * kvdram, unsigned int baseaddr_kvs, unsigned int kvreadoffset_kvs, unsigned int kvsize_kvs
		{%for sw in context['NUMSUBWORKERS_APPLYPH_seq']%}
		,uint512_dt verticesbuffer{{sw}}[APPLYVERTEXBUFFERSZ_KVS]
		{%endfor%}
		);
	{%endfor%}
	{%endfor%}

	{%if(context['_ACTSACCEL3'] == 1)%}
	{%for ddrs, ddrs_ in zip(context['NUMINSTANCES_seq'], context['INSTANCES_charseq'])%}
	{%for w in context['BUNDLEFACTOR_seq']%}
	#ifdef _ACTSACCEL3
	void accel3_readmanyAU_Vs_ddr{{ddrs}}_w{{w}}(unsigned int ssdpartitonid, unsigned int beginworkerid, uint512_dt * kvdram, unsigned int baseaddr_kvs, unsigned int kvreadoffset_kvs, unsigned int kvsize_kvs
		{%for sw in context['NUMSUBWORKERS_APPLYPH_seq']%}
		{%for vec in context['VECTOR_SIZE_seq']%}
		,keyvalue_t verticesbuffer_sw{{sw}}_vec{{vec}}[APPLYVERTEXBUFFERSZ_KVS]
		{%endfor%}
		{%endfor%}
		);
	#endif 
	{%endfor%}
	{%endfor%}
	{%endif %}

	{%for ddrs, ddrs_ in zip(context['NUMINSTANCES_seq'], context['INSTANCES_charseq'])%}
	{%for w in context['BUNDLEFACTOR_seq']%}
	void readmanyAU_VUs_ddr{{ddrs}}_w{{w}}(unsigned int beginworkerid, uint512_dt * kvdram, unsigned int baseaddr_kvs, metadata_t sourcestatbuffer[NUMSUBWORKERS], unsigned int kvreadoffset_kvs, unsigned int kvsize_kvs
		{%for sw in context['NUMSUBWORKERS_APPLYPH_seq']%}
		,uint512_dt kvbuffer{{sw}}[KVSRCBUFFERSZ_APPLY_KVS]
		{%endfor%}
		);
	{%endfor%}
	{%endfor%}

	{%if(context['_ACTSACCEL3'] == 1)%}
	{%for ddrs, ddrs_ in zip(context['NUMINSTANCES_seq'], context['INSTANCES_charseq'])%}
	{%for w in context['BUNDLEFACTOR_seq']%}
	#ifdef _ACTSACCEL3
	void accel3_readmanyAU_VUs_ddr{{ddrs}}_w{{w}}(unsigned int beginworkerid, uint512_dt * kvdram, unsigned int baseaddr_kvs, metadata_t sourcestatbuffer[NUMSUBWORKERS], unsigned int kvreadoffset_kvs, unsigned int kvsize_kvs
		{%for sw in context['NUMSUBWORKERS_APPLYPH_seq']%}
		{%for vec in context['VECTOR_SIZE_seq']%}
		,keyvalue_t kvbuffer_sw{{sw}}_vec{{vec}}[KVSRCBUFFERSZ_APPLY_KVS]
		{%endfor%}
		{%endfor%}
		);
	#endif 
	{%endfor%}
	{%endfor%}
	{%endif %}

	// PARTITION MANY
	{%for ddrs, ddrs_ in zip(context['NUMINSTANCES_seq'], context['INSTANCES_charseq'])%}
	{%for w in context['BUNDLEFACTOR_seq']%}
	void partitionmany_ddr{{ddrs}}_w{{w}}(unsigned int ssdpartitonid, unsigned int beginworkerid, unsigned int kvreadoffset_kvs, unsigned int kvsize_kvs, unsigned int currentLOP, unsigned int destpartitionoffset, unsigned int upperlimit, unsigned int destpartitionrange
		{%for sw in context['NUMSUBWORKERS_seq']%}
		,uint512_dt kvbuffer{{sw}}1[KVSRCBUFFERSZ_KVS], uint512_dt kvbuffer{{sw}}2[KVDESTBUFFERSZ_KVS], smalluint_t kvbufferstats_offset{{sw}}[NUM_PARTITIONS], smalluint_t kvbufferstats_size{{sw}}[NUM_PARTITIONS], smallmargin_t ov{{sw}}[NUM_PARTITIONS], uint512_dt ovkvs_tmp{{sw}}[NUM_PARTITIONS]
		{%endfor%}
		);
	{%endfor%}
	{%endfor%}

	{%for ddrs, ddrs_ in zip(context['NUMINSTANCES_seq'], context['INSTANCES_charseq'])%}
	{%for w in context['BUNDLEFACTOR_seq']%}
	#ifdef _SEPERATE_EXTRACTANDPARTITIONFUNC
	void extractmanystats2_ddr{{ddrs}}_w{{w}}(unsigned int ssdpartitonid, unsigned int beginworkerid, unsigned int kvreadoffset_kvs, unsigned int kvsize_kvs, unsigned int currentLOP, unsigned int destpartitionoffset, unsigned int upperlimit, unsigned int destpartitionrange
		{%for sw in context['NUMSUBWORKERS_seq']%}
		,uint512_dt kvbuffer{{sw}}1[KVSRCBUFFERSZ_KVS], uint512_dt kvbuffer{{sw}}2[KVDESTBUFFERSZ_KVS], smalluint_t kvbufferstats_offset{{sw}}[NUM_PARTITIONS], smalluint_t kvbufferstats_size{{sw}}[NUM_PARTITIONS], smallmargin_t ov{{sw}}[NUM_PARTITIONS], uint512_dt ovkvs_tmp{{sw}}[NUM_PARTITIONS]
		{%endfor%}
		);
	#endif 
	{%endfor%}
	{%endfor%}

	{%for ddrs, ddrs_ in zip(context['NUMINSTANCES_seq'], context['INSTANCES_charseq'])%}
	{%for w in context['BUNDLEFACTOR_seq']%}
	#ifdef _SEPERATE_EXTRACTANDPARTITIONFUNC
	void partitionmany2_ddr{{ddrs}}_w{{w}}(unsigned int ssdpartitonid, unsigned int beginworkerid, unsigned int kvreadoffset_kvs, unsigned int kvsize_kvs, unsigned int currentLOP, unsigned int destpartitionoffset, unsigned int upperlimit, unsigned int destpartitionrange
		{%for sw in context['NUMSUBWORKERS_seq']%}
		,uint512_dt kvbuffer{{sw}}1[KVSRCBUFFERSZ_KVS], uint512_dt kvbuffer{{sw}}2[KVDESTBUFFERSZ_KVS], smalluint_t kvbufferstats_offset{{sw}}[NUM_PARTITIONS], smalluint_t kvbufferstats_size{{sw}}[NUM_PARTITIONS], smallmargin_t ov{{sw}}[NUM_PARTITIONS], uint512_dt ovkvs_tmp{{sw}}[NUM_PARTITIONS]
		{%endfor%}
		);
	#endif 
	{%endfor%}
	{%endfor%}

	{%if(context['_ACTSACCEL3'] == 1)%}
	{%for ddrs, ddrs_ in zip(context['NUMINSTANCES_seq'], context['INSTANCES_charseq'])%}
	{%for w in context['BUNDLEFACTOR_seq']%}
	#ifdef _ACTSACCEL3
	void accel3_partitionmany_ddr{{ddrs}}_w{{w}}(unsigned int ssdpartitonid, unsigned int beginworkerid, unsigned int kvreadoffset_kvs, unsigned int kvsize_kvs, unsigned int currentLOP, unsigned int destpartitionoffset, unsigned int upperlimit, unsigned int destpartitionrange
		{%for sw in context['NUMSUBWORKERS_seq']%}
		{%for vec in context['VECTOR_SIZE_seq']%}
		,keyvalue_t kvbuffer_sw{{sw}}_vec{{vec}}_src[KVSRCBUFFERSZ_KVS], keyvalue_t kvbuffer_sw{{sw}}_vec{{vec}}_dest[KVDESTBUFFERSZ_KVS], smalluint_t kvbufferstats_offset_sw{{sw}}_vec{{vec}}[NUM_PARTITIONS], smalluint_t kvbufferstats_size_sw{{sw}}_vec{{vec}}[NUM_PARTITIONS], smallmargin_t ov_sw{{sw}}_vec{{vec}}[NUM_PARTITIONS], keyvalue_t ovkvs_tmp_sw{{sw}}_vec{{vec}}[PARTITIONS_x_VECTORSZ] 
		{%endfor%}
		{%endfor%}
		{%for sw in context['NUMSUBWORKERS_seq']%}
		,smalluint_t kvbufferstats_offset{{sw}}[NUM_PARTITIONS], smalluint_t kvbufferstats_size{{sw}}[NUM_PARTITIONS]
		{%endfor%}	
		);
	#endif 
	{%endfor%}
	{%endfor%}
	{%endif%}

	// APPLY MANY
	{%for ddrs, ddrs_ in zip(context['NUMINSTANCES_seq'], context['INSTANCES_charseq'])%}
	{%for w in context['BUNDLEFACTOR_seq']%}
	void reducemany_ddr{{ddrs}}_w{{w}}(unsigned int IterCount, unsigned int ssdpartitonid, unsigned int beginworkerid, unsigned int verticesreadoffset_vs, metadata_t sourcestatbuffer[NUMSUBWORKERS], unsigned int kvreadoffset_kvs
		{%for sw in context['NUMSUBWORKERS_APPLYPH_seq']%}
		,uint512_dt verticesbuffer{{sw}}[APPLYVERTEXBUFFERSZ_KVS]
		{%endfor%}
		{%for sw in context['NUMSUBWORKERS_APPLYPH_seq']%}
		,uint512_dt kvbuffer{{sw}}[KVSRCBUFFERSZ_APPLY_KVS]
		{%endfor%}	
		);
	{%endfor%}
	{%endfor%}

	{%if(context['_ACTSACCEL3'] == 1)%}
	{%for ddrs, ddrs_ in zip(context['NUMINSTANCES_seq'], context['INSTANCES_charseq'])%}
	{%for w in context['BUNDLEFACTOR_seq']%}
	#ifdef _ACTSACCEL3
	void accel3_reducemany_ddr{{ddrs}}_w{{w}}(unsigned int IterCount, unsigned int ssdpartitonid, unsigned int beginworkerid, unsigned int verticesreadoffset_vs, metadata_t sourcestatbuffer[NUMSUBWORKERS], unsigned int kvreadoffset_kvs
		{%for sw in context['NUMSUBWORKERS_APPLYPH_seq']%}
		{%for vec in context['VECTOR_SIZE_seq']%}
		,keyvalue_t verticesbuffer_sw{{sw}}_vec{{vec}}[APPLYVERTEXBUFFERSZ_KVS]
		{%endfor%}
		{%endfor%}
		{%for sw in context['NUMSUBWORKERS_APPLYPH_seq']%}
		{%for vec in context['VECTOR_SIZE_seq']%}
		,keyvalue_t kvbuffer_sw{{sw}}_vec{{vec}}[KVSRCBUFFERSZ_APPLY_KVS]
		{%endfor%}
		{%endfor%}
		);
	#endif 
	{%endfor%}
	{%endfor%}
	{%endif%}

	// WRITE MANY
	{%for ddrs, ddrs_ in zip(context['NUMINSTANCES_seq'], context['INSTANCES_charseq'])%}
	{%for w in context['BUNDLEFACTOR_seq']%}
	void writemany_ddr{{ddrs}}_w{{w}}(unsigned int ssdpartitonid, unsigned int beginworkerid, uint512_dt * kvdram, unsigned int baseaddr_kvs, unsigned int currentLOP, unsigned int destpartitionoffset	
		{%for sw in context['NUMSUBWORKERS_seq']%}
		,uint512_dt kvbuffer{{sw}}[KVDESTBUFFERSZ_KVS]
		{%endfor%}
		);
	{%endfor%}
	{%endfor%}

	{%for ddrs, ddrs_ in zip(context['NUMINSTANCES_seq'], context['INSTANCES_charseq'])%}
	{%for w in context['BUNDLEFACTOR_seq']%}
	void writemanyAU_Vs_ddr{{ddrs}}_w{{w}}(unsigned int ssdpartitonid, unsigned int beginworkerid, uint512_dt * kvdram, unsigned int baseaddr_vs, unsigned int kvreadoffset_kvs
		{%for sw in context['NUMSUBWORKERS_APPLYPH_seq']%}
		,uint512_dt verticesbuffer{{sw}}[APPLYVERTEXBUFFERSZ_KVS]
		{%endfor%}
		);
	{%endfor%}
	{%endfor%}

	{%if(context['_ACTSACCEL3'] == 1)%}
	{%for ddrs, ddrs_ in zip(context['NUMINSTANCES_seq'], context['INSTANCES_charseq'])%}
	{%for w in context['BUNDLEFACTOR_seq']%}
	#ifdef _ACTSACCEL3
	void accel3_writemanyAU_Vs_ddr{{ddrs}}_w{{w}}(unsigned int ssdpartitonid, unsigned int beginworkerid, uint512_dt * kvdram, unsigned int baseaddr_vs, unsigned int kvreadoffset_kvs
		{%for sw in context['NUMSUBWORKERS_APPLYPH_seq']%}
		{%for vec in context['VECTOR_SIZE_seq']%}
		,keyvalue_t verticesbuffer_sw{{sw}}_vec{{vec}}[APPLYVERTEXBUFFERSZ_KVS]
		{%endfor%}
		{%endfor%}
		);
	#endif
	{%endfor%}
	{%endfor%}
	{%endif%}

	{%for ddrs, ddrs_ in zip(context['NUMINSTANCES_seq'], context['INSTANCES_charseq'])%}
	{%for w in context['BUNDLEFACTOR_seq']%}
	#ifdef _BUFFERB4WRITE
	void writemany_bram2tmp_ddr{{ddrs}}_w{{w}}(unsigned int ssdpartitonid, unsigned int beginworkerid, uint512_dt DESTtmpkvbuffer[TOTALDESTTMPKVBUFFERSZ_KVS], smallmetadata_t DESTtmpkvbuffer_weof[NUM_PARTITIONS], unsigned int baseaddr_kvs, unsigned int currentLOP, unsigned int destpartitionoffset
		{%for sw in context['NUMSUBWORKERS_seq']%}
		,uint512_dt kvbuffer{{sw}}[KVDESTBUFFERSZ_KVS], smalluint_t kvbufferstats_offset{{sw}}[NUM_PARTITIONS], smalluint_t kvbufferstats_size{{sw}}[NUM_PARTITIONS]
		{%endfor%}
		,unsigned int ibegin_kvs, unsigned int iend_kvs
		);
	#endif 
	{%endfor%}
	{%endfor%}

	{%if(context['_ACTSACCEL1'] == 1)%}
	{%for ddrs, ddrs_ in zip(context['NUMINSTANCES_seq'], context['INSTANCES_charseq'])%}
	{%for w in context['BUNDLEFACTOR_seq']%}
	#ifdef _ACTSACCEL1
	#ifdef _BUFFERB4WRITE
	void accel1_writemany_bram2tmp_ddr{{ddrs}}_w{{w}}(unsigned int ssdpartitonid, unsigned int beginworkerid
		,uint512_dt DESTtmpkvbuffer[TOTALDESTTMPKVBUFFERSZ_KVS], smalluint_t DESTtmpkvbufferstats_offset[NUM_PARTITIONS], smalluint_t DESTtmpkvbufferstats_size[NUM_PARTITIONS]
		{%for sw in context['NUMSUBWORKERS_seq']%}
		,uint512_dt kvbuffer{{sw}}[KVDESTBUFFERSZ_KVS], smalluint_t kvbufferstats_offset_sw{{sw}}[NUM_PARTITIONS], smalluint_t kvbufferstats_size_sw{{sw}}[NUM_PARTITIONS]
		{%endfor%}
		,unsigned int dummy
		);
	#endif 
	#endif
	{%endfor%}
	{%endfor%}
	{%endif%}

	{%if(context['_ACTSACCEL3'] == 1)%}
	{%for ddrs, ddrs_ in zip(context['NUMINSTANCES_seq'], context['INSTANCES_charseq'])%}
	{%for w in context['BUNDLEFACTOR_seq']%}
	#ifdef _ACTSACCEL3
	#ifdef _BUFFERB4WRITE
	void accel3_writemany_bram2tmp_ddr{{ddrs}}_w{{w}}(unsigned int ssdpartitonid, unsigned int beginworkerid
		,uint512_dt DESTtmpkvbuffer[TOTALDESTTMPKVBUFFERSZ_KVS], smalluint_t DESTtmpkvbufferstats_offset[NUM_PARTITIONS], smalluint_t DESTtmpkvbufferstats_size[NUM_PARTITIONS]
		{%for sw in context['NUMSUBWORKERS_seq']%}
		{%for vec in context['VECTOR_SIZE_seq']%}
		,keyvalue_t kvbuffer_sw{{sw}}_vec{{vec}}[KVDESTBUFFERSZ_KVS]
		{%endfor%}
		,smalluint_t kvbufferstats_offset_sw{{sw}}[NUM_PARTITIONS], smalluint_t kvbufferstats_size_sw{{sw}}[NUM_PARTITIONS]
		{%endfor%}
		,unsigned int dummy
		);
	#endif 
	#endif
	{%endfor%}
	{%endfor%}
	{%endif%}

	{%for ddrs, ddrs_ in zip(context['NUMINSTANCES_seq'], context['INSTANCES_charseq'])%}
	{%for w in context['BUNDLEFACTOR_seq']%}
	#ifdef _BUFFERB4WRITE
	void writemany_bram2dram_ddr{{ddrs}}_w{{w}}(unsigned int ssdpartitonid, unsigned int beginworkerid, uint512_dt * kvdram, metadata_t kvdeststats_tmp[NUM_PARTITIONS], smallmetadata_t DESTtmpkvbuffer_weof[NUM_PARTITIONS], unsigned int baseaddr_kvs, unsigned int currentLOP, unsigned int destpartitionoffset
		{%for sw in context['NUMSUBWORKERS_seq']%}
		,uint512_dt kvbuffer{{sw}}[KVDESTBUFFERSZ_KVS], smalluint_t kvbufferstats_offset{{sw}}[NUM_PARTITIONS], smalluint_t kvbufferstats_size{{sw}}[NUM_PARTITIONS]
		{%endfor%}
		,unsigned int ibegin_kvs, unsigned int iend_kvs
		);
	#endif 
	{%endfor%}
	{%endfor%}

	// WRITE TMP 2 DRAM
	{%for ddrs, ddrs_ in zip(context['NUMINSTANCES_seq'], context['INSTANCES_charseq'])%}
	{%for w in context['BUNDLEFACTOR_seq']%}
	#ifdef _BUFFERB4WRITE
	void write_tmp2dram_ddr{{ddrs}}_w{{w}}(unsigned int ssdpartitonid, unsigned int workerid, unsigned int currentLOP, unsigned int destpartitionoffset, 
			uint512_dt * kvdram, metadata_t kvdeststats_tmp[NUM_PARTITIONS], uint512_dt DESTtmpkvbuffer[TOTALDESTTMPKVBUFFERSZ_KVS], smallmetadata_t DESTtmpkvbuffer_weof[NUM_PARTITIONS], unsigned int baseaddr_kvs, unsigned int ibegin_kvs, unsigned int iend_kvs);
	#endif 
	{%endfor%}
	{%endfor%}

	{%if(context['_ACTSACCEL1'] == 1)%}
	{%for ddrs, ddrs_ in zip(context['NUMINSTANCES_seq'], context['INSTANCES_charseq'])%}
	{%for w in context['BUNDLEFACTOR_seq']%}
	#ifdef _ACTSACCEL1
	#ifdef _BUFFERB4WRITE
	void accel1_write_tmp2dram_ddr{{ddrs}}_w{{w}}(unsigned int ssdpartitonid, unsigned int workerid
			,uint512_dt * kvdram, metadata_t kvdeststats_tmp[NUM_PARTITIONS]
			,uint512_dt DESTtmpkvbuffer[TOTALDESTTMPKVBUFFERSZ_KVS], smalluint_t DESTtmpkvbufferstats_offset[NUM_PARTITIONS], smalluint_t DESTtmpkvbufferstats_size[NUM_PARTITIONS]
			,unsigned int baseaddr_kvs);
	#endif
	#endif
	{%endfor%}
	{%endfor%}
	{%endif%}

	{%if(context['_ACTSACCEL3'] == 1)%}
	{%for ddrs, ddrs_ in zip(context['NUMINSTANCES_seq'], context['INSTANCES_charseq'])%}
	{%for w in context['BUNDLEFACTOR_seq']%}
	#ifdef _ACTSACCEL3
	#ifdef _BUFFERB4WRITE
	void accel3_write_tmp2dram_ddr{{ddrs}}_w{{w}}(unsigned int ssdpartitonid, unsigned int workerid
			,uint512_dt * kvdram, metadata_t kvdeststats_tmp[NUM_PARTITIONS]
			,uint512_dt DESTtmpkvbuffer[TOTALDESTTMPKVBUFFERSZ_KVS], smalluint_t DESTtmpkvbufferstats_offset[NUM_PARTITIONS], smalluint_t DESTtmpkvbufferstats_size[NUM_PARTITIONS]
			,unsigned int baseaddr_kvs);
	#endif
	#endif
	{%endfor%}
	{%endfor%}
	{%endif%}

	#ifdef PROCESSEDGES_DUMMYSTREAMINGMODE // DummyStreaming
	{%for ddrs, ddrs_ in zip(context['NUMINSTANCES_seq'], context['INSTANCES_charseq'])%}	
	void topkernel_instancePE{{ddrs}}(
			unsigned int command,
			unsigned int ssdpartitonid,
			uint512_dt * kvdram_src,
			uint512_dt * kvdram_dest,
			unsigned int paddedkvdatabatchsz_kvs,
			unsigned int vsize,
			unsigned int dramID
			);
	{%endfor%}
	#endif 
	#ifdef PROCESSEDGES_STREAMINGMODE // Streaming
	{%for ddrs, ddrs_ in zip(context['NUMINSTANCES_seq'], context['INSTANCES_charseq'])%}	
	void topkernel_instancePE{{ddrs}}(
			unsigned int command,
			unsigned int IterCount,
			unsigned int ssdpartitonid,
			uint512_dt * kvdram_src,
			uint512_dt * kvdram_dest,
			unsigned int paddedkvdatabatchsz_kvs,
			unsigned int vsize,
			unsigned int dramID
			);
	{%endfor%}
	#endif 
	#ifdef PROCESSEDGES_CONTIGUOUSMODE // Contiguous
	{%for ddrs, ddrs_ in zip(context['NUMINSTANCES_seq'], context['INSTANCES_charseq'])%}	
	void topkernel_instancePE{{ddrs}}(
			unsigned int command,
			unsigned int IterCount,
			unsigned int ssdpartitonid,
			uint512_dt * kvdram_src,
			uint512_dt * kvdram_dest,
			unsigned int paddedkvdatabatchsz_kvs,
			unsigned int vsize,
			unsigned int dramID
			);
	{%endfor%}
	#endif
	#ifdef PROCESSEDGES_RANDOMMODE // Random
	{%for ddrs, ddrs_ in zip(context['NUMINSTANCES_seq'], context['INSTANCES_charseq'])%}	
	void topkernel_instancePE{{ddrs}}(
			unsigned int command,
			unsigned int IterCount,
			unsigned int ssdpartitonid,
			uint512_dt * kvdram_src,
			uint512_dt * kvdram_dest,
			unsigned int paddedkvdatabatchsz_kvs,
			unsigned int vsize,
			unsigned int dramID
			);
	{%endfor%}
	#endif

	{%for ddrs, ddrs_ in zip(context['NUMINSTANCES_seq'], context['INSTANCES_charseq'])%}
	void topkernel_instancePU{{ddrs}}(
			unsigned int command,
			uint512_dt * kvdram,
			metadata_t * kvstats,
			unsigned int treedepth,
			unsigned int finalnumpartitions,
			unsigned int vbegin,
			unsigned int ssdpartitonid,
			unsigned int paddedkvdatabatchsz_kvs
			);
	{%endfor%}

	{%for ddrs, ddrs_ in zip(context['NUMINSTANCES_seq'], context['INSTANCES_charseq'])%}
	void topkernel_instanceAU{{ddrs}}(
			unsigned int command,
			unsigned int IterCount,
			uint512_dt * kvdram,
			metadata_t * kvstats,
			unsigned int treedepth,
			unsigned int finalnumpartitions,
			unsigned int vbegin,
			unsigned int ssdpartitonid,
			unsigned int paddedkvdatabatchsz_kvs
			
			{%if(context['_ACTSACCEL1'] == 1)%}
			#ifdef _ACTSACCEL1
			#ifdef _SHARED_SRCBUFFER
			{%for sw in context['NUMSUBWORKERS_seq']%}
			,uint512_dt srckvbuffer_ddr{{ddrs}}_w0_sw{{sw}}[KVSRCBUFFERSZ_KVS]
			{%endfor%}
			#endif
			#ifdef _SHARED_DESTBUFFER
			{%for sw in context['NUMSUBWORKERS_seq']%}
			,uint512_dt destkvbuffer_ddr{{ddrs}}_w0_sw{{sw}}[KVDESTBUFFERSZ_KVS]
			{%endfor%}
			#endif
			#ifdef _SHARED_DESTBUFFER
			{%for sw in context['NUMSUBWORKERS_seq']%}
			,uint512_dt ovkvs_tmp_ddr{{ddrs}}_w0_sw{{sw}}[NUM_PARTITIONS]
			{%endfor%}
			#endif
			#endif
			{%endif%}
			
			{%if(context['_ACTSACCEL3'] == 1)%}
			#ifdef _ACTSACCEL3
			#ifdef _SHARED_SRCBUFFER
			{%for sw in context['NUMSUBWORKERS_seq']%}
			{%for vec in context['VECTOR_SIZE_seq']%}
			,keyvalue_t srckvbuffer_ddr{{ddrs}}_w0_sw{{sw}}_vec{{vec}}[KVSRCBUFFERSZ_KVS]
			{%endfor%}
			{%endfor%}
			#endif
			#ifdef _SHARED_DESTBUFFER
			{%for sw in context['NUMSUBWORKERS_seq']%}
			{%for vec in context['VECTOR_SIZE_seq']%}
			,keyvalue_t destkvbuffer_ddr{{ddrs}}_w0_sw{{sw}}_vec{{vec}}[KVDESTBUFFERSZ_KVS]
			{%endfor%}
			{%endfor%}
			#endif
			#ifdef _SHARED_DESTBUFFER
			{%for sw in context['NUMSUBWORKERS_seq']%}
			{%for vec in context['VECTOR_SIZE_seq']%}
			,keyvalue_t ovkvs_tmp_ddr{{ddrs}}_w0_sw{{sw}}_vec{{vec}}[NUM_PARTITIONS]
			{%endfor%}
			{%endfor%}
			#endif
			#endif
			{%endif%}
			);
	{%endfor%}
	
private:
	{%for ddrs, ddrs_ in zip(context['NUMINSTANCES_seq'], context['INSTANCES_charseq'])%}
	uint512_dt * _kvdram{{ddrs_}};
	{%endfor%}
	{%for ddrs, ddrs_ in zip(context['NUMINSTANCES_seq'], context['INSTANCES_charseq'])%}
	metadata_t * _kvstats{{ddrs_}};
	{%endfor%}
	{%for ddrs, ddrs_ in zip(context['NUMINSTANCES_seq'], context['INSTANCES_charseq'])%}
	int * _messages{{ddrs_}};
	{%endfor%}
};
#endif 








