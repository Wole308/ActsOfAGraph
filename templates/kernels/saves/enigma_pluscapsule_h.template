#ifndef ENIGMA_H
#define ENIGMA_H
#include "../src/common.h"
{%if(context['XWARE'] != "HW")%}
#include <string>
#include <string.h>
#include <iostream>
#include <vector>
#include <string.h>
#include <stdio.h>
#include <ctime>
#include <functional>
#include <sys/time.h>
#include <time.h>
#include <stdlib.h>
#include <iomanip>
#include <cmath>
#include <fstream>
{%endif%}
#ifdef FPGA_IMPL
#include <ap_int.h>
#endif
using namespace std;

#define COLLECTSTATSPROCESS 5
#define SPREADPROCESS 6

{%if(context['XWARE'] != "HW")%}
#define _LDEBUGMODE_HEADER _DEBUGMODE_HEADER //
{%endif%}

#define LSRCKVBUFFERSZ KVBUFFERSZ
#define LSRCKVBUFFERSZ_KVS (LSRCKVBUFFERSZ / VECTOR_SIZE)

#define LDESTKVBUFFERSZ KVBUFFERSZ
#define LDESTKVBUFFERSZ_KVS (LDESTKVBUFFERSZ / VECTOR_SIZE)

#define LCAPSULEBUFFERSZ LSRCKVBUFFERSZ
#define LCAPSULEBUFFERSZ_KVS (LCAPSULEBUFFERSZ / VECTOR_SIZE)

#define LSTATSBUFFERSZ LSRCKVBUFFERSZ_KVS

#define LKVSTATSBIGBUFFERSZ_KVS KVBUFFERSZ_KVS

typedef unsigned int batch_type;
typedef unsigned int buffer_type;
typedef unsigned int partition_type;
typedef unsigned int code_type;
typedef unsigned int smallint_type;
typedef unsigned int vector_type;
typedef unsigned int code_type;

typedef struct {
	unsigned int coffset;
	unsigned int size;
} coffset_t;

typedef struct {
	unsigned int baseoffset_kvs;
	unsigned int basesize_kvs;
} workoffset_t;

typedef struct {
	unsigned int partitionmodule;
	unsigned int mergemodule;
} runcmd_t;

typedef struct {
	unsigned int processcommand;
	unsigned int partitioncommand;
	unsigned int reducecommand;
	unsigned int iteration_idx;
	unsigned int ssdpartitonid;
	unsigned int vsize;
	unsigned int treedepth;
	unsigned int LLOPnumpartitions;
	unsigned int paddedkvdatabatchszkvs;
	unsigned int IterCount;
	unsigned int baseoffset_kvs;
	unsigned int basesize_kvs;
	unsigned int steps;
	unsigned int finalnumpartitions;
	unsigned int paddedkvdatabatchsz_kvs;
	unsigned int capsulebatchsz_kvs;
	unsigned int vbegin;
} globalparams_t;

typedef struct {
	unsigned int baseaddr_sourcekvs_kvs;
	unsigned int baseaddr_destkvs_kvs;
	unsigned int baseaddr_capsule_kvs;
	unsigned int baseaddr_stats;
	unsigned int num_source_partitions;
	unsigned int nextsourceoffset_partition;
	unsigned int nextdestoffset_partition;
	unsigned int nextsourceoffset_kv;
	unsigned int nextdestoffset_kv;
	unsigned int sourceskipsize_partition;
	unsigned int destskipsize_partition;
	unsigned int sourceskipsize_kv;
	unsigned int destskipsize_kv;
	unsigned int destpartitionrange;
	unsigned int currentLOP;
	unsigned int upperlimit;
} clopparams_t;

typedef struct {
	unsigned int begin_kvs;
	unsigned int size_kvs;
	unsigned int step_kvs;
} partitionparams_t;

typedef struct {
	unsigned int i_kvs;
	unsigned int begin_kvs;
	unsigned int iend_kvs;
	unsigned int skip_kvs;
} travstate_t;

#ifndef FPGA_IMPL
class enigma {
public:
	enigma();
	~enigma();
	#ifdef _LDEBUGMODE_HEADER
	void checkoutofbounds(string message, unsigned int data, unsigned int upper_bound);
	void checkforequal(string message, unsigned int data1, unsigned int data2);
	void print1(string messagea, unsigned int dataa);
	void print4(string messagea, string messageb, string messagec, string messaged, unsigned int dataa, unsigned int datab, unsigned int datac, unsigned int datad);
	void print5(string messagea, string messageb, string messagec, string messaged, string messagee, unsigned int dataa, unsigned int datab, unsigned int datac, unsigned int datad, unsigned int datae);
	void print6(string messagea, string messageb, string messagec, string messaged, string messagee, string messagef, unsigned int dataa, unsigned int datab, unsigned int datac, unsigned int datad, unsigned int datae, unsigned int datef);
	void printkeyvalues(string message, keyvalue_t * keyvalues, unsigned int size);
	void printkeyvalues(string message, keyvalue_t * keyvalues1, keyvalue_t * keyvalues2, unsigned int size);
	void printkeyvalues(string message, uint512_dt * keyvalues, unsigned int size_kvs);
	void getvaluecount(string message, keyvalue_t * keyvalues, unsigned int size);
	void printparameters();
	#endif
	#ifdef _DEBUGMODE_STATS
	void printglobalvars();
	void clearglobalvars();
	void globalstats_countkvstatsread(unsigned int count);
	void globalstats_countkvstatscollected(unsigned int count);
	void globalstats_countkvstatswritten(unsigned int count);
	void globalstats_countkvsread(unsigned int count);
	void globalstats_countkvspartitionswritten(unsigned int count);
	void globalstats_countkvspartitioned(unsigned int count);
	void globalstats_countkvsreduced(unsigned int count);
	void globalstats_countkvsreducewritten(unsigned int count);
	#endif
	
	unsigned int allignup_KV(unsigned int val);
	unsigned int alligndown_KV(unsigned int val);
	unsigned int ceildiv(unsigned int val1, unsigned int val2);
	unsigned int max(unsigned int val1, unsigned int val2);

	vertex_t GETKVDATA_RANGE_PERSSDPARTITION();
	vertex_t GETKVDATA_RANGE_PERSSDPARTITION_POW();
	vertex_t GETAPPLYVERTEXBUFFERSZ_PERSSDPARTITION();
	vertex_t GETAPPLYVERTEXBUFFERSZ_PERSSDPARTITION_KVS();
	unsigned int GETTREEDEPTH();
	unsigned int min(unsigned int A, unsigned int B);
	unsigned int hsub(unsigned int A, unsigned int B);

	unsigned int getpartition(keyvalue_t keyvalue, unsigned int currentLOP, vertex_t upperlimit);
	keyvalue_t getkeyvalue(uint512_dt * buffer, batch_type addr, batch_type maxaddr_kvs);
	keyy_t getkey(uint512_dt * buffer, batch_type addr, batch_type maxaddr_kvs);
	void setkeyvalue(uint512_dt * buffer, batch_type addr, keyvalue_t keyvalue, batch_type maxaddr_kvs);
	void setkey(uint512_dt * buffer, batch_type addr, keyy_t keyy, batch_type maxaddr_kvs);
	
	buffer_type getactivesize(buffer_type i, batch_type i_end, buffer_type buffersize);
	batch_type getAddr(batch_type addr);
	batch_type getstatsAddr(batch_type addr);
	
	unsigned int getsourceskipsize(unsigned int currentLOP, unsigned int param);
	unsigned int getdestskipsize(unsigned int currentLOP, unsigned int param);

	void loaddeststats(keyvalue_t * kvstats, keyvalue_t buffer[NUM_PARTITIONS], unsigned int partitionoffset, unsigned int currentLOP, vertex_t LLOPnumpartitions);
	void storedeststats(keyvalue_t * kvstats, keyvalue_t buffer[NUM_PARTITIONS], unsigned int partitionoffset, unsigned int currentLOP, vertex_t LLOPnumpartitions);

	unsigned int get_num_source_partitions(unsigned int currentLOP);
	
	buffer_type getglobalcapsuleoffset_kvs(travstate_t travstate);
	buffer_type getlocalcapsuleoffset_kvs(travstate_t travstate);
	buffer_type getglobalcapsulebufferoffset_kvs(travstate_t travstate);
	bool enablecapsuleread(travstate_t travstate);
	bool enablecapsulewrite(travstate_t travstate);
	
	void preparecapsule(uint512_dt * buffer, buffer_type sizes[NUM_PARTITIONS], buffer_type offset_kvs);
	
	void loadclopparams(globalparams_t globalparams, clopparams_t * llopparams, unsigned int currentLOP);
	
	unsigned int reducefunc(keyy_t vid, value_t value, value_t edgeval, unsigned int IterCount);

	{%for ddrs, ddrs_ in zip(context['NUMINSTANCES_seq'], context['INSTANCES_charseq'])%}
	{%for w in context['BUNDLEFACTOR_seq']%}
	{%for sw in context['NUMSUBWORKERS_seq']%}
	void readkeyvaluesets_ddr{{ddrs}}_w{{w}}_sw{{sw}}(uint512_dt * kvdram, uint512_dt * buffer, batch_type baseaddress_kvs, batch_type localoffset_kvs, batch_type size_kvs, globalparams_t globalparams);
	{%endfor%}
	{%endfor%}
	{%endfor%}
	
	{%for ddrs, ddrs_ in zip(context['NUMINSTANCES_seq'], context['INSTANCES_charseq'])%}
	{%for w in context['BUNDLEFACTOR_seq']%}
	{%for sw in context['NUMSUBWORKERS_seq']%}
	void extractcapsule_ddr{{ddrs}}_w{{w}}_sw{{sw}}(uint512_dt sourcebuffer[LSRCKVBUFFERSZ_KVS], uint512_dt capsule[LCAPSULEBUFFERSZ_KVS], travstate_t travstate, globalparams_t globalparams, clopparams_t llopparams, partitionparams_t partitionparams);
	{%endfor%}
	{%endfor%}
	{%endfor%}	
	{%for ddrs, ddrs_ in zip(context['NUMINSTANCES_seq'], context['INSTANCES_charseq'])%}
	{%for w in context['BUNDLEFACTOR_seq']%}
	{%for sw in context['NUMSUBWORKERS_seq']%}
	void partition_ddr{{ddrs}}_w{{w}}_sw{{sw}}(uint512_dt sourcebuffer[LSRCKVBUFFERSZ_KVS], uint512_dt capsule[LCAPSULEBUFFERSZ_KVS], uint512_dt resultbuffer[LDESTKVBUFFERSZ_KVS], travstate_t travstate, globalparams_t globalparams, clopparams_t llopparams, partitionparams_t partitionparams);
	{%endfor%}
	{%endfor%}
	{%endfor%}
	{%for ddrs, ddrs_ in zip(context['NUMINSTANCES_seq'], context['INSTANCES_charseq'])%}
	{%for w in context['BUNDLEFACTOR_seq']%}
	{%for sw in context['NUMSUBWORKERS_seq']%}
	void reduce_ddr{{ddrs}}_w{{w}}_sw{{sw}}(uint512_dt sourcebuffer[LSRCKVBUFFERSZ_KVS], uint512_dt resultbuffer[LDESTKVBUFFERSZ_KVS], travstate_t travstate, globalparams_t globalparams, clopparams_t llopparams, partitionparams_t partitionparams);
	{%endfor%}
	{%endfor%}
	{%endfor%}
	
	{%for ddrs, ddrs_ in zip(context['NUMINSTANCES_seq'], context['INSTANCES_charseq'])%}
	{%for w in context['BUNDLEFACTOR_seq']%}
	{%for sw in context['NUMSUBWORKERS_seq']%}
	void writekeyvaluesets_ddr{{ddrs}}_w{{w}}_sw{{sw}}(uint512_dt * kvdram, uint512_dt buffer[LSRCKVBUFFERSZ_KVS], batch_type baseoffset_kvs, batch_type localoffset_kvs, batch_type size_kvs, globalparams_t globalparams);
	{%endfor%}
	{%endfor%}
	{%endfor%}
	{%for ddrs, ddrs_ in zip(context['NUMINSTANCES_seq'], context['INSTANCES_charseq'])%}
	{%for w in context['BUNDLEFACTOR_seq']%}
	{%for sw in context['NUMSUBWORKERS_seq']%}
	void writekvpartitions_ddr{{ddrs}}_w{{w}}_sw{{sw}}(uint512_dt * kvdram, uint512_dt buffer[LDESTKVBUFFERSZ_KVS], uint512_dt capsule[LCAPSULEBUFFERSZ_KVS], keyvalue_t gstats[NUM_PARTITIONS], batch_type baseaddress_kvs, travstate_t travstate, globalparams_t globalparams, clopparams_t llopparams, partitionparams_t partitionparams);					
	{%endfor%}
	{%endfor%}
	{%endfor%}
	
	{%for ddrs, ddrs_ in zip(context['NUMINSTANCES_seq'], context['INSTANCES_charseq'])%}
	{%for w in context['BUNDLEFACTOR_seq']%}
	{%for sw in context['NUMSUBWORKERS_seq']%}
	void resetbuffer{{ddrs}}_w{{w}}_sw{{sw}}(uint512_dt * buffer);
	{%endfor%}
	{%endfor%}
	{%endfor%}
	
	{%for ddrs, ddrs_ in zip(context['NUMINSTANCES_seq'], context['INSTANCES_charseq'])%}
	{%for w in context['BUNDLEFACTOR_seq']%}
	void readmanykvsets_ddr{{ddrs}}_w{{w}}(uint512_dt * kvdram, {%for sw in context['NUMSUBWORKERS_seq']%} uint512_dt buffer{{sw}}[LSRCKVBUFFERSZ_KVS],{%endfor%} travstate_t travstate, globalparams_t globalparams, clopparams_t llopparams, partitionparams_t partitionparams);
	{%endfor%}
	{%endfor%}
	{%for ddrs, ddrs_ in zip(context['NUMINSTANCES_seq'], context['INSTANCES_charseq'])%}
	{%for w in context['BUNDLEFACTOR_seq']%}
	void readmanycapsules_ddr{{ddrs}}_w{{w}}(uint512_dt * kvdram, {%for sw in context['NUMSUBWORKERS_seq']%} uint512_dt capsulebuffer{{sw}}[LSRCKVBUFFERSZ_KVS],{%endfor%} travstate_t travstate, globalparams_t globalparams, clopparams_t llopparams, partitionparams_t partitionparams);
	{%endfor%}
	{%endfor%}
	{%for ddrs, ddrs_ in zip(context['NUMINSTANCES_seq'], context['INSTANCES_charseq'])%}
	{%for w in context['BUNDLEFACTOR_seq']%}
	void readmanyAkvs_ddr{{ddrs}}_w{{w}}(uint512_dt * kvdram, {%for sw in context['NUMSUBWORKERS_seq']%} uint512_dt buffer{{sw}}[LSRCKVBUFFERSZ_KVS],{%endfor%} keyvalue_t kvstatsbuffer[NUMSUBWORKERS_APPLYPH], travstate_t travstate, globalparams_t globalparams, clopparams_t llopparams, partitionparams_t partitionparams);
	{%endfor%}
	{%endfor%}
	
	{%for ddrs, ddrs_ in zip(context['NUMINSTANCES_seq'], context['INSTANCES_charseq'])%}
	{%for w in context['BUNDLEFACTOR_seq']%}
	void extractmanycapsules_ddr{{ddrs}}_w{{w}}({%for sw in context['NUMSUBWORKERS_seq']%} uint512_dt sourcebuffer{{sw}}[LSRCKVBUFFERSZ_KVS],{%endfor%} {%for sw in context['NUMSUBWORKERS_seq']%} uint512_dt capsule{{sw}}[LSRCKVBUFFERSZ_KVS],{%endfor%} travstate_t travstate, globalparams_t globalparams, clopparams_t llopparams, partitionparams_t partitionparams);
	{%endfor%}
	{%endfor%}
	{%for ddrs, ddrs_ in zip(context['NUMINSTANCES_seq'], context['INSTANCES_charseq'])%}
	{%for w in context['BUNDLEFACTOR_seq']%}
	void partitionmany_ddr{{ddrs}}_w{{w}}({%for sw in context['NUMSUBWORKERS_seq']%} uint512_dt sourcebuffer{{sw}}[LSRCKVBUFFERSZ_KVS],{%endfor%} {%for sw in context['NUMSUBWORKERS_seq']%} uint512_dt capsule{{sw}}[LSRCKVBUFFERSZ_KVS],{%endfor%} {%for sw in context['NUMSUBWORKERS_seq']%} uint512_dt resultbuffer{{sw}}[LDESTKVBUFFERSZ_KVS],{%endfor%} travstate_t travstate, globalparams_t globalparams, clopparams_t llopparams, partitionparams_t partitionparams);				
	{%endfor%}
	{%endfor%}
	{%for ddrs, ddrs_ in zip(context['NUMINSTANCES_seq'], context['INSTANCES_charseq'])%}
	{%for w in context['BUNDLEFACTOR_seq']%}
	void reducemany_ddr{{ddrs}}_w{{w}}({%for sw in context['NUMSUBWORKERS_seq']%} uint512_dt sourcebuffer{{sw}}[LSRCKVBUFFERSZ_KVS],{%endfor%} {%for sw in context['NUMSUBWORKERS_seq']%} uint512_dt resultbuffer{{sw}}[LDESTKVBUFFERSZ_KVS],{%endfor%} travstate_t travstate, globalparams_t globalparams, clopparams_t llopparams, partitionparams_t partitionparams);		
	{%endfor%}
	{%endfor%}
	
	{%for ddrs, ddrs_ in zip(context['NUMINSTANCES_seq'], context['INSTANCES_charseq'])%}
	{%for w in context['BUNDLEFACTOR_seq']%}
	void writemanycapsules_ddr{{ddrs}}_w{{w}}(uint512_dt * kvdram, {%for sw in context['NUMSUBWORKERS_seq']%} uint512_dt capsule{{sw}}[LSRCKVBUFFERSZ_KVS],{%endfor%} travstate_t travstate, globalparams_t globalparams, clopparams_t llopparams, partitionparams_t partitionparams);
	{%endfor%}
	{%endfor%}
	{%for ddrs, ddrs_ in zip(context['NUMINSTANCES_seq'], context['INSTANCES_charseq'])%}
	{%for w in context['BUNDLEFACTOR_seq']%}
	void writemanykvspartitions_ddr{{ddrs}}_w{{w}}(uint512_dt * kvdram, {%for sw in context['NUMSUBWORKERS_seq']%} uint512_dt buffer{{sw}}[LDESTKVBUFFERSZ_KVS],{%endfor%} {%for sw in context['NUMSUBWORKERS_seq']%} uint512_dt capsule{{sw}}[LSRCKVBUFFERSZ_KVS],{%endfor%} keyvalue_t gstats[NUM_PARTITIONS], travstate_t travstate, globalparams_t globalparams, clopparams_t llopparams, partitionparams_t partitionparams);
	{%endfor%}
	{%endfor%}
	{%for ddrs, ddrs_ in zip(context['NUMINSTANCES_seq'], context['INSTANCES_charseq'])%}
	{%for w in context['BUNDLEFACTOR_seq']%}
	void writemanykvsets_ddr{{ddrs}}_w{{w}}(uint512_dt * kvdram, {%for sw in context['NUMSUBWORKERS_seq']%} uint512_dt buffer{{sw}}[LDESTKVBUFFERSZ_KVS],{%endfor%} travstate_t travstate, globalparams_t globalparams, clopparams_t llopparams, partitionparams_t partitionparams);
	{%endfor%}
	{%endfor%}
	
	{%for ddrs, ddrs_ in zip(context['NUMINSTANCES_seq'], context['INSTANCES_charseq'])%}
	void generatepartitions{{ddrs}}(uint512_dt * kvdram, keyvalue_t * kvstats, globalparams_t globalparams);
	{%endfor%}
	{%for ddrs, ddrs_ in zip(context['NUMINSTANCES_seq'], context['INSTANCES_charseq'])%}
	void reducepartitions{{ddrs}}(uint512_dt * kvdram, keyvalue_t * kvstats, globalparams_t globalparams);
	{%endfor%}
	
	void topkernel(
		{%for ddrs, ddrs_ in zip(context['NUMINSTANCES_seq'], context['INSTANCES_charseq'])%}
		{%if(ddrs==0)%}{%else%},{%endif%}uint512_dt * kvsetdram{{ddrs_}}
		{%endfor%}
		{%for ddrs, ddrs_ in zip(context['NUMINSTANCES_seq'], context['INSTANCES_charseq'])%}
		,keyvalue_t * kvdram{{ddrs_}}
		{%endfor%}
        );
private:
};
#endif 
#endif 








