#include "{{context['PROJECT_BASEPATH']}}/src/common.h"
{%if(context['XWARE'] != "HW")%}
#include <string>
#include <string.h>
#include <iostream>
#include <vector>
#include <string.h>
#include <stdio.h>
#include <ctime>
#include <functional>
#include <sys/time.h>
#include <time.h>
#include <stdlib.h>
#include <iomanip>
#include <cmath>
#include <fstream>
{%endif%}
#include "{{context['PROJECT_BASEPATH']}}/kernels/enigma.h"
using namespace std;

#define DRAMLIMITSZ (1 << 26)
#define DRAMLIMITSZ_KVS (FORCDFINISH_DRAMSZ / VECTOR_SIZE)

#ifndef FPGA_IMPL
enigma::enigma(){}
enigma::~enigma(){}
#endif
#ifndef HW

unsigned int globalvar_totalkvstatsread;
unsigned int globalvar_totalkvsreadV;

unsigned int globalvar_totalkvstatscollected;
unsigned int globalvar_totalkvstatswritten;

unsigned int globalvar_totalkvsread;

unsigned int globalstats_totalkvspartitioned;
unsigned int globalstats_totalkvspartitionswritten;

unsigned int globalstats_totalkvsreduced;
unsigned int globalstats_totalkvsreducewritten;
#endif 
#ifdef _LDEBUGMODE_HEADER
void {%if(context['XWARE'] == "SW")%}enigma::{%endif%}checkoutofbounds(string message, unsigned int data, unsigned int upper_bound){
	if(data > upper_bound){ std::cout<<"enigma::checkoutofbounds: ERROR. out of bounds. message: "<<message<<", data: "<<data<<", upper_bound: "<<upper_bound<<std::endl; exit(EXIT_FAILURE); }
}
void {%if(context['XWARE'] == "SW")%}enigma::{%endif%}checkforequal(string message, unsigned int data1, unsigned int data2){
	if(data1 == data2){ cout<<"enigma::checkforequal: ERROR. data1 == data2. message: "<<message<<", data1: "<<data1<<", data2: "<<data2<<endl; exit(EXIT_FAILURE); }
}
void {%if(context['XWARE'] == "SW")%}enigma::{%endif%}print1(string messagea, unsigned int dataa){
	cout<<messagea<<": "<<dataa<<endl;
}
void {%if(context['XWARE'] == "SW")%}enigma::{%endif%}print4(string messagea, string messageb, string messagec, string messaged, unsigned int dataa, unsigned int datab, unsigned int datac, unsigned int datad){
	cout<<messagea<<": "<<dataa<<", "<<messageb<<": "<<datab<<", "<<messagec<<": "<<datac<<", "<<messaged<<": "<<datad<<endl;
}
void {%if(context['XWARE'] == "SW")%}enigma::{%endif%}print5(string messagea, string messageb, string messagec, string messaged, string messagee, unsigned int dataa, unsigned int datab, unsigned int datac, unsigned int datad, unsigned int datae){
	cout<<messagea<<": "<<dataa<<", "<<messageb<<": "<<datab<<", "<<messagec<<": "<<datac<<", "<<messaged<<": "<<datad<<", "<<messagee<<": "<<datae<<endl;
}
void {%if(context['XWARE'] == "SW")%}enigma::{%endif%}print6(string messagea, string messageb, string messagec, string messaged, string messagee, string messagef, unsigned int dataa, unsigned int datab, unsigned int datac, unsigned int datad, unsigned int datae, unsigned int datef){
	cout<<messagea<<": "<<dataa<<", "<<messageb<<": "<<datab<<", "<<messagec<<": "<<datac<<", "<<messaged<<": "<<datad<<", "<<messagee<<": "<<datae<<", "<<messagef<<": "<<datef<<endl;
}
void {%if(context['XWARE'] == "SW")%}enigma::{%endif%}printkeyvalues(string message, keyvalue_t * keyvalues, unsigned int size){
	cout<<endl<<"printkeyvalues:"<<message<<endl;
	for(unsigned int p=0; p<size; p++){ cout<<"keyvalues["<<p<<"].key: "<<keyvalues[p].key<<", keyvalues["<<p<<"].value: "<<keyvalues[p].value<<endl; }
}
void {%if(context['XWARE'] == "SW")%}enigma::{%endif%}printkeyvalues(string message, keyvalue_t * keyvalues1, keyvalue_t * keyvalues2, unsigned int size){
	cout<<endl<<"printkeyvalues:"<<message<<endl;
	for(unsigned int p=0; p<size; p++){ cout<<"["<<keyvalues1[p].key<<":"<<keyvalues1[p].value<<"]["<<keyvalues2[p].key<<":"<<keyvalues2[p].value<<"]"<<endl; }
}
void {%if(context['XWARE'] == "SW")%}enigma::{%endif%}printkeyvalues(string message, uint512_dt * keyvalues, unsigned int size_kvs){
	cout<<endl<<"printkeyvalues:"<<message<<endl;
	for(unsigned int i=0; i<size_kvs; i++){ 
		#ifdef _WIDEWORD
		{%for v in context['VECTOR_SIZE_seq']%}
			cout<<"keyvalues["<<i<<"].data[{{v}}].key: "<<(unsigned int)keyvalues[i].range({{32 * ((v * 2) + 1) - 1}}, {{(v * 2) * 32}})<<", keyvalues["<<i<<"].data[{{v}}].value: "<<(unsigned int)keyvalues[i].range({{32 * (((v * 2) + 1) + 1) - 1}}, {{(v * 2 + 1) * 32}})<<endl;
		{%endfor%}
		#else 
		for(unsigned int v=0; v<VECTOR_SIZE; v++){ cout<<"keyvalues["<<i<<"].data["<<v<<"].key: "<<keyvalues[i].data[v].key<<", keyvalues["<<i<<"].data["<<v<<"].value: "<<keyvalues[i].data[v].value<<endl; }
		#endif 
	}
}
void {%if(context['XWARE'] == "SW")%}enigma::{%endif%}getvaluecount(string message, keyvalue_t * keyvalues, unsigned int size){
	unsigned int totalnumkeyvalues = 0;
	for(unsigned int p=0; p<size; p++){ totalnumkeyvalues += keyvalues[p].value; }
	cout<<"total values counted: "<<totalnumkeyvalues<<endl;
}
void countkeyvalues(){

}
void {%if(context['XWARE'] == "SW")%}enigma::{%endif%}printparameters(){
	cout<<endl<<"enigma::printparameters: test started."<<endl;
	cout<<"enigma::printparameters:: KVDATA_BATCHSIZE: "<<KVDATA_BATCHSIZE<<endl;
	cout<<"enigma::printparameters:: KVDATA_BATCHSIZE_KVS: "<<KVDATA_BATCHSIZE_KVS<<endl;
	
	cout<<"enigma::printparameters:: BUFFER_SIZE: "<<BUFFER_SIZE<<endl;
	cout<<"enigma::printparameters:: PADDEDBUFFER_SIZE: "<<PADDEDBUFFER_SIZE<<endl;
	
	cout<<"enigma::printparameters:: KVDRAMSZ: "<<KVDRAMSZ<<endl;
	cout<<"enigma::printparameters:: KVDRAMSZ_KVS: "<<KVDRAMSZ_KVS<<endl;
	
	cout<<"enigma::printparameters:: KVSOURCEDRAMSZ: "<<KVSOURCEDRAMSZ<<endl;
	cout<<"enigma::printparameters:: KVSOURCEDRAMSZ_KVS: "<<KVSOURCEDRAMSZ_KVS<<endl;
	
	cout<<"enigma::printparameters:: PADDEDKVSOURCEDRAMSZ: "<<PADDEDKVSOURCEDRAMSZ<<endl;
	cout<<"enigma::printparameters:: PADDEDKVSOURCEDRAMSZ_KVS: "<<PADDEDKVSOURCEDRAMSZ_KVS<<endl;
}
#endif
#ifdef _DEBUGMODE_STATS
void {%if(context['XWARE'] == "SW")%}enigma::{%endif%}printglobalvars(){
	cout<<"printglobalvars: "<<endl;
	cout<<"enigma::printglobalvars:: COLLECTSTATS & SPREAD & PARTITION:: globalvar_totalkvsread: "<<globalvar_totalkvsread<<endl;
	cout<<"enigma::printglobalvars:: COLLECTSTATS & SPREAD & PARTITION:: globalvar_totalkvsreadV: "<<globalvar_totalkvsreadV<<endl;
	
	cout<<"enigma::printglobalvars:: COLLECTSTATS:: globalvar_totalkvstatsread: "<<globalvar_totalkvstatsread<<endl;
	cout<<"enigma::printglobalvars:: COLLECTSTATS:: globalvar_totalkvstatscollected: "<<globalvar_totalkvstatscollected<<endl;
	cout<<"enigma::printglobalvars:: COLLECTSTATS:: globalvar_totalkvstatswritten: "<<globalvar_totalkvstatswritten<<endl;	

	cout<<"enigma::printglobalvars:: SPREAD:: globalstats_totalkvspartitioned: "<<globalstats_totalkvspartitioned<<endl;
	cout<<"enigma::printglobalvars:: SPREAD:: globalstats_totalkvspartitionswritten: "<<globalstats_totalkvspartitionswritten<<endl;
	
	cout<<"enigma::printglobalvars:: REDUCE:: globalstats_totalkvsreduced: "<<globalstats_totalkvsreduced<<endl;
	cout<<"enigma::printglobalvars:: REDUCE:: globalstats_totalkvsreducewritten: "<<globalstats_totalkvsreducewritten<<endl;
}
void {%if(context['XWARE'] == "SW")%}enigma::{%endif%}clearglobalvars(){
	cout<<"clearglobalvars: "<<endl;
	globalvar_totalkvsread = 0;
	globalstats_totalkvspartitionswritten = 0;
	globalstats_totalkvspartitioned = 0;
	globalvar_totalkvstatsread = 0;
	globalvar_totalkvstatscollected = 0;
	globalvar_totalkvstatswritten = 0;
	globalstats_totalkvsreduced = 0;
	globalstats_totalkvsreducewritten = 0;
	globalvar_totalkvsreadV = 0;
}
void {%if(context['XWARE'] == "SW")%}enigma::{%endif%}globalstats_countkvstatsread(unsigned int count){
	globalvar_totalkvstatsread += count;
	return;
}
void {%if(context['XWARE'] == "SW")%}enigma::{%endif%}globalstats_countkvstatscollected(unsigned int count){
	globalvar_totalkvstatscollected += count;
	return;
}
void {%if(context['XWARE'] == "SW")%}enigma::{%endif%}globalstats_countkvstatswritten(unsigned int count){
	globalvar_totalkvstatswritten += count;
	return;
}
void {%if(context['XWARE'] == "SW")%}enigma::{%endif%}globalstats_countkvsread(unsigned int count){
	globalvar_totalkvsread += count;
	return;
}
void {%if(context['XWARE'] == "SW")%}enigma::{%endif%}globalstats_countkvspartitionswritten(unsigned int count){
	globalstats_totalkvspartitionswritten += count;
	return;
}
void {%if(context['XWARE'] == "SW")%}enigma::{%endif%}globalstats_countkvspartitioned(unsigned int count){
	globalstats_totalkvspartitioned += count;
	return;
}
void {%if(context['XWARE'] == "SW")%}enigma::{%endif%}globalstats_countkvsreduced(unsigned int count){
	globalstats_totalkvsreduced += count;
	return;
}
void {%if(context['XWARE'] == "SW")%}enigma::{%endif%}globalstats_countkvsreducewritten(unsigned int count){
	globalstats_totalkvsreducewritten += count;
	return;
}
void {%if(context['XWARE'] == "SW")%}enigma::{%endif%}globalstats_countkvsreadV(unsigned int count){
	globalvar_totalkvsreadV += count;
	return;
}
#endif 

unsigned int {%if(context['XWARE'] == "SW")%}enigma::{%endif%}allignhigher_KV(unsigned int val){
	unsigned int fac = (val + (VECTOR_SIZE - 1)) / VECTOR_SIZE;
	return (fac * VECTOR_SIZE);
}
unsigned int {%if(context['XWARE'] == "SW")%}enigma::{%endif%}allignlower_KV(unsigned int val){
	unsigned int fac = val / VECTOR_SIZE;
	return (fac * VECTOR_SIZE);
}
unsigned int {%if(context['XWARE'] == "SW")%}enigma::{%endif%}ceildiv(unsigned int val1, unsigned int val2){
	return (val1 + (val2 - 1)) / val2;
}	
unsigned int {%if(context['XWARE'] == "SW")%}enigma::{%endif%}max(unsigned int val1, unsigned int val2){
	if(val1 > val2){ return val1; }
	else { return val2; }
}
unsigned int {%if(context['XWARE'] == "SW")%}enigma::{%endif%}min(unsigned int A, unsigned int B){
	#pragma HLS INLINE
	if(A<B){ return A; }
	else { return B; }
}
unsigned int {%if(context['XWARE'] == "SW")%}enigma::{%endif%}hsub(unsigned int A, unsigned int B){
	#pragma HLS INLINE
	if(A < B){ return 0; }
	else { return A - B; }
}

unsigned int {%if(context['XWARE'] == "SW")%}enigma::{%endif%}getpartition(keyvalue_t keyvalue, unsigned int currentLOP, vertex_t upperlimit){
	// return 0;
	partition_type hashedval = 0;
	hashedval = ((keyvalue.key - upperlimit) >> (KVDATA_RANGE_PERSSDPARTITION_POW - (NUM_PARTITIONS_POW * currentLOP)));
	
	int KKK = (((1 << NUM_PARTITIONS_POW) - 1) & (hashedval >> (1 - 1)));
	// if(KKK >= NUM_PARTITIONS){ cout<<"--- getpartition: KKK: "<<KKK<<endl; exit(EXIT_FAILURE); }
	
	
	// return (hashedval % NUM_PARTITIONS); // REMOVEME.
	return (((1 << NUM_PARTITIONS_POW) - 1) & (hashedval >> (1 - 1))); // REMOVEME.
	// if(hashedval >= NUM_PARTITIONS){ hashedval = 0; }
	return hashedval;
}
keyvalue_t {%if(context['XWARE'] == "SW")%}enigma::{%endif%}getkeyvalue(uint512_dt buffer[BUFFER_SIZE], batch_type addr, batch_type maxaddr_kvs){
	#pragma HLS INLINE
	keyvalue_t keyvalue;
	batch_type idy = addr / VECTOR_SIZE;
	vector_type idx = addr % VECTOR_SIZE;
	#ifdef _DEBUGMODE_CHECKS2
	if(idy >= maxaddr_kvs){ cout<<"getkeyvalue:: ERROR 45. addr: "<<addr<<", idy: "<<idy<<", idx: "<<idx<<endl; exit(EXIT_FAILURE); }
	checkoutofbounds("enigma::getkeyvalue 35", idy, maxaddr_kvs);
	#endif
	
	#ifdef _WIDEWORD
	{%for v in context['VECTOR_SIZE_seq']%}
	{%if(v>0)%}else {%endif%}if(idx=={{v}}){	
		keyvalue.key = buffer[idy].range({{32 * ((v * 2) + 1) - 1}}, {{(v * 2) * 32}});
		keyvalue.value = buffer[idy].range({{32 * (((v * 2) + 1) + 1) - 1}}, {{(v * 2 + 1) * 32}});
	}
	{%endfor%}
	else {
		#ifdef _DEBUGMODE_CHECKS2
		std::cout<<"getkeyvalue:: out-of-bounds 45. "<<std::endl;
		exit(EXIT_FAILURE);
		#endif 
	}
	#else
	keyvalue = buffer[idy].data[idx];
	#endif
	return keyvalue;
}
void {%if(context['XWARE'] == "SW")%}enigma::{%endif%}setkeyvalue(uint512_dt buffer[BUFFER_SIZE], batch_type addr, keyvalue_t keyvalue, batch_type maxaddr_kvs){
	#pragma HLS INLINE
	batch_type idy = addr / VECTOR_SIZE;
	vector_type idx = addr % VECTOR_SIZE;
	#ifdef _DEBUGMODE_CHECKS2
	checkoutofbounds("enigma::setkeyvalue 35", idy, maxaddr_kvs);
	#endif
	
	#ifdef _WIDEWORD
	{%for v in context['VECTOR_SIZE_seq']%}
	{%if(v>0)%}else {%endif%}if(idx=={{v}}){	
		buffer[idy].range({{32 * ((v * 2) + 1) - 1}}, {{(v * 2) * 32}}) = keyvalue.key;
		buffer[idy].range({{32 * (((v * 2) + 1) + 1) - 1}}, {{(v * 2 + 1) * 32}}) = keyvalue.value;
	}
	{%endfor%}
	else {
		#ifdef _DEBUGMODE_CHECKS2
		std::cout<<"setkventryII:: out-of-bounds 45. "<<std::endl;
		exit(EXIT_FAILURE);
		#endif 
	}
	#else
	buffer[idy].data[idx] = keyvalue;
	#endif
	return;
}

buffer_type {%if(context['XWARE'] == "SW")%}enigma::{%endif%}getactivesize(buffer_type i, batch_type i_end, buffer_type buffersize){	
	#pragma HLS INLINE
	buffer_type activesize = 0;
	buffer_type next_i = i + buffersize;
	if(i >= i_end){ activesize = 0; }
	else if ((i < i_end) && (next_i < i_end)) { activesize = buffersize; }
	else if ((i < i_end) && (next_i >= i_end)) { activesize = i_end - i; }
	else {
		i = 0; 
		#ifdef _DEBUGMODE_CHECKS
		cout<<"getactivesize:: should NEVER get here: activesize: "<<activesize<<", i: "<<i<<", next_i: "<<next_i<<", i_end: "<<i_end<<endl;
		exit(EXIT_FAILURE);
		#endif
	}
	#ifdef _DEBUGMODE_KERNELPRINTS
	print4("getactivesize: i", "i_end", "buffersize", "activesize", i, i_end, buffersize, activesize);
	#endif
	return activesize;
}
batch_type {%if(context['XWARE'] == "SW")%}enigma::{%endif%}getAddr(batch_type addr){
	#pragma HLS INLINE
	return addr;
}
batch_type {%if(context['XWARE'] == "SW")%}enigma::{%endif%}getstatsAddr(batch_type addr){
	#pragma HLS INLINE
	return BASEOFFSET_STATSDRAM + addr;
}
batch_type {%if(context['XWARE'] == "SW")%}enigma::{%endif%}getmessagesAddr(batch_type addr){
	#pragma HLS INLINE
	return BASEOFFSET_MESSAGESDRAM + addr;
}

unsigned int {%if(context['XWARE'] == "SW")%}enigma::{%endif%}getsourceskipsize(unsigned int currentLOP, unsigned int param){
	#pragma HLS INLINE
	unsigned int treedepth = TREE_DEPTH; // NB: for debugging purposes only
	unsigned int result = param;
	for(unsigned int i=0; i<(currentLOP-1); i++){
	#pragma HLS LOOP_TRIPCOUNT min=0 max=treedepth avg=treedepth
		result = result / NUM_PARTITIONS;
	}
	return result;
}
unsigned int {%if(context['XWARE'] == "SW")%}enigma::{%endif%}getdestskipsize(unsigned int currentLOP, unsigned int param){
	#pragma HLS INLINE
	unsigned int treedepthloop_tripcount = TREE_DEPTH; // NB: for debugging purposes only
	unsigned int result = param / NUM_PARTITIONS;
	for(unsigned int i=0; i<(currentLOP-1); i++){
	#pragma HLS LOOP_TRIPCOUNT min=0 max=treedepthloop_tripcount avg=treedepthloop_tripcount
		result = result / NUM_PARTITIONS;
	}
	return result;
}

void {%if(context['XWARE'] == "SW")%}enigma::{%endif%}loaddeststats(keyvalue_t * kvstats, keyvalue_t buffer[NUM_PARTITIONS], unsigned int partitionoffset, unsigned int currentLOP, vertex_t LLOPnumpartitions){
	#pragma HLS INLINE
	unsigned int skipsize = getdestskipsize(currentLOP, LLOPnumpartitions);
	unsigned int nxtpos = partitionoffset;
	
	LOADDESTSTATS_LOOP1: for(partition_type p=0; p<NUM_PARTITIONS; p++){
	#pragma HLS PIPELINE	
		buffer[p] = kvstats[getstatsAddr(nxtpos)]; 
		nxtpos += skipsize;
	}
	LOADDESTSTATS_LOOP2: for(partition_type p=0; p<NUM_PARTITIONS; p++){
		#pragma HLS PIPELINE
		buffer[p].value = 0;
	}
	return;
}
void {%if(context['XWARE'] == "SW")%}enigma::{%endif%}storedeststats(keyvalue_t * kvstats, keyvalue_t buffer[NUM_PARTITIONS], unsigned int partitionoffset, unsigned int currentLOP, vertex_t LLOPnumpartitions){
	#pragma HLS INLINE
	unsigned int skipsize = getdestskipsize(currentLOP, LLOPnumpartitions);
	unsigned int nxtpos = partitionoffset;
	
	STOREDESTSTATS_LOOP1: for(partition_type p=0; p<NUM_PARTITIONS; p++){
	#pragma HLS PIPELINE
		kvstats[getstatsAddr(nxtpos)].value = buffer[p].value; 
		nxtpos += skipsize;
	}
	STOREDESTSTATS_LOOP2: for(partition_type p=0; p<NUM_PARTITIONS; p++){
		#pragma HLS PIPELINE
		buffer[p].value = 0;
	}
	return;
}

unsigned int {%if(context['XWARE'] == "SW")%}enigma::{%endif%}get_num_source_partitions(unsigned int currentLOP){
	#pragma HLS INLINE
	unsigned int treedepth = TREE_DEPTH;
	unsigned int pow = 1;
	for(unsigned int i=0; i<(currentLOP-1); i++){
	#pragma HLS LOOP_TRIPCOUNT min=0 max=treedepth avg=treedepth
		pow = pow * NUM_PARTITIONS;
	}
	return pow;
}

void {%if(context['XWARE'] == "SW")%}enigma::{%endif%}prepareoffsets(buffer_type sizes[NUM_PARTITIONS], buffer_type offsets[NUM_PARTITIONS]){
	#pragma HLS INLINE	
	// PREPAREOFFSETS{{v}}_LOOP1: for(partition_type p=0; p<NUM_PARTITIONS; p++){ sizes[p] = 0; }
	offsets[0] = 0;
	for (partition_type p = 1; p<NUM_PARTITIONS; p++){ offsets[p] = offsets[p-1] + sizes[p-1]; }
	return;
}
void {%if(context['XWARE'] == "SW")%}enigma::{%endif%}preparecapsule(keyvalue_t capsule[NUM_PARTITIONS]){
	#pragma HLS INLINE
	capsule[0].key = 0;
	PREPARECAPSULE_LOOP1: for (partition_type p = 1; p<NUM_PARTITIONS; p++){ capsule[p].key = capsule[p-1].key + capsule[p-1].value; }
	return;
}
void {%if(context['XWARE'] == "SW")%}enigma::{%endif%}preparecapsules({%for sw in context['NUMSUBWORKERS_seq']%}{%if(sw>0)%},{%endif%} keyvalue_t capsule{{sw}}[NUM_PARTITIONS]{%endfor%}){
	#pragma HLS INLINE
	{%for sw in context['NUMSUBWORKERS_seq']%}
	capsule{{sw}}[0].key = 0;
	{%endfor%}
	PREPARECAPSULE_LOOP1: for (partition_type p = 1; p<NUM_PARTITIONS; p++){
		{%for sw in context['NUMSUBWORKERS_seq']%}
		capsule{{sw}}[p].key = capsule{{sw}}[p-1].key + capsule{{sw}}[p-1].value;
		{%endfor%}
	}
	return;
}

void {%if(context['XWARE'] == "SW")%}enigma::{%endif%}loadclopparams(globalparams_t globalparams, clopparams_t * llopparams, unsigned int currentLOP){
	#pragma HLS INLINE
	if((currentLOP % 2) == 1){ llopparams->baseaddr_worksourcekvs_kvs = BASEOFFSET_KVDRAM_KVS; llopparams->baseaddr_workdestkvs_kvs = BASEOFFSET_KVDRAMWORKSPACE_KVS; }
	else { llopparams->baseaddr_worksourcekvs_kvs = BASEOFFSET_KVDRAMWORKSPACE_KVS; llopparams->baseaddr_workdestkvs_kvs = BASEOFFSET_KVDRAM_KVS; }	
	llopparams->baseaddr_capsule_kvs = NAp;
	llopparams->baseaddr_stats = BASEOFFSET_STATSDRAM;
	llopparams->num_source_partitions = get_num_source_partitions(currentLOP);
	llopparams->nextsourceoffset_partition = 0;
	llopparams->nextdestoffset_partition = 0;
	llopparams->nextsourceoffset_kv = 0;
	llopparams->nextdestoffset_kv = 0;
	llopparams->sourceskipsize_partition = getsourceskipsize(currentLOP, globalparams.LLOPnumpartitions);
	llopparams->destskipsize_partition = getdestskipsize(currentLOP, globalparams.LLOPnumpartitions);
	llopparams->sourceskipsize_kv = getsourceskipsize(currentLOP, KVDATA_RANGE_PERSSDPARTITION);
	llopparams->destskipsize_kv = getdestskipsize(currentLOP, KVDATA_RANGE_PERSSDPARTITION);
	llopparams->destpartitionrange = (1 << (KVDATA_RANGE_PERSSDPARTITION_POW - (NUM_PARTITIONS_POW * currentLOP)));
	llopparams->currentLOP = currentLOP;
	llopparams->upperlimit = 0;
	
	#ifdef _DEBUGMODE_KERNELPRINTS
	print1("loadclopparams:: llopparams->baseaddr_worksourcekvs_kvs", llopparams->baseaddr_worksourcekvs_kvs);
	print1("loadclopparams:: llopparams->baseaddr_workdestkvs_kvs", llopparams->baseaddr_workdestkvs_kvs);
	print1("loadclopparams:: llopparams->baseaddr_capsule_kvs", llopparams->baseaddr_capsule_kvs);
	print1("loadclopparams:: llopparams->baseaddr_stats", llopparams->baseaddr_stats);
	print1("loadclopparams:: llopparams->num_source_partitions", llopparams->num_source_partitions);
	print1("loadclopparams:: llopparams->nextsourceoffset_partition", llopparams->nextsourceoffset_partition);
	print1("loadclopparams:: llopparams->nextdestoffset_partition", llopparams->nextdestoffset_partition);
	print1("loadclopparams:: llopparams->nextsourceoffset_kv", llopparams->nextsourceoffset_kv);
	print1("loadclopparams:: llopparams->nextdestoffset_kv", llopparams->nextdestoffset_kv);
	print1("loadclopparams:: llopparams->sourceskipsize_partition", llopparams->sourceskipsize_partition);
	print1("loadclopparams:: llopparams->destskipsize_partition", llopparams->destskipsize_partition);
	print1("loadclopparams:: llopparams->sourceskipsize_kv", llopparams->sourceskipsize_kv);
	print1("loadclopparams:: llopparams->destskipsize_kv", llopparams->destskipsize_kv);
	print1("loadclopparams:: llopparams->destpartitionrange", llopparams->destpartitionrange);
	print1("loadclopparams:: llopparams->currentLOP", llopparams->currentLOP);
	print1("loadclopparams:: llopparams->upperlimit", llopparams->upperlimit);
	#endif
	return;
}

value_t {%if(context['XWARE'] == "SW")%}enigma::{%endif%}reducefunc(keyy_t vid, value_t value, value_t edgeval, unsigned int GraphIter){
	#pragma HLS INLINE
	value_t ret = 0;
	#ifdef PR_ALGORITHM
	ret = value + edgeval;
	#elif defined(BFS_ALGORITHM)
	ret = min(value, GraphIter);
	#elif defined(BC_ALGORITHM)
	ret = min(value, GraphIter);
	#endif
	return ret;
}

void {%if(context['XWARE'] == "SW")%}enigma::{%endif%}writepartitions(
		uint512_dt * kvdram
		{%for sw in context['NUMSUBWORKERS_seq']%}, uint512_dt result_local{{sw}}[PADDEDBUFFER_SIZE]{%endfor%} 
		{%for sw in context['NUMSUBWORKERS_seq']%}, keyvalue_t capsule{{sw}}[NUM_PARTITIONS]{%endfor%}
		,keyvalue_t kvdeststats_tmp[NUM_PARTITIONS]
		,clopparams_t llopparams){
	int analysis_tempsavebuffer = BUFFER_SIZE / NUM_PARTITIONS;
	int analysis_savebuffer = BUFFER_SIZE;
	
	uint512_dt tempbuffer[PADDEDBUFFER_SIZE];
	PARTITIONPHASE_TEMPSAVEBUFFER{{sw}}_LOOP1: for(partition_type p=0; p<NUM_PARTITIONS; p++){
	unsigned int tempoffset = 0;
		{%for sw in context['NUMSUBWORKERS_seq']%}
		// buffer_type bramoffset{{sw}}_kvs = p * (BUFFER_SIZE / NUM_PARTITIONS);
		buffer_type bramoffset{{sw}}_kvs = (capsule{{sw}}[p].key + (VECTOR_SIZE - 1)) / VECTOR_SIZE;
		buffer_type size{{sw}}_kvs = (capsule{{sw}}[p].value + (VECTOR_SIZE - 1)) / VECTOR_SIZE;
		#ifdef _DEBUGMODE_CHECKS2
		checkoutofbounds("enigma::writepartitions tempbram 35", tempoffset + (BUFFER_SIZE / NUM_PARTITIONS), PADDEDBUFFER_SIZE);
		checkoutofbounds("enigma::savebuffer{{sw}} bram 35", bramoffset{{sw}}_kvs + (BUFFER_SIZE / NUM_PARTITIONS), PADDEDBUFFER_SIZE);
		#endif
		for(buffer_type i=0; i<(BUFFER_SIZE / NUM_PARTITIONS); i++){ /// size{{sw}}_kvs
		#pragma HLS LOOP_TRIPCOUNT min=0 max=analysis_tempsavebuffer avg=analysis_tempsavebuffer
		#pragma HLS PIPELINE II=1
			tempbuffer[tempoffset + i] = result_local{{sw}}[bramoffset{{sw}}_kvs + i];
		}
		// tempoffset += (BUFFER_SIZE / NUM_PARTITIONS);
		tempoffset += size{{sw}}_kvs;
		
		{%endfor%}
		
		batch_type dramoffset_kvs = llopparams.baseaddr_workdestkvs_kvs + ((kvdeststats_tmp[p].key + kvdeststats_tmp[p].value) / VECTOR_SIZE);		
		PARTITIONPHASE_SAVEBUFFER{{sw}}_LOOP1: for (int j = 0; j < ((BUFFER_SIZE / NUM_PARTITIONS) * NUMSUBWORKERS); j++){
		#pragma HLS PIPELINE II=1
		#pragma HLS LOOP_TRIPCOUNT min=0 max=analysis_savebuffer avg=analysis_savebuffer
			kvdram[dramoffset_kvs + j] = tempbuffer[j];
			
			#ifdef _DEBUGMODE_STATS
			globalstats_countkvspartitionswritten(VECTOR_SIZE);
			#endif
		}
	}
	{%for sw in context['NUMSUBWORKERS_seq']%}
	PARTITIONPHASE_UPDATEGLOBALSTATS{{sw}}_LOOP1: for(partition_type p=0; p<NUM_PARTITIONS; p++){ kvdeststats_tmp[p].value += allignhigher_KV(capsule{{sw}}[p].value); }
	{%endfor%}
	return;
}


{%for ddrs, ddrs_ in zip(context['NUMINSTANCES_seq'], context['INSTANCES_charseq'])%}
void {%if(context['XWARE'] == "SW")%}enigma::{%endif%}generatepartitions{{ddrs}}(uint512_dt * kvsourcedram, uint512_dt * kvdestdram, keyvalue_t * kvstats, globalparams_t globalparams){

	unsigned int analysis_maxtreedepthsz = TREE_DEPTH;
	unsigned int analysis_avgnumsourcepartitions = (1 << (TREE_DEPTH * NUM_PARTITIONS_POW));
	unsigned int analysis_avgsz_kvs = KVDATA_BATCHSIZE_KVS / analysis_avgnumsourcepartitions; 
	unsigned int analysis_avgtripcnt = analysis_avgsz_kvs / (NUMSUBWORKERS * BUFFER_SIZE);
	unsigned int analysis_buffersz = BUFFER_SIZE;
	unsigned int analysis_partition = BUFFER_SIZE * VECTOR_SIZE;
	unsigned int analysis_savepartition = BUFFER_SIZE / NUM_PARTITIONS;
	
	{%for sw in context['NUMSUBWORKERS_seq']%}
	uint512_dt v1_local{{sw}}[PADDEDBUFFER_SIZE];
	uint512_dt result_local{{sw}}[PADDEDBUFFER_SIZE];
	keyvalue_t capsule{{sw}}[NUM_PARTITIONS];
	{%endfor%}

	// Partition Phase
	PARTITIONPHASE_LOOP1: for(unsigned int currentLOP=1; currentLOP<(globalparams.treedepth + 1); currentLOP++){
	#pragma HLS LOOP_TRIPCOUNT min=0 max=analysis_maxtreedepthsz avg=analysis_maxtreedepthsz
		keyvalue_t kvdeststats_tmp[NUM_PARTITIONS];
		
		clopparams_t llopparams;
		loadclopparams(globalparams, &llopparams, currentLOP);
		#ifdef _DEBUGMODE_KERNELPRINTS3
		cout<<endl;
		print4("PartitionPhase{{ddrs}}:: num_source_partitions", "num_destpartitions", "sourceskipsize_kv", "NAp", llopparams.num_source_partitions, llopparams.num_source_partitions * NUM_PARTITIONS, llopparams.sourceskipsize_kv, NAp);
		#endif
		
		PARTITIONPHASE_LOOP2: for(unsigned int source_partition=0; source_partition<llopparams.num_source_partitions; source_partition++){
		#pragma HLS LOOP_TRIPCOUNT min=0 max=analysis_avgnumsourcepartitions avg=analysis_avgnumsourcepartitions		
		
			partitionparams_t partitionparams;
			llopparams.upperlimit = globalparams.vbegin + llopparams.nextsourceoffset_kv;
			
			loaddeststats(kvstats, kvdeststats_tmp, llopparams.nextdestoffset_partition, llopparams.currentLOP, globalparams.LLOPnumpartitions);			
			GENERATEPARTITIONS_INITKVDRAMREACKER_LOOP2: for(partition_type p=0; p<NUM_PARTITIONS; p++){
			#pragma HLS PIPELINE II=1
				kvdeststats_tmp[p].value = 0;
			}
			
			keyvalue_t sourcestat = kvstats[getstatsAddr(llopparams.nextsourceoffset_partition)];
			partitionparams.begin_kvs = sourcestat.key / VECTOR_SIZE;
			partitionparams.size_kvs = (sourcestat.value + (VECTOR_SIZE - 1)) / VECTOR_SIZE;
			partitionparams.step_kvs = NUMSUBWORKERS * BUFFER_SIZE;
			partitionparams.end_kvs = partitionparams.begin_kvs + partitionparams.size_kvs;
			travstate_t travstate;
			#ifdef _DEBUGMODE_KERNELPRINTS2
			print6("PartitionPhase{{ddrs}}:: begin", "size", "step", "currentLOP", "range_per_destpartition", "source_partition", sourcestat.key, sourcestat.value, NUMSUBWORKERS * BUFFER_SIZE * VECTOR_SIZE, llopparams.currentLOP, KVDATA_RANGE_PERSSDPARTITION / pow(NUM_PARTITIONS, llopparams.currentLOP), source_partition);
			#endif
			
			// Partition phase 
			PARTITIONPHASE_LOOP3: for (int i = partitionparams.begin_kvs; i < partitionparams.end_kvs; i += BUFFER_SIZE * NUMSUBWORKERS){
			#pragma HLS LOOP_TRIPCOUNT min=0 max=analysis_avgtripcnt avg=analysis_avgtripcnt
				#ifdef _DEBUGMODE_KERNELPRINTS
				print5("PartitionPhase{{ddrs}}:: i", "i_end", "NAp", "NAp", "skip size", i, partitionparams.end_kvs, NAp, NAp, BUFFER_SIZE * NUMSUBWORKERS);
				#endif
				
				{%for sw in context['NUMSUBWORKERS_seq']%}
				buffer_type chunk{{sw}}_size = BUFFER_SIZE;
				{%endfor%}
				
				//boundary checks
				{%for sw in context['NUMSUBWORKERS_seq']%}
				batch_type i{{sw}} = i + ({{sw}} * BUFFER_SIZE);
				if (i{{sw}} > partitionparams.end_kvs){ chunk{{sw}}_size = 0; }
				else if ((i{{sw}} + BUFFER_SIZE) > partitionparams.end_kvs){ chunk{{sw}}_size = partitionparams.end_kvs - i{{sw}}; }
				else {}
				#ifdef _DEBUGMODE_CHECKS2
				checkoutofbounds("generatepartitions{{ddrs}} 35", chunk{{sw}}_size, BUFFER_SIZE);
				checkoutofbounds("generatepartitions{{ddrs}} 35", i{{sw}} + chunk{{sw}}_size, PADDEDKVSOURCEDRAMSZ_KVS);
				#endif
				{%endfor%}

				// burst read first vector from global memory to local memory
				partitionphase_v1_rd:
				{%for sw in context['NUMSUBWORKERS_seq']%}
					batch_type readdramoffset{{sw}}_kvs = llopparams.baseaddr_worksourcekvs_kvs + ({{sw}} * BUFFER_SIZE) + i;					
					#ifdef _DEBUGMODE_CHECKS2
					checkoutofbounds("enigma::partitionphase_v1_rd{{sw}} dram 35", readdramoffset{{sw}}_kvs + chunk{{sw}}_size, PADDEDKVSOURCEDRAMSZ_KVS);
					checkoutofbounds("enigma::partitionphase_v1_rd{{sw}} bram 35", chunk{{sw}}_size, BUFFER_SIZE);
					#endif
					PARTITIONPHASE_READBUFFER{{sw}}_LOOP1: for (buffer_type j=0; j<chunk{{sw}}_size; j++){
					   #pragma HLS PIPELINE II=1
					   #pragma HLS LOOP_TRIPCOUNT min=0 max=analysis_buffersz avg=analysis_buffersz					
						v1_local{{sw}}[j] = kvsourcedram[readdramoffset{{sw}}_kvs + j];
						
						#ifdef _DEBUGMODE_STATS
						globalstats_countkvsread(VECTOR_SIZE);
						#endif
					}
				{%endfor%}
					
				PARTITIONPHASE_RESETCAPSULEA_LOOP1: for(partition_type p=0; p<NUM_PARTITIONS; p++){ {%for sw in context['NUMSUBWORKERS_seq']%} capsule{{sw}}[p].value = 0; {%endfor%} }
				
				// extract capsule
				PARTITIONPHASE_EXTRACTCAPSULES{{sw}}_LOOP2: for(buffer_type k=0; k<BUFFER_SIZE * VECTOR_SIZE; k++){
				#pragma HLS LOOP_TRIPCOUNT min=0 max=analysis_partition avg=analysis_partition
				#pragma HLS PIPELINE II=1
					{%for sw in context['NUMSUBWORKERS_seq']%}
					keyvalue_t keyvalue{{sw}} = getkeyvalue(v1_local{{sw}}, k, BUFFER_SIZE);
					{%endfor%}
					
					{%for sw in context['NUMSUBWORKERS_seq']%}
					partition_type p{{sw}} = getpartition(keyvalue{{sw}}, llopparams.currentLOP, llopparams.upperlimit);
					{%endfor%}
					
					{%for sw in context['NUMSUBWORKERS_seq']%}
					if(k < chunk{{sw}}_size * VECTOR_SIZE){ capsule{{sw}}[p{{sw}}].value += 1; }
					{%endfor%}
					
					#ifdef _DEBUGMODE_STATS
					{%for sw in context['NUMSUBWORKERS_seq']%}
					if(k < chunk{{sw}}_size * VECTOR_SIZE){ globalstats_countkvstatscollected(1); }
					{%endfor%}
					#endif
				}
				
				preparecapsules({%for sw in context['NUMSUBWORKERS_seq']%}{%if(sw>0)%},{%endif%} capsule{{sw}} {%endfor%});				
				PARTITIONPHASE_RESETCAPSULEB{{sw}}_LOOP1: for(partition_type p=0; p<NUM_PARTITIONS; p++){ {%for sw in context['NUMSUBWORKERS_seq']%} capsule{{sw}}[p].value = 0; {%endfor%} }
				
				// partition
				PARTITIONPHASE_PARTITION{{sw}}_LOOP1: for(buffer_type k=0; k<BUFFER_SIZE * VECTOR_SIZE; k++){
				#pragma HLS LOOP_TRIPCOUNT min=0 max=analysis_partition avg=analysis_partition
				#pragma HLS PIPELINE II=1
					{%for sw in context['NUMSUBWORKERS_seq']%}
					keyvalue_t keyvalue{{sw}} = getkeyvalue(v1_local{{sw}}, k, BUFFER_SIZE);
					{%endfor%}
					
					{%for sw in context['NUMSUBWORKERS_seq']%}
					partition_type p{{sw}} = getpartition(keyvalue{{sw}}, llopparams.currentLOP, llopparams.upperlimit);
					{%endfor%}
					#ifdef _DEBUGMODE_CHECKS2
					{%for sw in context['NUMSUBWORKERS_seq']%}
					checkoutofbounds("enigma::partition_ddr{{ddrs}}_v{{v}} 34", capsule{{sw}}[p{{sw}}].key + capsule{{sw}}[p{{sw}}].value, BUFFER_SIZE * VECTOR_SIZE);
					{%endfor%}
					#endif
					
					{%for sw in context['NUMSUBWORKERS_seq']%}
					setkeyvalue(result_local{{sw}}, capsule{{sw}}[p{{sw}}].key + capsule{{sw}}[p{{sw}}].value, keyvalue{{sw}}, BUFFER_SIZE);
					{%endfor%}
					
					{%for sw in context['NUMSUBWORKERS_seq']%}
					if(k < chunk{{sw}}_size * VECTOR_SIZE){ capsule{{sw}}[p{{sw}}].value += 1; }
					{%endfor%}
					
					#ifdef _DEBUGMODE_STATS
					{%for sw in context['NUMSUBWORKERS_seq']%}
					if(k < chunk{{sw}}_size * VECTOR_SIZE){ globalstats_countkvspartitioned(1); }
					{%endfor%}
					#endif
				}
				
				//burst write the result
				partitionphase_out_write:
				#ifdef BUFFERB4WRITE
				/* writepartitions(
					kvsourcedram
					{%for sw in context['NUMSUBWORKERS_seq']%}, result_local{{sw}}{%endfor%} 
					{%for sw in context['NUMSUBWORKERS_seq']%}, capsule{{sw}}{%endfor%}
					,kvdeststats_tmp
					,llopparams); */
				int analysis_tempsavebuffer = BUFFER_SIZE / NUM_PARTITIONS;
				int analysis_savebuffer = BUFFER_SIZE;
				uint512_dt tempbuffer[PADDEDBUFFER_SIZE];
				PARTITIONPHASE_TEMPSAVEBUFFER{{sw}}_LOOP1: for(partition_type p=0; p<NUM_PARTITIONS; p++){
				unsigned int tempoffset = 0;
					{%for sw in context['NUMSUBWORKERS_seq']%}
					buffer_type bramoffset{{sw}}_kvs = (capsule{{sw}}[p].key + (VECTOR_SIZE - 1)) / VECTOR_SIZE;
					buffer_type size{{sw}}_kvs = (capsule{{sw}}[p].value + (VECTOR_SIZE - 1)) / VECTOR_SIZE;
					#ifdef _DEBUGMODE_CHECKS2
					checkoutofbounds("enigma::writepartitions tempbram 35", tempoffset + (BUFFER_SIZE / NUM_PARTITIONS), PADDEDBUFFER_SIZE);
					checkoutofbounds("enigma::savebuffer{{sw}} bram 35", bramoffset{{sw}}_kvs + (BUFFER_SIZE / NUM_PARTITIONS), PADDEDBUFFER_SIZE);
					#endif
					for(buffer_type i=0; i<(BUFFER_SIZE / NUM_PARTITIONS); i++){ /// size{{sw}}_kvs
					#pragma HLS LOOP_TRIPCOUNT min=0 max=analysis_tempsavebuffer avg=analysis_tempsavebuffer
					#pragma HLS PIPELINE II=1
						tempbuffer[tempoffset + i] = result_local{{sw}}[bramoffset{{sw}}_kvs + i];
					}
					tempoffset += size{{sw}}_kvs;
					{%endfor%}
					
					batch_type dramoffset_kvs = llopparams.baseaddr_workdestkvs_kvs + ((kvdeststats_tmp[p].key + kvdeststats_tmp[p].value) / VECTOR_SIZE);		
					PARTITIONPHASE_SAVEBUFFER{{sw}}_LOOP1: for (int j = 0; j < ((BUFFER_SIZE / NUM_PARTITIONS) * NUMSUBWORKERS); j++){
					#pragma HLS PIPELINE II=1
					#pragma HLS LOOP_TRIPCOUNT min=0 max=analysis_savebuffer avg=analysis_savebuffer
						kvsourcedram[dramoffset_kvs + j] = tempbuffer[j];
						
						#ifdef _DEBUGMODE_STATS
						globalstats_countkvspartitionswritten(VECTOR_SIZE);
						#endif
					}
				}
				{%for sw in context['NUMSUBWORKERS_seq']%}
				PARTITIONPHASE_UPDATEGLOBALSTATS{{sw}}_LOOP1: for(partition_type p=0; p<NUM_PARTITIONS; p++){ kvdeststats_tmp[p].value += allignhigher_KV(capsule{{sw}}[p].value); }
				{%endfor%}
				#else 
				{%for sw in context['NUMSUBWORKERS_seq']%}
					PARTITIONPHASE_SAVEBUFFER{{sw}}_LOOP1: for(partition_type p=0; p<NUM_PARTITIONS; p++){
						batch_type dramoffset_kvs = llopparams.baseaddr_workdestkvs_kvs + ((kvdeststats_tmp[p].key + kvdeststats_tmp[p].value) / VECTOR_SIZE);
						buffer_type bramoffset_kvs = (capsule{{sw}}[p].key + (VECTOR_SIZE - 1)) / VECTOR_SIZE;
						buffer_type size_kvs = (capsule{{sw}}[p].value + (VECTOR_SIZE - 1)) / VECTOR_SIZE;					
						#ifdef _DEBUGMODE_CHECKS2
						checkoutofbounds("enigma::savebuffer{{sw}} dram 35", dramoffset_kvs + (BUFFER_SIZE / NUM_PARTITIONS), PADDEDKVSOURCEDRAMSZ_KVS);
						checkoutofbounds("enigma::savebuffer{{sw}} bram 35", bramoffset_kvs + (BUFFER_SIZE / NUM_PARTITIONS), PADDEDBUFFER_SIZE);
						#endif
						#ifdef _WIDEWORD
						for(buffer_type i=0; i<(BUFFER_SIZE / NUM_PARTITIONS); i++)
						#else 
						for(buffer_type i=0; i<size_kvs; i++)
						#endif
						{
						#pragma HLS LOOP_TRIPCOUNT min=0 max=analysis_savepartition avg=analysis_savepartition
						#pragma HLS PIPELINE II=1
							kvsourcedram[dramoffset_kvs + i] = result_local{{sw}}[bramoffset_kvs + i];
							
							#ifdef _DEBUGMODE_STATS
							globalstats_countkvspartitionswritten(VECTOR_SIZE);
							#endif
						}
					}
					PARTITIONPHASE_UPDATEGLOBALSTATS{{sw}}_LOOP1: for(partition_type p=0; p<NUM_PARTITIONS; p++){ kvdeststats_tmp[p].value += allignhigher_KV(capsule{{sw}}[p].value); }
				{%endfor%}
				#endif
			}
			
			storedeststats(kvstats, kvdeststats_tmp, llopparams.nextdestoffset_partition, llopparams.currentLOP, globalparams.LLOPnumpartitions); 
			llopparams.nextsourceoffset_partition += llopparams.sourceskipsize_partition;
			llopparams.nextdestoffset_partition += (llopparams.destskipsize_partition * NUM_PARTITIONS);
			llopparams.nextsourceoffset_kv += llopparams.sourceskipsize_kv;
			llopparams.nextdestoffset_kv += llopparams.destskipsize_kv;
		}
		#ifdef _DEBUGMODE_KERNELPRINTS3
		printglobalvars();
		clearglobalvars();
		#endif
	}

	// Reduce Phase
	#ifdef ENABLEREDUCEPHASE
	if(globalparams.reducecommand == ON){
		unsigned int currentLOP = globalparams.treedepth + 1;
		keyvalue_t kvdeststats_tmp[NUM_PARTITIONS];
		
		clopparams_t llopparams;
		loadclopparams(globalparams, &llopparams, currentLOP);		
		#ifdef _DEBUGMODE_KERNELPRINTS3
		cout<<endl;
		print4("ReducePhase{{ddrs}}:: num_source_partitions", "num_destpartitions", "sourceskipsize_kv", "NAp", llopparams.num_source_partitions, llopparams.num_source_partitions * NUM_PARTITIONS, llopparams.sourceskipsize_kv, NAp);
		#endif
		
		REDUCEPHASE_LOOP1: for(unsigned int source_partition=0; source_partition<llopparams.num_source_partitions; source_partition+=NUMSUBWORKERS){
		#pragma HLS LOOP_TRIPCOUNT min=0 max=analysis_avgnumsourcepartitions avg=analysis_avgnumsourcepartitions		
		
			{%for sw in context['NUMSUBWORKERS_seq']%}
			partitionparams_t partition{{sw}}params;
			{%endfor%}
			llopparams.upperlimit = globalparams.vbegin + llopparams.nextsourceoffset_kv;
		
			keyvalue_t sourcestats[NUMSUBWORKERS];
			unsigned int maxsz = 0;
			for(unsigned int i=0; i<NUMSUBWORKERS; i++){ sourcestats[i] = kvstats[source_partition + i]; }
			for(unsigned int sw=0; sw<NUMSUBWORKERS; sw++){ maxsz = max(sourcestats[sw].value, maxsz); }
			unsigned int maxsz_kvs = (maxsz + (VECTOR_SIZE - 1)) / VECTOR_SIZE;
			
			keyvalue_t sourcestat;
			{%for sw in context['NUMSUBWORKERS_seq']%}
			sourcestat = sourcestats[{{sw}}];
			partition{{sw}}params.begin_kvs = sourcestat.key / VECTOR_SIZE;
			partition{{sw}}params.size_kvs = (sourcestat.value + (VECTOR_SIZE - 1)) / VECTOR_SIZE;
			partition{{sw}}params.step_kvs = NUMSUBWORKERS * BUFFER_SIZE;
			partition{{sw}}params.end_kvs = partition{{sw}}params.begin_kvs + partition{{sw}}params.size_kvs;
			{%endfor%}
			
			#ifdef _DEBUGMODE_KERNELPRINTS2
			{%for sw in context['NUMSUBWORKERS_seq']%}
			print6("ReducePhase{{ddrs}}:: begin", "size", "step", "currentLOP", "range_per_destpartition", "source_partition", sourcestats[{{sw}}].key, sourcestats[{{sw}}].value, BUFFER_SIZE * VECTOR_SIZE, llopparams.currentLOP, KVDATA_RANGE_PERSSDPARTITION / pow(NUM_PARTITIONS, llopparams.currentLOP), source_partition);			
			{%endfor%}
			#endif 
			#ifdef _DEBUGMODE_KERNELPRINTS
			print4("ReducePhase{{ddrs}}:: maxsz", "maxsz_kvs", "NAp", "NAp", maxsz, maxsz_kvs, NAp, NAp);
			#endif
			
			// burst read first vector from global memory to local memory
			reducephase_v1_rdv:
			{%for sw in context['NUMSUBWORKERS_seq']%}
				batch_type readdramoffset{{sw}}_kvs = globalparams.baseaddr_destkvs_kvs + (llopparams.nextsourceoffset_kv / VECTOR_SIZE);					
				#ifdef _DEBUGMODE_CHECKS2
				checkoutofbounds("enigma::readphase_v1_rd{{sw}} dram 35", readdramoffset{{sw}}_kvs + APPLYVERTEXBUFFERSZ_KVS, PADDEDKVSOURCEDRAMSZ_KVS);
				#endif
				REDUCEPHASE_READVBUFFER{{sw}}_LOOP1: for (buffer_type j=0; j<APPLYVERTEXBUFFERSZ_KVS; j++){
				   #pragma HLS PIPELINE II=1
				   #pragma HLS LOOP_TRIPCOUNT min=0 max=analysis_buffersz avg=analysis_buffersz					
					v1_local{{sw}}[j] = kvsourcedram[readdramoffset{{sw}}_kvs + j];
					
					#ifdef _DEBUGMODE_STATS
					globalstats_countkvsreadV(VECTOR_SIZE);
					#endif
				}
			{%endfor%}
			
			// Reduce phase
			REDUCEPHASE_REDUCEPARTITION_LOOP: for (int i = 0; i < maxsz_kvs; i += BUFFER_SIZE){
			#pragma HLS LOOP_TRIPCOUNT min=0 max=analysis_avgtripcnt avg=analysis_avgtripcnt
				#ifdef _DEBUGMODE_KERNELPRINTS
				print5("ReducePhase{{ddrs}}:: i", "i_end", "NAp", "NAp", "skip size", i, maxsz_kvs, NAp, NAp, BUFFER_SIZE);
				#endif
				
				{%for sw in context['NUMSUBWORKERS_seq']%}
				buffer_type chunk{{sw}}_size = BUFFER_SIZE;
				{%endfor%}
				
				//boundary checks
				{%for sw in context['NUMSUBWORKERS_seq']%}
				batch_type i{{sw}} = i;
				if (i{{sw}} > partition{{sw}}params.size_kvs){ chunk{{sw}}_size = 0; }
				else if ((i{{sw}} + BUFFER_SIZE) > partition{{sw}}params.size_kvs){ chunk{{sw}}_size = partition{{sw}}params.size_kvs - i{{sw}}; }
				else {}
				#ifdef _DEBUGMODE_CHECKS2
				checkoutofbounds("reducepartitions{{ddrs}} 35", chunk{{sw}}_size, BUFFER_SIZE);
				checkoutofbounds("reducepartitions{{ddrs}} 35", i{{sw}} + chunk{{sw}}_size, PADDEDKVSOURCEDRAMSZ_KVS);
				#endif
				{%endfor%}

				// burst read
				reducephase_v1_rd:
				{%for sw in context['NUMSUBWORKERS_seq']%}				
					batch_type readdramoffset{{sw}}_kvs = llopparams.baseaddr_worksourcekvs_kvs + i;									
					#ifdef _DEBUGMODE_CHECKS2
					checkoutofbounds("enigma::reducephase_v1_rd{{sw}} dram 35", readdramoffset{{sw}}_kvs + chunk{{sw}}_size, PADDEDKVSOURCEDRAMSZ_KVS);
					checkoutofbounds("enigma::reducephase_v1_rd{{sw}} bram 35", chunk{{sw}}_size, BUFFER_SIZE + 1);
					#endif
					REDUCEPHASE_READBUFFER{{sw}}_LOOP1: for (buffer_type j=0; j<chunk{{sw}}_size; j++){
					   #pragma HLS PIPELINE II=1
					   #pragma HLS LOOP_TRIPCOUNT min=0 max=analysis_buffersz avg=analysis_buffersz					
						v1_local{{sw}}[j] = kvsourcedram[readdramoffset{{sw}}_kvs + j];
						
						#ifdef _DEBUGMODE_STATS
						globalstats_countkvsread(VECTOR_SIZE);
						#endif
					}
				{%endfor%}
				
				// reduce 
				REDUCEPHASE_REDUCE{{v}}_LOOP2: for(buffer_type k=0; k<BUFFER_SIZE * VECTOR_SIZE; k++){
				#pragma HLS LOOP_TRIPCOUNT min=0 max=analysis_buffersz avg=analysis_buffersz
				#pragma HLS PIPELINE II=1					
					{%for sw in context['NUMSUBWORKERS_seq']%}
					keyvalue_t keyvalue{{sw}} = getkeyvalue(v1_local{{sw}}, k, BUFFER_SIZE);
					{%endfor%}
					
					{%for sw in context['NUMSUBWORKERS_seq']%}
					vertex_t loc{{sw}} = keyvalue{{sw}}.key - globalparams.vbegin;
					{%endfor%}
					
					{%for sw in context['NUMSUBWORKERS_seq']%}
					if(loc{{sw}} >= BUFFER_SIZE * VECTOR_SIZE){ loc{{sw}} = 0; } // REMOVEME.
					{%endfor%}
					
					#ifdef _DEBUGMODE_CHECKS2
					{%for sw in context['NUMSUBWORKERS_seq']%}
					checkoutofbounds("legion::reduce_ddr{{ddrs}}_v{{v}} 34", loc{{sw}}, BUFFER_SIZE * VECTOR_SIZE);
					{%endfor%}
					#endif
					
					{%for sw in context['NUMSUBWORKERS_seq']%}
					keyvalue_t vprop{{sw}} = getkeyvalue(result_local{{sw}}, loc{{sw}}, BUFFER_SIZE);
					{%endfor%}
					
					{%for sw in context['NUMSUBWORKERS_seq']%}
					value_t temp{{sw}} = reducefunc(vprop{{sw}}.key, vprop{{sw}}.value, keyvalue{{sw}}.value, globalparams.GraphIter);
					{%endfor%}
					
					{%for sw in context['NUMSUBWORKERS_seq']%}
					vprop{{sw}}.value = temp{{sw}};
					{%endfor%}
					
					{%for sw in context['NUMSUBWORKERS_seq']%}
					setkeyvalue(result_local{{sw}}, loc{{sw}}, vprop{{sw}}, BUFFER_SIZE);	
					{%endfor%}
					
					#ifdef _DEBUGMODE_STATS
					{%for sw in context['NUMSUBWORKERS_seq']%}
					if(k < chunk{{sw}}_size * VECTOR_SIZE){ globalstats_countkvsreduced(1); }
					{%endfor%}
					#endif
				}
			}
			
			//burst write the result
			reducephase_out_write:
			{%for sw in context['NUMSUBWORKERS_seq']%}
				batch_type dramsaveoffset{{sw}}_kvs = globalparams.baseaddr_destkvs_kvs + (llopparams.nextsourceoffset_kv / VECTOR_SIZE);					
				#ifdef _DEBUGMODE_CHECKS2
				checkoutofbounds("enigma::reducephase_out_write{{sw}} dram 35", dramsaveoffset{{sw}}_kvs + APPLYVERTEXBUFFERSZ_KVS, KVDATA_RANGE_PERSSDPARTITION_KVS);
				#endif
				REDUCEPHASE_SAVEVBUFFER{{sw}}_LOOP1: for (buffer_type j=0; j<APPLYVERTEXBUFFERSZ_KVS; j++){
				   #pragma HLS PIPELINE II=1
				   #pragma HLS LOOP_TRIPCOUNT min=0 max=analysis_buffersz avg=analysis_buffersz
					kvdestdram[dramsaveoffset{{sw}}_kvs + j] = result_local{{sw}}[j];
					
					#ifdef _DEBUGMODE_STATS
					globalstats_countkvsreducewritten(VECTOR_SIZE);
					#endif
				}
			{%endfor%}

			llopparams.nextsourceoffset_partition += NUMSUBWORKERS;
			llopparams.nextsourceoffset_kv += llopparams.sourceskipsize_kv;
		}
		#ifdef _DEBUGMODE_KERNELPRINTS2
		printglobalvars();
		printparameters();
		clearglobalvars();
		#endif
	}
	#endif
	return;
}
{%endfor%}

{%for ddrs, ddrs_ in zip(context['NUMINSTANCES_seq'], context['INSTANCES_charseq'])%}
void {%if(context['XWARE'] == "SW")%}enigma::{%endif%}loadKvDRAM{{ddrs}}(uint512_dt * kvdram, batch_type sourceoffset_kvs, batch_type destoffset_kvs, batch_type size_kvs){
	int analysis_chunksize = BUFFER_SIZE;
	int analysis_iterationcount = KVDATA_BATCHSIZE_KVS / BUFFER_SIZE;
	#ifdef _DEBUGMODE_KERNELPRINTS3
	print4("### loadKvDRAM{{ddrs}}:: sourceoffset_kvs", "destoffset_kvs", "size_kvs", "NAp", sourceoffset_kvs, destoffset_kvs, size_kvs, NAp);
	#endif
	
	uint512_dt v1_local[BUFFER_SIZE];
	
	#ifdef _DEBUGMODE_CHECKS2
	checkoutofbounds("loadKvDRAM{{ddrs}} 35", destoffset_kvs + size_kvs, KVSOURCEDRAMSZ_KVS);
	#endif
	int i;
    for ( i = 0; i < size_kvs; i += BUFFER_SIZE) {
	#pragma HLS LOOP_TRIPCOUNT min=analysis_iterationcount max=analysis_iterationcount
		
		//boundary checks
		int chunk_size = BUFFER_SIZE;
        if ((i + BUFFER_SIZE) > size_kvs)
            chunk_size = size_kvs - i;
	
		v1_rd:
			for (int j = 0; j < chunk_size; j++) {
			   #pragma HLS PIPELINE II=1
			   #pragma HLS LOOP_TRIPCOUNT min=analysis_chunksize max=analysis_chunksize
				v1_local[j] = kvdram[sourceoffset_kvs + i + j];
			}
		out_write:
			for (int j = 0; j < chunk_size; j++) {
			   #pragma HLS PIPELINE II=1
			   #pragma HLS LOOP_TRIPCOUNT min=analysis_chunksize max=analysis_chunksize
				kvdram[destoffset_kvs + i + j] = v1_local[j];
			}
    }
	return;
}
{%endfor%}

extern "C" {
void {%if(context['XWARE'] == "SW")%}enigma::{%endif%}topkernel(
		{%for ddrs, ddrs_ in zip(context['NUMINSTANCES_seq'], context['INSTANCES_charseq'])%}
		{%if(ddrs==0)%}{%else%},{%endif%}uint512_dt * kvsourcedram{{ddrs_}}
		{%endfor%}
		{%for ddrs, ddrs_ in zip(context['NUMINSTANCES_seq'], context['INSTANCES_charseq'])%}
		,uint512_dt * kvdestdram{{ddrs_}}
		{%endfor%}
		{%for ddrs, ddrs_ in zip(context['NUMINSTANCES_seq'], context['INSTANCES_charseq'])%}
		,keyvalue_t * kvstats{{ddrs_}}
		{%endfor%}
        ){
{%for ddrs, ddrs_ in zip(context['NUMINSTANCES_seq'], context['INSTANCES_charseq'])%}
#pragma HLS INTERFACE m_axi port=kvsourcedram{{ddrs_}}  offset=slave bundle=gmem{{ddrs}} max_read_burst_length=256 max_write_burst_length=256
{%endfor%}
{%for ddrs, ddrs_ in zip(context['NUMINSTANCES_seq'], context['INSTANCES_charseq'])%}
#pragma HLS INTERFACE m_axi port=kvdestdram{{ddrs_}}  offset=slave bundle=gmem{{context['NUMINSTANCES'] + ddrs}} max_read_burst_length=64 max_write_burst_length=64
{%endfor%}
{%for ddrs, ddrs_ in zip(context['NUMINSTANCES_seq'], context['INSTANCES_charseq'])%}
#pragma HLS INTERFACE m_axi port=kvstats{{ddrs_}}  offset=slave bundle=gmem{{context['NUMINSTANCES'] + context['NUMINSTANCES'] + ddrs}}
{%endfor%}

{%for ddrs, ddrs_ in zip(context['NUMINSTANCES_seq'], context['INSTANCES_charseq'])%}
#pragma HLS INTERFACE s_axilite port=kvsourcedram{{ddrs_}}  bundle=control
{%endfor%}
{%for ddrs, ddrs_ in zip(context['NUMINSTANCES_seq'], context['INSTANCES_charseq'])%}
#pragma HLS INTERFACE s_axilite port=kvdestdram{{ddrs_}}  bundle=control
{%endfor%}
{%for ddrs, ddrs_ in zip(context['NUMINSTANCES_seq'], context['INSTANCES_charseq'])%}
#pragma HLS INTERFACE s_axilite port=kvstats{{ddrs_}}  bundle=control
{%endfor%}

#pragma HLS INTERFACE s_axilite port=return bundle=control

{%for ddrs, ddrs_ in zip(context['NUMINSTANCES_seq'], context['INSTANCES_charseq'])%}
#pragma HLS DATA_PACK variable=kvstats{{ddrs_}}
{%endfor%}
	
	globalparams_t globalparams;
	globalparams.runkernelcommand = kvstatsA[getmessagesAddr(MESSAGES_RUNKERNELCOMMANDID)].key;
	globalparams.processcommand = kvstatsA[getmessagesAddr(MESSAGES_PROCESSCOMMANDID)].key;
	globalparams.partitioncommand = kvstatsA[getmessagesAddr(MESSAGES_PARTITIONCOMMANDID)].key;
	globalparams.reducecommand = kvstatsA[getmessagesAddr(MESSAGES_APPLYUPDATESCOMMANDID)].key;
	globalparams.vbegin = kvstatsA[getmessagesAddr(MESSAGES_VOFFSET)].key; 
	globalparams.vsize = kvstatsA[getmessagesAddr(MESSAGES_VSIZE)].key; 
	globalparams.treedepth = kvstatsA[getmessagesAddr(MESSAGES_TREEDEPTH)].key; 
	globalparams.LLOPnumpartitions = kvstatsA[getmessagesAddr(MESSAGES_FINALNUMPARTITIONS)].key;
	globalparams.GraphIter = kvstatsA[getmessagesAddr(MESSAGES_GRAPHITERATIONID)].key;
	globalparams.IterCount = kvstatsA[getmessagesAddr(MESSAGES_ITERATIONID)].key;
	globalparams.baseaddr_destkvs_kvs = 0;
	
	#ifdef _DEBUGMODE_KERNELPRINTS
	std::cout<<std::endl;
	std::cout<<"Kernel Started: globalparams.runkernelcommand: "<<globalparams.runkernelcommand<<std::endl;
	std::cout<<"Kernel Started: globalparams.processcommand: "<<globalparams.processcommand<<std::endl;
	std::cout<<"Kernel Started: globalparams.partitioncommand: "<<globalparams.partitioncommand<<std::endl;
	std::cout<<"Kernel Started: globalparams.reducecommand: "<<globalparams.reducecommand<<std::endl;
	std::cout<<"Kernel Started: globalparams.vbegin: "<<globalparams.vbegin<<std::endl;
	std::cout<<"Kernel Started: globalparams.vsize: "<<globalparams.vsize<<std::endl;
	std::cout<<"Kernel Started: globalparams.treedepth: "<<globalparams.treedepth<<std::endl;
	std::cout<<"Kernel Started: globalparams.LLOPnumpartitions: "<<globalparams.LLOPnumpartitions<<std::endl;
	std::cout<<"Kernel Started: globalparams.GraphIter: "<<globalparams.GraphIter<<std::endl;
	std::cout<<"Kernel Started: globalparams.IterCount: "<<globalparams.IterCount<<std::endl;
	#endif
	
	if(globalparams.runkernelcommand == OFF){
		{%for ddrs, ddrs_ in zip(context['NUMINSTANCES_seq'], context['INSTANCES_charseq'])%}
		loadKvDRAM{{ddrs}}(kvsourcedram{{ddrs_}}, 0, ((globalparams.IterCount % DRAMBATCHFACTOR) + 1) * KVDATA_BATCHSIZE_KVS, KVDATA_BATCHSIZE_KVS);
		{%endfor%}
		return;
	}
	
	#ifdef _DEBUGMODE_KERNELPRINTS3
	cout<<"...running Acts..."<<endl;
	#endif 
	{%for ddrs, ddrs_ in zip(context['NUMINSTANCES_seq'], context['INSTANCES_charseq'])%}
	generatepartitions{{ddrs}}(kvsourcedram{{ddrs_}}, kvdestdram{{ddrs_}}, kvstats{{ddrs_}}, globalparams);
	{%endfor%}
	
	// exit(EXIT_SUCCESS);
	
	/** {%for ddrs, ddrs_ in zip(context['NUMINSTANCES_seq'], context['INSTANCES_charseq'])%}
	reducepartitions{{ddrs}}(kvsourcedram{{ddrs_}}, kvstats{{ddrs_}}, globalparams);
	{%endfor%} */
	return;
}
}






