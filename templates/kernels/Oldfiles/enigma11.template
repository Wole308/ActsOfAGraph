#include "{{context['PROJECT_BASEPATH']}}/src/common.h"
{%if(context['XWARE'] != "HW")%}
#include <string>
#include <string.h>
#include <iostream>
#include <vector>
#include <string.h>
#include <stdio.h>
#include <ctime>
#include <functional>
#include <sys/time.h>
#include <time.h>
#include <stdlib.h>
#include <iomanip>
#include <cmath>
#include <fstream>
{%endif%}
#include "{{context['PROJECT_BASEPATH']}}/kernels/enigma.h"
using namespace std;

#ifndef FPGA_IMPL
enigma::enigma(){}
enigma::~enigma(){}
#endif
#ifndef HW

unsigned int globalvar_totalkvstatsread;
unsigned int globalvar_totalkvsreadV;

unsigned int globalvar_totalkvsread4statscollection;
unsigned int globalvar_totalkvstatswritten;

unsigned int globalvar_totalkvsread;

unsigned int globalstats_totalkvspartitioned;
unsigned int globalstats_totalkvspartitionswritten;

unsigned int globalstats_totalkvsreduced;
unsigned int globalstats_totalkvsreducewritten;
#endif 
#ifdef _LDEBUGMODE_HEADER
void {%if(context['XWARE'] == "SW")%}enigma::{%endif%}checkoutofbounds(string message, unsigned int data, unsigned int upper_bound, unsigned int msgdata1, unsigned int msgdata2, unsigned int msgdata3){
	if(data >= upper_bound){ std::cout<<"enigma::checkoutofbounds: ERROR. out of bounds. message: "<<message<<", data: "<<data<<", upper_bound: "<<upper_bound<<", msgdata1: "<<msgdata1<<", msgdata2: "<<msgdata2<<", msgdata3: "<<msgdata3<<std::endl; exit(EXIT_FAILURE); }
}
void {%if(context['XWARE'] == "SW")%}enigma::{%endif%}checkforequal(string message, unsigned int data1, unsigned int data2){
	if(data1 == data2){ cout<<"enigma::checkforequal: ERROR. data1 == data2. message: "<<message<<", data1: "<<data1<<", data2: "<<data2<<endl; exit(EXIT_FAILURE); }
}
void {%if(context['XWARE'] == "SW")%}enigma::{%endif%}print1(string messagea, unsigned int dataa){
	cout<<messagea<<": "<<dataa<<endl;
}
void {%if(context['XWARE'] == "SW")%}enigma::{%endif%}print4(string messagea, string messageb, string messagec, string messaged, unsigned int dataa, unsigned int datab, unsigned int datac, unsigned int datad){
	cout<<messagea<<": "<<dataa<<", "<<messageb<<": "<<datab<<", "<<messagec<<": "<<datac<<", "<<messaged<<": "<<datad<<endl;
}
void {%if(context['XWARE'] == "SW")%}enigma::{%endif%}print5(string messagea, string messageb, string messagec, string messaged, string messagee, unsigned int dataa, unsigned int datab, unsigned int datac, unsigned int datad, unsigned int datae){
	cout<<messagea<<": "<<dataa<<", "<<messageb<<": "<<datab<<", "<<messagec<<": "<<datac<<", "<<messaged<<": "<<datad<<", "<<messagee<<": "<<datae<<endl;
}
void {%if(context['XWARE'] == "SW")%}enigma::{%endif%}print6(string messagea, string messageb, string messagec, string messaged, string messagee, string messagef, unsigned int dataa, unsigned int datab, unsigned int datac, unsigned int datad, unsigned int datae, unsigned int datef){
	cout<<messagea<<": "<<dataa<<", "<<messageb<<": "<<datab<<", "<<messagec<<": "<<datac<<", "<<messaged<<": "<<datad<<", "<<messagee<<": "<<datae<<", "<<messagef<<": "<<datef<<endl;
}
void {%if(context['XWARE'] == "SW")%}enigma::{%endif%}printkeyvalues(string message, keyvalue_t * keyvalues, unsigned int size){
	cout<<endl<<"printkeyvalues:"<<message<<endl;
	for(unsigned int p=0; p<size; p++){ cout<<"keyvalues["<<p<<"].key: "<<keyvalues[p].key<<", keyvalues["<<p<<"].value: "<<keyvalues[p].value<<endl; }
}
void {%if(context['XWARE'] == "SW")%}enigma::{%endif%}printkeyvalues(string message, keyvalue_t * keyvalues1, keyvalue_t * keyvalues2, unsigned int size){
	cout<<endl<<"printkeyvalues:"<<message<<endl;
	for(unsigned int p=0; p<size; p++){ cout<<"["<<keyvalues1[p].key<<":"<<keyvalues1[p].value<<"]["<<keyvalues2[p].key<<":"<<keyvalues2[p].value<<"]"<<endl; }
}
void {%if(context['XWARE'] == "SW")%}enigma::{%endif%}printkeyvalues(string message, uint512_dt * keyvalues, unsigned int size_kvs){
	cout<<endl<<"printkeyvalues:"<<message<<endl;
	for(unsigned int i=0; i<size_kvs; i++){ 
		#ifdef _WIDEWORD
		{%for v in context['VECTOR_SIZE_seq']%}
			cout<<"keyvalues["<<i<<"].data[{{v}}].key: "<<(unsigned int)keyvalues[i].range({{32 * ((v * 2) + 1) - 1}}, {{(v * 2) * 32}})<<", keyvalues["<<i<<"].data[{{v}}].value: "<<(unsigned int)keyvalues[i].range({{32 * (((v * 2) + 1) + 1) - 1}}, {{(v * 2 + 1) * 32}})<<endl;
		{%endfor%}
		#else 
		for(unsigned int v=0; v<VECTOR_SIZE; v++){ cout<<"keyvalues["<<i<<"].data["<<v<<"].key: "<<keyvalues[i].data[v].key<<", keyvalues["<<i<<"].data["<<v<<"].value: "<<keyvalues[i].data[v].value<<endl; }
		#endif 
	}
}
void {%if(context['XWARE'] == "SW")%}enigma::{%endif%}getvaluecount(string message, keyvalue_t * keyvalues, unsigned int size){
	unsigned int totalnumkeyvalues = 0;
	for(unsigned int p=0; p<size; p++){ totalnumkeyvalues += keyvalues[p].value; }
	cout<<"total values counted: "<<totalnumkeyvalues<<endl;
}
void countkeyvalues(){

}
void {%if(context['XWARE'] == "SW")%}enigma::{%endif%}printparameters(){
	cout<<endl<<"enigma::printparameters: test started."<<endl;
	cout<<"enigma::printparameters:: KVDATA_BATCHSIZE: "<<KVDATA_BATCHSIZE<<endl;
	cout<<"enigma::printparameters:: KVDATA_BATCHSIZE_KVS: "<<KVDATA_BATCHSIZE_KVS<<endl;
	
	cout<<"enigma::printparameters:: BUFFER_SIZE: "<<BUFFER_SIZE<<endl;
	cout<<"enigma::printparameters:: PADDEDBUFFER_SIZE: "<<PADDEDBUFFER_SIZE<<endl;
	
	cout<<"enigma::printparameters:: KVDRAMSZ: "<<KVDRAMSZ<<endl;
	cout<<"enigma::printparameters:: KVDRAMSZ_KVS: "<<KVDRAMSZ_KVS<<endl;
	
	cout<<"enigma::printparameters:: KVSOURCEDRAMSZ: "<<KVSOURCEDRAMSZ<<endl;
	cout<<"enigma::printparameters:: KVSOURCEDRAMSZ_KVS: "<<KVSOURCEDRAMSZ_KVS<<endl;
	
	cout<<"enigma::printparameters:: PADDEDKVSOURCEDRAMSZ: "<<PADDEDKVSOURCEDRAMSZ<<endl;
	cout<<"enigma::printparameters:: PADDEDKVSOURCEDRAMSZ_KVS: "<<PADDEDKVSOURCEDRAMSZ_KVS<<endl;
	
	cout<<"enigma::printparameters:: BUFFER_SIZE: "<<BUFFER_SIZE<<endl;
	cout<<"enigma::printparameters:: PADDEDBUFFER_SIZE: "<<PADDEDBUFFER_SIZE<<endl;
	
	cout<<"enigma::printparameters:: SRCBUFFER_SIZE: "<<SRCBUFFER_SIZE<<endl;
	cout<<"enigma::printparameters:: SRCBUFFER_SIZE * VECTOR_SIZE: "<<SRCBUFFER_SIZE * VECTOR_SIZE<<endl;
	
	cout<<"enigma::printparameters:: DESTBUFFER_SIZE: "<<DESTBUFFER_SIZE<<endl;
	cout<<"enigma::printparameters:: PADDEDDESTBUFFER_SIZE: "<<PADDEDDESTBUFFER_SIZE<<endl;
	cout<<"enigma::printparameters:: PADDEDDESTBUFFER_SIZE * VECTOR_SIZE: "<<PADDEDDESTBUFFER_SIZE * VECTOR_SIZE<<endl;
	
	cout<<"enigma::printparameters:: PADDEDBUFFER_SIZE / NUM_PARTITIONS: "<<PADDEDBUFFER_SIZE / NUM_PARTITIONS<<endl;
	
	cout<<"enigma::printparameters:: NFACTOR: "<<NFACTOR<<endl;
	
	cout<<"enigma::printparameters:: PADDEDDESTBUFFER_SIZE * NUMSUBWORKERS (total dest_kvs memory): "<<(PADDEDDESTBUFFER_SIZE * NUMSUBWORKERS)<<endl;
	cout<<"enigma::printparameters:: PADDEDDESTBUFFER_SIZE * VECTOR_SIZE * NUMSUBWORKERS (total dest memory): "<<(PADDEDDESTBUFFER_SIZE * VECTOR_SIZE * NUMSUBWORKERS)<<endl;
}
#endif
#ifdef _DEBUGMODE_STATS
void {%if(context['XWARE'] == "SW")%}enigma::{%endif%}printglobalvars(){
	cout<<"printglobalvars: "<<endl;
	cout<<"enigma::printglobalvars:: globalvar_totalkvsread: "<<globalvar_totalkvsread<<endl;
	cout<<"enigma::printglobalvars:: globalvar_totalkvsreadV: "<<globalvar_totalkvsreadV<<endl;
	
	cout<<"enigma::printglobalvars:: globalvar_totalkvstatsread: "<<globalvar_totalkvstatsread<<endl;
	cout<<"enigma::printglobalvars:: globalvar_totalkvsread4statscollection: "<<globalvar_totalkvsread4statscollection<<endl;
	cout<<"enigma::printglobalvars:: globalvar_totalkvstatswritten: "<<globalvar_totalkvstatswritten<<endl;	

	cout<<"enigma::printglobalvars:: globalstats_totalkvspartitioned: "<<globalstats_totalkvspartitioned<<endl;
	cout<<"enigma::printglobalvars:: globalstats_totalkvspartitionswritten: "<<globalstats_totalkvspartitionswritten<<endl;
	
	cout<<"enigma::printglobalvars:: globalstats_totalkvsreduced: "<<globalstats_totalkvsreduced<<endl;
	cout<<"enigma::printglobalvars:: globalstats_totalkvsreducewritten: "<<globalstats_totalkvsreducewritten<<endl;
}
void {%if(context['XWARE'] == "SW")%}enigma::{%endif%}clearglobalvars(){
	cout<<"clearglobalvars: "<<endl;
	globalvar_totalkvsread = 0;
	globalstats_totalkvspartitionswritten = 0;
	globalstats_totalkvspartitioned = 0;
	globalvar_totalkvstatsread = 0;
	globalvar_totalkvsread4statscollection = 0;
	globalvar_totalkvstatswritten = 0;
	globalstats_totalkvsreduced = 0;
	globalstats_totalkvsreducewritten = 0;
	globalvar_totalkvsreadV = 0;
}
void {%if(context['XWARE'] == "SW")%}enigma::{%endif%}globalstats_countkvstatsread(unsigned int count){
	globalvar_totalkvstatsread += count;
	return;
}
void {%if(context['XWARE'] == "SW")%}enigma::{%endif%}globalvar_countkvsread4statscollection(unsigned int count){
	globalvar_totalkvsread4statscollection += count;
	return;
}
void {%if(context['XWARE'] == "SW")%}enigma::{%endif%}globalstats_countkvstatswritten(unsigned int count){
	globalvar_totalkvstatswritten += count;
	return;
}
void {%if(context['XWARE'] == "SW")%}enigma::{%endif%}globalstats_countkvsread(unsigned int count){
	globalvar_totalkvsread += count;
	return;
}
void {%if(context['XWARE'] == "SW")%}enigma::{%endif%}globalstats_countkvspartitionswritten(unsigned int count){
	globalstats_totalkvspartitionswritten += count;
	return;
}
void {%if(context['XWARE'] == "SW")%}enigma::{%endif%}globalstats_countkvspartitioned(unsigned int count){
	globalstats_totalkvspartitioned += count;
	return;
}
void {%if(context['XWARE'] == "SW")%}enigma::{%endif%}globalstats_countkvsreduced(unsigned int count){
	globalstats_totalkvsreduced += count;
	return;
}
void {%if(context['XWARE'] == "SW")%}enigma::{%endif%}globalstats_countkvsreducewritten(unsigned int count){
	globalstats_totalkvsreducewritten += count;
	return;
}
void {%if(context['XWARE'] == "SW")%}enigma::{%endif%}globalstats_countkvsreadV(unsigned int count){
	globalvar_totalkvsreadV += count;
	return;
}
#endif 

unsigned int {%if(context['XWARE'] == "SW")%}enigma::{%endif%}allignhigher_KV(unsigned int val){
	unsigned int fac = (val + (VECTOR_SIZE - 1)) / VECTOR_SIZE;
	return (fac * VECTOR_SIZE);
}
unsigned int {%if(context['XWARE'] == "SW")%}enigma::{%endif%}allignlower_KV(unsigned int val){
	unsigned int fac = val / VECTOR_SIZE;
	return (fac * VECTOR_SIZE);
}
unsigned int {%if(context['XWARE'] == "SW")%}enigma::{%endif%}ceildiv(unsigned int val1, unsigned int val2){
	return (val1 + (val2 - 1)) / val2;
}	
unsigned int {%if(context['XWARE'] == "SW")%}enigma::{%endif%}max(unsigned int val1, unsigned int val2){
	if(val1 > val2){ return val1; }
	else { return val2; }
}
unsigned int {%if(context['XWARE'] == "SW")%}enigma::{%endif%}min(unsigned int A, unsigned int B){
	#pragma HLS INLINE
	if(A<B){ return A; }
	else { return B; }
}
unsigned int {%if(context['XWARE'] == "SW")%}enigma::{%endif%}hsub(unsigned int A, unsigned int B){
	#pragma HLS INLINE
	if(A < B){ return 0; }
	else { return A - B; }
}

unsigned int {%if(context['XWARE'] == "SW")%}enigma::{%endif%}getpartition(keyvalue_t keyvalue, unsigned int currentLOP, vertex_t upperlimit){
	partition_type val = ((keyvalue.key - upperlimit) >> (KVDATA_RANGE_PERSSDPARTITION_POW - (NUM_PARTITIONS_POW * currentLOP)));
	partition_type hashedval = (((1 << NUM_PARTITIONS_POW) - 1) & (val >> (1 - 1)));
	#ifdef _DEBUGMODE_CHECKS2
	checkoutofbounds("enigma::getpartition 35", hashedval, NUM_PARTITIONS, NAp, NAp, NAp);
	#endif
	return hashedval;
}
keyvalue_t {%if(context['XWARE'] == "SW")%}enigma::{%endif%}getkeyvalue(uint512_dt buffer[BUFFER_SIZE], batch_type addr, batch_type maxaddr_kvs){
	#pragma HLS INLINE
	if(addr >= (maxaddr_kvs * VECTOR_SIZE)){ addr = 0; } // FIXME. FORCEDFINISH
	keyvalue_t keyvalue;
	batch_type idy = addr / VECTOR_SIZE;
	vector_type idx = addr % VECTOR_SIZE;
	#ifdef _DEBUGMODE_CHECKS2
	if(idy >= maxaddr_kvs){ cout<<"getkeyvalue:: ERROR 45. addr: "<<addr<<", idy: "<<idy<<", idx: "<<idx<<endl; exit(EXIT_FAILURE); }
	checkoutofbounds("enigma::getkeyvalue 35", idy, maxaddr_kvs, NAp, NAp, NAp);
	#endif
	
	#ifdef _WIDEWORD
	{%for v in context['VECTOR_SIZE_seq']%}
	{%if(v>0)%}else {%endif%}if(idx=={{v}}){	
		keyvalue.key = buffer[idy].range({{32 * ((v * 2) + 1) - 1}}, {{(v * 2) * 32}});
		keyvalue.value = buffer[idy].range({{32 * (((v * 2) + 1) + 1) - 1}}, {{(v * 2 + 1) * 32}});
	}
	{%endfor%}
	else {}
	#else
	keyvalue = buffer[idy].data[idx];
	#endif
	return keyvalue;
}
void {%if(context['XWARE'] == "SW")%}enigma::{%endif%}setkeyvalue(uint512_dt buffer[BUFFER_SIZE], batch_type addr, keyvalue_t keyvalue, batch_type maxaddr_kvs){
	#pragma HLS INLINE
	if(addr >= (maxaddr_kvs * VECTOR_SIZE)){ addr = 0; } // FIXME. FORCEDFINISH
	batch_type idy = (addr / VECTOR_SIZE);
	vector_type idx = addr % VECTOR_SIZE;
	#ifdef _DEBUGMODE_CHECKS2
	checkoutofbounds("enigma::setkeyvalue 35", idy, maxaddr_kvs, addr, NAp, NAp);
	#endif
	
	#ifdef _WIDEWORD
	{%for v in context['VECTOR_SIZE_seq']%}
	{%if(v>0)%}else {%endif%}if(idx=={{v}}){	
		buffer[idy].range({{32 * ((v * 2) + 1) - 1}}, {{(v * 2) * 32}}) = keyvalue.key;
		buffer[idy].range({{32 * (((v * 2) + 1) + 1) - 1}}, {{(v * 2 + 1) * 32}}) = keyvalue.value;
	}
	{%endfor%}
	else {}
	#else
	buffer[idy].data[idx] = keyvalue;
	#endif
	return;
}

buffer_type {%if(context['XWARE'] == "SW")%}enigma::{%endif%}getactivesize(buffer_type i, batch_type i_end, buffer_type buffersize){	
	#pragma HLS INLINE
	buffer_type activesize = 0;
	buffer_type next_i = i + buffersize;
	if(i >= i_end){ activesize = 0; }
	else if ((i < i_end) && (next_i < i_end)) { activesize = buffersize; }
	else if ((i < i_end) && (next_i >= i_end)) { activesize = i_end - i; }
	else {
		i = 0; 
		#ifdef _DEBUGMODE_CHECKS
		cout<<"getactivesize:: should NEVER get here: activesize: "<<activesize<<", i: "<<i<<", next_i: "<<next_i<<", i_end: "<<i_end<<endl;
		exit(EXIT_FAILURE);
		#endif
	}
	#ifdef _DEBUGMODE_KERNELPRINTS
	print4("getactivesize: i", "i_end", "buffersize", "activesize", i, i_end, buffersize, activesize);
	#endif
	return activesize;
}
batch_type {%if(context['XWARE'] == "SW")%}enigma::{%endif%}getAddr(batch_type addr){
	#pragma HLS INLINE
	return addr;
}
batch_type {%if(context['XWARE'] == "SW")%}enigma::{%endif%}getstatsAddr(batch_type addr){
	#pragma HLS INLINE
	return BASEOFFSET_STATSDRAM + addr;
}
batch_type {%if(context['XWARE'] == "SW")%}enigma::{%endif%}getmessagesAddr(batch_type addr){
	#pragma HLS INLINE
	return BASEOFFSET_MESSAGESDRAM + addr;
}

unsigned int {%if(context['XWARE'] == "SW")%}enigma::{%endif%}getsourceskipsize(unsigned int currentLOP, unsigned int param){
	#pragma HLS INLINE
	unsigned int treedepth = TREE_DEPTH; // NB: for debugging purposes only
	unsigned int result = param;
	for(unsigned int i=0; i<(currentLOP-1); i++){
	#pragma HLS LOOP_TRIPCOUNT min=0 max=treedepth avg=treedepth
		result = result / NUM_PARTITIONS;
	}
	return result;
}
unsigned int {%if(context['XWARE'] == "SW")%}enigma::{%endif%}getdestskipsize(unsigned int currentLOP, unsigned int param){
	#pragma HLS INLINE
	unsigned int treedepthloop_tripcount = TREE_DEPTH; // NB: for debugging purposes only
	unsigned int result = param / NUM_PARTITIONS;
	for(unsigned int i=0; i<(currentLOP-1); i++){
	#pragma HLS LOOP_TRIPCOUNT min=0 max=treedepthloop_tripcount avg=treedepthloop_tripcount
		result = result / NUM_PARTITIONS;
	}
	return result;
}

void {%if(context['XWARE'] == "SW")%}enigma::{%endif%}loaddeststats(keyvalue_t * kvstats, keyvalue_t buffer[NUM_PARTITIONS], unsigned int partitionoffset, unsigned int currentLOP, vertex_t LLOPnumpartitions){
	#pragma HLS INLINE
	unsigned int skipsize = getdestskipsize(currentLOP, LLOPnumpartitions);
	unsigned int nxtpos = partitionoffset;
	
	LOADDESTSTATS_LOOP1: for(partition_type p=0; p<NUM_PARTITIONS; p++){
	#pragma HLS PIPELINE	
		buffer[p] = kvstats[getstatsAddr(nxtpos)]; 
		nxtpos += skipsize;
	}
	LOADDESTSTATS_LOOP2: for(partition_type p=0; p<NUM_PARTITIONS; p++){
		#pragma HLS PIPELINE
		buffer[p].value = 0;
	}
	return;
}
void {%if(context['XWARE'] == "SW")%}enigma::{%endif%}storedeststats(keyvalue_t * kvstats, keyvalue_t buffer[NUM_PARTITIONS], unsigned int partitionoffset, unsigned int currentLOP, vertex_t LLOPnumpartitions){
	#pragma HLS INLINE
	unsigned int skipsize = getdestskipsize(currentLOP, LLOPnumpartitions);
	unsigned int nxtpos = partitionoffset;
	
	STOREDESTSTATS_LOOP1: for(partition_type p=0; p<NUM_PARTITIONS; p++){
	#pragma HLS PIPELINE
		kvstats[getstatsAddr(nxtpos)].value = buffer[p].value; 
		nxtpos += skipsize;
	}
	STOREDESTSTATS_LOOP2: for(partition_type p=0; p<NUM_PARTITIONS; p++){
		#pragma HLS PIPELINE
		buffer[p].value = 0;
	}
	return;
}

unsigned int {%if(context['XWARE'] == "SW")%}enigma::{%endif%}get_num_source_partitions(unsigned int currentLOP){
	#pragma HLS INLINE
	unsigned int treedepth = TREE_DEPTH;
	unsigned int pow = 1;
	for(unsigned int i=0; i<(currentLOP-1); i++){
	#pragma HLS LOOP_TRIPCOUNT min=0 max=treedepth avg=treedepth
		pow = pow * NUM_PARTITIONS;
	}
	return pow;
}

void {%if(context['XWARE'] == "SW")%}enigma::{%endif%}calculateoffsets(keyvalue_t capsule[NUM_PARTITIONS]){
	#pragma HLS INLINE
	capsule[0].key = 0;
	PREPARECAPSULE_LOOP1: for (partition_type p = 1; p<NUM_PARTITIONS; p++){ capsule[p].key = capsule[p-1].key + capsule[p-1].value; }
	return;
}
void {%if(context['XWARE'] == "SW")%}enigma::{%endif%}calculateoffsets({%for v in context['VECTOR_SIZE_seq']%}keyvalue_t capsule{{v}}[NUM_PARTITIONS],{%endfor%} int dummy){
	#pragma HLS INLINE
	{%for v in context['VECTOR_SIZE_seq']%}
	capsule{{v}}[0].key = 0;
	{%endfor%}
	PREPARECAPSULE_LOOP1: for (partition_type p = 1; p<NUM_PARTITIONS; p++){
		{%for v in context['VECTOR_SIZE_seq']%}
		capsule{{v}}[p].key = capsule{{v}}[p-1].key + capsule{{v}}[p-1].value;
		{%endfor%}
	}
	return;
}

void {%if(context['XWARE'] == "SW")%}enigma::{%endif%}loadclopparams(globalparams_t globalparams, clopparams_t * llopparams, unsigned int currentLOP){
	#pragma HLS INLINE
	if((currentLOP % 2) == 1){ llopparams->baseaddr_worksourcekvs_kvs = BASEOFFSET_KVDRAM_KVS; llopparams->baseaddr_workdestkvs_kvs = BASEOFFSET_KVDRAMWORKSPACE_KVS; }
	else { llopparams->baseaddr_worksourcekvs_kvs = BASEOFFSET_KVDRAMWORKSPACE_KVS; llopparams->baseaddr_workdestkvs_kvs = BASEOFFSET_KVDRAM_KVS; }	
	llopparams->baseaddr_capsule_kvs = BASEOFFSET_CAPSULES_KVS;
	llopparams->baseaddr_stats = BASEOFFSET_STATSDRAM;
	llopparams->num_source_partitions = get_num_source_partitions(currentLOP);
	llopparams->nextsourceoffset_partition = 0;
	llopparams->nextdestoffset_partition = 0;
	llopparams->nextsourceoffset_kv = 0;
	llopparams->nextdestoffset_kv = 0;
	llopparams->sourceskipsize_partition = getsourceskipsize(currentLOP, globalparams.LLOPnumpartitions);
	llopparams->destskipsize_partition = getdestskipsize(currentLOP, globalparams.LLOPnumpartitions);
	llopparams->sourceskipsize_kv = getsourceskipsize(currentLOP, KVDATA_RANGE_PERSSDPARTITION);
	llopparams->destskipsize_kv = getdestskipsize(currentLOP, KVDATA_RANGE_PERSSDPARTITION);
	llopparams->destpartitionrange = (1 << (KVDATA_RANGE_PERSSDPARTITION_POW - (NUM_PARTITIONS_POW * currentLOP)));
	llopparams->currentLOP = currentLOP;
	llopparams->upperlimit = 0;
	
	#ifdef _DEBUGMODE_KERNELPRINTS
	print1("loadclopparams:: llopparams->baseaddr_worksourcekvs_kvs", llopparams->baseaddr_worksourcekvs_kvs);
	print1("loadclopparams:: llopparams->baseaddr_workdestkvs_kvs", llopparams->baseaddr_workdestkvs_kvs);
	print1("loadclopparams:: llopparams->baseaddr_capsule_kvs", llopparams->baseaddr_capsule_kvs);
	print1("loadclopparams:: llopparams->baseaddr_stats", llopparams->baseaddr_stats);
	print1("loadclopparams:: llopparams->num_source_partitions", llopparams->num_source_partitions);
	print1("loadclopparams:: llopparams->nextsourceoffset_partition", llopparams->nextsourceoffset_partition);
	print1("loadclopparams:: llopparams->nextdestoffset_partition", llopparams->nextdestoffset_partition);
	print1("loadclopparams:: llopparams->nextsourceoffset_kv", llopparams->nextsourceoffset_kv);
	print1("loadclopparams:: llopparams->nextdestoffset_kv", llopparams->nextdestoffset_kv);
	print1("loadclopparams:: llopparams->sourceskipsize_partition", llopparams->sourceskipsize_partition);
	print1("loadclopparams:: llopparams->destskipsize_partition", llopparams->destskipsize_partition);
	print1("loadclopparams:: llopparams->sourceskipsize_kv", llopparams->sourceskipsize_kv);
	print1("loadclopparams:: llopparams->destskipsize_kv", llopparams->destskipsize_kv);
	print1("loadclopparams:: llopparams->destpartitionrange", llopparams->destpartitionrange);
	print1("loadclopparams:: llopparams->currentLOP", llopparams->currentLOP);
	print1("loadclopparams:: llopparams->upperlimit", llopparams->upperlimit);
	#endif
	return;
}
value_t {%if(context['XWARE'] == "SW")%}enigma::{%endif%}reducefunc(keyy_t vid, value_t value, value_t edgeval, unsigned int GraphIter){
	#pragma HLS INLINE
	value_t ret = 0;
	#ifdef PR_ALGORITHM
	ret = value + edgeval;
	#elif defined(BFS_ALGORITHM)
	ret = min(value, GraphIter);
	#elif defined(BC_ALGORITHM)
	ret = min(value, GraphIter);
	#endif
	return ret;
}
void {%if(context['XWARE'] == "SW")%}enigma::{%endif%}getchunksize(unsigned int workerID, buffer_type * chunk_size, buffer_type buffer_size, travstate_t travstate){
	#pragma HLS INLINE
	*chunk_size = buffer_size;
	batch_type i = travstate.i_kvs + (workerID * buffer_size);
	if (i > travstate.end_kvs){ *chunk_size = 0; }
	else if ((i + buffer_size) > travstate.end_kvs){ *chunk_size = travstate.end_kvs - i; }
	else {}
	#ifdef _DEBUGMODE_CHECKS2
	checkoutofbounds("getchunksize 35", *chunk_size, buffer_size + 1, NAp, NAp, NAp);
	checkoutofbounds("getchunksize 36", i + *chunk_size, PADDEDKVSOURCEDRAMSZ_KVS + 1, NAp, NAp, NAp);
	#endif
	return;
}
void {%if(context['XWARE'] == "SW")%}enigma::{%endif%}getchunksizes(unsigned int workerID {%for sw in context['NUMSUBWORKERS_seq']%}, buffer_type * chunk{{sw}}_size{%endfor%}, buffer_type buffer_size, travstate_t travstate){
	#pragma HLS INLINE
	{%for sw in context['NUMSUBWORKERS_seq']%}
	*chunk{{sw}}_size = buffer_size;
	batch_type i{{sw}} = travstate.i_kvs + (((workerID * NUMSUBWORKERS) + {{sw}}) * buffer_size);
	if (i{{sw}} > travstate.end_kvs){ *chunk{{sw}}_size = 0; }
	else if ((i{{sw}} + buffer_size) > travstate.end_kvs){ *chunk{{sw}}_size = travstate.end_kvs - i{{sw}}; }
	else {}
	#ifdef _DEBUGMODE_CHECKS2
	checkoutofbounds("getchunksizes 34", *chunk{{sw}}_size, buffer_size + 1, NAp, NAp, NAp);
	checkoutofbounds("getchunksizes 35", i{{sw}} + *chunk{{sw}}_size, PADDEDKVSOURCEDRAMSZ_KVS + 1, NAp, NAp, NAp);
	#endif
	{%endfor%}
	return;
}
int {%if(context['XWARE'] == "SW")%}enigma::{%endif%}IsReducePhase(unsigned int currentLOP, unsigned int treedepth, globalparams_t globalparams){
	if((currentLOP == (treedepth + 1)) && (globalparams.reducecommand == ON)){ return 1; }
	return 0;
}

{%for ddrs, ddrs_ in zip(context['NUMINSTANCES_seq'], context['INSTANCES_charseq'])%}
void {%if(context['XWARE'] == "SW")%}enigma::{%endif%}readcapsules{{ddrs}}(uint512_dt * kvdram, {%for v in context['VECTOR_SIZE_seq']%} keyvalue_t BIGcapsule{{v}}[NUM_PARTITIONS],{%endfor%} {%for v in context['VECTOR_SIZE_seq']%}keyvalue_t capsule{{v}}[NUM_PARTITIONS], {%endfor%} batch_type baseaddress_kvs, batch_type offset_kvs){
	#ifdef _DEBUGMODE_CHECKS2
	checkoutofbounds("enigma::readcapsules{{ddrs}} 35", (baseaddress_kvs + offset_kvs + NUM_PARTITIONS), KVSOURCEDRAMSZ_KVS, NAp, NAp, NAp);
	#endif
	
	buffer_type loffset = offset_kvs % CAPSULEBUFFER_SIZE;
	if(loffset == 0){
		batch_type loadoffset = offset_kvs;
		#ifdef _DEBUGMODE_CHECKS2
		checkoutofbounds("enigma::readcapsules{{ddrs}} 34", baseaddress_kvs + loadoffset + CAPSULEBUFFER_SIZE, KVSOURCEDRAMSZ_KVS + 1, baseaddress_kvs, loadoffset, CAPSULEBUFFER_SIZE);
		#endif
		SAVECAPSULE{{ddrs}}_LOOP2: for(buffer_type i=0; i<CAPSULEBUFFER_SIZE; i++){
		#pragma HLS PIPELINE II=1
			uint512_dt Vtemp; /// = kvdram[baseaddress_kvs + loadoffset + i]; // FIXME.
			#ifdef _WIDEWORD
			{%for v in context['VECTOR_SIZE_seq']%}
				BIGcapsule{{v}}[i].key = Vtemp.range({{32 * ((v * 2) + 1) - 1}}, {{(v * 2) * 32}});
				BIGcapsule{{v}}[i].value = Vtemp.range({{32 * (((v * 2) + 1) + 1) - 1}}, {{(v * 2 + 1) * 32}});
			{%endfor%}
			#else 
			{%for v in context['VECTOR_SIZE_seq']%}
				BIGcapsule{{v}}[i].key = Vtemp.data[{{v}}].key;
				BIGcapsule{{v}}[i].value = Vtemp.data[{{v}}].value;
			{%endfor%}
			#endif
			#ifdef _DEBUGMODE_STATS
			globalstats_countkvstatsread(VECTOR_SIZE);
			#endif
		}
	}
	
	SAVECAPSULE{{ddrs}}_LOOP1: for(buffer_type i=0; i<NUM_PARTITIONS; i++){
	#pragma HLS PIPELINE II=1
		{%for v in context['VECTOR_SIZE_seq']%}
		capsule{{v}}[i].key = BIGcapsule{{v}}[loffset + i].key;
		capsule{{v}}[i].value = BIGcapsule{{v}}[loffset + i].value;
		{%endfor%}
	}
	
	return;
}
{%endfor%}
{%for ddrs, ddrs_ in zip(context['NUMINSTANCES_seq'], context['INSTANCES_charseq'])%}
void {%if(context['XWARE'] == "SW")%}enigma::{%endif%}readkeyvalues{{ddrs}}(uint512_dt * kvdram {%for v in context['VECTOR_SIZE_seq']%}, keyvalue_t * buffer{{v}}{%endfor%}, batch_type baseaddress, batch_type offset_kvs, buffer_type size_kvs, batch_type maxaddress_kvs, travstate_t travstate){			
	unsigned int analysis_buffersz = SRCBUFFER_SIZE;
	
	#ifdef _DEBUGMODE_CHECKS2
	checkoutofbounds("enigma::readkeyvalues dram 35", offset_kvs + size_kvs, PADDEDKVSOURCEDRAMSZ_KVS, NAp, NAp, NAp);
	#endif
	READBUFFER_LOOP1: for (buffer_type i=0; i<size_kvs; i++){ // chunk_size, SRCBUFFER_SIZE
	   #pragma HLS PIPELINE II=1
	   #pragma HLS LOOP_TRIPCOUNT min=0 max=analysis_buffersz avg=analysis_buffersz					
		uint512_dt Vtemp = kvdram[baseaddress + offset_kvs + i];
		#ifdef _WIDEWORD
		{%for v in context['VECTOR_SIZE_seq']%}
			buffer{{v}}[i].key = Vtemp.range({{32 * ((v * 2) + 1) - 1}}, {{(v * 2) * 32}});
			buffer{{v}}[i].value = Vtemp.range({{32 * (((v * 2) + 1) + 1) - 1}}, {{(v * 2 + 1) * 32}});
		{%endfor%}
		#else 
		{%for v in context['VECTOR_SIZE_seq']%}
			buffer{{v}}[i] = Vtemp.data[{{v}}];
		{%endfor%}
		#endif 
		
		#ifdef _DEBUGMODE_STATS
		if(travstate.info==1){ globalstats_countkvsread(VECTOR_SIZE); }
		#endif
	}
	return;
}
{%endfor%}
{%for ddrs, ddrs_ in zip(context['NUMINSTANCES_seq'], context['INSTANCES_charseq'])%}
void {%if(context['XWARE'] == "SW")%}enigma::{%endif%}readkeyvalues{{ddrs}}(uint512_dt * kvdram, uint512_dt * buffer, batch_type baseaddress, batch_type offset_kvs, buffer_type size_kvs, batch_type maxaddress_kvs, travstate_t travstate){			
	unsigned int analysis_buffersz = SRCBUFFER_SIZE;
	
	#ifdef _DEBUGMODE_CHECKS2
	checkoutofbounds("enigma::readkeyvalues dram 36", baseaddress + offset_kvs + size_kvs, maxaddress_kvs, baseaddress, offset_kvs, size_kvs);
	#endif
	READBUFFER_LOOP1: for (buffer_type i=0; i<size_kvs; i++){
	   #pragma HLS PIPELINE II=1
	   #pragma HLS LOOP_TRIPCOUNT min=0 max=analysis_buffersz avg=analysis_buffersz	
		buffer[i] = kvdram[baseaddress + offset_kvs + i];
		#ifdef _DEBUGMODE_STATS
		// globalstats_countkvsread(VECTOR_SIZE);
		if(travstate.info==1){ globalstats_countkvsread(VECTOR_SIZE); }
		#endif
	}
	return;
}
{%endfor%}
			
{%for ddrs, ddrs_ in zip(context['NUMINSTANCES_seq'], context['INSTANCES_charseq'])%}
{%for w in context['NUMWORKERS_seq']%}
void {%if(context['XWARE'] == "SW")%}enigma::{%endif%}extractcapsules{{ddrs}}{{w}}(unsigned int workerID {%for v in context['VECTOR_SIZE_seq']%},keyvalue_t sourcebuffer{{v}}[SRCBUFFER_SIZE]{%endfor%} {%for v in context['VECTOR_SIZE_seq']%}, keyvalue_t capsule{{v}}[NUM_PARTITIONS]{%endfor%}, clopparams_t llopparams, travstate_t travstate){
	{%for v in context['VECTOR_SIZE_seq']%}
	buffer_type sizes{{v}}[NUM_PARTITIONS];
	#pragma HLS ARRAY_PARTITION variable=sizes{{v}} complete
	{%endfor%}
	
	EXTRACTCAPSULES{{ddrs}}_LOOP1: for(partition_type p=0; p<NUM_PARTITIONS; p++){
	#pragma HLS PIPELINE II=1
		{%for v in context['VECTOR_SIZE_seq']%}
		sizes{{v}}[p] = 0;
		{%endfor%}
	}	
	EXTRACTCAPSULES{{ddrs}}_LOOP2: for(buffer_type k=0; k<SRCBUFFER_SIZE; k++){
	#pragma HLS PIPELINE II=1
		{%for v in context['VECTOR_SIZE_seq']%}
			keyvalue_t keyvalue{{v}};
			partition_type p{{v}};
			keyvalue{{v}} = sourcebuffer{{v}}[k];
			p{{v}} = getpartition(keyvalue{{v}}, llopparams.currentLOP, llopparams.upperlimit);
			sizes{{v}}[p{{v}}] += 1;
		{%endfor%}
		#ifdef _DEBUGMODE_STATS
		globalvar_countkvsread4statscollection(VECTOR_SIZE); // FIXME. FORCEDFINISH
		#endif
	}
	{%for swPERv in context['NUMSUBWORKERSPERVECTOR_seq']%}
	EXTRACTCAPSULES{{ddrs}}{{swPERv}}_LOOP3: for(partition_type p=0; p<NUM_PARTITIONS; p++){
	#pragma HLS PIPELINE II=1
		{%for sw in context['NUMSUBWORKERS_seq']%}
		capsule{{sw}}[p].key = 0;
		capsule{{sw}}[p].value += sizes{{sw*context['NUMSUBWORKERSPERVECTOR'] + swPERv}}[p];
		{%endfor%}
	}
	{%endfor%}
	return;
}
{%endfor%}
{%endfor%}
{%for ddrs, ddrs_ in zip(context['NUMINSTANCES_seq'], context['INSTANCES_charseq'])%}
{%for w in context['NUMWORKERS_seq']%}
void {%if(context['XWARE'] == "SW")%}enigma::{%endif%}extractcapsules{{ddrs}}{{w}}(unsigned int workerID {%for sw in context['NUMSUBWORKERS_seq']%}, uint512_dt sourcebuffer{{sw}}[SRCBUFFER_SIZE]{%endfor%} {%for sw in context['NUMSUBWORKERS_seq']%}, keyvalue_t capsule{{sw}}[NUM_PARTITIONS]{%endfor%}, clopparams_t llopparams, travstate_t travstate){
	{%for sw in context['NUMSUBWORKERS_seq']%}
	buffer_type sizes{{sw}}[NUM_PARTITIONS];
	#pragma HLS ARRAY_PARTITION variable=sizes{{sw}} complete
	{%endfor%}
	
	EXTRACTCAPSULES{{ddrs}}_LOOP1: for(partition_type p=0; p<NUM_PARTITIONS; p++){
	#pragma HLS PIPELINE II=1
		{%for sw in context['NUMSUBWORKERS_seq']%}
		sizes{{sw}}[p] = 0;
		{%endfor%}
	}
	EXTRACTCAPSULES{{ddrs}}_LOOP2: for(buffer_type k=0; k<SRCBUFFER_SIZE * VECTOR_SIZE; k++){
	#pragma HLS PIPELINE II=1
		{%for sw in context['NUMSUBWORKERS_seq']%}
			keyvalue_t keyvalue{{sw}} = getkeyvalue(sourcebuffer{{sw}}, k, SRCBUFFER_SIZE);
			partition_type p{{sw}} = getpartition(keyvalue{{sw}}, llopparams.currentLOP, llopparams.upperlimit);
			sizes{{sw}}[p{{sw}}] += 1;
		{%endfor%}
		#ifdef _DEBUGMODE_STATS
		globalvar_countkvsread4statscollection(NUMSUBWORKERS);
		#endif
	}
	EXTRACTCAPSULES{{ddrs}}_LOOP3: for(partition_type p=0; p<NUM_PARTITIONS; p++){
	#pragma HLS PIPELINE II=1
		{%for sw in context['NUMSUBWORKERS_seq']%}
		capsule{{sw}}[p].key = 0;
		capsule{{sw}}[p].value += sizes{{sw}}[p];
		{%endfor%}
	}
	return;
}
{%endfor%}
{%endfor%}
{%for ddrs, ddrs_ in zip(context['NUMINSTANCES_seq'], context['INSTANCES_charseq'])%}
{%for w in context['NUMWORKERS_seq']%}
void {%if(context['XWARE'] == "SW")%}enigma::{%endif%}partitionkeyvalues{{ddrs}}{{w}}(unsigned int workerID {%for v in context['VECTOR_SIZE_seq']%},keyvalue_t sourcebuffer{{v}}[SRCBUFFER_SIZE]{%endfor%} {%for sw in context['NUMSUBWORKERS_seq']%},uint512_dt destbuffer{{sw}}[PADDEDDESTBUFFER_SIZE]{%endfor%} {%for sw in context['NUMSUBWORKERS_seq']%},keyvalue_t capsule{{sw}}[NUM_PARTITIONS]{%endfor%}, travstate_t travstate, clopparams_t llopparams){					
	unsigned int analysis_partition = SRCBUFFER_SIZE;
	
	{%for sw in context['NUMSUBWORKERS_seq']%}
	keyvalue_t sizes{{sw}}[NUM_PARTITIONS];
	#pragma HLS ARRAY_PARTITION variable=sizes{{sw}} complete 
	{%endfor%}
	
	for(partition_type p=0; p<NUM_PARTITIONS; p++){ {%for sw in context['NUMSUBWORKERS_seq']%} sizes{{sw}}[p].key = capsule{{sw}}[p].key; sizes{{sw}}[p].value = capsule{{sw}}[p].value; {%endfor%} }
	{%for swPERv in context['NUMSUBWORKERSPERVECTOR_seq']%}
	PARTITIONPHASE_PARTITION{{swPERv}}_MAIN: for(buffer_type k=0; k<SRCBUFFER_SIZE; k++){
	#pragma HLS LOOP_TRIPCOUNT min=0 max=analysis_partition avg=analysis_partition
	#pragma HLS PIPELINE II=1
		{%for sw in context['NUMSUBWORKERS_seq']%}
		keyvalue_t keyvalue{{sw}} = sourcebuffer{{sw*context['NUMSUBWORKERSPERVECTOR']+swPERv}}[k];
		{%endfor%}
		
		{%for sw in context['NUMSUBWORKERS_seq']%}
		partition_type p{{sw}} = getpartition(keyvalue{{sw}}, llopparams.currentLOP, llopparams.upperlimit);
		{%endfor%}
		#ifdef _DEBUGMODE_CHECKS // FIXME. FORCEDFINISH
		{%for sw in context['NUMSUBWORKERS_seq']%}
		checkoutofbounds("enigma::partitionkeyvalues{{ddrs}} 34", sizes{{sw}}[p{{sw}}].key + sizes{{sw}}[p{{sw}}].value, PADDEDDESTBUFFER_SIZE * VECTOR_SIZE, sizes{{sw}}[p{{sw}}].key, sizes{{sw}}[p{{sw}}].value, NAp);
		{%endfor%}
		#endif
		
		{%for sw in context['NUMSUBWORKERS_seq']%}
		setkeyvalue(destbuffer{{sw}}, sizes{{sw}}[p{{sw}}].key + sizes{{sw}}[p{{sw}}].value, keyvalue{{sw}}, PADDEDDESTBUFFER_SIZE);
		{%endfor%}
		
		{%for sw in context['NUMSUBWORKERS_seq']%}
		sizes{{sw}}[p{{sw}}].value += 1;
		{%endfor%}
		
		#ifdef _DEBUGMODE_STATS
		{%for sw in context['NUMSUBWORKERS_seq']%}
		globalstats_countkvspartitioned(1); // FIXME. FORCEDFINISH
		{%endfor%}
		#endif
	}
	{%endfor%}
	for(partition_type p=0; p<NUM_PARTITIONS; p++){ {%for sw in context['NUMSUBWORKERS_seq']%} capsule{{sw}}[p].value = sizes{{sw}}[p].value; {%endfor%} }
}
{%endfor%}
{%endfor%}
{%for ddrs, ddrs_ in zip(context['NUMINSTANCES_seq'], context['INSTANCES_charseq'])%}
{%for w in context['NUMWORKERS_seq']%}
void {%if(context['XWARE'] == "SW")%}enigma::{%endif%}partitionkeyvalues{{ddrs}}{{w}}(unsigned int workerID {%for sw in context['NUMSUBWORKERS_seq']%}, uint512_dt sourcebuffer{{sw}}[SRCBUFFER_SIZE]{%endfor%} {%for sw in context['NUMSUBWORKERS_seq']%}, uint512_dt destbuffer{{sw}}[PADDEDDESTBUFFER_SIZE]{%endfor%} {%for sw in context['NUMSUBWORKERS_seq']%}, keyvalue_t capsule{{sw}}[NUM_PARTITIONS]{%endfor%}, travstate_t travstate, clopparams_t llopparams){					
	unsigned int analysis_partition = SRCBUFFER_SIZE;
	
	{%for sw in context['NUMSUBWORKERS_seq']%}
	keyvalue_t sizes{{sw}}[NUM_PARTITIONS];
	#pragma HLS ARRAY_PARTITION variable=sizes{{sw}} complete 
	{%endfor%}
	
	for(partition_type p=0; p<NUM_PARTITIONS; p++){ {%for sw in context['NUMSUBWORKERS_seq']%} sizes{{sw}}[p].key = capsule{{sw}}[p].key; sizes{{sw}}[p].value = capsule{{sw}}[p].value; {%endfor%} }
	PARTITIONPHASE_PARTITION_MAIN: for(buffer_type k=0; k<SRCBUFFER_SIZE * VECTOR_SIZE; k++){
	#pragma HLS LOOP_TRIPCOUNT min=0 max=analysis_partition avg=analysis_partition
	#pragma HLS PIPELINE II=1
		{%for sw in context['NUMSUBWORKERS_seq']%}
		keyvalue_t keyvalue{{sw}} = getkeyvalue(sourcebuffer{{sw}}, k, SRCBUFFER_SIZE);
		{%endfor%}

		{%for sw in context['NUMSUBWORKERS_seq']%}
		partition_type p{{sw}} = getpartition(keyvalue{{sw}}, llopparams.currentLOP, llopparams.upperlimit);
		{%endfor%}
		#ifdef _DEBUGMODE_CHECKS
		{%for sw in context['NUMSUBWORKERS_seq']%}
		checkoutofbounds("enigma::partitionkeyvalues{{ddrs}} 34", sizes{{sw}}[p{{sw}}].key + sizes{{sw}}[p{{sw}}].value, PADDEDDESTBUFFER_SIZE * VECTOR_SIZE, sizes{{sw}}[p{{sw}}].key, sizes{{sw}}[p{{sw}}].value, NAp);
		{%endfor%}
		#endif
		
		{%for sw in context['NUMSUBWORKERS_seq']%}
		setkeyvalue(destbuffer{{sw}}, sizes{{sw}}[p{{sw}}].key + sizes{{sw}}[p{{sw}}].value, keyvalue{{sw}}, PADDEDDESTBUFFER_SIZE);
		{%endfor%}
		
		{%for sw in context['NUMSUBWORKERS_seq']%}
		sizes{{sw}}[p{{sw}}].value += 1;
		{%endfor%}
		
		#ifdef _DEBUGMODE_STATS
		{%for sw in context['NUMSUBWORKERS_seq']%}
		globalstats_countkvspartitioned(1); 
		{%endfor%}
		#endif
	}
	for(partition_type p=0; p<NUM_PARTITIONS; p++){ {%for sw in context['NUMSUBWORKERS_seq']%} capsule{{sw}}[p].value = sizes{{sw}}[p].value; {%endfor%} }
}
{%endfor%}
{%endfor%}

{%for ddrs, ddrs_ in zip(context['NUMINSTANCES_seq'], context['INSTANCES_charseq'])%}
void {%if(context['XWARE'] == "SW")%}enigma::{%endif%}reducepartitions{{ddrs}}({%for sw in context['NUMSUBWORKERS_seq']%} uint512_dt sourcebuffer{{sw}}[SRCBUFFER_SIZE], {%endfor%} {%for sw in context['NUMSUBWORKERS_seq']%} uint512_dt destbuffer{{sw}}[PADDEDDESTBUFFER_SIZE], {%endfor%} travstate_t travstate, globalparams_t globalparams){
	unsigned int analysis_buffersz = SRCBUFFER_SIZE * VECTOR_SIZE;
	
	REDUCEPHASE_REDUCE{{v}}_LOOP2: for(buffer_type k=0; k<SRCBUFFER_SIZE * VECTOR_SIZE; k++){
	#pragma HLS LOOP_TRIPCOUNT min=0 max=analysis_buffersz avg=analysis_buffersz
	#pragma HLS PIPELINE II=1					
		{%for sw in context['NUMSUBWORKERS_seq']%}
		keyvalue_t keyvalue{{sw}} = getkeyvalue(sourcebuffer{{sw}}, k, SRCBUFFER_SIZE);
		{%endfor%}
		
		{%for sw in context['NUMSUBWORKERS_seq']%}
		vertex_t loc{{sw}} = keyvalue{{sw}}.key - globalparams.vbegin;
		{%endfor%}
		
		{%for sw in context['NUMSUBWORKERS_seq']%}
		if(loc{{sw}} >= PADDEDDESTBUFFER_SIZE * VECTOR_SIZE){ loc{{sw}} = 0; } // REMOVEME.
		{%endfor%}
		
		#ifdef _DEBUGMODE_CHECKS2
		{%for sw in context['NUMSUBWORKERS_seq']%}
		checkoutofbounds("legion::reduce_ddr{{ddrs}}_v{{v}} 34", loc{{sw}}, PADDEDDESTBUFFER_SIZE * VECTOR_SIZE, NAp, NAp, NAp);
		{%endfor%}
		#endif
		
		{%for sw in context['NUMSUBWORKERS_seq']%}
		keyvalue_t vprop{{sw}} = getkeyvalue(destbuffer{{sw}}, loc{{sw}}, PADDEDDESTBUFFER_SIZE);
		{%endfor%}
		
		{%for sw in context['NUMSUBWORKERS_seq']%}
		value_t temp{{sw}} = reducefunc(vprop{{sw}}.key, vprop{{sw}}.value, keyvalue{{sw}}.value, globalparams.GraphIter);
		{%endfor%}
		
		{%for sw in context['NUMSUBWORKERS_seq']%}
		vprop{{sw}}.value = temp{{sw}};
		{%endfor%}
		
		{%for sw in context['NUMSUBWORKERS_seq']%}
		setkeyvalue(destbuffer{{sw}}, loc{{sw}}, vprop{{sw}}, PADDEDDESTBUFFER_SIZE);	
		{%endfor%}
		
		#ifdef _DEBUGMODE_STATS
		{%for sw in context['NUMSUBWORKERS_seq']%}
		globalstats_countkvsreduced(1);
		{%endfor%}
		#endif
	}
	return;
}
{%endfor%}

{%for ddrs, ddrs_ in zip(context['NUMINSTANCES_seq'], context['INSTANCES_charseq'])%}
void {%if(context['XWARE'] == "SW")%}enigma::{%endif%}savecapsules{{ddrs}}(uint512_dt * kvdram {%for v in context['VECTOR_SIZE_seq']%}, keyvalue_t BIGcapsule{{v}}[CAPSULEBUFFER_SIZE]{%endfor%} {%for v in context['VECTOR_SIZE_seq']%}, keyvalue_t capsule{{v}}[NUM_PARTITIONS]{%endfor%}, batch_type baseaddress_kvs, batch_type offset_kvs, travstate_t travstate){							
	buffer_type loffset = offset_kvs % CAPSULEBUFFER_SIZE;
	
	calculateoffsets({%for v in context['VECTOR_SIZE_seq']%}capsule{{v}},{%endfor%} NAp);
	SAVECAPSULE{{ddrs}}_LOOP1: for(buffer_type i=0; i<NUM_PARTITIONS; i++){
	#pragma HLS PIPELINE II=1
		{%for v in context['VECTOR_SIZE_seq']%}
		BIGcapsule{{v}}[loffset + i].key = capsule{{v}}[i].key;
		BIGcapsule{{v}}[loffset + i].value = 0;
		{%endfor%}
	}
	
	if(((loffset + NUM_PARTITIONS) == CAPSULEBUFFER_SIZE) || ((travstate.i_kvs + travstate.skip_kvs) >= travstate.end_kvs)){
		batch_type saveoffset = offset_kvs + NUM_PARTITIONS - CAPSULEBUFFER_SIZE;
		#ifdef _DEBUGMODE_CHECKS2
		checkoutofbounds("enigma::savecapsules{{ddrs}} 34", baseaddress_kvs + saveoffset + CAPSULEBUFFER_SIZE, KVSOURCEDRAMSZ_KVS + 1, baseaddress_kvs, saveoffset, CAPSULEBUFFER_SIZE);
		#endif
		SAVECAPSULE{{ddrs}}_LOOP2: for(buffer_type i=0; i<CAPSULEBUFFER_SIZE; i++){
		#pragma HLS PIPELINE II=1
			uint512_dt Vtemp;
			#ifdef _WIDEWORD
			{%for v in context['VECTOR_SIZE_seq']%}
				Vtemp.range({{32 * ((v * 2) + 1) - 1}}, {{(v * 2) * 32}}) = BIGcapsule{{v}}[i].key;
				Vtemp.range({{32 * (((v * 2) + 1) + 1) - 1}}, {{(v * 2 + 1) * 32}}) = 0;
			{%endfor%}
			#else 
			{%for v in context['VECTOR_SIZE_seq']%}
				Vtemp.data[{{v}}].key = BIGcapsule{{v}}[i].key;
				Vtemp.data[{{v}}].value = 0;
			{%endfor%}
			#endif
			/// kvdram[baseaddress_kvs + saveoffset + i] = Vtemp; // FIXME.
			#ifdef _DEBUGMODE_STATS
			globalstats_countkvstatswritten(VECTOR_SIZE);
			#endif
		}
	}
	return;
}
{%endfor%}
{%for ddrs, ddrs_ in zip(context['NUMINSTANCES_seq'], context['INSTANCES_charseq'])%}
void {%if(context['XWARE'] == "SW")%}enigma::{%endif%}savepartitions{{ddrs}}(uint512_dt * kvdram {%for sw in context['NUMSUBWORKERS_seq']%}, uint512_dt destbuffer{{sw}}[PADDEDDESTBUFFER_SIZE]{%endfor%} {%for sw in context['NUMSUBWORKERS_seq']%}, keyvalue_t capsule{{sw}}[NUM_PARTITIONS]{%endfor%} ,keyvalue_t kvdeststats_tmp[NUM_PARTITIONS], batch_type kvdrambaseaddress){				
	int analysis_savebuffer = PADDEDBUFFER_SIZE / NUM_PARTITIONS;

	{%for sw in context['NUMSUBWORKERS_seq']%}
		SAVEPARTITIONS{{sw}}_LOOP1: for(partition_type p=0; p<NUM_PARTITIONS; p++){
			batch_type dramoffset_kvs = kvdrambaseaddress + ((kvdeststats_tmp[p].key + kvdeststats_tmp[p].value) / VECTOR_SIZE);
			buffer_type bramoffset_kvs = (capsule{{sw}}[p].key + (VECTOR_SIZE - 1)) / VECTOR_SIZE;
			buffer_type size_kvs = (capsule{{sw}}[p].value + (VECTOR_SIZE - 1)) / VECTOR_SIZE;
			if(bramoffset_kvs + size_kvs >= PADDEDBUFFER_SIZE){ bramoffset_kvs = 0; size_kvs = 0; } // FIXME. FORCEDFINISH
			if(dramoffset_kvs + size_kvs >= PADDEDKVSOURCEDRAMSZ_KVS){ dramoffset_kvs = 0; size_kvs = 0; } // FIXME. FORCEDFINISH
			
			#ifdef _DEBUGMODE_CHECKS2
			checkoutofbounds("enigma::savepartitions{{sw}} dram 34", dramoffset_kvs + size_kvs, PADDEDKVSOURCEDRAMSZ_KVS, dramoffset_kvs, size_kvs, size_kvs);
			checkoutofbounds("enigma::savepartitions{{sw}} bram 35", bramoffset_kvs + size_kvs, PADDEDBUFFER_SIZE, bramoffset_kvs, capsule{{sw}}[p].key, size_kvs);
			#endif

			for(buffer_type i=0; i<size_kvs; i++){ // size_kvs, BUFFER_SIZE / NUM_PARTITIONS
			// for(buffer_type i=0; i<BUFFER_SIZE / NUM_PARTITIONS; i++){ // FIXME. FORCEDFINISH
			#pragma HLS LOOP_TRIPCOUNT min=0 max=analysis_savebuffer avg=analysis_savebuffer
			#pragma HLS PIPELINE II=1
				kvdram[dramoffset_kvs + i] = destbuffer{{sw}}[bramoffset_kvs + i];
				
				#ifdef _DEBUGMODE_STATS
				globalstats_countkvspartitionswritten(VECTOR_SIZE);
				#endif
			}
		}
		// UPDATEGLOBALSTATS{{sw}}_LOOP1: for(partition_type p=0; p<NUM_PARTITIONS; p++){ kvdeststats_tmp[p].value += (BUFFER_SIZE * NUMSUBWORKERS) / NUM_PARTITIONS; } // FIXME. FORCEDFINISH
		UPDATEGLOBALSTATS{{sw}}_LOOP1: for(partition_type p=0; p<NUM_PARTITIONS; p++){ kvdeststats_tmp[p].value += capsule{{sw}}[p].value; }
	{%endfor%}
	return;
}
{%endfor%}
{%for ddrs, ddrs_ in zip(context['NUMINSTANCES_seq'], context['INSTANCES_charseq'])%}
void {%if(context['XWARE'] == "SW")%}enigma::{%endif%}savekeyvalues{{ddrs}}(uint512_dt * kvdram, uint512_dt * buffer, batch_type baseaddress, batch_type offset_kvs, buffer_type size_kvs, batch_type maxaddress_kvs, travstate_t travstate){			
	int analysis_savebuffer = PADDEDDESTBUFFER_SIZE;
	
	#ifdef _DEBUGMODE_CHECKS2
	checkoutofbounds("enigma::savekeyvalues dram 35", baseaddress + offset_kvs + PADDEDDESTBUFFER_SIZE, PADDEDKVSOURCEDRAMSZ_KVS, NAp, NAp, NAp);
	#endif
	READBUFFER_LOOP1: for (buffer_type i=0; i<size_kvs; i++){
	   #pragma HLS PIPELINE II=1
	   #pragma HLS LOOP_TRIPCOUNT min=0 max=analysis_savebuffer avg=analysis_savebuffer	
		kvdram[baseaddress + offset_kvs + i] = buffer[i];
		#ifdef _DEBUGMODE_STATS
		globalstats_countkvsreducewritten(VECTOR_SIZE);
		#endif
	}
	return;
}
{%endfor%}

{%for ddrs, ddrs_ in zip(context['NUMINSTANCES_seq'], context['INSTANCES_charseq'])%}
void {%if(context['XWARE'] == "SW")%}enigma::{%endif%}resetcapsules{{ddrs}}({%for v in context['VECTOR_SIZE_seq']%}keyvalue_t capsule{{v}}[NUM_PARTITIONS], {%endfor%} int dummy){
	for(partition_type p=0; p<NUM_PARTITIONS; p++){ 
		{%for v in context['VECTOR_SIZE_seq']%}
		capsule{{v}}[p].key = 0; capsule{{v}}[p].value = 0;
		{%endfor%}
	}
	return;
}
{%endfor%}

/** {%for ddrs, ddrs_ in zip(context['NUMINSTANCES_seq'], context['INSTANCES_charseq'])%}
void {%if(context['XWARE'] == "SW")%}enigma::{%endif%}loadKvDRAM{{ddrs}}(uint512_dt * kvdram, batch_type sourceoffset_kvs, batch_type destoffset_kvs, batch_type size_kvs){
	int analysis_chunksize = BUFFER_SIZE;
	int analysis_iterationcount = KVDATA_BATCHSIZE_KVS / BUFFER_SIZE;
	#ifdef _DEBUGMODE_KERNELPRINTS3
	print4("### loadKvDRAM{{ddrs}}:: sourceoffset_kvs", "destoffset_kvs", "size_kvs", "NAp", sourceoffset_kvs, destoffset_kvs, size_kvs, NAp);
	#endif
	
	uint512_dt sourcebuffer[BUFFER_SIZE];
	
	#ifdef _DEBUGMODE_CHECKS2
	checkoutofbounds("loadKvDRAM{{ddrs}} 35", destoffset_kvs + size_kvs, KVSOURCEDRAMSZ_KVS, NAp, NAp, NAp);
	#endif
	int i;
    for ( i = 0; i < size_kvs; i += BUFFER_SIZE) {
	#pragma HLS LOOP_TRIPCOUNT min=analysis_iterationcount max=analysis_iterationcount
		
		//boundary checks
		int chunk_size = BUFFER_SIZE;
        if ((i + BUFFER_SIZE) > size_kvs)
            chunk_size = size_kvs - i;
	
		v1_rd:
			for (int j = 0; j < chunk_size; j++) {
			   #pragma HLS PIPELINE II=1
			   #pragma HLS LOOP_TRIPCOUNT min=analysis_chunksize max=analysis_chunksize
				sourcebuffer[j] = kvdram[sourceoffset_kvs + i + j];
			}
		out_write:
			for (int j = 0; j < chunk_size; j++) {
			   #pragma HLS PIPELINE II=1
			   #pragma HLS LOOP_TRIPCOUNT min=analysis_chunksize max=analysis_chunksize
				kvdram[destoffset_kvs + i + j] = sourcebuffer[j];
			}
    }
	return;
}
{%endfor%} */

{%for ddrs, ddrs_ in zip(context['NUMINSTANCES_seq'], context['INSTANCES_charseq'])%}
void {%if(context['XWARE'] == "SW")%}enigma::{%endif%}generatepartitions{{ddrs}}(uint512_dt * kvsourcedram, uint512_dt * kvdestdram, keyvalue_t * kvstats, globalparams_t globalparams){
	unsigned int analysis_maxtreedepthsz = 1;
	unsigned int analysis_avgnumsourcepartitions = 1;
	unsigned int analysis_partitionphase = (KVDRAMSZ_KVS / (NUMWORKERS * SRCBUFFER_SIZE)) / VECTOR_SIZE;
	unsigned int analysis_reducephase = 1;
	
	{%for w in context['NUMWORKERS_seq']%}
	{%for v in context['VECTOR_SIZE_seq']%}
	/** keyvalue_t sourcebuffer{{w}}{{v}}[SRCBUFFER_SIZE]; */
	keyvalue_t capsule{{w}}{{v}}[NUM_PARTITIONS];
	keyvalue_t BIGcapsule{{w}}{{v}}[CAPSULEBUFFER_SIZE];
	#pragma HLS ARRAY_MAP variable=capsule{{w}}{{v}} instance=mergedarray{{w}}{{v}} horizontal
	#pragma HLS ARRAY_MAP variable=BIGcapsule{{w}}{{v}} instance=mergedarray{{w}}{{v}} horizontal
	{%endfor%}
	{%endfor%}
	{%for w in context['NUMWORKERS_seq']%}
	{%for sw in context['NUMSUBWORKERS_seq']%}
	uint512_dt source2buffer{{w}}{{sw}}[SRCBUFFER_SIZE];
	{%endfor%}
	{%endfor%}
	{%for w in context['NUMWORKERS_seq']%}
	{%for sw in context['NUMSUBWORKERS_seq']%}
	uint512_dt destbuffer{{w}}{{sw}}[PADDEDDESTBUFFER_SIZE];
	{%endfor%}
	{%endfor%}
	
	{%for w in context['NUMWORKERS_seq']%}
	resetcapsules{{ddrs}}({%for v in context['VECTOR_SIZE_seq']%}capsule{{w}}{{v}},{%endfor%} NAp);
	{%endfor%}
	unsigned int numLOPs = 0;
	if(globalparams.reducecommand == ON){ numLOPs = globalparams.treedepth + 1 + 1; }
	else { numLOPs = globalparams.treedepth + 1; }

	// Partition Phase
	PARTITIONPHASE_LOOP1: for(unsigned int currentLOP=1; currentLOP<numLOPs; currentLOP++){
	#pragma HLS LOOP_TRIPCOUNT min=0 max=analysis_maxtreedepthsz avg=analysis_maxtreedepthsz
		keyvalue_t kvdeststats_tmp[NUM_PARTITIONS];
		
		clopparams_t llopparams;
		loadclopparams(globalparams, &llopparams, currentLOP);
		unsigned int num_source_partition_skipsize = 0;
		if(IsReducePhase(currentLOP, globalparams.treedepth, globalparams) == 1){ num_source_partition_skipsize = NUMSUBWORKERS; }
		else { num_source_partition_skipsize = 1; }
		#ifdef _DEBUGMODE_KERNELPRINTS3
		cout<<endl;
		print4("PartitionPhase{{ddrs}}:: num_source_partitions", "num_destpartitions", "sourceskipsize_kv", "NAp", llopparams.num_source_partitions, llopparams.num_source_partitions * NUM_PARTITIONS, llopparams.sourceskipsize_kv, NAp);
		#endif
		
		PARTITIONPHASE_LOOP2: for(unsigned int source_partition=0; source_partition<llopparams.num_source_partitions; source_partition+=num_source_partition_skipsize){
		#pragma HLS LOOP_TRIPCOUNT min=0 max=analysis_avgnumsourcepartitions avg=analysis_avgnumsourcepartitions		
		
			partitionparams_t partitionparams;
			travstate_t travstate;
			llopparams.upperlimit = globalparams.vbegin + llopparams.nextsourceoffset_kv;
			
			loaddeststats(kvstats, kvdeststats_tmp, llopparams.nextdestoffset_partition, llopparams.currentLOP, globalparams.LLOPnumpartitions);			
			GENERATEPARTITIONS_INITKVDRAMREACKER_LOOP2: for(partition_type p=0; p<NUM_PARTITIONS; p++){ kvdeststats_tmp[p].value = 0; }
			
			keyvalue_t sourcestat = kvstats[getstatsAddr(llopparams.nextsourceoffset_partition)];
			partitionparams.begin_kvs = sourcestat.key / VECTOR_SIZE;
			partitionparams.size_kvs = (sourcestat.value + (VECTOR_SIZE - 1)) / VECTOR_SIZE;
			/** partitionparams.step_kvs = NUMWORKERS * NFACTOR * SRCBUFFER_SIZE; */
			partitionparams.step_kvs = NUMWORKERS * NUMSUBWORKERS * NFACTOR * SRCBUFFER_SIZE;
			partitionparams.end_kvs = partitionparams.begin_kvs + partitionparams.size_kvs;
			if(IsReducePhase(currentLOP, globalparams.treedepth, globalparams) == 1){ partitionparams.begin_kvs = 0; partitionparams.size_kvs = 0; partitionparams.step_kvs = 0; partitionparams.end_kvs = 0; }
			travstate.begin_kvs = partitionparams.begin_kvs;
			travstate.end_kvs = partitionparams.end_kvs;
			travstate.skip_kvs = partitionparams.step_kvs;
			#ifdef _DEBUGMODE_KERNELPRINTS2
			if(IsReducePhase(currentLOP, globalparams.treedepth, globalparams) == 1){ print6("ReducePhase{{ddrs}}:: begin", "size", "step", "currentLOP", "range_per_destpartition", "source_partition", sourcestat.key, sourcestat.value, NUMSUBWORKERS * BUFFER_SIZE * VECTOR_SIZE, llopparams.currentLOP, KVDATA_RANGE_PERSSDPARTITION / pow(NUM_PARTITIONS, llopparams.currentLOP), source_partition); } 
			else { print6("PartitionPhase{{ddrs}}:: begin", "size", "step", "currentLOP", "range_per_destpartition", "source_partition", sourcestat.key, sourcestat.value, NUMSUBWORKERS * BUFFER_SIZE * VECTOR_SIZE, llopparams.currentLOP, KVDATA_RANGE_PERSSDPARTITION / pow(NUM_PARTITIONS, llopparams.currentLOP), source_partition); }
			#endif
			
			// Collect capsules
			/** COLLECTSTATS_MAINLOOP1: for(int i = partitionparams.begin_kvs; i < partitionparams.end_kvs; i += partitionparams.step_kvs){
			#pragma HLS LOOP_TRIPCOUNT min=0 max=analysis_partitionphase avg=analysis_partitionphase
				#ifdef _DEBUGMODE_KERNELPRINTS3
				print4("collectstats_ddr{{ddrs}}:: i", "i_end", "step size", "NAp", i, partitionparams.end_kvs, partitionparams.step_kvs, NAp);
				#endif
				
				batch_type capsuleoffset_kvs = ((i - partitionparams.begin_kvs) / partitionparams.step_kvs) * NUM_PARTITIONS;
				COLLECTSTATS_MAINLOOP1B: for(vector_type v=0; v<NFACTOR; v++){
					travstate.i_kvs = i + (v * SRCBUFFER_SIZE); travstate.info = 0;
					
					{%for w in context['NUMWORKERS_seq']%}
					readkeyvalues{{ddrs}}(kvsourcedram {%for v in context['VECTOR_SIZE_seq']%}, sourcebuffer{{w}}{{v}}{%endfor%}, llopparams.baseaddr_worksourcekvs_kvs, travstate.i_kvs + ({{w}} * SRCBUFFER_SIZE), SRCBUFFER_SIZE, KVSOURCEDRAMSZ_KVS, travstate);
					{%endfor%}
					
					{%for w in context['NUMWORKERS_seq']%}
					extractcapsules{{ddrs}}{{w}}({{w}} {%for v in context['VECTOR_SIZE_seq']%},sourcebuffer{{w}}{{v}}{%endfor%} {%for v in context['VECTOR_SIZE_seq']%}, capsule{{w}}{{v}}{%endfor%}, llopparams, travstate);
					{%endfor%}
				}
				{%for w in context['NUMWORKERS_seq']%}
				savecapsules{{ddrs}}(kvsourcedram {%for v in context['VECTOR_SIZE_seq']%}, BIGcapsule{{w}}{{v}}{%endfor%} {%for v in context['VECTOR_SIZE_seq']%}, capsule{{w}}{{v}}{%endfor%}, llopparams.baseaddr_capsule_kvs, capsuleoffset_kvs, travstate);
				{%endfor%}
				{%for w in context['NUMWORKERS_seq']%}
				resetcapsules{{ddrs}}({%for v in context['VECTOR_SIZE_seq']%}capsule{{w}}{{v}},{%endfor%} NAp);
				{%endfor%}
			}
			{%for w in context['NUMWORKERS_seq']%}
			resetcapsules{{ddrs}}({%for v in context['VECTOR_SIZE_seq']%}capsule{{w}}{{v}},{%endfor%} NAp);
			{%endfor%} */
			COLLECTSTATS_MAINLOOP1: for(int i = partitionparams.begin_kvs; i < partitionparams.end_kvs; i += partitionparams.step_kvs){
			#pragma HLS LOOP_TRIPCOUNT min=0 max=analysis_partitionphase avg=analysis_partitionphase
				#ifdef _DEBUGMODE_KERNELPRINTS
				print4("collectstats_ddr{{ddrs}}:: i", "i_end", "step size", "NAp", i, partitionparams.end_kvs, partitionparams.step_kvs, NAp);
				#endif
				
				batch_type capsuleoffset_kvs = ((i - partitionparams.begin_kvs) / partitionparams.step_kvs) * NUM_PARTITIONS;
				COLLECTSTATS_MAINLOOP1B: for(vector_type v=0; v<NFACTOR; v++){
					travstate.i_kvs = i + (v * NUMWORKERS * NUMSUBWORKERS * SRCBUFFER_SIZE); travstate.info = 0;
					
					{%for w in context['NUMWORKERS_seq']%}	
					{%for sw in context['NUMSUBWORKERS_seq']%}	
					readkeyvalues{{ddrs}}(kvsourcedram, source2buffer{{w}}{{sw}}, llopparams.baseaddr_worksourcekvs_kvs, travstate.i_kvs + ({{w}} * {{sw}} * SRCBUFFER_SIZE), SRCBUFFER_SIZE, KVSOURCEDRAMSZ_KVS, travstate);
					{%endfor%}
					{%endfor%}
					
					{%for w in context['NUMWORKERS_seq']%}
					extractcapsules{{ddrs}}{{w}}({{w}} {%for sw in context['NUMSUBWORKERS_seq']%} ,source2buffer{{w}}{{sw}}{%endfor%} {%for sw in context['NUMSUBWORKERS_seq']%} ,capsule{{w}}{{sw}}{%endfor%}, llopparams, travstate);
					{%endfor%}
				}
				{%for w in context['NUMWORKERS_seq']%}
				savecapsules{{ddrs}}(kvsourcedram {%for v in context['VECTOR_SIZE_seq']%}, BIGcapsule{{w}}{{v}}{%endfor%} {%for v in context['VECTOR_SIZE_seq']%}, capsule{{w}}{{v}}{%endfor%}, llopparams.baseaddr_capsule_kvs, capsuleoffset_kvs, travstate);
				{%endfor%}
				{%for w in context['NUMWORKERS_seq']%}
				resetcapsules{{ddrs}}({%for v in context['VECTOR_SIZE_seq']%}capsule{{w}}{{v}},{%endfor%} NAp);
				{%endfor%}
			}
			{%for w in context['NUMWORKERS_seq']%}
			resetcapsules{{ddrs}}({%for v in context['VECTOR_SIZE_seq']%}capsule{{w}}{{v}},{%endfor%} NAp);
			{%endfor%}
			
			// Partition phase 
			/** PARTITIONPHASE_MAINLOOP1: for (int i = partitionparams.begin_kvs; i < partitionparams.end_kvs; i += partitionparams.step_kvs){
			#pragma HLS LOOP_TRIPCOUNT min=0 max=analysis_partitionphase avg=analysis_partitionphase
				#ifdef _DEBUGMODE_KERNELPRINTS
				print4("PartitionPhase{{ddrs}}:: i", "i_end", "step size", "NAp", i, partitionparams.end_kvs, partitionparams.step_kvs, NAp);
				#endif
				
				batch_type capsuleoffset_kvs = ((i - partitionparams.begin_kvs) / partitionparams.step_kvs) * NUM_PARTITIONS;
				{%for w in context['NUMWORKERS_seq']%}
				readcapsules{{ddrs}}(kvsourcedram, {%for v in context['VECTOR_SIZE_seq']%} BIGcapsule{{w}}{{v}}, {%endfor%} {%for v in context['VECTOR_SIZE_seq']%}capsule{{w}}{{v}},{%endfor%} llopparams.baseaddr_capsule_kvs, capsuleoffset_kvs); // FIXME. include workerID in offset
				{%endfor%}
				PARTITIONPHASE_MAINLOOP1B: for (int v = 0; v < NFACTOR; v += 1){
					travstate.i_kvs = i + (v * SRCBUFFER_SIZE); travstate.info = 1;
				
					{%for w in context['NUMWORKERS_seq']%}
					readkeyvalues{{ddrs}}(kvsourcedram {%for v in context['VECTOR_SIZE_seq']%}, sourcebuffer{{w}}{{v}}{%endfor%}, llopparams.baseaddr_worksourcekvs_kvs, travstate.i_kvs + ({{w}} * SRCBUFFER_SIZE), SRCBUFFER_SIZE, KVSOURCEDRAMSZ_KVS, travstate);
					{%endfor%}
					
					{%for w in context['NUMWORKERS_seq']%}
					partitionkeyvalues{{ddrs}}{{w}}({{w}} {%for v in context['VECTOR_SIZE_seq']%},sourcebuffer{{w}}{{v}}{%endfor%} {%for sw in context['NUMSUBWORKERS_seq']%},destbuffer{{w}}{{sw}}{%endfor%} {%for sw in context['NUMSUBWORKERS_seq']%},capsule{{w}}{{sw}}{%endfor%}, travstate, llopparams);
					{%endfor%}
				}
				{%for w in context['NUMWORKERS_seq']%}
				savepartitions{{ddrs}}(kvsourcedram {%for sw in context['NUMSUBWORKERS_seq']%}, destbuffer{{w}}{{sw}}{%endfor%} {%for sw in context['NUMSUBWORKERS_seq']%}, capsule{{w}}{{sw}}{%endfor%}, kvdeststats_tmp, llopparams.baseaddr_workdestkvs_kvs);
				{%endfor%}
				{%for w in context['NUMWORKERS_seq']%}
				resetcapsules{{ddrs}}({%for v in context['VECTOR_SIZE_seq']%}capsule{{w}}{{v}},{%endfor%} NAp);
				{%endfor%}
			} */
			PARTITIONPHASE_MAINLOOP1: for (int i = partitionparams.begin_kvs; i < partitionparams.end_kvs; i += partitionparams.step_kvs){
			#pragma HLS LOOP_TRIPCOUNT min=0 max=analysis_partitionphase avg=analysis_partitionphase
				#ifdef _DEBUGMODE_KERNELPRINTS
				print4("PartitionPhase{{ddrs}}:: i", "i_end", "step size", "NAp", i, partitionparams.end_kvs, partitionparams.step_kvs, NAp);
				#endif
				
				batch_type capsuleoffset_kvs = ((i - partitionparams.begin_kvs) / partitionparams.step_kvs) * NUM_PARTITIONS;
				{%for w in context['NUMWORKERS_seq']%}
				readcapsules{{ddrs}}(kvsourcedram, {%for v in context['VECTOR_SIZE_seq']%} BIGcapsule{{w}}{{v}}, {%endfor%} {%for v in context['VECTOR_SIZE_seq']%}capsule{{w}}{{v}},{%endfor%} llopparams.baseaddr_capsule_kvs, capsuleoffset_kvs); // FIXME. include workerID in offset
				{%endfor%}
				PARTITIONPHASE_MAINLOOP1B: for (int v = 0; v < NFACTOR; v += 1){
					travstate.i_kvs = i + (v * NUMWORKERS * NUMSUBWORKERS * SRCBUFFER_SIZE); travstate.info = 1;
				
					{%for w in context['NUMWORKERS_seq']%}	
					{%for sw in context['NUMSUBWORKERS_seq']%}	
					readkeyvalues{{ddrs}}(kvsourcedram, source2buffer{{w}}{{sw}}, llopparams.baseaddr_worksourcekvs_kvs, travstate.i_kvs + ({{w}} * {{sw}} * SRCBUFFER_SIZE), SRCBUFFER_SIZE, KVSOURCEDRAMSZ_KVS, travstate);
					{%endfor%}
					{%endfor%}
					
					{%for w in context['NUMWORKERS_seq']%}
					partitionkeyvalues{{ddrs}}{{w}}({{w}} {%for sw in context['NUMSUBWORKERS_seq']%} ,source2buffer{{w}}{{sw}}{%endfor%} {%for sw in context['NUMSUBWORKERS_seq']%} ,destbuffer{{w}}{{sw}}{%endfor%} {%for sw in context['NUMSUBWORKERS_seq']%} ,capsule{{w}}{{sw}}{%endfor%}, travstate, llopparams);
					{%endfor%}
				}
				{%for w in context['NUMWORKERS_seq']%}
				savepartitions{{ddrs}}(kvsourcedram {%for sw in context['NUMSUBWORKERS_seq']%}, destbuffer{{w}}{{sw}}{%endfor%} {%for sw in context['NUMSUBWORKERS_seq']%}, capsule{{w}}{{sw}}{%endfor%}, kvdeststats_tmp, llopparams.baseaddr_workdestkvs_kvs);
				{%endfor%}
				{%for w in context['NUMWORKERS_seq']%}
				resetcapsules{{ddrs}}({%for v in context['VECTOR_SIZE_seq']%}capsule{{w}}{{v}},{%endfor%} NAp);
				{%endfor%}
			}
			
			// Reduce phase
			if(IsReducePhase(currentLOP, globalparams.treedepth, globalparams) == 1){
			keyvalue_t sourcestats[NUMSUBWORKERS];
			unsigned int maxsz = 0;
			for(unsigned int i=0; i<NUMSUBWORKERS; i++){ sourcestats[i] = kvstats[source_partition + i]; }
			for(unsigned int sw=0; sw<NUMSUBWORKERS; sw++){ maxsz = max(sourcestats[sw].value, maxsz); }
			unsigned int maxsz_kvs = (maxsz + (VECTOR_SIZE - 1)) / VECTOR_SIZE;
			
			travstate.info = 0;
			{%for sw in context['NUMSUBWORKERS_seq']%}
			readkeyvalues{{ddrs}}(kvdestdram, destbuffer0{{sw}}, globalparams.baseaddr_destkvs_kvs, (llopparams.nextsourceoffset_kv / VECTOR_SIZE) + ({{sw}} * PADDEDDESTBUFFER_SIZE), PADDEDDESTBUFFER_SIZE, KVDATA_RANGE_PERSSDPARTITION, travstate);
			{%endfor%}
			REDUCEPHASE_MAINLOOP: for (int i = 0; i < maxsz_kvs; i += SRCBUFFER_SIZE){
			#pragma HLS LOOP_TRIPCOUNT min=0 max=analysis_reducephase avg=analysis_reducephase
				#ifdef _DEBUGMODE_KERNELPRINTS
				print5("ReducePhase{{ddrs}}:: i", "i_end", "NAp", "NAp", "skip size", i, maxsz_kvs, NAp, NAp, SRCBUFFER_SIZE);
				#endif
				travstate.info = 1;

				{%for sw in context['NUMSUBWORKERS_seq']%}		
				readkeyvalues{{ddrs}}(kvsourcedram, source2buffer0{{sw}}, llopparams.baseaddr_worksourcekvs_kvs, (sourcestats[{{sw}}].key / VECTOR_SIZE) + i, SRCBUFFER_SIZE, KVSOURCEDRAMSZ_KVS, travstate);
				{%endfor%}
				
				reducepartitions{{ddrs}}({%for sw in context['NUMSUBWORKERS_seq']%} source2buffer0{{sw}}, {%endfor%} {%for sw in context['NUMSUBWORKERS_seq']%} destbuffer0{{sw}}, {%endfor%} travstate, globalparams);
			}
			{%for sw in context['NUMSUBWORKERS_seq']%}
			savekeyvalues{{ddrs}}(kvdestdram, destbuffer0{{sw}}, globalparams.baseaddr_destkvs_kvs, ((llopparams.nextsourceoffset_kv / VECTOR_SIZE) + ({{sw}} * PADDEDDESTBUFFER_SIZE)), PADDEDDESTBUFFER_SIZE, KVDATA_RANGE_PERSSDPARTITION, travstate);
			{%endfor%}
			}
			
			storedeststats(kvstats, kvdeststats_tmp, llopparams.nextdestoffset_partition, llopparams.currentLOP, globalparams.LLOPnumpartitions); 
			llopparams.nextsourceoffset_partition += llopparams.sourceskipsize_partition;
			llopparams.nextdestoffset_partition += (llopparams.destskipsize_partition * NUM_PARTITIONS);
			if(IsReducePhase(currentLOP, globalparams.treedepth, globalparams) == 1){ llopparams.nextsourceoffset_kv += llopparams.sourceskipsize_kv * NUMSUBWORKERS; } // 
			else { llopparams.nextsourceoffset_kv += llopparams.sourceskipsize_kv; }
			llopparams.nextdestoffset_kv += llopparams.destskipsize_kv;
			
			
			
			
			
			
			
			
			// REMOVEME.
			{%for w in context['NUMWORKERS_seq']%}
			{%for v in context['VECTOR_SIZE_seq']%}
			kvsourcedram[llopparams.nextdestoffset_kv + {{v}}].range(31, 0) = BIGcapsule{{w}}{{v}}[llopparams.nextdestoffset_kv].key;
			{%endfor%}
			{%endfor%}
			// REMOVEME.
			
			
			
			
		}
		#ifdef _DEBUGMODE_KERNELPRINTS3
		printglobalvars();
		clearglobalvars();
		#endif
	}
	return;
}
{%endfor%}

extern "C" {
void {%if(context['XWARE'] == "SW")%}enigma::{%endif%}topkernel(
		{%for ddrs, ddrs_ in zip(context['NUMINSTANCES_seq'], context['INSTANCES_charseq'])%}
		{%if(ddrs==0)%}{%else%},{%endif%}uint512_dt * kvsourcedram{{ddrs_}}
		{%endfor%}
		{%for ddrs, ddrs_ in zip(context['NUMINSTANCES_seq'], context['INSTANCES_charseq'])%}
		,uint512_dt * kvdestdram{{ddrs_}}
		{%endfor%}
		{%for ddrs, ddrs_ in zip(context['NUMINSTANCES_seq'], context['INSTANCES_charseq'])%}
		,keyvalue_t * kvstats{{ddrs_}}
		{%endfor%}
        ){
{%for ddrs, ddrs_ in zip(context['NUMINSTANCES_seq'], context['INSTANCES_charseq'])%}
#pragma HLS INTERFACE m_axi port=kvsourcedram{{ddrs_}}  offset=slave bundle=gmem{{ddrs}} max_read_burst_length=256 max_write_burst_length=256
{%endfor%}
{%for ddrs, ddrs_ in zip(context['NUMINSTANCES_seq'], context['INSTANCES_charseq'])%}
#pragma HLS INTERFACE m_axi port=kvdestdram{{ddrs_}}  offset=slave bundle=gmem{{context['NUMINSTANCES'] + ddrs}} max_read_burst_length=64 max_write_burst_length=64
{%endfor%}
{%for ddrs, ddrs_ in zip(context['NUMINSTANCES_seq'], context['INSTANCES_charseq'])%}
#pragma HLS INTERFACE m_axi port=kvstats{{ddrs_}}  offset=slave bundle=gmem{{context['NUMINSTANCES'] + context['NUMINSTANCES'] + ddrs}}
{%endfor%}

{%for ddrs, ddrs_ in zip(context['NUMINSTANCES_seq'], context['INSTANCES_charseq'])%}
#pragma HLS INTERFACE s_axilite port=kvsourcedram{{ddrs_}}  bundle=control
{%endfor%}
{%for ddrs, ddrs_ in zip(context['NUMINSTANCES_seq'], context['INSTANCES_charseq'])%}
#pragma HLS INTERFACE s_axilite port=kvdestdram{{ddrs_}}  bundle=control
{%endfor%}
{%for ddrs, ddrs_ in zip(context['NUMINSTANCES_seq'], context['INSTANCES_charseq'])%}
#pragma HLS INTERFACE s_axilite port=kvstats{{ddrs_}}  bundle=control
{%endfor%}

#pragma HLS INTERFACE s_axilite port=return bundle=control

{%for ddrs, ddrs_ in zip(context['NUMINSTANCES_seq'], context['INSTANCES_charseq'])%}
#pragma HLS DATA_PACK variable=kvstats{{ddrs_}}
{%endfor%}
	
	globalparams_t globalparams;
	globalparams.runkernelcommand = kvstatsA[getmessagesAddr(MESSAGES_RUNKERNELCOMMANDID)].key;
	globalparams.processcommand = kvstatsA[getmessagesAddr(MESSAGES_PROCESSCOMMANDID)].key;
	globalparams.partitioncommand = kvstatsA[getmessagesAddr(MESSAGES_PARTITIONCOMMANDID)].key;
	globalparams.reducecommand = kvstatsA[getmessagesAddr(MESSAGES_APPLYUPDATESCOMMANDID)].key;
	globalparams.vbegin = kvstatsA[getmessagesAddr(MESSAGES_VOFFSET)].key; 
	globalparams.vsize = kvstatsA[getmessagesAddr(MESSAGES_VSIZE)].key; 
	globalparams.treedepth = kvstatsA[getmessagesAddr(MESSAGES_TREEDEPTH)].key; 
	globalparams.LLOPnumpartitions = kvstatsA[getmessagesAddr(MESSAGES_FINALNUMPARTITIONS)].key;
	globalparams.GraphIter = kvstatsA[getmessagesAddr(MESSAGES_GRAPHITERATIONID)].key;
	globalparams.IterCount = kvstatsA[getmessagesAddr(MESSAGES_ITERATIONID)].key;
	globalparams.baseaddr_destkvs_kvs = 0;
	
	#ifdef _DEBUGMODE_KERNELPRINTS
	std::cout<<std::endl;
	std::cout<<"Kernel Started: globalparams.runkernelcommand: "<<globalparams.runkernelcommand<<std::endl;
	std::cout<<"Kernel Started: globalparams.processcommand: "<<globalparams.processcommand<<std::endl;
	std::cout<<"Kernel Started: globalparams.partitioncommand: "<<globalparams.partitioncommand<<std::endl;
	std::cout<<"Kernel Started: globalparams.reducecommand: "<<globalparams.reducecommand<<std::endl;
	std::cout<<"Kernel Started: globalparams.vbegin: "<<globalparams.vbegin<<std::endl;
	std::cout<<"Kernel Started: globalparams.vsize: "<<globalparams.vsize<<std::endl;
	std::cout<<"Kernel Started: globalparams.treedepth: "<<globalparams.treedepth<<std::endl;
	std::cout<<"Kernel Started: globalparams.LLOPnumpartitions: "<<globalparams.LLOPnumpartitions<<std::endl;
	std::cout<<"Kernel Started: globalparams.GraphIter: "<<globalparams.GraphIter<<std::endl;
	std::cout<<"Kernel Started: globalparams.IterCount: "<<globalparams.IterCount<<std::endl;
	#endif
	
	/** if(globalparams.runkernelcommand == OFF){
		{%for ddrs, ddrs_ in zip(context['NUMINSTANCES_seq'], context['INSTANCES_charseq'])%}
		loadKvDRAM{{ddrs}}(kvsourcedram{{ddrs_}}, 0, ((globalparams.IterCount % DRAMBATCHFACTOR) + 1) * KVDATA_BATCHSIZE_KVS, KVDATA_BATCHSIZE_KVS);
		{%endfor%}
		return;
	} */
	
	#ifdef _DEBUGMODE_KERNELPRINTS3
	cout<<"...running Acts..."<<endl;
	printparameters();
	#endif 
	
	{%for ddrs, ddrs_ in zip(context['NUMINSTANCES_seq'], context['INSTANCES_charseq'])%}
	generatepartitions{{ddrs}}(kvsourcedram{{ddrs_}}, kvdestdram{{ddrs_}}, kvstats{{ddrs_}}, globalparams);
	{%endfor%}
	return;
}
}






