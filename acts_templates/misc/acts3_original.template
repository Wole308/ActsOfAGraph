#define ENABLE_PP1
void {{context['classname__acts']}}ACTS{{context['id']}}_actit3(bool_type enable, unsigned int mode,
		uint512_dt * kvdram, keyvalue_vbuffer_t vbuffer_source[VDATA_PACKINGSIZE][MAX_BLOCKRAM_VSRCDATA_SIZE], keyvalue_vbuffer_t vbuffer_dest[VDATA_PACKINGSIZE][MAX_BLOCKRAM_VDESTDATA_SIZE], keyvalue_t globalcapsule[BLOCKRAM_GLOBALSTATS_SIZE],				
		globalparams_t globalparamsE, globalparams_t globalparamsK, globalposition_t globalposition, sweepparams_t sweepparams, travstate_t ptravstate, batch_type sourcebaseaddr_kvs, batch_type destbaseaddr_kvs,
		bool_type resetenv, bool_type flush, unsigned int edgebankID, collection_t collections[NUM_COLLECTIONS][COLLECTIONS_BUFFERSZ]){
	if(enable == OFF){ return; } // NEWCHANGE
	
	keyvalue_buffer_t destbuffer[VECTOR_SIZE][MAX_SOURCEBLOCKRAM_SIZE];
	#pragma HLS array_partition variable = destbuffer
	keyvalue_capsule_t capsule_dest[MAX_NUM_PARTITIONS];
	#pragma HLS ARRAY_PARTITION variable=capsule_dest complete
	keyvalue_t res[VECTOR_SIZE];
	#pragma HLS ARRAY_PARTITION variable=res complete
	keyvalue_t edges_tup[VECTOR_SIZE];
	#pragma HLS ARRAY_PARTITION variable=edges_tup complete
	unsigned int memory[VECTOR2_SIZE];
	#pragma HLS ARRAY_PARTITION variable=memory complete
	
	unsigned int basecollections_0_2_data1 = collections[0][2].data1;
	unsigned int basecollections_0_2_data1b = collections[0][2].data1;
	
	unsigned int num_vPs = globalparamsK.NUM_PROCESSEDGESPARTITIONS;
	unsigned int num_LLPs = globalparamsK.NUM_REDUCEPARTITIONS * OPT_NUM_PARTITIONS; // 1 << (OPT_NUM_PARTITIONS_POW * globalparamsK.ACTSPARAMS_TREEDEPTH);
	unsigned int num_LLPset = (num_LLPs + (OPT_NUM_PARTITIONS - 1)) / OPT_NUM_PARTITIONS; // globalparamsK.ACTSPARAMS_NUM_PARTITIONS    NUM_PARTITIONS;
	unsigned int upperlimit = sweepparams.source_partition * globalparamsK.SIZEKVS2_PROCESSEDGESPARTITION;
	bool enx;
	unsigned int _EN_PROCESS_PARTITION_SAVE = OFF; 
	unsigned int _EN_PROCESS_PARTITION_REDUCE = OFF;
	if(globalparamsK.ACTSPARAMS_TREEDEPTH == 1){ _EN_PROCESS_PARTITION_SAVE = OFF; _EN_PROCESS_PARTITION_REDUCE = ON; }
	else { if(mode == ACTSPROCESSMODE || mode == ACTSPARTITIONMODE){ _EN_PROCESS_PARTITION_SAVE = ON; } else if(mode == ACTSREDUCEMODE){ _EN_PROCESS_PARTITION_REDUCE = ON; }}
	
	unsigned int curroffsetkvs = 0;
	unsigned int nextoffsetkvs = 0;
	
	#ifdef _DEBUGMODE_KERNELPRINTS
	cout<<"actit3:: [num_LLPs: "<<num_LLPs<<", num_LLPset: "<<num_LLPset<<", num_vPs: "<<num_vPs<<"] "<<endl;
	#endif 
	
	if(_EN_PROCESS_PARTITION_SAVE == ON){
		ACTIT3_MAINLOOP1: for(unsigned int llp_set=0; llp_set<num_LLPset; llp_set++){
			unsigned int curroffsetkvs_llp = MEMACCESS{{context['id']}}_getdata(kvdram, globalparamsE.BASEOFFSETKVS_VERTICESDATAMASK, (sweepparams.source_partition * num_LLPset) + llp_set) / VECTOR_SIZE;
			unsigned int nextoffsetkvs_llp = MEMACCESS{{context['id']}}_getdata(kvdram, globalparamsE.BASEOFFSETKVS_VERTICESDATAMASK, (sweepparams.source_partition * num_LLPset) + llp_set + 1) / VECTOR_SIZE;
			unsigned int size_kvs_llp = nextoffsetkvs_llp - curroffsetkvs_llp;
			batch_type destoffset_kvs = (globalcapsule[llp_set].key + globalcapsule[llp_set].value) / VECTOR_SIZE;
			#ifdef _DEBUGMODE_CHECKS3
			if(nextoffsetkvs_llp < curroffsetkvs_llp){ cout<<"actit3(process): ERROR 23: nextoffsetkvs_llp("<<nextoffsetkvs_llp<<") < curroffsetkvs_llp("<<curroffsetkvs_llp<<"). EXITING..."<<endl; exit(EXIT_FAILURE); }
			#endif
			
			#ifdef _DEBUGMODE_KERNELPRINTS
			cout<<"actit3(process): processing all chunks [begin_kvs: "<<curroffsetkvs_llp<<"][end_kvs: "<<nextoffsetkvs_llp<<"][size_kvs: "<<size_kvs_llp<<"][size: "<<size_kvs_llp * VECTOR_SIZE<<"][workbuffer_size: "<<globalparamsK.ACTSPARAMS_WORKBUFFER_SIZE<<"][num_chunks: "<<(nextoffsetkvs_llp - curroffsetkvs_llp) / globalparamsK.ACTSPARAMS_WORKBUFFER_SIZE<<"] ... "<<endl;					
			#endif
			ACTIT3_MAINLOOP1B: for(batch_type offset_kvs=curroffsetkvs_llp; offset_kvs<curroffsetkvs_llp + size_kvs_llp; offset_kvs++){
			#pragma HLS PIPELINE II=1
				#ifdef _DEBUGMODE_KERNELPRINTS
				cout<<"actit3(process): processing chunk [offset_kvs: "<<offset_kvs<<"]: [curroffsetkvs_llp: "<<curroffsetkvs_llp<<"]: [nextoffsetkvs_llp: "<<nextoffsetkvs_llp<<"] ... "<<endl;
				#endif
				
				// get dataset
				UTIL{{context['id']}}_GetDataset(kvdram, sourcebaseaddr_kvs + offset_kvs, edges_tup);
				
				// set flag
				enx = true;
				if((globalparamsK.ALGORITHMINFO_GRAPHALGORITHMCLASS != ALGORITHMCLASS_ALLVERTEXISACTIVE) && (basecollections_0_2_data1 + VECTOR_SIZE >= globalposition.num_active_edges_in_channel)){ enx = false; } // for BFS implementation
				else { basecollections_0_2_data1b += VECTOR_SIZE; }
				
				// process
				{%for v in context['VECTOR_SIZE_seq']%}
				res[{{v}}] = PROCESS{{context['id']}}_processvector(enx, {{v}}, edges_tup[{{v}}].value - upperlimit, upperlimit, edges_tup[{{v}}], vbuffer_source[{{v}}], globalparamsK);
				{%endfor%}	
				
				// store
				UTIL{{context['id']}}_SetDataset(kvdram, destbaseaddr_kvs + destoffset_kvs, res);
				
				// #ifdef _DEBUGMODE_STATS
				// if(mode==ACTSPROCESSMODE && enx == true){
					// actsutilityobj->globalstats_countkvsprocessed(globalparamsK.ACTSPARAMS_INSTID, VECTOR_SIZE);
					// actsutilityobj->globalstats_processedges_countvalidkvsprocessed(globalparamsK.ACTSPARAMS_INSTID, VECTOR_SIZE); }
				// #endif 
			}
			globalcapsule[llp_set].value += size_kvs_llp * VECTOR_SIZE; // CRITICAL FIXME. let globalcapsule load all partitions of LLOP-1
		}
	}
	
	if(_EN_PROCESS_PARTITION_REDUCE == ON && globalparamsK.ENABLE_APPLYUPDATESCOMMAND == ON){
		if(globalparamsK.ACTSPARAMS_TREEDEPTH == 1){
			curroffsetkvs = MEMACCESS{{context['id']}}_getdata(kvdram, globalparamsE.BASEOFFSETKVS_VERTICESDATAMASK, sweepparams.source_partition) / VECTOR_SIZE;
			nextoffsetkvs = MEMACCESS{{context['id']}}_getdata(kvdram, globalparamsE.BASEOFFSETKVS_VERTICESDATAMASK, sweepparams.source_partition + 1) / VECTOR_SIZE;
		} else { curroffsetkvs = ptravstate.begin_kvs; nextoffsetkvs = ptravstate.end_kvs; }
		unsigned int size_kvs = nextoffsetkvs - curroffsetkvs;
		#ifdef _DEBUGMODE_CHECKS3
		if(nextoffsetkvs < curroffsetkvs){ cout<<"actit3(reduce): ERROR 23: nextoffsetkvs("<<nextoffsetkvs<<") < curroffsetkvs("<<curroffsetkvs<<"). EXITING..."<<endl; exit(EXIT_FAILURE); }
		#endif
		
		#ifdef _DEBUGMODE_KERNELPRINTS
		cout<<"actit3(reduce): processing all chunks [begin_kvs: "<<curroffsetkvs<<"][end_kvs: "<<nextoffsetkvs<<"][size_kvs: "<<size_kvs<<"][size: "<<size_kvs * VECTOR_SIZE<<"][workbuffer_size: "<<globalparamsK.ACTSPARAMS_WORKBUFFER_SIZE<<"][num_chunks: "<<(nextoffsetkvs - curroffsetkvs) / globalparamsK.ACTSPARAMS_WORKBUFFER_SIZE<<"] ... "<<endl;					
		#endif
		// exit(EXIT_SUCCESS);
		ACTIT3_MAINLOOP2B: for(batch_type offset_kvs=curroffsetkvs; offset_kvs<curroffsetkvs + size_kvs; offset_kvs++){
		#pragma HLS PIPELINE II=1
		#pragma HLS dependence variable=vbuffer_dest inter false
			#ifdef _DEBUGMODE_KERNELPRINTS
			cout<<"actit3(reduce): processing chunk [offset_kvs: "<<offset_kvs<<"]: [curroffsetkvs: "<<curroffsetkvs<<"]: [nextoffsetkvs: "<<nextoffsetkvs<<"] ... "<<endl;
			#endif
			
			// get dataset
			UTIL{{context['id']}}_GetDataset(kvdram, sourcebaseaddr_kvs + offset_kvs, edges_tup);
			{%for v in context['VECTOR_SIZE_seq']%}
			{%endfor%}	
			
			// set flag
			enx = true;
			if((globalparamsK.ALGORITHMINFO_GRAPHALGORITHMCLASS != ALGORITHMCLASS_ALLVERTEXISACTIVE) && (basecollections_0_2_data1 + VECTOR_SIZE >= globalposition.num_active_edges_in_channel)){ enx = false; } // for BFS implementation
			else { basecollections_0_2_data1b += VECTOR_SIZE; }
			
			// reduce 
			{%for v in context['VECTOR_SIZE_seq']%} // VECTOR_SIZE_seq // 1_seq // CRITICAL FIXME.
			REDUCE{{context['id']}}_reducevector(enx, {{v}}, UTIL{{context['id']}}_GETKV(res[{{v}}]), vbuffer_dest[0 + {{v}}], 0, sweepparams.upperlimit, &memory[{{v}}], sweepparams, globalparamsK);
			{%endfor%}			
			
			#ifdef _DEBUGMODE_STATS
			if(globalparamsK.ACTSPARAMS_TREEDEPTH == 1 && mode==ACTSPROCESSMODE && enx == true){
				actsutilityobj->globalstats_countkvsprocessed(globalparamsK.ACTSPARAMS_INSTID, VECTOR_SIZE);
				actsutilityobj->globalstats_processedges_countvalidkvsprocessed(globalparamsK.ACTSPARAMS_INSTID, VECTOR_SIZE); }
			#endif 
		}
	}
	// exit(EXIT_SUCCESS); //
	return;
}



