#define ENABLE_PP1
// https://github.com/Xilinx/Vitis-HLS-Introductory-Examples/blob/1d19087a2b4aa90fa2d86cf556aa883d3b413247/Vitis/multiple_kernels/vadd_kernel/krnl_vadd.cpp
// https://github.com/Xilinx/SDAccel_Examples/blob/master/getting_started/dataflow/dataflow_stream_c/src/adder.cpp
// https://github.com/Xilinx/Vitis-HLS-Introductory-Examples/blob/1d19087a2b4aa90fa2d86cf556aa883d3b413247/Dataflow/Channels/using_fifos/diamond.cpp
/* // Read Data from Global Memory and write into Stream inStream
static void
read_input(uint512_dt *in, hls::stream<unsigned int> &inStream, int size) {
mem_rd:
    for (int i = 0; i < size; i++) {
       #pragma HLS PIPELINE II=1
       // #pragma HLS LOOP_TRIPCOUNT min=c_size max=c_size
        //Blocking write command to inStream
        inStream << in[i].range(31, 0);
    }
}

// Read Input data from inStream and write the result into outStream
static void compute_add(hls::stream<unsigned int> &inStream,
                        hls::stream<unsigned int> &outStream,
                        int inc,
                        int size) {
execute:
    for (int i = 0; i < size; i++) {
       #pragma HLS PIPELINE II=1
       // #pragma HLS LOOP_TRIPCOUNT min=c_size max=c_size
        //Blocking read command from inStream and Blocking write command
        //to outStream
        outStream << (inStream.read() + inc);
    }
}

// Read result from outStream and write the result to Global Memory
static void write_result(uint512_dt *out,
                         hls::stream<unsigned int> &outStream,
                         int size) {
mem_wr:
    for (int i = 0; i < size; i++) {
       #pragma HLS PIPELINE II=1
       // #pragma HLS LOOP_TRIPCOUNT min=c_size max=c_size
        //Blocking read command to inStream
        out[i].range(31, 0) = outStream.read();
    }
}

void {{context['classname__acts']}}ACTS{{context['id']}}_actit3(bool_type enable, unsigned int mode,
		uint512_dt * kvdram, keyvalue_vbuffer_t vbuffer_source[VDATA_PACKINGSIZE][MAX_BLOCKRAM_VSRCDATA_SIZE], keyvalue_vbuffer_t vbuffer_dest[VDATA_PACKINGSIZE][MAX_BLOCKRAM_VDESTDATA_SIZE],	
			keyvalue_t globalcapsule[BLOCKRAM_GLOBALSTATS_SIZE], globalparams_t globalparamsE, globalparams_t globalparamsK, globalposition_t globalposition, sweepparams_t sweepparams, travstate_t ptravstate, batch_type sourcebaseaddr_kvs, batch_type destbaseaddr_kvs,
				bool_type resetenv, bool_type flush, unsigned int edgebankID, collection_t collections[NUM_COLLECTIONS][COLLECTIONS_BUFFERSZ]){
	
	static hls::stream<unsigned int> inStream("input_stream");
    static hls::stream<unsigned int> outStream("output_stream");
	#pragma HLS STREAM variable = inStream depth = 32
	#pragma HLS STREAM variable = outStream depth = 32
	
	unsigned int size = 128;
	unsigned int inc = 16;
	
	#pragma HLS dataflow
    //dataflow pragma instruct compiler to run following three APIs in parallel
    // read_input(in, inStream, size);
    // compute_add(inStream, outStream, inc, size);
    // write_result(out, outStream, size);
	
	read_input(kvdram, inStream, size);
    compute_add(inStream, outStream, inc, size);
    write_result(kvdram, outStream, size);
	return;
} */

#ifdef FPGA_IMPL
void load(uint512_dt *in, hls::stream<uint512_dt >& out, int offset_kvs, int size)
{
	Loop_Ld:
	for (int i = 0; i < size; i++)
	{
		#pragma HLS performance target_ti=32
		#pragma HLS LOOP_TRIPCOUNT max=32
		out.write(in[offset_kvs + i]);
	}
}

void compute_A(hls::stream<uint512_dt >& in, hls::stream<uint512_dt >& out1, int size)
{
Loop_A:
	for (int i = 0; i < size; i++)
	{
		#pragma HLS performance target_ti=32
		#pragma HLS LOOP_TRIPCOUNT max=32
		uint512_dt t = in.read();
		out1.write(t);
	}
}

void store(hls::stream<uint512_dt >& in, uint512_dt *out, int offset_kvs, int size)
{
Loop_St:
	for (int i = 0; i < size; i++)
	{
		#pragma HLS performance target_ti=32
		#pragma HLS LOOP_TRIPCOUNT max=32
		out[offset_kvs + i] = in.read();
	}
}
#endif 

void {{context['classname__acts']}}ACTS{{context['id']}}_actit3(bool_type enable, unsigned int mode,
		uint512_dt * kvdram, keyvalue_vbuffer_t vbuffer_source[VDATA_PACKINGSIZE][MAX_BLOCKRAM_VSRCDATA_SIZE], keyvalue_vbuffer_t vbuffer_dest[VDATA_PACKINGSIZE][MAX_BLOCKRAM_VDESTDATA_SIZE],	
			keyvalue_t globalcapsule[BLOCKRAM_GLOBALSTATS_SIZE], globalparams_t globalparamsE, globalparams_t globalparamsK, globalposition_t globalposition, sweepparams_t sweepparams, travstate_t ptravstate, batch_type sourcebaseaddr_kvs, batch_type destbaseaddr_kvs,
				bool_type resetenv, bool_type flush, unsigned int edgebankID, collection_t collections[NUM_COLLECTIONS][COLLECTIONS_BUFFERSZ]){
					
	unsigned int curroffsetkvs = ptravstate.begin_kvs; 
	unsigned int nextoffsetkvs = ptravstate.end_kvs;
	unsigned int size_kvs = nextoffsetkvs - curroffsetkvs;
		
	#ifdef FPGA_IMPL
	hls::stream<uint512_dt> c0, c1, c2, c3, c4, c5;

	#pragma HLS dataflow
	load(kvdram, c0, sourcebaseaddr_kvs, size_kvs);
	compute_A(c0, c1, size_kvs);
	store(c1, kvdram, destbaseaddr_kvs, size_kvs);
	#endif 
	
	#ifdef _DEBUGMODE_STATS
	if(mode==ACTSPROCESSMODE && true){
		actsutilityobj->globalstats_countkvsprocessed(globalparamsK.ACTSPARAMS_INSTID, size_kvs * VECTOR_SIZE);
		actsutilityobj->globalstats_processedges_countvalidkvsprocessed(globalparamsK.ACTSPARAMS_INSTID, size_kvs * VECTOR_SIZE); }
	#endif 
}