#ifdef _DEBUGMODE_CHECKS3 

#ifdef _DEBUGMODE_KERNELPRINTS4//______
if(action.finish == 1){ 
	cout<<"- RESETBUFFERSATSTART"<<endl;
	cout<<"- READ_FRONTIER_PROPERTIES"<<endl; 
	cout<<"- ECPROCESSEDGES"<<endl; 
	cout<<"- READ_DEST_PROPERTIES"<<endl; 
	cout<<"- APPLYUPDATES"<<endl; 
	cout<<"- COLLECT_AND_SAVE_FRONTIER_PROPERTIES"<<endl; 
	cout<<"- SAVE_DEST_PROPERTIES"<<endl; 
	cout<<"- GATHER_FRONTIERINFOS"<<endl; 
	cout<<"- NUMBER_OF_EDGEUPDATES_LOADED"<<endl; 
	cout<<"- NUMBER_OF_EDGEUPDATES_APPLIED"<<endl; 
	cout<<"- NUMBER_OF_NEW_EDGEUPDATES_ADDED"<<endl;
}																										

cout<<">>> [";
cout<<_NUMCLOCKCYCLES_[0][___CODE___RESETBUFFERSATSTART___]<<", ";
cout<<_NUMCLOCKCYCLES_[0][___CODE___READ_FRONTIER_PROPERTIES___] * EDGE_PACK_SIZE * NUM_PEs<<", ";
cout<<_NUMCLOCKCYCLES_[0][___CODE___ECPROCESSEDGES___] * EDGE_PACK_SIZE<<", ";
cout<<_NUMCLOCKCYCLES_[0][___CODE___READ_DEST_PROPERTIES___] * EDGE_PACK_SIZE * NUM_PEs<<", ";
cout<<_NUMCLOCKCYCLES_[0][___CODE___APPLYUPDATES___] * EDGE_PACK_SIZE<<", ";
cout<<_NUMCLOCKCYCLES_[0][___CODE___COLLECT_AND_SAVE_FRONTIER_PROPERTIES___] * EDGE_PACK_SIZE * NUM_PEs<<", ";
cout<<_NUMCLOCKCYCLES_[0][___CODE___SAVE_DEST_PROPERTIES___] * EDGE_PACK_SIZE * NUM_PEs<<", ";
cout<<_NUMCLOCKCYCLES_[0][___CODE___GATHER_FRONTIERINFOS___] * EDGE_PACK_SIZE * NUM_PEs<<"";
cout<<"]";

cout<<" [";
cout<<_NUMCLOCKCYCLES_[0][___CODE___NUMBER_OF_EDGEUPDATES_LOADED___] * EDGE_PACK_SIZE<<", ";
cout<<_NUMCLOCKCYCLES_[0][___CODE___NUMBER_OF_EDGEUPDATES_APPLIED___] * EDGE_PACK_SIZE<<", ";
cout<<_NUMCLOCKCYCLES_[0][___CODE___NUMBER_OF_NEW_EDGEUPDATES_ADDED___] * EDGE_PACK_SIZE<<"";
cout<<"]";
cout<<endl;
cout<<endl;
#endif 

if(action.finish == 1){
	float total_cycles_iter = 
	+ _NUMCLOCKCYCLES_[0][___CODE___RESETBUFFERSATSTART___]
	+ _NUMCLOCKCYCLES_[0][___CODE___PROCESSEDGES___]
	+ _NUMCLOCKCYCLES_[0][___CODE___READ_FRONTIER_PROPERTIES___]
	+ _NUMCLOCKCYCLES_[0][___CODE___VCPROCESSEDGES___]
	+ _NUMCLOCKCYCLES_[0][___CODE___ECPROCESSEDGES___]
	+ _NUMCLOCKCYCLES_[0][___CODE___SAVEVCUPDATES___]
	+ _NUMCLOCKCYCLES_[0][___CODE___COLLECTACTIVEDSTVIDS___]
	+ _NUMCLOCKCYCLES_[0][___CODE___APPLYUPDATESMODULE___]
	+ _NUMCLOCKCYCLES_[0][___CODE___READ_DEST_PROPERTIES___]
	+ _NUMCLOCKCYCLES_[0][___CODE___APPLYUPDATES___]
	+ _NUMCLOCKCYCLES_[0][___CODE___COLLECT_AND_SAVE_FRONTIER_PROPERTIES___]
	+ _NUMCLOCKCYCLES_[0][___CODE___SAVE_DEST_PROPERTIES___]
	+ _NUMCLOCKCYCLES_[0][___CODE___GATHER_FRONTIERINFOS___];
	float time_lapse = (total_cycles_iter * _NUMNANOSECONDS_PER_CLOCKCYCLE_) / 1000000;
	cout<<"acts_kernel SUMMARY:: number of clock cycles seen: "<<total_cycles_iter<<" ("<<time_lapse<<" milliseconds)"<<endl;
	float time_lapse1 = (total_cycles_iter / 1000000) * _NUMNANOSECONDS_PER_CLOCKCYCLE_;
	float time_lapse2 = (float)((total_cycles_iter * EDGE_PACK_SIZE) / 1000) / (float)ACTS_AVERAGE_MEMACCESSTHROUGHPUT_SINGLEHBMCHANNEL_MILIONEDGESPERSEC;
	float million_edges_per_sec = ((globalparams[GLOBALPARAMSCODE__PARAM__NUM_EDGES] / 1000000) / time_lapse) * 1000;
	float billion_edges_per_sec = million_edges_per_sec / 1000;
	cout<<"acts_kernel SUMMARY:: time elapsed for iteration "<<GraphIter<<": "<<time_lapse<<" milliseconds)"<<endl;
}
for(unsigned int t=0; t<16; t++){ total_cycles += _NUMCLOCKCYCLES_[0][t]; }
for(unsigned int t=0; t<16; t++){ _NUMCLOCKCYCLES_[0][t] = 0; }
#endif