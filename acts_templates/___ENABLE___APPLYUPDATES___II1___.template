uint512_vec_dt updates_vecs[NUM_VALID_PEs];
max_limit = 0; for(unsigned int inst=0; inst<NUM_VALID_PEs; inst++){ limits[inst] = actpackupdates_dram___size[inst][p_v]; } for(unsigned int inst=0; inst<NUM_VALID_PEs; inst++){ if(max_limit < limits[inst]){ max_limit = limits[inst]; }}

APPLY_UPDATES_LOOP1: for(unsigned int it=0; it<(max_limit + (BLOCKRAM_SIZE - 1)) / BLOCKRAM_SIZE; it++){
	unsigned int sz = 0; if((it + 1) * BLOCKRAM_SIZE >= max_limit){ sz = max_limit - (it * BLOCKRAM_SIZE); } else { sz = BLOCKRAM_SIZE; }
	APPLY_UPDATES_LOOP1A: for(unsigned int t_=0; t_<sz; t_++){
	#pragma HLS PIPELINE II=1
		unsigned int t = (it * BLOCKRAM_SIZE) + t_;
		
		dretrievemany_udatesdram(globalparams[GLOBALPARAMSCODE__BASEOFFSET__UPDATES] + updatesptrs[p_v], p_v, t, updates_vecs, {% include 'arguments_allchannelsinslr.template' %}, updatesptrs); // NEW
		MY_LOOP1521: for(unsigned int inst=0; inst<NUM_VALID_PEs; inst++){ 
		#pragma HLS UNROLL
			if(t < limits[inst]){
				uint512_vec_dt updates_vec = updates_vecs[inst];
				APPLY_UPDATES_LOOP1C: for(unsigned int v=0; v<EDGE_PACK_SIZE; v++){
				#pragma HLS UNROLL
					keyvalue_t update = updates_vec.data[v];
					unsigned int dstvid_lp = update.key; 
					unsigned int dstvid_lpv = update.key / EDGE_PACK_SIZE;
					if(update.key != INVALIDDATA && update.key < MAX_APPLYPARTITION_SIZE){
						#ifdef _DEBUGMODE_CHECKS3
						#ifndef ___FORCE_SUCCESS___
						if(t < limits[inst] && ((dstvid_lp % EDGE_PACK_SIZE) != v)){ cout<<"acts_kernel 234:: dstvid_lp("<<dstvid_lp<<") % v("<<v<<") != 0. EXITING..."<<endl; exit(EXIT_FAILURE); }
						#endif 
						if(t < limits[inst]){ checkoutofbounds("acts_kernel::ERROR 727a::", dstvid_lp, MAX_APPLYPARTITION_SIZE, NAp, inst, update.key); checkoutofbounds("acts_kernel::ERROR 727b::", dstvid_lpv, MAX_APPLYPARTITION_VECSIZE, NAp, inst, update.key); }
						#endif
						vprop_t vprop =  retrieve_vdatabuffer(v, dstvid_lpv, vdata_buffer[inst]);
						unsigned int new_vprop = reduce_funcG(vprop.prop, vprop.prop, update.value, globalparams[GLOBALPARAMSCODE__PARAM__ALGORITHM]);
						if(new_vprop != vprop.prop && t < limits[inst]){ 
							#ifdef _DEBUGMODE_KERNELPRINTS_TRACE3
							std::cout<<"APPLY (ACT-PACK) UPDATE SEEN @: inst: ["<<inst<<"]: dstvid_lp: "<<dstvid_lp<<", dstvid_lpv: "<<dstvid_lpv<<", new_vprop: "<<new_vprop<<", vid: "<<update.key<<std::endl;
							#endif
							vprop_t newprop; newprop.prop = new_vprop; newprop.mask = MASK_CODE_AU;
							insert_vdatabuffer(v, dstvid_lpv, newprop, vdata_buffer[inst]);
						}
					}
				}
			}
		}
		update_dramnumclockcycles(_NUMCLOCKCYCLES_, ___CODE___APPLYUPDATES___, 1);
	}
}	
				