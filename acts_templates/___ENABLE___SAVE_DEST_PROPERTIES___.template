for(unsigned int n=0; n<NUM_VALID_PEs; n++){ offsets[n] = 0; }

unsigned int start_local_subpartitionID = 0; unsigned int skip_local_subpartitionID = 0;
if(action.start_pv_fpga == NAp){ start_local_subpartitionID = 0; skip_local_subpartitionID = 1; }
else { start_local_subpartitionID = action.start_pv_fpga; skip_local_subpartitionID = NUM_FPGAS; }
		
#if NUM_FPGAS == 1
SAVE_DEST_PROPERTIES_LOOP2: for(unsigned int t=0; t<MAX_APPLYPARTITION_VECSIZE; t++){
#pragma HLS PIPELINE II={{context['II_READ_DEST_PROPERTIES_LOOP2B']}}
	SAVE_DEST_PROPERTIES_LOOP2B: for(unsigned int inst=0; inst<NUM_VALID_PEs; inst++){ 
	#pragma HLS UNROLL
		retrieveandresetvec_vdatabuffer(t, datas[inst], URAM_vprop[inst]);
	}
	MY_LOOP10202: for(unsigned int n=0; n<NUM_VALID_PEs; n++){ 
	#pragma HLS UNROLL
		offsets2[n] = voffset + offsets[n] + t; 
	}
	dinsertmany_vdatadram(voffset, offsets2, t, datas, {% include '___HBM___ARGS___.template' %});
	
	update_dramnumclockcycles(_NUMCLOCKCYCLES_, ___CODE___SAVE_DEST_PROPERTIES___, 1);
}
#else 	
SAVE_DEST_PROPERTIES_LOOP2B: for(unsigned int local_subpartitionID=start_local_subpartitionID; local_subpartitionID<NUM_SUBPARTITION_PER_PARTITION; local_subpartitionID+=skip_local_subpartitionID){				
	unsigned int offset = local_subpartitionID * VDATA_SUBPARTITION_VECSIZE;
	SAVE_DEST_PROPERTIES_LOOP2: for(unsigned int t=0; t<VDATA_SUBPARTITION_VECSIZE; t++){
	#pragma HLS PIPELINE II={{context['II_READ_DEST_PROPERTIES_LOOP2B']}}
		for(unsigned int inst=0; inst<NUM_VALID_PEs; inst++){ 
		#pragma HLS UNROLL
			retrieveandresetvec_vdatabuffer(t, datas[inst], URAM_vprop[inst]);
		}
		MY_LOOP10202: for(unsigned int n=0; n<NUM_VALID_PEs; n++){ 
		#pragma HLS UNROLL
			offsets2[n] = voffset + offsets[n] + t; 
		}
		dinsertmany_vdatadram(voffset + offset, offsets2, t, datas, {% include '___HBM___ARGS___.template' %});

		update_dramnumclockcycles(_NUMCLOCKCYCLES_, ___CODE___SAVE_DEST_PROPERTIES___, 1);
	}
}	
#endif 