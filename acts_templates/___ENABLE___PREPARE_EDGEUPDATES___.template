unsigned int count[NUM_VALID_PEs][EDGE_PACK_SIZE][EDGE_PACK_SIZE]; 
#pragma HLS ARRAY_PARTITION variable=count complete dim=1
#pragma HLS ARRAY_PARTITION variable=count complete dim=2
edge3_vec_dt edge_update_vecs[NUM_VALID_PEs];

for(unsigned int t=0; t<EDGE_PACK_SIZE; t++){ 
	for(unsigned int v=0; v<EDGE_PACK_SIZE; v++){ 
	#pragma HLS UNROLL
		for(unsigned int n=0; n<NUM_VALID_PEs; n++){
		#pragma HLS UNROLL
			count[n][v][t] = 0;
		}
	}
}

for(unsigned int n=0; n<NUM_VALID_PEs; n++){ 
#pragma HLS UNROLL
	offsets_eu[n] = 0; 
}	

// load maps 
for(unsigned int llp_id=0; llp_id<EDGE_PACK_SIZE; llp_id++){ 
	dretrievemany_actpackvptrdram(globalparams[GLOBALPARAMSCODE__BASEOFFSET__EDGEUPDATESPTRS], ((p_u * MAX_NUM_LLPS) + llp_id), edgeupdate_map, {% include '___HBM___ARGS___.template' %}); 
	for(unsigned int n=0; n<NUM_VALID_PEs; n++){
	#pragma HLS UNROLL
		edgeupdate_maps[n][llp_id] = edgeupdate_map[n];
		cout<<"--- edgeupdate_maps[n]["<<llp_id<<"].offset: "<<edgeupdate_maps[n][llp_id].offset<<", edgeupdate_maps[n]["<<llp_id<<"].size: "<<edgeupdate_maps[n][llp_id].size<<endl;
	}
}

PREPARE_EDGEUPDATES_LOOP: for(unsigned int t=0; t<1024; t++){ // EDGE_UPDATES_BUFFER_SIZE
#pragma HLS PIPELINE II=1
	dretrievemany_rawedges(globalparams[GLOBALPARAMSCODE__BASEOFFSET__RAWEDGEUPDATES], offsets_eu, t, edge_update_vecs, {% include '___HBM___ARGS___.template' %});
	for(unsigned int inst=0; inst<NUM_VALID_PEs; inst++){
	#pragma HLS UNROLL
		for(unsigned int v=0; v<EDGE_PACK_SIZE; v++){
		#pragma HLS UNROLL
			unsigned int p = edge_update_vecs[inst].data[v].srcvid % EDGE_PACK_SIZE;
			insert_edgeupdatesbuffer(v, (p * (EDGE_UPDATES_BUFFER_SIZE / EDGE_PACK_SIZE)) + count[inst][v][p], edge_update_vecs[inst].data[v], edgeupdates_buffer[inst]); 
			count[inst][v][p] += 1;
			
			#ifdef _DEBUGMODE_KERNELPRINTS4	
			if(inst==0 && t<8 && v==0){ cout<<"[finalized edge update: p: "<<p<<", srcvid: "<<edge_update_vecs[inst].data[v].srcvid<<", dstvid: "<<edge_update_vecs[inst].data[v].dstvid<<", new weight: "<<edge_update_vecs[inst].data[v].weight<<"]"<<endl; }						
			#endif 
		}
	}
}

#ifdef _DEBUGMODE_KERNELPRINTS
cout<<"--- finished preparing edge updates...: "<<endl;
for(unsigned int v=0; v<EDGE_PACK_SIZE; v++){ // EDGE_PACK_SIZE
	for(unsigned int t=0; t<EDGE_PACK_SIZE; t++){ 
		cout<<"--- count[0]["<<v<<"]["<<t<<"]: "<<count[0][v][t]<<endl;
	}
}
#endif 
#ifdef _DEBUGMODE_KERNELPRINTS
cout<<"--- printing edgeupdate maps (before)...: "<<endl;
for(unsigned int n=0; n<NUM_VALID_PEs; n++){ // EDGE_PACK_SIZE
	for(unsigned int llp_id=0; llp_id<EDGE_PACK_SIZE; llp_id++){ 
		cout<<"--- edgeupdate_maps["<<n<<"]["<<llp_id<<"].offset: "<<edgeupdate_maps[n][llp_id].offset<<", edgeupdate_maps[n]["<<llp_id<<"].size: "<<edgeupdate_maps[n][llp_id].size<<endl;
	}
}
#endif 

{%for i in context['NUM_VALID_PEs_seq']%}
save_edgeupdates({{i}}, count[{{i}}], edgeupdates_buffer[{{i}}], edgeupdate_maps[{{i}}], HBM_channelA{{i}}, globalparams);
{%endfor%}

#ifdef _DEBUGMODE_KERNELPRINTS
cout<<"--- printing edgeupdate maps (after)...: "<<endl;
for(unsigned int n=0; n<NUM_VALID_PEs; n++){ // EDGE_PACK_SIZE
	for(unsigned int llp_id=0; llp_id<EDGE_PACK_SIZE; llp_id++){ 
		cout<<"--- edgeupdate_maps["<<n<<"]["<<llp_id<<"].offset: "<<edgeupdate_maps[n][llp_id].offset<<", edgeupdate_maps[n]["<<llp_id<<"].size: "<<edgeupdate_maps[n][llp_id].size<<endl;
	}
}
#endif 

exit(EXIT_SUCCESS);