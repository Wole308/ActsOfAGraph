unsigned int offsets3[NUM_VALID_PEs]; 
#pragma HLS ARRAY_PARTITION variable = offsets3 complete
map_t edgeupdate_maps[NUM_VALID_PEs][BLOCKRAM_SIZE];
#pragma HLS ARRAY_PARTITION variable=edgeupdate_maps 	
map_t edgeupdate_map[NUM_VALID_PEs];
#pragma HLS ARRAY_PARTITION variable=edgeupdate_map complete
map_t edge_map[NUM_VALID_PEs];
#pragma HLS ARRAY_PARTITION variable=edge_map complete
map_t edge_maps[NUM_VALID_PEs][BLOCKRAM_SIZE];
#pragma HLS ARRAY_PARTITION variable=edge_maps	
unsigned int offsets_eu[NUM_VALID_PEs];
#pragma HLS ARRAY_PARTITION variable = offsets_eu complete
unsigned int limits_eu[NUM_VALID_PEs];
#pragma HLS ARRAY_PARTITION variable = limits_eu complete
#ifndef HW
hybrid_map[GraphIter][p_u] = 1;
#endif 

#ifdef ___ENABLE___DYNAMICGRAPHANALYTICS___
unsigned int num_its = EDGE_PACK_SIZE;	
#else 
unsigned int num_its = 1;	
#endif 

// load edge maps 
#ifdef ___ENABLE___DYNAMICGRAPHANALYTICS___
for(unsigned int edge_block=0; edge_block<__NUM_APPLYPARTITIONS * num_its; edge_block++){ 
	dretrievemany_actpackvptrdram(globalparams[GLOBALPARAMSCODE__BASEOFFSET__EDGEUPDATESPTRS], ((p_u * MAX_NUM_LLPS) + edge_block), edgeupdate_map, {% include 'arguments_allchannelsinslr.template' %}); 
	for(unsigned int n=0; n<NUM_VALID_PEs; n++){
	#pragma HLS UNROLL
		edgeupdate_maps[n][edge_block] = edgeupdate_map[n];
	}
}
#endif 
for(unsigned int edge_block=0; edge_block<__NUM_APPLYPARTITIONS * num_its; edge_block++){ 
	dretrievemany_actpackvptrdram(globalparams[GLOBALPARAMSCODE__BASEOFFSET__ACTPACKVPTRS2], ((p_u * MAX_NUM_LLPS) + edge_block), edge_map, {% include 'arguments_allchannelsinslr.template' %});
	for(unsigned int n=0; n<NUM_VALID_PEs; n++){
	#pragma HLS UNROLL
		edge_maps[n][edge_block] = edge_map[n];
	}
}

EC_PROCESS_EDGES_LOOP1: for(unsigned int llp_set=0; llp_set<__NUM_APPLYPARTITIONS; llp_set++){	// 1 __NUM_APPLYPARTITIONS REMOVEME
	EC_PROCESS_EDGES_LOOP1B: for(unsigned int llp_id=0; llp_id<num_its; llp_id++){ // 1 num_its REMOVEME
		unsigned int edge_block = (llp_set * EDGE_PACK_SIZE) + llp_id;
		
		#ifdef _DEBUGMODE_KERNELPRINTS4
		cout<<"------------------- ["<<p_u<<", "<<llp_set<<", "<<llp_id<<"] -------------------"<<endl; 
		#endif 

		unsigned int max_sz = 0; for(unsigned int n=0; n<NUM_VALID_PEs; n++){ limits[n] = edge_maps[n][edge_block].size; } for(unsigned int n=0; n<NUM_VALID_PEs; n++){ if(max_sz < limits[n]){ max_sz = limits[n]; }}			
		for(unsigned int n=0; n<NUM_VALID_PEs; n++){ offsets[n] = edge_maps[n][edge_block].offset; }	
		#ifdef ___ENABLE___DYNAMICGRAPHANALYTICS___	
		unsigned int max_sz_eu = 0; for(unsigned int n=0; n<NUM_VALID_PEs; n++){ limits_eu[n] = edgeupdate_maps[n][edge_block].size; } for(unsigned int n=0; n<NUM_VALID_PEs; n++){ if(max_sz_eu < limits_eu[n]){ max_sz_eu = limits_eu[n]; }}
		for(unsigned int n=0; n<NUM_VALID_PEs; n++){ offsets_eu[n] = edgeupdate_maps[n][edge_block].offset; }
		#endif 
		
		#ifdef _DEBUGMODE_KERNELPRINTS4
		cout<<"[BEFORE - EC_PROCESS_EDGES - MAPS]: "; for(unsigned int n=0; n<NUM_VALID_PEs; n++){ cout<<edge_maps[n][edge_block].size<<", "; } cout<<endl;
		cout<<"[BEFORE - EC_PROCESS_EDGES - MAPS_EU]: "; for(unsigned int n=0; n<NUM_VALID_PEs; n++){ cout<<edgeupdate_maps[n][edge_block].size<<", "; } cout<<endl;
		#endif 
		
		MY_LOOP1529: for(unsigned int n=0; n<NUM_VALID_PEs; n++){ counts[n] = 0; }
		MY_LOOP1519: for(unsigned int n=0; n<NUM_VALID_PEs; n++){ offsets2[n] = globalparams[GLOBALPARAMSCODE__BASEOFFSET__UPDATES] + updatesptrs[llp_set]; }
		
		// clear edge updates buffers
		#ifdef ___ENABLE___DYNAMICGRAPHANALYTICS___// XXXXXXX // FIXME.
		MY_LOOP180: for(unsigned int t=0; t<EDGE_UPDATES_BUFFER_SIZE; t++){ 
		#pragma HLS PIPELINE II=1
			MY_LOOP181: for(unsigned int i=0; i<NUM_VALID_PEs; i++){ 
			#pragma HLS UNROLL
				MY_LOOP182: for(unsigned int v=0; v<EDGE_PACK_SIZE; v++){ 
				#pragma HLS UNROLL
					edgeupdates_buffer[i][v][t].srcvid = INVALIDDATA; 
					edgeupdates_buffer[i][v][t].dstvid = INVALIDDATA; 
				}
			}			
		}	
		#endif 
		
		// populate edge updates buffers		
		#ifdef ___ENABLE___DYNAMICGRAPHANALYTICS___
		unsigned int sz = max_sz_eu; if(max_sz_eu > EDGE_UPDATES_BUFFER_SIZE){ sz = EDGE_UPDATES_BUFFER_SIZE; }
		LOAD_EDGEUPDATES_LOOP1: for(unsigned int t=0; t<sz; t++){ 
		#pragma HLS PIPELINE II=1
			dretrievemany_actpackedges(globalparams[GLOBALPARAMSCODE__BASEOFFSET__EDGEUPDATES], offsets_eu, t, edge3_vecs, {% include 'arguments_allchannelsinslr.template' %});
			MY_LOOP1273: for(unsigned int inst=0; inst<NUM_VALID_PEs; inst++){
			#pragma HLS UNROLL
				MY_LOOP1274: for(unsigned int v=0; v<EDGE_PACK_SIZE; v++){
				#pragma HLS UNROLL
					unsigned int uniq_srcvid = edge3_vecs[inst].data[v].srcvid;
					unsigned int uniq_dstvid = edge3_vecs[inst].data[v].dstvid;
					unsigned int edge_hashid = hash_edge(uniq_srcvid, uniq_dstvid, t);
					
					#ifdef _DEBUGMODE_KERNELPRINTS//4
					if(inst==0 && t<4){ cout<<"[hashing edge updates into buffer locations: edge["<<inst<<"]["<<t<<"]["<<v<<"]: srcvid: "<<edge3_vecs[inst].data[v].srcvid<<", dstvid: "<<edge3_vecs[inst].data[v].dstvid<<", weight: "<<edge3_vecs[inst].data[v].weight<<", edge_hashid: "<<edge_hashid<<"]"<<endl; }
					#endif 
					#ifdef _DEBUGMODE_CHECKS3
					checkoutofbounds("acts_kernel::ERROR 2513::", edge_hashid, EDGE_UPDATES_BUFFER_SIZE, NAp, NAp, NAp);
					#endif
					// insert_edgeupdatesbuffer(v, edge_hashid, edge3_vecs[inst].data[v], edgeupdates_buffer[inst]); 
					update_dramnumclockcycles(_NUMCLOCKCYCLES_, ___CODE___NUMBER_OF_EDGEUPDATES_LOADED___, 1);
				}
			}
		}
		#endif 
		
		// update edge-updates tracker
		#ifdef ___ENABLE___DYNAMICGRAPHANALYTICS___
		for(unsigned int inst=0; inst<NUM_VALID_PEs; inst++){
		#pragma HLS UNROLL
			if(edgeupdate_maps[inst][edge_block].size >= sz){ edgeupdate_maps[inst][edge_block].size -= sz; } else { edgeupdate_maps[inst][edge_block].size = 0; }
		}
		#ifdef _DEBUGMODE_KERNELPRINTS//4
		cout<<"[EC_PROCESS_EDGES - MAPS_EU(BEFORE)]: "; for(unsigned int inst=0; inst<NUM_VALID_PEs; inst++){ cout<<edgeupdate_maps[inst][edge_block].size + sz<<", "; } cout<<endl;
		cout<<"[EC_PROCESS_EDGES - MAPS_EU(AFTER)]: "; for(unsigned int inst=0; inst<NUM_VALID_PEs; inst++){ cout<<edgeupdate_maps[inst][edge_block].size<<", "; } cout<<endl;
		#endif 
		#endif 
			
		// process edges
		EC_PROCESS_EDGES_MAINLOOP1D: for(unsigned int t=0; t<max_sz; t++){ 
		#pragma HLS PIPELINE II=1
			dretrievemany_actpackedges(globalparams[GLOBALPARAMSCODE__BASEOFFSET__ACTPACKEDGES], offsets, t, edge3_vecs, {% include 'arguments_allchannelsinslr.template' %});
			
			keyvalue_t update_in[NUM_VALID_PEs][EDGE_PACK_SIZE];
			#pragma HLS ARRAY_PARTITION variable = update_in complete dim=0
			keyvalue_t update_out[NUM_VALID_PEs][EDGE_PACK_SIZE];
			#pragma HLS ARRAY_PARTITION variable = update_out complete dim=0
			
			// update edges during graph processing
			#ifdef ___ENABLE___DYNAMICGRAPHANALYTICS___
			edge_update_type invalid_data; invalid_data.srcvid = INVALIDDATA; invalid_data.dstvid = INVALIDDATA; invalid_data.weight = INVALIDDATA; invalid_data.valid = INVALIDDATA;
			EC_PROCESS_EDGEUPDATES_LOOP1E: for(unsigned int inst=0; inst<NUM_VALID_PEs; inst++){
			#pragma HLS UNROLL
				edge3_vec_dt edge_vec_out;
				for(unsigned int v=1; v<EDGE_PACK_SIZE; v++){ // FIXME.
					unsigned int uniq_srcvid = edge3_vecs[inst].data[v].srcvid;
					unsigned int uniq_dstvid = edge3_vecs[inst].data[v].dstvid;
					unsigned int weight = edge3_vecs[inst].data[v].weight;
					unsigned int edge_hashid = hash_edge(uniq_srcvid, uniq_dstvid, t);
					
					edge_update_type edge_update = retrieve_edgeupdatesbuffer(v, edge_hashid, edgeupdates_buffer[inst]);
					unsigned int uniq_eu_srcvid = edge_update.srcvid;
					unsigned int uniq_eu_dstvid = edge_update.dstvid;
					unsigned int eu_weight = edge_update.weight;
					
					if(uniq_srcvid == uniq_eu_srcvid && uniq_dstvid == uniq_eu_dstvid){
						// edge update found. merge edge with edge update & invalidate the edge update 
						edge3_vecs[inst].data[v].weight += eu_weight; 
						insert_edgeupdatesbuffer(v, edge_hashid, invalid_data, edgeupdates_buffer[inst]); // FIXME. can prevent complete pipelining with II=1
						
						#ifdef _DEBUGMODE_KERNELPRINTS//4	
						if(inst==0 && t<1024){ cout<<"[newly updated edge: edge["<<inst<<"]["<<t<<"]["<<v<<"]: srcvid: "<<edge3_vecs[inst].data[v].srcvid<<", dstvid: "<<edge3_vecs[inst].data[v].dstvid<<", new weight: "<<edge3_vecs[inst].data[v].weight<<", old weight: "<<edge3_vecs[inst].data[v].weight - eu_weight<<", edge_hashid: "<<edge_hashid<<"]"<<endl; }
						// if(inst==0 && t<4){ cout<<"[newly updated edge: edge["<<inst<<"]["<<t<<"]["<<v<<"]: srcvid: "<<edge3_vecs[inst].data[v].srcvid<<", dstvid: "<<edge3_vecs[inst].data[v].dstvid<<", new weight: "<<edge3_vecs[inst].data[v].weight<<", old weight: "<<edge3_vecs[inst].data[v].weight - eu_weight<<", edge_hashid: "<<edge_hashid<<"]"<<endl; }
						#endif 	
						update_dramnumclockcycles(_NUMCLOCKCYCLES_, ___CODE___NUMBER_OF_EDGEUPDATES_APPLIED___, 1);
					} else {
						// update for edge not found.
						// if(inst==0 && t<1024){ cout<<"[edge update not found: edge["<<inst<<"]["<<t<<"]["<<v<<"]: srcvid: "<<edge3_vecs[inst].data[v].srcvid<<", dstvid: "<<edge3_vecs[inst].data[v].dstvid<<", new weight: "<<edge3_vecs[inst].data[v].weight<<", old weight: "<<edge3_vecs[inst].data[v].weight - eu_weight<<", edge_hashid: "<<edge_hashid<<"]"<<endl; }				
					}
				}
			}
			#endif 
			
			EC_PROCESS_EDGES_LOOP1F: for(unsigned int inst=0; inst<NUM_VALID_PEs; inst++){
			#pragma HLS UNROLL
				bool en = true; if(t >= limits[inst]){ en = false; } else { en = true; } 
				edge3_vec_dt edge_vec = edge3_vecs[inst];
				unsigned int rotateby = edge_vec.data[0].weight; 
				#ifdef _DEBUGMODE_CHECKS3
				checkoutofbounds("acts_kernel::ERROR 213::", rotateby, EDGE_PACK_SIZE, NAp, NAp, NAp);
				#endif
				
				#ifdef _DEBUGMODE_KERNELPRINTS//4
				for(unsigned int v=0; v<EDGE_PACK_SIZE; v++){
					if(inst==0 && t<4 && edge3_vecs[inst].data[v].weight>1){ cout<<"[newly updated edge: edge["<<inst<<"]["<<t<<"]["<<v<<"]: srcvid: "<<edge3_vecs[inst].data[v].srcvid<<", dstvid: "<<edge3_vecs[inst].data[v].dstvid<<", weight: "<<edge3_vecs[inst].data[v].weight<<"]"<<endl; }
				}
				#endif 
				#ifdef _DEBUGMODE_CHECKS3
				for(unsigned int v=0; v<EDGE_PACK_SIZE; v++){
					edge3_type edge = edge_vec.data[v];
					if(edge.srcvid != INVALIDDATA){
						checkoutofbounds("acts_kernel::ERROR 1213a::", edge.srcvid, MAX_UPARTITION_VECSIZE, NAp, NAp, NAp);
						checkoutofbounds("acts_kernel::ERROR 1213b::", edge.dstvid, MAX_UPARTITION_VECSIZE, NAp, NAp, NAp);
					}
				}
				#endif
				
				// read source properties and process edge to form vertex-updates 
				MY_LOOP16214: for(unsigned int v=0; v<EDGE_PACK_SIZE; v++){
				#pragma HLS UNROLL
					edge3_type edge = edge_vec.data[v];
					unsigned int srcvid_lpv = edge.srcvid; 
					vprop_t uprop; if(edge.srcvid != INVALIDDATA && edge.srcvid < MAX_UPARTITION_VECSIZE){ uprop = retrieve_vdatabuffer(v, srcvid_lpv, vdata_buffer[inst]); }
					if(edge.srcvid != INVALIDDATA && edge.srcvid < MAX_UPARTITION_VECSIZE && (uprop.mask == MASK_CODE_PE || all_vertices_active_in_all_iterations == true)){
						unsigned int res = process_funcG(uprop.prop, 1, globalparams[GLOBALPARAMSCODE__PARAM__ALGORITHM]);
						update_in[inst][v].key = edge.dstvid; update_in[inst][v].value = res;
						#ifdef _DEBUGMODE_CHECKS3
						checkoutofbounds("acts_kernel::ERROR 1213c::", edge.srcvid, MAX_UPARTITION_VECSIZE, NAp, NAp, NAp);
						checkoutofbounds("acts_kernel::ERROR 1213d::", edge.dstvid, MAX_UPARTITION_VECSIZE, NAp, NAp, NAp);
						#endif
						#ifdef _DEBUGMODE_KERNELPRINTS_TRACE3
						std::cout<<"EC - PROCESS EDGE SEEN @: inst: ["<<inst<<"], [srcvid_lpv: "<<srcvid_lpv<<", dstvid: "<<edge.dstvid % MAX_APPLYPARTITION_SIZE<<"], [edge.srcvid: "<<edge.srcvid<<", dstvid: "<<edge.dstvid<<"]"<<std::endl; 
						#endif 
					} else {
						update_in[inst][v].key = INVALIDDATA; update_in[inst][v].value = INVALIDDATA;
					}
				}
				
				// circular shift >>>
				rearrangeLayoutVx16B(rotateby, update_in[inst], update_out[inst]); 
				#ifdef _DEBUGMODE_CHECKS3___XXX
				if(en == true){ check_if_contiguous(update_out[inst], update_in[inst], update_in[inst], rotateby, 0, rotateby); }
				#endif		
				
				// collect stats 
				bool isvalid = true;
				if({%for v in context['EDGE_PACK_SIZE_seq']%}{%if(v>0)%}&&{%endif%} update_out[inst][{{v}}].key==INVALIDDATA{%endfor%}){ isvalid = false; }
				if(en == true && isvalid == true){
					MY_LOOP16234: for(unsigned int v=0; v<EDGE_PACK_SIZE; v++){
					#pragma HLS UNROLL
						if(update_out[inst][v].key != INVALIDDATA){
							#ifndef FPGA_IMPL
							if(update_out[inst][v].key != INVALIDDATA){ checkoutofbounds("acts_kernel::ERROR 623::", ((update_out[inst][v].key / EDGE_PACK_SIZE) >> ACTVUPDATESBLOCK_VECSIZE_POW), BLOCKRAM_SIZE, update_out[inst][v].key, (update_out[inst][v].key / EDGE_PACK_SIZE), (MAX_APPLYPARTITION_VECSIZE / BLOCKRAM_SIZE)); }				
							#endif
							unsigned int dstvid_lpv = update_out[inst][v].key / EDGE_PACK_SIZE;
							if(update_out[inst][v].key != INVALIDDATA){ insert_statstmpbuffer((dstvid_lpv >> ACTVUPDATESBLOCK_VECSIZE_POW), v, 1, statsbuffer_maskbased_tmp[inst]); }
						}
					}
				}
				
				if(en == true && (isvalid == true || all_vertices_active_in_all_iterations == true)){	
					counts[inst] += 1;
					ens[inst][0] = true;									
				} else {
					ens[inst][0] = false;
				}
			}
			
			for(unsigned int n=0; n<NUM_VALID_PEs; n++){ 
			#pragma HLS UNROLL
				offsets3[n] = offsets2[n] + actpackupdates_dram___size[n][llp_set] + counts[n];
			}	
			dinsertmany_updatesdram(offsets3, update_out, ens, {% include 'arguments_allchannelsinslr.template' %});	
			#ifdef ___ENABLE___DYNAMICGRAPHANALYTICS___ // FIXME
			// dinsertmany_actpackedges(globalparams[GLOBALPARAMSCODE__BASEOFFSET__ACTPACKEDGES], offsets, t, edge3_vecs, {% include 'arguments_allchannelsinslr.template' %});
			#endif 
			update_dramnumclockcycles(_NUMCLOCKCYCLES_, ___CODE___ECPROCESSEDGES___, 1);
		}
		
		// update variables 
		MY_LOOP161: for(unsigned int n=0; n<NUM_VALID_PEs; n++){ 
		#pragma HLS UNROLL
			actpackupdates_dram___size[n][llp_set] += counts[n];
		}
		
		// gather stats
		unsigned int data[EDGE_PACK_SIZE];
		if(all_vertices_active_in_all_iterations == false){
			EC_PROCESS_EDGES_LOOP1I: for(unsigned int t=0; t<BLOCKRAM_SIZE; t++){
			#pragma HLS PIPELINE II=1
				for(unsigned int inst=0; inst<NUM_VALID_PEs; inst++){
				#pragma HLS UNROLL
					retrievevec_statstmpbuffer(t, data, statsbuffer_maskbased_tmp[inst]); 
					#ifndef FPGA_IMPL
					checkoutofbounds("acts_kernel::ERROR 023::", t, BLOCKRAM_SIZE, NAp, NAp, NAp);
					#endif
					if( {%for v in context['EDGE_PACK_SIZE_seq']%}{%if(v>0)%}||{%endif%} data[{{v}}]==1{%endfor%} )
					{ 
						insert_statsbuffer(t, llp_set, 1, statsbuffer_maskbased[inst]); 
						vpartition_vertices[inst][llp_set].count = 1;
					}
				}
				update_dramnumclockcycles(_NUMCLOCKCYCLES_, ___CODE___ECPROCESSEDGES___, 1);
			}
		}
		
		// compress unclaimed edge updates and save
		#ifdef ___ENABLE___DYNAMICGRAPHANALYTICS___
		for(unsigned int inst=0; inst<NUM_VALID_PEs; inst++){ 
		#pragma HLS UNROLL
			for(unsigned int v=0; v<EDGE_PACK_SIZE; v++){ 
			#pragma HLS UNROLL
				edge_counts[inst][v] = 0;
			}
		}
		
		COMPRESS_EDGEUPDATES_LOOP1: for(unsigned int t=0; t<sz; t++){ 
		#pragma HLS PIPELINE II=1
			for(unsigned int inst=0; inst<NUM_VALID_PEs; inst++){
			#pragma HLS UNROLL
				for(unsigned int v=0; v<EDGE_PACK_SIZE; v++){
				#pragma HLS UNROLL
					edge_update_type edge_update = retrieve_edgeupdatesbuffer(v, t, edgeupdates_buffer[inst]);		
					if(edge_update.srcvid != INVALIDDATA){
						insert_edgeupdatesbuffer(v, edge_counts[inst][v], edge_update, edgeupdates_outbuffer[inst]); 
						edge_counts[inst][v] += 1;
						update_dramnumclockcycles(_NUMCLOCKCYCLES_, ___CODE___NUMBER_OF_NEW_EDGEUPDATES_ADDED___, 1);
					}		
				}
			}
		}
		
		for(unsigned int n=0; n<NUM_VALID_PEs; n++){ 
		#pragma HLS UNROLL
			limits[n] = 0; for(unsigned int v=0; v<EDGE_PACK_SIZE; v++){ if(limits[n] < edge_counts[n][v]){ limits[n] = edge_counts[n][v]; }}	
		}
		max_sz = 0; for(unsigned int n=0; n<NUM_VALID_PEs; n++){  if(max_sz < limits[n]){ max_sz = limits[n]; }}	
		for(unsigned int n=0; n<NUM_VALID_PEs; n++){ offsets[n] = edge_maps[n][edge_block].offset + edge_maps[n][edge_block].size; }	
		
		#ifdef _DEBUGMODE_KERNELPRINTS4
		// for(unsigned int n=0; n<NUM_VALID_PEs; n++){ for(unsigned int v=0; v<EDGE_PACK_SIZE; v++){ cout<<"+++ edge_counts["<<n<<"]["<<v<<"]: "<<edge_counts[n][v]<<" +++ "<<endl;; } }
		cout<<"+++ max_sz: "<<max_sz<<" +++ "<<endl;
		#endif
		SAVE_NEWEDGEUPDATES_LOOP1: for(unsigned int t=0; t<max_sz; t++){ 
		#pragma HLS PIPELINE II=1
			for(unsigned int inst=0; inst<NUM_VALID_PEs; inst++){
			#pragma HLS UNROLL
				for(unsigned int v=0; v<EDGE_PACK_SIZE; v++){
				#pragma HLS UNROLL
					edge3_vecs[inst].data[v] = retrieve_edgeupdatesbuffer(v, t, edgeupdates_buffer[inst]);
					update_dramnumclockcycles(_NUMCLOCKCYCLES_, ___CODE___NUMBER_OF_NEW_EDGEUPDATES_ADDED___, 1);
				}
			}
			dinsertmany_actpackedges(globalparams[GLOBALPARAMSCODE__BASEOFFSET__ACTPACKEDGES], offsets, t, edge3_vecs, {% include 'arguments_allchannelsinslr.template' %});	
		}
		for(unsigned int n=0; n<NUM_VALID_PEs; n++){ edge_maps[n][edge_block].size += max_sz; }
		#endif 
		
		#ifdef _DEBUGMODE_KERNELPRINTS4
		cout<<"[AFTER - EC_PROCESS_EDGES - MAPS]: "; for(unsigned int n=0; n<NUM_VALID_PEs; n++){ cout<<edge_maps[n][edge_block].size<<", "; } cout<<endl;
		cout<<"[AFTER - EC_PROCESS_EDGES - MAPS_EU]: "; for(unsigned int n=0; n<NUM_VALID_PEs; n++){ cout<<edgeupdate_maps[n][edge_block].size<<", "; } cout<<endl;
		#endif 
		// exit(EXIT_SUCCESS);
	}
	// exit(EXIT_SUCCESS); 
}
// exit(EXIT_SUCCESS); 


						