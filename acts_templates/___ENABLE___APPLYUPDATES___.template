uint512_vec_dt updates_vecs[NUM_VALID_PEs];
unsigned int import_offset = id_import * action.size_import_export;
unsigned int export_offset = id_export * action.size_import_export;
max_limit = 0; for(unsigned int inst=0; inst<NUM_VALID_PEs; inst++){ limits[inst] = updatesptrs[fpga][p_v].size; } for(unsigned int inst=0; inst<NUM_VALID_PEs; inst++){ if(max_limit < limits[inst]){ max_limit = limits[inst]; }}

APPLY_UPDATES_LOOP1: for(unsigned int t=0; t<max_limit; t++){			
#pragma HLS PIPELINE II={{context['II_APPLY_UPDATES_LOOP1']}}
// #pragma HLS dependence variable=URAM_vprop type=inter false
	dretrievemany_udatesdram(globalparams[GLOBALPARAMSCODE__BASEOFFSET__VERTEXUPDATES] + updatesptrs[fpga][p_v].offset, p_v, t, updates_vecs, {% include '___HBM___ARGS___.template' %}); // NEW
	for(unsigned int inst=0; inst<NUM_VALID_PEs; inst++){ 
	#pragma HLS UNROLL
		if(t < limits[inst]){
			uint512_vec_dt updates_vec = updates_vecs[inst];
			APPLY_UPDATES_LOOP1C: for(unsigned int v=0; v<EDGE_PACK_SIZE; v++){
			#pragma HLS UNROLL
				keyvalue_t update = updates_vec.data[v];
				unsigned int dstvid_lp = update.key; 
				unsigned int dstvid_lpv = update.key / EDGE_PACK_SIZE;
				
				if(update.key != INVALIDDATA && update.key < MAX_APPLYPARTITION_SIZE){
					#ifdef _DEBUGMODE_CHECKS3
					#ifndef ___FORCE_SUCCESS___
					if(t < limits[inst] && ((dstvid_lp % EDGE_PACK_SIZE) != v)){ cout<<"acts_kernel 234:: dstvid_lp("<<dstvid_lp<<") % v("<<v<<") != 0. EXITING..."<<endl; exit(EXIT_FAILURE); }
					#endif 
					if(t < limits[inst]){ checkoutofbounds("acts_kernel::ERROR 727a::", dstvid_lp, MAX_APPLYPARTITION_SIZE, NAp, inst, update.key); checkoutofbounds("acts_kernel::ERROR 727b::", dstvid_lpv, MAX_APPLYPARTITION_VECSIZE, NAp, inst, update.key); }					
					#endif
					// vprop_t vprop =  retrieve_vdatabuffer(v, dstvid_lpv, URAM_vprop[inst]);
					vprop_t vprop; vprop.prop = dstvid_lpv; // FIXME.
					unsigned int new_vprop = reduce_funcG(vprop, update.value, globalparams[GLOBALPARAMSCODE__PARAM__ALGORITHM]);
					if(t < limits[inst]){  // && (new_vprop != vprop.prop) // FIXME.
						#ifdef _DEBUGMODE_KERNELPRINTS_TRACE3
						std::cout<<"APPLY (ACT-PACK) UPDATE SEEN @: t: "<<t<<", inst: ["<<inst<<"]: dstvid_lp: "<<dstvid_lp<<", dstvid_lpv: "<<dstvid_lpv<<", new_vprop: "<<new_vprop<<", vid: "<<update.key<<std::endl;
						#endif
						vprop_t newprop; newprop.prop = new_vprop; newprop.degree = MASK_CODE_AU;
						insert_vdatabuffer(v, dstvid_lpv, newprop, URAM_vprop[inst]);
						
						if(inst==0 && v==0){ update_dramnumclockcycles(_NUMCLOCKCYCLES_, ___CODE___APPLYUPDATES___, 1); }
					}
				}
			}
		}
	}
	
	// import (Host -> FPGA)
	if(action.id_import != INVALIDDATA && t<action.size_import_export){	
		{%for v in context['HBM_AXI_PACK_SIZE_seq']%}
		HBM_centerA[import_offset + t].data[{{v}}] = HBM_import[t].data[{{v}}];
		{%endfor%}	
	}				
	
	// export (FPGA -> Host)
	if(action.id_export != INVALIDDATA && t<action.size_import_export){	
		{%for v in context['HBM_AXI_PACK_SIZE_seq']%}
		HBM_export[t].data[{{v}}] = HBM_centerB[export_offset + t].data[{{v}}];
		{%endfor%}
	}		
}			




