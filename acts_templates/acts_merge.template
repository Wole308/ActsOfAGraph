{%for n in context['T_seq']%}{%if(n>=1)%}
unsigned int {{context['classname__acts_merge']}}MERGE{{context['id']}}__broadcastACTVVs(uint512_dt * vdram, {%for i in context['T_seq']%}{%if(i<n)%}uint512_dt * kvdram{{i}},{%endif%}{%endfor%} unsigned int source_partition, globalparams_t globalparamsK, globalparams_t globalparamsV){
	#ifdef _DEBUGMODE_KERNELPRINTS//4
	cout<< TIMINGRESULTSCOLOR << ">>> broadcastACTVVs:: broadcasting frontier vertices..."<< RESET <<endl; 
	#endif
	
	unsigned int buffer_offset = 0;
	unsigned int buffer_offsets[BLOCKRAM_SIZE];
	unsigned int xblock_ids[BLOCKRAM_SIZE];
	workload_t xload_kvs[BLOCKRAM_SIZE];
	workload_t workload_uprop_kvs;
	unsigned int total_vertices_merged = 0;
	value_t datas[VECTOR2_SIZE];
	#pragma HLS ARRAY_PARTITION variable = datas complete
	value_t datas2[VECTOR2_SIZE];
	#pragma HLS ARRAY_PARTITION variable = datas2 complete
	unsigned int stats[2][BLOCKRAM_SIZE];
	#pragma HLS ARRAY_PARTITION variable = stats
	
	unsigned int transfsz_kvs = 0;
	
	for(unsigned int s=0; s<NUM_PEs; s++){
		// unsigned int v_offset = (((s * globalparamsV.NUM_REDUCEPARTITIONS) + source_partition) * NUM_SUBPARTITIONS_PER_VPARTITION) * VDATA_SUBPARTITION_SIZE;
		unsigned int v_offset = (s * globalparamsV.NUM_REDUCEPARTITIONS * VDATA_SUBPARTITION_SIZE) + (source_partition * VDATA_SUBPARTITION_SIZE);
		unsigned int offset = s * VDATA_SUBPARTITION_SIZE;
		
		// cout<<"+++++++++++++++ BROADCAST acitivty: instid: "<<globalparamsK.ACTSPARAMS_INSTID<<", s: "<<s<<", source_partition: "<<source_partition<<", ^^^kvoffset-startreadfrom: "<<v_offset + offset<<", ^^^voffset-startwriteto["<<globalparamsK.ACTSPARAMS_INSTID<<"]: "<<offset<<endl;
		
		UTIL{{context['id']}}_ReadDatas(vdram, globalparamsV.BASEOFFSETKVS_ACTIVEVERTICESDATA + v_offset + offset, datas);
		unsigned int max = 0; for(unsigned int v=0; v<VECTOR2_SIZE; v++){ if(datas[v]>max){ max = datas[v]; } }
		if(max > VDATA_SUBPARTITION_SIZE){ max = 0; }
		#ifdef _DEBUGMODE_KERNELPRINTS_TRACE3 
		// if(max>0){ for(unsigned int v=0; v<VECTOR2_SIZE; v++){ cout<<">>> BROADCAST:ACTVV BUFFER:: datas["<<v<<"]: "<<datas[v]<<endl; }}
		if(max>0){ cout<<">>> BROADCAST:ACTVV BUFFER:: max: "<<max<<endl; }
		#endif
		if(max > 0){
			for (buffer_type t=0; t<max+1; t++){
			#pragma HLS PIPELINE II=1
				UTIL{{context['id']}}_ReadDatas(vdram, globalparamsV.BASEOFFSETKVS_ACTIVEVERTICESDATA + v_offset + offset + t, datas2);
				{%for i in context['T_seq']%}{%if(i<n)%}	
				UTIL{{context['id']}}_WriteDatas(kvdram{{i}}, globalparamsK.BASEOFFSETKVS_SRCVERTICESDATA + offset + t, datas2);
				{%endif%}{%endfor%}
				transfsz_kvs += 1;
				
				// #ifdef _DEBUGMODE_KERNELPRINTS_TRACE3 
				if(t>0){ for(unsigned int v=0; v<VECTOR2_SIZE; v++){ 
					value_t combo = datas2[v]; value_t lvid = combo >> ACTVVATA_BITSZ; value_t vdata = combo & 0xFFFF;
					if(datas[v]>0){ cout<<">>> BROADCAST:ACTVV BUFFER:: ACTVV SEEN @: v: "<<v<<", lvid: "<<lvid<<", vdata: "<<vdata<<", num items: "<<datas[v]<<", source_partition: "<<source_partition<<", #voffset-readfrom: "<<v_offset + offset + t<<", #kvoffset-writeto["<<globalparamsK.ACTSPARAMS_INSTID<<"]: "<<offset + t<<endl; }
				}}
				// #endif
			}
		}
	}
	
	#ifdef _DEBUGMODE_KERNELPRINTS//3
	cout<<"broadcastACTVVs:: broadcast operation finished. "<<transfsz_kvs*VECTOR2_SIZE<<" vertices transferred."<<endl;  
	#endif
	// exit(EXIT_SUCCESS); // 
	return transfsz_kvs;
}
{%endif%}{%endfor%}

unsigned int {{context['classname__acts_merge']}}MERGE{{context['id']}}_mergeACTVVs(uint512_dt * kvdram, uint512_dt * vdram){
	#ifdef _DEBUGMODE_KERNELPRINTS//4
	cout<< TIMINGRESULTSCOLOR << ">>> mergeACTVVs:: merging frontier vertices..."<< RESET <<endl; 
	#endif
	
	unsigned int buffer_offset = 0;
	unsigned int buffer_offsets[BLOCKRAM_SIZE];
	unsigned int xblock_ids[BLOCKRAM_SIZE];
	workload_t xload_kvs[BLOCKRAM_SIZE];
	workload_t workload_uprop_kvs;
	unsigned int total_vertices_merged = 0;
	value_t datas[VECTOR2_SIZE];
	#pragma HLS ARRAY_PARTITION variable = datas complete
	value_t datas2[VECTOR2_SIZE];
	#pragma HLS ARRAY_PARTITION variable = datas2 complete
	unsigned int stats[2][BLOCKRAM_SIZE];
	#pragma HLS ARRAY_PARTITION variable = stats
	
	unsigned int transfsz_kvs = 0;
	
	globalparams_t globalparams = UTIL{{context['id']}}_getglobalparams(kvdram, 0);
	globalparams_t globalparamsv = UTIL{{context['id']}}_getglobalparams(vdram, 0);

	MERGE{{context['id']}}_MERGEVSLOOP2: for(unsigned int reduce_partition=0; reduce_partition<globalparams.NUM_REDUCEPARTITIONS; reduce_partition++){
		unsigned int v_offset = (globalparams.ACTSPARAMS_INSTID * globalparams.NUM_REDUCEPARTITIONS * NUM_SUBPARTITIONS_PER_VPARTITION) * VDATA_SUBPARTITION_SIZE;
		
		for(unsigned int p_=0; p_<NUM_SUBPARTITIONS_PER_VPARTITION; p_++){
			unsigned int offset = ((reduce_partition * NUM_SUBPARTITIONS_PER_VPARTITION) + p_) * VDATA_SUBPARTITION_SIZE;

			UTIL{{context['id']}}_ReadDatas(kvdram, globalparams.BASEOFFSETKVS_ACTIVEVERTICESDATA + offset, datas);
			
			unsigned int max = 0; for(unsigned int v=0; v<VECTOR2_SIZE; v++){ if(datas[v]>max){ max = datas[v]; } }
			if(max > VDATA_SUBPARTITION_SIZE || offset >= globalparams.SIZE_BATCHRANGE){ max = 0; }
			#ifdef _DEBUGMODE_KERNELPRINTS_TRACE3 
			// if(max>0){ for(unsigned int v=0; v<VECTOR2_SIZE; v++){ cout<<">>> MERGE:ACTVV BUFFER:: datas["<<v<<"]: "<<datas[v]<<endl; }}
			if(max>0){ cout<<">>> MERGE:ACTVV BUFFER:: max: "<<max<<endl; }
			#endif
			if(max > 0){
				for (buffer_type t=0; t<max+1; t++){
				#pragma HLS PIPELINE II=1
					UTIL{{context['id']}}_ReadDatas(kvdram, globalparams.BASEOFFSETKVS_ACTIVEVERTICESDATA + offset + t, datas2);
					UTIL{{context['id']}}_WriteDatas(vdram, globalparamsv.BASEOFFSETKVS_ACTIVEVERTICESDATA + v_offset + offset + t, datas2);
					transfsz_kvs += 1;
					
					// #ifdef _DEBUGMODE_KERNELPRINTS_TRACE3 
					if(t>0){ for(unsigned int v=0; v<VECTOR2_SIZE; v++){ 
						value_t combo = datas2[v]; value_t lvid = combo >> ACTVVATA_BITSZ; value_t vdata = combo & 0xFFFF;
						if(datas[v]>0){ cout<<">>> MERGE VECTOR: MERGE SEEN @: v: "<<v<<", lvid: "<<lvid<<", vdata: "<<vdata<<", num items: "<<datas[v]<<", instid: "<<globalparams.ACTSPARAMS_INSTID<<", reduce_partition: "<<reduce_partition<<", ^^^kvoffset-readfrom["<<globalparams.ACTSPARAMS_INSTID<<"]: "<<offset + t<<", #voffset-writeto: "<<v_offset + offset + t<<endl; }
					}}
					// #endif
				}
			}
		}
	}
	#ifdef _DEBUGMODE_KERNELPRINTS3
	cout<<"mergeVs:: merge operation finished. "<<transfsz_kvs*VECTOR2_SIZE<<" vertices transferred."<<endl; 
	#endif
	// exit(EXIT_SUCCESS); // 
	return transfsz_kvs;
}

unsigned int {{context['classname__acts_merge']}}MERGE{{context['id']}}_copyACTVVs(uint512_dt * vdramA, uint512_dt * vdramB, uint512_dt * vdramC, unsigned int begin_computeunitid, unsigned int num_compute_units){
	#ifdef _DEBUGMODE_KERNELPRINTS//4
	cout<< TIMINGRESULTSCOLOR << ">>> copyACTVVs:: synchronizing frontier vertices..."<< RESET <<endl; 
	#endif
	
	unsigned int buffer_offset = 0;
	unsigned int buffer_offsets[BLOCKRAM_SIZE];
	unsigned int xblock_ids[BLOCKRAM_SIZE];
	workload_t xload_kvs[BLOCKRAM_SIZE];
	workload_t workload_uprop_kvs;
	unsigned int total_vertices_merged = 0;
	value_t datas[VECTOR2_SIZE];
	#pragma HLS ARRAY_PARTITION variable = datas complete
	value_t datas2[VECTOR2_SIZE];
	#pragma HLS ARRAY_PARTITION variable = datas2 complete
	unsigned int stats[2][BLOCKRAM_SIZE];
	#pragma HLS ARRAY_PARTITION variable = stats
	
	unsigned int transfsz_kvs = 0;
	
	globalparams_t globalparamsv = UTIL{{context['id']}}_getglobalparams(vdramA, 0);
	#ifdef _DEBUGMODE_KERNELPRINTS4 
	unsigned int * vbufferINT32 = (unsigned int *)&vdramA[globalparamsv.BASEOFFSETKVS_SRCVERTICESDATA];
	#endif 

	for(unsigned int i=begin_computeunitid; i<(begin_computeunitid + num_compute_units); i++){
		for(unsigned int reduce_partition=0; reduce_partition<globalparamsv.NUM_REDUCEPARTITIONS; reduce_partition++){
			unsigned int v_offset = (i * globalparamsv.NUM_REDUCEPARTITIONS * NUM_SUBPARTITIONS_PER_VPARTITION) * VDATA_SUBPARTITION_SIZE;
			
			for(unsigned int p_=0; p_<NUM_SUBPARTITIONS_PER_VPARTITION; p_++){
				unsigned int offset = ((reduce_partition * NUM_SUBPARTITIONS_PER_VPARTITION) + p_) * VDATA_SUBPARTITION_SIZE;

				UTIL{{context['id']}}_ReadDatas(vdramA, globalparamsv.BASEOFFSETKVS_ACTIVEVERTICESDATA + v_offset + offset, datas);
			
				unsigned int max = 0; for(unsigned int v=0; v<VECTOR2_SIZE; v++){ if(datas[v]>max){ max = datas[v]; } }
				if(max > VDATA_SUBPARTITION_SIZE || offset >= globalparamsv.SIZE_BATCHRANGE){ max = 0; }
				#ifdef _DEBUGMODE_KERNELPRINTS_TRACE3 
				// if(max>0){ for(unsigned int v=0; v<VECTOR2_SIZE; v++){ cout<<">>> SYNC:ACTVV BUFFER:: datas["<<v<<"]: "<<datas[v]<<endl; }}
				if(max>0){ cout<<">>> SYNC:ACTVV BUFFER:: max: "<<max<<endl; }
				#endif
				if(max > 0){
					for (buffer_type t=0; t<max+1; t++){
					#pragma HLS PIPELINE II=1
						UTIL{{context['id']}}_ReadDatas(vdramA, globalparamsv.BASEOFFSETKVS_ACTIVEVERTICESDATA + v_offset + offset + t, datas2);
						UTIL{{context['id']}}_WriteDatas(vdramB, globalparamsv.BASEOFFSETKVS_ACTIVEVERTICESDATA + v_offset + offset + t, datas2);
						UTIL{{context['id']}}_WriteDatas(vdramC, globalparamsv.BASEOFFSETKVS_ACTIVEVERTICESDATA + v_offset + offset + t, datas2);
						transfsz_kvs += 1;
							
						#ifdef _DEBUGMODE_KERNELPRINTS4 
						if(t>0){ for(unsigned int v=0; v<VECTOR2_SIZE; v++){ 
							value_t combo = datas2[v]; value_t lvid = combo >> ACTVVATA_BITSZ; value_t vdata = combo & 0xFFFF;
							unsigned int actvvid = UTIL{{context['id']}}_GETREALVID(((offset + t - 1) * VECTOR2_SIZE) + v, i);
							// #ifdef _DEBUGMODE_KERNELPRINTS_TRACE3
							if(datas[v]>0){ cout<<">>> SYNC VECTOR SEEN @: v: "<<v<<", lvid: "<<lvid<<", vdata: "<<vdata<<", num items: "<<datas[v]<<", lvid: "<<((offset + t - 1) * VECTOR2_SIZE) + v<<", actvvid: "<<UTIL{{context['id']}}_GETREALVID(((offset + t - 1) * VECTOR2_SIZE) + v, i)<<", reduce_partition: "<<reduce_partition<<endl; }			 
							if(datas[v]>0 && false){ cout<<">>> SYNC VECTOR SEEN @: #voffset-readfrom: "<<v_offset + offset + t<<", #voffset-writeto: "<<v_offset + offset + t<<endl; }			 
							// #endif 
							// if(t-1<datas[v]){ vbufferINT32[actvvid] = vdata; }
							if(t-1<datas[v] && vdata < 64){ vbufferINT32[vdata] += 1; }
						}}
						#endif
					}
				}
			}
		}
	}
	#ifdef _DEBUGMODE_KERNELPRINTS3
	cout<<"mergeVs:: sync operation finished. "<<transfsz_kvs*VECTOR2_SIZE<<" vertices transferred."<<endl; 
	#endif
	// exit(EXIT_SUCCESS); // 
	return transfsz_kvs;
} 

unsigned int {{context['classname__acts_merge']}}MERGE{{context['id']}}_exchangeACTVVs(uint512_dt * vdramA, uint512_dt * vdramB, uint512_dt * vdramC){
	#ifdef _DEBUGMODE_KERNELPRINTS4//3
	cout<< TIMINGRESULTSCOLOR << ">>> exchangeVs:: exchanging vertices across different SLRs..." << RESET <<endl; 
	#endif

	unsigned int transfsz_kvs = 0;
	transfsz_kvs += MERGE{{context['id']}}_copyACTVVs(vdramA, vdramB, vdramC, 0, NUMCOMPUTEUNITS_SLR2);
	transfsz_kvs += MERGE{{context['id']}}_copyACTVVs(vdramB, vdramA, vdramC, NUMCOMPUTEUNITS_SLR2, NUMCOMPUTEUNITS_SLR1);
	transfsz_kvs += MERGE{{context['id']}}_copyACTVVs(vdramC, vdramA, vdramB, NUMCOMPUTEUNITS_SLR2 + NUMCOMPUTEUNITS_SLR1, NUMCOMPUTEUNITS_SLR0);
	return transfsz_kvs;
}

extern "C" {
void {{context['classname__acts_merge']}}TOP{{context['id']}}_topkernelS(uint512_dt * vdramA, uint512_dt * vdramB, uint512_dt * vdramC){
#pragma HLS INTERFACE m_axi port = vdramA offset = slave bundle = gmem0
#pragma HLS INTERFACE m_axi port = vdramB offset = slave bundle = gmem1
#pragma HLS INTERFACE m_axi port = vdramC offset = slave bundle = gmem2

#pragma HLS INTERFACE s_axilite port = vdramA bundle = control
#pragma HLS INTERFACE s_axilite port = vdramB bundle = control
#pragma HLS INTERFACE s_axilite port = vdramC bundle = control

#pragma HLS INTERFACE s_axilite port=return bundle=control

#pragma HLS DATA_PACK variable = vdramA
#pragma HLS DATA_PACK variable = vdramB
#pragma HLS DATA_PACK variable = vdramC

	// return;
	globalparams_t globalparamsvA = UTIL{{context['id']}}_getglobalparams(vdramA, 0);
	unsigned int inACTSMODE = UTIL{{context['id']}}_GetFirstData(vdramA, BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_MAILBOX + globalparamsvA.ALGORITHMINFO_GRAPHITERATIONID);
	#ifdef _DEBUGMODE_KERNELPRINTS
	cout<<"~~~ TOP{{context['id']}}_topkernelS:: GraphIter: "<<globalparamsvA.ALGORITHMINFO_GRAPHITERATIONID<<endl;
	#endif
	
	#ifdef CONFIG_RELEASE_VERSION4
	if(globalparamsvA.ENABLE_EXCHANGECOMMAND == ON){
		MERGE{{context['id']}}_exchangeACTVVs(vdramA, vdramB, vdramC);
	}
	#endif 
	return;
}
}




