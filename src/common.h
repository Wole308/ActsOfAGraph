#ifndef COMMON_H
#define COMMON_H
#include "../config/config_params.h"

#define SW // SWEMU, HW, SW
#define ACTGRAPH_SETUP // ACTGRAPH_SETUP, GRAFBOOST_SETUP
#define PR_ALGORITHM // PR_ALGORITHM, BFS_ALGORITHM, BC_ALGORITHM
#define _LARGEDATASET_1B 
#if (defined(SWEMU) || defined(HW))
#define FPGA_IMPL
#endif 
#define CRABTREE_PLATFORM // AWS_PLATFORM, CRABTREE_PLATFORM

#define _DEBUGMODE_HEADER //
#if defined (FPGA_IMPL) && defined (HW)
#else
#define _DEBUGMODE_STATS
// #define _DEBUGMODE_CHECKS
#define _DEBUGMODE_CHECKS2
#define _DEBUGMODE_CHECKS3
// #define _DEBUGMODE_PRINTS
// #define _DEBUGMODE_KERNELPRINTS
// #define _DEBUGMODE_KERNELPRINTS2
#define _DEBUGMODE_KERNELPRINTS3
#define _DEBUGMODE_PRINTS_TMP // lighter printing // REMOVEME. depreciated
#endif
// #define _DEBUGMODE_HOSTPRINTS
#define _DEBUGMODE_HOSTPRINTS2
// #define _DEBUGMODE_TIMERS
#define _DEBUGMODE_TIMERS2

#define LOCKE

#define _SINGLEKERNEL
#ifdef FPGA_IMPL
#define _WIDEWORD
#endif

#ifndef PR_ALGORITHM
#define ACTIVEVERTICESBASEDALGORITHM
#endif

#define MIN(a,b) (((a)<(b))?(a):(b))
#define MAX(a,b) (((a)>(b))?(a):(b))

#define NAp 666

#define DATAWIDTH 512 
#define VECTOR_SIZE 8
#define ACTIVEVERTICESVECTOR_SIZE 4

#define DATATYPE_SIZE 32
#define VECTOR_SIZE_INTS 16

#define NUMDRAMBANKS 4
#define NUMINSTANCES 1

#define NUM_PARTITIONS_POW 5
#define NUM_PARTITIONS (1 << NUM_PARTITIONS_POW)

#define MAXNUMSSDPARTITIONS 16
#define NUMSSDPARTITIONS_POW 4
#define NUMSSDPARTITIONS (1 << NUMSSDPARTITIONS_POW)

#define MAXNUMVERTEXBANKS 16
#define MAXNUMEDGEBANKS 16
#define MAXNUMVERTICESPERBANK (KVDATA_RANGE / MAXNUMEDGEBANKS)
#define MAXNUMVERTICESPERBANK_KVS (MAXNUMVERTICESPERBANK / VECTOR_SIZE)

#define NUMCPUTHREADS 4
#define NUMPARTITIONS_DIV_VECTORSIZE (NUM_PARTITIONS / VECTOR_SIZE)

#ifdef _EQUALDATASET_X
#define TREE_DEPTH 2
#endif
#ifdef _LARGEDATASET_1M
#define TREE_DEPTH 2
#endif
#ifdef _LARGEDATASET_67M
#define TREE_DEPTH 3
#endif
#ifdef _LARGEDATASET_268M
#define TREE_DEPTH 3
#endif
#ifdef _LARGEDATASET_1B
#define TREE_DEPTH 3
#endif
#ifdef _LARGEDATASET_4B
#define TREE_DEPTH 4
#endif

#ifdef _EQUALDATASET_X
#define KVDATA_RANGE_POW 24
#endif
#ifdef _LARGEDATASET_1M 
#define KVDATA_RANGE_POW 20
#endif
#ifdef _LARGEDATASET_67M
#define KVDATA_RANGE_POW 26
#endif
#ifdef _LARGEDATASET_268M 
#define KVDATA_RANGE_POW 28 
#endif
#ifdef _LARGEDATASET_1B 
#define KVDATA_RANGE_POW 30 
#endif
#ifdef _LARGEDATASET_4B 
#define KVDATA_RANGE_POW 30 
#endif
#define KVDATA_RANGE (1 << KVDATA_RANGE_POW)

// #define KVDATA_BATCHSIZE (1 << 24)
#define KVDATA_BATCHSIZE (1 << 26)
// #define KVDATA_BATCHSIZE (1 << 27)
// #define KVDATA_BATCHSIZE (1 << 28)
#define KVDATA_BATCHSIZE_KVS (KVDATA_BATCHSIZE / VECTOR_SIZE)

#define TREEDEPTH_FORSSDPARTITION0 TREE_DEPTH
#define TREEDEPTH_FORSSDPARTITION1 TREE_DEPTH
#define TREEDEPTH_FORSSDPARTITION2 TREE_DEPTH
#define TREEDEPTH_FORSSDPARTITION3 TREE_DEPTH
#define TREEDEPTH_FORSSDPARTITION4 TREE_DEPTH
#define TREEDEPTH_FORSSDPARTITION5 TREE_DEPTH
#define TREEDEPTH_FORSSDPARTITION6 TREE_DEPTH
#define TREEDEPTH_FORSSDPARTITION7 TREE_DEPTH
#define TREEDEPTH_FORSSDPARTITION8 TREE_DEPTH
#define TREEDEPTH_FORSSDPARTITION9 TREE_DEPTH
#define TREEDEPTH_FORSSDPARTITION10 TREE_DEPTH
#define TREEDEPTH_FORSSDPARTITION11 TREE_DEPTH
#define TREEDEPTH_FORSSDPARTITION12 TREE_DEPTH
#define TREEDEPTH_FORSSDPARTITION13 TREE_DEPTH
#define TREEDEPTH_FORSSDPARTITION14 TREE_DEPTH
#define TREEDEPTH_FORSSDPARTITION15 TREE_DEPTH
#define MAXTREEDEPTH TREE_DEPTH

#define KVDATA_BATCHSIZE_NUMPADS 16
#define PADSIZE_PERLLOP (KVDATA_BATCHSIZE_NUMPADS * VECTOR_SIZE)
#define NUM_LLOPS (1 << (NUM_PARTITIONS_POW * MAXTREEDEPTH))
#define KVDATA_BATCHSIZE_PADDING (NUM_LLOPS * PADSIZE_PERLLOP)

#define PADDEDKVDATA_BATCHSIZE (KVDATA_BATCHSIZE + KVDATA_BATCHSIZE_PADDING)
#define PADDEDKVDATA_BATCHSIZE_KVS (PADDEDKVDATA_BATCHSIZE / VECTOR_SIZE)

#define _x2PADDEDKVDATA_SIZE (PADDEDKVDATA_BATCHSIZE * 2)
#define _x2PADDEDKVDATA_SIZE_KVS (_x2PADDEDKVDATA_SIZE / VECTOR_SIZE)

#define OFFSETSCODE 0
#define SIZESCODE 1

#define SIZEOFKV 4
#define SIZEOFVERTEXID 32

#define NUMWORKERS 1
#define NUMSUBWORKERS 8
#define NUMWORKERS_APPLYPH 1
#define NUMSUBWORKERS_APPLYPH 8
#define NUMPARTIALRESULTS 4

#define PROCESSEDGESCMD 1
#define PARTITIONCMD 2
#define APPLYUPDATESCMD 3

#define MESSAGES_SIZE 1024
#define MESSAGES_SIZE_KVS (MESSAGES_SIZE / VECTOR_SIZE)
#define MESSAGES_COMMANDID 0
#define MESSAGES_PROCESSCOMMANDID (MESSAGES_COMMANDID + 1)
#define MESSAGES_PARTITIONCOMMANDID (MESSAGES_PROCESSCOMMANDID + 1)
#define MESSAGES_APPLYUPDATESCOMMANDID (MESSAGES_PARTITIONCOMMANDID + 1)
#define MESSAGES_KVDATASIZEID (MESSAGES_APPLYUPDATESCOMMANDID + 1)
#define MESSAGES_FINALNUMPARTITIONSID (MESSAGES_KVDATASIZEID + 1)
#define MESSAGES_TREEDEPTHID (MESSAGES_FINALNUMPARTITIONSID + 1)
#define MESSAGES_ITERATIONID (MESSAGES_TREEDEPTHID + 1)
#define MESSAGES_SSDPARTITIONID (MESSAGES_ITERATIONID + 1)
#define DRAM_VOFFSET (MESSAGES_SSDPARTITIONID + 1)
#define DRAM_VSIZE (DRAM_VOFFSET + 1)
#define DRAM_TREEDEPTH (DRAM_VSIZE + 1)
#define DRAM_FINALNUMPARTITIONS (DRAM_TREEDEPTH + 1)
#define MESSAGES_KVDATA_BATCHSIZE_KVS (DRAM_FINALNUMPARTITIONS + 1)
#define MESSAGES_PADDEDKVDATA_BATCHSIZE_KVS_ID (MESSAGES_KVDATA_BATCHSIZE_KVS + 1)
#define GRAPH_ITERATIONID (MESSAGES_PADDEDKVDATA_BATCHSIZE_KVS_ID + 1)
#define MESSAGES_CAPSULESTATSBATCHSZ_KVS (GRAPH_ITERATIONID + 1)

#define KVDATA_RANGE_PERSSDPARTITION_POW (KVDATA_RANGE_POW - NUMSSDPARTITIONS_POW)
#define KVDATA_RANGE_PERSSDPARTITION (1 << KVDATA_RANGE_PERSSDPARTITION_POW)
#define KVDATA_RANGE_PERSSDPARTITION_KVS (KVDATA_RANGE_PERSSDPARTITION / VECTOR_SIZE)
#define KVDATA_RANGEOFFSET_FORSSDPARTITION0 (0 * KVDATA_RANGE_PERSSDPARTITION)
#define KVDATA_RANGEOFFSET_FORSSDPARTITION1 (1 * KVDATA_RANGE_PERSSDPARTITION)
#define KVDATA_RANGEOFFSET_FORSSDPARTITION2 (2 * KVDATA_RANGE_PERSSDPARTITION)
#define KVDATA_RANGEOFFSET_FORSSDPARTITION3 (3 * KVDATA_RANGE_PERSSDPARTITION)
#define KVDATA_RANGEOFFSET_FORSSDPARTITION4 (4 * KVDATA_RANGE_PERSSDPARTITION)
#define KVDATA_RANGEOFFSET_FORSSDPARTITION5 (5 * KVDATA_RANGE_PERSSDPARTITION)
#define KVDATA_RANGEOFFSET_FORSSDPARTITION6 (6 * KVDATA_RANGE_PERSSDPARTITION)
#define KVDATA_RANGEOFFSET_FORSSDPARTITION7 (7 * KVDATA_RANGE_PERSSDPARTITION)
#define KVDATA_RANGEOFFSET_FORSSDPARTITION8 (8 * KVDATA_RANGE_PERSSDPARTITION)
#define KVDATA_RANGEOFFSET_FORSSDPARTITION9 (9 * KVDATA_RANGE_PERSSDPARTITION)
#define KVDATA_RANGEOFFSET_FORSSDPARTITION10 (10 * KVDATA_RANGE_PERSSDPARTITION)
#define KVDATA_RANGEOFFSET_FORSSDPARTITION11 (11 * KVDATA_RANGE_PERSSDPARTITION)
#define KVDATA_RANGEOFFSET_FORSSDPARTITION12 (12 * KVDATA_RANGE_PERSSDPARTITION)
#define KVDATA_RANGEOFFSET_FORSSDPARTITION13 (13 * KVDATA_RANGE_PERSSDPARTITION)
#define KVDATA_RANGEOFFSET_FORSSDPARTITION14 (14 * KVDATA_RANGE_PERSSDPARTITION)
#define KVDATA_RANGEOFFSET_FORSSDPARTITION15 (15 * KVDATA_RANGE_PERSSDPARTITION)

#define APPLYVERTEXBUFFERSZ_PERSSDPARTITION_POW (KVDATA_RANGE_PERSSDPARTITION_POW - (TREE_DEPTH * NUM_PARTITIONS_POW))
#define APPLYVERTEXBUFFERSZ_PERSSDPARTITION (1 << APPLYVERTEXBUFFERSZ_PERSSDPARTITION_POW)
#define APPLYVERTEXBUFFERSZ_PERSSDPARTITION_KVS (APPLYVERTEXBUFFERSZ_PERSSDPARTITION / VECTOR_SIZE)
#define APPLYVERTEXBUFFERSZ APPLYVERTEXBUFFERSZ_PERSSDPARTITION
#define APPLYVERTEXBUFFERSZ_KVS (APPLYVERTEXBUFFERSZ / VECTOR_SIZE)

#define VERTICESDATASZ_FORDRAMX KVDATA_RANGE_PERSSDPARTITION

#define _x3PADDEDKVDATA_SIZE (_x2PADDEDKVDATA_SIZE + VERTICESDATASZ_FORDRAMX)
#define _x3PADDEDKVDATA_SIZE_KVS (_x3PADDEDKVDATA_SIZE / VECTOR_SIZE)

#define KVSTATS_SIZE (1 << (NUM_PARTITIONS_POW * TREE_DEPTH))
#define KVSTATS_SIZE_KVS (KVSTATS_SIZE / VECTOR_SIZE)
#define KVSTATS_SIZE_POW (NUM_PARTITIONS_POW * TREE_DEPTH)

#define KVBUFFERSZ (1 << 12)
#define KVBUFFERSZ_KVS (KVBUFFERSZ / VECTOR_SIZE)

#define KVBUFFERSZ_PADDING (VECTOR_SIZE * NUM_PARTITIONS * 2) // padding should account for overflows too

#define KVSRCBUFFERSZ (KVBUFFERSZ + KVBUFFERSZ_PADDING)
#define KVSRCBUFFERSZ_KVS (KVSRCBUFFERSZ / VECTOR_SIZE)

#define KVSRCBUFFERSZ_APPLY (KVBUFFERSZ + KVBUFFERSZ_PADDING)
#define KVSRCBUFFERSZ_APPLY_KVS (KVSRCBUFFERSZ_APPLY / VECTOR_SIZE)

#ifdef _SHARED_DESTBUFFER
#define KVDESTBUFFERSZ (MAX(KVSRCBUFFERSZ, APPLYVERTEXBUFFERSZ))
#else
#define KVDESTBUFFERSZ KVSRCBUFFERSZ
#endif
#define KVDESTBUFFERSZ_KVS (KVDESTBUFFERSZ / VECTOR_SIZE)

#define VERTICESDATA_BATCHSIZE_POW 26
#define VERTICESDATA_BATCHSIZE (1 << VERTICESDATA_BATCHSIZE_POW)
#define VERTICESDATA_BATCHSIZE_PLUS1 (VERTICESDATA_BATCHSIZE + 1)

#define VERTICESDATA_BUFFERSZ_POW 16
#define VERTICESDATA_BUFFERSZ (1 << VERTICESDATA_BUFFERSZ_POW)
#define VERTICESDATA_BUFFERSZ_PLUS1 (VERTICESDATA_BUFFERSZ + 1)

#define KVSPARTITIONBUFFERSZ_POW 28
#define KVSPARTITIONBUFFERSZ (1 << KVSPARTITIONBUFFERSZ_POW)
#define KVSPARTITIONBUFFERSZ_KVS (KVSPARTITIONBUFFERSZ / VECTOR_SIZE)

#define SRC_DST 5
#define DST_SRC 6

#define DIRECTEDGRAPH 5
#define UNDIRECTEDGRAPH 6

#define KEYVALUETYPE_INTSSIZE 2
#define _x3PADDEDKVDATA_INTSSIZE (_x3PADDEDKVDATA_SIZE * KEYVALUETYPE_INTSSIZE)
#define KVSTATS_INTSSIZE (KVSTATS_SIZE * KEYVALUETYPE_INTSSIZE)

#define DRAMSZ ((PADDEDKVDATA_BATCHSIZE * 2) + MAXNUMVERTICESPERBANK)
#define DRAMSZ_KVS (DRAMSZ / VECTOR_SIZE)

#define FORCDFINISH // REMOVEME.
#define FORCDFINISH_VECTOR_SIZE VECTOR_SIZE
#define FORCDFINISH_NUM_PARTITIONS NUM_PARTITIONS
#define FORCDFINISH_KVBUFFERSZ KVBUFFERSZ
#define FORCDFINISH_KVBUFFERSZ_KVS KVBUFFERSZ_KVS
#define FORCDFINISH_KVSRCBUFFERSZ KVSRCBUFFERSZ
#define FORCDFINISH_KVSRCBUFFERSZ_KVS KVSRCBUFFERSZ_KVS
#define FORCDFINISH_KVDESTBUFFERSZ KVDESTBUFFERSZ
#define FORCDFINISH_KVDESTBUFFERSZ_KVS KVDESTBUFFERSZ_KVS
#define FORCDFINISH_KVSTATS_SIZE KVSTATS_SIZE
#define FORCDFINISH_MESSAGES_SIZE MESSAGES_SIZE
#define FORCDFINISH_PADDEDKVDATA_BATCHSIZE_KVS PADDEDKVDATA_BATCHSIZE_KVS
#define FORCDFINISH_APPLYVERTEXBUFFERSZ APPLYVERTEXBUFFERSZ
#define FORCDFINISH_APPLYVERTEXBUFFERSZ_KVS APPLYVERTEXBUFFERSZ_KVS
#define FORCDFINISH_KVSRCBUFFERSZ_APPLY KVSRCBUFFERSZ_APPLY
#define FORCDFINISH_KVSRCBUFFERSZ_APPLY_KVS KVSRCBUFFERSZ_APPLY_KVS
// #define FORCDFINISH_DRAMSZ (1 << 30) // DRAMSZ // CHANGED
#define FORCDFINISH_DRAMSZ (1 << 28)
#define FORCDFINISH_DRAMSZ_KVS (FORCDFINISH_DRAMSZ / VECTOR_SIZE) // DRAMSZ_KVS

#ifdef _BUFFERB4WRITE_DEPRECIATED
#define NM 2
#define DESTTMPSLICESZ_KVS KVSRCBUFFERSZ_KVS
#define DESTTMPKVBUFFERSZ_KVS (NM * DESTTMPSLICESZ_KVS)
#define DESTTMPKVBUFFERSZ (DESTTMPKVBUFFERSZ_KVS * VECTOR_SIZE)
#define TOTALDESTTMPKVBUFFERSZ (DESTTMPKVBUFFERSZ * NUM_PARTITIONS)
#define TOTALDESTTMPKVBUFFERSZ_KVS (TOTALDESTTMPKVBUFFERSZ / VECTOR_SIZE)
#define FORCDFINISH_DESTTMPKVBUFFERSZ_KVS DESTTMPKVBUFFERSZ_KVS
#else
#define NM NAp
#define DESTTMPSLICESZ_KVS NAp
#define DESTTMPKVBUFFERSZ_KVS NAp
#define DESTTMPKVBUFFERSZ NAp
#define TOTALDESTTMPKVBUFFERSZ (KVSRCBUFFERSZ * NUMSUBWORKERS)
#define TOTALDESTTMPKVBUFFERSZ_KVS (TOTALDESTTMPKVBUFFERSZ / VECTOR_SIZE)
#define FORCDFINISH_DESTTMPKVBUFFERSZ_KVS DESTTMPKVBUFFERSZ_KVS
#endif

#define PARTITIONS_x_VECTORSZ (NUM_PARTITIONS * VECTOR_SIZE)

#define ON 5
#define OFF 6

#define ACTSINFINITY 777777777

#define ACTIVE 1
#define INACTIVE 0

#define FINISHED 5
#define NOTFINISHED 6

#define NONE 6
#define NOTEXIST -1

#define STREAMING_ACCESS_TYPE 5
#define PARTIAL_ACCESS_TYPE 6

#define RESET   "\033[0m"
#define BLACK   "\033[30m"      /* Black */
#define RED     "\033[31m"      /* Red */
#define GREEN   "\033[32m"      /* Green */
#define YELLOW  "\033[33m"      /* Yellow */
#define BLUE    "\033[34m"      /* Blue */
#define MAGENTA "\033[35m"      /* Magenta */
#define CYAN    "\033[36m"      /* Cyan */
#define WHITE   "\033[37m"      /* White */
#define BOLDBLACK   "\033[1m\033[30m"      /* Bold Black */
#define BOLDRED     "\033[1m\033[31m"      /* Bold Red */
#define BOLDGREEN   "\033[1m\033[32m"      /* Bold Green */
#define BOLDYELLOW  "\033[1m\033[33m"      /* Bold Yellow */
#define BOLDBLUE    "\033[1m\033[34m"      /* Bold Blue */
#define BOLDMAGENTA "\033[1m\033[35m"      /* Bold Magenta */
#define BOLDCYAN    "\033[1m\033[36m"      /* Bold Cyan */
#define BOLDWHITE   "\033[1m\033[37m"      /* Bold White */
#define TIMINGRESULTSCOLOR BOLDWHITE

#define NUMBITSINCHAR 8
#define NUMBITSINUNSIGNEDINT (NUMBITSINCHAR * 4)

#define GETMASK(index, size) (((1 << (size)) - 1) << (index))
#define READFROM(data, index, size) (((data) & GETMASK((index), (size))) >> (index))
#define WRITETO(data, index, size, value) ((data) = ((data) & (~GETMASK((index), (size)))) | ((value) << (index)))
#define FIELD(data, name, index, size) \
  inline decltype(data) name() { return READFROM(data, index, size); } \
  inline void set_##name(decltype(data) value) { WRITETO(data, index, size, value); }
#ifndef FPGA_IMPL // FIXME.
struct _bitData {
  unsigned int bitData;
  FIELD(bitData, one, 0, 1)
  FIELD(bitData, two, 1, 2)
};
#endif

#define INFINITI ((1 << 30) - 1)

#define KVDRAMSZ PADDEDKVDATA_BATCHSIZE // wide word
#define KVDRAMSZ_KVS (KVDRAMSZ / VECTOR_SIZE)

#define KVDRAMWORKSPACESZ PADDEDKVDATA_BATCHSIZE
#define KVDRAMWORKSPACESZ_KVS (KVDRAMWORKSPACESZ / VECTOR_SIZE)

#define BASEOFFSET_KVDRAM 0 
#define BASEOFFSET_KVDRAM_KVS (BASEOFFSET_KVDRAM / VECTOR_SIZE)

#define BASEOFFSET_KVDRAMWORKSPACE (BASEOFFSET_KVDRAM + KVDRAMSZ)
#define BASEOFFSET_KVDRAMWORKSPACE_KVS (BASEOFFSET_KVDRAMWORKSPACE / VECTOR_SIZE)

#define BASEOFFSET_KVDRAM0 (BASEOFFSET_CAPSULEDRAM + (0 * KVDRAMSZ))
#define BASEOFFSET_KVDRAM0_KVS (BASEOFFSET_KVDRAM0 / VECTOR_SIZE)
#define BASEOFFSET_KVDRAM1 (BASEOFFSET_CAPSULEDRAM + (1 * KVDRAMSZ))
#define BASEOFFSET_KVDRAM1_KVS (BASEOFFSET_KVDRAM1 / VECTOR_SIZE)
#define BASEOFFSET_KVDRAM2 (BASEOFFSET_CAPSULEDRAM + (2 * KVDRAMSZ))
#define BASEOFFSET_KVDRAM2_KVS (BASEOFFSET_KVDRAM2 / VECTOR_SIZE)
#define BASEOFFSET_KVDRAM3 (BASEOFFSET_CAPSULEDRAM + (3 * KVDRAMSZ))
#define BASEOFFSET_KVDRAM3_KVS (BASEOFFSET_KVDRAM3 / VECTOR_SIZE)

#define STATSDRAMSZ KVSTATS_SIZE // narrow word 

#define MESSAGESDRAMSZ MESSAGES_SIZE

#define BASEOFFSET_STATSDRAM 0

#define BASEOFFSET_MESSAGESDRAM STATSDRAMSZ

#define BASEOFFSET_STATSDRAM0 (BASEOFFSET_MESSAGESDRAM_KVS + (0 * STATSDRAMSZ))
#define BASEOFFSET_STATSDRAM1 (BASEOFFSET_MESSAGESDRAM_KVS + (1 * STATSDRAMSZ))
#define BASEOFFSET_STATSDRAM2 (BASEOFFSET_MESSAGESDRAM_KVS + (2 * STATSDRAMSZ))
#define BASEOFFSET_STATSDRAM3 (BASEOFFSET_MESSAGESDRAM_KVS + (3 * STATSDRAMSZ))

#define KVSOURCEDRAMSZ (KVDRAMSZ + KVDRAMWORKSPACESZ)
#define KVSOURCEDRAMSZ_KVS (KVSOURCEDRAMSZ / VECTOR_SIZE)

#define KVSTATSDRAMSZ (STATSDRAMSZ + MESSAGESDRAMSZ)

typedef unsigned int vertex_t;
#if (defined(_LARGEDATASET_1B) || defined(_LARGEDATASET_4B))
typedef unsigned long edge_t;
#else 
typedef unsigned int edge_t;
#endif 

typedef unsigned int keyy_t;
typedef unsigned int value_t;

// typedef short smalluint_t;
typedef unsigned int smalluint_t;

#ifdef ACTGRAPH_SETUP
typedef vertex_t prvertexoffset_t;
typedef edge_t bfsvertexoffset_t;
#else 
typedef edge_t prvertexoffset_t;
typedef edge_t bfsvertexoffset_t;
#endif 

#ifdef PR_ALGORITHM
typedef prvertexoffset_t xvertexoffset_t;
#else 
typedef bfsvertexoffset_t xvertexoffset_t;
#endif 

#ifdef FPGA_IMPL
#ifdef FORCDFINISH
typedef unsigned int dramsz_dtype;
typedef unsigned int kvbuffersz_dtype;
#else 
typedef ap_uint<30> dramsz_dtype;
typedef ap_uint<16> kvbuffersz_dtype;
#endif 
#else 
typedef unsigned int dramsz_dtype;
typedef unsigned int kvbuffersz_dtype;
#endif 

/* typedef struct {
	keyy_t key;
	value_t value;
} keyvalue_t; */
typedef struct {
	unsigned int key;
	unsigned int value;
} keyvalue_t;

typedef struct {
	// vertex_t vid;
	vertex_t outdegree;
} vertexprop_t;

typedef struct {
	keyy_t dstvid;
} edgeprop1_t;

typedef struct {
	keyy_t dstvid;
	keyy_t srcvid; 
} edgeprop2_t;

#ifdef _WIDEWORD
typedef ap_uint<DATAWIDTH> uint512_dt;
#else
typedef struct {
	keyvalue_t data[VECTOR_SIZE];
} uint512_dt;
#endif

typedef struct {
	unsigned int offset;
    unsigned int size;
} metadata_t;

typedef struct {
	smalluint_t offset;
    smalluint_t size;
} smallmetadata_t;

typedef struct {
	unsigned int reof;
    unsigned int weof;
} tracker_t;

typedef struct {
	unsigned int begin;
    unsigned int size;
} margin_t;

typedef struct {
	unsigned int begin;
    unsigned int end;
} margin2_t;

typedef struct {
	smalluint_t begin;
    smalluint_t size;
} smallmargin_t;

typedef struct {
    vertexprop_t data[VECTOR_SIZE];
} vertexpropset_t;

typedef struct {
	keyvalue_t data[VECTOR_SIZE];
} uint512_vec_dt;

typedef struct {
	vertex_t gvid;
	vertex_t lvid;
} lgvertex_t;

typedef struct {
	unsigned int type;
	unsigned int numedgebanks;
	unsigned int numvertexbanks;
	bool changed;
} heuristicstype_t;

typedef struct {
	keyy_t srcvid;
	keyy_t dstvid;
	value_t ew;
} smartedge_t;

typedef struct {
	unsigned int id;
	unsigned int offset;
	unsigned int size;
} block_t;

// global debugging signals
extern unsigned long globaldebugger_totalbytesreadfromfile; 
extern unsigned long globaldebugger_totalbyteswrittentofile; 
extern edge_t * globaldebugger_totalkvstats;
extern edge_t globaldebugger_totalkeyvaluesstransferredtokernel;
extern edge_t globaldebugger_totalkeyvaluesstransferredfromkernel;
#endif

