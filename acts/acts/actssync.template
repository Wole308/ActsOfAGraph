#ifdef SW 
#include <string>
#include <string.h>
#include <iostream>
#include <vector>
#include <string.h>
#include <stdio.h>
#include <ctime>
#include <functional>
#include <sys/time.h>
#include <time.h>
#include <stdlib.h>
#include <iomanip>
#include <cmath>
#include <fstream>
#endif 
#include "../../include/config_params.h"
#include "../../include/common.h"
#include "../include/actscommon.h"
#ifdef SW 
#include "../../src/utility/utility.h"
#endif 
#ifdef SW 
#include "../../acts/actsutility/actsutility.h" // CRITICAL NEWCHANGE.
#endif 
#include "actssync.h"
using namespace std;

#define NUMPIPELINES_SYNC 1 // 2 // CRITICAL FIXME. CORRECTME.
#if NUMPIPELINES_SYNC==1
#define SUP0
#endif 
#if NUMPIPELINES_SYNC==2
#define SUP0
#define SUP1
#endif

#ifdef SW
actssync::actssync(){ actsutilityobj = new actsutility(); }
actssync::~actssync(){}
#endif
#ifdef FPGA_IMPL
// actsutility * actsutilityobj = new actsutility();
#endif 

// functions (basic)
unsigned int
	#ifdef SW 
	actssync::
	#endif 
SYNC_amin(unsigned int val1, unsigned int val2){
	if(val1 < val2){ return val1; }
	else { return val2; }
}
unsigned int
	#ifdef SW 
	actssync::
	#endif 
SYNC_aplus(unsigned int val1, unsigned int val2){
	return val1 + val2;
}

// functions (bit manipulation)
unsigned int 
	#ifdef SW 
	actssync::
	#endif
SYNC_GETMASK_UINT(unsigned int index, unsigned int size){
	unsigned int A = ((1 << (size)) - 1);
	unsigned int B = A << index;
	return B;
}
unsigned int 
	#ifdef SW 
	actssync::
	#endif
SYNC_READFROM_UINT(unsigned int data, unsigned int index, unsigned int size){ 
	return (((data) & SYNC_GETMASK_UINT((index), (size))) >> (index)); 
}
void
	#ifdef SW 
	actssync::
	#endif
SYNC_WRITETO_UINT(unsigned int * data, unsigned int index, unsigned int size, unsigned int value){
	unsigned int tempdata = *data;
	unsigned int A = ((value) << (index));
	unsigned int B = (~SYNC_GETMASK_UINT((index), (size)));
	unsigned int C = ((tempdata) & (B));
	unsigned int D = (C) | A;
	*data = D;
	
	#ifdef _DEBUGMODE_KERNELPRINTS
	cout<<"WRITETO_ULONG. index: "<<index<<", size: "<<size<<", value: "<<value<<endl;
	cout<<"WRITETO_ULONG. tempdata"<<endl; actsutilityobj->ULONGTOBINARY(tempdata);
	cout<<"WRITETO_ULONG. A"<<endl; actsutilityobj->ULONGTOBINARY(A);
	cout<<"WRITETO_ULONG. B (~mask)"<<endl; actsutilityobj->ULONGTOBINARY(B);
	cout<<"WRITETO_ULONG. C"<<endl; actsutilityobj->ULONGTOBINARY(C);
	cout<<"WRITETO_ULONG. D (result)"<<endl; actsutilityobj->ULONGTOBINARY(D);
	#endif
	return; 
}

// functions (converters)
keyvalue_t 
	#ifdef SW 
	actssync::
	#endif 
SYNC_GETKV(keyvalue_buffer_t data){
	#pragma HLS INLINE
	keyvalue_t res; 
	#ifdef _WIDEWORD
	res.key = data.range(SIZEOF_KEY - 1, 0);
	res.value = data.range(SIZEOF_KEY + SIZEOF_VALUE - 1, SIZEOF_KEY);
	#else 
	res.key = data.key;
	res.value = data.value;	
	#endif 
	return res;
}
keyvalue_buffer_t 
	#ifdef SW 
	actssync::
	#endif 
SYNC_GETKV(keyvalue_t data){
	#pragma HLS INLINE
	keyvalue_buffer_t res;
	#ifdef _WIDEWORD
	res.range(SIZEOF_KEY - 1, 0) = data.key;
	res.range(SIZEOF_KEY + SIZEOF_VALUE - 1, SIZEOF_KEY) = data.value;
	#else
	res.key = data.key;
	res.value = data.value;	
	#endif 
	return res;
}
keyy_t 
	#ifdef SW 
	actssync::
	#endif 
SYNC_GETK(uint32_type data){
	#pragma HLS INLINE
	#ifdef _WIDEWORD
	return data.range(SIZEOF_KEY - 1, 0);
	#else
	return data;
	#endif
}
value_t 
	#ifdef SW 
	actssync::
	#endif 
SYNC_GETV(uint32_type data){
	#pragma HLS INLINE
	#ifdef _WIDEWORD
	return data.range(SIZEOF_VALUE - 1, 0);
	#else
	return data;
	#endif
}
keyvalue_t 
	#ifdef SW 
	actssync::
	#endif 
SYNC_GETKV2(keyvalue_vbuffer_t data){
	#pragma HLS INLINE
	keyvalue_t res;
	#ifdef _WIDEWORD
	res.key = data.range(SIZEOF_VDATAKEY - 1, 0); 
	res.value = data.range(SIZEOF_VDATAKEY + SIZEOF_VDATAVALUE - 1, SIZEOF_VDATAKEY);
	#else 
	res.key = data.key;
	res.value = data.value;	
	#endif 
	return res;
}
keyvalue_vbuffer_t 
	#ifdef SW 
	actssync::
	#endif 
SYNC_GETKV2(keyvalue_t data){
	#pragma HLS INLINE
	keyvalue_vbuffer_t res;
	#ifdef _WIDEWORD
	res.range(SIZEOF_VDATAKEY - 1, 0) = data.key; 
	res.range(SIZEOF_VDATAKEY + SIZEOF_VDATAVALUE - 1, SIZEOF_VDATAKEY) = data.value;
	#else
	res.key = data.key;
	res.value = data.value;
	#endif 
	return res;
}
keyy_t 
	#ifdef SW 
	actssync::
	#endif 
SYNC_GETK2(uint32_type data){
	#pragma HLS INLINE
	#ifdef _WIDEWORD
	return data.range(SIZEOF_VDATAKEY - 1, 0);
	#else
	return data;
	#endif
}
value_t 
	#ifdef SW 
	actssync::
	#endif 
SYNC_GETV2(uint32_type data){
	#pragma HLS INLINE
	#ifdef _WIDEWORD
	return data.range(SIZEOF_VDATAKEY - 1, 0);
	#else
	return data;
	#endif
}
uint32_type 
	#ifdef SW 
	actssync::
	#endif 
convertvmasktouint32(unitBRAMwidth_type vmask[BLOCKRAM_SIZE], unsigned int index){
	uint32_type res;
	#ifdef _WIDEWORD
	{%for v in context['16_seq']%}
	res.range({{1 * ((v * 2) + 1) - 1}}, {{(v * 2) * 1}}) = vmask[index].data[{{v}}].key;
	res.range({{1 * (((v * 2) + 1) + 1) - 1}}, {{(v * 2 + 1) * 1}}) = vmask[index].data[{{v}}].value;
	{%endfor%}
	#else 
	{%for v in context['16_seq']%}
	SYNC_WRITETO_UINT(&res, {{v*2}}, 1, vmask[index].data[{{v}}].key);
	SYNC_WRITETO_UINT(&res, {{v*2+1}}, 1, vmask[index].data[{{v}}].value);
	{%endfor%}
	#endif
	return res;
}
keyy_t 
	#ifdef SW 
	actssync::
	#endif 
SYNC_GETKEYENTRY(uint512_dt data, unsigned int v){
	#pragma HLS INLINE
	#ifdef _WIDEWORD
	return data.range(32 * ((v * 2) + 1) - 1, (v * 2) * 32);
	#else 
	return data.data[v].key;	
	#endif
}
value_t 
	#ifdef SW 
	actssync::
	#endif 
GETVALUEENTRY(uint512_dt data, unsigned int v){
	#pragma HLS INLINE
	#ifdef _WIDEWORD
	return data.range(32 * (((v * 2) + 1) + 1) - 1, (v * 2 + 1) * 32);
	#else 
	return data.data[v].value;	
	#endif
}

// functions (actssync utilities)
batch_type
	#ifdef SW 
	actssync::
	#endif 
SYNC_get_num_source_partitions(step_type currentLOP){
	analysis_type analysis_treedepth = TREE_DEPTH;
	
	if(currentLOP == 0){ currentLOP = 1; }
	batch_type pow = 1;
	for(step_type i=0; i<(currentLOP-1); i++){
	#pragma HLS LOOP_TRIPCOUNT min=0 max=analysis_treedepth avg=analysis_treedepth
		pow = pow * NUM_PARTITIONS;
	}
	return pow;
}
globalparams_t 
	#ifdef SW 
	actssync::
	#endif 
SYNC_getglobalparams(uint512_dt * kvdram){
	globalparams_t globalparams;
	#ifdef _WIDEWORD
	globalparams.ENABLE_RUNKERNELCOMMAND = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_ENABLE_RUNKERNELCOMMAND].range(31, 0);
	globalparams.ENABLE_PROCESSCOMMAND = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_ENABLE_PROCESSCOMMAND].range(31, 0);
	globalparams.ENABLE_PARTITIONCOMMAND = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_ENABLE_PARTITIONCOMMAND].range(31, 0);
	globalparams.ENABLE_APPLYUPDATESCOMMAND = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_ENABLE_APPLYUPDATESCOMMAND].range(31, 0);
	globalparams.ENABLE_SAVEVMASK = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_ENABLE_SAVEVMASK].range(31, 0);
	globalparams.ENABLE_SAVEVMASKP = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_ENABLE_SAVEVMASKP].range(31, 0);
	
	globalparams.BASEOFFSETKVS_MESSAGESDATA = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_BASEOFFSETKVS_MESSAGESDATA].range(31, 0);
	globalparams.BASEOFFSETKVS_EDGESDATA = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_BASEOFFSETKVS_EDGESDATA].range(31, 0);
	globalparams.BASEOFFSETKVS_VERTEXPTR = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_BASEOFFSETKVS_VERTEXPTR].range(31, 0);
	globalparams.BASEOFFSETKVS_SRCVERTICESDATA = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_BASEOFFSETKVS_SRCVERTICESDATA].range(31, 0);
	globalparams.BASEOFFSETKVS_DESTVERTICESDATA = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_BASEOFFSETKVS_DESTVERTICESDATA].range(31, 0);
	globalparams.BASEOFFSETKVS_ACTIVEVERTICES = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_BASEOFFSETKVS_ACTIVEVERTICES].range(31, 0);
	globalparams.BASEOFFSETKVS_VERTICESDATAMASK = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_BASEOFFSETKVS_VERTICESDATAMASK].range(31, 0);
	globalparams.BASEOFFSETKVS_VERTICESPARTITIONMASK = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_BASEOFFSETKVS_VERTICESPARTITIONMASK].range(31, 0);
	globalparams.BASEOFFSETKVS_STATSDRAM = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_BASEOFFSETKVS_STATSDRAM].range(31, 0);
	globalparams.BASEOFFSETKVS_EDGESSTATSDRAM = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_BASEOFFSETKVS_EDGESSTATSDRAM].range(31, 0); //
	globalparams.BASEOFFSETKVS_KVDRAM = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_BASEOFFSETKVS_KVDRAM].range(31, 0);
	globalparams.BASEOFFSETKVS_KVDRAMWORKSPACE = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_BASEOFFSETKVS_KVDRAMWORKSPACE].range(31, 0);
	
	globalparams.SIZE_MESSAGESDRAM = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_SIZE_MESSAGESDATA].range(31, 0);
	globalparams.SIZE_EDGES = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_SIZE_EDGES].range(31, 0);
	globalparams.SIZE_VERTEXPTRS = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_SIZE_VERTEXPTRS].range(31, 0);
	globalparams.SIZE_SRCVERTICESDATA = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_SIZE_SRCVERTICESDATA].range(31, 0);
	globalparams.SIZE_DESTVERTICESDATA = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_SIZE_DESTVERTICESDATA].range(31, 0);
	globalparams.SIZE_ACTIVEVERTICES = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_SIZE_ACTIVEVERTICES].range(31, 0);
	globalparams.SIZE_VERTICESDATAMASK = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_SIZE_VERTICESDATAMASK].range(31, 0);
	globalparams.SIZE_VERTICESPARTITIONMASK = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_SIZE_VERTICESPARTITIONMASK].range(31, 0);
	globalparams.SIZE_KVSTATSDRAM = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_SIZE_KVSTATSDRAM].range(31, 0);
	globalparams.SIZE_EDGESSTATSDRAM = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_SIZE_EDGESSTATSDRAM].range(31, 0); //
	globalparams.SIZE_KVDRAM = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_SIZE_KVDRAM].range(31, 0);
	globalparams.SIZE_KVDRAMWORKSPACE = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_SIZE_KVDRAMWORKSPACE].range(31, 0);
	globalparams.SIZE_REDUCE = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_SIZE_REDUCE].range(31, 0);
	globalparams.SIZE_BATCHRANGE = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_SIZE_BATCHRANGE].range(31, 0);
	globalparams.SIZE_RUN = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_SIZE_RUN].range(31, 0);

	globalparams.POW_MESSAGESDRAM = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_POW_MESSAGESDRAM].range(31, 0);
	globalparams.POW_EDGES = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_POW_EDGES].range(31, 0);
	globalparams.POW_VERTEXPTRS = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_POW_VERTEXPTRS].range(31, 0);
	globalparams.POW_SRCVERTICESDATA = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_POW_SRCVERTICESDATA].range(31, 0);
	globalparams.POW_DESTVERTICESDATA = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_POW_DESTVERTICESDATA].range(31, 0);
	globalparams.POW_ACTIVEVERTICES = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_POW_ACTIVEVERTICES].range(31, 0);
	globalparams.POW_VERTICESDATAMASK = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_POW_VERTICESDATAMASK].range(31, 0);
	globalparams.POW_KVSTATSDRAM = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_POW_KVSTATSDRAM].range(31, 0);
	globalparams.POW_EDGESSTATSDRAM = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_POW_EDGESSTATSDRAM].range(31, 0); //
	globalparams.POW_KVDRAM = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_POW_KVDRAM].range(31, 0);
	globalparams.POW_KVDRAMWORKSPACE = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_POW_KVDRAMWORKSPACE].range(31, 0);
	globalparams.POW_REDUCE = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_POW_REDUCE].range(31, 0);
	globalparams.POW_BATCHRANGE = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_POW_BATCHRANGE].range(31, 0);
	
	globalparams.ALGORITHMINFO_GRAPHITERATIONID = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_ALGORITHMINFO_GRAPHITERATIONID].range(31, 0) - 1; // NEWCHANGE. actsproc.retrievekvdramstats has incremented it
	globalparams.ALGORITHMINFO_GRAPHALGORITHMID = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_ALGORITHMINFO_GRAPHALGORITHMID].range(31, 0);

	globalparams.ACTSPARAMS_BEGINLOP = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_ACTSPARAMS_BEGINLOP].range(31, 0);
	globalparams.ACTSPARAMS_NUMLOPS = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_ACTSPARAMS_NUMLOPS].range(31, 0);
	globalparams.ACTSPARAMS_TREEDEPTH = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_ACTSPARAMS_TREEDEPTH].range(31, 0);
	globalparams.ACTSPARAMS_FINALNUMPARTITIONS = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_ACTSPARAMS_FINALNUMPARTITIONS].range(31, 0);
	globalparams.ACTSPARAMS_SRCVOFFSET = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_ACTSPARAMS_SRCVOFFSET].range(31, 0);
	globalparams.ACTSPARAMS_SRCVSIZE = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_ACTSPARAMS_SRCVSIZE].range(31, 0);
	globalparams.ACTSPARAMS_DESTVOFFSET = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_ACTSPARAMS_DESTVOFFSET].range(31, 0);
	globalparams.ACTSPARAMS_NUMEDGECHUNKSINABUFFER = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_ACTSPARAMS_NUMEDGECHUNKSINABUFFER].range(31, 0);
	
	globalparams.RETURN_RETURNVALUES = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_RETURN_RETURNVALUES].range(31, 0);
	#else 
	globalparams.ENABLE_RUNKERNELCOMMAND = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_ENABLE_RUNKERNELCOMMAND].data[0].key;
	globalparams.ENABLE_PROCESSCOMMAND = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_ENABLE_PROCESSCOMMAND].data[0].key;
	globalparams.ENABLE_PARTITIONCOMMAND = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_ENABLE_PARTITIONCOMMAND].data[0].key;
	globalparams.ENABLE_APPLYUPDATESCOMMAND = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_ENABLE_APPLYUPDATESCOMMAND].data[0].key;
	globalparams.ENABLE_SAVEVMASK = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_ENABLE_SAVEVMASK].data[0].key;
	globalparams.ENABLE_SAVEVMASKP = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_ENABLE_SAVEVMASKP].data[0].key;

	globalparams.BASEOFFSETKVS_MESSAGESDATA = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_BASEOFFSETKVS_MESSAGESDATA].data[0].key;
	globalparams.BASEOFFSETKVS_EDGESDATA = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_BASEOFFSETKVS_EDGESDATA].data[0].key;
	globalparams.BASEOFFSETKVS_VERTEXPTR = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_BASEOFFSETKVS_VERTEXPTR].data[0].key;
	globalparams.BASEOFFSETKVS_SRCVERTICESDATA = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_BASEOFFSETKVS_SRCVERTICESDATA].data[0].key;
	globalparams.BASEOFFSETKVS_DESTVERTICESDATA = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_BASEOFFSETKVS_DESTVERTICESDATA].data[0].key;
	globalparams.BASEOFFSETKVS_ACTIVEVERTICES = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_BASEOFFSETKVS_ACTIVEVERTICES].data[0].key;
	globalparams.BASEOFFSETKVS_VERTICESDATAMASK = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_BASEOFFSETKVS_VERTICESDATAMASK].data[0].key;
	globalparams.BASEOFFSETKVS_VERTICESPARTITIONMASK = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_BASEOFFSETKVS_VERTICESPARTITIONMASK].data[0].key;
	globalparams.BASEOFFSETKVS_STATSDRAM = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_BASEOFFSETKVS_STATSDRAM].data[0].key;
	globalparams.BASEOFFSETKVS_EDGESSTATSDRAM = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_BASEOFFSETKVS_EDGESSTATSDRAM].data[0].key;//
	globalparams.BASEOFFSETKVS_KVDRAM = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_BASEOFFSETKVS_KVDRAM].data[0].key;
	globalparams.BASEOFFSETKVS_KVDRAMWORKSPACE = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_BASEOFFSETKVS_KVDRAMWORKSPACE].data[0].key;
	
	globalparams.SIZE_MESSAGESDRAM = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_SIZE_MESSAGESDATA].data[0].key;
	globalparams.SIZE_EDGES = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_SIZE_EDGES].data[0].key;
	globalparams.SIZE_VERTEXPTRS = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_SIZE_VERTEXPTRS].data[0].key;
	globalparams.SIZE_SRCVERTICESDATA = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_SIZE_SRCVERTICESDATA].data[0].key;
	globalparams.SIZE_DESTVERTICESDATA = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_SIZE_DESTVERTICESDATA].data[0].key;
	globalparams.SIZE_ACTIVEVERTICES = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_SIZE_ACTIVEVERTICES].data[0].key;
	globalparams.SIZE_VERTICESDATAMASK = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_SIZE_VERTICESDATAMASK].data[0].key;
	globalparams.SIZE_VERTICESPARTITIONMASK = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_SIZE_VERTICESPARTITIONMASK].data[0].key;
	globalparams.SIZE_KVSTATSDRAM = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_SIZE_KVSTATSDRAM].data[0].key;
	globalparams.SIZE_EDGESSTATSDRAM = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_SIZE_EDGESSTATSDRAM].data[0].key;//
	globalparams.SIZE_KVDRAM = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_SIZE_KVDRAM].data[0].key;
	globalparams.SIZE_KVDRAMWORKSPACE = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_SIZE_KVDRAMWORKSPACE].data[0].key;
	globalparams.SIZE_REDUCE = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_SIZE_REDUCE].data[0].key;
	globalparams.SIZE_BATCHRANGE = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_SIZE_BATCHRANGE].data[0].key;
	globalparams.SIZE_RUN = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_SIZE_RUN].data[0].key;

	globalparams.POW_MESSAGESDRAM = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_POW_MESSAGESDRAM].data[0].key;
	globalparams.POW_EDGES = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_POW_EDGES].data[0].key;
	globalparams.POW_VERTEXPTRS = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_POW_VERTEXPTRS].data[0].key;
	globalparams.POW_SRCVERTICESDATA = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_POW_SRCVERTICESDATA].data[0].key;
	globalparams.POW_DESTVERTICESDATA = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_POW_DESTVERTICESDATA].data[0].key;
	globalparams.POW_ACTIVEVERTICES = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_POW_ACTIVEVERTICES].data[0].key;
	globalparams.POW_VERTICESDATAMASK = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_POW_VERTICESDATAMASK].data[0].key;
	globalparams.POW_KVSTATSDRAM = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_POW_KVSTATSDRAM].data[0].key;
	globalparams.POW_EDGESSTATSDRAM = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_POW_EDGESSTATSDRAM].data[0].key;//
	globalparams.POW_KVDRAM = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_POW_KVDRAM].data[0].key;
	globalparams.POW_KVDRAMWORKSPACE = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_POW_KVDRAMWORKSPACE].data[0].key;
	globalparams.POW_REDUCE = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_POW_REDUCE].data[0].key;
	globalparams.POW_BATCHRANGE = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_POW_BATCHRANGE].data[0].key;
	
	globalparams.ALGORITHMINFO_GRAPHITERATIONID = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_ALGORITHMINFO_GRAPHITERATIONID].data[0].key - 1; // CRITICAL NEWCHANGE. actsproc.retrievekvdramstats has incremented it
	globalparams.ALGORITHMINFO_GRAPHALGORITHMID = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_ALGORITHMINFO_GRAPHALGORITHMID].data[0].key;

	globalparams.ACTSPARAMS_BEGINLOP = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_ACTSPARAMS_BEGINLOP].data[0].key;
	globalparams.ACTSPARAMS_NUMLOPS = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_ACTSPARAMS_NUMLOPS].data[0].key;
	globalparams.ACTSPARAMS_TREEDEPTH = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_ACTSPARAMS_TREEDEPTH].data[0].key;
	globalparams.ACTSPARAMS_FINALNUMPARTITIONS = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_ACTSPARAMS_FINALNUMPARTITIONS].data[0].key;
	globalparams.ACTSPARAMS_SRCVOFFSET = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_ACTSPARAMS_SRCVOFFSET].data[0].key;
	globalparams.ACTSPARAMS_SRCVSIZE = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_ACTSPARAMS_SRCVSIZE].data[0].key;
	globalparams.ACTSPARAMS_DESTVOFFSET = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_ACTSPARAMS_DESTVOFFSET].data[0].key;
	globalparams.ACTSPARAMS_NUMEDGECHUNKSINABUFFER = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_ACTSPARAMS_NUMEDGECHUNKSINABUFFER].data[0].key;
	
	globalparams.RETURN_RETURNVALUES = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_RETURN_RETURNVALUES].data[0].key;
	#endif  
	#ifdef _DEBUGMODE_KERNELPRINTS
	actsutilityobj->printglobalparameters("actssync::SYNC_getglobalparams:: printing global parameters", globalparams);
	#endif
	return globalparams;
}
travstate_t 
	#ifdef SW 
	actssync::
	#endif 
SYNC_gettravstate(bool_type enable, uint512_dt * kvdram, globalparams_t globalparams, step_type currentLOP, batch_type sourcestatsmarker){			
	travstate_t travstate;
	if(enable == OFF){ return travstate; }
	keyvalue_t keyvalue;
	keyvalue_t nextkeyvalue;
	
	if(currentLOP == 0){ keyvalue.key = 0; }
	else if(currentLOP == 1){ keyvalue.key = 0; }
	else { 
		#ifdef _WIDEWORD
		keyvalue.key = kvdram[globalparams.BASEOFFSETKVS_STATSDRAM + sourcestatsmarker].range(31, 0); 
		keyvalue.value = kvdram[globalparams.BASEOFFSETKVS_STATSDRAM + sourcestatsmarker].range(63, 32);
		#else
		if(globalparams.BASEOFFSETKVS_STATSDRAM + sourcestatsmarker >= PADDEDKVSOURCEDRAMSZ){ cout<<"SYNC_gettravstate:: ERROR: globalparams.BASEOFFSETKVS_STATSDRAM("<<globalparams.BASEOFFSETKVS_STATSDRAM<<") + sourcestatsmarker("<<sourcestatsmarker<<") >= PADDEDKVSOURCEDRAMSZ_KVS("<<PADDEDKVSOURCEDRAMSZ_KVS<<")"<<endl; exit(EXIT_FAILURE); }
		keyvalue.key = kvdram[globalparams.BASEOFFSETKVS_STATSDRAM + sourcestatsmarker].data[0].key; 
		keyvalue.value = kvdram[globalparams.BASEOFFSETKVS_STATSDRAM + sourcestatsmarker].data[0].value; 
		#endif
	}
	
	if(currentLOP == 0){ nextkeyvalue.key = globalparams.SIZE_RUN; }
	else if(currentLOP == 1){ nextkeyvalue.key = globalparams.SIZE_RUN; }
	else { nextkeyvalue.key = keyvalue.key + keyvalue.value; }
		
	travstate.begin_kvs = keyvalue.key / VECTOR_SIZE; 
	travstate.end_kvs = (nextkeyvalue.key + (VECTOR_SIZE - 1)) / VECTOR_SIZE;
	
	travstate.size_kvs = travstate.end_kvs - travstate.begin_kvs;
	travstate.skip_kvs = SRCBUFFER_SIZE;
	travstate.i_kvs = travstate.begin_kvs;
	return travstate;	
}

// functions (accessors)
void // 
	#ifdef SW 
	actssync::
	#endif 
readvdata(bool_type enable1, bool_type enable2, uint512_dt * kvdram, batch_type dramoffset_kvs, keyvalue_vbuffer_t buffer[VDATA_PACKINGSIZE][BLOCKRAM_SIZE], unsigned int begincol, batch_type bufferoffset_kvs, buffer_type size_kvs, globalparams_t globalparams){
	#pragma HLS function_instantiate variable=kvdram
	if(enable1 == OFF || enable2 == OFF){ return; }
	analysis_type analysis_loopcount = BLOCKRAM_SIZE;
		
	READKEYVALUES2_LOOP: for (buffer_type i=0; i<size_kvs; i++){
	#pragma HLS LOOP_TRIPCOUNT min=0 max=analysis_loopcount avg=analysis_loopcount
	#pragma HLS PIPELINE II=1
		{%for v in context['VECTOR_SIZE_seq']%}
		keyvalue_t mykeyvalue{{v}};
		{%endfor%}
		
		#ifdef _WIDEWORD
		{%for v in context['VECTOR_SIZE_seq']%}
		mykeyvalue{{v}}.key = kvdram[dramoffset_kvs + i].range({{32 * ((v * 2) + 1) - 1}}, {{(v * 2) * 32}}); 
		mykeyvalue{{v}}.value = kvdram[dramoffset_kvs + i].range({{32 * (((v * 2) + 1) + 1) - 1}}, {{(v * 2 + 1) * 32}}); 
		{%endfor%}
		#else 
		{%for v in context['VECTOR_SIZE_seq']%}
		mykeyvalue{{v}}.key = kvdram[dramoffset_kvs + i].data[{{v}}].key; 
		mykeyvalue{{v}}.value = kvdram[dramoffset_kvs + i].data[{{v}}].value; 
		{%endfor%}
		#endif
		
		{%for v in context['VECTOR_SIZE_seq']%}
		buffer[begincol + {{v}}][bufferoffset_kvs + i] = SYNC_GETKV2(mykeyvalue{{v}});
		{%endfor%}
		
		#ifdef _DEBUGMODE_STATS
		actsutilityobj->globalstats_countkvsread(VECTOR_SIZE);
		#endif
	}
	#ifdef _DEBUGMODE_KERNELPRINTS
	cout<< TIMINGRESULTSCOLOR<<"readvdata:: vertices read: offset: "<<dramoffset_kvs * VECTOR_SIZE<<"-"<<(dramoffset_kvs + size_kvs) * VECTOR_SIZE<<", number of vertex datas read: "<<(size_kvs * VECTOR_SIZE * 2)<<" ("<<size_kvs * VECTOR_SIZE<<" keyvalues written)"<< RESET<<endl;
	#endif
	#ifdef _DEBUGMODE_KERNELPRINTS
	if(dramoffset_kvs >= globalparams.BASEOFFSETKVS_VERTEXPTR_ && dramoffset_kvs < globalparams.BASEOFFSETKVS_VERTEXPTR + VERTEXPTRSSZ_KVS){ cout<< TIMINGRESULTSCOLOR<<"readvdata:: vertices read: offset: "<<(dramoffset_kvs - globalparams.BASEOFFSETKVS_VERTEXPTR) * VECTOR_SIZE<<"-"<<(dramoffset_kvs + size_kvs - globalparams.BASEOFFSETKVS_VERTEXPTR) * VECTOR_SIZE<<", number of vertex datas read: "<<(size_kvs * VECTOR_SIZE * 2)<<" ("<<size_kvs * VECTOR_SIZE<<" keyvalues written)"<< RESET<<endl; }
	if(dramoffset_kvs >= globalparams.BASEOFFSETKVS_VERTICESDATA_ && dramoffset_kvs < globalparams.BASEOFFSETKVS_DESTVERTICESDATA + VERTICESDATASZ_KVS){ cout<< TIMINGRESULTSCOLOR<<"readvdata:: vertices read: offset: "<<(dramoffset_kvs - globalparams.BASEOFFSETKVS_DESTVERTICESDATA) * VECTOR_SIZE<<"-"<<(dramoffset_kvs + size_kvs - globalparams.BASEOFFSETKVS_DESTVERTICESDATA) * VECTOR_SIZE<<", number of vertex datas read: "<<(size_kvs * VECTOR_SIZE * 2)<<" ("<<size_kvs * VECTOR_SIZE<<" keyvalues written)"<< RESET<<endl; }
	#endif
	return;
}

// functions (synchronize)
value_t 
	#ifdef SW 
	actssync::
	#endif 
applyfunc(value_t vtemp, value_t res, unsigned int GraphIter, unsigned int GraphAlgo){
	value_t temp = 0;
	
	if(GraphAlgo == PAGERANK){
		// temp = vtemp + res;
		// temp = 0.5 + (1 - 0.5)*res / vdeg; // IDEAL
		temp = res;
	} else if(GraphAlgo == BFS){
		temp = res;
	} else if(GraphAlgo == SSSP){
		temp = SYNC_amin(vtemp, res);
	} else {
		temp = NAp;
	}
	return temp;
}

value_t 
	#ifdef SW 
	actssync::
	#endif 
mergefunc(value_t value1, value_t value2, unsigned int GraphAlgo){
	value_t res = 0;
	
	if(GraphAlgo == PAGERANK){
		res = value1 + value2;
	} else if(GraphAlgo == BFS){
		res = SYNC_amin(value1, value2);
	} else if(GraphAlgo == SSSP){
		res = SYNC_amin(value1, value2);
	} else {
		res = NAp;
	}
	return res;
}

{%for n in context['4_seq']%}
void
	#ifdef SW 
	actssync::
	#endif
readandsynchronize{{n+1}}(bool_type enable1, bool_type enable2, unsigned int nk, 
		{%if(n==0)%}{%for i in context['1_seq']%}uint512_dt * kvdram{{i}},{%endfor%}{%endif%}
		{%if(n==1)%}{%for i in context['2_seq']%}uint512_dt * kvdram{{i}},{%endfor%}{%endif%}
		{%if(n==2)%}{%for i in context['3_seq']%}uint512_dt * kvdram{{i}},{%endfor%}{%endif%}
		{%if(n==3)%}{%for i in context['4_seq']%}uint512_dt * kvdram{{i}},{%endfor%}{%endif%}
			keyvalue_vbuffer_t res[VDATA_PACKINGSIZE][BLOCKRAM_SIZE], batch_type dramoffset_kvs, globalparams_t globalparams){
	#pragma HLS function_instantiate variable=res
	if(enable1 == OFF || enable2 == OFF){ return; }
	#ifdef _DEBUGMODE_KERNELPRINTS_TRACE
	cout<<"readandsynchronize: readandsynchronize function called."<<endl;
	#endif 
	analysis_type analysis_loopcount = REDUCESZ / 2;
	
	buffer_type reducebuffersz = globalparams.SIZE_REDUCE / 2;
	
	{%for i in context['5_seq']%}
	{%for v in context['VECTOR_SIZE_seq']%}
	keyvalue_t keyvalue{{v}}_vault{{i}};
	{%endfor%}	
	{%endfor%}
	
	{%for i in context['4_seq']%}
	{%for v in context['VECTOR_SIZE_seq']%}
	keyvalue_t mykeyvalue{{i}}{{v}};
	{%endfor%}	
	{%endfor%}
	
	unsigned int dramoffsets_kvs[4];
	#pragma HLS ARRAY_PARTITION variable=dramoffsets_kvs complete
	for(unsigned int i=0; i<4; i++){
		if(i < nk){ dramoffsets_kvs[i] = dramoffset_kvs; }
		else { dramoffsets_kvs[i] = 0; }
	}
	
	for (buffer_type i=0; i<reducebuffersz; i++){
	#pragma HLS LOOP_TRIPCOUNT min=0 max=analysis_loopcount avg=analysis_loopcount
	#pragma HLS PIPELINE II=1
		#ifdef _WIDEWORD
		{%for v in context['VECTOR_SIZE_seq']%}
		mykeyvalue0{{v}}.key = kvdram0[dramoffsets_kvs[0] + i].range({{32 * ((v * 2) + 1) - 1}}, {{(v * 2) * 32}}); 
		mykeyvalue0{{v}}.value = kvdram0[dramoffsets_kvs[0] + i].range({{32 * (((v * 2) + 1) + 1) - 1}}, {{(v * 2 + 1) * 32}}); 
		{%endfor%}
		#else 
		{%for v in context['VECTOR_SIZE_seq']%}
		mykeyvalue0{{v}}.key = kvdram0[dramoffsets_kvs[0] + i].data[{{v}}].key; 
		mykeyvalue0{{v}}.value = kvdram0[dramoffsets_kvs[0] + i].data[{{v}}].value; 
		{%endfor%}
		#endif
		{%for v in context['VECTOR_SIZE_seq']%}
		keyvalue{{v}}_vault1 = mykeyvalue0{{v}}; 
		{%endfor%}
			
		{%for i in context['4_seq']%}
		{%if(i>0 and i<=n)%}
		
		#ifdef _WIDEWORD
		{%for v in context['VECTOR_SIZE_seq']%}
		mykeyvalue{{i}}{{v}}.key = kvdram{{i}}[dramoffsets_kvs[{{i}}] + i].range({{32 * ((v * 2) + 1) - 1}}, {{(v * 2) * 32}}); 
		mykeyvalue{{i}}{{v}}.value = kvdram{{i}}[dramoffsets_kvs[{{i}}] + i].range({{32 * (((v * 2) + 1) + 1) - 1}}, {{(v * 2 + 1) * 32}}); 
		{%endfor%}
		#else 
		{%for v in context['VECTOR_SIZE_seq']%}
		mykeyvalue{{i}}{{v}}.key = kvdram{{i}}[dramoffsets_kvs[{{i}}] + i].data[{{v}}].key; 
		mykeyvalue{{i}}{{v}}.value = kvdram{{i}}[dramoffsets_kvs[{{i}}] + i].data[{{v}}].value; 
		{%endfor%}
		#endif
		{%for v in context['VECTOR_SIZE_seq']%}
		keyvalue{{v}}_vault{{i+1}}.key = mergefunc(keyvalue{{v}}_vault{{i}}.key, mykeyvalue{{i}}{{v}}.key, globalparams.ALGORITHMINFO_GRAPHALGORITHMID);
		keyvalue{{v}}_vault{{i+1}}.value = mergefunc(keyvalue{{v}}_vault{{i}}.value, mykeyvalue{{i}}{{v}}.value, globalparams.ALGORITHMINFO_GRAPHALGORITHMID);
		{%endfor%}	
		
		{%endif%}
		{%endfor%}

		{%for v in context['VECTOR_SIZE_seq']%}
		res[{{v}}][i] = SYNC_GETKV2(keyvalue{{v}}_vault{{n+1}});
		{%endfor%}
	
		#ifdef _DEBUGMODE_KERNELPRINTS_TRACE
		{%for v in context['VECTOR_SIZE_seq']%}
		if(SYNC_GETKV2(res[{{v}}][i]).key < SYNC_GETK2(0xFFFFFFFF)){ cout<<"actvvid: "<<({{v}}*REDUCESZ + 2*i)<<endl; } 
		if(SYNC_GETKV2(res[{{v}}][i]).value < SYNC_GETV2(0xFFFFFFFF)){ cout<<"actvvid: "<<({{v}}*REDUCESZ + 2*i + 1)<<endl; } 
		{%endfor%}
		#endif
	}
	return;
}
{%endfor%}

uint32_type
	#ifdef SW 
	actssync::
	#endif
synchronizeandapply(bool_type enable1, bool_type enable2, {%for i in context['NUMSYNCTHREADS_DIV_4_seq']%}keyvalue_vbuffer_t buffer{{i}}[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],{%endfor%} keyvalue_vbuffer_t res[VDATA_PACKINGSIZE][BLOCKRAM_SIZE], keyvalue_vbuffer_t refbuffer[VDATA_PACKINGSIZE][BLOCKRAM_SIZE], unitBRAMwidth_type vmask[BLOCKRAM_SIZE], unsigned int colindex, batch_type voffset_kvs, globalparams_t globalparams){					
	uint32_type cummvmask_sp = 0;
	
	#ifndef SW_IMPL
	if(enable1 == OFF || enable2 == OFF){ return 0; }
	#ifdef _DEBUGMODE_KERNELPRINTS // _DEBUGMODE_KERNELPRINTS_TRACE //
	cout<<"synchronizeandapply: synchronize and apply function called."<<endl;
	#endif 
	analysis_type analysis_loopcount = REDUCESZ / 2;
	
	buffer_type reducebuffersz = globalparams.SIZE_REDUCE / 2;
	
	{%for i in context['NUMSYNCTHREADS_DIV_4__PLUS1_seq']%}
	{%for v in context['VECTOR_SIZE_seq']%}
	keyvalue_t keyvalue{{v}}_vault{{i}};
	{%endfor%}	
	{%endfor%}
	
	unsigned int vid[NUM_PARTITIONS][2];
	#pragma HLS ARRAY_PARTITION variable=vid complete
	
	{%for v in context['VECTOR_SIZE_seq']%}
	keyvalue_t res{{v}};
	{%endfor%}
	
	for (buffer_type i=0; i<reducebuffersz; i++){
	#pragma HLS LOOP_TRIPCOUNT min=0 max=analysis_loopcount avg=analysis_loopcount
	#pragma HLS PIPELINE II=1
		{%for v in context['VECTOR_SIZE_seq']%}	
		keyvalue_t udata{{v}} = SYNC_GETKV2(refbuffer[{{v}}][i]);
		{%endfor%}
		
		// synchronize // NEWCHANGE.
		{%if(context['NUMSYNCTHREADS_DIV_4']>0)%}
		{%for v in context['VECTOR_SIZE_seq']%}	
		keyvalue{{v}}_vault1 = SYNC_GETKV2(buffer0[{{v}}][i]); 
		{%endfor%}
		{%endif%}
			
		{%for i in context['NUMSYNCTHREADS_DIV_4_seq']%}
		{%if(i>0)%}
		{%for v in context['VECTOR_SIZE_seq']%}	
		keyvalue{{v}}_vault{{i+1}}.key = mergefunc(keyvalue{{v}}_vault{{i}}.key, SYNC_GETKV2(buffer{{i}}[{{v}}][i]).key, globalparams.ALGORITHMINFO_GRAPHALGORITHMID);
		keyvalue{{v}}_vault{{i+1}}.value = mergefunc(keyvalue{{v}}_vault{{i}}.value, SYNC_GETKV2(buffer{{i}}[{{v}}][i]).value, globalparams.ALGORITHMINFO_GRAPHALGORITHMID);
		{%endfor%}	
		{%endif%}
		{%endfor%}

		{%for v in context['VECTOR_SIZE_seq']%}	
		keyvalue_t mykeyvalue{{v}};
		mykeyvalue{{v}}.key = mergefunc(udata{{v}}.key, keyvalue{{v}}_vault{{context['NUMSYNCTHREADS_DIV_4']}}.key, globalparams.ALGORITHMINFO_GRAPHALGORITHMID);
		mykeyvalue{{v}}.value = mergefunc(udata{{v}}.value, keyvalue{{v}}_vault{{context['NUMSYNCTHREADS_DIV_4']}}.value, globalparams.ALGORITHMINFO_GRAPHALGORITHMID);
		res[{{v}}][i] = SYNC_GETKV2(mykeyvalue{{v}});
		{%endfor%}
		
		#ifdef _DEBUGMODE_KERNELPRINTS //
		{%for v in context['VECTOR_SIZE_seq']%}
		if(SYNC_GETKV2(res[{{v}}][i]).key < SYNC_GETK2(0xFFFFFFFF)){ cout<<"actvvid: "<<({{v}}*REDUCESZ + 2*i)<<endl; } 
		if(SYNC_GETKV2(res[{{v}}][i]).value < SYNC_GETV2(0xFFFFFFFF)){ cout<<"actvvid: "<<({{v}}*REDUCESZ + 2*i + 1)<<endl; } 
		{%endfor%}
		#endif
		
		// apply
		#ifdef _DEBUGMODE_KERNELPRINTS_TRACE3 // _DEBUGMODE_CHECKS2
		{%for v in context['VECTOR_SIZE_seq']%}
		vid[{{v}}][0] = voffset_kvs*VECTOR_SIZE*2 + (({{v}}*globalparams.SIZE_REDUCE) + i*2);
		vid[{{v}}][1] = voffset_kvs*VECTOR_SIZE*2 + (({{v}}*globalparams.SIZE_REDUCE) + i*2 + 1);
		{%endfor%}	
		#endif 
		
		{%for v in context['VECTOR_SIZE_seq']%}
		keyvalue_t data{{v}} = keyvalue{{v}}_vault{{context['NUMSYNCTHREADS_DIV_4']}};
		{%endfor%}	
	
		{%for v in context['VECTOR_SIZE_seq']%}
		res{{v}}.key = applyfunc(udata{{v}}.key, data{{v}}.key, globalparams.ALGORITHMINFO_GRAPHITERATIONID, globalparams.ALGORITHMINFO_GRAPHALGORITHMID);
		{%endfor%}
		{%for v in context['VECTOR_SIZE_seq']%}
		res{{v}}.value = applyfunc(udata{{v}}.value, data{{v}}.value, globalparams.ALGORITHMINFO_GRAPHITERATIONID, globalparams.ALGORITHMINFO_GRAPHALGORITHMID);
		{%endfor%}
		
		{%for v in context['VECTOR_SIZE_seq']%}
		if(res{{v}}.key != udata{{v}}.key){ vmask[i].data[colindex + {{v}}].key = 1; } else { vmask[i].data[colindex + {{v}}].key = 0; }
		if(res{{v}}.value != udata{{v}}.value){ vmask[i].data[colindex + {{v}}].value = 1; } else { vmask[i].data[colindex + {{v}}].value = 0; }
		{%endfor%}
		
		uint32_type mask = convertvmasktouint32(vmask, i);
		cummvmask_sp = cummvmask_sp | mask;
		
		#ifdef _DEBUGMODE_KERNELPRINTS_TRACE3	
		{%for v in context['VECTOR_SIZE_seq']%}
		if(false){ cout<<"SYNC AND APPLY FUNC SEEN @ (vid1: "<<vid[{{v}}][0]<<" & vid2: "<<vid[{{v}}][1]<<"): res{{v}}.key: "<<res{{v}}.key<<", res{{v}}.value: "<<res{{v}}.value<<": udata{{v}}.key: "<<udata{{v}}.key<<", udata{{v}}.value: "<<udata{{v}}.value<<", data{{v}}.key: "<<data{{v}}.key<<", data{{v}}.value: "<<data{{v}}.value<<endl; }
		if(res{{v}}.key != udata{{v}}.key){ cout<<"synchronizeandapply: vid[{{v}}][0]: "<<vid[{{v}}][0]<<", vmask["<<i<<"].data["<<colindex + {{v}}<<"].key: "<<vmask[i].data[colindex + {{v}}].key<<", cummvmask_sp: "<<cummvmask_sp<<endl; }
		if(res{{v}}.value != udata{{v}}.value){ cout<<"synchronizeandapply: vid[{{v}}][1]: "<<vid[{{v}}][1]<<", vmask["<<i<<"].data["<<colindex + {{v}}<<"].value: "<<vmask[i].data[colindex + {{v}}].value<<", cummvmask_sp: "<<cummvmask_sp<<endl; }
		{%endfor%}
		#endif
		#ifdef _DEBUGMODE_STATS
		{%for v in context['VECTOR_SIZE_seq']%}
		if(res{{v}}.key != udata{{v}}.key){ actsutilityobj->globalstats_countactvvsseen(1); }
		if(res{{v}}.value != udata{{v}}.value){ actsutilityobj->globalstats_countactvvsseen(1); }
		{%endfor%}
		#endif
	}
	#endif
	return cummvmask_sp;
}

void
	#ifdef SW 
	actssync::
	#endif
spreadvdata(bool_type enable1, bool_type enable2, keyvalue_vbuffer_t source[VDATA_PACKINGSIZE][BLOCKRAM_SIZE], {%for i in context['NUMSYNCTHREADS_DIV_4_seq']%}keyvalue_vbuffer_t buffer{{i}}[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],{%endfor%} globalparams_t globalparams){
	#pragma HLS function_instantiate variable=source
	if(enable1 == OFF || enable2 == OFF){ return; }
	#ifdef _DEBUGMODE_KERNELPRINTS_TRACE
	cout<<"spreadvdata: spread (vdata) function called."<<endl;
	#endif 
	analysis_type analysis_loopcount = REDUCESZ / 2;
	
	buffer_type reducebuffersz = globalparams.SIZE_REDUCE / 2;
	
	{%for i in context['NUMSYNCTHREADS_DIV_4__PLUS1_seq']%}
	{%for v in context['VECTOR_SIZE_seq']%}
	keyvalue_t keyvalue{{v}}_vault{{i}};
	{%endfor%}	
	{%endfor%}
	
	for (buffer_type i=0; i<reducebuffersz; i++){ // 8, 16, BLOCKRAM_SIZE
	#pragma HLS LOOP_TRIPCOUNT min=0 max=analysis_loopcount avg=analysis_loopcount
	#pragma HLS PIPELINE II=1
		{%for v in context['VECTOR_SIZE_seq']%}
		keyvalue{{v}}_vault0 = SYNC_GETKV2(source[{{v}}][i]); 
		{%endfor%}
			
		{%for i in context['NUMSYNCTHREADS_DIV_4_seq']%}
		{%for v in context['VECTOR_SIZE_seq']%}
		buffer{{i}}[{{v}}][i] = SYNC_GETKV2(keyvalue{{v}}_vault{{i}});
		keyvalue{{v}}_vault{{i+1}} = keyvalue{{v}}_vault{{i}};
		{%endfor%}	
		{%endfor%}
		
		#ifdef _DEBUGMODE_KERNELPRINTS_TRACE
		{%for v in context['VECTOR_SIZE_seq']%}
		if(SYNC_GETKV2(buffer{{context['NUMSYNCTHREADS_DIV_4']-1}}[{{v}}][i]).key < SYNC_GETK2(0xFFFFFFFF)){ cout<<"actvvid: "<<({{v}}*REDUCESZ + 2*i)<<endl; } 
		if(SYNC_GETKV2(buffer{{context['NUMSYNCTHREADS_DIV_4']-1}}[{{v}}][i]).value < SYNC_GETK2(0xFFFFFFFF)){ cout<<"actvvid: "<<({{v}}*REDUCESZ + 2*i + 1)<<endl; } 
		{%endfor%}
		#endif
	}
	return;
}

void
	#ifdef SW 
	actssync::
	#endif
spreadvmask(bool_type enable1, bool_type enable2, bool_type enable3, unitBRAMwidth_type vmask[BLOCKRAM_SIZE], {%for i in context['NUMSYNCTHREADS_DIV_4_seq']%}unitBRAMwidth_type vmask{{i}}[BLOCKRAM_SIZE],{%endfor%} globalparams_t globalparams){
	#pragma HLS INLINE OFF //
	if(enable1 == OFF || enable2 == OFF || enable3 == OFF){ return; }
	#ifdef _DEBUGMODE_KERNELPRINTS_TRACE
	cout<<"spreadvmask: spread (vmask) function called."<<endl;
	#endif 
	analysis_type analysis_loopcount = BLOCKRAM_SIZE;
	
	{%for i in context['NUMSYNCTHREADS_DIV_4__PLUS2_seq']%}
	unitBRAMwidth_type vmask_vault{{i}};
	{%endfor%}
	
	for (buffer_type i=0; i<BLOCKRAM_SIZE; i++){ // 8, 16, BLOCKRAM_SIZE
	#pragma HLS LOOP_TRIPCOUNT min=0 max=analysis_loopcount avg=analysis_loopcount
	#pragma HLS PIPELINE II=1
		vmask_vault1 = vmask[i]; 
			
		{%for i in context['NUMSYNCTHREADS_DIV_4__PLUS1_seq']%}
		{%if(i>0)%}
		vmask_vault{{i+1}} = vmask_vault{{i}};
		vmask{{i-1}}[i] = vmask_vault{{i}};
		{%endif%}	
		{%endfor%}
	}
	return;
}

{%for n in context['4_seq']%}
void
	#ifdef SW 
	actssync::
	#endif
spreadandwrite{{n+1}}(bool_type enable1, bool_type enable2, bool_type enable_savevmask, bool_type enable_savevmaskp, unsigned int nk, 
		{%if(n==0)%}{%for i in context['1_seq']%}uint512_dt * kvdram{{i}},{%endfor%}{%endif%}
		{%if(n==1)%}{%for i in context['2_seq']%}uint512_dt * kvdram{{i}},{%endfor%}{%endif%}
		{%if(n==2)%}{%for i in context['3_seq']%}uint512_dt * kvdram{{i}},{%endfor%}{%endif%}
		{%if(n==3)%}{%for i in context['4_seq']%}uint512_dt * kvdram{{i}},{%endfor%}{%endif%}
			keyvalue_vbuffer_t source[VDATA_PACKINGSIZE][BLOCKRAM_SIZE], batch_type dramoffset_kvs, buffer_type vbuffer_size_kvs, 
			unitBRAMwidth_type vmask[BLOCKRAM_SIZE], batch_type vmask_offset_kvs, buffer_type vmask_size_kvs, 
			unsigned int vmaskp_offset_kvs, uint32_type vmask_p_temp[2], unsigned int GraphIter,
			globalparams_t globalparams){
	#pragma HLS function_instantiate variable=source
	#ifdef _DEBUGMODE_KERNELPRINTS_TRACE2
	cout<<"spreadandwrite{{n+1}}: spread (vdata) function called."<<endl;
	#endif 
	analysis_type analysis_loopcount = REDUCESZ / 2;
	analysis_type analysis_loopcount2 = BLOCKRAM_SIZE;
	analysis_type analysis_loopcount3 = BLOCKRAM_SIZE / 16;
	
	buffer_type reducebuffersz = globalparams.SIZE_REDUCE / 2;
	
	uint32_type tempbuffer[VDATA_PACKINGSIZE][BLOCKRAM_SIZE]; // prepare vmask variables
	#pragma HLS array_partition variable = tempbuffer
	uint32_type bitsbuffer[MAXREDUCEBUFFERSZ];
	buffer_type transfsize = vmask_size_kvs * 16;
	
	{%for i in context['5_seq']%}
	{%for v in context['VECTOR_SIZE_seq']%}
	keyvalue_t keyvalue{{v}}_vault{{i}};
	{%endfor%}	
	{%endfor%}
	
	if(enable1 == ON && enable2 == ON){
		SPREADANDSAVE_COMBINEDWITH_PREPAREVMASKS_LOOP: for (buffer_type i=0; i<reducebuffersz; i++){ // 8, 16, BLOCKRAM_SIZE
		#pragma HLS LOOP_TRIPCOUNT min=0 max=analysis_loopcount avg=analysis_loopcount
		#pragma HLS PIPELINE II=1
			// spread operation
			{%for v in context['VECTOR_SIZE_seq']%}
			keyvalue{{v}}_vault0 = SYNC_GETKV2(source[{{v}}][i]); 
			{%endfor%}
			
			#ifdef _WIDEWORD
			{%for i in context['4_seq']%}
			{%if(i<=n)%}
			{%for v in context['VECTOR_SIZE_seq']%}
			kvdram{{i}}[dramoffset_kvs + i].range({{32 * ((v * 2) + 1) - 1}}, {{(v * 2) * 32}}) = keyvalue{{v}}_vault{{i}}.key; // dramoffset_kvs
			kvdram{{i}}[dramoffset_kvs + i].range({{32 * (((v * 2) + 1) + 1) - 1}}, {{(v * 2 + 1) * 32}}) = keyvalue{{v}}_vault{{i}}.value;  // dramoffset_kvs
			keyvalue{{v}}_vault{{i+1}} = keyvalue{{v}}_vault{{i}};
			{%endfor%}
			{%endif%}
			{%endfor%}
			#else 
			{%for i in context['4_seq']%}
			{%if(i<=n)%}
			{%for v in context['VECTOR_SIZE_seq']%}
			kvdram{{i}}[dramoffset_kvs + i].data[{{v}}].key = keyvalue{{v}}_vault{{i}}.key; // dramoffset_kvs
			kvdram{{i}}[dramoffset_kvs + i].data[{{v}}].value = keyvalue{{v}}_vault{{i}}.value; // dramoffset_kvs
			keyvalue{{v}}_vault{{i+1}} = keyvalue{{v}}_vault{{i}};
			{%endfor%}
			{%endif%}
			{%endfor%}
			#endif
			
			#ifdef _DEBUGMODE_KERNELPRINTS_TRACE
			{%for v in context['VECTOR_SIZE_seq']%}
			if(SYNC_GETKEYENTRY(kvdram{{n}}[dramoffset_kvs + i], {{v}}) < SYNC_GETK2(0xFFFFFFFF)){ cout<<"actvvid: "<<({{v}}*REDUCESZ + 2*i)<<endl; } 
			if(GETVALUEENTRY(kvdram{{n}}[dramoffset_kvs + i], {{v}}) < SYNC_GETV2(0xFFFFFFFF)){ cout<<"actvvid: "<<({{v}}*REDUCESZ + 2*i + 1)<<endl; } 
			{%endfor%}
			#endif
			
			// combined with prepare vmask operation
			unsigned int X = i % 16; // AUTOMATEME.
			unsigned int Y = i / 16;
		
			#ifdef _WIDEWORD
			{%for v in context['BRAMwidth_seq']%}
			tempbuffer[X][Y].range({{1 * ((v * 2) + 1) - 1}}, {{(v * 2) * 1}}) = vmask[i].data[{{v}}].key;
			tempbuffer[X][Y].range({{1 * (((v * 2) + 1) + 1) - 1}}, {{(v * 2 + 1) * 1}}) = vmask[i].data[{{v}}].value;
			{%endfor%}
			#else
			{%for v in context['16_seq']%}
			SYNC_WRITETO_UINT(&tempbuffer[X][Y], {{v*2}}, 1, vmask[i].data[{{v}}].key);
			SYNC_WRITETO_UINT(&tempbuffer[X][Y], {{v*2+1}}, 1, vmask[i].data[{{v}}].value);
			{%endfor%}
			#endif
		}
		
		if(enable_savevmask == ON){
			SAVEVMASKS_LOOP: for(buffer_type i=0; i<vmask_size_kvs; i++){
			#pragma HLS LOOP_TRIPCOUNT min=0 max=analysis_loopcount3 avg=analysis_loopcount3
			#pragma HLS PIPELINE II=1
				#ifdef _WIDEWORD
				{%for i in context['4_seq']%}
				{%if(i<=n)%}
				{%for v in context['8_seq']%}
				kvdram{{i}}[vmask_offset_kvs + i].range({{32 * ((v * 2) + 1) - 1}}, {{(v * 2) * 32}}) = tempbuffer[{{2*v}}][i]; // vmask_offset_kvs
				kvdram{{i}}[vmask_offset_kvs + i].range({{32 * (((v * 2) + 1) + 1) - 1}}, {{(v * 2 + 1) * 32}}) = tempbuffer[{{2*v+1}}][i];  // vmask_offset_kvs
				{%endfor%}
				{%endif%}
				{%endfor%}
				#else 
				{%for i in context['4_seq']%}
				{%if(i<=n)%}
				{%for v in context['VECTOR_SIZE_seq']%}
				kvdram{{i}}[vmask_offset_kvs + i].data[{{v}}].key = tempbuffer[{{2*v}}][i]; // vmask_offset_kvs
				kvdram{{i}}[vmask_offset_kvs + i].data[{{v}}].value = tempbuffer[{{2*v+1}}][i];  // vmask_offset_kvs
				{%endfor%}
				{%endif%}
				{%endfor%}
				#endif 
				
				#ifdef _DEBUGMODE_STATS
				actsutilityobj->globalstats_countkvswritten(VECTOR_SIZE);
				#endif
			}
		}
	}
	
	// savevmaskp
	if(enable_savevmaskp == ON){
		uint32_type vmask_p = 0;
		if(enable1 == ON && enable2 == ON){ vmask_p = vmask_p_temp[0] | vmask_p_temp[1]; }
		#ifdef _WIDEWORD
		{%for i in context['4_seq']%}
		{%if(i<=n)%}
		kvdram{{i}}[vmaskp_offset_kvs].range(31, 0) = vmask_p; // vmaskp_offset_kvs
		// kvdram{{i}}[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_ALGORITHMINFO_GRAPHITERATIONID].range(31, 0) = GraphIter; /////////// NEWCHANGE. ACCELERATEME.
		{%endif%}
		{%endfor%}
		#else
		{%for i in context['4_seq']%}
		{%if(i<=n)%}
		kvdram{{i}}[vmaskp_offset_kvs].data[0].key = vmask_p; // vmaskp_offset_kvs
		// kvdram{{i}}[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_ALGORITHMINFO_GRAPHITERATIONID].data[0].key = GraphIter; //////////////// NEWCHANGE. ACCELERATEME.
		{%endif%}
		{%endfor%}
		#endif
	}
	
	/* {%for i in context['4_seq']%}
	{%if(i<=n)%}
	kvdram{{i}}[BASEOFFSET_MESSAGESDATA_KVS + globalparams.ALGORITHMINFO_GRAPHITERATIONID].data[0].key = GraphIter; //////////////// NEWCHANGE.
	{%endif%}
	{%endfor%} */
	return;
}
{%endfor%}

{%for n in context['4_seq']%}
void
	#ifdef SW 
	actssync::
	#endif
spreadandwrite{{n+1}}(bool_type enable1, bool_type enable2, bool_type enable_savevmask, bool_type enable_savevmaskp, unsigned int nk, uint512_dt * vdram, 
		{%if(n==0)%}{%for i in context['1_seq']%}uint512_dt * kvdram{{i}},{%endfor%}{%endif%}
		{%if(n==1)%}{%for i in context['2_seq']%}uint512_dt * kvdram{{i}},{%endfor%}{%endif%}
		{%if(n==2)%}{%for i in context['3_seq']%}uint512_dt * kvdram{{i}},{%endfor%}{%endif%}
		{%if(n==3)%}{%for i in context['4_seq']%}uint512_dt * kvdram{{i}},{%endfor%}{%endif%}
			keyvalue_vbuffer_t source[VDATA_PACKINGSIZE][BLOCKRAM_SIZE], batch_type vdramoffset_kvs, batch_type dramoffset_kvs, buffer_type vbuffer_size_kvs, 
			unitBRAMwidth_type vmask[BLOCKRAM_SIZE], batch_type vmask_offset_kvs, buffer_type vmask_size_kvs, 
			unsigned int vmaskp_offset_kvs, uint32_type vmask_p_temp[2], unsigned int GraphIter,
			globalparams_t globalparams){
	#pragma HLS function_instantiate variable=source
	#ifdef _DEBUGMODE_KERNELPRINTS_TRACE2
	cout<<"spreadandwrite{{n+1}}: spread and write function called."<<endl;
	#endif 
	analysis_type analysis_loopcount = REDUCESZ / 2;
	analysis_type analysis_loopcount2 = BLOCKRAM_SIZE;
	analysis_type analysis_loopcount3 = BLOCKRAM_SIZE / 16;
	
	buffer_type reducebuffersz = globalparams.SIZE_REDUCE / 2;
	
	uint32_type tempbuffer[VDATA_PACKINGSIZE][BLOCKRAM_SIZE]; // prepare vmask variables
	#pragma HLS array_partition variable = tempbuffer
	uint32_type bitsbuffer[MAXREDUCEBUFFERSZ];
	buffer_type transfsize = vmask_size_kvs * 16;
	
	{%for i in context['5_seq']%}
	{%for v in context['VECTOR_SIZE_seq']%}
	keyvalue_t keyvalue{{v}}_vault{{i}};
	{%endfor%}	
	{%endfor%}
	
	if(enable1 == ON && enable2 == ON){
	SPREADANDSAVE_COMBINEDWITH_PREPAREVMASKS_LOOP: for (buffer_type i=0; i<reducebuffersz; i++){ // 8, 16, BLOCKRAM_SIZE
	#pragma HLS LOOP_TRIPCOUNT min=0 max=analysis_loopcount avg=analysis_loopcount
	#pragma HLS PIPELINE II=1
		// spread operation
		{%for v in context['VECTOR_SIZE_seq']%}
		keyvalue{{v}}_vault0 = SYNC_GETKV2(source[{{v}}][i]); 
		{%endfor%}
		
		#ifdef _WIDEWORD
		{%for i in context['4_seq']%}
		{%if(i<=n)%}
		{%for v in context['VECTOR_SIZE_seq']%}
		kvdram{{i}}[dramoffset_kvs + i].range({{32 * ((v * 2) + 1) - 1}}, {{(v * 2) * 32}}) = keyvalue{{v}}_vault{{i}}.key; // dramoffset_kvs
		kvdram{{i}}[dramoffset_kvs + i].range({{32 * (((v * 2) + 1) + 1) - 1}}, {{(v * 2 + 1) * 32}}) = keyvalue{{v}}_vault{{i}}.value;  // dramoffset_kvs
		keyvalue{{v}}_vault{{i+1}} = keyvalue{{v}}_vault{{i}};
		{%endfor%}
		{%endif%}
		{%endfor%}
		#else 
		{%for i in context['4_seq']%}
		{%if(i<=n)%}
		{%for v in context['VECTOR_SIZE_seq']%}
		kvdram{{i}}[dramoffset_kvs + i].data[{{v}}].key = keyvalue{{v}}_vault{{i}}.key; // dramoffset_kvs
		kvdram{{i}}[dramoffset_kvs + i].data[{{v}}].value = keyvalue{{v}}_vault{{i}}.value; // dramoffset_kvs
		keyvalue{{v}}_vault{{i+1}} = keyvalue{{v}}_vault{{i}};
		{%endfor%}
		{%endif%}
		{%endfor%}
		#endif 
		
		#ifdef _DEBUGMODE_KERNELPRINTS_TRACE
		{%for v in context['VECTOR_SIZE_seq']%}
		if(SYNC_GETKEYENTRY(kvdram{{n}}[dramoffset_kvs + i], {{v}}) < SYNC_GETK2(0xFFFFFFFF)){ cout<<"actvvid: "<<({{v}}*REDUCESZ + 2*i)<<endl; } 
		if(GETVALUEENTRY(kvdram{{n}}[dramoffset_kvs + i], {{v}}) < SYNC_GETV2(0xFFFFFFFF)){ cout<<"actvvid: "<<({{v}}*REDUCESZ + 2*i + 1)<<endl; } 
		{%endfor%}
		#endif
		
		// combined with save to vdram operation
		#ifdef _WIDEWORD
		{%for v in context['VECTOR_SIZE_seq']%}
		vdram[vdramoffset_kvs + i].range({{32 * ((v * 2) + 1) - 1}}, {{(v * 2) * 32}}) = keyvalue{{v}}_vault0.key; 
		vdram[vdramoffset_kvs + i].range({{32 * (((v * 2) + 1) + 1) - 1}}, {{(v * 2 + 1) * 32}}) = keyvalue{{v}}_vault0.value; 
		{%endfor%}
		#else
		{%for v in context['VECTOR_SIZE_seq']%}
		vdram[vdramoffset_kvs + i].data[{{v}}].key = keyvalue{{v}}_vault0.key;
		vdram[vdramoffset_kvs + i].data[{{v}}].value = keyvalue{{v}}_vault0.value;
		{%endfor%}
		#endif 
		
		// combined with prepare vmask operation
		unsigned int X = i % 16;
		unsigned int Y = i / 16;
	
		#ifdef _WIDEWORD
		{%for v in context['BRAMwidth_seq']%}
		tempbuffer[X][Y].range({{1 * ((v * 2) + 1) - 1}}, {{(v * 2) * 1}}) = vmask[i].data[{{v}}].key;
		tempbuffer[X][Y].range({{1 * (((v * 2) + 1) + 1) - 1}}, {{(v * 2 + 1) * 1}}) = vmask[i].data[{{v}}].value;
		{%endfor%}
		#else
		{%for v in context['16_seq']%}
		SYNC_WRITETO_UINT(&tempbuffer[X][Y], {{v*2}}, 1, vmask[i].data[{{v}}].key);
		SYNC_WRITETO_UINT(&tempbuffer[X][Y], {{v*2+1}}, 1, vmask[i].data[{{v}}].value);
		{%endfor%}
		#endif
	}
	
	if(enable_savevmask == ON){
	SAVEVMASKS_LOOP: for(buffer_type i=0; i<vmask_size_kvs; i++){
	#pragma HLS LOOP_TRIPCOUNT min=0 max=analysis_loopcount3 avg=analysis_loopcount3
	#pragma HLS PIPELINE II=1
		#ifdef _WIDEWORD
		{%for i in context['4_seq']%}
		{%if(i<=n)%}
		{%for v in context['8_seq']%}
		kvdram{{i}}[vmask_offset_kvs + i].range({{32 * ((v * 2) + 1) - 1}}, {{(v * 2) * 32}}) = tempbuffer[{{2*v}}][i];  
		kvdram{{i}}[vmask_offset_kvs + i].range({{32 * (((v * 2) + 1) + 1) - 1}}, {{(v * 2 + 1) * 32}}) = tempbuffer[{{2*v+1}}][i];
		{%endfor%}
		{%endif%}
		{%endfor%}
		#else 
		{%for i in context['4_seq']%}
		{%if(i<=n)%}
		{%for v in context['VECTOR_SIZE_seq']%}
		kvdram{{i}}[vmask_offset_kvs + i].data[{{v}}].key = tempbuffer[{{2*v}}][i];
		kvdram{{i}}[vmask_offset_kvs + i].data[{{v}}].value = tempbuffer[{{2*v+1}}][i];  
		{%endfor%}
		{%endif%}
		{%endfor%}
		#endif 
		
		#ifdef _WIDEWORD // NEWCHANGE.
		{%for v in context['8_seq']%}
		vdram[vmask_offset_kvs + i].range({{32 * ((v * 2) + 1) - 1}}, {{(v * 2) * 32}}) = tempbuffer[{{2*v}}][i]; 
		vdram[vmask_offset_kvs + i].range({{32 * (((v * 2) + 1) + 1) - 1}}, {{(v * 2 + 1) * 32}}) = tempbuffer[{{2*v+1}}][i];
		{%endfor%}
		#else
		{%for v in context['VECTOR_SIZE_seq']%}
		vdram[vmask_offset_kvs + i].data[{{v}}].key = tempbuffer[{{2*v}}][i]; 
		vdram[vmask_offset_kvs + i].data[{{v}}].value = tempbuffer[{{2*v+1}}][i]; 
		{%endfor%}
		#endif 
		
		#ifdef _DEBUGMODE_STATS
		actsutilityobj->globalstats_countkvswritten(VECTOR_SIZE);
		#endif
	}
	}
	}
	
	// savevmaskp
	if(enable_savevmaskp == ON){
		uint32_type vmask_p = 0;
		if(enable1 == ON && enable2 == ON){ vmask_p = vmask_p_temp[0] | vmask_p_temp[1]; }
		
		#ifdef _WIDEWORD
		{%for i in context['4_seq']%}
		{%if(i<=n)%}
		kvdram{{i}}[vmaskp_offset_kvs].range(31, 0) = vmask_p;
		{%endif%}
		{%endfor%}
		#else
		{%for i in context['4_seq']%}
		{%if(i<=n)%}
		kvdram{{i}}[vmaskp_offset_kvs].data[0].key = vmask_p;
		{%endif%}
		{%endfor%}
		#endif 
		
		#ifdef _WIDEWORD // NEWCHANGE.
		vdram[vmaskp_offset_kvs].range(31, 0) = vmask_p;
		#else
		vdram[vmaskp_offset_kvs].data[0].key = vmask_p;
		#endif 
	}
	return;
}
{%endfor%}

extern "C" {
void
	#if defined(SW) || not defined(HWIMPLFOR_ACTSSYNC)
	actssync::
	#endif
topkernelsync({%for i in context['SYNCTHREADS_seq']%}uint512_dt * kvdram{{i}},{%endfor%} uint512_dt * vdram){
#ifndef ACTS_1by1
{%for i in context['SYNCTHREADS_seq']%} 
#pragma HLS INTERFACE m_axi port = kvdram{{i}} offset = slave bundle = gmem{{i}}
{%endfor%}
#pragma HLS INTERFACE m_axi port = vdram offset = slave bundle = gmem{{context['NUMSYNCTHREADS']}}

{%for i in context['SYNCTHREADS_seq']%}
#pragma HLS INTERFACE s_axilite port = kvdram{{i}} bundle = control
{%endfor%}
#pragma HLS INTERFACE s_axilite port = vdram bundle = control

#pragma HLS INTERFACE s_axilite port=return bundle=control

{%for i in context['SYNCTHREADS_seq']%}
#pragma HLS DATA_PACK variable = kvdram{{i}}
{%endfor%}
#pragma HLS DATA_PACK variable = vdram
#endif 
	
	#if defined(_DEBUGMODE_KERNELPRINTS2) || defined(ALLVERTEXISACTIVE_ALGORITHM)
	cout<<">>> ====================== Light weight ACTS (SYNC: NACTS_IN_NSYNCTHREADS) Launched... size: "<<SYNC_GETKEYENTRY(kvdram0[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_SIZE_RUN], 0)<<endl; 
	#endif
	
	keyvalue_vbuffer_t refbuffer[VDATA_PACKINGSIZE][BLOCKRAM_SIZE];
	#pragma HLS array_partition variable = refbuffer
	
	travstate_t rtravstate[NUMSYNCTHREADS];
	#pragma HLS ARRAY_PARTITION variable=rtravstate complete
	
	//
	{%for i in context['NUMSYNCTHREADS_DIV_4_seq']%}
	keyvalue_vbuffer_t vbuffer{{i}}_level1[VDATA_PACKINGSIZE][BLOCKRAM_SIZE];
	#pragma HLS array_partition variable = vbuffer{{i}}_level1
	{%endfor%}
	
	{%for i in context['1_seq']%}
	keyvalue_vbuffer_t vbuffer{{i}}_level2[VDATA_PACKINGSIZE][BLOCKRAM_SIZE];
	#pragma HLS array_partition variable = vbuffer{{i}}_level2
	{%endfor%}
	
	{%for i in context['NUMSYNCTHREADS_DIV_4_seq']%}
	keyvalue_vbuffer_t vbuffer{{i}}_level3[VDATA_PACKINGSIZE][BLOCKRAM_SIZE];
	#pragma HLS array_partition variable = vbuffer{{i}}_level3
	{%endfor%}

	//
	{%for i in context['1_seq']%}
	unitBRAMwidth_type vmask{{i}}_level2[BLOCKRAM_SIZE];
	#pragma HLS DATA_PACK variable = vmask{{i}}_level2
	{%endfor%}
	
	{%for i in context['NUMSYNCTHREADS_DIV_4_seq']%}
	unitBRAMwidth_type vmask{{i}}_level3[BLOCKRAM_SIZE];
	#pragma HLS DATA_PACK variable = vmask{{i}}_level3
	{%endfor%}
	
	//
	{%for i in context['1_seq']%}
	uint32_type vmaskptemp{{i}}_level2[2];
	{%endfor%}
	
	{%for i in context['NUMSYNCTHREADS_DIV_4_seq']%}
	uint32_type vmaskptemp{{i}}_level3[2];
	{%endfor%}
	
	//
	globalparams_t globalparams[NUMSYNCTHREADS];
	#pragma HLS ARRAY_PARTITION variable=globalparams complete
	uint32_type vmask_p[BLOCKRAM_SIZE];
	
	analysis_type analysis_loop1 = 1;
	analysis_type analysis_treedepth = TREE_DEPTH;
	#ifdef _DEBUGMODE_STATS
	actsutilityobj->clearglobalvars();
	#endif
	
	// initialize other variables
	{%for i in context['1_seq']%}
	vmaskptemp{{i}}_level2[0] = 0; vmaskptemp{{i}}_level2[1] = 0;
	{%endfor%}
	{%for i in context['NUMSYNCTHREADS_DIV_4_seq']%}
	vmaskptemp{{i}}_level3[0] = 0; vmaskptemp{{i}}_level3[1] = 0;
	{%endfor%}

	globalparams[0] = SYNC_getglobalparams(kvdram0);
	globalparams_t _globalparamsv = SYNC_getglobalparams(vdram);
	{%for i in context['SYNCTHREADS_seq']%}
	{%if(i>0)%}
	globalparams[{{i}}] = globalparams[0];
	{%endif%}
	{%endfor%}
	globalparams_t _globalparams = globalparams[0];
	
	unsigned int sourcestatsmarker = 0;
	#ifdef ENABLERECURSIVEPARTITIONING
	for(unsigned int k=0; k<_globalparams.ACTSPARAMS_TREEDEPTH-1; k++)
	#else 
	for(unsigned int k=0; k<_globalparams.ACTSPARAMS_TREEDEPTH; k++)
	#endif 
	{
	#pragma HLS LOOP_TRIPCOUNT min=0 max=analysis_treedepth avg=analysis_treedepth
		sourcestatsmarker += (1 << (NUM_PARTITIONS_POW * k)); 
	}
	
	buffer_type reducebuffersz = _globalparams.SIZE_REDUCE / 2; // 512
	buffer_type vmaskbuffersz_kvs = (_globalparams.SIZE_REDUCE * VDATA_PACKINGSIZE) / 512; // 32
	
	unsigned int vreadoffset_kvs = 0;
	unsigned int vreadoffsetpp0_kvs = 0;
	unsigned int vreadoffsetpp1_kvs = vreadoffsetpp0_kvs + reducebuffersz;
	unsigned int vmaskreadoffset_kvs = 0;
	
	#ifdef ENABLERECURSIVEPARTITIONING
	step_type currentLOP = _globalparams.ACTSPARAMS_TREEDEPTH;
	batch_type num_source_partitions = SYNC_get_num_source_partitions(currentLOP);
	#else 
	step_type currentLOP = _globalparams.ACTSPARAMS_TREEDEPTH + 1; // NEWCHANGE.	
	batch_type num_source_partitions = NUM_PARTITIONS;
	#endif
	
	for(unsigned int k=0; k<num_source_partitions; k++){ vmask_p[k] = 0; }
	
	unsigned int total_num_iterations = num_source_partitions * 2;
	batch_type source_partition;
	
	bool_type enablereduce = ON;
	bool_type enablereducepp0 = OFF;
	bool_type enablereducepp1 = OFF;
	
	bool_type pp1en_readandsynchronize = ON;
	bool_type pp1en_syncandapply = ON;
	bool_type pp1en_spreadvdata = ON;
	bool_type pp1en_spreadvmask = ON;
	bool_type pp1en_spreadandwrite = ON;

	unsigned int SWITCHcount = 0;
	unsigned int begincol_vmask = 0;
	unsigned int MOVEcount = 0;
	
	#ifdef _WIDEWORD
	unsigned int GraphIter = kvdram0[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_ALGORITHMINFO_GRAPHITERATIONID].range(31, 0);
	#else 
	unsigned int GraphIter = kvdram0[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_ALGORITHMINFO_GRAPHITERATIONID].data[0].key;	
	#endif
	
	TOPKERNELSYNC_MAINLOOP: for(batch_type iterationidx=0; iterationidx<total_num_iterations; iterationidx+=NUMPIPELINES_SYNC){
	#pragma HLS LOOP_TRIPCOUNT min=0 max=analysis_loop1 avg=analysis_loop1
		enablereduce = ON; 
		unsigned int ntravszs = 0;
		{%for i in context['SYNCTHREADS_seq']%}
		rtravstate[{{i}}] = SYNC_gettravstate(ON, kvdram{{i}}, globalparams[{{i}}], currentLOP, sourcestatsmarker); // CRITICAL FIXME. ALWAYS ON.
		{%endfor%}
		for(unsigned int i = 0; i < NUMSYNCTHREADS; i++){ ntravszs += rtravstate[i].size_kvs; }
		if(ntravszs > 0){ enablereduce = ON; } else { enablereduce = OFF; }
		// cout<<"---- actssync:: iterationidx: "<<iterationidx<<", enablereduce: "<<enablereduce<<", ntravszs: "<<ntravszs<<endl;
		
		#ifdef SUP1
		if(iterationidx > 0){ pp1en_spreadvdata = ON; pp1en_spreadvmask = ON; pp1en_spreadandwrite = ON; } 
		else { pp1en_spreadvdata = OFF; pp1en_spreadvmask = OFF; pp1en_spreadandwrite = OFF; }
		#endif
	
		source_partition = iterationidx / 2;
		#ifdef _DEBUGMODE_KERNELPRINTS2
		if(enablereduce==ON && _globalparams.ENABLE_SAVEVMASK==ON){ actsutilityobj->print3("### topkernelsync:: source_partition", "iterationidx", "currentLOP", source_partition, iterationidx, currentLOP); }
		#endif
		
		enablereducepp0 = enablereduce;
		readvdata(enablereduce, ON, vdram, _globalparamsv.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffsetpp0_kvs, refbuffer, 0, 0, reducebuffersz, _globalparamsv);
		{%for i in context['NUMSYNCTHREADS_DIV_4_seq']%}
		readandsynchronize{%if(i==context['NUMSYNCTHREADS_DIV_4']-1)%}{{context['KKM']}}{%else%}4{%endif%}(enablereduce, ON, NAp, {%for j in context['4_seq']%}{%if(i*4+j<context['NUMSYNCTHREADS'])%}kvdram{{i*4+j}},{%endif%}{%endfor%} vbuffer{{i}}_level1, _globalparams.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffsetpp0_kvs, _globalparams);
		{%endfor%}	
		#ifdef SUP1
		spreadvdata(enablereducepp1, pp1en_spreadvdata, vbuffer0_level2, {%for j in context['NUMSYNCTHREADS_DIV_4_seq']%}vbuffer{{j}}_level3,{%endfor%} _globalparams);
		spreadvmask(enablereducepp1, pp1en_spreadvmask, ON, vmask0_level2, {%for j in context['NUMSYNCTHREADS_DIV_4_seq']%}vmask{{j}}_level3,{%endfor%} _globalparams); 
		if(enablereducepp1 == ON && pp1en_spreadvmask == ON){
			{%for i in context['NUMSYNCTHREADS_DIV_4_seq']%}
			vmaskptemp{{i}}_level3[0] = vmaskptemp0_level2[0]; vmaskptemp{{i}}_level3[1] = vmaskptemp0_level2[1]; 
			{%endfor%}
		}
		#endif
		
		if(SWITCHcount % 2 == 0){ begincol_vmask = 0; } else { begincol_vmask = 8; };
		vmaskptemp0_level2[SWITCHcount % 2] = synchronizeandapply(enablereduce, ON, {%for j in context['NUMSYNCTHREADS_DIV_4_seq']%}vbuffer{{j}}_level1,{%endfor%} vbuffer0_level2, refbuffer, vmask0_level2, begincol_vmask, vreadoffsetpp0_kvs, _globalparams);
		SWITCHcount += 1;
		#ifdef SUP1
		{%for i in context['NUMSYNCTHREADS_DIV_4_seq']%}
		spreadandwrite{%if(i==context['NUMSYNCTHREADS_DIV_4']-1)%}{{context['KKM']}}{%else%}4{%endif%}(enablereducepp1, pp1en_spreadandwrite, _globalparams.ENABLE_SAVEVMASK, _globalparams.ENABLE_SAVEVMASKP, NAp, {%if(i==context['NUMSYNCTHREADS_DIV_4']-1)%}vdram,{%endif%} {%for j in context['4_seq']%}{%if(i*4+j<context['NUMSYNCTHREADS'])%}kvdram{{i*4+j}},{%endif%}{%endfor%}
			vbuffer{{i}}_level3, {%if(i==context['NUMSYNCTHREADS_DIV_4']-1)%}_globalparamsv.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffsetpp0_kvs,{%endif%} _globalparams.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffsetpp1_kvs, reducebuffersz,
			vmask{{i}}_level3, _globalparams.BASEOFFSETKVS_VERTICESDATAMASK + vmaskreadoffset_kvs, vmaskbuffersz_kvs,
			_globalparams.BASEOFFSETKVS_VERTICESPARTITIONMASK + source_partition, vmaskptemp{{i}}_level3, GraphIter + 1,
			_globalparams);
		{%endfor%}
		if(pp1en_spreadandwrite == ON){ vreadoffsetpp1_kvs += reducebuffersz * NUMPIPELINES_SYNC; }
		if(pp1en_spreadandwrite == ON){ MOVEcount += 1; if(MOVEcount % 2 == 0){ vmaskreadoffset_kvs += vmaskbuffersz_kvs; sourcestatsmarker += 1; }} 
		#endif
		
		spreadvdata(enablereduce, ON, vbuffer0_level2, {%for j in context['NUMSYNCTHREADS_DIV_4_seq']%}vbuffer{{j}}_level3,{%endfor%} _globalparams);
		spreadvmask(enablereduce, ON, ON, vmask0_level2, {%for j in context['NUMSYNCTHREADS_DIV_4_seq']%}vmask{{j}}_level3,{%endfor%} _globalparams); 
		if(enablereduce == ON){ 
			{%for i in context['NUMSYNCTHREADS_DIV_4_seq']%}
			vmaskptemp{{i}}_level3[0] = vmaskptemp0_level2[0]; vmaskptemp{{i}}_level3[1] = vmaskptemp0_level2[1]; 
			{%endfor%}
		}
		#ifdef SUP1
		enablereducepp1 = enablereducepp0;	
		readvdata(enablereducepp1, pp1en_readandsynchronize, vdram, _globalparamsv.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffsetpp1_kvs, refbuffer, 0, 0, reducebuffersz, _globalparamsv); // NEWCHANGE.
		{%for i in context['NUMSYNCTHREADS_DIV_4_seq']%}
		readandsynchronize{%if(i==context['NUMSYNCTHREADS_DIV_4']-1)%}{{context['KKM']}}{%else%}4{%endif%}(enablereducepp1, pp1en_readandsynchronize, NAp, {%for j in context['4_seq']%}{%if(i*4+j<context['NUMSYNCTHREADS'])%}kvdram{{i*4+j}},{%endif%}{%endfor%} vbuffer{{i}}_level1, _globalparams.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffsetpp1_kvs, _globalparams);
		{%endfor%}	
		#endif
	
		{%for i in context['NUMSYNCTHREADS_DIV_4_seq']%}
		spreadandwrite{%if(i==context['NUMSYNCTHREADS_DIV_4']-1)%}{{context['KKM']}}{%else%}4{%endif%}(enablereduce, ON, _globalparams.ENABLE_SAVEVMASK, _globalparams.ENABLE_SAVEVMASKP, NAp, {%if(i==context['NUMSYNCTHREADS_DIV_4']-1)%}vdram,{%endif%} {%for j in context['4_seq']%}{%if(i*4+j<context['NUMSYNCTHREADS'])%}kvdram{{i*4+j}},{%endif%}{%endfor%}	
			vbuffer{{i}}_level3, {%if(i==context['NUMSYNCTHREADS_DIV_4']-1)%}_globalparamsv.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffsetpp0_kvs,{%endif%} _globalparams.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffsetpp0_kvs, reducebuffersz,
			vmask{{i}}_level3, _globalparams.BASEOFFSETKVS_VERTICESDATAMASK + vmaskreadoffset_kvs, vmaskbuffersz_kvs,
			_globalparams.BASEOFFSETKVS_VERTICESPARTITIONMASK + source_partition, vmaskptemp{{i}}_level3, GraphIter + 1,
			_globalparams);
		{%endfor%}
		vreadoffsetpp0_kvs += reducebuffersz * NUMPIPELINES_SYNC;
		MOVEcount += 1; if(MOVEcount % 2 == 0){ vmaskreadoffset_kvs += vmaskbuffersz_kvs; sourcestatsmarker += 1; } 
		#ifdef SUP1
		if(SWITCHcount % 2 == 0){ begincol_vmask = 0; } else { begincol_vmask = 8; };
		vmaskptemp0_level2[SWITCHcount % 2] = synchronizeandapply(enablereducepp1, pp1en_syncandapply, {%for j in context['NUMSYNCTHREADS_DIV_4_seq']%}vbuffer{{j}}_level1,{%endfor%} vbuffer0_level2, refbuffer, vmask0_level2, begincol_vmask, vreadoffsetpp1_kvs, _globalparams);
		if(enablereducepp1 == ON && pp1en_syncandapply == ON){ SWITCHcount += 1; }
		#endif
	}

	#if defined(_DEBUGMODE_KERNELPRINTS) && not defined(ALLVERTEXISACTIVE_ALGORITHM)
	cout<<"active partitions: ";
	for(unsigned int k=0; k<256; k++){ if(vmask_p[k]>0){ cout<<k<<", "; }}
	cout<<""<<endl;
	#endif
	#ifdef _DEBUGMODE_KERNELPRINTS2
	actsutilityobj->printglobalvars();
	#endif 
	#if defined(_DEBUGMODE_KERNELPRINTS2) || defined(_DEBUGMODE_CHECKS2)
	actsutilityobj->clearglobalvars();
	#endif
	#ifdef _DEBUGMODE_STATS
	if(_globalparams.ENABLE_SAVEVMASK == ON){ cout<< TIMINGRESULTSCOLOR <<"num active vertices for this iteration: "<<actsutilityobj->globalstats_getactvvsseen()<< RESET <<endl; }
	actsutilityobj->globalstats_setactvvsseen(0);
	#endif 
	return;
}
}






