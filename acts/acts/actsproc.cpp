#ifdef SW 
#include <string>
#include <string.h>
#include <iostream>
#include <vector>
#include <string.h>
#include <stdio.h>
#include <ctime>
#include <functional>
#include <sys/time.h>
#include <time.h>
#include <stdlib.h>
#include <iomanip>
#include <cmath>
#include <fstream>
#endif 
#include "../../include/config_params.h"
#include "../../include/common.h"
#include "../include/actscommon.h"
#ifdef SW 
#include "../../src/utility/utility.h"
#endif 
#ifdef SW 
#include "../../acts/actsutility/actsutility.h" // CRITICAL NEWCHANGE.
#endif 
#include "acts.h"
#include "actsproc.h"
using namespace std;

#ifdef ACTS_PARTITION_AND_REDUCE_STRETEGY
#define NUMPIPELINES_PARTITIONUPDATES 2 // REMOVEME.
#else 
#define NUMPIPELINES_PARTITIONUPDATES 2 //1 // REMOVEME.
#endif 
#if NUMPIPELINES_PARTITIONUPDATES==1
#define PUP0
#endif 
#if NUMPIPELINES_PARTITIONUPDATES==2
#define PUP0
#define PUP1
#endif

#ifdef SW
actsproc::actsproc(){ actsutilityobj = new actsutility(); }
actsproc::~actsproc(){}
#endif
#ifdef FPGA_IMPL // SWEMU
// actsutility * actsutilityobj = new actsutility(); // CRITICAL NEWCHANGE.
#endif

unsigned int mask_subp_is_zero;
unsigned int mask_subp_is_not_zero;
unsigned int _stages[8];
unsigned int _chkpartitions[MAX_NUM_PARTITIONS];

unsigned int 
	#ifdef SW 
	actsproc:: 
	#endif
test(uint512_dt * kvdram){
	#ifdef _WIDEWORD
	unsigned int returnme = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_BASEOFFSETKVS_VERTICESPARTITIONMASK].range(31, 0);
	#else 
	unsigned int returnme = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_BASEOFFSETKVS_VERTICESPARTITIONMASK].data[0].key;
	#endif 
	return returnme;
}

// functions (basic)
unsigned int
	#ifdef SW 
	actsproc::
	#endif 
amin(unsigned int val1, unsigned int val2){
	if(val1 < val2){ return val1; }
	else { return val2; }
}
unsigned int
	#ifdef SW 
	actsproc::
	#endif 
aplus(unsigned int val1, unsigned int val2){
	return val1 + val2;
}

// functions (allignment)
batch_type
	#ifdef SW 
	actsproc::
	#endif
allignlower_KV(batch_type val){
	batch_type fac = val / VECTOR_SIZE;
	return (fac * VECTOR_SIZE);
}
batch_type
	#ifdef SW 
	actsproc::
	#endif 
allignhigher_KV(batch_type val){
	batch_type fac = (val + (VECTOR_SIZE - 1)) / VECTOR_SIZE;
	return (fac * VECTOR_SIZE);
}

// functions (bit manipulation)
unsigned int 
	#ifdef SW 
	actsproc::
	#endif
GETMASK_UINT(unsigned int index, unsigned int size){
	unsigned int A = ((1 << (size)) - 1);
	unsigned int B = A << index;
	return B;
}
unsigned int 
	#ifdef SW 
	actsproc::
	#endif
READFROM_UINT(unsigned int data, unsigned int index, unsigned int size){ 
	return (((data) & GETMASK_UINT((index), (size))) >> (index)); 
}
void
	#ifdef SW 
	actsproc::
	#endif
WRITETO_UINT(unsigned int * data, unsigned int index, unsigned int size, unsigned int value){
	unsigned int tempdata = *data;
	unsigned int A = ((value) << (index));
	unsigned int B = (~GETMASK_UINT((index), (size)));
	unsigned int C = ((tempdata) & (B));
	unsigned int D = (C) | A;
	*data = D;
	
	#ifdef _DEBUGMODE_KERNELPRINTS
	cout<<"WRITETO_ULONG. index: "<<index<<", size: "<<size<<", value: "<<value<<endl;
	cout<<"WRITETO_ULONG. tempdata"<<endl; actsutilityobj->ULONGTOBINARY(tempdata);
	cout<<"WRITETO_ULONG. A"<<endl; actsutilityobj->ULONGTOBINARY(A);
	cout<<"WRITETO_ULONG. B (~mask)"<<endl; actsutilityobj->ULONGTOBINARY(B);
	cout<<"WRITETO_ULONG. C"<<endl; actsutilityobj->ULONGTOBINARY(C);
	cout<<"WRITETO_ULONG. D (result)"<<endl; actsutilityobj->ULONGTOBINARY(D);
	#endif
	return; 
}

// functions (converters)
keyvalue_t 
	#ifdef SW 
	actsproc::
	#endif 
GETKV(keyvalue_buffer_t data){
	#pragma HLS INLINE
	keyvalue_t res;
	#ifdef _WIDEWORD
	res.key = data.range(SIZEOF_KEY - 1, 0);
	res.value = data.range(SIZEOF_KEY + SIZEOF_VALUE - 1, SIZEOF_KEY);
	#else 
	res.key = data.key;
	res.value = data.value;	
	#endif 
	return res;
}
keyvalue_buffer_t 
	#ifdef SW 
	actsproc::
	#endif 
GETKV(keyvalue_t data){
	#pragma HLS INLINE
	keyvalue_buffer_t res;
	#ifdef _WIDEWORD
	res.range(SIZEOF_KEY - 1, 0) = data.key;
	res.range(SIZEOF_KEY + SIZEOF_VALUE - 1, SIZEOF_KEY) = data.value;
	#else
	res.key = data.key;
	res.value = data.value;	
	#endif 
	return res;
}
keyy_t 
	#ifdef SW 
	actsproc::
	#endif 
GETK(uint32_type data){
	#pragma HLS INLINE
	#ifdef _WIDEWORD
	return data.range(SIZEOF_KEY - 1, 0);
	#else
	return data;
	#endif
}
value_t 
	#ifdef SW 
	actsproc::
	#endif 
GETV(uint32_type data){
	#pragma HLS INLINE
	#ifdef _WIDEWORD
	return data.range(SIZEOF_VALUE - 1, 0);
	#else
	return data;
	#endif
}
keyvalue_t 
	#ifdef SW 
	actsproc::
	#endif 
GETKV2(keyvalue_vbuffer_t data){
	#pragma HLS INLINE
	keyvalue_t res;
	#ifdef _WIDEWORD
	res.key = data.range(SIZEOF_VDATAKEY - 1, 0); 
	res.value = data.range(SIZEOF_VDATAKEY + SIZEOF_VDATAVALUE - 1, SIZEOF_VDATAKEY);
	#else 
	res.key = data.key;
	res.value = data.value;	
	#endif 
	return res;
}
keyvalue_vbuffer_t 
	#ifdef SW 
	actsproc::
	#endif 
GETKV2(keyvalue_t data){
	#pragma HLS INLINE
	keyvalue_vbuffer_t res;
	#ifdef _WIDEWORD
	res.range(SIZEOF_VDATAKEY - 1, 0) = data.key; 
	res.range(SIZEOF_VDATAKEY + SIZEOF_VDATAVALUE - 1, SIZEOF_VDATAKEY) = data.value;
	#else
	res.key = data.key;
	res.value = data.value;
	#endif 
	return res;
}
keyy_t 
	#ifdef SW 
	actsproc::
	#endif 
GETK2(uint32_type data){
	#pragma HLS INLINE
	#ifdef _WIDEWORD
	return data.range(SIZEOF_VDATAKEY - 1, 0);
	#else
	return data;
	#endif
}
value_t 
	#ifdef SW 
	actsproc::
	#endif 
GETV2(uint32_type data){
	#pragma HLS INLINE
	#ifdef _WIDEWORD
	return data.range(SIZEOF_VDATAKEY - 1, 0);
	#else
	return data;
	#endif
}
keyy_t 
	#ifdef SW 
	actsproc::
	#endif 
GETKEYENTRY(uint512_dt data, unsigned int v){
	#pragma HLS INLINE
	#ifdef _WIDEWORD
	return data.range(32 * ((v * 2) + 1) - 1, (v * 2) * 32);
	#else 
	return data.data[v].key;	
	#endif
}
value_t 
	#ifdef SW 
	actsproc::
	#endif 
GETVTXDATA(keyvalue_vbuffer_t vbuffer[VDATA_PACKINGSIZE][BLOCKRAM_SIZE], unsigned int loc, globalparams_t globalparams){
	#pragma HLS INLINE
	value_t data = 0;
	
	#ifdef ACTSPROC_AUTOMATE_ACROSSDATASETS
	unsigned int col = loc >> globalparams.POW_REDUCE;
	unsigned int row;
	if(globalparams.POW_REDUCE == 11){
		row = loc % (1 << 11);
	} else if(globalparams.POW_REDUCE == 10){
		row = loc % (1 << 10);
	} else if(globalparams.POW_REDUCE == 9){
		row = loc % (1 << 9);
	} else if(globalparams.POW_REDUCE == 8){
		row = loc % (1 << 8);
	} else if(globalparams.POW_REDUCE == 7){
		row = loc % (1 << 7);
	} else {
		row = 0;
		#ifdef _DEBUGMODE_CHECKS2
		cout<<"GETVTXDATA: ERROR: out of selection. globalparams.POW_REDUCE: "<<globalparams.POW_REDUCE<<". exiting..."<<endl;
		exit(EXIT_FAILURE);
		#endif 
	}
	row = row / 2;
	#else 
	unsigned int col = loc / REDUCESZ; 
	unsigned int row = loc % REDUCESZ;
	row = row / 2;
	#endif 
	
	#ifdef CONFIG_SPLIT_DESTVTXS
		if(col >= NUM_PARTITIONS || row >= BLOCKRAM_SIZE){ data = 0; } // AUTOMATEME. for pagerank and sssp
		else { if(loc % 2 == 0){ data = GETKV2(vbuffer[col][row]).key; } else { data = GETKV2(vbuffer[col][row]).value; }}
	#else 
		#ifdef _DEBUGMODE_CHECKS2
		actsutilityobj->checkoutofbounds("GETVTXDATA.col", col, NUM_PARTITIONS, loc, NAp, NAp); 
		actsutilityobj->checkoutofbounds("GETVTXDATA.row", row, BLOCKRAM_SIZE, loc, NAp, NAp);
		#endif 
		if(loc % 2 == 0){ data = GETKV2(vbuffer[col][row]).key; } else { data = GETKV2(vbuffer[col][row]).value; }
	#endif 
	return data;
}
value_t 
	#ifdef SW 
	actsproc::
	#endif 
GETVTXMASK(unitBRAMwidth_type vmask[BLOCKRAM_SIZE], unsigned int loc, globalparams_t globalparams){
	#pragma HLS INLINE
	value_t data = 0;
	
	#ifdef ACTSPROC_AUTOMATE_ACROSSDATASETS
	unsigned int col = loc >> globalparams.POW_REDUCE; // CRITICAL FIXME. TOO EXPENSIVE?
	unsigned int row;
	if(globalparams.POW_REDUCE == 11){ 
		row = loc % (1 << 11);
	} else if(globalparams.POW_REDUCE == 10){
		row = loc % (1 << 10);
	} else if(globalparams.POW_REDUCE == 9){
		row = loc % (1 << 9);
	} else if(globalparams.POW_REDUCE == 8){
		row = loc % (1 << 8);
	} else {
		row = 0;
		#ifdef _DEBUGMODE_CHECKS2
		cout<<"GETVTXMASK: ERROR: out of selection. globalparams.POW_REDUCE: "<<globalparams.POW_REDUCE<<". exiting..."<<endl;
		exit(EXIT_FAILURE);
		#endif 
	}
	row = row / 2;
	#else 
	unsigned int col = loc / REDUCESZ;
	unsigned int row = loc % REDUCESZ;
	row = row / 2;
	#endif

	#ifdef CONFIG_SPLIT_DESTVTXS
		if(col >= NUM_PARTITIONS || row >= BLOCKRAM_SIZE){ data = 0; } // AUTOMATEME. for pagerank and sssp
		else { if(loc % 2 == 0){ data = vmask[row].data[col].key; } else { data = vmask[row].data[col].value; }}
	#else 
		#ifdef _DEBUGMODE_CHECKS2
		actsutilityobj->checkoutofbounds("GETVTXMASK.col", col, NUM_PARTITIONS, loc, NAp, NAp);
		actsutilityobj->checkoutofbounds("GETVTXMASK.row", row, BLOCKRAM_SIZE, loc, NAp, NAp);
	#endif 
		if(loc % 2 == 0){ data = vmask[row].data[col].key; } else { data = vmask[row].data[col].value; }
	#endif 
	return data;
}
value_t 
	#ifdef SW 
	actsproc::
	#endif 
GETVTXMASK_SUBP(unitBRAMwidth_type vmask[BLOCKRAM_SIZE], unsigned int loc, globalparams_t globalparams){
	#pragma HLS INLINE
	value_t data = 0;
	loc = loc / SUBPMASKFACTOR; // convert-to-appropriate-skip-format // NEWCHANGE.

	#ifdef ACTSPROC_AUTOMATE_ACROSSDATASETS
	unsigned int col = loc >> (globalparams.POW_REDUCE - SUBPMASKFACTOR_POW);
	unsigned int row;
	if(globalparams.POW_REDUCE == 11){ 
		row = loc % (1 << (11-SUBPMASKFACTOR_POW));
	} else if(globalparams.POW_REDUCE == 10){
		row = loc % (1 << (10-SUBPMASKFACTOR_POW));
	} else if(globalparams.POW_REDUCE == 9){
		row = loc % (1 << (9-SUBPMASKFACTOR_POW));
	} else if(globalparams.POW_REDUCE == 8){
		row = loc % (1 << (8-SUBPMASKFACTOR_POW));
	} else {
		row = 0;
		#ifdef _DEBUGMODE_CHECKS2
		cout<<"GETVTXMASK_SUBP: ERROR: out of selection. globalparams.POW_REDUCE: "<<globalparams.POW_REDUCE<<". exiting..."<<endl;
		exit(EXIT_FAILURE);
		#endif 
	}
	row = row / 2;
	#else 
	unsigned int col = loc / (REDUCESZ/SUBPMASKFACTOR); 
	unsigned int row = loc % (REDUCESZ/SUBPMASKFACTOR);
	row = row / 2;
	#endif
	
	#ifdef _DEBUGMODE_CHECKS2
	actsutilityobj->checkoutofbounds("GETVTXMASK_SUBP.col", col, NUM_PARTITIONS, loc, NAp, NAp);
	actsutilityobj->checkoutofbounds("GETVTXMASK_SUBP.row", row, BLOCKRAM_SIZE, loc, NAp, NAp);
	#endif 
	
	if(loc % 2 == 0){ data = vmask[row].data[col].key; } 
	else { data = vmask[row].data[col].value; }

	return data;
}

// functions (actsproc utilities)
batch_type
	#ifdef SW 
	actsproc::
	#endif
getskipsize(step_type currentLOP, bool_type sourceORdest, globalparams_t globalparams){
	analysis_type analysis_treedepth = TREE_DEPTH;
	batch_type result;
	
	if(currentLOP == 0){ currentLOP = 1; }
	if(sourceORdest == SOURCE){ result = globalparams.ACTSPARAMS_FINALNUMPARTITIONS; }
	else if (sourceORdest == DEST){ result = globalparams.ACTSPARAMS_FINALNUMPARTITIONS / NUM_PARTITIONS; } // FIXME. use TREE_DEPTH for less lut?
	else {}
	for(step_type i=0; i<(currentLOP-1); i++){
	#pragma HLS LOOP_TRIPCOUNT min=0 max=analysis_treedepth avg=analysis_treedepth
		result = result / NUM_PARTITIONS;
	}
	return result;
}
batch_type
	#ifdef SW 
	actsproc::
	#endif
getrangeforeachllop(globalparams_t globalparams){
	analysis_type analysis_loop1 = TREE_DEPTH;
	unsigned int range = globalparams.SIZE_BATCHRANGE;
	for(unsigned int i=0; i<globalparams.ACTSPARAMS_TREEDEPTH; i++){
	#pragma HLS LOOP_TRIPCOUNT min=0 max=analysis_loop1 avg=analysis_loop1	
		range = range / NUM_PARTITIONS;
	}
	return range;
}
buffer_type 
	#ifdef SW 
	actsproc::
	#endif 
getchunksize_kvs(buffer_type buffer_size, travstate_t travstate, buffer_type localoffset){
	buffer_type chunk_size = buffer_size;
	batch_type i = travstate.i_kvs + localoffset;
	if (i > travstate.end_kvs){ chunk_size = 0; }
	else if ((i + buffer_size) > travstate.end_kvs){ chunk_size = travstate.end_kvs - i; }
	else {}
	return chunk_size;
}
buffer_type 
	#ifdef SW 
	actsproc::
	#endif 
getpartitionwritesz(buffer_type realsize_kvs, buffer_type bramoffset_kvs){
	buffer_type size_kvs = 0;
	
	/* #ifdef ENABLE_APPROXIMATEPARTITIONWRITES // DESTBLOCKRAM_SIZE
 // SECOND SET:: (my_variable): 2, (my_base): 0
		
if(realsize_kvs >= 0 && realsize_kvs < 2){ size_kvs = 2; }
else if(realsize_kvs >= 2 && realsize_kvs < 4){ size_kvs = 4; }
else if(realsize_kvs >= 4 && realsize_kvs < 6){ size_kvs = 6; }
else if(realsize_kvs >= 6 && realsize_kvs < 8){ size_kvs = 8; }
else if(realsize_kvs >= 8 && realsize_kvs < 10){ size_kvs = 10; }
else if(realsize_kvs >= 10 && realsize_kvs < 12){ size_kvs = 12; }
else if(realsize_kvs >= 12 && realsize_kvs < 14){ size_kvs = 14; }
else if(realsize_kvs >= 14 && realsize_kvs < 16){ size_kvs = 16; }
else if(realsize_kvs >= 16 && realsize_kvs < 18){ size_kvs = 18; }
else if(realsize_kvs >= 18 && realsize_kvs < 20){ size_kvs = 20; }
else if(realsize_kvs >= 20 && realsize_kvs < 22){ size_kvs = 22; }
else if(realsize_kvs >= 22 && realsize_kvs < 24){ size_kvs = 24; }
else if(realsize_kvs >= 24 && realsize_kvs < 26){ size_kvs = 26; }
else if(realsize_kvs >= 26 && realsize_kvs < 28){ size_kvs = 28; }
else if(realsize_kvs >= 28 && realsize_kvs < 30){ size_kvs = 30; }
else if(realsize_kvs >= 30 && realsize_kvs < 32){ size_kvs = 32; }
else if(realsize_kvs >= 32 && realsize_kvs < 34){ size_kvs = 34; }
else if(realsize_kvs >= 34 && realsize_kvs < 36){ size_kvs = 36; }
else if(realsize_kvs >= 36 && realsize_kvs < 38){ size_kvs = 38; }
else if(realsize_kvs >= 38 && realsize_kvs < 40){ size_kvs = 40; }
else if(realsize_kvs >= 40 && realsize_kvs < 42){ size_kvs = 42; }
else if(realsize_kvs >= 42 && realsize_kvs < 44){ size_kvs = 44; }
else if(realsize_kvs >= 44 && realsize_kvs < 46){ size_kvs = 46; }
else if(realsize_kvs >= 46 && realsize_kvs < 48){ size_kvs = 48; }
else if(realsize_kvs >= 48 && realsize_kvs < 50){ size_kvs = 50; }
else if(realsize_kvs >= 50 && realsize_kvs < 52){ size_kvs = 52; }
else if(realsize_kvs >= 52 && realsize_kvs < 54){ size_kvs = 54; }
else if(realsize_kvs >= 54 && realsize_kvs < 56){ size_kvs = 56; }
else if(realsize_kvs >= 56 && realsize_kvs < 58){ size_kvs = 58; }
else if(realsize_kvs >= 58 && realsize_kvs < 60){ size_kvs = 60; }
else if(realsize_kvs >= 60 && realsize_kvs < 62){ size_kvs = 62; }
else if(realsize_kvs >= 62 && realsize_kvs < 64){ size_kvs = 64; }
		
 // SECOND SET:: (my_variable): 4, (my_base): 64
		
		else if(realsize_kvs >= 64 && realsize_kvs < 68){ size_kvs = 68; }
		else if(realsize_kvs >= 68 && realsize_kvs < 72){ size_kvs = 72; }
		else if(realsize_kvs >= 72 && realsize_kvs < 76){ size_kvs = 76; }
		else if(realsize_kvs >= 76 && realsize_kvs < 80){ size_kvs = 80; }
		else if(realsize_kvs >= 80 && realsize_kvs < 84){ size_kvs = 84; }
		else if(realsize_kvs >= 84 && realsize_kvs < 88){ size_kvs = 88; }
		else if(realsize_kvs >= 88 && realsize_kvs < 92){ size_kvs = 92; }
		else if(realsize_kvs >= 92 && realsize_kvs < 96){ size_kvs = 96; }
		else if(realsize_kvs >= 96 && realsize_kvs < 100){ size_kvs = 100; }
		else if(realsize_kvs >= 100 && realsize_kvs < 104){ size_kvs = 104; }
		else if(realsize_kvs >= 104 && realsize_kvs < 108){ size_kvs = 108; }
		else if(realsize_kvs >= 108 && realsize_kvs < 112){ size_kvs = 112; }
		else if(realsize_kvs >= 112 && realsize_kvs < 116){ size_kvs = 116; }
		else if(realsize_kvs >= 116 && realsize_kvs < 120){ size_kvs = 120; }
		else if(realsize_kvs >= 120 && realsize_kvs < 124){ size_kvs = 124; }
		else if(realsize_kvs >= 124 && realsize_kvs < 128){ size_kvs = 128; }
		
 // THIRD SET:: (my_variable): 8, (my_base): 128
		
		else if(realsize_kvs >= 128 && realsize_kvs < 136){ size_kvs = 136; }
		else if(realsize_kvs >= 136 && realsize_kvs < 144){ size_kvs = 144; }
		else if(realsize_kvs >= 144 && realsize_kvs < 152){ size_kvs = 152; }
		else if(realsize_kvs >= 152 && realsize_kvs < 160){ size_kvs = 160; }
		else if(realsize_kvs >= 160 && realsize_kvs < 168){ size_kvs = 168; }
		else if(realsize_kvs >= 168 && realsize_kvs < 176){ size_kvs = 176; }
		else if(realsize_kvs >= 176 && realsize_kvs < 184){ size_kvs = 184; }
		else if(realsize_kvs >= 184 && realsize_kvs < 192){ size_kvs = 192; }
		else if(realsize_kvs >= 192 && realsize_kvs < 200){ size_kvs = 200; }
		else if(realsize_kvs >= 200 && realsize_kvs < 208){ size_kvs = 208; }
		else if(realsize_kvs >= 208 && realsize_kvs < 216){ size_kvs = 216; }
		else if(realsize_kvs >= 216 && realsize_kvs < 224){ size_kvs = 224; }
		else if(realsize_kvs >= 224 && realsize_kvs < 232){ size_kvs = 232; }
		else if(realsize_kvs >= 232 && realsize_kvs < 240){ size_kvs = 240; }
		else if(realsize_kvs >= 240 && realsize_kvs < 248){ size_kvs = 248; }
		else if(realsize_kvs >= 248 && realsize_kvs < 256){ size_kvs = 256; }
		
 // FOURTH SET:: (my_variable): 16, (my_base): 256
		
		else if(realsize_kvs >= 256 && realsize_kvs < 272){ size_kvs = 272; }
		else if(realsize_kvs >= 272 && realsize_kvs < 288){ size_kvs = 288; }
		else if(realsize_kvs >= 288 && realsize_kvs < 304){ size_kvs = 304; }
		else if(realsize_kvs >= 304 && realsize_kvs < 320){ size_kvs = 320; }
		else if(realsize_kvs >= 320 && realsize_kvs < 336){ size_kvs = 336; }
		else if(realsize_kvs >= 336 && realsize_kvs < 352){ size_kvs = 352; }
		else if(realsize_kvs >= 352 && realsize_kvs < 368){ size_kvs = 368; }
		else if(realsize_kvs >= 368 && realsize_kvs < 384){ size_kvs = 384; }
		else if(realsize_kvs >= 384 && realsize_kvs < 400){ size_kvs = 400; }
		else if(realsize_kvs >= 400 && realsize_kvs < 416){ size_kvs = 416; }
		else if(realsize_kvs >= 416 && realsize_kvs < 432){ size_kvs = 432; }
		else if(realsize_kvs >= 432 && realsize_kvs < 448){ size_kvs = 448; }
		else if(realsize_kvs >= 448 && realsize_kvs < 464){ size_kvs = 464; }
		else if(realsize_kvs >= 464 && realsize_kvs < 480){ size_kvs = 480; }
		else if(realsize_kvs >= 480 && realsize_kvs < 496){ size_kvs = 496; }
		else if(realsize_kvs >= 496 && realsize_kvs < 512){ size_kvs = 512; }
		
		else if(realsize_kvs == DESTBLOCKRAM_SIZE){ size_kvs = DESTBLOCKRAM_SIZE; }
		
		else {
			cout<<"WARNING:getpartitionwritesz: should not get here. something might be wrong. realsize_kvs: "<<realsize_kvs<<", size_kvs: "<<size_kvs<<", DESTBLOCKRAM_SIZE: "<<DESTBLOCKRAM_SIZE<<endl;				 
			
			#ifdef ENABLE_PERFECTACCURACY
			#ifdef _DEBUGMODE_CHECKS2
			cout<<"WARNING:getpartitionwritesz: should not get here. something might be wrong. realsize_kvs: "<<realsize_kvs<<", size_kvs: "<<size_kvs<<", DESTBLOCKRAM_SIZE: "<<DESTBLOCKRAM_SIZE<<endl;				 
			exit(EXIT_FAILURE);
			#endif
			#else
			size_kvs = DESTBLOCKRAM_SIZE / NUM_PARTITIONS;
			#endif 
		}
		#if defined(SW) || defined(SWEMU) || defined(HW) 
		if((bramoffset_kvs + size_kvs) >= DESTBLOCKRAM_SIZE){ size_kvs = DESTBLOCKRAM_SIZE - bramoffset_kvs - 1; } 
		#endif
	#else  */
		size_kvs = realsize_kvs;
	// #endif
	return size_kvs;
}
void 
	#ifdef SW 
	actsproc::
	#endif 
calculateoffsets(keyvalue_capsule_t * buffer, buffer_type size){
	unsigned int analysis_size = NUM_PARTITIONS;
	for(buffer_type i=1; i<size; i++){ 
	#pragma HLS PIPELINE II=2
	#pragma HLS LOOP_TRIPCOUNT min=0 max=analysis_size avg=analysis_size	
		buffer[i].key = allignhigher_KV(buffer[i-1].key + buffer[i-1].value); 
	}
	return;
}
void 
	#ifdef SW 
	actsproc::
	#endif 
calculatemanyunallignedoffsets(keyvalue_capsule_t buffer[VECTOR_SIZE][MAX_NUM_PARTITIONS], buffer_type size, batch_type base, batch_type skipspacing){
	for(buffer_type i=1; i<size; i++){ 
		buffer[0][i].key = buffer[0][i-1].key + buffer[0][i-1].value + skipspacing; 
		buffer[1][i].key = buffer[1][i-1].key + buffer[1][i-1].value + skipspacing; 
		buffer[2][i].key = buffer[2][i-1].key + buffer[2][i-1].value + skipspacing; 
		buffer[3][i].key = buffer[3][i-1].key + buffer[3][i-1].value + skipspacing; 
		buffer[4][i].key = buffer[4][i-1].key + buffer[4][i-1].value + skipspacing; 
		buffer[5][i].key = buffer[5][i-1].key + buffer[5][i-1].value + skipspacing; 
		buffer[6][i].key = buffer[6][i-1].key + buffer[6][i-1].value + skipspacing; 
		buffer[7][i].key = buffer[7][i-1].key + buffer[7][i-1].value + skipspacing; 
	}
	return;
}
batch_type
	#ifdef SW 
	actsproc::
	#endif 
get_num_source_partitions(step_type currentLOP){
	analysis_type analysis_treedepth = TREE_DEPTH;
	
	if(currentLOP == 0){ currentLOP = 1; }
	batch_type pow = 1;
	for(step_type i=0; i<(currentLOP-1); i++){
	#pragma HLS LOOP_TRIPCOUNT min=0 max=analysis_treedepth avg=analysis_treedepth
		pow = pow * NUM_PARTITIONS;
	}
	return pow;
}
globalparams_t 
	#ifdef SW 
	actsproc::
	#endif 
getglobalparams(uint512_dt * kvdram){
	globalparams_t globalparams;
	#ifdef _WIDEWORD
	globalparams.ENABLE_RUNKERNELCOMMAND = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_ENABLE_RUNKERNELCOMMAND].range(31, 0);
	globalparams.ENABLE_PROCESSCOMMAND = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_ENABLE_PROCESSCOMMAND].range(31, 0);
	globalparams.ENABLE_PARTITIONCOMMAND = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_ENABLE_PARTITIONCOMMAND].range(31, 0);
	globalparams.ENABLE_APPLYUPDATESCOMMAND = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_ENABLE_APPLYUPDATESCOMMAND].range(31, 0);
	globalparams.ENABLE_SAVEVMASK = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_ENABLE_SAVEVMASK].range(31, 0);
	globalparams.ENABLE_SAVEVMASKP = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_ENABLE_SAVEVMASKP].range(31, 0);
	
	globalparams.BASEOFFSETKVS_MESSAGESDATA = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_BASEOFFSETKVS_MESSAGESDATA].range(31, 0);
	globalparams.BASEOFFSETKVS_EDGESDATA = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_BASEOFFSETKVS_EDGESDATA].range(31, 0);
	globalparams.BASEOFFSETKVS_VERTEXPTR = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_BASEOFFSETKVS_VERTEXPTR].range(31, 0);
	globalparams.BASEOFFSETKVS_SRCVERTICESDATA = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_BASEOFFSETKVS_SRCVERTICESDATA].range(31, 0);
	globalparams.BASEOFFSETKVS_DESTVERTICESDATA = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_BASEOFFSETKVS_DESTVERTICESDATA].range(31, 0);
	globalparams.BASEOFFSETKVS_ACTIVEVERTICES = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_BASEOFFSETKVS_ACTIVEVERTICES].range(31, 0);
	globalparams.BASEOFFSETKVS_VERTICESDATAMASK = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_BASEOFFSETKVS_VERTICESDATAMASK].range(31, 0);
	globalparams.BASEOFFSETKVS_VERTICESPARTITIONMASK = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_BASEOFFSETKVS_VERTICESPARTITIONMASK].range(31, 0);
	globalparams.BASEOFFSETKVS_STATSDRAM = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_BASEOFFSETKVS_STATSDRAM].range(31, 0);
	globalparams.BASEOFFSETKVS_EDGESSTATSDRAM = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_BASEOFFSETKVS_EDGESSTATSDRAM].range(31, 0); //
	globalparams.BASEOFFSETKVS_KVDRAM = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_BASEOFFSETKVS_KVDRAM].range(31, 0);
	globalparams.BASEOFFSETKVS_KVDRAMWORKSPACE = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_BASEOFFSETKVS_KVDRAMWORKSPACE].range(31, 0);
	globalparams.BASEOFFSETKVS_OTHERINFOS = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_BASEOFFSETKVS_OTHERINFOS].range(31, 0);
	
	globalparams.SIZE_MESSAGESDRAM = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_SIZE_MESSAGESDATA].range(31, 0);
	globalparams.SIZE_EDGES = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_SIZE_EDGES].range(31, 0);
	globalparams.SIZE_VERTEXPTRS = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_SIZE_VERTEXPTRS].range(31, 0);
	globalparams.SIZE_SRCVERTICESDATA = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_SIZE_SRCVERTICESDATA].range(31, 0);
	globalparams.SIZE_DESTVERTICESDATA = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_SIZE_DESTVERTICESDATA].range(31, 0);
	globalparams.SIZE_ACTIVEVERTICES = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_SIZE_ACTIVEVERTICES].range(31, 0);
	globalparams.SIZE_VERTICESDATAMASK = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_SIZE_VERTICESDATAMASK].range(31, 0);
	globalparams.SIZE_VERTICESPARTITIONMASK = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_SIZE_VERTICESPARTITIONMASK].range(31, 0);
	globalparams.SIZE_KVSTATSDRAM = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_SIZE_KVSTATSDRAM].range(31, 0);
	globalparams.SIZE_EDGESSTATSDRAM = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_SIZE_EDGESSTATSDRAM].range(31, 0); //
	globalparams.SIZE_KVDRAM = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_SIZE_KVDRAM].range(31, 0);
	globalparams.SIZE_KVDRAMWORKSPACE = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_SIZE_KVDRAMWORKSPACE].range(31, 0);
	globalparams.SIZE_OTHERINFOS = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_SIZE_OTHERINFOS].range(31, 0);
	globalparams.SIZE_REDUCE = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_SIZE_REDUCE].range(31, 0);
	globalparams.SIZE_BATCHRANGE = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_SIZE_BATCHRANGE].range(31, 0);
	globalparams.SIZE_RUN = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_SIZE_RUN].range(31, 0);

	globalparams.POW_MESSAGESDRAM = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_POW_MESSAGESDRAM].range(31, 0);
	globalparams.POW_EDGES = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_POW_EDGES].range(31, 0);
	globalparams.POW_VERTEXPTRS = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_POW_VERTEXPTRS].range(31, 0);
	globalparams.POW_SRCVERTICESDATA = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_POW_SRCVERTICESDATA].range(31, 0);
	globalparams.POW_DESTVERTICESDATA = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_POW_DESTVERTICESDATA].range(31, 0);
	globalparams.POW_ACTIVEVERTICES = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_POW_ACTIVEVERTICES].range(31, 0);
	globalparams.POW_VERTICESDATAMASK = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_POW_VERTICESDATAMASK].range(31, 0);
	globalparams.POW_KVSTATSDRAM = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_POW_KVSTATSDRAM].range(31, 0);
	globalparams.POW_EDGESSTATSDRAM = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_POW_EDGESSTATSDRAM].range(31, 0); //
	globalparams.POW_KVDRAM = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_POW_KVDRAM].range(31, 0);
	globalparams.POW_KVDRAMWORKSPACE = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_POW_KVDRAMWORKSPACE].range(31, 0);
	globalparams.POW_REDUCE = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_POW_REDUCE].range(31, 0);
	globalparams.POW_BATCHRANGE = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_POW_BATCHRANGE].range(31, 0);
	
	globalparams.ALGORITHMINFO_GRAPHITERATIONID = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_ALGORITHMINFO_GRAPHITERATIONID].range(31, 0);
	globalparams.ALGORITHMINFO_GRAPHALGORITHMID = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_ALGORITHMINFO_GRAPHALGORITHMID].range(31, 0);

	globalparams.ACTSPARAMS_BEGINLOP = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_ACTSPARAMS_BEGINLOP].range(31, 0);
	globalparams.ACTSPARAMS_NUMLOPS = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_ACTSPARAMS_NUMLOPS].range(31, 0);
	globalparams.ACTSPARAMS_TREEDEPTH = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_ACTSPARAMS_TREEDEPTH].range(31, 0);
	globalparams.ACTSPARAMS_FINALNUMPARTITIONS = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_ACTSPARAMS_FINALNUMPARTITIONS].range(31, 0);
	globalparams.ACTSPARAMS_SRCVOFFSET = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_ACTSPARAMS_SRCVOFFSET].range(31, 0);
	globalparams.ACTSPARAMS_SRCVSIZE = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_ACTSPARAMS_SRCVSIZE].range(31, 0);
	globalparams.ACTSPARAMS_DESTVOFFSET = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_ACTSPARAMS_DESTVOFFSET].range(31, 0);
	globalparams.ACTSPARAMS_NUMEDGECHUNKSINABUFFER = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_ACTSPARAMS_NUMEDGECHUNKSINABUFFER].range(31, 0);
	
	globalparams.RETURN_RETURNVALUES = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_RETURN_RETURNVALUES].range(31, 0);
	#else 
	globalparams.ENABLE_RUNKERNELCOMMAND = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_ENABLE_RUNKERNELCOMMAND].data[0].key;
	globalparams.ENABLE_PROCESSCOMMAND = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_ENABLE_PROCESSCOMMAND].data[0].key;
	globalparams.ENABLE_PARTITIONCOMMAND = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_ENABLE_PARTITIONCOMMAND].data[0].key;
	globalparams.ENABLE_APPLYUPDATESCOMMAND = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_ENABLE_APPLYUPDATESCOMMAND].data[0].key;
	globalparams.ENABLE_SAVEVMASK = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_ENABLE_SAVEVMASK].data[0].key;
	globalparams.ENABLE_SAVEVMASKP = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_ENABLE_SAVEVMASKP].data[0].key;

	globalparams.BASEOFFSETKVS_MESSAGESDATA = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_BASEOFFSETKVS_MESSAGESDATA].data[0].key;
	globalparams.BASEOFFSETKVS_EDGESDATA = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_BASEOFFSETKVS_EDGESDATA].data[0].key;
	globalparams.BASEOFFSETKVS_VERTEXPTR = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_BASEOFFSETKVS_VERTEXPTR].data[0].key;
	globalparams.BASEOFFSETKVS_SRCVERTICESDATA = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_BASEOFFSETKVS_SRCVERTICESDATA].data[0].key;
	globalparams.BASEOFFSETKVS_DESTVERTICESDATA = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_BASEOFFSETKVS_DESTVERTICESDATA].data[0].key;
	globalparams.BASEOFFSETKVS_ACTIVEVERTICES = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_BASEOFFSETKVS_ACTIVEVERTICES].data[0].key;
	globalparams.BASEOFFSETKVS_VERTICESDATAMASK = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_BASEOFFSETKVS_VERTICESDATAMASK].data[0].key;
	globalparams.BASEOFFSETKVS_VERTICESPARTITIONMASK = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_BASEOFFSETKVS_VERTICESPARTITIONMASK].data[0].key;
	globalparams.BASEOFFSETKVS_STATSDRAM = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_BASEOFFSETKVS_STATSDRAM].data[0].key;
	globalparams.BASEOFFSETKVS_EDGESSTATSDRAM = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_BASEOFFSETKVS_EDGESSTATSDRAM].data[0].key;//
	globalparams.BASEOFFSETKVS_KVDRAM = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_BASEOFFSETKVS_KVDRAM].data[0].key;
	globalparams.BASEOFFSETKVS_KVDRAMWORKSPACE = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_BASEOFFSETKVS_KVDRAMWORKSPACE].data[0].key;
	globalparams.BASEOFFSETKVS_OTHERINFOS = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_BASEOFFSETKVS_OTHERINFOS].data[0].key;
	
	globalparams.SIZE_MESSAGESDRAM = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_SIZE_MESSAGESDATA].data[0].key;
	globalparams.SIZE_EDGES = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_SIZE_EDGES].data[0].key;
	globalparams.SIZE_VERTEXPTRS = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_SIZE_VERTEXPTRS].data[0].key;
	globalparams.SIZE_SRCVERTICESDATA = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_SIZE_SRCVERTICESDATA].data[0].key;
	globalparams.SIZE_DESTVERTICESDATA = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_SIZE_DESTVERTICESDATA].data[0].key;
	globalparams.SIZE_ACTIVEVERTICES = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_SIZE_ACTIVEVERTICES].data[0].key;
	globalparams.SIZE_VERTICESDATAMASK = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_SIZE_VERTICESDATAMASK].data[0].key;
	globalparams.SIZE_VERTICESPARTITIONMASK = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_SIZE_VERTICESPARTITIONMASK].data[0].key;
	globalparams.SIZE_KVSTATSDRAM = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_SIZE_KVSTATSDRAM].data[0].key;
	globalparams.SIZE_EDGESSTATSDRAM = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_SIZE_EDGESSTATSDRAM].data[0].key;//
	globalparams.SIZE_KVDRAM = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_SIZE_KVDRAM].data[0].key;
	globalparams.SIZE_KVDRAMWORKSPACE = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_SIZE_KVDRAMWORKSPACE].data[0].key;
	globalparams.SIZE_OTHERINFOS = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_SIZE_OTHERINFOS].data[0].key;
	globalparams.SIZE_REDUCE = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_SIZE_REDUCE].data[0].key;
	globalparams.SIZE_BATCHRANGE = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_SIZE_BATCHRANGE].data[0].key;
	globalparams.SIZE_RUN = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_SIZE_RUN].data[0].key;

	globalparams.POW_MESSAGESDRAM = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_POW_MESSAGESDRAM].data[0].key;
	globalparams.POW_EDGES = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_POW_EDGES].data[0].key;
	globalparams.POW_VERTEXPTRS = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_POW_VERTEXPTRS].data[0].key;
	globalparams.POW_SRCVERTICESDATA = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_POW_SRCVERTICESDATA].data[0].key;
	globalparams.POW_DESTVERTICESDATA = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_POW_DESTVERTICESDATA].data[0].key;
	globalparams.POW_ACTIVEVERTICES = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_POW_ACTIVEVERTICES].data[0].key;
	globalparams.POW_VERTICESDATAMASK = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_POW_VERTICESDATAMASK].data[0].key;
	globalparams.POW_KVSTATSDRAM = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_POW_KVSTATSDRAM].data[0].key;
	globalparams.POW_EDGESSTATSDRAM = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_POW_EDGESSTATSDRAM].data[0].key;//
	globalparams.POW_KVDRAM = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_POW_KVDRAM].data[0].key;
	globalparams.POW_KVDRAMWORKSPACE = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_POW_KVDRAMWORKSPACE].data[0].key;
	globalparams.POW_REDUCE = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_POW_REDUCE].data[0].key;
	globalparams.POW_BATCHRANGE = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_POW_BATCHRANGE].data[0].key;
	
	globalparams.ALGORITHMINFO_GRAPHITERATIONID = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_ALGORITHMINFO_GRAPHITERATIONID].data[0].key;
	globalparams.ALGORITHMINFO_GRAPHALGORITHMID = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_ALGORITHMINFO_GRAPHALGORITHMID].data[0].key;

	globalparams.ACTSPARAMS_BEGINLOP = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_ACTSPARAMS_BEGINLOP].data[0].key;
	globalparams.ACTSPARAMS_NUMLOPS = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_ACTSPARAMS_NUMLOPS].data[0].key;
	globalparams.ACTSPARAMS_TREEDEPTH = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_ACTSPARAMS_TREEDEPTH].data[0].key;
	globalparams.ACTSPARAMS_FINALNUMPARTITIONS = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_ACTSPARAMS_FINALNUMPARTITIONS].data[0].key;
	globalparams.ACTSPARAMS_SRCVOFFSET = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_ACTSPARAMS_SRCVOFFSET].data[0].key;
	globalparams.ACTSPARAMS_SRCVSIZE = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_ACTSPARAMS_SRCVSIZE].data[0].key;
	globalparams.ACTSPARAMS_DESTVOFFSET = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_ACTSPARAMS_DESTVOFFSET].data[0].key;
	globalparams.ACTSPARAMS_NUMEDGECHUNKSINABUFFER = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_ACTSPARAMS_NUMEDGECHUNKSINABUFFER].data[0].key;
	
	globalparams.RETURN_RETURNVALUES = kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_RETURN_RETURNVALUES].data[0].key;
	#endif  
	globalparams.VARS_WORKBATCH = 0;
	
	#ifdef _DEBUGMODE_KERNELPRINTS
	actsutilityobj->printglobalparameters("actsproc::getglobalparams:: printing global parameters", globalparams);
	#endif
	return globalparams;
}
sweepparams_t 
	#ifdef SW 
	actsproc::
	#endif 
getsweepparams(globalparams_t globalparams, step_type currentLOP, batch_type source_partition){
	sweepparams_t sweepparams;
	batch_type sourceskipsize = getskipsize(currentLOP, SOURCE, globalparams);
	
	sweepparams.currentLOP = currentLOP;

	if(currentLOP == 0 || (currentLOP % 2) == 1){ sweepparams.worksourcebaseaddress_kvs = globalparams.BASEOFFSETKVS_KVDRAM; sweepparams.workdestbaseaddress_kvs = globalparams.BASEOFFSETKVS_KVDRAMWORKSPACE; }
	else { sweepparams.worksourcebaseaddress_kvs = globalparams.BASEOFFSETKVS_KVDRAMWORKSPACE; sweepparams.workdestbaseaddress_kvs = globalparams.BASEOFFSETKVS_KVDRAM; }

	unsigned int div = globalparams.SIZE_BATCHRANGE;
	analysis_type analysis_lc = TREE_DEPTH;
	for(unsigned int i=0; i<globalparams.ACTSPARAMS_TREEDEPTH; i++){
	#pragma HLS LOOP_TRIPCOUNT min=0 max=analysis_lc avg=analysis_lc	
		div = div / NUM_PARTITIONS;
	}
	
	sweepparams.upperlimit = globalparams.ACTSPARAMS_DESTVOFFSET + (source_partition * sourceskipsize * div); // POW_BATCHRANGE
	sweepparams.upperpartition = (sweepparams.upperlimit - globalparams.ACTSPARAMS_DESTVOFFSET) >> (globalparams.POW_BATCHRANGE - (NUM_PARTITIONS_POW * currentLOP)); //

	sweepparams.source_partition = source_partition;
	return sweepparams;
}
travstate_t 
	#ifdef SW 
	actsproc::
	#endif 
gettravstate(bool_type enable, uint512_dt * kvdram, globalparams_t globalparams, step_type currentLOP, batch_type sourcestatsmarker){			
	travstate_t travstate;
	if(enable == OFF){ return travstate; }
	keyvalue_t keyvalue;
	keyvalue_t nextkeyvalue;
	
	if(currentLOP == 0){ keyvalue.key = 0; }
	else if(currentLOP == 1){ keyvalue.key = 0; }
	else { 
		#if NUM_EDGE_BANKS==0
			#ifdef _WIDEWORD
			keyvalue.key = kvdram[globalparams.BASEOFFSETKVS_STATSDRAM + sourcestatsmarker].range(31, 0); 
			keyvalue.value = kvdram[globalparams.BASEOFFSETKVS_STATSDRAM + sourcestatsmarker].range(63, 32); 
			#else 
			keyvalue.key = kvdram[globalparams.BASEOFFSETKVS_STATSDRAM + sourcestatsmarker].data[0].key; 
			keyvalue.value = kvdram[globalparams.BASEOFFSETKVS_STATSDRAM + sourcestatsmarker].data[0].value; 
			#endif 
		#else 
			#ifdef _WIDEWORD
 if(globalparams.VARS_WORKBATCH == 0){
				keyvalue.key = kvdram[globalparams.BASEOFFSETKVS_STATSDRAM + sourcestatsmarker].range(31, 0); 
				keyvalue.value = kvdram[globalparams.BASEOFFSETKVS_STATSDRAM + sourcestatsmarker].range(63, 32); 
			}
else if(globalparams.VARS_WORKBATCH == 1){
				keyvalue.key = kvdram[globalparams.BASEOFFSETKVS_STATSDRAM + sourcestatsmarker].range(95, 64); 
				keyvalue.value = kvdram[globalparams.BASEOFFSETKVS_STATSDRAM + sourcestatsmarker].range(127, 96); 
			}
else if(globalparams.VARS_WORKBATCH == 2){
				keyvalue.key = kvdram[globalparams.BASEOFFSETKVS_STATSDRAM + sourcestatsmarker].range(159, 128); 
				keyvalue.value = kvdram[globalparams.BASEOFFSETKVS_STATSDRAM + sourcestatsmarker].range(191, 160); 
			}
else if(globalparams.VARS_WORKBATCH == 3){
				keyvalue.key = kvdram[globalparams.BASEOFFSETKVS_STATSDRAM + sourcestatsmarker].range(223, 192); 
				keyvalue.value = kvdram[globalparams.BASEOFFSETKVS_STATSDRAM + sourcestatsmarker].range(255, 224); 
			}
else if(globalparams.VARS_WORKBATCH == 4){
				keyvalue.key = kvdram[globalparams.BASEOFFSETKVS_STATSDRAM + sourcestatsmarker].range(287, 256); 
				keyvalue.value = kvdram[globalparams.BASEOFFSETKVS_STATSDRAM + sourcestatsmarker].range(319, 288); 
			}
else if(globalparams.VARS_WORKBATCH == 5){
				keyvalue.key = kvdram[globalparams.BASEOFFSETKVS_STATSDRAM + sourcestatsmarker].range(351, 320); 
				keyvalue.value = kvdram[globalparams.BASEOFFSETKVS_STATSDRAM + sourcestatsmarker].range(383, 352); 
			}
else if(globalparams.VARS_WORKBATCH == 6){
				keyvalue.key = kvdram[globalparams.BASEOFFSETKVS_STATSDRAM + sourcestatsmarker].range(415, 384); 
				keyvalue.value = kvdram[globalparams.BASEOFFSETKVS_STATSDRAM + sourcestatsmarker].range(447, 416); 
			}
else {
				keyvalue.key = kvdram[globalparams.BASEOFFSETKVS_STATSDRAM + sourcestatsmarker].range(479, 448); 
				keyvalue.value = kvdram[globalparams.BASEOFFSETKVS_STATSDRAM + sourcestatsmarker].range(511, 480); 
			}
			#else 
 if(globalparams.VARS_WORKBATCH == 0){
				keyvalue.key = kvdram[globalparams.BASEOFFSETKVS_STATSDRAM + sourcestatsmarker].data[0].key; 
				keyvalue.value = kvdram[globalparams.BASEOFFSETKVS_STATSDRAM + sourcestatsmarker].data[0].value; 
			}
else if(globalparams.VARS_WORKBATCH == 1){
				keyvalue.key = kvdram[globalparams.BASEOFFSETKVS_STATSDRAM + sourcestatsmarker].data[1].key; 
				keyvalue.value = kvdram[globalparams.BASEOFFSETKVS_STATSDRAM + sourcestatsmarker].data[1].value; 
			}
else if(globalparams.VARS_WORKBATCH == 2){
				keyvalue.key = kvdram[globalparams.BASEOFFSETKVS_STATSDRAM + sourcestatsmarker].data[2].key; 
				keyvalue.value = kvdram[globalparams.BASEOFFSETKVS_STATSDRAM + sourcestatsmarker].data[2].value; 
			}
else if(globalparams.VARS_WORKBATCH == 3){
				keyvalue.key = kvdram[globalparams.BASEOFFSETKVS_STATSDRAM + sourcestatsmarker].data[3].key; 
				keyvalue.value = kvdram[globalparams.BASEOFFSETKVS_STATSDRAM + sourcestatsmarker].data[3].value; 
			}
else if(globalparams.VARS_WORKBATCH == 4){
				keyvalue.key = kvdram[globalparams.BASEOFFSETKVS_STATSDRAM + sourcestatsmarker].data[4].key; 
				keyvalue.value = kvdram[globalparams.BASEOFFSETKVS_STATSDRAM + sourcestatsmarker].data[4].value; 
			}
else if(globalparams.VARS_WORKBATCH == 5){
				keyvalue.key = kvdram[globalparams.BASEOFFSETKVS_STATSDRAM + sourcestatsmarker].data[5].key; 
				keyvalue.value = kvdram[globalparams.BASEOFFSETKVS_STATSDRAM + sourcestatsmarker].data[5].value; 
			}
else if(globalparams.VARS_WORKBATCH == 6){
				keyvalue.key = kvdram[globalparams.BASEOFFSETKVS_STATSDRAM + sourcestatsmarker].data[6].key; 
				keyvalue.value = kvdram[globalparams.BASEOFFSETKVS_STATSDRAM + sourcestatsmarker].data[6].value; 
			}
else {
				keyvalue.key = kvdram[globalparams.BASEOFFSETKVS_STATSDRAM + sourcestatsmarker].data[7].key; 
				keyvalue.value = kvdram[globalparams.BASEOFFSETKVS_STATSDRAM + sourcestatsmarker].data[7].value; 
			}
			#endif
		#endif 
	}
	
	if(currentLOP == 0){ nextkeyvalue.key = globalparams.SIZE_RUN; }
	else if(currentLOP == 1){ nextkeyvalue.key = globalparams.SIZE_RUN; }
	else { nextkeyvalue.key = keyvalue.key + keyvalue.value; }
		
	travstate.begin_kvs = keyvalue.key / VECTOR_SIZE; 
	travstate.end_kvs = (nextkeyvalue.key + (VECTOR_SIZE - 1)) / VECTOR_SIZE;
	
	travstate.size_kvs = travstate.end_kvs - travstate.begin_kvs;
	travstate.skip_kvs = SRCBUFFER_SIZE;
	travstate.i_kvs = travstate.begin_kvs; 
	return travstate;	
}
void 
	#ifdef SW 
	actsproc::
	#endif 
settravstate(bool_type enable, uint512_dt * kvdram, globalparams_t globalparams, batch_type offset, unsigned int value){			
	if(enable == OFF){ return; }
	#ifdef _WIDEWORD
	kvdram[globalparams.BASEOFFSETKVS_STATSDRAM + offset].range(31, 0) = value; // 64; 
	kvdram[globalparams.BASEOFFSETKVS_STATSDRAM + offset].range(63, 32) = value; // 64;
	#else
	kvdram[globalparams.BASEOFFSETKVS_STATSDRAM + offset].data[0].key = value; // 64; 
	kvdram[globalparams.BASEOFFSETKVS_STATSDRAM + offset].data[0].value = value; // 64; 
	#endif
	return;	
}
partition_type
	#ifdef SW 
	actsproc::
	#endif 
getpartition(bool_type enable, keyvalue_buffer_t keyvalue, step_type currentLOP, vertex_t upperlimit, unsigned int upperpartition, unsigned int batch_range_pow){
	partition_type partition;
	keyvalue_t thiskeyvalue = GETKV(keyvalue);

	if(thiskeyvalue.value == GETV(INVALIDDATA)){ partition = thiskeyvalue.key; } 
	else { partition = ((thiskeyvalue.key - upperlimit) >> (batch_range_pow - (NUM_PARTITIONS_POW * currentLOP))); }	
	
	#ifdef _DEBUGMODE_CHECKS2
	if(partition >= MAX_NUM_PARTITIONS){ actsutilityobj->globalstats_counterrorsingetpartition(1); }
	#endif 
	#ifdef _DEBUGMODE_CHECKS2
	if(partition >= MAX_NUM_PARTITIONS){ 
		#ifdef ENABLE_VOICEOUTKERNELERRORS
		cout<<"actsproc::getpartition::ERROR 1. partition out of bounds partition: "<<partition<<", thiskeyvalue.key: "<<thiskeyvalue.key<<", thiskeyvalue.value: "<<thiskeyvalue.value<<", NUM_PARTITIONS: "<<NUM_PARTITIONS<<", upperlimit: "<<upperlimit<<", currentLOP: "<<currentLOP<<", batch_range_pow: "<<batch_range_pow<<", div factor: "<<(1 << (batch_range_pow - (NUM_PARTITIONS_POW * currentLOP)))<<endl; 
		#endif 
		#ifdef ENABLE_PERFECTACCURACY
		exit(EXIT_FAILURE); 
		#endif 
	}
	#endif
	#ifndef ENABLE_PERFECTACCURACY
		if(partition >= MAX_NUM_PARTITIONS){ partition = (((1 << NUM_PARTITIONS_POW) - 1) & (partition >> (1 - 1))); } // FIXME. REMOVEME. PERFECTIONTEST.
	#endif
	#ifdef _DEBUGMODE_CHECKS2
	actsutilityobj->checkoutofbounds("actsproc::getpartition 2", partition, MAX_NUM_PARTITIONS, thiskeyvalue.key, upperlimit, currentLOP);
	#endif
	return partition;
}

// functions (resets)
void 
	#ifdef SW 
	actsproc::
	#endif 
resetvalues(keyvalue_t * buffer, buffer_type size, unsigned int resetval){
	for(buffer_type i=0; i<size; i++){ 
	#pragma HLS PIPELINE II=1
		buffer[i].value = resetval; 
	}
}
void 
	#ifdef SW 
	actsproc::
	#endif 
resetvalues(keyvalue_capsule_t * buffer, buffer_type size, unsigned int resetval){
	for(buffer_type i=0; i<size; i++){ 
	#pragma HLS PIPELINE II=1
		buffer[i].value = resetval; 
	}
}
void 
	#ifdef SW 
	actsproc::
	#endif 
resetvalues(value_t * buffer, buffer_type size, unsigned int resetval){
	for(buffer_type i=0; i<size; i++){ 
	#pragma HLS PIPELINE II=1
		buffer[i] = resetval; 
	}
}
void 
	#ifdef SW 
	actsproc::
	#endif 
resetkeysandvalues(keyvalue_t * buffer, buffer_type size, unsigned int resetval){
	for(buffer_type i=0; i<size; i++){
		buffer[i].key = resetval; 
		buffer[i].value = resetval; 
	}
	return;
}
void
	#ifdef SW 
	actsproc::
	#endif 
resetkvstatvalues(uint512_dt * kvdram, globalparams_t globalparams){
	unsigned int totalnumpartitionsb4last = 0;
	RESETKVSTATS_LOOP1: for(unsigned int k=0; k<globalparams.ACTSPARAMS_TREEDEPTH; k++){ totalnumpartitionsb4last += (1 << (NUM_PARTITIONS_POW * k)); }
	for(unsigned int k=0; k<totalnumpartitionsb4last; k++){
	#pragma HLS PIPELINE II=1 // CRITICAL NEWCHANGE.
		#ifdef _WIDEWORD
		kvdram[globalparams.BASEOFFSETKVS_STATSDRAM + k].range(63, 32) = 0; 
		kvdram[globalparams.BASEOFFSETKVS_STATSDRAM + k].range(127, 96) = 0; 
		kvdram[globalparams.BASEOFFSETKVS_STATSDRAM + k].range(191, 160) = 0; 
		kvdram[globalparams.BASEOFFSETKVS_STATSDRAM + k].range(255, 224) = 0; 
		kvdram[globalparams.BASEOFFSETKVS_STATSDRAM + k].range(319, 288) = 0; 
		kvdram[globalparams.BASEOFFSETKVS_STATSDRAM + k].range(383, 352) = 0; 
		kvdram[globalparams.BASEOFFSETKVS_STATSDRAM + k].range(447, 416) = 0; 
		kvdram[globalparams.BASEOFFSETKVS_STATSDRAM + k].range(511, 480) = 0; 
		#else 
		kvdram[globalparams.BASEOFFSETKVS_STATSDRAM + k].data[0].value = 0; 
		kvdram[globalparams.BASEOFFSETKVS_STATSDRAM + k].data[1].value = 0; 
		kvdram[globalparams.BASEOFFSETKVS_STATSDRAM + k].data[2].value = 0; 
		kvdram[globalparams.BASEOFFSETKVS_STATSDRAM + k].data[3].value = 0; 
		kvdram[globalparams.BASEOFFSETKVS_STATSDRAM + k].data[4].value = 0; 
		kvdram[globalparams.BASEOFFSETKVS_STATSDRAM + k].data[5].value = 0; 
		kvdram[globalparams.BASEOFFSETKVS_STATSDRAM + k].data[6].value = 0; 
		kvdram[globalparams.BASEOFFSETKVS_STATSDRAM + k].data[7].value = 0; 
		#endif
	}
	return;
}
void
	#ifdef SW 
	actsproc::
	#endif 
accumkvstats(uint512_dt * kvdram, value_t * buffer, globalparams_t globalparams){
	unsigned int totalnumpartitionsb4last = 0;
	SAVEKVSTATS_LOOP1: for(unsigned int k=0; k<globalparams.ACTSPARAMS_TREEDEPTH; k++){ totalnumpartitionsb4last += (1 << (NUM_PARTITIONS_POW * k)); }
	for(unsigned int k=0; k<totalnumpartitionsb4last; k++){
		#ifdef _WIDEWORD
 if(globalparams.VARS_WORKBATCH == 0){
			buffer[k] += kvdram[globalparams.BASEOFFSETKVS_STATSDRAM + k].range(63, 32); 
		}
else if(globalparams.VARS_WORKBATCH == 1){
			buffer[k] += kvdram[globalparams.BASEOFFSETKVS_STATSDRAM + k].range(127, 96); 
		}
else if(globalparams.VARS_WORKBATCH == 2){
			buffer[k] += kvdram[globalparams.BASEOFFSETKVS_STATSDRAM + k].range(191, 160); 
		}
else if(globalparams.VARS_WORKBATCH == 3){
			buffer[k] += kvdram[globalparams.BASEOFFSETKVS_STATSDRAM + k].range(255, 224); 
		}
else if(globalparams.VARS_WORKBATCH == 4){
			buffer[k] += kvdram[globalparams.BASEOFFSETKVS_STATSDRAM + k].range(319, 288); 
		}
else if(globalparams.VARS_WORKBATCH == 5){
			buffer[k] += kvdram[globalparams.BASEOFFSETKVS_STATSDRAM + k].range(383, 352); 
		}
else if(globalparams.VARS_WORKBATCH == 6){
			buffer[k] += kvdram[globalparams.BASEOFFSETKVS_STATSDRAM + k].range(447, 416); 
		}
else {
			buffer[k] += kvdram[globalparams.BASEOFFSETKVS_STATSDRAM + k].range(511, 480); 
		}
		#else 
 if(globalparams.VARS_WORKBATCH == 0){
			buffer[k] += kvdram[globalparams.BASEOFFSETKVS_STATSDRAM + k].data[0].value; 
		}
else if(globalparams.VARS_WORKBATCH == 1){
			buffer[k] += kvdram[globalparams.BASEOFFSETKVS_STATSDRAM + k].data[1].value; 
		}
else if(globalparams.VARS_WORKBATCH == 2){
			buffer[k] += kvdram[globalparams.BASEOFFSETKVS_STATSDRAM + k].data[2].value; 
		}
else if(globalparams.VARS_WORKBATCH == 3){
			buffer[k] += kvdram[globalparams.BASEOFFSETKVS_STATSDRAM + k].data[3].value; 
		}
else if(globalparams.VARS_WORKBATCH == 4){
			buffer[k] += kvdram[globalparams.BASEOFFSETKVS_STATSDRAM + k].data[4].value; 
		}
else if(globalparams.VARS_WORKBATCH == 5){
			buffer[k] += kvdram[globalparams.BASEOFFSETKVS_STATSDRAM + k].data[5].value; 
		}
else if(globalparams.VARS_WORKBATCH == 6){
			buffer[k] += kvdram[globalparams.BASEOFFSETKVS_STATSDRAM + k].data[6].value; 
		}
else {
			buffer[k] += kvdram[globalparams.BASEOFFSETKVS_STATSDRAM + k].data[7].value; 
		}
		#endif
	}
	return;
}
void
	#ifdef SW 
	actsproc::
	#endif 
commitkvstats(uint512_dt * kvdram, value_t * buffer, globalparams_t globalparams, unsigned int offset){
	unsigned int totalnumpartitionsb4last = 0;
	RETRIEVEKVSTATS_LOOP1: for(unsigned int k=0; k<globalparams.ACTSPARAMS_TREEDEPTH; k++){ totalnumpartitionsb4last += (1 << (NUM_PARTITIONS_POW * k)); }
	for(unsigned int k=0; k<totalnumpartitionsb4last; k++){
		#ifdef _WIDEWORD
		kvdram[globalparams.BASEOFFSETKVS_STATSDRAM + offset + k].range(63, 32) = buffer[k]; 
		#else
		kvdram[globalparams.BASEOFFSETKVS_STATSDRAM + offset  + k].data[0].value = buffer[k]; 
		#endif
	}
	
	#ifdef _WIDEWORD
	kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_ALGORITHMINFO_GRAPHITERATIONID].range(31, 0) = globalparams.ALGORITHMINFO_GRAPHITERATIONID + 1; // CRITICAL NOTEME: Graph Iteration is incremented here
	#else
	kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_ALGORITHMINFO_GRAPHITERATIONID].data[0].key = globalparams.ALGORITHMINFO_GRAPHITERATIONID + 1;
	#endif 
	return;
}
void
	#ifdef SW 
	actsproc::
	#endif 
increment_graphiteration(uint512_dt * kvdram, globalparams_t globalparams){
	#ifdef _WIDEWORD
	kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_ALGORITHMINFO_GRAPHITERATIONID].range(31, 0) = globalparams.ALGORITHMINFO_GRAPHITERATIONID + 1; // CRITICAL NOTEME: Graph Iteration is incremented here
	#else
	kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_ALGORITHMINFO_GRAPHITERATIONID].data[0].key = globalparams.ALGORITHMINFO_GRAPHITERATIONID + 1;
	#endif 
	return;
}

// functions (accessors)
fetchmessage_t //
	#ifdef SW 
	actsproc::
	#endif 
readkeyvalues(bool_type enable, uint512_dt * kvdram, keyvalue_buffer_t buffer[VECTOR_SIZE][SOURCEBLOCKRAM_SIZE], batch_type offset_kvs, batch_type size_kvs, travstate_t travstate, globalparams_t globalparams){
	fetchmessage_t fetchmessage;
	fetchmessage.chunksize_kvs = -1;
	fetchmessage.nextoffset_kvs = -1;
	if(enable == OFF){ return fetchmessage; }
	
	analysis_type analysis_loopcount = BLOCKRAM_SIZE;
	buffer_type chunk_size = getchunksize_kvs(size_kvs, travstate, 0);
	
	fetchmessage.chunksize_kvs = chunk_size;
	fetchmessage.nextoffset_kvs = NAp;
	
	READKEYVALUES1_LOOP: for (buffer_type i=0; i<chunk_size; i++){
	#pragma HLS LOOP_TRIPCOUNT min=0 max=analysis_loopcount avg=analysis_loopcount
	#pragma HLS PIPELINE II=1
		keyvalue_t mykeyvalue0;
		keyvalue_t mykeyvalue1;
		keyvalue_t mykeyvalue2;
		keyvalue_t mykeyvalue3;
		keyvalue_t mykeyvalue4;
		keyvalue_t mykeyvalue5;
		keyvalue_t mykeyvalue6;
		keyvalue_t mykeyvalue7;
		
		#ifdef _WIDEWORD
		mykeyvalue0.key = kvdram[offset_kvs + i].range(31, 0);
		mykeyvalue0.value = kvdram[offset_kvs + i].range(63, 32);
		mykeyvalue1.key = kvdram[offset_kvs + i].range(95, 64);
		mykeyvalue1.value = kvdram[offset_kvs + i].range(127, 96);
		mykeyvalue2.key = kvdram[offset_kvs + i].range(159, 128);
		mykeyvalue2.value = kvdram[offset_kvs + i].range(191, 160);
		mykeyvalue3.key = kvdram[offset_kvs + i].range(223, 192);
		mykeyvalue3.value = kvdram[offset_kvs + i].range(255, 224);
		mykeyvalue4.key = kvdram[offset_kvs + i].range(287, 256);
		mykeyvalue4.value = kvdram[offset_kvs + i].range(319, 288);
		mykeyvalue5.key = kvdram[offset_kvs + i].range(351, 320);
		mykeyvalue5.value = kvdram[offset_kvs + i].range(383, 352);
		mykeyvalue6.key = kvdram[offset_kvs + i].range(415, 384);
		mykeyvalue6.value = kvdram[offset_kvs + i].range(447, 416);
		mykeyvalue7.key = kvdram[offset_kvs + i].range(479, 448);
		mykeyvalue7.value = kvdram[offset_kvs + i].range(511, 480);
		#else 
		mykeyvalue0.key = kvdram[offset_kvs + i].data[0].key; 
		mykeyvalue0.value = kvdram[offset_kvs + i].data[0].value; 
		mykeyvalue1.key = kvdram[offset_kvs + i].data[1].key; 
		mykeyvalue1.value = kvdram[offset_kvs + i].data[1].value; 
		mykeyvalue2.key = kvdram[offset_kvs + i].data[2].key; 
		mykeyvalue2.value = kvdram[offset_kvs + i].data[2].value; 
		mykeyvalue3.key = kvdram[offset_kvs + i].data[3].key; 
		mykeyvalue3.value = kvdram[offset_kvs + i].data[3].value; 
		mykeyvalue4.key = kvdram[offset_kvs + i].data[4].key; 
		mykeyvalue4.value = kvdram[offset_kvs + i].data[4].value; 
		mykeyvalue5.key = kvdram[offset_kvs + i].data[5].key; 
		mykeyvalue5.value = kvdram[offset_kvs + i].data[5].value; 
		mykeyvalue6.key = kvdram[offset_kvs + i].data[6].key; 
		mykeyvalue6.value = kvdram[offset_kvs + i].data[6].value; 
		mykeyvalue7.key = kvdram[offset_kvs + i].data[7].key; 
		mykeyvalue7.value = kvdram[offset_kvs + i].data[7].value; 
		#endif 
		
		buffer[0][i] = GETKV(mykeyvalue0);
		buffer[1][i] = GETKV(mykeyvalue1);
		buffer[2][i] = GETKV(mykeyvalue2);
		buffer[3][i] = GETKV(mykeyvalue3);
		buffer[4][i] = GETKV(mykeyvalue4);
		buffer[5][i] = GETKV(mykeyvalue5);
		buffer[6][i] = GETKV(mykeyvalue6);
		buffer[7][i] = GETKV(mykeyvalue7);
		
		#ifdef _DEBUGMODE_STATS
		actsutilityobj->globalstats_countkvsread(VECTOR_SIZE);
		#endif
	}
	
	#ifdef _DEBUGMODE_KERNELPRINTS
	cout<<"readkeyvalues:: keyvalues read: offset_kvs: "<<offset_kvs<<", size_kvs: "<<size_kvs<<", chunk_size: "<<chunk_size<<endl;
	#endif
	return fetchmessage;
}

void 
	#ifdef SW 
	actsproc::
	#endif 
savekeyvalues(bool_type enable, uint512_dt * kvdram, keyvalue_buffer_t buffer[VECTOR_SIZE][DESTBLOCKRAM_SIZE], keyvalue_t * globalcapsule, keyvalue_capsule_t localcapsule[MAX_NUM_PARTITIONS], batch_type globalbaseaddress_kvs, globalparams_t globalparams){				
	if(enable == OFF){ return; }

	#ifdef _DEBUGMODE_CHECKS
	actsutilityobj->printkeyvalues("savekeyvalues::localcapsule", localcapsule, MAX_NUM_PARTITIONS);
	actsutilityobj->printvaluecount("savekeyvalues::localcapsule", localcapsule, MAX_NUM_PARTITIONS);
	actsutilityobj->scankeyvalues("savekeyvalues::buffer", (keyvalue_t *)buffer, localcapsule, NUM_PARTITIONS, globalparams.SIZE_BATCHRANGE / NUM_PARTITIONS, actsutilityobj->getsweepparams().upperlimit);
	#endif
	
	analysis_type analysis_destpartitionsz = DESTBLOCKRAM_SIZE / NUM_PARTITIONS;
	SAVEPARTITIONS_LOOP1: for(partition_type p=0; p<NUM_PARTITIONS; p++){
		batch_type dramoffset_kvs = globalbaseaddress_kvs + ((globalcapsule[p].key + globalcapsule[p].value) / VECTOR_SIZE);
		buffer_type bramoffset_kvs = localcapsule[p].key / VECTOR_SIZE;
		buffer_type realsize_kvs = localcapsule[p].value / VECTOR_SIZE;
		buffer_type size_kvs = getpartitionwritesz(realsize_kvs, bramoffset_kvs);
		
		#ifdef _DEBUGMODE_CHECKS2
		actsutilityobj->checkoutofbounds("savekeyvalues 23", bramoffset_kvs + size_kvs, DESTBLOCKRAM_SIZE + 1, p, NAp, NAp);
		actsutilityobj->checkoutofbounds("savekeyvalues 25", ((globalcapsule[p].key + globalcapsule[p].value) / VECTOR_SIZE), globalparams.SIZE_KVDRAM + 1, p, NAp, NAp);
		#endif
		if(realsize_kvs > 0){
			SAVEPARTITIONS_LOOP1B: for(buffer_type i=0; i<size_kvs; i++){
			#pragma HLS LOOP_TRIPCOUNT min=0 max=analysis_destpartitionsz avg=analysis_destpartitionsz
			#pragma HLS PIPELINE II=1
				keyvalue_t mykeyvalue0 = GETKV(buffer[0][bramoffset_kvs + i]);
				keyvalue_t mykeyvalue1 = GETKV(buffer[1][bramoffset_kvs + i]);
				keyvalue_t mykeyvalue2 = GETKV(buffer[2][bramoffset_kvs + i]);
				keyvalue_t mykeyvalue3 = GETKV(buffer[3][bramoffset_kvs + i]);
				keyvalue_t mykeyvalue4 = GETKV(buffer[4][bramoffset_kvs + i]);
				keyvalue_t mykeyvalue5 = GETKV(buffer[5][bramoffset_kvs + i]);
				keyvalue_t mykeyvalue6 = GETKV(buffer[6][bramoffset_kvs + i]);
				keyvalue_t mykeyvalue7 = GETKV(buffer[7][bramoffset_kvs + i]);
				
				#ifdef _WIDEWORD
				kvdram[dramoffset_kvs + i].range(31, 0) = mykeyvalue0.key; 
				kvdram[dramoffset_kvs + i].range(63, 32) = mykeyvalue0.value; 
				kvdram[dramoffset_kvs + i].range(95, 64) = mykeyvalue1.key; 
				kvdram[dramoffset_kvs + i].range(127, 96) = mykeyvalue1.value; 
				kvdram[dramoffset_kvs + i].range(159, 128) = mykeyvalue2.key; 
				kvdram[dramoffset_kvs + i].range(191, 160) = mykeyvalue2.value; 
				kvdram[dramoffset_kvs + i].range(223, 192) = mykeyvalue3.key; 
				kvdram[dramoffset_kvs + i].range(255, 224) = mykeyvalue3.value; 
				kvdram[dramoffset_kvs + i].range(287, 256) = mykeyvalue4.key; 
				kvdram[dramoffset_kvs + i].range(319, 288) = mykeyvalue4.value; 
				kvdram[dramoffset_kvs + i].range(351, 320) = mykeyvalue5.key; 
				kvdram[dramoffset_kvs + i].range(383, 352) = mykeyvalue5.value; 
				kvdram[dramoffset_kvs + i].range(415, 384) = mykeyvalue6.key; 
				kvdram[dramoffset_kvs + i].range(447, 416) = mykeyvalue6.value; 
				kvdram[dramoffset_kvs + i].range(479, 448) = mykeyvalue7.key; 
				kvdram[dramoffset_kvs + i].range(511, 480) = mykeyvalue7.value; 
				#else
				kvdram[dramoffset_kvs + i].data[0].key = mykeyvalue0.key; 
				kvdram[dramoffset_kvs + i].data[0].value = mykeyvalue0.value; 
				kvdram[dramoffset_kvs + i].data[1].key = mykeyvalue1.key; 
				kvdram[dramoffset_kvs + i].data[1].value = mykeyvalue1.value; 
				kvdram[dramoffset_kvs + i].data[2].key = mykeyvalue2.key; 
				kvdram[dramoffset_kvs + i].data[2].value = mykeyvalue2.value; 
				kvdram[dramoffset_kvs + i].data[3].key = mykeyvalue3.key; 
				kvdram[dramoffset_kvs + i].data[3].value = mykeyvalue3.value; 
				kvdram[dramoffset_kvs + i].data[4].key = mykeyvalue4.key; 
				kvdram[dramoffset_kvs + i].data[4].value = mykeyvalue4.value; 
				kvdram[dramoffset_kvs + i].data[5].key = mykeyvalue5.key; 
				kvdram[dramoffset_kvs + i].data[5].value = mykeyvalue5.value; 
				kvdram[dramoffset_kvs + i].data[6].key = mykeyvalue6.key; 
				kvdram[dramoffset_kvs + i].data[6].value = mykeyvalue6.value; 
				kvdram[dramoffset_kvs + i].data[7].key = mykeyvalue7.key; 
				kvdram[dramoffset_kvs + i].data[7].value = mykeyvalue7.value; 
				#endif 
				
				#ifdef _DEBUGMODE_STATS
				actsutilityobj->globalstats_countkvspartitionswritten_actual(VECTOR_SIZE);
				#endif
			}
			#ifdef _DEBUGMODE_STATS
			actsutilityobj->globalstats_countkvspartitionswritten(realsize_kvs * VECTOR_SIZE);
			#endif
		}
	}
	SAVEPARTITIONS_LOOP2: for(partition_type p=0; p<NUM_PARTITIONS; p++){ globalcapsule[p].value += localcapsule[p].value; }
	
	#if defined(ENABLE_PERFECTACCURACY) && defined(_DEBUGMODE_CHECKS2)
	for(unsigned int i=0; i<NUM_PARTITIONS-1; i++){ 
		if(globalcapsule[i].key + globalcapsule[i].value >= globalcapsule[i+1].key && globalcapsule[i].value > 0){ 
			cout<<"savekeyvalues::globalcapsule 33. ERROR. out of bounds. (globalcapsule["<<i<<"].key("<<globalcapsule[i].key<<") + globalcapsule["<<i<<"].value("<<globalcapsule[i].value<<") >= globalcapsule["<<i+1<<"].key("<<globalcapsule[i+1].key<<")) printing and exiting..."<<endl; 
			actsutilityobj->printkeyvalues("savekeyvalues::globalcapsule 34", (keyvalue_t *)globalcapsule, NUM_PARTITIONS); 
			exit(EXIT_FAILURE); 
		}
	}
	if(globalcapsule[NUM_PARTITIONS-1].key + globalcapsule[NUM_PARTITIONS-1].value >= globalparams.SIZE_KVDRAM){
		cout<<"savekeyvalues::globalcapsule 36. ERROR. out of bounds. (globalcapsule["<<NUM_PARTITIONS-1<<"].key("<<globalcapsule[NUM_PARTITIONS-1].key<<") + globalcapsule["<<NUM_PARTITIONS-1<<"].value("<<globalcapsule[NUM_PARTITIONS-1].value<<") >= globalparams.SIZE_KVDRAM("<<globalparams.SIZE_KVDRAM<<")) printing and exiting..."<<endl; 
		actsutilityobj->printkeyvalues("savekeyvalues::globalcapsule 37", (keyvalue_t *)globalcapsule, NUM_PARTITIONS); 
		exit(EXIT_FAILURE); 
	}
	#endif
	#ifdef _DEBUGMODE_KERNELPRINTS2
	cout<<"savekeyvalues:: keyvalues saved: offset_kvs from: "<<globalbaseaddress_kvs + ((globalcapsule[0].key + globalcapsule[0].value) / VECTOR_SIZE)<<endl;
	actsutilityobj->printkeyvalues("actsutility::savekeyvalues: globalcapsule.", (keyvalue_t *)globalcapsule, NUM_PARTITIONS);
	#endif
	return;
}

void 
	#ifdef SW 
	actsproc::
	#endif 
readkeyvalues(bool_type enable, uint512_dt * kvdram, batch_type dramoffset_kvs, keyvalue_buffer_t buffer[VECTOR_SIZE][BLOCKRAM_SIZE], batch_type bufferoffset_kvs, buffer_type size_kvs, globalparams_t globalparams){
	if(enable == OFF){ return; }
	analysis_type analysis_loopcount = BLOCKRAM_SIZE;
		
	READKEYVALUES2_LOOP: for (buffer_type i=0; i<size_kvs; i++){
	#pragma HLS LOOP_TRIPCOUNT min=0 max=analysis_loopcount avg=analysis_loopcount
	#pragma HLS PIPELINE II=1
		keyvalue_t mykeyvalue0;
		keyvalue_t mykeyvalue1;
		keyvalue_t mykeyvalue2;
		keyvalue_t mykeyvalue3;
		keyvalue_t mykeyvalue4;
		keyvalue_t mykeyvalue5;
		keyvalue_t mykeyvalue6;
		keyvalue_t mykeyvalue7;
		
		#ifdef _WIDEWORD
		mykeyvalue0.key = kvdram[dramoffset_kvs + i].range(31, 0); 
		mykeyvalue0.value = kvdram[dramoffset_kvs + i].range(63, 32); 
		mykeyvalue1.key = kvdram[dramoffset_kvs + i].range(95, 64); 
		mykeyvalue1.value = kvdram[dramoffset_kvs + i].range(127, 96); 
		mykeyvalue2.key = kvdram[dramoffset_kvs + i].range(159, 128); 
		mykeyvalue2.value = kvdram[dramoffset_kvs + i].range(191, 160); 
		mykeyvalue3.key = kvdram[dramoffset_kvs + i].range(223, 192); 
		mykeyvalue3.value = kvdram[dramoffset_kvs + i].range(255, 224); 
		mykeyvalue4.key = kvdram[dramoffset_kvs + i].range(287, 256); 
		mykeyvalue4.value = kvdram[dramoffset_kvs + i].range(319, 288); 
		mykeyvalue5.key = kvdram[dramoffset_kvs + i].range(351, 320); 
		mykeyvalue5.value = kvdram[dramoffset_kvs + i].range(383, 352); 
		mykeyvalue6.key = kvdram[dramoffset_kvs + i].range(415, 384); 
		mykeyvalue6.value = kvdram[dramoffset_kvs + i].range(447, 416); 
		mykeyvalue7.key = kvdram[dramoffset_kvs + i].range(479, 448); 
		mykeyvalue7.value = kvdram[dramoffset_kvs + i].range(511, 480); 
		#else 
		mykeyvalue0.key = kvdram[dramoffset_kvs + i].data[0].key;
		mykeyvalue0.value = kvdram[dramoffset_kvs + i].data[0].value; 
		mykeyvalue1.key = kvdram[dramoffset_kvs + i].data[1].key;
		mykeyvalue1.value = kvdram[dramoffset_kvs + i].data[1].value; 
		mykeyvalue2.key = kvdram[dramoffset_kvs + i].data[2].key;
		mykeyvalue2.value = kvdram[dramoffset_kvs + i].data[2].value; 
		mykeyvalue3.key = kvdram[dramoffset_kvs + i].data[3].key;
		mykeyvalue3.value = kvdram[dramoffset_kvs + i].data[3].value; 
		mykeyvalue4.key = kvdram[dramoffset_kvs + i].data[4].key;
		mykeyvalue4.value = kvdram[dramoffset_kvs + i].data[4].value; 
		mykeyvalue5.key = kvdram[dramoffset_kvs + i].data[5].key;
		mykeyvalue5.value = kvdram[dramoffset_kvs + i].data[5].value; 
		mykeyvalue6.key = kvdram[dramoffset_kvs + i].data[6].key;
		mykeyvalue6.value = kvdram[dramoffset_kvs + i].data[6].value; 
		mykeyvalue7.key = kvdram[dramoffset_kvs + i].data[7].key;
		mykeyvalue7.value = kvdram[dramoffset_kvs + i].data[7].value; 
		
		buffer[0][bufferoffset_kvs + i] = GETKV(mykeyvalue0);
		buffer[1][bufferoffset_kvs + i] = GETKV(mykeyvalue1);
		buffer[2][bufferoffset_kvs + i] = GETKV(mykeyvalue2);
		buffer[3][bufferoffset_kvs + i] = GETKV(mykeyvalue3);
		buffer[4][bufferoffset_kvs + i] = GETKV(mykeyvalue4);
		buffer[5][bufferoffset_kvs + i] = GETKV(mykeyvalue5);
		buffer[6][bufferoffset_kvs + i] = GETKV(mykeyvalue6);
		buffer[7][bufferoffset_kvs + i] = GETKV(mykeyvalue7);
		
		#endif 
		#ifdef _DEBUGMODE_STATS
		actsutilityobj->globalstats_countkvsread(VECTOR_SIZE);
		#endif
	}
	#ifdef _DEBUGMODE_KERNELPRINTS
	cout<< TIMINGRESULTSCOLOR<<"readkeyvalues:: vertices read: offset: "<<dramoffset_kvs * VECTOR_SIZE<<"-"<<(dramoffset_kvs + size_kvs) * VECTOR_SIZE<<", number of vertex datas read: "<<(size_kvs * VECTOR_SIZE * 2)<<" ("<<size_kvs * VECTOR_SIZE<<" keyvalues written)"<< RESET<<endl;
	#endif
	#ifdef _DEBUGMODE_KERNELPRINTS
	if(dramoffset_kvs >= globalparams.BASEOFFSETKVS_VERTEXPTR_ && dramoffset_kvs < globalparams.BASEOFFSETKVS_VERTEXPTR + VERTEXPTRSSZ_KVS){ cout<< TIMINGRESULTSCOLOR<<"readkeyvalues:: vertices read: offset: "<<(dramoffset_kvs - globalparams.BASEOFFSETKVS_VERTEXPTR) * VECTOR_SIZE<<"-"<<(dramoffset_kvs + size_kvs - globalparams.BASEOFFSETKVS_VERTEXPTR) * VECTOR_SIZE<<", number of vertex datas read: "<<(size_kvs * VECTOR_SIZE * 2)<<" ("<<size_kvs * VECTOR_SIZE<<" keyvalues written)"<< RESET<<endl; }
	if(dramoffset_kvs >= globalparams.BASEOFFSETKVS_VERTICESDATA_ && dramoffset_kvs < globalparams.BASEOFFSETKVS_DESTVERTICESDATA + VERTICESDATASZ_KVS){ cout<< TIMINGRESULTSCOLOR<<"readkeyvalues:: vertices read: offset: "<<(dramoffset_kvs - globalparams.BASEOFFSETKVS_DESTVERTICESDATA) * VECTOR_SIZE<<"-"<<(dramoffset_kvs + size_kvs - globalparams.BASEOFFSETKVS_DESTVERTICESDATA) * VECTOR_SIZE<<", number of vertex datas read: "<<(size_kvs * VECTOR_SIZE * 2)<<" ("<<size_kvs * VECTOR_SIZE<<" keyvalues written)"<< RESET<<endl; }
	#endif
	return;
}

void 
	#ifdef SW 
	actsproc::
	#endif 
savekeyvalues(bool_type enable, uint512_dt * kvdram, batch_type dramoffset_kvs, keyvalue_buffer_t buffer[VECTOR_SIZE][BLOCKRAM_SIZE], batch_type bufferoffset_kvs, buffer_type size_kvs, globalparams_t globalparams){
	if(enable == OFF){ return; }
	analysis_type analysis_loopcount =  BLOCKRAM_SIZE;
	
	SAVEKEYVALUES2_LOOP: for (buffer_type i=0; i<size_kvs; i++){
	#pragma HLS LOOP_TRIPCOUNT min=0 max=analysis_loopcount avg=analysis_loopcount
	#pragma HLS PIPELINE II=1
		keyvalue_t mykeyvalue0 = GETKV(buffer[0][bufferoffset_kvs + i]);
		keyvalue_t mykeyvalue1 = GETKV(buffer[1][bufferoffset_kvs + i]);
		keyvalue_t mykeyvalue2 = GETKV(buffer[2][bufferoffset_kvs + i]);
		keyvalue_t mykeyvalue3 = GETKV(buffer[3][bufferoffset_kvs + i]);
		keyvalue_t mykeyvalue4 = GETKV(buffer[4][bufferoffset_kvs + i]);
		keyvalue_t mykeyvalue5 = GETKV(buffer[5][bufferoffset_kvs + i]);
		keyvalue_t mykeyvalue6 = GETKV(buffer[6][bufferoffset_kvs + i]);
		keyvalue_t mykeyvalue7 = GETKV(buffer[7][bufferoffset_kvs + i]);
	
		#ifdef _WIDEWORD
		kvdram[dramoffset_kvs + i].range(31, 0) = mykeyvalue0.key; 
		kvdram[dramoffset_kvs + i].range(63, 32) = mykeyvalue0.value; 
		kvdram[dramoffset_kvs + i].range(95, 64) = mykeyvalue1.key; 
		kvdram[dramoffset_kvs + i].range(127, 96) = mykeyvalue1.value; 
		kvdram[dramoffset_kvs + i].range(159, 128) = mykeyvalue2.key; 
		kvdram[dramoffset_kvs + i].range(191, 160) = mykeyvalue2.value; 
		kvdram[dramoffset_kvs + i].range(223, 192) = mykeyvalue3.key; 
		kvdram[dramoffset_kvs + i].range(255, 224) = mykeyvalue3.value; 
		kvdram[dramoffset_kvs + i].range(287, 256) = mykeyvalue4.key; 
		kvdram[dramoffset_kvs + i].range(319, 288) = mykeyvalue4.value; 
		kvdram[dramoffset_kvs + i].range(351, 320) = mykeyvalue5.key; 
		kvdram[dramoffset_kvs + i].range(383, 352) = mykeyvalue5.value; 
		kvdram[dramoffset_kvs + i].range(415, 384) = mykeyvalue6.key; 
		kvdram[dramoffset_kvs + i].range(447, 416) = mykeyvalue6.value; 
		kvdram[dramoffset_kvs + i].range(479, 448) = mykeyvalue7.key; 
		kvdram[dramoffset_kvs + i].range(511, 480) = mykeyvalue7.value; 
		#else 
		kvdram[dramoffset_kvs + i].data[0].key = mykeyvalue0.key;
		kvdram[dramoffset_kvs + i].data[0].value = mykeyvalue0.value;
		kvdram[dramoffset_kvs + i].data[1].key = mykeyvalue1.key;
		kvdram[dramoffset_kvs + i].data[1].value = mykeyvalue1.value;
		kvdram[dramoffset_kvs + i].data[2].key = mykeyvalue2.key;
		kvdram[dramoffset_kvs + i].data[2].value = mykeyvalue2.value;
		kvdram[dramoffset_kvs + i].data[3].key = mykeyvalue3.key;
		kvdram[dramoffset_kvs + i].data[3].value = mykeyvalue3.value;
		kvdram[dramoffset_kvs + i].data[4].key = mykeyvalue4.key;
		kvdram[dramoffset_kvs + i].data[4].value = mykeyvalue4.value;
		kvdram[dramoffset_kvs + i].data[5].key = mykeyvalue5.key;
		kvdram[dramoffset_kvs + i].data[5].value = mykeyvalue5.value;
		kvdram[dramoffset_kvs + i].data[6].key = mykeyvalue6.key;
		kvdram[dramoffset_kvs + i].data[6].value = mykeyvalue6.value;
		kvdram[dramoffset_kvs + i].data[7].key = mykeyvalue7.key;
		kvdram[dramoffset_kvs + i].data[7].value = mykeyvalue7.value;
		#endif 
		
		#ifdef _DEBUGMODE_STATS
		actsutilityobj->globalstats_countkvswritten(VECTOR_SIZE);
		#endif
	}
	#ifdef _DEBUGMODE_KERNELPRINTS
	cout<<"savekeyvalues:: vertices saved: offset: "<<dramoffset_kvs * VECTOR_SIZE<<"-"<<(dramoffset_kvs + size_kvs) * VECTOR_SIZE<<", number of vertex datas written: "<<(size_kvs * VECTOR_SIZE * 2)<<" ("<<size_kvs * VECTOR_SIZE<<" keyvalues written)"<<endl;
	#endif
	#ifdef _DEBUGMODE_KERNELPRINTS2
	if(dramoffset_kvs >= globalparams.BASEOFFSETKVS_VERTEXPTR && dramoffset_kvs < globalparams.BASEOFFSETKVS_VERTEXPTR + VERTEXPTRSSZ_KVS){ cout<< TIMINGRESULTSCOLOR<<"savekeyvalues:: vertices saved: offset: "<<dramoffset_kvs-globalparams.BASEOFFSETKVS_VERTEXPTR * VECTOR_SIZE<<"-"<<((dramoffset_kvs + size_kvs)-globalparams.BASEOFFSETKVS_VERTEXPTR) * VECTOR_SIZE<<", number of vertex datas written: "<<(size_kvs * VECTOR_SIZE * 2)<<" ("<<size_kvs * VECTOR_SIZE<<" keyvalues written)"<< RESET<<endl; }
	if(dramoffset_kvs >= globalparams.BASEOFFSETKVS_DESTVERTICESDATA && dramoffset_kvs < globalparams.BASEOFFSETKVS_DESTVERTICESDATA + VERTICESDATASZ_KVS){ cout<< TIMINGRESULTSCOLOR<<"savekeyvalues:: vertices saved: offset: "<<(dramoffset_kvs-globalparams.BASEOFFSETKVS_DESTVERTICESDATA) * VECTOR_SIZE<<"-"<<((dramoffset_kvs-globalparams.BASEOFFSETKVS_DESTVERTICESDATA) + size_kvs) * VECTOR_SIZE<<", number of vertex datas written: "<<(size_kvs * VECTOR_SIZE * 2)<<" ("<<size_kvs * VECTOR_SIZE<<" keyvalues written)"<< RESET<<endl; }					
	#endif
	return;
}

void // 
	#ifdef SW 
	actsproc::
	#endif 
readvdata(bool_type enable, uint512_dt * kvdram, batch_type dramoffset_kvs, keyvalue_vbuffer_t buffer[VDATA_PACKINGSIZE][BLOCKRAM_SIZE], unsigned int begincol, batch_type bufferoffset_kvs, buffer_type size_kvs, globalparams_t globalparams){
	if(enable == OFF){ return; }
	analysis_type analysis_loopcount = BLOCKRAM_SIZE;
		
	READVDATA_LOOP: for (buffer_type i=0; i<size_kvs; i++){
	#pragma HLS LOOP_TRIPCOUNT min=0 max=analysis_loopcount avg=analysis_loopcount
	#pragma HLS PIPELINE II=1
		keyvalue_t mykeyvalue0;
		keyvalue_t mykeyvalue1;
		keyvalue_t mykeyvalue2;
		keyvalue_t mykeyvalue3;
		keyvalue_t mykeyvalue4;
		keyvalue_t mykeyvalue5;
		keyvalue_t mykeyvalue6;
		keyvalue_t mykeyvalue7;
		
		#ifdef _WIDEWORD
		mykeyvalue0.key = kvdram[dramoffset_kvs + i].range(31, 0); 
		mykeyvalue0.value = kvdram[dramoffset_kvs + i].range(63, 32); 
		mykeyvalue1.key = kvdram[dramoffset_kvs + i].range(95, 64); 
		mykeyvalue1.value = kvdram[dramoffset_kvs + i].range(127, 96); 
		mykeyvalue2.key = kvdram[dramoffset_kvs + i].range(159, 128); 
		mykeyvalue2.value = kvdram[dramoffset_kvs + i].range(191, 160); 
		mykeyvalue3.key = kvdram[dramoffset_kvs + i].range(223, 192); 
		mykeyvalue3.value = kvdram[dramoffset_kvs + i].range(255, 224); 
		mykeyvalue4.key = kvdram[dramoffset_kvs + i].range(287, 256); 
		mykeyvalue4.value = kvdram[dramoffset_kvs + i].range(319, 288); 
		mykeyvalue5.key = kvdram[dramoffset_kvs + i].range(351, 320); 
		mykeyvalue5.value = kvdram[dramoffset_kvs + i].range(383, 352); 
		mykeyvalue6.key = kvdram[dramoffset_kvs + i].range(415, 384); 
		mykeyvalue6.value = kvdram[dramoffset_kvs + i].range(447, 416); 
		mykeyvalue7.key = kvdram[dramoffset_kvs + i].range(479, 448); 
		mykeyvalue7.value = kvdram[dramoffset_kvs + i].range(511, 480); 
		#else 
		mykeyvalue0.key = kvdram[dramoffset_kvs + i].data[0].key; 
		mykeyvalue0.value = kvdram[dramoffset_kvs + i].data[0].value; 
		mykeyvalue1.key = kvdram[dramoffset_kvs + i].data[1].key; 
		mykeyvalue1.value = kvdram[dramoffset_kvs + i].data[1].value; 
		mykeyvalue2.key = kvdram[dramoffset_kvs + i].data[2].key; 
		mykeyvalue2.value = kvdram[dramoffset_kvs + i].data[2].value; 
		mykeyvalue3.key = kvdram[dramoffset_kvs + i].data[3].key; 
		mykeyvalue3.value = kvdram[dramoffset_kvs + i].data[3].value; 
		mykeyvalue4.key = kvdram[dramoffset_kvs + i].data[4].key; 
		mykeyvalue4.value = kvdram[dramoffset_kvs + i].data[4].value; 
		mykeyvalue5.key = kvdram[dramoffset_kvs + i].data[5].key; 
		mykeyvalue5.value = kvdram[dramoffset_kvs + i].data[5].value; 
		mykeyvalue6.key = kvdram[dramoffset_kvs + i].data[6].key; 
		mykeyvalue6.value = kvdram[dramoffset_kvs + i].data[6].value; 
		mykeyvalue7.key = kvdram[dramoffset_kvs + i].data[7].key; 
		mykeyvalue7.value = kvdram[dramoffset_kvs + i].data[7].value; 
		#endif 
		
		buffer[begincol + 0][bufferoffset_kvs + i] = GETKV2(mykeyvalue0);
		buffer[begincol + 1][bufferoffset_kvs + i] = GETKV2(mykeyvalue1);
		buffer[begincol + 2][bufferoffset_kvs + i] = GETKV2(mykeyvalue2);
		buffer[begincol + 3][bufferoffset_kvs + i] = GETKV2(mykeyvalue3);
		buffer[begincol + 4][bufferoffset_kvs + i] = GETKV2(mykeyvalue4);
		buffer[begincol + 5][bufferoffset_kvs + i] = GETKV2(mykeyvalue5);
		buffer[begincol + 6][bufferoffset_kvs + i] = GETKV2(mykeyvalue6);
		buffer[begincol + 7][bufferoffset_kvs + i] = GETKV2(mykeyvalue7);
		
		#ifdef _DEBUGMODE_STATS
		actsutilityobj->globalstats_countkvsread(VECTOR_SIZE);
		#endif
	}
	#ifdef _DEBUGMODE_KERNELPRINTS
	cout<< TIMINGRESULTSCOLOR<<"readvdata:: vertices read: offset: "<<dramoffset_kvs * VECTOR_SIZE<<"-"<<(dramoffset_kvs + size_kvs) * VECTOR_SIZE<<", number of vertex datas read: "<<(size_kvs * VECTOR_SIZE * 2)<<" ("<<size_kvs * VECTOR_SIZE<<" keyvalues written)"<< RESET<<endl;
	#endif
	#ifdef _DEBUGMODE_KERNELPRINTS
	if(dramoffset_kvs >= globalparams.BASEOFFSETKVS_VERTEXPTR_ && dramoffset_kvs < globalparams.BASEOFFSETKVS_VERTEXPTR + VERTEXPTRSSZ_KVS){ cout<< TIMINGRESULTSCOLOR<<"readvdata:: vertices read: offset: "<<(dramoffset_kvs - globalparams.BASEOFFSETKVS_VERTEXPTR) * VECTOR_SIZE<<"-"<<(dramoffset_kvs + size_kvs - globalparams.BASEOFFSETKVS_VERTEXPTR) * VECTOR_SIZE<<", number of vertex datas read: "<<(size_kvs * VECTOR_SIZE * 2)<<" ("<<size_kvs * VECTOR_SIZE<<" keyvalues written)"<< RESET<<endl; }
	if(dramoffset_kvs >= globalparams.BASEOFFSETKVS_VERTICESDATA_ && dramoffset_kvs < globalparams.BASEOFFSETKVS_DESTVERTICESDATA + VERTICESDATASZ_KVS){ cout<< TIMINGRESULTSCOLOR<<"readvdata:: vertices read: offset: "<<(dramoffset_kvs - globalparams.BASEOFFSETKVS_DESTVERTICESDATA) * VECTOR_SIZE<<"-"<<(dramoffset_kvs + size_kvs - globalparams.BASEOFFSETKVS_DESTVERTICESDATA) * VECTOR_SIZE<<", number of vertex datas read: "<<(size_kvs * VECTOR_SIZE * 2)<<" ("<<size_kvs * VECTOR_SIZE<<" keyvalues written)"<< RESET<<endl; }				
	#endif
	return;
}

void 
	#ifdef SW 
	actsproc::
	#endif 
savevdata(bool_type enable, uint512_dt * kvdram, batch_type dramoffset_kvs, keyvalue_vbuffer_t buffer[VDATA_PACKINGSIZE][BLOCKRAM_SIZE], unsigned int begincol, batch_type bufferoffset_kvs, buffer_type size_kvs, globalparams_t globalparams){
	if(enable == OFF){ return; }
	analysis_type analysis_loopcount =  REDUCESZ / 2;
	
	SAVEVDATA_LOOP: for (buffer_type i=0; i<size_kvs; i++){
	#pragma HLS LOOP_TRIPCOUNT min=0 max=analysis_loopcount avg=analysis_loopcount
	#pragma HLS PIPELINE II=1
		keyvalue_t mykeyvalue0 = GETKV2(buffer[begincol + 0][bufferoffset_kvs + i]);
		keyvalue_t mykeyvalue1 = GETKV2(buffer[begincol + 1][bufferoffset_kvs + i]);
		keyvalue_t mykeyvalue2 = GETKV2(buffer[begincol + 2][bufferoffset_kvs + i]);
		keyvalue_t mykeyvalue3 = GETKV2(buffer[begincol + 3][bufferoffset_kvs + i]);
		keyvalue_t mykeyvalue4 = GETKV2(buffer[begincol + 4][bufferoffset_kvs + i]);
		keyvalue_t mykeyvalue5 = GETKV2(buffer[begincol + 5][bufferoffset_kvs + i]);
		keyvalue_t mykeyvalue6 = GETKV2(buffer[begincol + 6][bufferoffset_kvs + i]);
		keyvalue_t mykeyvalue7 = GETKV2(buffer[begincol + 7][bufferoffset_kvs + i]);
	
		#ifdef _WIDEWORD
		kvdram[dramoffset_kvs + i].range(31, 0) = mykeyvalue0.key; 
		kvdram[dramoffset_kvs + i].range(63, 32) = mykeyvalue0.value; 
		kvdram[dramoffset_kvs + i].range(95, 64) = mykeyvalue1.key; 
		kvdram[dramoffset_kvs + i].range(127, 96) = mykeyvalue1.value; 
		kvdram[dramoffset_kvs + i].range(159, 128) = mykeyvalue2.key; 
		kvdram[dramoffset_kvs + i].range(191, 160) = mykeyvalue2.value; 
		kvdram[dramoffset_kvs + i].range(223, 192) = mykeyvalue3.key; 
		kvdram[dramoffset_kvs + i].range(255, 224) = mykeyvalue3.value; 
		kvdram[dramoffset_kvs + i].range(287, 256) = mykeyvalue4.key; 
		kvdram[dramoffset_kvs + i].range(319, 288) = mykeyvalue4.value; 
		kvdram[dramoffset_kvs + i].range(351, 320) = mykeyvalue5.key; 
		kvdram[dramoffset_kvs + i].range(383, 352) = mykeyvalue5.value; 
		kvdram[dramoffset_kvs + i].range(415, 384) = mykeyvalue6.key; 
		kvdram[dramoffset_kvs + i].range(447, 416) = mykeyvalue6.value; 
		kvdram[dramoffset_kvs + i].range(479, 448) = mykeyvalue7.key; 
		kvdram[dramoffset_kvs + i].range(511, 480) = mykeyvalue7.value; 
		#else 
		kvdram[dramoffset_kvs + i].data[0].key = mykeyvalue0.key;
		kvdram[dramoffset_kvs + i].data[0].value = mykeyvalue0.value;
		kvdram[dramoffset_kvs + i].data[1].key = mykeyvalue1.key;
		kvdram[dramoffset_kvs + i].data[1].value = mykeyvalue1.value;
		kvdram[dramoffset_kvs + i].data[2].key = mykeyvalue2.key;
		kvdram[dramoffset_kvs + i].data[2].value = mykeyvalue2.value;
		kvdram[dramoffset_kvs + i].data[3].key = mykeyvalue3.key;
		kvdram[dramoffset_kvs + i].data[3].value = mykeyvalue3.value;
		kvdram[dramoffset_kvs + i].data[4].key = mykeyvalue4.key;
		kvdram[dramoffset_kvs + i].data[4].value = mykeyvalue4.value;
		kvdram[dramoffset_kvs + i].data[5].key = mykeyvalue5.key;
		kvdram[dramoffset_kvs + i].data[5].value = mykeyvalue5.value;
		kvdram[dramoffset_kvs + i].data[6].key = mykeyvalue6.key;
		kvdram[dramoffset_kvs + i].data[6].value = mykeyvalue6.value;
		kvdram[dramoffset_kvs + i].data[7].key = mykeyvalue7.key;
		kvdram[dramoffset_kvs + i].data[7].value = mykeyvalue7.value;
		#endif 
	
		#ifdef _DEBUGMODE_STATS
		actsutilityobj->globalstats_countkvswritten(VECTOR_SIZE);
		#endif
	}
	#ifdef _DEBUGMODE_KERNELPRINTS
	cout<<"savevdata:: vertices saved: offset: "<<dramoffset_kvs * VECTOR_SIZE<<"-"<<(dramoffset_kvs + size_kvs) * VECTOR_SIZE<<", number of vertex datas written: "<<(size_kvs * VECTOR_SIZE * 2)<<" ("<<size_kvs * VECTOR_SIZE<<" keyvalues written)"<<endl;
	#endif
	#ifdef _DEBUGMODE_KERNELPRINTS2
	if(dramoffset_kvs >= globalparams.BASEOFFSETKVS_VERTEXPTR && dramoffset_kvs < globalparams.BASEOFFSETKVS_VERTEXPTR + VERTEXPTRSSZ_KVS){ cout<< TIMINGRESULTSCOLOR<<"savekeyvalues:: vertices saved: offset: "<<dramoffset_kvs-globalparams.BASEOFFSETKVS_VERTEXPTR * VECTOR_SIZE<<"-"<<((dramoffset_kvs + size_kvs)-globalparams.BASEOFFSETKVS_VERTEXPTR) * VECTOR_SIZE<<", number of vertex datas written: "<<(size_kvs * VECTOR_SIZE * 2)<<" ("<<size_kvs * VECTOR_SIZE<<" keyvalues written)"<< RESET<<endl; }
	if(dramoffset_kvs >= globalparams.BASEOFFSETKVS_DESTVERTICESDATA && dramoffset_kvs < globalparams.BASEOFFSETKVS_DESTVERTICESDATA + VERTICESDATASZ_KVS){ cout<< TIMINGRESULTSCOLOR<<"savekeyvalues:: vertices saved: offset: "<<(dramoffset_kvs-globalparams.BASEOFFSETKVS_DESTVERTICESDATA) * VECTOR_SIZE<<"-"<<((dramoffset_kvs-globalparams.BASEOFFSETKVS_DESTVERTICESDATA) + size_kvs) * VECTOR_SIZE<<", number of vertex datas written: "<<(size_kvs * VECTOR_SIZE * 2)<<" ("<<size_kvs * VECTOR_SIZE<<" keyvalues written)"<< RESET<<endl; }					
	#endif
	return;
}

void //
	#ifdef SW 
	actsproc::
	#endif 
loadvmasks(bool_type enable, uint512_dt * kvdram, unitBRAMwidth_type vmask[BLOCKRAM_SIZE], keyvalue_vbuffer_t tempbuffer[VDATA_PACKINGSIZE][BLOCKRAM_SIZE], batch_type offset_kvs, buffer_type size_kvs, globalparams_t globalparams){
	if(enable == OFF){ return; }
	analysis_type analysis_loopcount1 = BLOCKRAM_SIZE;
	analysis_type analysis_loopcount2 = BLOCKRAM_SIZE / 16;
	analysis_type analysis_loopcount3 = BLOCKRAM_SIZE;
	
	buffer_type transfsize = size_kvs * 16;
	uint32_type bitsbuffer[MAXREDUCEBUFFERSZ];

	LOADVMASKS_LOOP: for (buffer_type i=0; i<size_kvs; i++){
	#pragma HLS LOOP_TRIPCOUNT min=0 max=analysis_loopcount1 avg=analysis_loopcount1
	#pragma HLS PIPELINE II=1
		#ifdef _WIDEWORD
		tempbuffer[0][i] = kvdram[offset_kvs + i].range(31, 0); 
		tempbuffer[1][i] = kvdram[offset_kvs + i].range(63, 32); 
		tempbuffer[2][i] = kvdram[offset_kvs + i].range(95, 64); 
		tempbuffer[3][i] = kvdram[offset_kvs + i].range(127, 96); 
		tempbuffer[4][i] = kvdram[offset_kvs + i].range(159, 128); 
		tempbuffer[5][i] = kvdram[offset_kvs + i].range(191, 160); 
		tempbuffer[6][i] = kvdram[offset_kvs + i].range(223, 192); 
		tempbuffer[7][i] = kvdram[offset_kvs + i].range(255, 224); 
		tempbuffer[8][i] = kvdram[offset_kvs + i].range(287, 256); 
		tempbuffer[9][i] = kvdram[offset_kvs + i].range(319, 288); 
		tempbuffer[10][i] = kvdram[offset_kvs + i].range(351, 320); 
		tempbuffer[11][i] = kvdram[offset_kvs + i].range(383, 352); 
		tempbuffer[12][i] = kvdram[offset_kvs + i].range(415, 384); 
		tempbuffer[13][i] = kvdram[offset_kvs + i].range(447, 416); 
		tempbuffer[14][i] = kvdram[offset_kvs + i].range(479, 448); 
		tempbuffer[15][i] = kvdram[offset_kvs + i].range(511, 480); 
		#else 
		tempbuffer[0][i].key = kvdram[offset_kvs + i].data[0].key;
		tempbuffer[0][i].value = kvdram[offset_kvs + i].data[0].value; 
		tempbuffer[1][i].key = kvdram[offset_kvs + i].data[1].key;
		tempbuffer[1][i].value = kvdram[offset_kvs + i].data[1].value; 
		tempbuffer[2][i].key = kvdram[offset_kvs + i].data[2].key;
		tempbuffer[2][i].value = kvdram[offset_kvs + i].data[2].value; 
		tempbuffer[3][i].key = kvdram[offset_kvs + i].data[3].key;
		tempbuffer[3][i].value = kvdram[offset_kvs + i].data[3].value; 
		tempbuffer[4][i].key = kvdram[offset_kvs + i].data[4].key;
		tempbuffer[4][i].value = kvdram[offset_kvs + i].data[4].value; 
		tempbuffer[5][i].key = kvdram[offset_kvs + i].data[5].key;
		tempbuffer[5][i].value = kvdram[offset_kvs + i].data[5].value; 
		tempbuffer[6][i].key = kvdram[offset_kvs + i].data[6].key;
		tempbuffer[6][i].value = kvdram[offset_kvs + i].data[6].value; 
		tempbuffer[7][i].key = kvdram[offset_kvs + i].data[7].key;
		tempbuffer[7][i].value = kvdram[offset_kvs + i].data[7].value; 
		
		#endif 
		#ifdef _DEBUGMODE_STATS
		actsutilityobj->globalstats_countkvsread(VECTOR_SIZE);
		#endif
	}
	
	buffer_type index = 0;
	LOADVMASKS_LOOP1: for (buffer_type i=0; i<size_kvs; i++){
	#pragma HLS LOOP_TRIPCOUNT min=0 max=analysis_loopcount2 avg=analysis_loopcount2
	#pragma HLS PIPELINE II=8
		#ifdef _WIDEWORD
		bitsbuffer[index + 0] = tempbuffer[0][i];
		bitsbuffer[index + 1] = tempbuffer[1][i];
		bitsbuffer[index + 2] = tempbuffer[2][i];
		bitsbuffer[index + 3] = tempbuffer[3][i];
		bitsbuffer[index + 4] = tempbuffer[4][i];
		bitsbuffer[index + 5] = tempbuffer[5][i];
		bitsbuffer[index + 6] = tempbuffer[6][i];
		bitsbuffer[index + 7] = tempbuffer[7][i];
		bitsbuffer[index + 8] = tempbuffer[8][i];
		bitsbuffer[index + 9] = tempbuffer[9][i];
		bitsbuffer[index + 10] = tempbuffer[10][i];
		bitsbuffer[index + 11] = tempbuffer[11][i];
		bitsbuffer[index + 12] = tempbuffer[12][i];
		bitsbuffer[index + 13] = tempbuffer[13][i];
		bitsbuffer[index + 14] = tempbuffer[14][i];
		bitsbuffer[index + 15] = tempbuffer[15][i];
		#else 
		bitsbuffer[index + 0] = tempbuffer[0][i].key;
		bitsbuffer[index + 0 + 1] = tempbuffer[0][i].value;
		bitsbuffer[index + 2] = tempbuffer[1][i].key;
		bitsbuffer[index + 2 + 1] = tempbuffer[1][i].value;
		bitsbuffer[index + 4] = tempbuffer[2][i].key;
		bitsbuffer[index + 4 + 1] = tempbuffer[2][i].value;
		bitsbuffer[index + 6] = tempbuffer[3][i].key;
		bitsbuffer[index + 6 + 1] = tempbuffer[3][i].value;
		bitsbuffer[index + 8] = tempbuffer[4][i].key;
		bitsbuffer[index + 8 + 1] = tempbuffer[4][i].value;
		bitsbuffer[index + 10] = tempbuffer[5][i].key;
		bitsbuffer[index + 10 + 1] = tempbuffer[5][i].value;
		bitsbuffer[index + 12] = tempbuffer[6][i].key;
		bitsbuffer[index + 12 + 1] = tempbuffer[6][i].value;
		bitsbuffer[index + 14] = tempbuffer[7][i].key;
		bitsbuffer[index + 14 + 1] = tempbuffer[7][i].value;
		#endif 
		
		index += VECTOR_SIZE * 2;
	}

	unitBRAMwidth_type tempvmask;
	#pragma HLS DATA_PACK variable = tempvmask			
	LOADVMASKS_LOOP2: for (buffer_type i=0; i<transfsize; i++){ // transfsize, reducebuffersz
	#pragma HLS LOOP_TRIPCOUNT min=0 max=analysis_loopcount3 avg=analysis_loopcount3
	#pragma HLS PIPELINE II=1
		#ifdef _WIDEWORD
		tempvmask.data[0].key = bitsbuffer[i].range(0, 0);
		tempvmask.data[0].value = bitsbuffer[i].range(1, 1);
		tempvmask.data[1].key = bitsbuffer[i].range(2, 2);
		tempvmask.data[1].value = bitsbuffer[i].range(3, 3);
		tempvmask.data[2].key = bitsbuffer[i].range(4, 4);
		tempvmask.data[2].value = bitsbuffer[i].range(5, 5);
		tempvmask.data[3].key = bitsbuffer[i].range(6, 6);
		tempvmask.data[3].value = bitsbuffer[i].range(7, 7);
		tempvmask.data[4].key = bitsbuffer[i].range(8, 8);
		tempvmask.data[4].value = bitsbuffer[i].range(9, 9);
		tempvmask.data[5].key = bitsbuffer[i].range(10, 10);
		tempvmask.data[5].value = bitsbuffer[i].range(11, 11);
		tempvmask.data[6].key = bitsbuffer[i].range(12, 12);
		tempvmask.data[6].value = bitsbuffer[i].range(13, 13);
		tempvmask.data[7].key = bitsbuffer[i].range(14, 14);
		tempvmask.data[7].value = bitsbuffer[i].range(15, 15);
		tempvmask.data[8].key = bitsbuffer[i].range(16, 16);
		tempvmask.data[8].value = bitsbuffer[i].range(17, 17);
		tempvmask.data[9].key = bitsbuffer[i].range(18, 18);
		tempvmask.data[9].value = bitsbuffer[i].range(19, 19);
		tempvmask.data[10].key = bitsbuffer[i].range(20, 20);
		tempvmask.data[10].value = bitsbuffer[i].range(21, 21);
		tempvmask.data[11].key = bitsbuffer[i].range(22, 22);
		tempvmask.data[11].value = bitsbuffer[i].range(23, 23);
		tempvmask.data[12].key = bitsbuffer[i].range(24, 24);
		tempvmask.data[12].value = bitsbuffer[i].range(25, 25);
		tempvmask.data[13].key = bitsbuffer[i].range(26, 26);
		tempvmask.data[13].value = bitsbuffer[i].range(27, 27);
		tempvmask.data[14].key = bitsbuffer[i].range(28, 28);
		tempvmask.data[14].value = bitsbuffer[i].range(29, 29);
		tempvmask.data[15].key = bitsbuffer[i].range(30, 30);
		tempvmask.data[15].value = bitsbuffer[i].range(31, 31);
		#else 
		tempvmask.data[0].key = READFROM_UINT(bitsbuffer[i], 0, 1);
		tempvmask.data[0].value = READFROM_UINT(bitsbuffer[i], 1, 1);
		tempvmask.data[1].key = READFROM_UINT(bitsbuffer[i], 2, 1);
		tempvmask.data[1].value = READFROM_UINT(bitsbuffer[i], 3, 1);
		tempvmask.data[2].key = READFROM_UINT(bitsbuffer[i], 4, 1);
		tempvmask.data[2].value = READFROM_UINT(bitsbuffer[i], 5, 1);
		tempvmask.data[3].key = READFROM_UINT(bitsbuffer[i], 6, 1);
		tempvmask.data[3].value = READFROM_UINT(bitsbuffer[i], 7, 1);
		tempvmask.data[4].key = READFROM_UINT(bitsbuffer[i], 8, 1);
		tempvmask.data[4].value = READFROM_UINT(bitsbuffer[i], 9, 1);
		tempvmask.data[5].key = READFROM_UINT(bitsbuffer[i], 10, 1);
		tempvmask.data[5].value = READFROM_UINT(bitsbuffer[i], 11, 1);
		tempvmask.data[6].key = READFROM_UINT(bitsbuffer[i], 12, 1);
		tempvmask.data[6].value = READFROM_UINT(bitsbuffer[i], 13, 1);
		tempvmask.data[7].key = READFROM_UINT(bitsbuffer[i], 14, 1);
		tempvmask.data[7].value = READFROM_UINT(bitsbuffer[i], 15, 1);
		tempvmask.data[8].key = READFROM_UINT(bitsbuffer[i], 16, 1);
		tempvmask.data[8].value = READFROM_UINT(bitsbuffer[i], 17, 1);
		tempvmask.data[9].key = READFROM_UINT(bitsbuffer[i], 18, 1);
		tempvmask.data[9].value = READFROM_UINT(bitsbuffer[i], 19, 1);
		tempvmask.data[10].key = READFROM_UINT(bitsbuffer[i], 20, 1);
		tempvmask.data[10].value = READFROM_UINT(bitsbuffer[i], 21, 1);
		tempvmask.data[11].key = READFROM_UINT(bitsbuffer[i], 22, 1);
		tempvmask.data[11].value = READFROM_UINT(bitsbuffer[i], 23, 1);
		tempvmask.data[12].key = READFROM_UINT(bitsbuffer[i], 24, 1);
		tempvmask.data[12].value = READFROM_UINT(bitsbuffer[i], 25, 1);
		tempvmask.data[13].key = READFROM_UINT(bitsbuffer[i], 26, 1);
		tempvmask.data[13].value = READFROM_UINT(bitsbuffer[i], 27, 1);
		tempvmask.data[14].key = READFROM_UINT(bitsbuffer[i], 28, 1);
		tempvmask.data[14].value = READFROM_UINT(bitsbuffer[i], 29, 1);
		tempvmask.data[15].key = READFROM_UINT(bitsbuffer[i], 30, 1);
		tempvmask.data[15].value = READFROM_UINT(bitsbuffer[i], 31, 1);
		#endif
		
		vmask[i] = tempvmask;	
	}
	return;
}

void //
	#ifdef SW 
	actsproc::
	#endif 
loadmany1vmasks(bool_type enable, uint512_dt * kvdram, unitBRAMwidth_type vmask0[BLOCKRAM_SIZE], keyvalue_vbuffer_t tempbuffer[VDATA_PACKINGSIZE][BLOCKRAM_SIZE], batch_type offset_kvs, buffer_type size_kvs, globalparams_t globalparams){
	if(enable == OFF){ return; }
	analysis_type analysis_loopcount1 = BLOCKRAM_SIZE;
	analysis_type analysis_loopcount2 = BLOCKRAM_SIZE / 16;
	analysis_type analysis_loopcount3 = BLOCKRAM_SIZE;
	
	buffer_type transfsize = size_kvs * 16;
	uint32_type bitsbuffer[MAXREDUCEBUFFERSZ];

	LOADVMASKS_LOOP: for (buffer_type i=0; i<size_kvs; i++){
	#pragma HLS LOOP_TRIPCOUNT min=0 max=analysis_loopcount1 avg=analysis_loopcount1
	#pragma HLS PIPELINE II=1
		#ifdef _WIDEWORD
		tempbuffer[0][i] = kvdram[offset_kvs + i].range(31, 0); 
		tempbuffer[1][i] = kvdram[offset_kvs + i].range(63, 32); 
		tempbuffer[2][i] = kvdram[offset_kvs + i].range(95, 64); 
		tempbuffer[3][i] = kvdram[offset_kvs + i].range(127, 96); 
		tempbuffer[4][i] = kvdram[offset_kvs + i].range(159, 128); 
		tempbuffer[5][i] = kvdram[offset_kvs + i].range(191, 160); 
		tempbuffer[6][i] = kvdram[offset_kvs + i].range(223, 192); 
		tempbuffer[7][i] = kvdram[offset_kvs + i].range(255, 224); 
		tempbuffer[8][i] = kvdram[offset_kvs + i].range(287, 256); 
		tempbuffer[9][i] = kvdram[offset_kvs + i].range(319, 288); 
		tempbuffer[10][i] = kvdram[offset_kvs + i].range(351, 320); 
		tempbuffer[11][i] = kvdram[offset_kvs + i].range(383, 352); 
		tempbuffer[12][i] = kvdram[offset_kvs + i].range(415, 384); 
		tempbuffer[13][i] = kvdram[offset_kvs + i].range(447, 416); 
		tempbuffer[14][i] = kvdram[offset_kvs + i].range(479, 448); 
		tempbuffer[15][i] = kvdram[offset_kvs + i].range(511, 480); 
		#else 
		tempbuffer[0][i].key = kvdram[offset_kvs + i].data[0].key;
		tempbuffer[0][i].value = kvdram[offset_kvs + i].data[0].value; 
		tempbuffer[1][i].key = kvdram[offset_kvs + i].data[1].key;
		tempbuffer[1][i].value = kvdram[offset_kvs + i].data[1].value; 
		tempbuffer[2][i].key = kvdram[offset_kvs + i].data[2].key;
		tempbuffer[2][i].value = kvdram[offset_kvs + i].data[2].value; 
		tempbuffer[3][i].key = kvdram[offset_kvs + i].data[3].key;
		tempbuffer[3][i].value = kvdram[offset_kvs + i].data[3].value; 
		tempbuffer[4][i].key = kvdram[offset_kvs + i].data[4].key;
		tempbuffer[4][i].value = kvdram[offset_kvs + i].data[4].value; 
		tempbuffer[5][i].key = kvdram[offset_kvs + i].data[5].key;
		tempbuffer[5][i].value = kvdram[offset_kvs + i].data[5].value; 
		tempbuffer[6][i].key = kvdram[offset_kvs + i].data[6].key;
		tempbuffer[6][i].value = kvdram[offset_kvs + i].data[6].value; 
		tempbuffer[7][i].key = kvdram[offset_kvs + i].data[7].key;
		tempbuffer[7][i].value = kvdram[offset_kvs + i].data[7].value; 
		
		#endif 
		#ifdef _DEBUGMODE_STATS
		actsutilityobj->globalstats_countkvsread(VECTOR_SIZE);
		#endif
	}
	
	uint32_type D0;
	uint32_type D1;
	uint32_type D2;
	uint32_type D3;
	uint32_type D4;
	uint32_type D5;
	uint32_type D6;
	uint32_type D7;
	uint32_type D8;
	uint32_type D9;
	uint32_type D10;
	uint32_type D11;
	uint32_type D12;
	uint32_type D13;
	uint32_type D14;
	uint32_type D15;
	buffer_type index = 0;
	LOADVMASKS_LOOP1: for (buffer_type i=0; i<size_kvs; i++){
	#pragma HLS LOOP_TRIPCOUNT min=0 max=analysis_loopcount2 avg=analysis_loopcount2
	#pragma HLS PIPELINE II=8
		#ifdef _WIDEWORD
		bitsbuffer[index + 0] = tempbuffer[0][i];
		bitsbuffer[index + 1] = tempbuffer[1][i];
		bitsbuffer[index + 2] = tempbuffer[2][i];
		bitsbuffer[index + 3] = tempbuffer[3][i];
		bitsbuffer[index + 4] = tempbuffer[4][i];
		bitsbuffer[index + 5] = tempbuffer[5][i];
		bitsbuffer[index + 6] = tempbuffer[6][i];
		bitsbuffer[index + 7] = tempbuffer[7][i];
		bitsbuffer[index + 8] = tempbuffer[8][i];
		bitsbuffer[index + 9] = tempbuffer[9][i];
		bitsbuffer[index + 10] = tempbuffer[10][i];
		bitsbuffer[index + 11] = tempbuffer[11][i];
		bitsbuffer[index + 12] = tempbuffer[12][i];
		bitsbuffer[index + 13] = tempbuffer[13][i];
		bitsbuffer[index + 14] = tempbuffer[14][i];
		bitsbuffer[index + 15] = tempbuffer[15][i];
		#else 
		bitsbuffer[index + 0] = tempbuffer[0][i].key;
		bitsbuffer[index + 1] = tempbuffer[0][i].value;
		bitsbuffer[index + 2] = tempbuffer[1][i].key;
		bitsbuffer[index + 3] = tempbuffer[1][i].value;
		bitsbuffer[index + 4] = tempbuffer[2][i].key;
		bitsbuffer[index + 5] = tempbuffer[2][i].value;
		bitsbuffer[index + 6] = tempbuffer[3][i].key;
		bitsbuffer[index + 7] = tempbuffer[3][i].value;
		bitsbuffer[index + 8] = tempbuffer[4][i].key;
		bitsbuffer[index + 9] = tempbuffer[4][i].value;
		bitsbuffer[index + 10] = tempbuffer[5][i].key;
		bitsbuffer[index + 11] = tempbuffer[5][i].value;
		bitsbuffer[index + 12] = tempbuffer[6][i].key;
		bitsbuffer[index + 13] = tempbuffer[6][i].value;
		bitsbuffer[index + 14] = tempbuffer[7][i].key;
		bitsbuffer[index + 15] = tempbuffer[7][i].value;
		#endif
		
		index += VECTOR_SIZE * 2;
	}

	unitBRAMwidth_type tempvmask;
	#pragma HLS DATA_PACK variable = tempvmask	
	LOADVMASKS_LOOP2: for (buffer_type i=0; i<transfsize; i++){ // transfsize, reducebuffersz
	#pragma HLS LOOP_TRIPCOUNT min=0 max=analysis_loopcount3 avg=analysis_loopcount3
	#pragma HLS PIPELINE II=1
		#ifdef _WIDEWORD
		tempvmask.data[0].key = bitsbuffer[i].range(0, 0);
		tempvmask.data[0].value = bitsbuffer[i].range(1, 1);
		tempvmask.data[1].key = bitsbuffer[i].range(2, 2);
		tempvmask.data[1].value = bitsbuffer[i].range(3, 3);
		tempvmask.data[2].key = bitsbuffer[i].range(4, 4);
		tempvmask.data[2].value = bitsbuffer[i].range(5, 5);
		tempvmask.data[3].key = bitsbuffer[i].range(6, 6);
		tempvmask.data[3].value = bitsbuffer[i].range(7, 7);
		tempvmask.data[4].key = bitsbuffer[i].range(8, 8);
		tempvmask.data[4].value = bitsbuffer[i].range(9, 9);
		tempvmask.data[5].key = bitsbuffer[i].range(10, 10);
		tempvmask.data[5].value = bitsbuffer[i].range(11, 11);
		tempvmask.data[6].key = bitsbuffer[i].range(12, 12);
		tempvmask.data[6].value = bitsbuffer[i].range(13, 13);
		tempvmask.data[7].key = bitsbuffer[i].range(14, 14);
		tempvmask.data[7].value = bitsbuffer[i].range(15, 15);
		tempvmask.data[8].key = bitsbuffer[i].range(16, 16);
		tempvmask.data[8].value = bitsbuffer[i].range(17, 17);
		tempvmask.data[9].key = bitsbuffer[i].range(18, 18);
		tempvmask.data[9].value = bitsbuffer[i].range(19, 19);
		tempvmask.data[10].key = bitsbuffer[i].range(20, 20);
		tempvmask.data[10].value = bitsbuffer[i].range(21, 21);
		tempvmask.data[11].key = bitsbuffer[i].range(22, 22);
		tempvmask.data[11].value = bitsbuffer[i].range(23, 23);
		tempvmask.data[12].key = bitsbuffer[i].range(24, 24);
		tempvmask.data[12].value = bitsbuffer[i].range(25, 25);
		tempvmask.data[13].key = bitsbuffer[i].range(26, 26);
		tempvmask.data[13].value = bitsbuffer[i].range(27, 27);
		tempvmask.data[14].key = bitsbuffer[i].range(28, 28);
		tempvmask.data[14].value = bitsbuffer[i].range(29, 29);
		tempvmask.data[15].key = bitsbuffer[i].range(30, 30);
		tempvmask.data[15].value = bitsbuffer[i].range(31, 31);
		#else 
		tempvmask.data[0].key = READFROM_UINT(bitsbuffer[i], 0, 1);
		tempvmask.data[0].value = READFROM_UINT(bitsbuffer[i], 1, 1);
		tempvmask.data[1].key = READFROM_UINT(bitsbuffer[i], 2, 1);
		tempvmask.data[1].value = READFROM_UINT(bitsbuffer[i], 3, 1);
		tempvmask.data[2].key = READFROM_UINT(bitsbuffer[i], 4, 1);
		tempvmask.data[2].value = READFROM_UINT(bitsbuffer[i], 5, 1);
		tempvmask.data[3].key = READFROM_UINT(bitsbuffer[i], 6, 1);
		tempvmask.data[3].value = READFROM_UINT(bitsbuffer[i], 7, 1);
		tempvmask.data[4].key = READFROM_UINT(bitsbuffer[i], 8, 1);
		tempvmask.data[4].value = READFROM_UINT(bitsbuffer[i], 9, 1);
		tempvmask.data[5].key = READFROM_UINT(bitsbuffer[i], 10, 1);
		tempvmask.data[5].value = READFROM_UINT(bitsbuffer[i], 11, 1);
		tempvmask.data[6].key = READFROM_UINT(bitsbuffer[i], 12, 1);
		tempvmask.data[6].value = READFROM_UINT(bitsbuffer[i], 13, 1);
		tempvmask.data[7].key = READFROM_UINT(bitsbuffer[i], 14, 1);
		tempvmask.data[7].value = READFROM_UINT(bitsbuffer[i], 15, 1);
		tempvmask.data[8].key = READFROM_UINT(bitsbuffer[i], 16, 1);
		tempvmask.data[8].value = READFROM_UINT(bitsbuffer[i], 17, 1);
		tempvmask.data[9].key = READFROM_UINT(bitsbuffer[i], 18, 1);
		tempvmask.data[9].value = READFROM_UINT(bitsbuffer[i], 19, 1);
		tempvmask.data[10].key = READFROM_UINT(bitsbuffer[i], 20, 1);
		tempvmask.data[10].value = READFROM_UINT(bitsbuffer[i], 21, 1);
		tempvmask.data[11].key = READFROM_UINT(bitsbuffer[i], 22, 1);
		tempvmask.data[11].value = READFROM_UINT(bitsbuffer[i], 23, 1);
		tempvmask.data[12].key = READFROM_UINT(bitsbuffer[i], 24, 1);
		tempvmask.data[12].value = READFROM_UINT(bitsbuffer[i], 25, 1);
		tempvmask.data[13].key = READFROM_UINT(bitsbuffer[i], 26, 1);
		tempvmask.data[13].value = READFROM_UINT(bitsbuffer[i], 27, 1);
		tempvmask.data[14].key = READFROM_UINT(bitsbuffer[i], 28, 1);
		tempvmask.data[14].value = READFROM_UINT(bitsbuffer[i], 29, 1);
		tempvmask.data[15].key = READFROM_UINT(bitsbuffer[i], 30, 1);
		tempvmask.data[15].value = READFROM_UINT(bitsbuffer[i], 31, 1);
		#endif
		
		// mask 
		vmask0[i] = tempvmask;	
	}
	return;
}
void //
	#ifdef SW 
	actsproc::
	#endif 
loadmany2vmasks(bool_type enable, uint512_dt * kvdram, unitBRAMwidth_type vmask0[BLOCKRAM_SIZE],unitBRAMwidth_type vmask1[BLOCKRAM_SIZE], keyvalue_vbuffer_t tempbuffer[VDATA_PACKINGSIZE][BLOCKRAM_SIZE], batch_type offset_kvs, buffer_type size_kvs, globalparams_t globalparams){
	if(enable == OFF){ return; }
	analysis_type analysis_loopcount1 = BLOCKRAM_SIZE;
	analysis_type analysis_loopcount2 = BLOCKRAM_SIZE / 16;
	analysis_type analysis_loopcount3 = BLOCKRAM_SIZE;
	
	buffer_type transfsize = size_kvs * 16;
	uint32_type bitsbuffer[MAXREDUCEBUFFERSZ];

	LOADVMASKS_LOOP: for (buffer_type i=0; i<size_kvs; i++){
	#pragma HLS LOOP_TRIPCOUNT min=0 max=analysis_loopcount1 avg=analysis_loopcount1
	#pragma HLS PIPELINE II=1
		#ifdef _WIDEWORD
		tempbuffer[0][i] = kvdram[offset_kvs + i].range(31, 0); 
		tempbuffer[1][i] = kvdram[offset_kvs + i].range(63, 32); 
		tempbuffer[2][i] = kvdram[offset_kvs + i].range(95, 64); 
		tempbuffer[3][i] = kvdram[offset_kvs + i].range(127, 96); 
		tempbuffer[4][i] = kvdram[offset_kvs + i].range(159, 128); 
		tempbuffer[5][i] = kvdram[offset_kvs + i].range(191, 160); 
		tempbuffer[6][i] = kvdram[offset_kvs + i].range(223, 192); 
		tempbuffer[7][i] = kvdram[offset_kvs + i].range(255, 224); 
		tempbuffer[8][i] = kvdram[offset_kvs + i].range(287, 256); 
		tempbuffer[9][i] = kvdram[offset_kvs + i].range(319, 288); 
		tempbuffer[10][i] = kvdram[offset_kvs + i].range(351, 320); 
		tempbuffer[11][i] = kvdram[offset_kvs + i].range(383, 352); 
		tempbuffer[12][i] = kvdram[offset_kvs + i].range(415, 384); 
		tempbuffer[13][i] = kvdram[offset_kvs + i].range(447, 416); 
		tempbuffer[14][i] = kvdram[offset_kvs + i].range(479, 448); 
		tempbuffer[15][i] = kvdram[offset_kvs + i].range(511, 480); 
		#else 
		tempbuffer[0][i].key = kvdram[offset_kvs + i].data[0].key;
		tempbuffer[0][i].value = kvdram[offset_kvs + i].data[0].value; 
		tempbuffer[1][i].key = kvdram[offset_kvs + i].data[1].key;
		tempbuffer[1][i].value = kvdram[offset_kvs + i].data[1].value; 
		tempbuffer[2][i].key = kvdram[offset_kvs + i].data[2].key;
		tempbuffer[2][i].value = kvdram[offset_kvs + i].data[2].value; 
		tempbuffer[3][i].key = kvdram[offset_kvs + i].data[3].key;
		tempbuffer[3][i].value = kvdram[offset_kvs + i].data[3].value; 
		tempbuffer[4][i].key = kvdram[offset_kvs + i].data[4].key;
		tempbuffer[4][i].value = kvdram[offset_kvs + i].data[4].value; 
		tempbuffer[5][i].key = kvdram[offset_kvs + i].data[5].key;
		tempbuffer[5][i].value = kvdram[offset_kvs + i].data[5].value; 
		tempbuffer[6][i].key = kvdram[offset_kvs + i].data[6].key;
		tempbuffer[6][i].value = kvdram[offset_kvs + i].data[6].value; 
		tempbuffer[7][i].key = kvdram[offset_kvs + i].data[7].key;
		tempbuffer[7][i].value = kvdram[offset_kvs + i].data[7].value; 
		
		#endif 
		#ifdef _DEBUGMODE_STATS
		actsutilityobj->globalstats_countkvsread(VECTOR_SIZE);
		#endif
	}
	
	uint32_type D0;
	uint32_type D1;
	uint32_type D2;
	uint32_type D3;
	uint32_type D4;
	uint32_type D5;
	uint32_type D6;
	uint32_type D7;
	uint32_type D8;
	uint32_type D9;
	uint32_type D10;
	uint32_type D11;
	uint32_type D12;
	uint32_type D13;
	uint32_type D14;
	uint32_type D15;
	buffer_type index = 0;
	LOADVMASKS_LOOP1: for (buffer_type i=0; i<size_kvs; i++){
	#pragma HLS LOOP_TRIPCOUNT min=0 max=analysis_loopcount2 avg=analysis_loopcount2
	#pragma HLS PIPELINE II=8
		#ifdef _WIDEWORD
		bitsbuffer[index + 0] = tempbuffer[0][i];
		bitsbuffer[index + 1] = tempbuffer[1][i];
		bitsbuffer[index + 2] = tempbuffer[2][i];
		bitsbuffer[index + 3] = tempbuffer[3][i];
		bitsbuffer[index + 4] = tempbuffer[4][i];
		bitsbuffer[index + 5] = tempbuffer[5][i];
		bitsbuffer[index + 6] = tempbuffer[6][i];
		bitsbuffer[index + 7] = tempbuffer[7][i];
		bitsbuffer[index + 8] = tempbuffer[8][i];
		bitsbuffer[index + 9] = tempbuffer[9][i];
		bitsbuffer[index + 10] = tempbuffer[10][i];
		bitsbuffer[index + 11] = tempbuffer[11][i];
		bitsbuffer[index + 12] = tempbuffer[12][i];
		bitsbuffer[index + 13] = tempbuffer[13][i];
		bitsbuffer[index + 14] = tempbuffer[14][i];
		bitsbuffer[index + 15] = tempbuffer[15][i];
		#else 
		bitsbuffer[index + 0] = tempbuffer[0][i].key;
		bitsbuffer[index + 1] = tempbuffer[0][i].value;
		bitsbuffer[index + 2] = tempbuffer[1][i].key;
		bitsbuffer[index + 3] = tempbuffer[1][i].value;
		bitsbuffer[index + 4] = tempbuffer[2][i].key;
		bitsbuffer[index + 5] = tempbuffer[2][i].value;
		bitsbuffer[index + 6] = tempbuffer[3][i].key;
		bitsbuffer[index + 7] = tempbuffer[3][i].value;
		bitsbuffer[index + 8] = tempbuffer[4][i].key;
		bitsbuffer[index + 9] = tempbuffer[4][i].value;
		bitsbuffer[index + 10] = tempbuffer[5][i].key;
		bitsbuffer[index + 11] = tempbuffer[5][i].value;
		bitsbuffer[index + 12] = tempbuffer[6][i].key;
		bitsbuffer[index + 13] = tempbuffer[6][i].value;
		bitsbuffer[index + 14] = tempbuffer[7][i].key;
		bitsbuffer[index + 15] = tempbuffer[7][i].value;
		#endif
		
		index += VECTOR_SIZE * 2;
	}

	unitBRAMwidth_type tempvmask;
	#pragma HLS DATA_PACK variable = tempvmask	
	LOADVMASKS_LOOP2: for (buffer_type i=0; i<transfsize; i++){ // transfsize, reducebuffersz
	#pragma HLS LOOP_TRIPCOUNT min=0 max=analysis_loopcount3 avg=analysis_loopcount3
	#pragma HLS PIPELINE II=1
		#ifdef _WIDEWORD
		tempvmask.data[0].key = bitsbuffer[i].range(0, 0);
		tempvmask.data[0].value = bitsbuffer[i].range(1, 1);
		tempvmask.data[1].key = bitsbuffer[i].range(2, 2);
		tempvmask.data[1].value = bitsbuffer[i].range(3, 3);
		tempvmask.data[2].key = bitsbuffer[i].range(4, 4);
		tempvmask.data[2].value = bitsbuffer[i].range(5, 5);
		tempvmask.data[3].key = bitsbuffer[i].range(6, 6);
		tempvmask.data[3].value = bitsbuffer[i].range(7, 7);
		tempvmask.data[4].key = bitsbuffer[i].range(8, 8);
		tempvmask.data[4].value = bitsbuffer[i].range(9, 9);
		tempvmask.data[5].key = bitsbuffer[i].range(10, 10);
		tempvmask.data[5].value = bitsbuffer[i].range(11, 11);
		tempvmask.data[6].key = bitsbuffer[i].range(12, 12);
		tempvmask.data[6].value = bitsbuffer[i].range(13, 13);
		tempvmask.data[7].key = bitsbuffer[i].range(14, 14);
		tempvmask.data[7].value = bitsbuffer[i].range(15, 15);
		tempvmask.data[8].key = bitsbuffer[i].range(16, 16);
		tempvmask.data[8].value = bitsbuffer[i].range(17, 17);
		tempvmask.data[9].key = bitsbuffer[i].range(18, 18);
		tempvmask.data[9].value = bitsbuffer[i].range(19, 19);
		tempvmask.data[10].key = bitsbuffer[i].range(20, 20);
		tempvmask.data[10].value = bitsbuffer[i].range(21, 21);
		tempvmask.data[11].key = bitsbuffer[i].range(22, 22);
		tempvmask.data[11].value = bitsbuffer[i].range(23, 23);
		tempvmask.data[12].key = bitsbuffer[i].range(24, 24);
		tempvmask.data[12].value = bitsbuffer[i].range(25, 25);
		tempvmask.data[13].key = bitsbuffer[i].range(26, 26);
		tempvmask.data[13].value = bitsbuffer[i].range(27, 27);
		tempvmask.data[14].key = bitsbuffer[i].range(28, 28);
		tempvmask.data[14].value = bitsbuffer[i].range(29, 29);
		tempvmask.data[15].key = bitsbuffer[i].range(30, 30);
		tempvmask.data[15].value = bitsbuffer[i].range(31, 31);
		#else 
		tempvmask.data[0].key = READFROM_UINT(bitsbuffer[i], 0, 1);
		tempvmask.data[0].value = READFROM_UINT(bitsbuffer[i], 1, 1);
		tempvmask.data[1].key = READFROM_UINT(bitsbuffer[i], 2, 1);
		tempvmask.data[1].value = READFROM_UINT(bitsbuffer[i], 3, 1);
		tempvmask.data[2].key = READFROM_UINT(bitsbuffer[i], 4, 1);
		tempvmask.data[2].value = READFROM_UINT(bitsbuffer[i], 5, 1);
		tempvmask.data[3].key = READFROM_UINT(bitsbuffer[i], 6, 1);
		tempvmask.data[3].value = READFROM_UINT(bitsbuffer[i], 7, 1);
		tempvmask.data[4].key = READFROM_UINT(bitsbuffer[i], 8, 1);
		tempvmask.data[4].value = READFROM_UINT(bitsbuffer[i], 9, 1);
		tempvmask.data[5].key = READFROM_UINT(bitsbuffer[i], 10, 1);
		tempvmask.data[5].value = READFROM_UINT(bitsbuffer[i], 11, 1);
		tempvmask.data[6].key = READFROM_UINT(bitsbuffer[i], 12, 1);
		tempvmask.data[6].value = READFROM_UINT(bitsbuffer[i], 13, 1);
		tempvmask.data[7].key = READFROM_UINT(bitsbuffer[i], 14, 1);
		tempvmask.data[7].value = READFROM_UINT(bitsbuffer[i], 15, 1);
		tempvmask.data[8].key = READFROM_UINT(bitsbuffer[i], 16, 1);
		tempvmask.data[8].value = READFROM_UINT(bitsbuffer[i], 17, 1);
		tempvmask.data[9].key = READFROM_UINT(bitsbuffer[i], 18, 1);
		tempvmask.data[9].value = READFROM_UINT(bitsbuffer[i], 19, 1);
		tempvmask.data[10].key = READFROM_UINT(bitsbuffer[i], 20, 1);
		tempvmask.data[10].value = READFROM_UINT(bitsbuffer[i], 21, 1);
		tempvmask.data[11].key = READFROM_UINT(bitsbuffer[i], 22, 1);
		tempvmask.data[11].value = READFROM_UINT(bitsbuffer[i], 23, 1);
		tempvmask.data[12].key = READFROM_UINT(bitsbuffer[i], 24, 1);
		tempvmask.data[12].value = READFROM_UINT(bitsbuffer[i], 25, 1);
		tempvmask.data[13].key = READFROM_UINT(bitsbuffer[i], 26, 1);
		tempvmask.data[13].value = READFROM_UINT(bitsbuffer[i], 27, 1);
		tempvmask.data[14].key = READFROM_UINT(bitsbuffer[i], 28, 1);
		tempvmask.data[14].value = READFROM_UINT(bitsbuffer[i], 29, 1);
		tempvmask.data[15].key = READFROM_UINT(bitsbuffer[i], 30, 1);
		tempvmask.data[15].value = READFROM_UINT(bitsbuffer[i], 31, 1);
		#endif
		
		// mask 
		vmask0[i] = tempvmask;	
		vmask1[i] = tempvmask;	
	}
	return;
}
void //
	#ifdef SW 
	actsproc::
	#endif 
loadmany3vmasks(bool_type enable, uint512_dt * kvdram, unitBRAMwidth_type vmask0[BLOCKRAM_SIZE],unitBRAMwidth_type vmask1[BLOCKRAM_SIZE],unitBRAMwidth_type vmask2[BLOCKRAM_SIZE], keyvalue_vbuffer_t tempbuffer[VDATA_PACKINGSIZE][BLOCKRAM_SIZE], batch_type offset_kvs, buffer_type size_kvs, globalparams_t globalparams){
	if(enable == OFF){ return; }
	analysis_type analysis_loopcount1 = BLOCKRAM_SIZE;
	analysis_type analysis_loopcount2 = BLOCKRAM_SIZE / 16;
	analysis_type analysis_loopcount3 = BLOCKRAM_SIZE;
	
	buffer_type transfsize = size_kvs * 16;
	uint32_type bitsbuffer[MAXREDUCEBUFFERSZ];

	LOADVMASKS_LOOP: for (buffer_type i=0; i<size_kvs; i++){
	#pragma HLS LOOP_TRIPCOUNT min=0 max=analysis_loopcount1 avg=analysis_loopcount1
	#pragma HLS PIPELINE II=1
		#ifdef _WIDEWORD
		tempbuffer[0][i] = kvdram[offset_kvs + i].range(31, 0); 
		tempbuffer[1][i] = kvdram[offset_kvs + i].range(63, 32); 
		tempbuffer[2][i] = kvdram[offset_kvs + i].range(95, 64); 
		tempbuffer[3][i] = kvdram[offset_kvs + i].range(127, 96); 
		tempbuffer[4][i] = kvdram[offset_kvs + i].range(159, 128); 
		tempbuffer[5][i] = kvdram[offset_kvs + i].range(191, 160); 
		tempbuffer[6][i] = kvdram[offset_kvs + i].range(223, 192); 
		tempbuffer[7][i] = kvdram[offset_kvs + i].range(255, 224); 
		tempbuffer[8][i] = kvdram[offset_kvs + i].range(287, 256); 
		tempbuffer[9][i] = kvdram[offset_kvs + i].range(319, 288); 
		tempbuffer[10][i] = kvdram[offset_kvs + i].range(351, 320); 
		tempbuffer[11][i] = kvdram[offset_kvs + i].range(383, 352); 
		tempbuffer[12][i] = kvdram[offset_kvs + i].range(415, 384); 
		tempbuffer[13][i] = kvdram[offset_kvs + i].range(447, 416); 
		tempbuffer[14][i] = kvdram[offset_kvs + i].range(479, 448); 
		tempbuffer[15][i] = kvdram[offset_kvs + i].range(511, 480); 
		#else 
		tempbuffer[0][i].key = kvdram[offset_kvs + i].data[0].key;
		tempbuffer[0][i].value = kvdram[offset_kvs + i].data[0].value; 
		tempbuffer[1][i].key = kvdram[offset_kvs + i].data[1].key;
		tempbuffer[1][i].value = kvdram[offset_kvs + i].data[1].value; 
		tempbuffer[2][i].key = kvdram[offset_kvs + i].data[2].key;
		tempbuffer[2][i].value = kvdram[offset_kvs + i].data[2].value; 
		tempbuffer[3][i].key = kvdram[offset_kvs + i].data[3].key;
		tempbuffer[3][i].value = kvdram[offset_kvs + i].data[3].value; 
		tempbuffer[4][i].key = kvdram[offset_kvs + i].data[4].key;
		tempbuffer[4][i].value = kvdram[offset_kvs + i].data[4].value; 
		tempbuffer[5][i].key = kvdram[offset_kvs + i].data[5].key;
		tempbuffer[5][i].value = kvdram[offset_kvs + i].data[5].value; 
		tempbuffer[6][i].key = kvdram[offset_kvs + i].data[6].key;
		tempbuffer[6][i].value = kvdram[offset_kvs + i].data[6].value; 
		tempbuffer[7][i].key = kvdram[offset_kvs + i].data[7].key;
		tempbuffer[7][i].value = kvdram[offset_kvs + i].data[7].value; 
		
		#endif 
		#ifdef _DEBUGMODE_STATS
		actsutilityobj->globalstats_countkvsread(VECTOR_SIZE);
		#endif
	}
	
	uint32_type D0;
	uint32_type D1;
	uint32_type D2;
	uint32_type D3;
	uint32_type D4;
	uint32_type D5;
	uint32_type D6;
	uint32_type D7;
	uint32_type D8;
	uint32_type D9;
	uint32_type D10;
	uint32_type D11;
	uint32_type D12;
	uint32_type D13;
	uint32_type D14;
	uint32_type D15;
	buffer_type index = 0;
	LOADVMASKS_LOOP1: for (buffer_type i=0; i<size_kvs; i++){
	#pragma HLS LOOP_TRIPCOUNT min=0 max=analysis_loopcount2 avg=analysis_loopcount2
	#pragma HLS PIPELINE II=8
		#ifdef _WIDEWORD
		bitsbuffer[index + 0] = tempbuffer[0][i];
		bitsbuffer[index + 1] = tempbuffer[1][i];
		bitsbuffer[index + 2] = tempbuffer[2][i];
		bitsbuffer[index + 3] = tempbuffer[3][i];
		bitsbuffer[index + 4] = tempbuffer[4][i];
		bitsbuffer[index + 5] = tempbuffer[5][i];
		bitsbuffer[index + 6] = tempbuffer[6][i];
		bitsbuffer[index + 7] = tempbuffer[7][i];
		bitsbuffer[index + 8] = tempbuffer[8][i];
		bitsbuffer[index + 9] = tempbuffer[9][i];
		bitsbuffer[index + 10] = tempbuffer[10][i];
		bitsbuffer[index + 11] = tempbuffer[11][i];
		bitsbuffer[index + 12] = tempbuffer[12][i];
		bitsbuffer[index + 13] = tempbuffer[13][i];
		bitsbuffer[index + 14] = tempbuffer[14][i];
		bitsbuffer[index + 15] = tempbuffer[15][i];
		#else 
		bitsbuffer[index + 0] = tempbuffer[0][i].key;
		bitsbuffer[index + 1] = tempbuffer[0][i].value;
		bitsbuffer[index + 2] = tempbuffer[1][i].key;
		bitsbuffer[index + 3] = tempbuffer[1][i].value;
		bitsbuffer[index + 4] = tempbuffer[2][i].key;
		bitsbuffer[index + 5] = tempbuffer[2][i].value;
		bitsbuffer[index + 6] = tempbuffer[3][i].key;
		bitsbuffer[index + 7] = tempbuffer[3][i].value;
		bitsbuffer[index + 8] = tempbuffer[4][i].key;
		bitsbuffer[index + 9] = tempbuffer[4][i].value;
		bitsbuffer[index + 10] = tempbuffer[5][i].key;
		bitsbuffer[index + 11] = tempbuffer[5][i].value;
		bitsbuffer[index + 12] = tempbuffer[6][i].key;
		bitsbuffer[index + 13] = tempbuffer[6][i].value;
		bitsbuffer[index + 14] = tempbuffer[7][i].key;
		bitsbuffer[index + 15] = tempbuffer[7][i].value;
		#endif
		
		index += VECTOR_SIZE * 2;
	}

	unitBRAMwidth_type tempvmask;
	#pragma HLS DATA_PACK variable = tempvmask	
	LOADVMASKS_LOOP2: for (buffer_type i=0; i<transfsize; i++){ // transfsize, reducebuffersz
	#pragma HLS LOOP_TRIPCOUNT min=0 max=analysis_loopcount3 avg=analysis_loopcount3
	#pragma HLS PIPELINE II=1
		#ifdef _WIDEWORD
		tempvmask.data[0].key = bitsbuffer[i].range(0, 0);
		tempvmask.data[0].value = bitsbuffer[i].range(1, 1);
		tempvmask.data[1].key = bitsbuffer[i].range(2, 2);
		tempvmask.data[1].value = bitsbuffer[i].range(3, 3);
		tempvmask.data[2].key = bitsbuffer[i].range(4, 4);
		tempvmask.data[2].value = bitsbuffer[i].range(5, 5);
		tempvmask.data[3].key = bitsbuffer[i].range(6, 6);
		tempvmask.data[3].value = bitsbuffer[i].range(7, 7);
		tempvmask.data[4].key = bitsbuffer[i].range(8, 8);
		tempvmask.data[4].value = bitsbuffer[i].range(9, 9);
		tempvmask.data[5].key = bitsbuffer[i].range(10, 10);
		tempvmask.data[5].value = bitsbuffer[i].range(11, 11);
		tempvmask.data[6].key = bitsbuffer[i].range(12, 12);
		tempvmask.data[6].value = bitsbuffer[i].range(13, 13);
		tempvmask.data[7].key = bitsbuffer[i].range(14, 14);
		tempvmask.data[7].value = bitsbuffer[i].range(15, 15);
		tempvmask.data[8].key = bitsbuffer[i].range(16, 16);
		tempvmask.data[8].value = bitsbuffer[i].range(17, 17);
		tempvmask.data[9].key = bitsbuffer[i].range(18, 18);
		tempvmask.data[9].value = bitsbuffer[i].range(19, 19);
		tempvmask.data[10].key = bitsbuffer[i].range(20, 20);
		tempvmask.data[10].value = bitsbuffer[i].range(21, 21);
		tempvmask.data[11].key = bitsbuffer[i].range(22, 22);
		tempvmask.data[11].value = bitsbuffer[i].range(23, 23);
		tempvmask.data[12].key = bitsbuffer[i].range(24, 24);
		tempvmask.data[12].value = bitsbuffer[i].range(25, 25);
		tempvmask.data[13].key = bitsbuffer[i].range(26, 26);
		tempvmask.data[13].value = bitsbuffer[i].range(27, 27);
		tempvmask.data[14].key = bitsbuffer[i].range(28, 28);
		tempvmask.data[14].value = bitsbuffer[i].range(29, 29);
		tempvmask.data[15].key = bitsbuffer[i].range(30, 30);
		tempvmask.data[15].value = bitsbuffer[i].range(31, 31);
		#else 
		tempvmask.data[0].key = READFROM_UINT(bitsbuffer[i], 0, 1);
		tempvmask.data[0].value = READFROM_UINT(bitsbuffer[i], 1, 1);
		tempvmask.data[1].key = READFROM_UINT(bitsbuffer[i], 2, 1);
		tempvmask.data[1].value = READFROM_UINT(bitsbuffer[i], 3, 1);
		tempvmask.data[2].key = READFROM_UINT(bitsbuffer[i], 4, 1);
		tempvmask.data[2].value = READFROM_UINT(bitsbuffer[i], 5, 1);
		tempvmask.data[3].key = READFROM_UINT(bitsbuffer[i], 6, 1);
		tempvmask.data[3].value = READFROM_UINT(bitsbuffer[i], 7, 1);
		tempvmask.data[4].key = READFROM_UINT(bitsbuffer[i], 8, 1);
		tempvmask.data[4].value = READFROM_UINT(bitsbuffer[i], 9, 1);
		tempvmask.data[5].key = READFROM_UINT(bitsbuffer[i], 10, 1);
		tempvmask.data[5].value = READFROM_UINT(bitsbuffer[i], 11, 1);
		tempvmask.data[6].key = READFROM_UINT(bitsbuffer[i], 12, 1);
		tempvmask.data[6].value = READFROM_UINT(bitsbuffer[i], 13, 1);
		tempvmask.data[7].key = READFROM_UINT(bitsbuffer[i], 14, 1);
		tempvmask.data[7].value = READFROM_UINT(bitsbuffer[i], 15, 1);
		tempvmask.data[8].key = READFROM_UINT(bitsbuffer[i], 16, 1);
		tempvmask.data[8].value = READFROM_UINT(bitsbuffer[i], 17, 1);
		tempvmask.data[9].key = READFROM_UINT(bitsbuffer[i], 18, 1);
		tempvmask.data[9].value = READFROM_UINT(bitsbuffer[i], 19, 1);
		tempvmask.data[10].key = READFROM_UINT(bitsbuffer[i], 20, 1);
		tempvmask.data[10].value = READFROM_UINT(bitsbuffer[i], 21, 1);
		tempvmask.data[11].key = READFROM_UINT(bitsbuffer[i], 22, 1);
		tempvmask.data[11].value = READFROM_UINT(bitsbuffer[i], 23, 1);
		tempvmask.data[12].key = READFROM_UINT(bitsbuffer[i], 24, 1);
		tempvmask.data[12].value = READFROM_UINT(bitsbuffer[i], 25, 1);
		tempvmask.data[13].key = READFROM_UINT(bitsbuffer[i], 26, 1);
		tempvmask.data[13].value = READFROM_UINT(bitsbuffer[i], 27, 1);
		tempvmask.data[14].key = READFROM_UINT(bitsbuffer[i], 28, 1);
		tempvmask.data[14].value = READFROM_UINT(bitsbuffer[i], 29, 1);
		tempvmask.data[15].key = READFROM_UINT(bitsbuffer[i], 30, 1);
		tempvmask.data[15].value = READFROM_UINT(bitsbuffer[i], 31, 1);
		#endif
		
		// mask 
		vmask0[i] = tempvmask;	
		vmask1[i] = tempvmask;	
		vmask2[i] = tempvmask;	
	}
	return;
}
void //
	#ifdef SW 
	actsproc::
	#endif 
loadmany4vmasks(bool_type enable, uint512_dt * kvdram, unitBRAMwidth_type vmask0[BLOCKRAM_SIZE],unitBRAMwidth_type vmask1[BLOCKRAM_SIZE],unitBRAMwidth_type vmask2[BLOCKRAM_SIZE],unitBRAMwidth_type vmask3[BLOCKRAM_SIZE], keyvalue_vbuffer_t tempbuffer[VDATA_PACKINGSIZE][BLOCKRAM_SIZE], batch_type offset_kvs, buffer_type size_kvs, globalparams_t globalparams){
	if(enable == OFF){ return; }
	analysis_type analysis_loopcount1 = BLOCKRAM_SIZE;
	analysis_type analysis_loopcount2 = BLOCKRAM_SIZE / 16;
	analysis_type analysis_loopcount3 = BLOCKRAM_SIZE;
	
	buffer_type transfsize = size_kvs * 16;
	uint32_type bitsbuffer[MAXREDUCEBUFFERSZ];

	LOADVMASKS_LOOP: for (buffer_type i=0; i<size_kvs; i++){
	#pragma HLS LOOP_TRIPCOUNT min=0 max=analysis_loopcount1 avg=analysis_loopcount1
	#pragma HLS PIPELINE II=1
		#ifdef _WIDEWORD
		tempbuffer[0][i] = kvdram[offset_kvs + i].range(31, 0); 
		tempbuffer[1][i] = kvdram[offset_kvs + i].range(63, 32); 
		tempbuffer[2][i] = kvdram[offset_kvs + i].range(95, 64); 
		tempbuffer[3][i] = kvdram[offset_kvs + i].range(127, 96); 
		tempbuffer[4][i] = kvdram[offset_kvs + i].range(159, 128); 
		tempbuffer[5][i] = kvdram[offset_kvs + i].range(191, 160); 
		tempbuffer[6][i] = kvdram[offset_kvs + i].range(223, 192); 
		tempbuffer[7][i] = kvdram[offset_kvs + i].range(255, 224); 
		tempbuffer[8][i] = kvdram[offset_kvs + i].range(287, 256); 
		tempbuffer[9][i] = kvdram[offset_kvs + i].range(319, 288); 
		tempbuffer[10][i] = kvdram[offset_kvs + i].range(351, 320); 
		tempbuffer[11][i] = kvdram[offset_kvs + i].range(383, 352); 
		tempbuffer[12][i] = kvdram[offset_kvs + i].range(415, 384); 
		tempbuffer[13][i] = kvdram[offset_kvs + i].range(447, 416); 
		tempbuffer[14][i] = kvdram[offset_kvs + i].range(479, 448); 
		tempbuffer[15][i] = kvdram[offset_kvs + i].range(511, 480); 
		#else 
		tempbuffer[0][i].key = kvdram[offset_kvs + i].data[0].key;
		tempbuffer[0][i].value = kvdram[offset_kvs + i].data[0].value; 
		tempbuffer[1][i].key = kvdram[offset_kvs + i].data[1].key;
		tempbuffer[1][i].value = kvdram[offset_kvs + i].data[1].value; 
		tempbuffer[2][i].key = kvdram[offset_kvs + i].data[2].key;
		tempbuffer[2][i].value = kvdram[offset_kvs + i].data[2].value; 
		tempbuffer[3][i].key = kvdram[offset_kvs + i].data[3].key;
		tempbuffer[3][i].value = kvdram[offset_kvs + i].data[3].value; 
		tempbuffer[4][i].key = kvdram[offset_kvs + i].data[4].key;
		tempbuffer[4][i].value = kvdram[offset_kvs + i].data[4].value; 
		tempbuffer[5][i].key = kvdram[offset_kvs + i].data[5].key;
		tempbuffer[5][i].value = kvdram[offset_kvs + i].data[5].value; 
		tempbuffer[6][i].key = kvdram[offset_kvs + i].data[6].key;
		tempbuffer[6][i].value = kvdram[offset_kvs + i].data[6].value; 
		tempbuffer[7][i].key = kvdram[offset_kvs + i].data[7].key;
		tempbuffer[7][i].value = kvdram[offset_kvs + i].data[7].value; 
		
		#endif 
		#ifdef _DEBUGMODE_STATS
		actsutilityobj->globalstats_countkvsread(VECTOR_SIZE);
		#endif
	}
	
	uint32_type D0;
	uint32_type D1;
	uint32_type D2;
	uint32_type D3;
	uint32_type D4;
	uint32_type D5;
	uint32_type D6;
	uint32_type D7;
	uint32_type D8;
	uint32_type D9;
	uint32_type D10;
	uint32_type D11;
	uint32_type D12;
	uint32_type D13;
	uint32_type D14;
	uint32_type D15;
	buffer_type index = 0;
	LOADVMASKS_LOOP1: for (buffer_type i=0; i<size_kvs; i++){
	#pragma HLS LOOP_TRIPCOUNT min=0 max=analysis_loopcount2 avg=analysis_loopcount2
	#pragma HLS PIPELINE II=8
		#ifdef _WIDEWORD
		bitsbuffer[index + 0] = tempbuffer[0][i];
		bitsbuffer[index + 1] = tempbuffer[1][i];
		bitsbuffer[index + 2] = tempbuffer[2][i];
		bitsbuffer[index + 3] = tempbuffer[3][i];
		bitsbuffer[index + 4] = tempbuffer[4][i];
		bitsbuffer[index + 5] = tempbuffer[5][i];
		bitsbuffer[index + 6] = tempbuffer[6][i];
		bitsbuffer[index + 7] = tempbuffer[7][i];
		bitsbuffer[index + 8] = tempbuffer[8][i];
		bitsbuffer[index + 9] = tempbuffer[9][i];
		bitsbuffer[index + 10] = tempbuffer[10][i];
		bitsbuffer[index + 11] = tempbuffer[11][i];
		bitsbuffer[index + 12] = tempbuffer[12][i];
		bitsbuffer[index + 13] = tempbuffer[13][i];
		bitsbuffer[index + 14] = tempbuffer[14][i];
		bitsbuffer[index + 15] = tempbuffer[15][i];
		#else 
		bitsbuffer[index + 0] = tempbuffer[0][i].key;
		bitsbuffer[index + 1] = tempbuffer[0][i].value;
		bitsbuffer[index + 2] = tempbuffer[1][i].key;
		bitsbuffer[index + 3] = tempbuffer[1][i].value;
		bitsbuffer[index + 4] = tempbuffer[2][i].key;
		bitsbuffer[index + 5] = tempbuffer[2][i].value;
		bitsbuffer[index + 6] = tempbuffer[3][i].key;
		bitsbuffer[index + 7] = tempbuffer[3][i].value;
		bitsbuffer[index + 8] = tempbuffer[4][i].key;
		bitsbuffer[index + 9] = tempbuffer[4][i].value;
		bitsbuffer[index + 10] = tempbuffer[5][i].key;
		bitsbuffer[index + 11] = tempbuffer[5][i].value;
		bitsbuffer[index + 12] = tempbuffer[6][i].key;
		bitsbuffer[index + 13] = tempbuffer[6][i].value;
		bitsbuffer[index + 14] = tempbuffer[7][i].key;
		bitsbuffer[index + 15] = tempbuffer[7][i].value;
		#endif
		
		index += VECTOR_SIZE * 2;
	}

	unitBRAMwidth_type tempvmask;
	#pragma HLS DATA_PACK variable = tempvmask	
	LOADVMASKS_LOOP2: for (buffer_type i=0; i<transfsize; i++){ // transfsize, reducebuffersz
	#pragma HLS LOOP_TRIPCOUNT min=0 max=analysis_loopcount3 avg=analysis_loopcount3
	#pragma HLS PIPELINE II=1
		#ifdef _WIDEWORD
		tempvmask.data[0].key = bitsbuffer[i].range(0, 0);
		tempvmask.data[0].value = bitsbuffer[i].range(1, 1);
		tempvmask.data[1].key = bitsbuffer[i].range(2, 2);
		tempvmask.data[1].value = bitsbuffer[i].range(3, 3);
		tempvmask.data[2].key = bitsbuffer[i].range(4, 4);
		tempvmask.data[2].value = bitsbuffer[i].range(5, 5);
		tempvmask.data[3].key = bitsbuffer[i].range(6, 6);
		tempvmask.data[3].value = bitsbuffer[i].range(7, 7);
		tempvmask.data[4].key = bitsbuffer[i].range(8, 8);
		tempvmask.data[4].value = bitsbuffer[i].range(9, 9);
		tempvmask.data[5].key = bitsbuffer[i].range(10, 10);
		tempvmask.data[5].value = bitsbuffer[i].range(11, 11);
		tempvmask.data[6].key = bitsbuffer[i].range(12, 12);
		tempvmask.data[6].value = bitsbuffer[i].range(13, 13);
		tempvmask.data[7].key = bitsbuffer[i].range(14, 14);
		tempvmask.data[7].value = bitsbuffer[i].range(15, 15);
		tempvmask.data[8].key = bitsbuffer[i].range(16, 16);
		tempvmask.data[8].value = bitsbuffer[i].range(17, 17);
		tempvmask.data[9].key = bitsbuffer[i].range(18, 18);
		tempvmask.data[9].value = bitsbuffer[i].range(19, 19);
		tempvmask.data[10].key = bitsbuffer[i].range(20, 20);
		tempvmask.data[10].value = bitsbuffer[i].range(21, 21);
		tempvmask.data[11].key = bitsbuffer[i].range(22, 22);
		tempvmask.data[11].value = bitsbuffer[i].range(23, 23);
		tempvmask.data[12].key = bitsbuffer[i].range(24, 24);
		tempvmask.data[12].value = bitsbuffer[i].range(25, 25);
		tempvmask.data[13].key = bitsbuffer[i].range(26, 26);
		tempvmask.data[13].value = bitsbuffer[i].range(27, 27);
		tempvmask.data[14].key = bitsbuffer[i].range(28, 28);
		tempvmask.data[14].value = bitsbuffer[i].range(29, 29);
		tempvmask.data[15].key = bitsbuffer[i].range(30, 30);
		tempvmask.data[15].value = bitsbuffer[i].range(31, 31);
		#else 
		tempvmask.data[0].key = READFROM_UINT(bitsbuffer[i], 0, 1);
		tempvmask.data[0].value = READFROM_UINT(bitsbuffer[i], 1, 1);
		tempvmask.data[1].key = READFROM_UINT(bitsbuffer[i], 2, 1);
		tempvmask.data[1].value = READFROM_UINT(bitsbuffer[i], 3, 1);
		tempvmask.data[2].key = READFROM_UINT(bitsbuffer[i], 4, 1);
		tempvmask.data[2].value = READFROM_UINT(bitsbuffer[i], 5, 1);
		tempvmask.data[3].key = READFROM_UINT(bitsbuffer[i], 6, 1);
		tempvmask.data[3].value = READFROM_UINT(bitsbuffer[i], 7, 1);
		tempvmask.data[4].key = READFROM_UINT(bitsbuffer[i], 8, 1);
		tempvmask.data[4].value = READFROM_UINT(bitsbuffer[i], 9, 1);
		tempvmask.data[5].key = READFROM_UINT(bitsbuffer[i], 10, 1);
		tempvmask.data[5].value = READFROM_UINT(bitsbuffer[i], 11, 1);
		tempvmask.data[6].key = READFROM_UINT(bitsbuffer[i], 12, 1);
		tempvmask.data[6].value = READFROM_UINT(bitsbuffer[i], 13, 1);
		tempvmask.data[7].key = READFROM_UINT(bitsbuffer[i], 14, 1);
		tempvmask.data[7].value = READFROM_UINT(bitsbuffer[i], 15, 1);
		tempvmask.data[8].key = READFROM_UINT(bitsbuffer[i], 16, 1);
		tempvmask.data[8].value = READFROM_UINT(bitsbuffer[i], 17, 1);
		tempvmask.data[9].key = READFROM_UINT(bitsbuffer[i], 18, 1);
		tempvmask.data[9].value = READFROM_UINT(bitsbuffer[i], 19, 1);
		tempvmask.data[10].key = READFROM_UINT(bitsbuffer[i], 20, 1);
		tempvmask.data[10].value = READFROM_UINT(bitsbuffer[i], 21, 1);
		tempvmask.data[11].key = READFROM_UINT(bitsbuffer[i], 22, 1);
		tempvmask.data[11].value = READFROM_UINT(bitsbuffer[i], 23, 1);
		tempvmask.data[12].key = READFROM_UINT(bitsbuffer[i], 24, 1);
		tempvmask.data[12].value = READFROM_UINT(bitsbuffer[i], 25, 1);
		tempvmask.data[13].key = READFROM_UINT(bitsbuffer[i], 26, 1);
		tempvmask.data[13].value = READFROM_UINT(bitsbuffer[i], 27, 1);
		tempvmask.data[14].key = READFROM_UINT(bitsbuffer[i], 28, 1);
		tempvmask.data[14].value = READFROM_UINT(bitsbuffer[i], 29, 1);
		tempvmask.data[15].key = READFROM_UINT(bitsbuffer[i], 30, 1);
		tempvmask.data[15].value = READFROM_UINT(bitsbuffer[i], 31, 1);
		#endif
		
		// mask 
		vmask0[i] = tempvmask;	
		vmask1[i] = tempvmask;	
		vmask2[i] = tempvmask;	
		vmask3[i] = tempvmask;	
	}
	return;
}
void //
	#ifdef SW 
	actsproc::
	#endif 
loadmany5vmasks(bool_type enable, uint512_dt * kvdram, unitBRAMwidth_type vmask0[BLOCKRAM_SIZE],unitBRAMwidth_type vmask1[BLOCKRAM_SIZE],unitBRAMwidth_type vmask2[BLOCKRAM_SIZE],unitBRAMwidth_type vmask3[BLOCKRAM_SIZE],unitBRAMwidth_type vmask4[BLOCKRAM_SIZE], keyvalue_vbuffer_t tempbuffer[VDATA_PACKINGSIZE][BLOCKRAM_SIZE], batch_type offset_kvs, buffer_type size_kvs, globalparams_t globalparams){
	if(enable == OFF){ return; }
	analysis_type analysis_loopcount1 = BLOCKRAM_SIZE;
	analysis_type analysis_loopcount2 = BLOCKRAM_SIZE / 16;
	analysis_type analysis_loopcount3 = BLOCKRAM_SIZE;
	
	buffer_type transfsize = size_kvs * 16;
	uint32_type bitsbuffer[MAXREDUCEBUFFERSZ];

	LOADVMASKS_LOOP: for (buffer_type i=0; i<size_kvs; i++){
	#pragma HLS LOOP_TRIPCOUNT min=0 max=analysis_loopcount1 avg=analysis_loopcount1
	#pragma HLS PIPELINE II=1
		#ifdef _WIDEWORD
		tempbuffer[0][i] = kvdram[offset_kvs + i].range(31, 0); 
		tempbuffer[1][i] = kvdram[offset_kvs + i].range(63, 32); 
		tempbuffer[2][i] = kvdram[offset_kvs + i].range(95, 64); 
		tempbuffer[3][i] = kvdram[offset_kvs + i].range(127, 96); 
		tempbuffer[4][i] = kvdram[offset_kvs + i].range(159, 128); 
		tempbuffer[5][i] = kvdram[offset_kvs + i].range(191, 160); 
		tempbuffer[6][i] = kvdram[offset_kvs + i].range(223, 192); 
		tempbuffer[7][i] = kvdram[offset_kvs + i].range(255, 224); 
		tempbuffer[8][i] = kvdram[offset_kvs + i].range(287, 256); 
		tempbuffer[9][i] = kvdram[offset_kvs + i].range(319, 288); 
		tempbuffer[10][i] = kvdram[offset_kvs + i].range(351, 320); 
		tempbuffer[11][i] = kvdram[offset_kvs + i].range(383, 352); 
		tempbuffer[12][i] = kvdram[offset_kvs + i].range(415, 384); 
		tempbuffer[13][i] = kvdram[offset_kvs + i].range(447, 416); 
		tempbuffer[14][i] = kvdram[offset_kvs + i].range(479, 448); 
		tempbuffer[15][i] = kvdram[offset_kvs + i].range(511, 480); 
		#else 
		tempbuffer[0][i].key = kvdram[offset_kvs + i].data[0].key;
		tempbuffer[0][i].value = kvdram[offset_kvs + i].data[0].value; 
		tempbuffer[1][i].key = kvdram[offset_kvs + i].data[1].key;
		tempbuffer[1][i].value = kvdram[offset_kvs + i].data[1].value; 
		tempbuffer[2][i].key = kvdram[offset_kvs + i].data[2].key;
		tempbuffer[2][i].value = kvdram[offset_kvs + i].data[2].value; 
		tempbuffer[3][i].key = kvdram[offset_kvs + i].data[3].key;
		tempbuffer[3][i].value = kvdram[offset_kvs + i].data[3].value; 
		tempbuffer[4][i].key = kvdram[offset_kvs + i].data[4].key;
		tempbuffer[4][i].value = kvdram[offset_kvs + i].data[4].value; 
		tempbuffer[5][i].key = kvdram[offset_kvs + i].data[5].key;
		tempbuffer[5][i].value = kvdram[offset_kvs + i].data[5].value; 
		tempbuffer[6][i].key = kvdram[offset_kvs + i].data[6].key;
		tempbuffer[6][i].value = kvdram[offset_kvs + i].data[6].value; 
		tempbuffer[7][i].key = kvdram[offset_kvs + i].data[7].key;
		tempbuffer[7][i].value = kvdram[offset_kvs + i].data[7].value; 
		
		#endif 
		#ifdef _DEBUGMODE_STATS
		actsutilityobj->globalstats_countkvsread(VECTOR_SIZE);
		#endif
	}
	
	uint32_type D0;
	uint32_type D1;
	uint32_type D2;
	uint32_type D3;
	uint32_type D4;
	uint32_type D5;
	uint32_type D6;
	uint32_type D7;
	uint32_type D8;
	uint32_type D9;
	uint32_type D10;
	uint32_type D11;
	uint32_type D12;
	uint32_type D13;
	uint32_type D14;
	uint32_type D15;
	buffer_type index = 0;
	LOADVMASKS_LOOP1: for (buffer_type i=0; i<size_kvs; i++){
	#pragma HLS LOOP_TRIPCOUNT min=0 max=analysis_loopcount2 avg=analysis_loopcount2
	#pragma HLS PIPELINE II=8
		#ifdef _WIDEWORD
		bitsbuffer[index + 0] = tempbuffer[0][i];
		bitsbuffer[index + 1] = tempbuffer[1][i];
		bitsbuffer[index + 2] = tempbuffer[2][i];
		bitsbuffer[index + 3] = tempbuffer[3][i];
		bitsbuffer[index + 4] = tempbuffer[4][i];
		bitsbuffer[index + 5] = tempbuffer[5][i];
		bitsbuffer[index + 6] = tempbuffer[6][i];
		bitsbuffer[index + 7] = tempbuffer[7][i];
		bitsbuffer[index + 8] = tempbuffer[8][i];
		bitsbuffer[index + 9] = tempbuffer[9][i];
		bitsbuffer[index + 10] = tempbuffer[10][i];
		bitsbuffer[index + 11] = tempbuffer[11][i];
		bitsbuffer[index + 12] = tempbuffer[12][i];
		bitsbuffer[index + 13] = tempbuffer[13][i];
		bitsbuffer[index + 14] = tempbuffer[14][i];
		bitsbuffer[index + 15] = tempbuffer[15][i];
		#else 
		bitsbuffer[index + 0] = tempbuffer[0][i].key;
		bitsbuffer[index + 1] = tempbuffer[0][i].value;
		bitsbuffer[index + 2] = tempbuffer[1][i].key;
		bitsbuffer[index + 3] = tempbuffer[1][i].value;
		bitsbuffer[index + 4] = tempbuffer[2][i].key;
		bitsbuffer[index + 5] = tempbuffer[2][i].value;
		bitsbuffer[index + 6] = tempbuffer[3][i].key;
		bitsbuffer[index + 7] = tempbuffer[3][i].value;
		bitsbuffer[index + 8] = tempbuffer[4][i].key;
		bitsbuffer[index + 9] = tempbuffer[4][i].value;
		bitsbuffer[index + 10] = tempbuffer[5][i].key;
		bitsbuffer[index + 11] = tempbuffer[5][i].value;
		bitsbuffer[index + 12] = tempbuffer[6][i].key;
		bitsbuffer[index + 13] = tempbuffer[6][i].value;
		bitsbuffer[index + 14] = tempbuffer[7][i].key;
		bitsbuffer[index + 15] = tempbuffer[7][i].value;
		#endif
		
		index += VECTOR_SIZE * 2;
	}

	unitBRAMwidth_type tempvmask;
	#pragma HLS DATA_PACK variable = tempvmask	
	LOADVMASKS_LOOP2: for (buffer_type i=0; i<transfsize; i++){ // transfsize, reducebuffersz
	#pragma HLS LOOP_TRIPCOUNT min=0 max=analysis_loopcount3 avg=analysis_loopcount3
	#pragma HLS PIPELINE II=1
		#ifdef _WIDEWORD
		tempvmask.data[0].key = bitsbuffer[i].range(0, 0);
		tempvmask.data[0].value = bitsbuffer[i].range(1, 1);
		tempvmask.data[1].key = bitsbuffer[i].range(2, 2);
		tempvmask.data[1].value = bitsbuffer[i].range(3, 3);
		tempvmask.data[2].key = bitsbuffer[i].range(4, 4);
		tempvmask.data[2].value = bitsbuffer[i].range(5, 5);
		tempvmask.data[3].key = bitsbuffer[i].range(6, 6);
		tempvmask.data[3].value = bitsbuffer[i].range(7, 7);
		tempvmask.data[4].key = bitsbuffer[i].range(8, 8);
		tempvmask.data[4].value = bitsbuffer[i].range(9, 9);
		tempvmask.data[5].key = bitsbuffer[i].range(10, 10);
		tempvmask.data[5].value = bitsbuffer[i].range(11, 11);
		tempvmask.data[6].key = bitsbuffer[i].range(12, 12);
		tempvmask.data[6].value = bitsbuffer[i].range(13, 13);
		tempvmask.data[7].key = bitsbuffer[i].range(14, 14);
		tempvmask.data[7].value = bitsbuffer[i].range(15, 15);
		tempvmask.data[8].key = bitsbuffer[i].range(16, 16);
		tempvmask.data[8].value = bitsbuffer[i].range(17, 17);
		tempvmask.data[9].key = bitsbuffer[i].range(18, 18);
		tempvmask.data[9].value = bitsbuffer[i].range(19, 19);
		tempvmask.data[10].key = bitsbuffer[i].range(20, 20);
		tempvmask.data[10].value = bitsbuffer[i].range(21, 21);
		tempvmask.data[11].key = bitsbuffer[i].range(22, 22);
		tempvmask.data[11].value = bitsbuffer[i].range(23, 23);
		tempvmask.data[12].key = bitsbuffer[i].range(24, 24);
		tempvmask.data[12].value = bitsbuffer[i].range(25, 25);
		tempvmask.data[13].key = bitsbuffer[i].range(26, 26);
		tempvmask.data[13].value = bitsbuffer[i].range(27, 27);
		tempvmask.data[14].key = bitsbuffer[i].range(28, 28);
		tempvmask.data[14].value = bitsbuffer[i].range(29, 29);
		tempvmask.data[15].key = bitsbuffer[i].range(30, 30);
		tempvmask.data[15].value = bitsbuffer[i].range(31, 31);
		#else 
		tempvmask.data[0].key = READFROM_UINT(bitsbuffer[i], 0, 1);
		tempvmask.data[0].value = READFROM_UINT(bitsbuffer[i], 1, 1);
		tempvmask.data[1].key = READFROM_UINT(bitsbuffer[i], 2, 1);
		tempvmask.data[1].value = READFROM_UINT(bitsbuffer[i], 3, 1);
		tempvmask.data[2].key = READFROM_UINT(bitsbuffer[i], 4, 1);
		tempvmask.data[2].value = READFROM_UINT(bitsbuffer[i], 5, 1);
		tempvmask.data[3].key = READFROM_UINT(bitsbuffer[i], 6, 1);
		tempvmask.data[3].value = READFROM_UINT(bitsbuffer[i], 7, 1);
		tempvmask.data[4].key = READFROM_UINT(bitsbuffer[i], 8, 1);
		tempvmask.data[4].value = READFROM_UINT(bitsbuffer[i], 9, 1);
		tempvmask.data[5].key = READFROM_UINT(bitsbuffer[i], 10, 1);
		tempvmask.data[5].value = READFROM_UINT(bitsbuffer[i], 11, 1);
		tempvmask.data[6].key = READFROM_UINT(bitsbuffer[i], 12, 1);
		tempvmask.data[6].value = READFROM_UINT(bitsbuffer[i], 13, 1);
		tempvmask.data[7].key = READFROM_UINT(bitsbuffer[i], 14, 1);
		tempvmask.data[7].value = READFROM_UINT(bitsbuffer[i], 15, 1);
		tempvmask.data[8].key = READFROM_UINT(bitsbuffer[i], 16, 1);
		tempvmask.data[8].value = READFROM_UINT(bitsbuffer[i], 17, 1);
		tempvmask.data[9].key = READFROM_UINT(bitsbuffer[i], 18, 1);
		tempvmask.data[9].value = READFROM_UINT(bitsbuffer[i], 19, 1);
		tempvmask.data[10].key = READFROM_UINT(bitsbuffer[i], 20, 1);
		tempvmask.data[10].value = READFROM_UINT(bitsbuffer[i], 21, 1);
		tempvmask.data[11].key = READFROM_UINT(bitsbuffer[i], 22, 1);
		tempvmask.data[11].value = READFROM_UINT(bitsbuffer[i], 23, 1);
		tempvmask.data[12].key = READFROM_UINT(bitsbuffer[i], 24, 1);
		tempvmask.data[12].value = READFROM_UINT(bitsbuffer[i], 25, 1);
		tempvmask.data[13].key = READFROM_UINT(bitsbuffer[i], 26, 1);
		tempvmask.data[13].value = READFROM_UINT(bitsbuffer[i], 27, 1);
		tempvmask.data[14].key = READFROM_UINT(bitsbuffer[i], 28, 1);
		tempvmask.data[14].value = READFROM_UINT(bitsbuffer[i], 29, 1);
		tempvmask.data[15].key = READFROM_UINT(bitsbuffer[i], 30, 1);
		tempvmask.data[15].value = READFROM_UINT(bitsbuffer[i], 31, 1);
		#endif
		
		// mask 
		vmask0[i] = tempvmask;	
		vmask1[i] = tempvmask;	
		vmask2[i] = tempvmask;	
		vmask3[i] = tempvmask;	
		vmask4[i] = tempvmask;	
	}
	return;
}
void //
	#ifdef SW 
	actsproc::
	#endif 
loadmany6vmasks(bool_type enable, uint512_dt * kvdram, unitBRAMwidth_type vmask0[BLOCKRAM_SIZE],unitBRAMwidth_type vmask1[BLOCKRAM_SIZE],unitBRAMwidth_type vmask2[BLOCKRAM_SIZE],unitBRAMwidth_type vmask3[BLOCKRAM_SIZE],unitBRAMwidth_type vmask4[BLOCKRAM_SIZE],unitBRAMwidth_type vmask5[BLOCKRAM_SIZE], keyvalue_vbuffer_t tempbuffer[VDATA_PACKINGSIZE][BLOCKRAM_SIZE], batch_type offset_kvs, buffer_type size_kvs, globalparams_t globalparams){
	if(enable == OFF){ return; }
	analysis_type analysis_loopcount1 = BLOCKRAM_SIZE;
	analysis_type analysis_loopcount2 = BLOCKRAM_SIZE / 16;
	analysis_type analysis_loopcount3 = BLOCKRAM_SIZE;
	
	buffer_type transfsize = size_kvs * 16;
	uint32_type bitsbuffer[MAXREDUCEBUFFERSZ];

	LOADVMASKS_LOOP: for (buffer_type i=0; i<size_kvs; i++){
	#pragma HLS LOOP_TRIPCOUNT min=0 max=analysis_loopcount1 avg=analysis_loopcount1
	#pragma HLS PIPELINE II=1
		#ifdef _WIDEWORD
		tempbuffer[0][i] = kvdram[offset_kvs + i].range(31, 0); 
		tempbuffer[1][i] = kvdram[offset_kvs + i].range(63, 32); 
		tempbuffer[2][i] = kvdram[offset_kvs + i].range(95, 64); 
		tempbuffer[3][i] = kvdram[offset_kvs + i].range(127, 96); 
		tempbuffer[4][i] = kvdram[offset_kvs + i].range(159, 128); 
		tempbuffer[5][i] = kvdram[offset_kvs + i].range(191, 160); 
		tempbuffer[6][i] = kvdram[offset_kvs + i].range(223, 192); 
		tempbuffer[7][i] = kvdram[offset_kvs + i].range(255, 224); 
		tempbuffer[8][i] = kvdram[offset_kvs + i].range(287, 256); 
		tempbuffer[9][i] = kvdram[offset_kvs + i].range(319, 288); 
		tempbuffer[10][i] = kvdram[offset_kvs + i].range(351, 320); 
		tempbuffer[11][i] = kvdram[offset_kvs + i].range(383, 352); 
		tempbuffer[12][i] = kvdram[offset_kvs + i].range(415, 384); 
		tempbuffer[13][i] = kvdram[offset_kvs + i].range(447, 416); 
		tempbuffer[14][i] = kvdram[offset_kvs + i].range(479, 448); 
		tempbuffer[15][i] = kvdram[offset_kvs + i].range(511, 480); 
		#else 
		tempbuffer[0][i].key = kvdram[offset_kvs + i].data[0].key;
		tempbuffer[0][i].value = kvdram[offset_kvs + i].data[0].value; 
		tempbuffer[1][i].key = kvdram[offset_kvs + i].data[1].key;
		tempbuffer[1][i].value = kvdram[offset_kvs + i].data[1].value; 
		tempbuffer[2][i].key = kvdram[offset_kvs + i].data[2].key;
		tempbuffer[2][i].value = kvdram[offset_kvs + i].data[2].value; 
		tempbuffer[3][i].key = kvdram[offset_kvs + i].data[3].key;
		tempbuffer[3][i].value = kvdram[offset_kvs + i].data[3].value; 
		tempbuffer[4][i].key = kvdram[offset_kvs + i].data[4].key;
		tempbuffer[4][i].value = kvdram[offset_kvs + i].data[4].value; 
		tempbuffer[5][i].key = kvdram[offset_kvs + i].data[5].key;
		tempbuffer[5][i].value = kvdram[offset_kvs + i].data[5].value; 
		tempbuffer[6][i].key = kvdram[offset_kvs + i].data[6].key;
		tempbuffer[6][i].value = kvdram[offset_kvs + i].data[6].value; 
		tempbuffer[7][i].key = kvdram[offset_kvs + i].data[7].key;
		tempbuffer[7][i].value = kvdram[offset_kvs + i].data[7].value; 
		
		#endif 
		#ifdef _DEBUGMODE_STATS
		actsutilityobj->globalstats_countkvsread(VECTOR_SIZE);
		#endif
	}
	
	uint32_type D0;
	uint32_type D1;
	uint32_type D2;
	uint32_type D3;
	uint32_type D4;
	uint32_type D5;
	uint32_type D6;
	uint32_type D7;
	uint32_type D8;
	uint32_type D9;
	uint32_type D10;
	uint32_type D11;
	uint32_type D12;
	uint32_type D13;
	uint32_type D14;
	uint32_type D15;
	buffer_type index = 0;
	LOADVMASKS_LOOP1: for (buffer_type i=0; i<size_kvs; i++){
	#pragma HLS LOOP_TRIPCOUNT min=0 max=analysis_loopcount2 avg=analysis_loopcount2
	#pragma HLS PIPELINE II=8
		#ifdef _WIDEWORD
		bitsbuffer[index + 0] = tempbuffer[0][i];
		bitsbuffer[index + 1] = tempbuffer[1][i];
		bitsbuffer[index + 2] = tempbuffer[2][i];
		bitsbuffer[index + 3] = tempbuffer[3][i];
		bitsbuffer[index + 4] = tempbuffer[4][i];
		bitsbuffer[index + 5] = tempbuffer[5][i];
		bitsbuffer[index + 6] = tempbuffer[6][i];
		bitsbuffer[index + 7] = tempbuffer[7][i];
		bitsbuffer[index + 8] = tempbuffer[8][i];
		bitsbuffer[index + 9] = tempbuffer[9][i];
		bitsbuffer[index + 10] = tempbuffer[10][i];
		bitsbuffer[index + 11] = tempbuffer[11][i];
		bitsbuffer[index + 12] = tempbuffer[12][i];
		bitsbuffer[index + 13] = tempbuffer[13][i];
		bitsbuffer[index + 14] = tempbuffer[14][i];
		bitsbuffer[index + 15] = tempbuffer[15][i];
		#else 
		bitsbuffer[index + 0] = tempbuffer[0][i].key;
		bitsbuffer[index + 1] = tempbuffer[0][i].value;
		bitsbuffer[index + 2] = tempbuffer[1][i].key;
		bitsbuffer[index + 3] = tempbuffer[1][i].value;
		bitsbuffer[index + 4] = tempbuffer[2][i].key;
		bitsbuffer[index + 5] = tempbuffer[2][i].value;
		bitsbuffer[index + 6] = tempbuffer[3][i].key;
		bitsbuffer[index + 7] = tempbuffer[3][i].value;
		bitsbuffer[index + 8] = tempbuffer[4][i].key;
		bitsbuffer[index + 9] = tempbuffer[4][i].value;
		bitsbuffer[index + 10] = tempbuffer[5][i].key;
		bitsbuffer[index + 11] = tempbuffer[5][i].value;
		bitsbuffer[index + 12] = tempbuffer[6][i].key;
		bitsbuffer[index + 13] = tempbuffer[6][i].value;
		bitsbuffer[index + 14] = tempbuffer[7][i].key;
		bitsbuffer[index + 15] = tempbuffer[7][i].value;
		#endif
		
		index += VECTOR_SIZE * 2;
	}

	unitBRAMwidth_type tempvmask;
	#pragma HLS DATA_PACK variable = tempvmask	
	LOADVMASKS_LOOP2: for (buffer_type i=0; i<transfsize; i++){ // transfsize, reducebuffersz
	#pragma HLS LOOP_TRIPCOUNT min=0 max=analysis_loopcount3 avg=analysis_loopcount3
	#pragma HLS PIPELINE II=1
		#ifdef _WIDEWORD
		tempvmask.data[0].key = bitsbuffer[i].range(0, 0);
		tempvmask.data[0].value = bitsbuffer[i].range(1, 1);
		tempvmask.data[1].key = bitsbuffer[i].range(2, 2);
		tempvmask.data[1].value = bitsbuffer[i].range(3, 3);
		tempvmask.data[2].key = bitsbuffer[i].range(4, 4);
		tempvmask.data[2].value = bitsbuffer[i].range(5, 5);
		tempvmask.data[3].key = bitsbuffer[i].range(6, 6);
		tempvmask.data[3].value = bitsbuffer[i].range(7, 7);
		tempvmask.data[4].key = bitsbuffer[i].range(8, 8);
		tempvmask.data[4].value = bitsbuffer[i].range(9, 9);
		tempvmask.data[5].key = bitsbuffer[i].range(10, 10);
		tempvmask.data[5].value = bitsbuffer[i].range(11, 11);
		tempvmask.data[6].key = bitsbuffer[i].range(12, 12);
		tempvmask.data[6].value = bitsbuffer[i].range(13, 13);
		tempvmask.data[7].key = bitsbuffer[i].range(14, 14);
		tempvmask.data[7].value = bitsbuffer[i].range(15, 15);
		tempvmask.data[8].key = bitsbuffer[i].range(16, 16);
		tempvmask.data[8].value = bitsbuffer[i].range(17, 17);
		tempvmask.data[9].key = bitsbuffer[i].range(18, 18);
		tempvmask.data[9].value = bitsbuffer[i].range(19, 19);
		tempvmask.data[10].key = bitsbuffer[i].range(20, 20);
		tempvmask.data[10].value = bitsbuffer[i].range(21, 21);
		tempvmask.data[11].key = bitsbuffer[i].range(22, 22);
		tempvmask.data[11].value = bitsbuffer[i].range(23, 23);
		tempvmask.data[12].key = bitsbuffer[i].range(24, 24);
		tempvmask.data[12].value = bitsbuffer[i].range(25, 25);
		tempvmask.data[13].key = bitsbuffer[i].range(26, 26);
		tempvmask.data[13].value = bitsbuffer[i].range(27, 27);
		tempvmask.data[14].key = bitsbuffer[i].range(28, 28);
		tempvmask.data[14].value = bitsbuffer[i].range(29, 29);
		tempvmask.data[15].key = bitsbuffer[i].range(30, 30);
		tempvmask.data[15].value = bitsbuffer[i].range(31, 31);
		#else 
		tempvmask.data[0].key = READFROM_UINT(bitsbuffer[i], 0, 1);
		tempvmask.data[0].value = READFROM_UINT(bitsbuffer[i], 1, 1);
		tempvmask.data[1].key = READFROM_UINT(bitsbuffer[i], 2, 1);
		tempvmask.data[1].value = READFROM_UINT(bitsbuffer[i], 3, 1);
		tempvmask.data[2].key = READFROM_UINT(bitsbuffer[i], 4, 1);
		tempvmask.data[2].value = READFROM_UINT(bitsbuffer[i], 5, 1);
		tempvmask.data[3].key = READFROM_UINT(bitsbuffer[i], 6, 1);
		tempvmask.data[3].value = READFROM_UINT(bitsbuffer[i], 7, 1);
		tempvmask.data[4].key = READFROM_UINT(bitsbuffer[i], 8, 1);
		tempvmask.data[4].value = READFROM_UINT(bitsbuffer[i], 9, 1);
		tempvmask.data[5].key = READFROM_UINT(bitsbuffer[i], 10, 1);
		tempvmask.data[5].value = READFROM_UINT(bitsbuffer[i], 11, 1);
		tempvmask.data[6].key = READFROM_UINT(bitsbuffer[i], 12, 1);
		tempvmask.data[6].value = READFROM_UINT(bitsbuffer[i], 13, 1);
		tempvmask.data[7].key = READFROM_UINT(bitsbuffer[i], 14, 1);
		tempvmask.data[7].value = READFROM_UINT(bitsbuffer[i], 15, 1);
		tempvmask.data[8].key = READFROM_UINT(bitsbuffer[i], 16, 1);
		tempvmask.data[8].value = READFROM_UINT(bitsbuffer[i], 17, 1);
		tempvmask.data[9].key = READFROM_UINT(bitsbuffer[i], 18, 1);
		tempvmask.data[9].value = READFROM_UINT(bitsbuffer[i], 19, 1);
		tempvmask.data[10].key = READFROM_UINT(bitsbuffer[i], 20, 1);
		tempvmask.data[10].value = READFROM_UINT(bitsbuffer[i], 21, 1);
		tempvmask.data[11].key = READFROM_UINT(bitsbuffer[i], 22, 1);
		tempvmask.data[11].value = READFROM_UINT(bitsbuffer[i], 23, 1);
		tempvmask.data[12].key = READFROM_UINT(bitsbuffer[i], 24, 1);
		tempvmask.data[12].value = READFROM_UINT(bitsbuffer[i], 25, 1);
		tempvmask.data[13].key = READFROM_UINT(bitsbuffer[i], 26, 1);
		tempvmask.data[13].value = READFROM_UINT(bitsbuffer[i], 27, 1);
		tempvmask.data[14].key = READFROM_UINT(bitsbuffer[i], 28, 1);
		tempvmask.data[14].value = READFROM_UINT(bitsbuffer[i], 29, 1);
		tempvmask.data[15].key = READFROM_UINT(bitsbuffer[i], 30, 1);
		tempvmask.data[15].value = READFROM_UINT(bitsbuffer[i], 31, 1);
		#endif
		
		// mask 
		vmask0[i] = tempvmask;	
		vmask1[i] = tempvmask;	
		vmask2[i] = tempvmask;	
		vmask3[i] = tempvmask;	
		vmask4[i] = tempvmask;	
		vmask5[i] = tempvmask;	
	}
	return;
}
void //
	#ifdef SW 
	actsproc::
	#endif 
loadmany7vmasks(bool_type enable, uint512_dt * kvdram, unitBRAMwidth_type vmask0[BLOCKRAM_SIZE],unitBRAMwidth_type vmask1[BLOCKRAM_SIZE],unitBRAMwidth_type vmask2[BLOCKRAM_SIZE],unitBRAMwidth_type vmask3[BLOCKRAM_SIZE],unitBRAMwidth_type vmask4[BLOCKRAM_SIZE],unitBRAMwidth_type vmask5[BLOCKRAM_SIZE],unitBRAMwidth_type vmask6[BLOCKRAM_SIZE], keyvalue_vbuffer_t tempbuffer[VDATA_PACKINGSIZE][BLOCKRAM_SIZE], batch_type offset_kvs, buffer_type size_kvs, globalparams_t globalparams){
	if(enable == OFF){ return; }
	analysis_type analysis_loopcount1 = BLOCKRAM_SIZE;
	analysis_type analysis_loopcount2 = BLOCKRAM_SIZE / 16;
	analysis_type analysis_loopcount3 = BLOCKRAM_SIZE;
	
	buffer_type transfsize = size_kvs * 16;
	uint32_type bitsbuffer[MAXREDUCEBUFFERSZ];

	LOADVMASKS_LOOP: for (buffer_type i=0; i<size_kvs; i++){
	#pragma HLS LOOP_TRIPCOUNT min=0 max=analysis_loopcount1 avg=analysis_loopcount1
	#pragma HLS PIPELINE II=1
		#ifdef _WIDEWORD
		tempbuffer[0][i] = kvdram[offset_kvs + i].range(31, 0); 
		tempbuffer[1][i] = kvdram[offset_kvs + i].range(63, 32); 
		tempbuffer[2][i] = kvdram[offset_kvs + i].range(95, 64); 
		tempbuffer[3][i] = kvdram[offset_kvs + i].range(127, 96); 
		tempbuffer[4][i] = kvdram[offset_kvs + i].range(159, 128); 
		tempbuffer[5][i] = kvdram[offset_kvs + i].range(191, 160); 
		tempbuffer[6][i] = kvdram[offset_kvs + i].range(223, 192); 
		tempbuffer[7][i] = kvdram[offset_kvs + i].range(255, 224); 
		tempbuffer[8][i] = kvdram[offset_kvs + i].range(287, 256); 
		tempbuffer[9][i] = kvdram[offset_kvs + i].range(319, 288); 
		tempbuffer[10][i] = kvdram[offset_kvs + i].range(351, 320); 
		tempbuffer[11][i] = kvdram[offset_kvs + i].range(383, 352); 
		tempbuffer[12][i] = kvdram[offset_kvs + i].range(415, 384); 
		tempbuffer[13][i] = kvdram[offset_kvs + i].range(447, 416); 
		tempbuffer[14][i] = kvdram[offset_kvs + i].range(479, 448); 
		tempbuffer[15][i] = kvdram[offset_kvs + i].range(511, 480); 
		#else 
		tempbuffer[0][i].key = kvdram[offset_kvs + i].data[0].key;
		tempbuffer[0][i].value = kvdram[offset_kvs + i].data[0].value; 
		tempbuffer[1][i].key = kvdram[offset_kvs + i].data[1].key;
		tempbuffer[1][i].value = kvdram[offset_kvs + i].data[1].value; 
		tempbuffer[2][i].key = kvdram[offset_kvs + i].data[2].key;
		tempbuffer[2][i].value = kvdram[offset_kvs + i].data[2].value; 
		tempbuffer[3][i].key = kvdram[offset_kvs + i].data[3].key;
		tempbuffer[3][i].value = kvdram[offset_kvs + i].data[3].value; 
		tempbuffer[4][i].key = kvdram[offset_kvs + i].data[4].key;
		tempbuffer[4][i].value = kvdram[offset_kvs + i].data[4].value; 
		tempbuffer[5][i].key = kvdram[offset_kvs + i].data[5].key;
		tempbuffer[5][i].value = kvdram[offset_kvs + i].data[5].value; 
		tempbuffer[6][i].key = kvdram[offset_kvs + i].data[6].key;
		tempbuffer[6][i].value = kvdram[offset_kvs + i].data[6].value; 
		tempbuffer[7][i].key = kvdram[offset_kvs + i].data[7].key;
		tempbuffer[7][i].value = kvdram[offset_kvs + i].data[7].value; 
		
		#endif 
		#ifdef _DEBUGMODE_STATS
		actsutilityobj->globalstats_countkvsread(VECTOR_SIZE);
		#endif
	}
	
	uint32_type D0;
	uint32_type D1;
	uint32_type D2;
	uint32_type D3;
	uint32_type D4;
	uint32_type D5;
	uint32_type D6;
	uint32_type D7;
	uint32_type D8;
	uint32_type D9;
	uint32_type D10;
	uint32_type D11;
	uint32_type D12;
	uint32_type D13;
	uint32_type D14;
	uint32_type D15;
	buffer_type index = 0;
	LOADVMASKS_LOOP1: for (buffer_type i=0; i<size_kvs; i++){
	#pragma HLS LOOP_TRIPCOUNT min=0 max=analysis_loopcount2 avg=analysis_loopcount2
	#pragma HLS PIPELINE II=8
		#ifdef _WIDEWORD
		bitsbuffer[index + 0] = tempbuffer[0][i];
		bitsbuffer[index + 1] = tempbuffer[1][i];
		bitsbuffer[index + 2] = tempbuffer[2][i];
		bitsbuffer[index + 3] = tempbuffer[3][i];
		bitsbuffer[index + 4] = tempbuffer[4][i];
		bitsbuffer[index + 5] = tempbuffer[5][i];
		bitsbuffer[index + 6] = tempbuffer[6][i];
		bitsbuffer[index + 7] = tempbuffer[7][i];
		bitsbuffer[index + 8] = tempbuffer[8][i];
		bitsbuffer[index + 9] = tempbuffer[9][i];
		bitsbuffer[index + 10] = tempbuffer[10][i];
		bitsbuffer[index + 11] = tempbuffer[11][i];
		bitsbuffer[index + 12] = tempbuffer[12][i];
		bitsbuffer[index + 13] = tempbuffer[13][i];
		bitsbuffer[index + 14] = tempbuffer[14][i];
		bitsbuffer[index + 15] = tempbuffer[15][i];
		#else 
		bitsbuffer[index + 0] = tempbuffer[0][i].key;
		bitsbuffer[index + 1] = tempbuffer[0][i].value;
		bitsbuffer[index + 2] = tempbuffer[1][i].key;
		bitsbuffer[index + 3] = tempbuffer[1][i].value;
		bitsbuffer[index + 4] = tempbuffer[2][i].key;
		bitsbuffer[index + 5] = tempbuffer[2][i].value;
		bitsbuffer[index + 6] = tempbuffer[3][i].key;
		bitsbuffer[index + 7] = tempbuffer[3][i].value;
		bitsbuffer[index + 8] = tempbuffer[4][i].key;
		bitsbuffer[index + 9] = tempbuffer[4][i].value;
		bitsbuffer[index + 10] = tempbuffer[5][i].key;
		bitsbuffer[index + 11] = tempbuffer[5][i].value;
		bitsbuffer[index + 12] = tempbuffer[6][i].key;
		bitsbuffer[index + 13] = tempbuffer[6][i].value;
		bitsbuffer[index + 14] = tempbuffer[7][i].key;
		bitsbuffer[index + 15] = tempbuffer[7][i].value;
		#endif
		
		index += VECTOR_SIZE * 2;
	}

	unitBRAMwidth_type tempvmask;
	#pragma HLS DATA_PACK variable = tempvmask	
	LOADVMASKS_LOOP2: for (buffer_type i=0; i<transfsize; i++){ // transfsize, reducebuffersz
	#pragma HLS LOOP_TRIPCOUNT min=0 max=analysis_loopcount3 avg=analysis_loopcount3
	#pragma HLS PIPELINE II=1
		#ifdef _WIDEWORD
		tempvmask.data[0].key = bitsbuffer[i].range(0, 0);
		tempvmask.data[0].value = bitsbuffer[i].range(1, 1);
		tempvmask.data[1].key = bitsbuffer[i].range(2, 2);
		tempvmask.data[1].value = bitsbuffer[i].range(3, 3);
		tempvmask.data[2].key = bitsbuffer[i].range(4, 4);
		tempvmask.data[2].value = bitsbuffer[i].range(5, 5);
		tempvmask.data[3].key = bitsbuffer[i].range(6, 6);
		tempvmask.data[3].value = bitsbuffer[i].range(7, 7);
		tempvmask.data[4].key = bitsbuffer[i].range(8, 8);
		tempvmask.data[4].value = bitsbuffer[i].range(9, 9);
		tempvmask.data[5].key = bitsbuffer[i].range(10, 10);
		tempvmask.data[5].value = bitsbuffer[i].range(11, 11);
		tempvmask.data[6].key = bitsbuffer[i].range(12, 12);
		tempvmask.data[6].value = bitsbuffer[i].range(13, 13);
		tempvmask.data[7].key = bitsbuffer[i].range(14, 14);
		tempvmask.data[7].value = bitsbuffer[i].range(15, 15);
		tempvmask.data[8].key = bitsbuffer[i].range(16, 16);
		tempvmask.data[8].value = bitsbuffer[i].range(17, 17);
		tempvmask.data[9].key = bitsbuffer[i].range(18, 18);
		tempvmask.data[9].value = bitsbuffer[i].range(19, 19);
		tempvmask.data[10].key = bitsbuffer[i].range(20, 20);
		tempvmask.data[10].value = bitsbuffer[i].range(21, 21);
		tempvmask.data[11].key = bitsbuffer[i].range(22, 22);
		tempvmask.data[11].value = bitsbuffer[i].range(23, 23);
		tempvmask.data[12].key = bitsbuffer[i].range(24, 24);
		tempvmask.data[12].value = bitsbuffer[i].range(25, 25);
		tempvmask.data[13].key = bitsbuffer[i].range(26, 26);
		tempvmask.data[13].value = bitsbuffer[i].range(27, 27);
		tempvmask.data[14].key = bitsbuffer[i].range(28, 28);
		tempvmask.data[14].value = bitsbuffer[i].range(29, 29);
		tempvmask.data[15].key = bitsbuffer[i].range(30, 30);
		tempvmask.data[15].value = bitsbuffer[i].range(31, 31);
		#else 
		tempvmask.data[0].key = READFROM_UINT(bitsbuffer[i], 0, 1);
		tempvmask.data[0].value = READFROM_UINT(bitsbuffer[i], 1, 1);
		tempvmask.data[1].key = READFROM_UINT(bitsbuffer[i], 2, 1);
		tempvmask.data[1].value = READFROM_UINT(bitsbuffer[i], 3, 1);
		tempvmask.data[2].key = READFROM_UINT(bitsbuffer[i], 4, 1);
		tempvmask.data[2].value = READFROM_UINT(bitsbuffer[i], 5, 1);
		tempvmask.data[3].key = READFROM_UINT(bitsbuffer[i], 6, 1);
		tempvmask.data[3].value = READFROM_UINT(bitsbuffer[i], 7, 1);
		tempvmask.data[4].key = READFROM_UINT(bitsbuffer[i], 8, 1);
		tempvmask.data[4].value = READFROM_UINT(bitsbuffer[i], 9, 1);
		tempvmask.data[5].key = READFROM_UINT(bitsbuffer[i], 10, 1);
		tempvmask.data[5].value = READFROM_UINT(bitsbuffer[i], 11, 1);
		tempvmask.data[6].key = READFROM_UINT(bitsbuffer[i], 12, 1);
		tempvmask.data[6].value = READFROM_UINT(bitsbuffer[i], 13, 1);
		tempvmask.data[7].key = READFROM_UINT(bitsbuffer[i], 14, 1);
		tempvmask.data[7].value = READFROM_UINT(bitsbuffer[i], 15, 1);
		tempvmask.data[8].key = READFROM_UINT(bitsbuffer[i], 16, 1);
		tempvmask.data[8].value = READFROM_UINT(bitsbuffer[i], 17, 1);
		tempvmask.data[9].key = READFROM_UINT(bitsbuffer[i], 18, 1);
		tempvmask.data[9].value = READFROM_UINT(bitsbuffer[i], 19, 1);
		tempvmask.data[10].key = READFROM_UINT(bitsbuffer[i], 20, 1);
		tempvmask.data[10].value = READFROM_UINT(bitsbuffer[i], 21, 1);
		tempvmask.data[11].key = READFROM_UINT(bitsbuffer[i], 22, 1);
		tempvmask.data[11].value = READFROM_UINT(bitsbuffer[i], 23, 1);
		tempvmask.data[12].key = READFROM_UINT(bitsbuffer[i], 24, 1);
		tempvmask.data[12].value = READFROM_UINT(bitsbuffer[i], 25, 1);
		tempvmask.data[13].key = READFROM_UINT(bitsbuffer[i], 26, 1);
		tempvmask.data[13].value = READFROM_UINT(bitsbuffer[i], 27, 1);
		tempvmask.data[14].key = READFROM_UINT(bitsbuffer[i], 28, 1);
		tempvmask.data[14].value = READFROM_UINT(bitsbuffer[i], 29, 1);
		tempvmask.data[15].key = READFROM_UINT(bitsbuffer[i], 30, 1);
		tempvmask.data[15].value = READFROM_UINT(bitsbuffer[i], 31, 1);
		#endif
		
		// mask 
		vmask0[i] = tempvmask;	
		vmask1[i] = tempvmask;	
		vmask2[i] = tempvmask;	
		vmask3[i] = tempvmask;	
		vmask4[i] = tempvmask;	
		vmask5[i] = tempvmask;	
		vmask6[i] = tempvmask;	
	}
	return;
}
void //
	#ifdef SW 
	actsproc::
	#endif 
loadmany8vmasks(bool_type enable, uint512_dt * kvdram, unitBRAMwidth_type vmask0[BLOCKRAM_SIZE],unitBRAMwidth_type vmask1[BLOCKRAM_SIZE],unitBRAMwidth_type vmask2[BLOCKRAM_SIZE],unitBRAMwidth_type vmask3[BLOCKRAM_SIZE],unitBRAMwidth_type vmask4[BLOCKRAM_SIZE],unitBRAMwidth_type vmask5[BLOCKRAM_SIZE],unitBRAMwidth_type vmask6[BLOCKRAM_SIZE],unitBRAMwidth_type vmask7[BLOCKRAM_SIZE], keyvalue_vbuffer_t tempbuffer[VDATA_PACKINGSIZE][BLOCKRAM_SIZE], batch_type offset_kvs, buffer_type size_kvs, globalparams_t globalparams){
	if(enable == OFF){ return; }
	analysis_type analysis_loopcount1 = BLOCKRAM_SIZE;
	analysis_type analysis_loopcount2 = BLOCKRAM_SIZE / 16;
	analysis_type analysis_loopcount3 = BLOCKRAM_SIZE;
	
	buffer_type transfsize = size_kvs * 16;
	uint32_type bitsbuffer[MAXREDUCEBUFFERSZ];

	LOADVMASKS_LOOP: for (buffer_type i=0; i<size_kvs; i++){
	#pragma HLS LOOP_TRIPCOUNT min=0 max=analysis_loopcount1 avg=analysis_loopcount1
	#pragma HLS PIPELINE II=1
		#ifdef _WIDEWORD
		tempbuffer[0][i] = kvdram[offset_kvs + i].range(31, 0); 
		tempbuffer[1][i] = kvdram[offset_kvs + i].range(63, 32); 
		tempbuffer[2][i] = kvdram[offset_kvs + i].range(95, 64); 
		tempbuffer[3][i] = kvdram[offset_kvs + i].range(127, 96); 
		tempbuffer[4][i] = kvdram[offset_kvs + i].range(159, 128); 
		tempbuffer[5][i] = kvdram[offset_kvs + i].range(191, 160); 
		tempbuffer[6][i] = kvdram[offset_kvs + i].range(223, 192); 
		tempbuffer[7][i] = kvdram[offset_kvs + i].range(255, 224); 
		tempbuffer[8][i] = kvdram[offset_kvs + i].range(287, 256); 
		tempbuffer[9][i] = kvdram[offset_kvs + i].range(319, 288); 
		tempbuffer[10][i] = kvdram[offset_kvs + i].range(351, 320); 
		tempbuffer[11][i] = kvdram[offset_kvs + i].range(383, 352); 
		tempbuffer[12][i] = kvdram[offset_kvs + i].range(415, 384); 
		tempbuffer[13][i] = kvdram[offset_kvs + i].range(447, 416); 
		tempbuffer[14][i] = kvdram[offset_kvs + i].range(479, 448); 
		tempbuffer[15][i] = kvdram[offset_kvs + i].range(511, 480); 
		#else 
		tempbuffer[0][i].key = kvdram[offset_kvs + i].data[0].key;
		tempbuffer[0][i].value = kvdram[offset_kvs + i].data[0].value; 
		tempbuffer[1][i].key = kvdram[offset_kvs + i].data[1].key;
		tempbuffer[1][i].value = kvdram[offset_kvs + i].data[1].value; 
		tempbuffer[2][i].key = kvdram[offset_kvs + i].data[2].key;
		tempbuffer[2][i].value = kvdram[offset_kvs + i].data[2].value; 
		tempbuffer[3][i].key = kvdram[offset_kvs + i].data[3].key;
		tempbuffer[3][i].value = kvdram[offset_kvs + i].data[3].value; 
		tempbuffer[4][i].key = kvdram[offset_kvs + i].data[4].key;
		tempbuffer[4][i].value = kvdram[offset_kvs + i].data[4].value; 
		tempbuffer[5][i].key = kvdram[offset_kvs + i].data[5].key;
		tempbuffer[5][i].value = kvdram[offset_kvs + i].data[5].value; 
		tempbuffer[6][i].key = kvdram[offset_kvs + i].data[6].key;
		tempbuffer[6][i].value = kvdram[offset_kvs + i].data[6].value; 
		tempbuffer[7][i].key = kvdram[offset_kvs + i].data[7].key;
		tempbuffer[7][i].value = kvdram[offset_kvs + i].data[7].value; 
		
		#endif 
		#ifdef _DEBUGMODE_STATS
		actsutilityobj->globalstats_countkvsread(VECTOR_SIZE);
		#endif
	}
	
	uint32_type D0;
	uint32_type D1;
	uint32_type D2;
	uint32_type D3;
	uint32_type D4;
	uint32_type D5;
	uint32_type D6;
	uint32_type D7;
	uint32_type D8;
	uint32_type D9;
	uint32_type D10;
	uint32_type D11;
	uint32_type D12;
	uint32_type D13;
	uint32_type D14;
	uint32_type D15;
	buffer_type index = 0;
	LOADVMASKS_LOOP1: for (buffer_type i=0; i<size_kvs; i++){
	#pragma HLS LOOP_TRIPCOUNT min=0 max=analysis_loopcount2 avg=analysis_loopcount2
	#pragma HLS PIPELINE II=8
		#ifdef _WIDEWORD
		bitsbuffer[index + 0] = tempbuffer[0][i];
		bitsbuffer[index + 1] = tempbuffer[1][i];
		bitsbuffer[index + 2] = tempbuffer[2][i];
		bitsbuffer[index + 3] = tempbuffer[3][i];
		bitsbuffer[index + 4] = tempbuffer[4][i];
		bitsbuffer[index + 5] = tempbuffer[5][i];
		bitsbuffer[index + 6] = tempbuffer[6][i];
		bitsbuffer[index + 7] = tempbuffer[7][i];
		bitsbuffer[index + 8] = tempbuffer[8][i];
		bitsbuffer[index + 9] = tempbuffer[9][i];
		bitsbuffer[index + 10] = tempbuffer[10][i];
		bitsbuffer[index + 11] = tempbuffer[11][i];
		bitsbuffer[index + 12] = tempbuffer[12][i];
		bitsbuffer[index + 13] = tempbuffer[13][i];
		bitsbuffer[index + 14] = tempbuffer[14][i];
		bitsbuffer[index + 15] = tempbuffer[15][i];
		#else 
		bitsbuffer[index + 0] = tempbuffer[0][i].key;
		bitsbuffer[index + 1] = tempbuffer[0][i].value;
		bitsbuffer[index + 2] = tempbuffer[1][i].key;
		bitsbuffer[index + 3] = tempbuffer[1][i].value;
		bitsbuffer[index + 4] = tempbuffer[2][i].key;
		bitsbuffer[index + 5] = tempbuffer[2][i].value;
		bitsbuffer[index + 6] = tempbuffer[3][i].key;
		bitsbuffer[index + 7] = tempbuffer[3][i].value;
		bitsbuffer[index + 8] = tempbuffer[4][i].key;
		bitsbuffer[index + 9] = tempbuffer[4][i].value;
		bitsbuffer[index + 10] = tempbuffer[5][i].key;
		bitsbuffer[index + 11] = tempbuffer[5][i].value;
		bitsbuffer[index + 12] = tempbuffer[6][i].key;
		bitsbuffer[index + 13] = tempbuffer[6][i].value;
		bitsbuffer[index + 14] = tempbuffer[7][i].key;
		bitsbuffer[index + 15] = tempbuffer[7][i].value;
		#endif
		
		index += VECTOR_SIZE * 2;
	}

	unitBRAMwidth_type tempvmask;
	#pragma HLS DATA_PACK variable = tempvmask	
	LOADVMASKS_LOOP2: for (buffer_type i=0; i<transfsize; i++){ // transfsize, reducebuffersz
	#pragma HLS LOOP_TRIPCOUNT min=0 max=analysis_loopcount3 avg=analysis_loopcount3
	#pragma HLS PIPELINE II=1
		#ifdef _WIDEWORD
		tempvmask.data[0].key = bitsbuffer[i].range(0, 0);
		tempvmask.data[0].value = bitsbuffer[i].range(1, 1);
		tempvmask.data[1].key = bitsbuffer[i].range(2, 2);
		tempvmask.data[1].value = bitsbuffer[i].range(3, 3);
		tempvmask.data[2].key = bitsbuffer[i].range(4, 4);
		tempvmask.data[2].value = bitsbuffer[i].range(5, 5);
		tempvmask.data[3].key = bitsbuffer[i].range(6, 6);
		tempvmask.data[3].value = bitsbuffer[i].range(7, 7);
		tempvmask.data[4].key = bitsbuffer[i].range(8, 8);
		tempvmask.data[4].value = bitsbuffer[i].range(9, 9);
		tempvmask.data[5].key = bitsbuffer[i].range(10, 10);
		tempvmask.data[5].value = bitsbuffer[i].range(11, 11);
		tempvmask.data[6].key = bitsbuffer[i].range(12, 12);
		tempvmask.data[6].value = bitsbuffer[i].range(13, 13);
		tempvmask.data[7].key = bitsbuffer[i].range(14, 14);
		tempvmask.data[7].value = bitsbuffer[i].range(15, 15);
		tempvmask.data[8].key = bitsbuffer[i].range(16, 16);
		tempvmask.data[8].value = bitsbuffer[i].range(17, 17);
		tempvmask.data[9].key = bitsbuffer[i].range(18, 18);
		tempvmask.data[9].value = bitsbuffer[i].range(19, 19);
		tempvmask.data[10].key = bitsbuffer[i].range(20, 20);
		tempvmask.data[10].value = bitsbuffer[i].range(21, 21);
		tempvmask.data[11].key = bitsbuffer[i].range(22, 22);
		tempvmask.data[11].value = bitsbuffer[i].range(23, 23);
		tempvmask.data[12].key = bitsbuffer[i].range(24, 24);
		tempvmask.data[12].value = bitsbuffer[i].range(25, 25);
		tempvmask.data[13].key = bitsbuffer[i].range(26, 26);
		tempvmask.data[13].value = bitsbuffer[i].range(27, 27);
		tempvmask.data[14].key = bitsbuffer[i].range(28, 28);
		tempvmask.data[14].value = bitsbuffer[i].range(29, 29);
		tempvmask.data[15].key = bitsbuffer[i].range(30, 30);
		tempvmask.data[15].value = bitsbuffer[i].range(31, 31);
		#else 
		tempvmask.data[0].key = READFROM_UINT(bitsbuffer[i], 0, 1);
		tempvmask.data[0].value = READFROM_UINT(bitsbuffer[i], 1, 1);
		tempvmask.data[1].key = READFROM_UINT(bitsbuffer[i], 2, 1);
		tempvmask.data[1].value = READFROM_UINT(bitsbuffer[i], 3, 1);
		tempvmask.data[2].key = READFROM_UINT(bitsbuffer[i], 4, 1);
		tempvmask.data[2].value = READFROM_UINT(bitsbuffer[i], 5, 1);
		tempvmask.data[3].key = READFROM_UINT(bitsbuffer[i], 6, 1);
		tempvmask.data[3].value = READFROM_UINT(bitsbuffer[i], 7, 1);
		tempvmask.data[4].key = READFROM_UINT(bitsbuffer[i], 8, 1);
		tempvmask.data[4].value = READFROM_UINT(bitsbuffer[i], 9, 1);
		tempvmask.data[5].key = READFROM_UINT(bitsbuffer[i], 10, 1);
		tempvmask.data[5].value = READFROM_UINT(bitsbuffer[i], 11, 1);
		tempvmask.data[6].key = READFROM_UINT(bitsbuffer[i], 12, 1);
		tempvmask.data[6].value = READFROM_UINT(bitsbuffer[i], 13, 1);
		tempvmask.data[7].key = READFROM_UINT(bitsbuffer[i], 14, 1);
		tempvmask.data[7].value = READFROM_UINT(bitsbuffer[i], 15, 1);
		tempvmask.data[8].key = READFROM_UINT(bitsbuffer[i], 16, 1);
		tempvmask.data[8].value = READFROM_UINT(bitsbuffer[i], 17, 1);
		tempvmask.data[9].key = READFROM_UINT(bitsbuffer[i], 18, 1);
		tempvmask.data[9].value = READFROM_UINT(bitsbuffer[i], 19, 1);
		tempvmask.data[10].key = READFROM_UINT(bitsbuffer[i], 20, 1);
		tempvmask.data[10].value = READFROM_UINT(bitsbuffer[i], 21, 1);
		tempvmask.data[11].key = READFROM_UINT(bitsbuffer[i], 22, 1);
		tempvmask.data[11].value = READFROM_UINT(bitsbuffer[i], 23, 1);
		tempvmask.data[12].key = READFROM_UINT(bitsbuffer[i], 24, 1);
		tempvmask.data[12].value = READFROM_UINT(bitsbuffer[i], 25, 1);
		tempvmask.data[13].key = READFROM_UINT(bitsbuffer[i], 26, 1);
		tempvmask.data[13].value = READFROM_UINT(bitsbuffer[i], 27, 1);
		tempvmask.data[14].key = READFROM_UINT(bitsbuffer[i], 28, 1);
		tempvmask.data[14].value = READFROM_UINT(bitsbuffer[i], 29, 1);
		tempvmask.data[15].key = READFROM_UINT(bitsbuffer[i], 30, 1);
		tempvmask.data[15].value = READFROM_UINT(bitsbuffer[i], 31, 1);
		#endif
		
		// mask 
		vmask0[i] = tempvmask;	
		vmask1[i] = tempvmask;	
		vmask2[i] = tempvmask;	
		vmask3[i] = tempvmask;	
		vmask4[i] = tempvmask;	
		vmask5[i] = tempvmask;	
		vmask6[i] = tempvmask;	
		vmask7[i] = tempvmask;	
	}
	return;
}
void //
	#ifdef SW 
	actsproc::
	#endif 
loadmany9vmasks(bool_type enable, uint512_dt * kvdram, unitBRAMwidth_type vmask0[BLOCKRAM_SIZE],unitBRAMwidth_type vmask1[BLOCKRAM_SIZE],unitBRAMwidth_type vmask2[BLOCKRAM_SIZE],unitBRAMwidth_type vmask3[BLOCKRAM_SIZE],unitBRAMwidth_type vmask4[BLOCKRAM_SIZE],unitBRAMwidth_type vmask5[BLOCKRAM_SIZE],unitBRAMwidth_type vmask6[BLOCKRAM_SIZE],unitBRAMwidth_type vmask7[BLOCKRAM_SIZE],unitBRAMwidth_type vmask8[BLOCKRAM_SIZE], keyvalue_vbuffer_t tempbuffer[VDATA_PACKINGSIZE][BLOCKRAM_SIZE], batch_type offset_kvs, buffer_type size_kvs, globalparams_t globalparams){
	if(enable == OFF){ return; }
	analysis_type analysis_loopcount1 = BLOCKRAM_SIZE;
	analysis_type analysis_loopcount2 = BLOCKRAM_SIZE / 16;
	analysis_type analysis_loopcount3 = BLOCKRAM_SIZE;
	
	buffer_type transfsize = size_kvs * 16;
	uint32_type bitsbuffer[MAXREDUCEBUFFERSZ];

	LOADVMASKS_LOOP: for (buffer_type i=0; i<size_kvs; i++){
	#pragma HLS LOOP_TRIPCOUNT min=0 max=analysis_loopcount1 avg=analysis_loopcount1
	#pragma HLS PIPELINE II=1
		#ifdef _WIDEWORD
		tempbuffer[0][i] = kvdram[offset_kvs + i].range(31, 0); 
		tempbuffer[1][i] = kvdram[offset_kvs + i].range(63, 32); 
		tempbuffer[2][i] = kvdram[offset_kvs + i].range(95, 64); 
		tempbuffer[3][i] = kvdram[offset_kvs + i].range(127, 96); 
		tempbuffer[4][i] = kvdram[offset_kvs + i].range(159, 128); 
		tempbuffer[5][i] = kvdram[offset_kvs + i].range(191, 160); 
		tempbuffer[6][i] = kvdram[offset_kvs + i].range(223, 192); 
		tempbuffer[7][i] = kvdram[offset_kvs + i].range(255, 224); 
		tempbuffer[8][i] = kvdram[offset_kvs + i].range(287, 256); 
		tempbuffer[9][i] = kvdram[offset_kvs + i].range(319, 288); 
		tempbuffer[10][i] = kvdram[offset_kvs + i].range(351, 320); 
		tempbuffer[11][i] = kvdram[offset_kvs + i].range(383, 352); 
		tempbuffer[12][i] = kvdram[offset_kvs + i].range(415, 384); 
		tempbuffer[13][i] = kvdram[offset_kvs + i].range(447, 416); 
		tempbuffer[14][i] = kvdram[offset_kvs + i].range(479, 448); 
		tempbuffer[15][i] = kvdram[offset_kvs + i].range(511, 480); 
		#else 
		tempbuffer[0][i].key = kvdram[offset_kvs + i].data[0].key;
		tempbuffer[0][i].value = kvdram[offset_kvs + i].data[0].value; 
		tempbuffer[1][i].key = kvdram[offset_kvs + i].data[1].key;
		tempbuffer[1][i].value = kvdram[offset_kvs + i].data[1].value; 
		tempbuffer[2][i].key = kvdram[offset_kvs + i].data[2].key;
		tempbuffer[2][i].value = kvdram[offset_kvs + i].data[2].value; 
		tempbuffer[3][i].key = kvdram[offset_kvs + i].data[3].key;
		tempbuffer[3][i].value = kvdram[offset_kvs + i].data[3].value; 
		tempbuffer[4][i].key = kvdram[offset_kvs + i].data[4].key;
		tempbuffer[4][i].value = kvdram[offset_kvs + i].data[4].value; 
		tempbuffer[5][i].key = kvdram[offset_kvs + i].data[5].key;
		tempbuffer[5][i].value = kvdram[offset_kvs + i].data[5].value; 
		tempbuffer[6][i].key = kvdram[offset_kvs + i].data[6].key;
		tempbuffer[6][i].value = kvdram[offset_kvs + i].data[6].value; 
		tempbuffer[7][i].key = kvdram[offset_kvs + i].data[7].key;
		tempbuffer[7][i].value = kvdram[offset_kvs + i].data[7].value; 
		
		#endif 
		#ifdef _DEBUGMODE_STATS
		actsutilityobj->globalstats_countkvsread(VECTOR_SIZE);
		#endif
	}
	
	uint32_type D0;
	uint32_type D1;
	uint32_type D2;
	uint32_type D3;
	uint32_type D4;
	uint32_type D5;
	uint32_type D6;
	uint32_type D7;
	uint32_type D8;
	uint32_type D9;
	uint32_type D10;
	uint32_type D11;
	uint32_type D12;
	uint32_type D13;
	uint32_type D14;
	uint32_type D15;
	buffer_type index = 0;
	LOADVMASKS_LOOP1: for (buffer_type i=0; i<size_kvs; i++){
	#pragma HLS LOOP_TRIPCOUNT min=0 max=analysis_loopcount2 avg=analysis_loopcount2
	#pragma HLS PIPELINE II=8
		#ifdef _WIDEWORD
		bitsbuffer[index + 0] = tempbuffer[0][i];
		bitsbuffer[index + 1] = tempbuffer[1][i];
		bitsbuffer[index + 2] = tempbuffer[2][i];
		bitsbuffer[index + 3] = tempbuffer[3][i];
		bitsbuffer[index + 4] = tempbuffer[4][i];
		bitsbuffer[index + 5] = tempbuffer[5][i];
		bitsbuffer[index + 6] = tempbuffer[6][i];
		bitsbuffer[index + 7] = tempbuffer[7][i];
		bitsbuffer[index + 8] = tempbuffer[8][i];
		bitsbuffer[index + 9] = tempbuffer[9][i];
		bitsbuffer[index + 10] = tempbuffer[10][i];
		bitsbuffer[index + 11] = tempbuffer[11][i];
		bitsbuffer[index + 12] = tempbuffer[12][i];
		bitsbuffer[index + 13] = tempbuffer[13][i];
		bitsbuffer[index + 14] = tempbuffer[14][i];
		bitsbuffer[index + 15] = tempbuffer[15][i];
		#else 
		bitsbuffer[index + 0] = tempbuffer[0][i].key;
		bitsbuffer[index + 1] = tempbuffer[0][i].value;
		bitsbuffer[index + 2] = tempbuffer[1][i].key;
		bitsbuffer[index + 3] = tempbuffer[1][i].value;
		bitsbuffer[index + 4] = tempbuffer[2][i].key;
		bitsbuffer[index + 5] = tempbuffer[2][i].value;
		bitsbuffer[index + 6] = tempbuffer[3][i].key;
		bitsbuffer[index + 7] = tempbuffer[3][i].value;
		bitsbuffer[index + 8] = tempbuffer[4][i].key;
		bitsbuffer[index + 9] = tempbuffer[4][i].value;
		bitsbuffer[index + 10] = tempbuffer[5][i].key;
		bitsbuffer[index + 11] = tempbuffer[5][i].value;
		bitsbuffer[index + 12] = tempbuffer[6][i].key;
		bitsbuffer[index + 13] = tempbuffer[6][i].value;
		bitsbuffer[index + 14] = tempbuffer[7][i].key;
		bitsbuffer[index + 15] = tempbuffer[7][i].value;
		#endif
		
		index += VECTOR_SIZE * 2;
	}

	unitBRAMwidth_type tempvmask;
	#pragma HLS DATA_PACK variable = tempvmask	
	LOADVMASKS_LOOP2: for (buffer_type i=0; i<transfsize; i++){ // transfsize, reducebuffersz
	#pragma HLS LOOP_TRIPCOUNT min=0 max=analysis_loopcount3 avg=analysis_loopcount3
	#pragma HLS PIPELINE II=1
		#ifdef _WIDEWORD
		tempvmask.data[0].key = bitsbuffer[i].range(0, 0);
		tempvmask.data[0].value = bitsbuffer[i].range(1, 1);
		tempvmask.data[1].key = bitsbuffer[i].range(2, 2);
		tempvmask.data[1].value = bitsbuffer[i].range(3, 3);
		tempvmask.data[2].key = bitsbuffer[i].range(4, 4);
		tempvmask.data[2].value = bitsbuffer[i].range(5, 5);
		tempvmask.data[3].key = bitsbuffer[i].range(6, 6);
		tempvmask.data[3].value = bitsbuffer[i].range(7, 7);
		tempvmask.data[4].key = bitsbuffer[i].range(8, 8);
		tempvmask.data[4].value = bitsbuffer[i].range(9, 9);
		tempvmask.data[5].key = bitsbuffer[i].range(10, 10);
		tempvmask.data[5].value = bitsbuffer[i].range(11, 11);
		tempvmask.data[6].key = bitsbuffer[i].range(12, 12);
		tempvmask.data[6].value = bitsbuffer[i].range(13, 13);
		tempvmask.data[7].key = bitsbuffer[i].range(14, 14);
		tempvmask.data[7].value = bitsbuffer[i].range(15, 15);
		tempvmask.data[8].key = bitsbuffer[i].range(16, 16);
		tempvmask.data[8].value = bitsbuffer[i].range(17, 17);
		tempvmask.data[9].key = bitsbuffer[i].range(18, 18);
		tempvmask.data[9].value = bitsbuffer[i].range(19, 19);
		tempvmask.data[10].key = bitsbuffer[i].range(20, 20);
		tempvmask.data[10].value = bitsbuffer[i].range(21, 21);
		tempvmask.data[11].key = bitsbuffer[i].range(22, 22);
		tempvmask.data[11].value = bitsbuffer[i].range(23, 23);
		tempvmask.data[12].key = bitsbuffer[i].range(24, 24);
		tempvmask.data[12].value = bitsbuffer[i].range(25, 25);
		tempvmask.data[13].key = bitsbuffer[i].range(26, 26);
		tempvmask.data[13].value = bitsbuffer[i].range(27, 27);
		tempvmask.data[14].key = bitsbuffer[i].range(28, 28);
		tempvmask.data[14].value = bitsbuffer[i].range(29, 29);
		tempvmask.data[15].key = bitsbuffer[i].range(30, 30);
		tempvmask.data[15].value = bitsbuffer[i].range(31, 31);
		#else 
		tempvmask.data[0].key = READFROM_UINT(bitsbuffer[i], 0, 1);
		tempvmask.data[0].value = READFROM_UINT(bitsbuffer[i], 1, 1);
		tempvmask.data[1].key = READFROM_UINT(bitsbuffer[i], 2, 1);
		tempvmask.data[1].value = READFROM_UINT(bitsbuffer[i], 3, 1);
		tempvmask.data[2].key = READFROM_UINT(bitsbuffer[i], 4, 1);
		tempvmask.data[2].value = READFROM_UINT(bitsbuffer[i], 5, 1);
		tempvmask.data[3].key = READFROM_UINT(bitsbuffer[i], 6, 1);
		tempvmask.data[3].value = READFROM_UINT(bitsbuffer[i], 7, 1);
		tempvmask.data[4].key = READFROM_UINT(bitsbuffer[i], 8, 1);
		tempvmask.data[4].value = READFROM_UINT(bitsbuffer[i], 9, 1);
		tempvmask.data[5].key = READFROM_UINT(bitsbuffer[i], 10, 1);
		tempvmask.data[5].value = READFROM_UINT(bitsbuffer[i], 11, 1);
		tempvmask.data[6].key = READFROM_UINT(bitsbuffer[i], 12, 1);
		tempvmask.data[6].value = READFROM_UINT(bitsbuffer[i], 13, 1);
		tempvmask.data[7].key = READFROM_UINT(bitsbuffer[i], 14, 1);
		tempvmask.data[7].value = READFROM_UINT(bitsbuffer[i], 15, 1);
		tempvmask.data[8].key = READFROM_UINT(bitsbuffer[i], 16, 1);
		tempvmask.data[8].value = READFROM_UINT(bitsbuffer[i], 17, 1);
		tempvmask.data[9].key = READFROM_UINT(bitsbuffer[i], 18, 1);
		tempvmask.data[9].value = READFROM_UINT(bitsbuffer[i], 19, 1);
		tempvmask.data[10].key = READFROM_UINT(bitsbuffer[i], 20, 1);
		tempvmask.data[10].value = READFROM_UINT(bitsbuffer[i], 21, 1);
		tempvmask.data[11].key = READFROM_UINT(bitsbuffer[i], 22, 1);
		tempvmask.data[11].value = READFROM_UINT(bitsbuffer[i], 23, 1);
		tempvmask.data[12].key = READFROM_UINT(bitsbuffer[i], 24, 1);
		tempvmask.data[12].value = READFROM_UINT(bitsbuffer[i], 25, 1);
		tempvmask.data[13].key = READFROM_UINT(bitsbuffer[i], 26, 1);
		tempvmask.data[13].value = READFROM_UINT(bitsbuffer[i], 27, 1);
		tempvmask.data[14].key = READFROM_UINT(bitsbuffer[i], 28, 1);
		tempvmask.data[14].value = READFROM_UINT(bitsbuffer[i], 29, 1);
		tempvmask.data[15].key = READFROM_UINT(bitsbuffer[i], 30, 1);
		tempvmask.data[15].value = READFROM_UINT(bitsbuffer[i], 31, 1);
		#endif
		
		// mask 
		vmask0[i] = tempvmask;	
		vmask1[i] = tempvmask;	
		vmask2[i] = tempvmask;	
		vmask3[i] = tempvmask;	
		vmask4[i] = tempvmask;	
		vmask5[i] = tempvmask;	
		vmask6[i] = tempvmask;	
		vmask7[i] = tempvmask;	
		vmask8[i] = tempvmask;	
	}
	return;
}
void //
	#ifdef SW 
	actsproc::
	#endif 
loadmany10vmasks(bool_type enable, uint512_dt * kvdram, unitBRAMwidth_type vmask0[BLOCKRAM_SIZE],unitBRAMwidth_type vmask1[BLOCKRAM_SIZE],unitBRAMwidth_type vmask2[BLOCKRAM_SIZE],unitBRAMwidth_type vmask3[BLOCKRAM_SIZE],unitBRAMwidth_type vmask4[BLOCKRAM_SIZE],unitBRAMwidth_type vmask5[BLOCKRAM_SIZE],unitBRAMwidth_type vmask6[BLOCKRAM_SIZE],unitBRAMwidth_type vmask7[BLOCKRAM_SIZE],unitBRAMwidth_type vmask8[BLOCKRAM_SIZE],unitBRAMwidth_type vmask9[BLOCKRAM_SIZE], keyvalue_vbuffer_t tempbuffer[VDATA_PACKINGSIZE][BLOCKRAM_SIZE], batch_type offset_kvs, buffer_type size_kvs, globalparams_t globalparams){
	if(enable == OFF){ return; }
	analysis_type analysis_loopcount1 = BLOCKRAM_SIZE;
	analysis_type analysis_loopcount2 = BLOCKRAM_SIZE / 16;
	analysis_type analysis_loopcount3 = BLOCKRAM_SIZE;
	
	buffer_type transfsize = size_kvs * 16;
	uint32_type bitsbuffer[MAXREDUCEBUFFERSZ];

	LOADVMASKS_LOOP: for (buffer_type i=0; i<size_kvs; i++){
	#pragma HLS LOOP_TRIPCOUNT min=0 max=analysis_loopcount1 avg=analysis_loopcount1
	#pragma HLS PIPELINE II=1
		#ifdef _WIDEWORD
		tempbuffer[0][i] = kvdram[offset_kvs + i].range(31, 0); 
		tempbuffer[1][i] = kvdram[offset_kvs + i].range(63, 32); 
		tempbuffer[2][i] = kvdram[offset_kvs + i].range(95, 64); 
		tempbuffer[3][i] = kvdram[offset_kvs + i].range(127, 96); 
		tempbuffer[4][i] = kvdram[offset_kvs + i].range(159, 128); 
		tempbuffer[5][i] = kvdram[offset_kvs + i].range(191, 160); 
		tempbuffer[6][i] = kvdram[offset_kvs + i].range(223, 192); 
		tempbuffer[7][i] = kvdram[offset_kvs + i].range(255, 224); 
		tempbuffer[8][i] = kvdram[offset_kvs + i].range(287, 256); 
		tempbuffer[9][i] = kvdram[offset_kvs + i].range(319, 288); 
		tempbuffer[10][i] = kvdram[offset_kvs + i].range(351, 320); 
		tempbuffer[11][i] = kvdram[offset_kvs + i].range(383, 352); 
		tempbuffer[12][i] = kvdram[offset_kvs + i].range(415, 384); 
		tempbuffer[13][i] = kvdram[offset_kvs + i].range(447, 416); 
		tempbuffer[14][i] = kvdram[offset_kvs + i].range(479, 448); 
		tempbuffer[15][i] = kvdram[offset_kvs + i].range(511, 480); 
		#else 
		tempbuffer[0][i].key = kvdram[offset_kvs + i].data[0].key;
		tempbuffer[0][i].value = kvdram[offset_kvs + i].data[0].value; 
		tempbuffer[1][i].key = kvdram[offset_kvs + i].data[1].key;
		tempbuffer[1][i].value = kvdram[offset_kvs + i].data[1].value; 
		tempbuffer[2][i].key = kvdram[offset_kvs + i].data[2].key;
		tempbuffer[2][i].value = kvdram[offset_kvs + i].data[2].value; 
		tempbuffer[3][i].key = kvdram[offset_kvs + i].data[3].key;
		tempbuffer[3][i].value = kvdram[offset_kvs + i].data[3].value; 
		tempbuffer[4][i].key = kvdram[offset_kvs + i].data[4].key;
		tempbuffer[4][i].value = kvdram[offset_kvs + i].data[4].value; 
		tempbuffer[5][i].key = kvdram[offset_kvs + i].data[5].key;
		tempbuffer[5][i].value = kvdram[offset_kvs + i].data[5].value; 
		tempbuffer[6][i].key = kvdram[offset_kvs + i].data[6].key;
		tempbuffer[6][i].value = kvdram[offset_kvs + i].data[6].value; 
		tempbuffer[7][i].key = kvdram[offset_kvs + i].data[7].key;
		tempbuffer[7][i].value = kvdram[offset_kvs + i].data[7].value; 
		
		#endif 
		#ifdef _DEBUGMODE_STATS
		actsutilityobj->globalstats_countkvsread(VECTOR_SIZE);
		#endif
	}
	
	uint32_type D0;
	uint32_type D1;
	uint32_type D2;
	uint32_type D3;
	uint32_type D4;
	uint32_type D5;
	uint32_type D6;
	uint32_type D7;
	uint32_type D8;
	uint32_type D9;
	uint32_type D10;
	uint32_type D11;
	uint32_type D12;
	uint32_type D13;
	uint32_type D14;
	uint32_type D15;
	buffer_type index = 0;
	LOADVMASKS_LOOP1: for (buffer_type i=0; i<size_kvs; i++){
	#pragma HLS LOOP_TRIPCOUNT min=0 max=analysis_loopcount2 avg=analysis_loopcount2
	#pragma HLS PIPELINE II=8
		#ifdef _WIDEWORD
		bitsbuffer[index + 0] = tempbuffer[0][i];
		bitsbuffer[index + 1] = tempbuffer[1][i];
		bitsbuffer[index + 2] = tempbuffer[2][i];
		bitsbuffer[index + 3] = tempbuffer[3][i];
		bitsbuffer[index + 4] = tempbuffer[4][i];
		bitsbuffer[index + 5] = tempbuffer[5][i];
		bitsbuffer[index + 6] = tempbuffer[6][i];
		bitsbuffer[index + 7] = tempbuffer[7][i];
		bitsbuffer[index + 8] = tempbuffer[8][i];
		bitsbuffer[index + 9] = tempbuffer[9][i];
		bitsbuffer[index + 10] = tempbuffer[10][i];
		bitsbuffer[index + 11] = tempbuffer[11][i];
		bitsbuffer[index + 12] = tempbuffer[12][i];
		bitsbuffer[index + 13] = tempbuffer[13][i];
		bitsbuffer[index + 14] = tempbuffer[14][i];
		bitsbuffer[index + 15] = tempbuffer[15][i];
		#else 
		bitsbuffer[index + 0] = tempbuffer[0][i].key;
		bitsbuffer[index + 1] = tempbuffer[0][i].value;
		bitsbuffer[index + 2] = tempbuffer[1][i].key;
		bitsbuffer[index + 3] = tempbuffer[1][i].value;
		bitsbuffer[index + 4] = tempbuffer[2][i].key;
		bitsbuffer[index + 5] = tempbuffer[2][i].value;
		bitsbuffer[index + 6] = tempbuffer[3][i].key;
		bitsbuffer[index + 7] = tempbuffer[3][i].value;
		bitsbuffer[index + 8] = tempbuffer[4][i].key;
		bitsbuffer[index + 9] = tempbuffer[4][i].value;
		bitsbuffer[index + 10] = tempbuffer[5][i].key;
		bitsbuffer[index + 11] = tempbuffer[5][i].value;
		bitsbuffer[index + 12] = tempbuffer[6][i].key;
		bitsbuffer[index + 13] = tempbuffer[6][i].value;
		bitsbuffer[index + 14] = tempbuffer[7][i].key;
		bitsbuffer[index + 15] = tempbuffer[7][i].value;
		#endif
		
		index += VECTOR_SIZE * 2;
	}

	unitBRAMwidth_type tempvmask;
	#pragma HLS DATA_PACK variable = tempvmask	
	LOADVMASKS_LOOP2: for (buffer_type i=0; i<transfsize; i++){ // transfsize, reducebuffersz
	#pragma HLS LOOP_TRIPCOUNT min=0 max=analysis_loopcount3 avg=analysis_loopcount3
	#pragma HLS PIPELINE II=1
		#ifdef _WIDEWORD
		tempvmask.data[0].key = bitsbuffer[i].range(0, 0);
		tempvmask.data[0].value = bitsbuffer[i].range(1, 1);
		tempvmask.data[1].key = bitsbuffer[i].range(2, 2);
		tempvmask.data[1].value = bitsbuffer[i].range(3, 3);
		tempvmask.data[2].key = bitsbuffer[i].range(4, 4);
		tempvmask.data[2].value = bitsbuffer[i].range(5, 5);
		tempvmask.data[3].key = bitsbuffer[i].range(6, 6);
		tempvmask.data[3].value = bitsbuffer[i].range(7, 7);
		tempvmask.data[4].key = bitsbuffer[i].range(8, 8);
		tempvmask.data[4].value = bitsbuffer[i].range(9, 9);
		tempvmask.data[5].key = bitsbuffer[i].range(10, 10);
		tempvmask.data[5].value = bitsbuffer[i].range(11, 11);
		tempvmask.data[6].key = bitsbuffer[i].range(12, 12);
		tempvmask.data[6].value = bitsbuffer[i].range(13, 13);
		tempvmask.data[7].key = bitsbuffer[i].range(14, 14);
		tempvmask.data[7].value = bitsbuffer[i].range(15, 15);
		tempvmask.data[8].key = bitsbuffer[i].range(16, 16);
		tempvmask.data[8].value = bitsbuffer[i].range(17, 17);
		tempvmask.data[9].key = bitsbuffer[i].range(18, 18);
		tempvmask.data[9].value = bitsbuffer[i].range(19, 19);
		tempvmask.data[10].key = bitsbuffer[i].range(20, 20);
		tempvmask.data[10].value = bitsbuffer[i].range(21, 21);
		tempvmask.data[11].key = bitsbuffer[i].range(22, 22);
		tempvmask.data[11].value = bitsbuffer[i].range(23, 23);
		tempvmask.data[12].key = bitsbuffer[i].range(24, 24);
		tempvmask.data[12].value = bitsbuffer[i].range(25, 25);
		tempvmask.data[13].key = bitsbuffer[i].range(26, 26);
		tempvmask.data[13].value = bitsbuffer[i].range(27, 27);
		tempvmask.data[14].key = bitsbuffer[i].range(28, 28);
		tempvmask.data[14].value = bitsbuffer[i].range(29, 29);
		tempvmask.data[15].key = bitsbuffer[i].range(30, 30);
		tempvmask.data[15].value = bitsbuffer[i].range(31, 31);
		#else 
		tempvmask.data[0].key = READFROM_UINT(bitsbuffer[i], 0, 1);
		tempvmask.data[0].value = READFROM_UINT(bitsbuffer[i], 1, 1);
		tempvmask.data[1].key = READFROM_UINT(bitsbuffer[i], 2, 1);
		tempvmask.data[1].value = READFROM_UINT(bitsbuffer[i], 3, 1);
		tempvmask.data[2].key = READFROM_UINT(bitsbuffer[i], 4, 1);
		tempvmask.data[2].value = READFROM_UINT(bitsbuffer[i], 5, 1);
		tempvmask.data[3].key = READFROM_UINT(bitsbuffer[i], 6, 1);
		tempvmask.data[3].value = READFROM_UINT(bitsbuffer[i], 7, 1);
		tempvmask.data[4].key = READFROM_UINT(bitsbuffer[i], 8, 1);
		tempvmask.data[4].value = READFROM_UINT(bitsbuffer[i], 9, 1);
		tempvmask.data[5].key = READFROM_UINT(bitsbuffer[i], 10, 1);
		tempvmask.data[5].value = READFROM_UINT(bitsbuffer[i], 11, 1);
		tempvmask.data[6].key = READFROM_UINT(bitsbuffer[i], 12, 1);
		tempvmask.data[6].value = READFROM_UINT(bitsbuffer[i], 13, 1);
		tempvmask.data[7].key = READFROM_UINT(bitsbuffer[i], 14, 1);
		tempvmask.data[7].value = READFROM_UINT(bitsbuffer[i], 15, 1);
		tempvmask.data[8].key = READFROM_UINT(bitsbuffer[i], 16, 1);
		tempvmask.data[8].value = READFROM_UINT(bitsbuffer[i], 17, 1);
		tempvmask.data[9].key = READFROM_UINT(bitsbuffer[i], 18, 1);
		tempvmask.data[9].value = READFROM_UINT(bitsbuffer[i], 19, 1);
		tempvmask.data[10].key = READFROM_UINT(bitsbuffer[i], 20, 1);
		tempvmask.data[10].value = READFROM_UINT(bitsbuffer[i], 21, 1);
		tempvmask.data[11].key = READFROM_UINT(bitsbuffer[i], 22, 1);
		tempvmask.data[11].value = READFROM_UINT(bitsbuffer[i], 23, 1);
		tempvmask.data[12].key = READFROM_UINT(bitsbuffer[i], 24, 1);
		tempvmask.data[12].value = READFROM_UINT(bitsbuffer[i], 25, 1);
		tempvmask.data[13].key = READFROM_UINT(bitsbuffer[i], 26, 1);
		tempvmask.data[13].value = READFROM_UINT(bitsbuffer[i], 27, 1);
		tempvmask.data[14].key = READFROM_UINT(bitsbuffer[i], 28, 1);
		tempvmask.data[14].value = READFROM_UINT(bitsbuffer[i], 29, 1);
		tempvmask.data[15].key = READFROM_UINT(bitsbuffer[i], 30, 1);
		tempvmask.data[15].value = READFROM_UINT(bitsbuffer[i], 31, 1);
		#endif
		
		// mask 
		vmask0[i] = tempvmask;	
		vmask1[i] = tempvmask;	
		vmask2[i] = tempvmask;	
		vmask3[i] = tempvmask;	
		vmask4[i] = tempvmask;	
		vmask5[i] = tempvmask;	
		vmask6[i] = tempvmask;	
		vmask7[i] = tempvmask;	
		vmask8[i] = tempvmask;	
		vmask9[i] = tempvmask;	
	}
	return;
}
void //
	#ifdef SW 
	actsproc::
	#endif 
loadmany11vmasks(bool_type enable, uint512_dt * kvdram, unitBRAMwidth_type vmask0[BLOCKRAM_SIZE],unitBRAMwidth_type vmask1[BLOCKRAM_SIZE],unitBRAMwidth_type vmask2[BLOCKRAM_SIZE],unitBRAMwidth_type vmask3[BLOCKRAM_SIZE],unitBRAMwidth_type vmask4[BLOCKRAM_SIZE],unitBRAMwidth_type vmask5[BLOCKRAM_SIZE],unitBRAMwidth_type vmask6[BLOCKRAM_SIZE],unitBRAMwidth_type vmask7[BLOCKRAM_SIZE],unitBRAMwidth_type vmask8[BLOCKRAM_SIZE],unitBRAMwidth_type vmask9[BLOCKRAM_SIZE],unitBRAMwidth_type vmask10[BLOCKRAM_SIZE], keyvalue_vbuffer_t tempbuffer[VDATA_PACKINGSIZE][BLOCKRAM_SIZE], batch_type offset_kvs, buffer_type size_kvs, globalparams_t globalparams){
	if(enable == OFF){ return; }
	analysis_type analysis_loopcount1 = BLOCKRAM_SIZE;
	analysis_type analysis_loopcount2 = BLOCKRAM_SIZE / 16;
	analysis_type analysis_loopcount3 = BLOCKRAM_SIZE;
	
	buffer_type transfsize = size_kvs * 16;
	uint32_type bitsbuffer[MAXREDUCEBUFFERSZ];

	LOADVMASKS_LOOP: for (buffer_type i=0; i<size_kvs; i++){
	#pragma HLS LOOP_TRIPCOUNT min=0 max=analysis_loopcount1 avg=analysis_loopcount1
	#pragma HLS PIPELINE II=1
		#ifdef _WIDEWORD
		tempbuffer[0][i] = kvdram[offset_kvs + i].range(31, 0); 
		tempbuffer[1][i] = kvdram[offset_kvs + i].range(63, 32); 
		tempbuffer[2][i] = kvdram[offset_kvs + i].range(95, 64); 
		tempbuffer[3][i] = kvdram[offset_kvs + i].range(127, 96); 
		tempbuffer[4][i] = kvdram[offset_kvs + i].range(159, 128); 
		tempbuffer[5][i] = kvdram[offset_kvs + i].range(191, 160); 
		tempbuffer[6][i] = kvdram[offset_kvs + i].range(223, 192); 
		tempbuffer[7][i] = kvdram[offset_kvs + i].range(255, 224); 
		tempbuffer[8][i] = kvdram[offset_kvs + i].range(287, 256); 
		tempbuffer[9][i] = kvdram[offset_kvs + i].range(319, 288); 
		tempbuffer[10][i] = kvdram[offset_kvs + i].range(351, 320); 
		tempbuffer[11][i] = kvdram[offset_kvs + i].range(383, 352); 
		tempbuffer[12][i] = kvdram[offset_kvs + i].range(415, 384); 
		tempbuffer[13][i] = kvdram[offset_kvs + i].range(447, 416); 
		tempbuffer[14][i] = kvdram[offset_kvs + i].range(479, 448); 
		tempbuffer[15][i] = kvdram[offset_kvs + i].range(511, 480); 
		#else 
		tempbuffer[0][i].key = kvdram[offset_kvs + i].data[0].key;
		tempbuffer[0][i].value = kvdram[offset_kvs + i].data[0].value; 
		tempbuffer[1][i].key = kvdram[offset_kvs + i].data[1].key;
		tempbuffer[1][i].value = kvdram[offset_kvs + i].data[1].value; 
		tempbuffer[2][i].key = kvdram[offset_kvs + i].data[2].key;
		tempbuffer[2][i].value = kvdram[offset_kvs + i].data[2].value; 
		tempbuffer[3][i].key = kvdram[offset_kvs + i].data[3].key;
		tempbuffer[3][i].value = kvdram[offset_kvs + i].data[3].value; 
		tempbuffer[4][i].key = kvdram[offset_kvs + i].data[4].key;
		tempbuffer[4][i].value = kvdram[offset_kvs + i].data[4].value; 
		tempbuffer[5][i].key = kvdram[offset_kvs + i].data[5].key;
		tempbuffer[5][i].value = kvdram[offset_kvs + i].data[5].value; 
		tempbuffer[6][i].key = kvdram[offset_kvs + i].data[6].key;
		tempbuffer[6][i].value = kvdram[offset_kvs + i].data[6].value; 
		tempbuffer[7][i].key = kvdram[offset_kvs + i].data[7].key;
		tempbuffer[7][i].value = kvdram[offset_kvs + i].data[7].value; 
		
		#endif 
		#ifdef _DEBUGMODE_STATS
		actsutilityobj->globalstats_countkvsread(VECTOR_SIZE);
		#endif
	}
	
	uint32_type D0;
	uint32_type D1;
	uint32_type D2;
	uint32_type D3;
	uint32_type D4;
	uint32_type D5;
	uint32_type D6;
	uint32_type D7;
	uint32_type D8;
	uint32_type D9;
	uint32_type D10;
	uint32_type D11;
	uint32_type D12;
	uint32_type D13;
	uint32_type D14;
	uint32_type D15;
	buffer_type index = 0;
	LOADVMASKS_LOOP1: for (buffer_type i=0; i<size_kvs; i++){
	#pragma HLS LOOP_TRIPCOUNT min=0 max=analysis_loopcount2 avg=analysis_loopcount2
	#pragma HLS PIPELINE II=8
		#ifdef _WIDEWORD
		bitsbuffer[index + 0] = tempbuffer[0][i];
		bitsbuffer[index + 1] = tempbuffer[1][i];
		bitsbuffer[index + 2] = tempbuffer[2][i];
		bitsbuffer[index + 3] = tempbuffer[3][i];
		bitsbuffer[index + 4] = tempbuffer[4][i];
		bitsbuffer[index + 5] = tempbuffer[5][i];
		bitsbuffer[index + 6] = tempbuffer[6][i];
		bitsbuffer[index + 7] = tempbuffer[7][i];
		bitsbuffer[index + 8] = tempbuffer[8][i];
		bitsbuffer[index + 9] = tempbuffer[9][i];
		bitsbuffer[index + 10] = tempbuffer[10][i];
		bitsbuffer[index + 11] = tempbuffer[11][i];
		bitsbuffer[index + 12] = tempbuffer[12][i];
		bitsbuffer[index + 13] = tempbuffer[13][i];
		bitsbuffer[index + 14] = tempbuffer[14][i];
		bitsbuffer[index + 15] = tempbuffer[15][i];
		#else 
		bitsbuffer[index + 0] = tempbuffer[0][i].key;
		bitsbuffer[index + 1] = tempbuffer[0][i].value;
		bitsbuffer[index + 2] = tempbuffer[1][i].key;
		bitsbuffer[index + 3] = tempbuffer[1][i].value;
		bitsbuffer[index + 4] = tempbuffer[2][i].key;
		bitsbuffer[index + 5] = tempbuffer[2][i].value;
		bitsbuffer[index + 6] = tempbuffer[3][i].key;
		bitsbuffer[index + 7] = tempbuffer[3][i].value;
		bitsbuffer[index + 8] = tempbuffer[4][i].key;
		bitsbuffer[index + 9] = tempbuffer[4][i].value;
		bitsbuffer[index + 10] = tempbuffer[5][i].key;
		bitsbuffer[index + 11] = tempbuffer[5][i].value;
		bitsbuffer[index + 12] = tempbuffer[6][i].key;
		bitsbuffer[index + 13] = tempbuffer[6][i].value;
		bitsbuffer[index + 14] = tempbuffer[7][i].key;
		bitsbuffer[index + 15] = tempbuffer[7][i].value;
		#endif
		
		index += VECTOR_SIZE * 2;
	}

	unitBRAMwidth_type tempvmask;
	#pragma HLS DATA_PACK variable = tempvmask	
	LOADVMASKS_LOOP2: for (buffer_type i=0; i<transfsize; i++){ // transfsize, reducebuffersz
	#pragma HLS LOOP_TRIPCOUNT min=0 max=analysis_loopcount3 avg=analysis_loopcount3
	#pragma HLS PIPELINE II=1
		#ifdef _WIDEWORD
		tempvmask.data[0].key = bitsbuffer[i].range(0, 0);
		tempvmask.data[0].value = bitsbuffer[i].range(1, 1);
		tempvmask.data[1].key = bitsbuffer[i].range(2, 2);
		tempvmask.data[1].value = bitsbuffer[i].range(3, 3);
		tempvmask.data[2].key = bitsbuffer[i].range(4, 4);
		tempvmask.data[2].value = bitsbuffer[i].range(5, 5);
		tempvmask.data[3].key = bitsbuffer[i].range(6, 6);
		tempvmask.data[3].value = bitsbuffer[i].range(7, 7);
		tempvmask.data[4].key = bitsbuffer[i].range(8, 8);
		tempvmask.data[4].value = bitsbuffer[i].range(9, 9);
		tempvmask.data[5].key = bitsbuffer[i].range(10, 10);
		tempvmask.data[5].value = bitsbuffer[i].range(11, 11);
		tempvmask.data[6].key = bitsbuffer[i].range(12, 12);
		tempvmask.data[6].value = bitsbuffer[i].range(13, 13);
		tempvmask.data[7].key = bitsbuffer[i].range(14, 14);
		tempvmask.data[7].value = bitsbuffer[i].range(15, 15);
		tempvmask.data[8].key = bitsbuffer[i].range(16, 16);
		tempvmask.data[8].value = bitsbuffer[i].range(17, 17);
		tempvmask.data[9].key = bitsbuffer[i].range(18, 18);
		tempvmask.data[9].value = bitsbuffer[i].range(19, 19);
		tempvmask.data[10].key = bitsbuffer[i].range(20, 20);
		tempvmask.data[10].value = bitsbuffer[i].range(21, 21);
		tempvmask.data[11].key = bitsbuffer[i].range(22, 22);
		tempvmask.data[11].value = bitsbuffer[i].range(23, 23);
		tempvmask.data[12].key = bitsbuffer[i].range(24, 24);
		tempvmask.data[12].value = bitsbuffer[i].range(25, 25);
		tempvmask.data[13].key = bitsbuffer[i].range(26, 26);
		tempvmask.data[13].value = bitsbuffer[i].range(27, 27);
		tempvmask.data[14].key = bitsbuffer[i].range(28, 28);
		tempvmask.data[14].value = bitsbuffer[i].range(29, 29);
		tempvmask.data[15].key = bitsbuffer[i].range(30, 30);
		tempvmask.data[15].value = bitsbuffer[i].range(31, 31);
		#else 
		tempvmask.data[0].key = READFROM_UINT(bitsbuffer[i], 0, 1);
		tempvmask.data[0].value = READFROM_UINT(bitsbuffer[i], 1, 1);
		tempvmask.data[1].key = READFROM_UINT(bitsbuffer[i], 2, 1);
		tempvmask.data[1].value = READFROM_UINT(bitsbuffer[i], 3, 1);
		tempvmask.data[2].key = READFROM_UINT(bitsbuffer[i], 4, 1);
		tempvmask.data[2].value = READFROM_UINT(bitsbuffer[i], 5, 1);
		tempvmask.data[3].key = READFROM_UINT(bitsbuffer[i], 6, 1);
		tempvmask.data[3].value = READFROM_UINT(bitsbuffer[i], 7, 1);
		tempvmask.data[4].key = READFROM_UINT(bitsbuffer[i], 8, 1);
		tempvmask.data[4].value = READFROM_UINT(bitsbuffer[i], 9, 1);
		tempvmask.data[5].key = READFROM_UINT(bitsbuffer[i], 10, 1);
		tempvmask.data[5].value = READFROM_UINT(bitsbuffer[i], 11, 1);
		tempvmask.data[6].key = READFROM_UINT(bitsbuffer[i], 12, 1);
		tempvmask.data[6].value = READFROM_UINT(bitsbuffer[i], 13, 1);
		tempvmask.data[7].key = READFROM_UINT(bitsbuffer[i], 14, 1);
		tempvmask.data[7].value = READFROM_UINT(bitsbuffer[i], 15, 1);
		tempvmask.data[8].key = READFROM_UINT(bitsbuffer[i], 16, 1);
		tempvmask.data[8].value = READFROM_UINT(bitsbuffer[i], 17, 1);
		tempvmask.data[9].key = READFROM_UINT(bitsbuffer[i], 18, 1);
		tempvmask.data[9].value = READFROM_UINT(bitsbuffer[i], 19, 1);
		tempvmask.data[10].key = READFROM_UINT(bitsbuffer[i], 20, 1);
		tempvmask.data[10].value = READFROM_UINT(bitsbuffer[i], 21, 1);
		tempvmask.data[11].key = READFROM_UINT(bitsbuffer[i], 22, 1);
		tempvmask.data[11].value = READFROM_UINT(bitsbuffer[i], 23, 1);
		tempvmask.data[12].key = READFROM_UINT(bitsbuffer[i], 24, 1);
		tempvmask.data[12].value = READFROM_UINT(bitsbuffer[i], 25, 1);
		tempvmask.data[13].key = READFROM_UINT(bitsbuffer[i], 26, 1);
		tempvmask.data[13].value = READFROM_UINT(bitsbuffer[i], 27, 1);
		tempvmask.data[14].key = READFROM_UINT(bitsbuffer[i], 28, 1);
		tempvmask.data[14].value = READFROM_UINT(bitsbuffer[i], 29, 1);
		tempvmask.data[15].key = READFROM_UINT(bitsbuffer[i], 30, 1);
		tempvmask.data[15].value = READFROM_UINT(bitsbuffer[i], 31, 1);
		#endif
		
		// mask 
		vmask0[i] = tempvmask;	
		vmask1[i] = tempvmask;	
		vmask2[i] = tempvmask;	
		vmask3[i] = tempvmask;	
		vmask4[i] = tempvmask;	
		vmask5[i] = tempvmask;	
		vmask6[i] = tempvmask;	
		vmask7[i] = tempvmask;	
		vmask8[i] = tempvmask;	
		vmask9[i] = tempvmask;	
		vmask10[i] = tempvmask;	
	}
	return;
}
void //
	#ifdef SW 
	actsproc::
	#endif 
loadmany12vmasks(bool_type enable, uint512_dt * kvdram, unitBRAMwidth_type vmask0[BLOCKRAM_SIZE],unitBRAMwidth_type vmask1[BLOCKRAM_SIZE],unitBRAMwidth_type vmask2[BLOCKRAM_SIZE],unitBRAMwidth_type vmask3[BLOCKRAM_SIZE],unitBRAMwidth_type vmask4[BLOCKRAM_SIZE],unitBRAMwidth_type vmask5[BLOCKRAM_SIZE],unitBRAMwidth_type vmask6[BLOCKRAM_SIZE],unitBRAMwidth_type vmask7[BLOCKRAM_SIZE],unitBRAMwidth_type vmask8[BLOCKRAM_SIZE],unitBRAMwidth_type vmask9[BLOCKRAM_SIZE],unitBRAMwidth_type vmask10[BLOCKRAM_SIZE],unitBRAMwidth_type vmask11[BLOCKRAM_SIZE], keyvalue_vbuffer_t tempbuffer[VDATA_PACKINGSIZE][BLOCKRAM_SIZE], batch_type offset_kvs, buffer_type size_kvs, globalparams_t globalparams){
	if(enable == OFF){ return; }
	analysis_type analysis_loopcount1 = BLOCKRAM_SIZE;
	analysis_type analysis_loopcount2 = BLOCKRAM_SIZE / 16;
	analysis_type analysis_loopcount3 = BLOCKRAM_SIZE;
	
	buffer_type transfsize = size_kvs * 16;
	uint32_type bitsbuffer[MAXREDUCEBUFFERSZ];

	LOADVMASKS_LOOP: for (buffer_type i=0; i<size_kvs; i++){
	#pragma HLS LOOP_TRIPCOUNT min=0 max=analysis_loopcount1 avg=analysis_loopcount1
	#pragma HLS PIPELINE II=1
		#ifdef _WIDEWORD
		tempbuffer[0][i] = kvdram[offset_kvs + i].range(31, 0); 
		tempbuffer[1][i] = kvdram[offset_kvs + i].range(63, 32); 
		tempbuffer[2][i] = kvdram[offset_kvs + i].range(95, 64); 
		tempbuffer[3][i] = kvdram[offset_kvs + i].range(127, 96); 
		tempbuffer[4][i] = kvdram[offset_kvs + i].range(159, 128); 
		tempbuffer[5][i] = kvdram[offset_kvs + i].range(191, 160); 
		tempbuffer[6][i] = kvdram[offset_kvs + i].range(223, 192); 
		tempbuffer[7][i] = kvdram[offset_kvs + i].range(255, 224); 
		tempbuffer[8][i] = kvdram[offset_kvs + i].range(287, 256); 
		tempbuffer[9][i] = kvdram[offset_kvs + i].range(319, 288); 
		tempbuffer[10][i] = kvdram[offset_kvs + i].range(351, 320); 
		tempbuffer[11][i] = kvdram[offset_kvs + i].range(383, 352); 
		tempbuffer[12][i] = kvdram[offset_kvs + i].range(415, 384); 
		tempbuffer[13][i] = kvdram[offset_kvs + i].range(447, 416); 
		tempbuffer[14][i] = kvdram[offset_kvs + i].range(479, 448); 
		tempbuffer[15][i] = kvdram[offset_kvs + i].range(511, 480); 
		#else 
		tempbuffer[0][i].key = kvdram[offset_kvs + i].data[0].key;
		tempbuffer[0][i].value = kvdram[offset_kvs + i].data[0].value; 
		tempbuffer[1][i].key = kvdram[offset_kvs + i].data[1].key;
		tempbuffer[1][i].value = kvdram[offset_kvs + i].data[1].value; 
		tempbuffer[2][i].key = kvdram[offset_kvs + i].data[2].key;
		tempbuffer[2][i].value = kvdram[offset_kvs + i].data[2].value; 
		tempbuffer[3][i].key = kvdram[offset_kvs + i].data[3].key;
		tempbuffer[3][i].value = kvdram[offset_kvs + i].data[3].value; 
		tempbuffer[4][i].key = kvdram[offset_kvs + i].data[4].key;
		tempbuffer[4][i].value = kvdram[offset_kvs + i].data[4].value; 
		tempbuffer[5][i].key = kvdram[offset_kvs + i].data[5].key;
		tempbuffer[5][i].value = kvdram[offset_kvs + i].data[5].value; 
		tempbuffer[6][i].key = kvdram[offset_kvs + i].data[6].key;
		tempbuffer[6][i].value = kvdram[offset_kvs + i].data[6].value; 
		tempbuffer[7][i].key = kvdram[offset_kvs + i].data[7].key;
		tempbuffer[7][i].value = kvdram[offset_kvs + i].data[7].value; 
		
		#endif 
		#ifdef _DEBUGMODE_STATS
		actsutilityobj->globalstats_countkvsread(VECTOR_SIZE);
		#endif
	}
	
	uint32_type D0;
	uint32_type D1;
	uint32_type D2;
	uint32_type D3;
	uint32_type D4;
	uint32_type D5;
	uint32_type D6;
	uint32_type D7;
	uint32_type D8;
	uint32_type D9;
	uint32_type D10;
	uint32_type D11;
	uint32_type D12;
	uint32_type D13;
	uint32_type D14;
	uint32_type D15;
	buffer_type index = 0;
	LOADVMASKS_LOOP1: for (buffer_type i=0; i<size_kvs; i++){
	#pragma HLS LOOP_TRIPCOUNT min=0 max=analysis_loopcount2 avg=analysis_loopcount2
	#pragma HLS PIPELINE II=8
		#ifdef _WIDEWORD
		bitsbuffer[index + 0] = tempbuffer[0][i];
		bitsbuffer[index + 1] = tempbuffer[1][i];
		bitsbuffer[index + 2] = tempbuffer[2][i];
		bitsbuffer[index + 3] = tempbuffer[3][i];
		bitsbuffer[index + 4] = tempbuffer[4][i];
		bitsbuffer[index + 5] = tempbuffer[5][i];
		bitsbuffer[index + 6] = tempbuffer[6][i];
		bitsbuffer[index + 7] = tempbuffer[7][i];
		bitsbuffer[index + 8] = tempbuffer[8][i];
		bitsbuffer[index + 9] = tempbuffer[9][i];
		bitsbuffer[index + 10] = tempbuffer[10][i];
		bitsbuffer[index + 11] = tempbuffer[11][i];
		bitsbuffer[index + 12] = tempbuffer[12][i];
		bitsbuffer[index + 13] = tempbuffer[13][i];
		bitsbuffer[index + 14] = tempbuffer[14][i];
		bitsbuffer[index + 15] = tempbuffer[15][i];
		#else 
		bitsbuffer[index + 0] = tempbuffer[0][i].key;
		bitsbuffer[index + 1] = tempbuffer[0][i].value;
		bitsbuffer[index + 2] = tempbuffer[1][i].key;
		bitsbuffer[index + 3] = tempbuffer[1][i].value;
		bitsbuffer[index + 4] = tempbuffer[2][i].key;
		bitsbuffer[index + 5] = tempbuffer[2][i].value;
		bitsbuffer[index + 6] = tempbuffer[3][i].key;
		bitsbuffer[index + 7] = tempbuffer[3][i].value;
		bitsbuffer[index + 8] = tempbuffer[4][i].key;
		bitsbuffer[index + 9] = tempbuffer[4][i].value;
		bitsbuffer[index + 10] = tempbuffer[5][i].key;
		bitsbuffer[index + 11] = tempbuffer[5][i].value;
		bitsbuffer[index + 12] = tempbuffer[6][i].key;
		bitsbuffer[index + 13] = tempbuffer[6][i].value;
		bitsbuffer[index + 14] = tempbuffer[7][i].key;
		bitsbuffer[index + 15] = tempbuffer[7][i].value;
		#endif
		
		index += VECTOR_SIZE * 2;
	}

	unitBRAMwidth_type tempvmask;
	#pragma HLS DATA_PACK variable = tempvmask	
	LOADVMASKS_LOOP2: for (buffer_type i=0; i<transfsize; i++){ // transfsize, reducebuffersz
	#pragma HLS LOOP_TRIPCOUNT min=0 max=analysis_loopcount3 avg=analysis_loopcount3
	#pragma HLS PIPELINE II=1
		#ifdef _WIDEWORD
		tempvmask.data[0].key = bitsbuffer[i].range(0, 0);
		tempvmask.data[0].value = bitsbuffer[i].range(1, 1);
		tempvmask.data[1].key = bitsbuffer[i].range(2, 2);
		tempvmask.data[1].value = bitsbuffer[i].range(3, 3);
		tempvmask.data[2].key = bitsbuffer[i].range(4, 4);
		tempvmask.data[2].value = bitsbuffer[i].range(5, 5);
		tempvmask.data[3].key = bitsbuffer[i].range(6, 6);
		tempvmask.data[3].value = bitsbuffer[i].range(7, 7);
		tempvmask.data[4].key = bitsbuffer[i].range(8, 8);
		tempvmask.data[4].value = bitsbuffer[i].range(9, 9);
		tempvmask.data[5].key = bitsbuffer[i].range(10, 10);
		tempvmask.data[5].value = bitsbuffer[i].range(11, 11);
		tempvmask.data[6].key = bitsbuffer[i].range(12, 12);
		tempvmask.data[6].value = bitsbuffer[i].range(13, 13);
		tempvmask.data[7].key = bitsbuffer[i].range(14, 14);
		tempvmask.data[7].value = bitsbuffer[i].range(15, 15);
		tempvmask.data[8].key = bitsbuffer[i].range(16, 16);
		tempvmask.data[8].value = bitsbuffer[i].range(17, 17);
		tempvmask.data[9].key = bitsbuffer[i].range(18, 18);
		tempvmask.data[9].value = bitsbuffer[i].range(19, 19);
		tempvmask.data[10].key = bitsbuffer[i].range(20, 20);
		tempvmask.data[10].value = bitsbuffer[i].range(21, 21);
		tempvmask.data[11].key = bitsbuffer[i].range(22, 22);
		tempvmask.data[11].value = bitsbuffer[i].range(23, 23);
		tempvmask.data[12].key = bitsbuffer[i].range(24, 24);
		tempvmask.data[12].value = bitsbuffer[i].range(25, 25);
		tempvmask.data[13].key = bitsbuffer[i].range(26, 26);
		tempvmask.data[13].value = bitsbuffer[i].range(27, 27);
		tempvmask.data[14].key = bitsbuffer[i].range(28, 28);
		tempvmask.data[14].value = bitsbuffer[i].range(29, 29);
		tempvmask.data[15].key = bitsbuffer[i].range(30, 30);
		tempvmask.data[15].value = bitsbuffer[i].range(31, 31);
		#else 
		tempvmask.data[0].key = READFROM_UINT(bitsbuffer[i], 0, 1);
		tempvmask.data[0].value = READFROM_UINT(bitsbuffer[i], 1, 1);
		tempvmask.data[1].key = READFROM_UINT(bitsbuffer[i], 2, 1);
		tempvmask.data[1].value = READFROM_UINT(bitsbuffer[i], 3, 1);
		tempvmask.data[2].key = READFROM_UINT(bitsbuffer[i], 4, 1);
		tempvmask.data[2].value = READFROM_UINT(bitsbuffer[i], 5, 1);
		tempvmask.data[3].key = READFROM_UINT(bitsbuffer[i], 6, 1);
		tempvmask.data[3].value = READFROM_UINT(bitsbuffer[i], 7, 1);
		tempvmask.data[4].key = READFROM_UINT(bitsbuffer[i], 8, 1);
		tempvmask.data[4].value = READFROM_UINT(bitsbuffer[i], 9, 1);
		tempvmask.data[5].key = READFROM_UINT(bitsbuffer[i], 10, 1);
		tempvmask.data[5].value = READFROM_UINT(bitsbuffer[i], 11, 1);
		tempvmask.data[6].key = READFROM_UINT(bitsbuffer[i], 12, 1);
		tempvmask.data[6].value = READFROM_UINT(bitsbuffer[i], 13, 1);
		tempvmask.data[7].key = READFROM_UINT(bitsbuffer[i], 14, 1);
		tempvmask.data[7].value = READFROM_UINT(bitsbuffer[i], 15, 1);
		tempvmask.data[8].key = READFROM_UINT(bitsbuffer[i], 16, 1);
		tempvmask.data[8].value = READFROM_UINT(bitsbuffer[i], 17, 1);
		tempvmask.data[9].key = READFROM_UINT(bitsbuffer[i], 18, 1);
		tempvmask.data[9].value = READFROM_UINT(bitsbuffer[i], 19, 1);
		tempvmask.data[10].key = READFROM_UINT(bitsbuffer[i], 20, 1);
		tempvmask.data[10].value = READFROM_UINT(bitsbuffer[i], 21, 1);
		tempvmask.data[11].key = READFROM_UINT(bitsbuffer[i], 22, 1);
		tempvmask.data[11].value = READFROM_UINT(bitsbuffer[i], 23, 1);
		tempvmask.data[12].key = READFROM_UINT(bitsbuffer[i], 24, 1);
		tempvmask.data[12].value = READFROM_UINT(bitsbuffer[i], 25, 1);
		tempvmask.data[13].key = READFROM_UINT(bitsbuffer[i], 26, 1);
		tempvmask.data[13].value = READFROM_UINT(bitsbuffer[i], 27, 1);
		tempvmask.data[14].key = READFROM_UINT(bitsbuffer[i], 28, 1);
		tempvmask.data[14].value = READFROM_UINT(bitsbuffer[i], 29, 1);
		tempvmask.data[15].key = READFROM_UINT(bitsbuffer[i], 30, 1);
		tempvmask.data[15].value = READFROM_UINT(bitsbuffer[i], 31, 1);
		#endif
		
		// mask 
		vmask0[i] = tempvmask;	
		vmask1[i] = tempvmask;	
		vmask2[i] = tempvmask;	
		vmask3[i] = tempvmask;	
		vmask4[i] = tempvmask;	
		vmask5[i] = tempvmask;	
		vmask6[i] = tempvmask;	
		vmask7[i] = tempvmask;	
		vmask8[i] = tempvmask;	
		vmask9[i] = tempvmask;	
		vmask10[i] = tempvmask;	
		vmask11[i] = tempvmask;	
	}
	return;
}

void //
	#ifdef SW 
	actsproc::
	#endif 
loadmany1vmasks_subp(bool_type enable, unitBRAMwidth_type vmask0[BLOCKRAM_SIZE], unitBRAMwidth_type vmask0_subp[BLOCKRAM_SIZE], buffer_type size_kvs){
	if(enable == OFF){ return; }
	analysis_type analysis_loopcount1 = BLOCKRAM_SIZE;
	analysis_type analysis_loopcount2 = BLOCKRAM_SIZE / 16;
	analysis_type analysis_loopcount3 = BLOCKRAM_SIZE;
	
	buffer_type transfsize = size_kvs * 16;

	unitBRAMwidth_type tempvmask;
	#pragma HLS DATA_PACK variable = tempvmask	
	unitBRAMwidth_type tempvSUBmask;
	#pragma HLS DATA_PACK variable = tempvSUBmask		
	tempvSUBmask.data[0].key = 0;
	tempvSUBmask.data[0].value = 0;
	tempvSUBmask.data[1].key = 0;
	tempvSUBmask.data[1].value = 0;
	tempvSUBmask.data[2].key = 0;
	tempvSUBmask.data[2].value = 0;
	tempvSUBmask.data[3].key = 0;
	tempvSUBmask.data[3].value = 0;
	tempvSUBmask.data[4].key = 0;
	tempvSUBmask.data[4].value = 0;
	tempvSUBmask.data[5].key = 0;
	tempvSUBmask.data[5].value = 0;
	tempvSUBmask.data[6].key = 0;
	tempvSUBmask.data[6].value = 0;
	tempvSUBmask.data[7].key = 0;
	tempvSUBmask.data[7].value = 0;
	tempvSUBmask.data[8].key = 0;
	tempvSUBmask.data[8].value = 0;
	tempvSUBmask.data[9].key = 0;
	tempvSUBmask.data[9].value = 0;
	tempvSUBmask.data[10].key = 0;
	tempvSUBmask.data[10].value = 0;
	tempvSUBmask.data[11].key = 0;
	tempvSUBmask.data[11].value = 0;
	tempvSUBmask.data[12].key = 0;
	tempvSUBmask.data[12].value = 0;
	tempvSUBmask.data[13].key = 0;
	tempvSUBmask.data[13].value = 0;
	tempvSUBmask.data[14].key = 0;
	tempvSUBmask.data[14].value = 0;
	tempvSUBmask.data[15].key = 0;
	tempvSUBmask.data[15].value = 0;
	LOADVMASKSSUBP_LOOP2: for (buffer_type i=0; i<transfsize; i++){ // transfsize, reducebuffersz
	#pragma HLS LOOP_TRIPCOUNT min=0 max=analysis_loopcount3 avg=analysis_loopcount3
	#pragma HLS PIPELINE II=2
		
		tempvmask = vmask0[i];
		
		// subp mask 
		#ifdef ENABLE_SUBVMASKING
		tempvSUBmask.data[0].key = tempvSUBmask.data[0].key | tempvmask.data[0].key;
		tempvSUBmask.data[0].value = tempvSUBmask.data[0].value | tempvmask.data[0].value;
		tempvSUBmask.data[1].key = tempvSUBmask.data[1].key | tempvmask.data[1].key;
		tempvSUBmask.data[1].value = tempvSUBmask.data[1].value | tempvmask.data[1].value;
		tempvSUBmask.data[2].key = tempvSUBmask.data[2].key | tempvmask.data[2].key;
		tempvSUBmask.data[2].value = tempvSUBmask.data[2].value | tempvmask.data[2].value;
		tempvSUBmask.data[3].key = tempvSUBmask.data[3].key | tempvmask.data[3].key;
		tempvSUBmask.data[3].value = tempvSUBmask.data[3].value | tempvmask.data[3].value;
		tempvSUBmask.data[4].key = tempvSUBmask.data[4].key | tempvmask.data[4].key;
		tempvSUBmask.data[4].value = tempvSUBmask.data[4].value | tempvmask.data[4].value;
		tempvSUBmask.data[5].key = tempvSUBmask.data[5].key | tempvmask.data[5].key;
		tempvSUBmask.data[5].value = tempvSUBmask.data[5].value | tempvmask.data[5].value;
		tempvSUBmask.data[6].key = tempvSUBmask.data[6].key | tempvmask.data[6].key;
		tempvSUBmask.data[6].value = tempvSUBmask.data[6].value | tempvmask.data[6].value;
		tempvSUBmask.data[7].key = tempvSUBmask.data[7].key | tempvmask.data[7].key;
		tempvSUBmask.data[7].value = tempvSUBmask.data[7].value | tempvmask.data[7].value;
		tempvSUBmask.data[8].key = tempvSUBmask.data[8].key | tempvmask.data[8].key;
		tempvSUBmask.data[8].value = tempvSUBmask.data[8].value | tempvmask.data[8].value;
		tempvSUBmask.data[9].key = tempvSUBmask.data[9].key | tempvmask.data[9].key;
		tempvSUBmask.data[9].value = tempvSUBmask.data[9].value | tempvmask.data[9].value;
		tempvSUBmask.data[10].key = tempvSUBmask.data[10].key | tempvmask.data[10].key;
		tempvSUBmask.data[10].value = tempvSUBmask.data[10].value | tempvmask.data[10].value;
		tempvSUBmask.data[11].key = tempvSUBmask.data[11].key | tempvmask.data[11].key;
		tempvSUBmask.data[11].value = tempvSUBmask.data[11].value | tempvmask.data[11].value;
		tempvSUBmask.data[12].key = tempvSUBmask.data[12].key | tempvmask.data[12].key;
		tempvSUBmask.data[12].value = tempvSUBmask.data[12].value | tempvmask.data[12].value;
		tempvSUBmask.data[13].key = tempvSUBmask.data[13].key | tempvmask.data[13].key;
		tempvSUBmask.data[13].value = tempvSUBmask.data[13].value | tempvmask.data[13].value;
		tempvSUBmask.data[14].key = tempvSUBmask.data[14].key | tempvmask.data[14].key;
		tempvSUBmask.data[14].value = tempvSUBmask.data[14].value | tempvmask.data[14].value;
		tempvSUBmask.data[15].key = tempvSUBmask.data[15].key | tempvmask.data[15].key;
		tempvSUBmask.data[15].value = tempvSUBmask.data[15].value | tempvmask.data[15].value;
		
		if(i % 8 == 7){ // CRITICAL AUTOMATEME.
			if(i%16==7){  // CRITICAL AUTOMATEME.
				vmask0_subp[i/16].data[0].key = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask0_subp[i/16].data[1].key = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask0_subp[i/16].data[2].key = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask0_subp[i/16].data[3].key = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask0_subp[i/16].data[4].key = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask0_subp[i/16].data[5].key = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask0_subp[i/16].data[6].key = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask0_subp[i/16].data[7].key = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask0_subp[i/16].data[8].key = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask0_subp[i/16].data[9].key = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask0_subp[i/16].data[10].key = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask0_subp[i/16].data[11].key = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask0_subp[i/16].data[12].key = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask0_subp[i/16].data[13].key = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask0_subp[i/16].data[14].key = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask0_subp[i/16].data[15].key = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			} else {
				vmask0_subp[i/16].data[0].value = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask0_subp[i/16].data[1].value = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask0_subp[i/16].data[2].value = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask0_subp[i/16].data[3].value = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask0_subp[i/16].data[4].value = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask0_subp[i/16].data[5].value = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask0_subp[i/16].data[6].value = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask0_subp[i/16].data[7].value = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask0_subp[i/16].data[8].value = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask0_subp[i/16].data[9].value = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask0_subp[i/16].data[10].value = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask0_subp[i/16].data[11].value = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask0_subp[i/16].data[12].value = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask0_subp[i/16].data[13].value = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask0_subp[i/16].data[14].value = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask0_subp[i/16].data[15].value = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			}
			
			tempvSUBmask.data[0].key = 0;
			tempvSUBmask.data[0].value = 0;
			tempvSUBmask.data[1].key = 0;
			tempvSUBmask.data[1].value = 0;
			tempvSUBmask.data[2].key = 0;
			tempvSUBmask.data[2].value = 0;
			tempvSUBmask.data[3].key = 0;
			tempvSUBmask.data[3].value = 0;
			tempvSUBmask.data[4].key = 0;
			tempvSUBmask.data[4].value = 0;
			tempvSUBmask.data[5].key = 0;
			tempvSUBmask.data[5].value = 0;
			tempvSUBmask.data[6].key = 0;
			tempvSUBmask.data[6].value = 0;
			tempvSUBmask.data[7].key = 0;
			tempvSUBmask.data[7].value = 0;
			tempvSUBmask.data[8].key = 0;
			tempvSUBmask.data[8].value = 0;
			tempvSUBmask.data[9].key = 0;
			tempvSUBmask.data[9].value = 0;
			tempvSUBmask.data[10].key = 0;
			tempvSUBmask.data[10].value = 0;
			tempvSUBmask.data[11].key = 0;
			tempvSUBmask.data[11].value = 0;
			tempvSUBmask.data[12].key = 0;
			tempvSUBmask.data[12].value = 0;
			tempvSUBmask.data[13].key = 0;
			tempvSUBmask.data[13].value = 0;
			tempvSUBmask.data[14].key = 0;
			tempvSUBmask.data[14].value = 0;
			tempvSUBmask.data[15].key = 0;
			tempvSUBmask.data[15].value = 0;
		}
		
		/* if(i % SUBPMASKFACTOR == SUBPMASKFACTOR-1){ // CRITICAL AUTOMATEME.
			if(i%16==7){  // CRITICAL AUTOMATEME.
				vmask0_subp[i/SUBPMASKFACTOR].data[0].key = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[1].key = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[2].key = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[3].key = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[4].key = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[5].key = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[6].key = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[7].key = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[8].key = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[9].key = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[10].key = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[11].key = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[12].key = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[13].key = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[14].key = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[15].key = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			} else {
				vmask0_subp[i/SUBPMASKFACTOR].data[0].value = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[1].value = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[2].value = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[3].value = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[4].value = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[5].value = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[6].value = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[7].value = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[8].value = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[9].value = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[10].value = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[11].value = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[12].value = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[13].value = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[14].value = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[15].value = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			}
			
			tempvSUBmask.data[0].key = 0;
			tempvSUBmask.data[0].value = 0;
			tempvSUBmask.data[1].key = 0;
			tempvSUBmask.data[1].value = 0;
			tempvSUBmask.data[2].key = 0;
			tempvSUBmask.data[2].value = 0;
			tempvSUBmask.data[3].key = 0;
			tempvSUBmask.data[3].value = 0;
			tempvSUBmask.data[4].key = 0;
			tempvSUBmask.data[4].value = 0;
			tempvSUBmask.data[5].key = 0;
			tempvSUBmask.data[5].value = 0;
			tempvSUBmask.data[6].key = 0;
			tempvSUBmask.data[6].value = 0;
			tempvSUBmask.data[7].key = 0;
			tempvSUBmask.data[7].value = 0;
			tempvSUBmask.data[8].key = 0;
			tempvSUBmask.data[8].value = 0;
			tempvSUBmask.data[9].key = 0;
			tempvSUBmask.data[9].value = 0;
			tempvSUBmask.data[10].key = 0;
			tempvSUBmask.data[10].value = 0;
			tempvSUBmask.data[11].key = 0;
			tempvSUBmask.data[11].value = 0;
			tempvSUBmask.data[12].key = 0;
			tempvSUBmask.data[12].value = 0;
			tempvSUBmask.data[13].key = 0;
			tempvSUBmask.data[13].value = 0;
			tempvSUBmask.data[14].key = 0;
			tempvSUBmask.data[14].value = 0;
			tempvSUBmask.data[15].key = 0;
			tempvSUBmask.data[15].value = 0;
		} */
		#endif 
	}
	return;
}
void //
	#ifdef SW 
	actsproc::
	#endif 
loadmany2vmasks_subp(bool_type enable, unitBRAMwidth_type vmask0[BLOCKRAM_SIZE], unitBRAMwidth_type vmask0_subp[BLOCKRAM_SIZE],unitBRAMwidth_type vmask1_subp[BLOCKRAM_SIZE], buffer_type size_kvs){
	if(enable == OFF){ return; }
	analysis_type analysis_loopcount1 = BLOCKRAM_SIZE;
	analysis_type analysis_loopcount2 = BLOCKRAM_SIZE / 16;
	analysis_type analysis_loopcount3 = BLOCKRAM_SIZE;
	
	buffer_type transfsize = size_kvs * 16;

	unitBRAMwidth_type tempvmask;
	#pragma HLS DATA_PACK variable = tempvmask	
	unitBRAMwidth_type tempvSUBmask;
	#pragma HLS DATA_PACK variable = tempvSUBmask		
	tempvSUBmask.data[0].key = 0;
	tempvSUBmask.data[0].value = 0;
	tempvSUBmask.data[1].key = 0;
	tempvSUBmask.data[1].value = 0;
	tempvSUBmask.data[2].key = 0;
	tempvSUBmask.data[2].value = 0;
	tempvSUBmask.data[3].key = 0;
	tempvSUBmask.data[3].value = 0;
	tempvSUBmask.data[4].key = 0;
	tempvSUBmask.data[4].value = 0;
	tempvSUBmask.data[5].key = 0;
	tempvSUBmask.data[5].value = 0;
	tempvSUBmask.data[6].key = 0;
	tempvSUBmask.data[6].value = 0;
	tempvSUBmask.data[7].key = 0;
	tempvSUBmask.data[7].value = 0;
	tempvSUBmask.data[8].key = 0;
	tempvSUBmask.data[8].value = 0;
	tempvSUBmask.data[9].key = 0;
	tempvSUBmask.data[9].value = 0;
	tempvSUBmask.data[10].key = 0;
	tempvSUBmask.data[10].value = 0;
	tempvSUBmask.data[11].key = 0;
	tempvSUBmask.data[11].value = 0;
	tempvSUBmask.data[12].key = 0;
	tempvSUBmask.data[12].value = 0;
	tempvSUBmask.data[13].key = 0;
	tempvSUBmask.data[13].value = 0;
	tempvSUBmask.data[14].key = 0;
	tempvSUBmask.data[14].value = 0;
	tempvSUBmask.data[15].key = 0;
	tempvSUBmask.data[15].value = 0;
	LOADVMASKSSUBP_LOOP2: for (buffer_type i=0; i<transfsize; i++){ // transfsize, reducebuffersz
	#pragma HLS LOOP_TRIPCOUNT min=0 max=analysis_loopcount3 avg=analysis_loopcount3
	#pragma HLS PIPELINE II=2
		
		tempvmask = vmask0[i];
		
		// subp mask 
		#ifdef ENABLE_SUBVMASKING
		tempvSUBmask.data[0].key = tempvSUBmask.data[0].key | tempvmask.data[0].key;
		tempvSUBmask.data[0].value = tempvSUBmask.data[0].value | tempvmask.data[0].value;
		tempvSUBmask.data[1].key = tempvSUBmask.data[1].key | tempvmask.data[1].key;
		tempvSUBmask.data[1].value = tempvSUBmask.data[1].value | tempvmask.data[1].value;
		tempvSUBmask.data[2].key = tempvSUBmask.data[2].key | tempvmask.data[2].key;
		tempvSUBmask.data[2].value = tempvSUBmask.data[2].value | tempvmask.data[2].value;
		tempvSUBmask.data[3].key = tempvSUBmask.data[3].key | tempvmask.data[3].key;
		tempvSUBmask.data[3].value = tempvSUBmask.data[3].value | tempvmask.data[3].value;
		tempvSUBmask.data[4].key = tempvSUBmask.data[4].key | tempvmask.data[4].key;
		tempvSUBmask.data[4].value = tempvSUBmask.data[4].value | tempvmask.data[4].value;
		tempvSUBmask.data[5].key = tempvSUBmask.data[5].key | tempvmask.data[5].key;
		tempvSUBmask.data[5].value = tempvSUBmask.data[5].value | tempvmask.data[5].value;
		tempvSUBmask.data[6].key = tempvSUBmask.data[6].key | tempvmask.data[6].key;
		tempvSUBmask.data[6].value = tempvSUBmask.data[6].value | tempvmask.data[6].value;
		tempvSUBmask.data[7].key = tempvSUBmask.data[7].key | tempvmask.data[7].key;
		tempvSUBmask.data[7].value = tempvSUBmask.data[7].value | tempvmask.data[7].value;
		tempvSUBmask.data[8].key = tempvSUBmask.data[8].key | tempvmask.data[8].key;
		tempvSUBmask.data[8].value = tempvSUBmask.data[8].value | tempvmask.data[8].value;
		tempvSUBmask.data[9].key = tempvSUBmask.data[9].key | tempvmask.data[9].key;
		tempvSUBmask.data[9].value = tempvSUBmask.data[9].value | tempvmask.data[9].value;
		tempvSUBmask.data[10].key = tempvSUBmask.data[10].key | tempvmask.data[10].key;
		tempvSUBmask.data[10].value = tempvSUBmask.data[10].value | tempvmask.data[10].value;
		tempvSUBmask.data[11].key = tempvSUBmask.data[11].key | tempvmask.data[11].key;
		tempvSUBmask.data[11].value = tempvSUBmask.data[11].value | tempvmask.data[11].value;
		tempvSUBmask.data[12].key = tempvSUBmask.data[12].key | tempvmask.data[12].key;
		tempvSUBmask.data[12].value = tempvSUBmask.data[12].value | tempvmask.data[12].value;
		tempvSUBmask.data[13].key = tempvSUBmask.data[13].key | tempvmask.data[13].key;
		tempvSUBmask.data[13].value = tempvSUBmask.data[13].value | tempvmask.data[13].value;
		tempvSUBmask.data[14].key = tempvSUBmask.data[14].key | tempvmask.data[14].key;
		tempvSUBmask.data[14].value = tempvSUBmask.data[14].value | tempvmask.data[14].value;
		tempvSUBmask.data[15].key = tempvSUBmask.data[15].key | tempvmask.data[15].key;
		tempvSUBmask.data[15].value = tempvSUBmask.data[15].value | tempvmask.data[15].value;
		
		if(i % 8 == 7){ // CRITICAL AUTOMATEME.
			if(i%16==7){  // CRITICAL AUTOMATEME.
				vmask0_subp[i/16].data[0].key = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask0_subp[i/16].data[1].key = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask0_subp[i/16].data[2].key = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask0_subp[i/16].data[3].key = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask0_subp[i/16].data[4].key = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask0_subp[i/16].data[5].key = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask0_subp[i/16].data[6].key = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask0_subp[i/16].data[7].key = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask0_subp[i/16].data[8].key = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask0_subp[i/16].data[9].key = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask0_subp[i/16].data[10].key = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask0_subp[i/16].data[11].key = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask0_subp[i/16].data[12].key = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask0_subp[i/16].data[13].key = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask0_subp[i/16].data[14].key = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask0_subp[i/16].data[15].key = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			} else {
				vmask0_subp[i/16].data[0].value = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask0_subp[i/16].data[1].value = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask0_subp[i/16].data[2].value = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask0_subp[i/16].data[3].value = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask0_subp[i/16].data[4].value = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask0_subp[i/16].data[5].value = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask0_subp[i/16].data[6].value = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask0_subp[i/16].data[7].value = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask0_subp[i/16].data[8].value = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask0_subp[i/16].data[9].value = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask0_subp[i/16].data[10].value = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask0_subp[i/16].data[11].value = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask0_subp[i/16].data[12].value = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask0_subp[i/16].data[13].value = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask0_subp[i/16].data[14].value = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask0_subp[i/16].data[15].value = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			}
			if(i%16==7){  // CRITICAL AUTOMATEME.
				vmask1_subp[i/16].data[0].key = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask1_subp[i/16].data[1].key = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask1_subp[i/16].data[2].key = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask1_subp[i/16].data[3].key = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask1_subp[i/16].data[4].key = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask1_subp[i/16].data[5].key = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask1_subp[i/16].data[6].key = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask1_subp[i/16].data[7].key = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask1_subp[i/16].data[8].key = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask1_subp[i/16].data[9].key = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask1_subp[i/16].data[10].key = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask1_subp[i/16].data[11].key = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask1_subp[i/16].data[12].key = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask1_subp[i/16].data[13].key = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask1_subp[i/16].data[14].key = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask1_subp[i/16].data[15].key = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			} else {
				vmask1_subp[i/16].data[0].value = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask1_subp[i/16].data[1].value = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask1_subp[i/16].data[2].value = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask1_subp[i/16].data[3].value = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask1_subp[i/16].data[4].value = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask1_subp[i/16].data[5].value = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask1_subp[i/16].data[6].value = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask1_subp[i/16].data[7].value = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask1_subp[i/16].data[8].value = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask1_subp[i/16].data[9].value = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask1_subp[i/16].data[10].value = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask1_subp[i/16].data[11].value = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask1_subp[i/16].data[12].value = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask1_subp[i/16].data[13].value = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask1_subp[i/16].data[14].value = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask1_subp[i/16].data[15].value = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			}
			
			tempvSUBmask.data[0].key = 0;
			tempvSUBmask.data[0].value = 0;
			tempvSUBmask.data[1].key = 0;
			tempvSUBmask.data[1].value = 0;
			tempvSUBmask.data[2].key = 0;
			tempvSUBmask.data[2].value = 0;
			tempvSUBmask.data[3].key = 0;
			tempvSUBmask.data[3].value = 0;
			tempvSUBmask.data[4].key = 0;
			tempvSUBmask.data[4].value = 0;
			tempvSUBmask.data[5].key = 0;
			tempvSUBmask.data[5].value = 0;
			tempvSUBmask.data[6].key = 0;
			tempvSUBmask.data[6].value = 0;
			tempvSUBmask.data[7].key = 0;
			tempvSUBmask.data[7].value = 0;
			tempvSUBmask.data[8].key = 0;
			tempvSUBmask.data[8].value = 0;
			tempvSUBmask.data[9].key = 0;
			tempvSUBmask.data[9].value = 0;
			tempvSUBmask.data[10].key = 0;
			tempvSUBmask.data[10].value = 0;
			tempvSUBmask.data[11].key = 0;
			tempvSUBmask.data[11].value = 0;
			tempvSUBmask.data[12].key = 0;
			tempvSUBmask.data[12].value = 0;
			tempvSUBmask.data[13].key = 0;
			tempvSUBmask.data[13].value = 0;
			tempvSUBmask.data[14].key = 0;
			tempvSUBmask.data[14].value = 0;
			tempvSUBmask.data[15].key = 0;
			tempvSUBmask.data[15].value = 0;
		}
		
		/* if(i % SUBPMASKFACTOR == SUBPMASKFACTOR-1){ // CRITICAL AUTOMATEME.
			if(i%16==7){  // CRITICAL AUTOMATEME.
				vmask0_subp[i/SUBPMASKFACTOR].data[0].key = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[1].key = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[2].key = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[3].key = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[4].key = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[5].key = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[6].key = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[7].key = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[8].key = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[9].key = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[10].key = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[11].key = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[12].key = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[13].key = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[14].key = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[15].key = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			} else {
				vmask0_subp[i/SUBPMASKFACTOR].data[0].value = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[1].value = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[2].value = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[3].value = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[4].value = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[5].value = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[6].value = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[7].value = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[8].value = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[9].value = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[10].value = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[11].value = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[12].value = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[13].value = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[14].value = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[15].value = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			}
			if(i%16==7){  // CRITICAL AUTOMATEME.
				vmask1_subp[i/SUBPMASKFACTOR].data[0].key = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[1].key = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[2].key = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[3].key = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[4].key = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[5].key = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[6].key = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[7].key = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[8].key = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[9].key = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[10].key = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[11].key = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[12].key = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[13].key = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[14].key = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[15].key = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			} else {
				vmask1_subp[i/SUBPMASKFACTOR].data[0].value = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[1].value = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[2].value = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[3].value = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[4].value = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[5].value = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[6].value = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[7].value = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[8].value = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[9].value = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[10].value = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[11].value = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[12].value = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[13].value = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[14].value = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[15].value = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			}
			
			tempvSUBmask.data[0].key = 0;
			tempvSUBmask.data[0].value = 0;
			tempvSUBmask.data[1].key = 0;
			tempvSUBmask.data[1].value = 0;
			tempvSUBmask.data[2].key = 0;
			tempvSUBmask.data[2].value = 0;
			tempvSUBmask.data[3].key = 0;
			tempvSUBmask.data[3].value = 0;
			tempvSUBmask.data[4].key = 0;
			tempvSUBmask.data[4].value = 0;
			tempvSUBmask.data[5].key = 0;
			tempvSUBmask.data[5].value = 0;
			tempvSUBmask.data[6].key = 0;
			tempvSUBmask.data[6].value = 0;
			tempvSUBmask.data[7].key = 0;
			tempvSUBmask.data[7].value = 0;
			tempvSUBmask.data[8].key = 0;
			tempvSUBmask.data[8].value = 0;
			tempvSUBmask.data[9].key = 0;
			tempvSUBmask.data[9].value = 0;
			tempvSUBmask.data[10].key = 0;
			tempvSUBmask.data[10].value = 0;
			tempvSUBmask.data[11].key = 0;
			tempvSUBmask.data[11].value = 0;
			tempvSUBmask.data[12].key = 0;
			tempvSUBmask.data[12].value = 0;
			tempvSUBmask.data[13].key = 0;
			tempvSUBmask.data[13].value = 0;
			tempvSUBmask.data[14].key = 0;
			tempvSUBmask.data[14].value = 0;
			tempvSUBmask.data[15].key = 0;
			tempvSUBmask.data[15].value = 0;
		} */
		#endif 
	}
	return;
}
void //
	#ifdef SW 
	actsproc::
	#endif 
loadmany3vmasks_subp(bool_type enable, unitBRAMwidth_type vmask0[BLOCKRAM_SIZE], unitBRAMwidth_type vmask0_subp[BLOCKRAM_SIZE],unitBRAMwidth_type vmask1_subp[BLOCKRAM_SIZE],unitBRAMwidth_type vmask2_subp[BLOCKRAM_SIZE], buffer_type size_kvs){
	if(enable == OFF){ return; }
	analysis_type analysis_loopcount1 = BLOCKRAM_SIZE;
	analysis_type analysis_loopcount2 = BLOCKRAM_SIZE / 16;
	analysis_type analysis_loopcount3 = BLOCKRAM_SIZE;
	
	buffer_type transfsize = size_kvs * 16;

	unitBRAMwidth_type tempvmask;
	#pragma HLS DATA_PACK variable = tempvmask	
	unitBRAMwidth_type tempvSUBmask;
	#pragma HLS DATA_PACK variable = tempvSUBmask		
	tempvSUBmask.data[0].key = 0;
	tempvSUBmask.data[0].value = 0;
	tempvSUBmask.data[1].key = 0;
	tempvSUBmask.data[1].value = 0;
	tempvSUBmask.data[2].key = 0;
	tempvSUBmask.data[2].value = 0;
	tempvSUBmask.data[3].key = 0;
	tempvSUBmask.data[3].value = 0;
	tempvSUBmask.data[4].key = 0;
	tempvSUBmask.data[4].value = 0;
	tempvSUBmask.data[5].key = 0;
	tempvSUBmask.data[5].value = 0;
	tempvSUBmask.data[6].key = 0;
	tempvSUBmask.data[6].value = 0;
	tempvSUBmask.data[7].key = 0;
	tempvSUBmask.data[7].value = 0;
	tempvSUBmask.data[8].key = 0;
	tempvSUBmask.data[8].value = 0;
	tempvSUBmask.data[9].key = 0;
	tempvSUBmask.data[9].value = 0;
	tempvSUBmask.data[10].key = 0;
	tempvSUBmask.data[10].value = 0;
	tempvSUBmask.data[11].key = 0;
	tempvSUBmask.data[11].value = 0;
	tempvSUBmask.data[12].key = 0;
	tempvSUBmask.data[12].value = 0;
	tempvSUBmask.data[13].key = 0;
	tempvSUBmask.data[13].value = 0;
	tempvSUBmask.data[14].key = 0;
	tempvSUBmask.data[14].value = 0;
	tempvSUBmask.data[15].key = 0;
	tempvSUBmask.data[15].value = 0;
	LOADVMASKSSUBP_LOOP2: for (buffer_type i=0; i<transfsize; i++){ // transfsize, reducebuffersz
	#pragma HLS LOOP_TRIPCOUNT min=0 max=analysis_loopcount3 avg=analysis_loopcount3
	#pragma HLS PIPELINE II=2
		
		tempvmask = vmask0[i];
		
		// subp mask 
		#ifdef ENABLE_SUBVMASKING
		tempvSUBmask.data[0].key = tempvSUBmask.data[0].key | tempvmask.data[0].key;
		tempvSUBmask.data[0].value = tempvSUBmask.data[0].value | tempvmask.data[0].value;
		tempvSUBmask.data[1].key = tempvSUBmask.data[1].key | tempvmask.data[1].key;
		tempvSUBmask.data[1].value = tempvSUBmask.data[1].value | tempvmask.data[1].value;
		tempvSUBmask.data[2].key = tempvSUBmask.data[2].key | tempvmask.data[2].key;
		tempvSUBmask.data[2].value = tempvSUBmask.data[2].value | tempvmask.data[2].value;
		tempvSUBmask.data[3].key = tempvSUBmask.data[3].key | tempvmask.data[3].key;
		tempvSUBmask.data[3].value = tempvSUBmask.data[3].value | tempvmask.data[3].value;
		tempvSUBmask.data[4].key = tempvSUBmask.data[4].key | tempvmask.data[4].key;
		tempvSUBmask.data[4].value = tempvSUBmask.data[4].value | tempvmask.data[4].value;
		tempvSUBmask.data[5].key = tempvSUBmask.data[5].key | tempvmask.data[5].key;
		tempvSUBmask.data[5].value = tempvSUBmask.data[5].value | tempvmask.data[5].value;
		tempvSUBmask.data[6].key = tempvSUBmask.data[6].key | tempvmask.data[6].key;
		tempvSUBmask.data[6].value = tempvSUBmask.data[6].value | tempvmask.data[6].value;
		tempvSUBmask.data[7].key = tempvSUBmask.data[7].key | tempvmask.data[7].key;
		tempvSUBmask.data[7].value = tempvSUBmask.data[7].value | tempvmask.data[7].value;
		tempvSUBmask.data[8].key = tempvSUBmask.data[8].key | tempvmask.data[8].key;
		tempvSUBmask.data[8].value = tempvSUBmask.data[8].value | tempvmask.data[8].value;
		tempvSUBmask.data[9].key = tempvSUBmask.data[9].key | tempvmask.data[9].key;
		tempvSUBmask.data[9].value = tempvSUBmask.data[9].value | tempvmask.data[9].value;
		tempvSUBmask.data[10].key = tempvSUBmask.data[10].key | tempvmask.data[10].key;
		tempvSUBmask.data[10].value = tempvSUBmask.data[10].value | tempvmask.data[10].value;
		tempvSUBmask.data[11].key = tempvSUBmask.data[11].key | tempvmask.data[11].key;
		tempvSUBmask.data[11].value = tempvSUBmask.data[11].value | tempvmask.data[11].value;
		tempvSUBmask.data[12].key = tempvSUBmask.data[12].key | tempvmask.data[12].key;
		tempvSUBmask.data[12].value = tempvSUBmask.data[12].value | tempvmask.data[12].value;
		tempvSUBmask.data[13].key = tempvSUBmask.data[13].key | tempvmask.data[13].key;
		tempvSUBmask.data[13].value = tempvSUBmask.data[13].value | tempvmask.data[13].value;
		tempvSUBmask.data[14].key = tempvSUBmask.data[14].key | tempvmask.data[14].key;
		tempvSUBmask.data[14].value = tempvSUBmask.data[14].value | tempvmask.data[14].value;
		tempvSUBmask.data[15].key = tempvSUBmask.data[15].key | tempvmask.data[15].key;
		tempvSUBmask.data[15].value = tempvSUBmask.data[15].value | tempvmask.data[15].value;
		
		if(i % 8 == 7){ // CRITICAL AUTOMATEME.
			if(i%16==7){  // CRITICAL AUTOMATEME.
				vmask0_subp[i/16].data[0].key = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask0_subp[i/16].data[1].key = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask0_subp[i/16].data[2].key = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask0_subp[i/16].data[3].key = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask0_subp[i/16].data[4].key = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask0_subp[i/16].data[5].key = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask0_subp[i/16].data[6].key = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask0_subp[i/16].data[7].key = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask0_subp[i/16].data[8].key = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask0_subp[i/16].data[9].key = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask0_subp[i/16].data[10].key = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask0_subp[i/16].data[11].key = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask0_subp[i/16].data[12].key = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask0_subp[i/16].data[13].key = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask0_subp[i/16].data[14].key = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask0_subp[i/16].data[15].key = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			} else {
				vmask0_subp[i/16].data[0].value = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask0_subp[i/16].data[1].value = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask0_subp[i/16].data[2].value = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask0_subp[i/16].data[3].value = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask0_subp[i/16].data[4].value = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask0_subp[i/16].data[5].value = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask0_subp[i/16].data[6].value = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask0_subp[i/16].data[7].value = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask0_subp[i/16].data[8].value = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask0_subp[i/16].data[9].value = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask0_subp[i/16].data[10].value = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask0_subp[i/16].data[11].value = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask0_subp[i/16].data[12].value = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask0_subp[i/16].data[13].value = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask0_subp[i/16].data[14].value = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask0_subp[i/16].data[15].value = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			}
			if(i%16==7){  // CRITICAL AUTOMATEME.
				vmask1_subp[i/16].data[0].key = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask1_subp[i/16].data[1].key = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask1_subp[i/16].data[2].key = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask1_subp[i/16].data[3].key = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask1_subp[i/16].data[4].key = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask1_subp[i/16].data[5].key = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask1_subp[i/16].data[6].key = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask1_subp[i/16].data[7].key = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask1_subp[i/16].data[8].key = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask1_subp[i/16].data[9].key = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask1_subp[i/16].data[10].key = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask1_subp[i/16].data[11].key = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask1_subp[i/16].data[12].key = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask1_subp[i/16].data[13].key = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask1_subp[i/16].data[14].key = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask1_subp[i/16].data[15].key = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			} else {
				vmask1_subp[i/16].data[0].value = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask1_subp[i/16].data[1].value = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask1_subp[i/16].data[2].value = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask1_subp[i/16].data[3].value = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask1_subp[i/16].data[4].value = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask1_subp[i/16].data[5].value = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask1_subp[i/16].data[6].value = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask1_subp[i/16].data[7].value = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask1_subp[i/16].data[8].value = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask1_subp[i/16].data[9].value = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask1_subp[i/16].data[10].value = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask1_subp[i/16].data[11].value = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask1_subp[i/16].data[12].value = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask1_subp[i/16].data[13].value = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask1_subp[i/16].data[14].value = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask1_subp[i/16].data[15].value = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			}
			if(i%16==7){  // CRITICAL AUTOMATEME.
				vmask2_subp[i/16].data[0].key = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask2_subp[i/16].data[1].key = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask2_subp[i/16].data[2].key = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask2_subp[i/16].data[3].key = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask2_subp[i/16].data[4].key = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask2_subp[i/16].data[5].key = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask2_subp[i/16].data[6].key = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask2_subp[i/16].data[7].key = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask2_subp[i/16].data[8].key = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask2_subp[i/16].data[9].key = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask2_subp[i/16].data[10].key = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask2_subp[i/16].data[11].key = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask2_subp[i/16].data[12].key = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask2_subp[i/16].data[13].key = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask2_subp[i/16].data[14].key = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask2_subp[i/16].data[15].key = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			} else {
				vmask2_subp[i/16].data[0].value = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask2_subp[i/16].data[1].value = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask2_subp[i/16].data[2].value = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask2_subp[i/16].data[3].value = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask2_subp[i/16].data[4].value = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask2_subp[i/16].data[5].value = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask2_subp[i/16].data[6].value = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask2_subp[i/16].data[7].value = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask2_subp[i/16].data[8].value = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask2_subp[i/16].data[9].value = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask2_subp[i/16].data[10].value = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask2_subp[i/16].data[11].value = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask2_subp[i/16].data[12].value = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask2_subp[i/16].data[13].value = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask2_subp[i/16].data[14].value = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask2_subp[i/16].data[15].value = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			}
			
			tempvSUBmask.data[0].key = 0;
			tempvSUBmask.data[0].value = 0;
			tempvSUBmask.data[1].key = 0;
			tempvSUBmask.data[1].value = 0;
			tempvSUBmask.data[2].key = 0;
			tempvSUBmask.data[2].value = 0;
			tempvSUBmask.data[3].key = 0;
			tempvSUBmask.data[3].value = 0;
			tempvSUBmask.data[4].key = 0;
			tempvSUBmask.data[4].value = 0;
			tempvSUBmask.data[5].key = 0;
			tempvSUBmask.data[5].value = 0;
			tempvSUBmask.data[6].key = 0;
			tempvSUBmask.data[6].value = 0;
			tempvSUBmask.data[7].key = 0;
			tempvSUBmask.data[7].value = 0;
			tempvSUBmask.data[8].key = 0;
			tempvSUBmask.data[8].value = 0;
			tempvSUBmask.data[9].key = 0;
			tempvSUBmask.data[9].value = 0;
			tempvSUBmask.data[10].key = 0;
			tempvSUBmask.data[10].value = 0;
			tempvSUBmask.data[11].key = 0;
			tempvSUBmask.data[11].value = 0;
			tempvSUBmask.data[12].key = 0;
			tempvSUBmask.data[12].value = 0;
			tempvSUBmask.data[13].key = 0;
			tempvSUBmask.data[13].value = 0;
			tempvSUBmask.data[14].key = 0;
			tempvSUBmask.data[14].value = 0;
			tempvSUBmask.data[15].key = 0;
			tempvSUBmask.data[15].value = 0;
		}
		
		/* if(i % SUBPMASKFACTOR == SUBPMASKFACTOR-1){ // CRITICAL AUTOMATEME.
			if(i%16==7){  // CRITICAL AUTOMATEME.
				vmask0_subp[i/SUBPMASKFACTOR].data[0].key = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[1].key = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[2].key = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[3].key = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[4].key = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[5].key = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[6].key = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[7].key = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[8].key = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[9].key = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[10].key = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[11].key = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[12].key = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[13].key = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[14].key = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[15].key = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			} else {
				vmask0_subp[i/SUBPMASKFACTOR].data[0].value = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[1].value = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[2].value = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[3].value = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[4].value = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[5].value = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[6].value = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[7].value = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[8].value = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[9].value = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[10].value = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[11].value = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[12].value = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[13].value = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[14].value = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[15].value = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			}
			if(i%16==7){  // CRITICAL AUTOMATEME.
				vmask1_subp[i/SUBPMASKFACTOR].data[0].key = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[1].key = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[2].key = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[3].key = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[4].key = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[5].key = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[6].key = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[7].key = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[8].key = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[9].key = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[10].key = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[11].key = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[12].key = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[13].key = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[14].key = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[15].key = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			} else {
				vmask1_subp[i/SUBPMASKFACTOR].data[0].value = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[1].value = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[2].value = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[3].value = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[4].value = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[5].value = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[6].value = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[7].value = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[8].value = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[9].value = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[10].value = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[11].value = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[12].value = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[13].value = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[14].value = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[15].value = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			}
			if(i%16==7){  // CRITICAL AUTOMATEME.
				vmask2_subp[i/SUBPMASKFACTOR].data[0].key = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[1].key = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[2].key = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[3].key = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[4].key = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[5].key = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[6].key = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[7].key = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[8].key = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[9].key = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[10].key = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[11].key = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[12].key = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[13].key = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[14].key = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[15].key = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			} else {
				vmask2_subp[i/SUBPMASKFACTOR].data[0].value = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[1].value = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[2].value = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[3].value = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[4].value = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[5].value = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[6].value = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[7].value = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[8].value = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[9].value = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[10].value = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[11].value = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[12].value = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[13].value = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[14].value = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[15].value = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			}
			
			tempvSUBmask.data[0].key = 0;
			tempvSUBmask.data[0].value = 0;
			tempvSUBmask.data[1].key = 0;
			tempvSUBmask.data[1].value = 0;
			tempvSUBmask.data[2].key = 0;
			tempvSUBmask.data[2].value = 0;
			tempvSUBmask.data[3].key = 0;
			tempvSUBmask.data[3].value = 0;
			tempvSUBmask.data[4].key = 0;
			tempvSUBmask.data[4].value = 0;
			tempvSUBmask.data[5].key = 0;
			tempvSUBmask.data[5].value = 0;
			tempvSUBmask.data[6].key = 0;
			tempvSUBmask.data[6].value = 0;
			tempvSUBmask.data[7].key = 0;
			tempvSUBmask.data[7].value = 0;
			tempvSUBmask.data[8].key = 0;
			tempvSUBmask.data[8].value = 0;
			tempvSUBmask.data[9].key = 0;
			tempvSUBmask.data[9].value = 0;
			tempvSUBmask.data[10].key = 0;
			tempvSUBmask.data[10].value = 0;
			tempvSUBmask.data[11].key = 0;
			tempvSUBmask.data[11].value = 0;
			tempvSUBmask.data[12].key = 0;
			tempvSUBmask.data[12].value = 0;
			tempvSUBmask.data[13].key = 0;
			tempvSUBmask.data[13].value = 0;
			tempvSUBmask.data[14].key = 0;
			tempvSUBmask.data[14].value = 0;
			tempvSUBmask.data[15].key = 0;
			tempvSUBmask.data[15].value = 0;
		} */
		#endif 
	}
	return;
}
void //
	#ifdef SW 
	actsproc::
	#endif 
loadmany4vmasks_subp(bool_type enable, unitBRAMwidth_type vmask0[BLOCKRAM_SIZE], unitBRAMwidth_type vmask0_subp[BLOCKRAM_SIZE],unitBRAMwidth_type vmask1_subp[BLOCKRAM_SIZE],unitBRAMwidth_type vmask2_subp[BLOCKRAM_SIZE],unitBRAMwidth_type vmask3_subp[BLOCKRAM_SIZE], buffer_type size_kvs){
	if(enable == OFF){ return; }
	analysis_type analysis_loopcount1 = BLOCKRAM_SIZE;
	analysis_type analysis_loopcount2 = BLOCKRAM_SIZE / 16;
	analysis_type analysis_loopcount3 = BLOCKRAM_SIZE;
	
	buffer_type transfsize = size_kvs * 16;

	unitBRAMwidth_type tempvmask;
	#pragma HLS DATA_PACK variable = tempvmask	
	unitBRAMwidth_type tempvSUBmask;
	#pragma HLS DATA_PACK variable = tempvSUBmask		
	tempvSUBmask.data[0].key = 0;
	tempvSUBmask.data[0].value = 0;
	tempvSUBmask.data[1].key = 0;
	tempvSUBmask.data[1].value = 0;
	tempvSUBmask.data[2].key = 0;
	tempvSUBmask.data[2].value = 0;
	tempvSUBmask.data[3].key = 0;
	tempvSUBmask.data[3].value = 0;
	tempvSUBmask.data[4].key = 0;
	tempvSUBmask.data[4].value = 0;
	tempvSUBmask.data[5].key = 0;
	tempvSUBmask.data[5].value = 0;
	tempvSUBmask.data[6].key = 0;
	tempvSUBmask.data[6].value = 0;
	tempvSUBmask.data[7].key = 0;
	tempvSUBmask.data[7].value = 0;
	tempvSUBmask.data[8].key = 0;
	tempvSUBmask.data[8].value = 0;
	tempvSUBmask.data[9].key = 0;
	tempvSUBmask.data[9].value = 0;
	tempvSUBmask.data[10].key = 0;
	tempvSUBmask.data[10].value = 0;
	tempvSUBmask.data[11].key = 0;
	tempvSUBmask.data[11].value = 0;
	tempvSUBmask.data[12].key = 0;
	tempvSUBmask.data[12].value = 0;
	tempvSUBmask.data[13].key = 0;
	tempvSUBmask.data[13].value = 0;
	tempvSUBmask.data[14].key = 0;
	tempvSUBmask.data[14].value = 0;
	tempvSUBmask.data[15].key = 0;
	tempvSUBmask.data[15].value = 0;
	LOADVMASKSSUBP_LOOP2: for (buffer_type i=0; i<transfsize; i++){ // transfsize, reducebuffersz
	#pragma HLS LOOP_TRIPCOUNT min=0 max=analysis_loopcount3 avg=analysis_loopcount3
	#pragma HLS PIPELINE II=2
		
		tempvmask = vmask0[i];
		
		// subp mask 
		#ifdef ENABLE_SUBVMASKING
		tempvSUBmask.data[0].key = tempvSUBmask.data[0].key | tempvmask.data[0].key;
		tempvSUBmask.data[0].value = tempvSUBmask.data[0].value | tempvmask.data[0].value;
		tempvSUBmask.data[1].key = tempvSUBmask.data[1].key | tempvmask.data[1].key;
		tempvSUBmask.data[1].value = tempvSUBmask.data[1].value | tempvmask.data[1].value;
		tempvSUBmask.data[2].key = tempvSUBmask.data[2].key | tempvmask.data[2].key;
		tempvSUBmask.data[2].value = tempvSUBmask.data[2].value | tempvmask.data[2].value;
		tempvSUBmask.data[3].key = tempvSUBmask.data[3].key | tempvmask.data[3].key;
		tempvSUBmask.data[3].value = tempvSUBmask.data[3].value | tempvmask.data[3].value;
		tempvSUBmask.data[4].key = tempvSUBmask.data[4].key | tempvmask.data[4].key;
		tempvSUBmask.data[4].value = tempvSUBmask.data[4].value | tempvmask.data[4].value;
		tempvSUBmask.data[5].key = tempvSUBmask.data[5].key | tempvmask.data[5].key;
		tempvSUBmask.data[5].value = tempvSUBmask.data[5].value | tempvmask.data[5].value;
		tempvSUBmask.data[6].key = tempvSUBmask.data[6].key | tempvmask.data[6].key;
		tempvSUBmask.data[6].value = tempvSUBmask.data[6].value | tempvmask.data[6].value;
		tempvSUBmask.data[7].key = tempvSUBmask.data[7].key | tempvmask.data[7].key;
		tempvSUBmask.data[7].value = tempvSUBmask.data[7].value | tempvmask.data[7].value;
		tempvSUBmask.data[8].key = tempvSUBmask.data[8].key | tempvmask.data[8].key;
		tempvSUBmask.data[8].value = tempvSUBmask.data[8].value | tempvmask.data[8].value;
		tempvSUBmask.data[9].key = tempvSUBmask.data[9].key | tempvmask.data[9].key;
		tempvSUBmask.data[9].value = tempvSUBmask.data[9].value | tempvmask.data[9].value;
		tempvSUBmask.data[10].key = tempvSUBmask.data[10].key | tempvmask.data[10].key;
		tempvSUBmask.data[10].value = tempvSUBmask.data[10].value | tempvmask.data[10].value;
		tempvSUBmask.data[11].key = tempvSUBmask.data[11].key | tempvmask.data[11].key;
		tempvSUBmask.data[11].value = tempvSUBmask.data[11].value | tempvmask.data[11].value;
		tempvSUBmask.data[12].key = tempvSUBmask.data[12].key | tempvmask.data[12].key;
		tempvSUBmask.data[12].value = tempvSUBmask.data[12].value | tempvmask.data[12].value;
		tempvSUBmask.data[13].key = tempvSUBmask.data[13].key | tempvmask.data[13].key;
		tempvSUBmask.data[13].value = tempvSUBmask.data[13].value | tempvmask.data[13].value;
		tempvSUBmask.data[14].key = tempvSUBmask.data[14].key | tempvmask.data[14].key;
		tempvSUBmask.data[14].value = tempvSUBmask.data[14].value | tempvmask.data[14].value;
		tempvSUBmask.data[15].key = tempvSUBmask.data[15].key | tempvmask.data[15].key;
		tempvSUBmask.data[15].value = tempvSUBmask.data[15].value | tempvmask.data[15].value;
		
		if(i % 8 == 7){ // CRITICAL AUTOMATEME.
			if(i%16==7){  // CRITICAL AUTOMATEME.
				vmask0_subp[i/16].data[0].key = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask0_subp[i/16].data[1].key = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask0_subp[i/16].data[2].key = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask0_subp[i/16].data[3].key = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask0_subp[i/16].data[4].key = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask0_subp[i/16].data[5].key = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask0_subp[i/16].data[6].key = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask0_subp[i/16].data[7].key = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask0_subp[i/16].data[8].key = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask0_subp[i/16].data[9].key = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask0_subp[i/16].data[10].key = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask0_subp[i/16].data[11].key = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask0_subp[i/16].data[12].key = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask0_subp[i/16].data[13].key = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask0_subp[i/16].data[14].key = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask0_subp[i/16].data[15].key = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			} else {
				vmask0_subp[i/16].data[0].value = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask0_subp[i/16].data[1].value = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask0_subp[i/16].data[2].value = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask0_subp[i/16].data[3].value = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask0_subp[i/16].data[4].value = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask0_subp[i/16].data[5].value = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask0_subp[i/16].data[6].value = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask0_subp[i/16].data[7].value = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask0_subp[i/16].data[8].value = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask0_subp[i/16].data[9].value = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask0_subp[i/16].data[10].value = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask0_subp[i/16].data[11].value = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask0_subp[i/16].data[12].value = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask0_subp[i/16].data[13].value = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask0_subp[i/16].data[14].value = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask0_subp[i/16].data[15].value = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			}
			if(i%16==7){  // CRITICAL AUTOMATEME.
				vmask1_subp[i/16].data[0].key = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask1_subp[i/16].data[1].key = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask1_subp[i/16].data[2].key = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask1_subp[i/16].data[3].key = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask1_subp[i/16].data[4].key = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask1_subp[i/16].data[5].key = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask1_subp[i/16].data[6].key = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask1_subp[i/16].data[7].key = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask1_subp[i/16].data[8].key = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask1_subp[i/16].data[9].key = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask1_subp[i/16].data[10].key = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask1_subp[i/16].data[11].key = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask1_subp[i/16].data[12].key = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask1_subp[i/16].data[13].key = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask1_subp[i/16].data[14].key = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask1_subp[i/16].data[15].key = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			} else {
				vmask1_subp[i/16].data[0].value = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask1_subp[i/16].data[1].value = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask1_subp[i/16].data[2].value = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask1_subp[i/16].data[3].value = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask1_subp[i/16].data[4].value = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask1_subp[i/16].data[5].value = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask1_subp[i/16].data[6].value = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask1_subp[i/16].data[7].value = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask1_subp[i/16].data[8].value = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask1_subp[i/16].data[9].value = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask1_subp[i/16].data[10].value = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask1_subp[i/16].data[11].value = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask1_subp[i/16].data[12].value = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask1_subp[i/16].data[13].value = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask1_subp[i/16].data[14].value = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask1_subp[i/16].data[15].value = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			}
			if(i%16==7){  // CRITICAL AUTOMATEME.
				vmask2_subp[i/16].data[0].key = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask2_subp[i/16].data[1].key = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask2_subp[i/16].data[2].key = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask2_subp[i/16].data[3].key = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask2_subp[i/16].data[4].key = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask2_subp[i/16].data[5].key = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask2_subp[i/16].data[6].key = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask2_subp[i/16].data[7].key = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask2_subp[i/16].data[8].key = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask2_subp[i/16].data[9].key = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask2_subp[i/16].data[10].key = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask2_subp[i/16].data[11].key = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask2_subp[i/16].data[12].key = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask2_subp[i/16].data[13].key = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask2_subp[i/16].data[14].key = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask2_subp[i/16].data[15].key = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			} else {
				vmask2_subp[i/16].data[0].value = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask2_subp[i/16].data[1].value = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask2_subp[i/16].data[2].value = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask2_subp[i/16].data[3].value = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask2_subp[i/16].data[4].value = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask2_subp[i/16].data[5].value = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask2_subp[i/16].data[6].value = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask2_subp[i/16].data[7].value = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask2_subp[i/16].data[8].value = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask2_subp[i/16].data[9].value = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask2_subp[i/16].data[10].value = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask2_subp[i/16].data[11].value = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask2_subp[i/16].data[12].value = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask2_subp[i/16].data[13].value = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask2_subp[i/16].data[14].value = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask2_subp[i/16].data[15].value = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			}
			if(i%16==7){  // CRITICAL AUTOMATEME.
				vmask3_subp[i/16].data[0].key = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask3_subp[i/16].data[1].key = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask3_subp[i/16].data[2].key = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask3_subp[i/16].data[3].key = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask3_subp[i/16].data[4].key = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask3_subp[i/16].data[5].key = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask3_subp[i/16].data[6].key = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask3_subp[i/16].data[7].key = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask3_subp[i/16].data[8].key = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask3_subp[i/16].data[9].key = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask3_subp[i/16].data[10].key = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask3_subp[i/16].data[11].key = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask3_subp[i/16].data[12].key = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask3_subp[i/16].data[13].key = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask3_subp[i/16].data[14].key = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask3_subp[i/16].data[15].key = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			} else {
				vmask3_subp[i/16].data[0].value = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask3_subp[i/16].data[1].value = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask3_subp[i/16].data[2].value = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask3_subp[i/16].data[3].value = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask3_subp[i/16].data[4].value = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask3_subp[i/16].data[5].value = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask3_subp[i/16].data[6].value = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask3_subp[i/16].data[7].value = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask3_subp[i/16].data[8].value = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask3_subp[i/16].data[9].value = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask3_subp[i/16].data[10].value = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask3_subp[i/16].data[11].value = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask3_subp[i/16].data[12].value = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask3_subp[i/16].data[13].value = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask3_subp[i/16].data[14].value = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask3_subp[i/16].data[15].value = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			}
			
			tempvSUBmask.data[0].key = 0;
			tempvSUBmask.data[0].value = 0;
			tempvSUBmask.data[1].key = 0;
			tempvSUBmask.data[1].value = 0;
			tempvSUBmask.data[2].key = 0;
			tempvSUBmask.data[2].value = 0;
			tempvSUBmask.data[3].key = 0;
			tempvSUBmask.data[3].value = 0;
			tempvSUBmask.data[4].key = 0;
			tempvSUBmask.data[4].value = 0;
			tempvSUBmask.data[5].key = 0;
			tempvSUBmask.data[5].value = 0;
			tempvSUBmask.data[6].key = 0;
			tempvSUBmask.data[6].value = 0;
			tempvSUBmask.data[7].key = 0;
			tempvSUBmask.data[7].value = 0;
			tempvSUBmask.data[8].key = 0;
			tempvSUBmask.data[8].value = 0;
			tempvSUBmask.data[9].key = 0;
			tempvSUBmask.data[9].value = 0;
			tempvSUBmask.data[10].key = 0;
			tempvSUBmask.data[10].value = 0;
			tempvSUBmask.data[11].key = 0;
			tempvSUBmask.data[11].value = 0;
			tempvSUBmask.data[12].key = 0;
			tempvSUBmask.data[12].value = 0;
			tempvSUBmask.data[13].key = 0;
			tempvSUBmask.data[13].value = 0;
			tempvSUBmask.data[14].key = 0;
			tempvSUBmask.data[14].value = 0;
			tempvSUBmask.data[15].key = 0;
			tempvSUBmask.data[15].value = 0;
		}
		
		/* if(i % SUBPMASKFACTOR == SUBPMASKFACTOR-1){ // CRITICAL AUTOMATEME.
			if(i%16==7){  // CRITICAL AUTOMATEME.
				vmask0_subp[i/SUBPMASKFACTOR].data[0].key = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[1].key = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[2].key = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[3].key = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[4].key = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[5].key = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[6].key = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[7].key = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[8].key = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[9].key = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[10].key = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[11].key = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[12].key = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[13].key = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[14].key = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[15].key = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			} else {
				vmask0_subp[i/SUBPMASKFACTOR].data[0].value = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[1].value = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[2].value = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[3].value = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[4].value = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[5].value = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[6].value = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[7].value = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[8].value = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[9].value = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[10].value = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[11].value = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[12].value = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[13].value = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[14].value = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[15].value = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			}
			if(i%16==7){  // CRITICAL AUTOMATEME.
				vmask1_subp[i/SUBPMASKFACTOR].data[0].key = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[1].key = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[2].key = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[3].key = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[4].key = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[5].key = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[6].key = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[7].key = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[8].key = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[9].key = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[10].key = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[11].key = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[12].key = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[13].key = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[14].key = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[15].key = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			} else {
				vmask1_subp[i/SUBPMASKFACTOR].data[0].value = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[1].value = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[2].value = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[3].value = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[4].value = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[5].value = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[6].value = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[7].value = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[8].value = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[9].value = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[10].value = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[11].value = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[12].value = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[13].value = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[14].value = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[15].value = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			}
			if(i%16==7){  // CRITICAL AUTOMATEME.
				vmask2_subp[i/SUBPMASKFACTOR].data[0].key = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[1].key = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[2].key = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[3].key = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[4].key = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[5].key = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[6].key = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[7].key = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[8].key = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[9].key = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[10].key = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[11].key = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[12].key = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[13].key = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[14].key = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[15].key = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			} else {
				vmask2_subp[i/SUBPMASKFACTOR].data[0].value = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[1].value = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[2].value = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[3].value = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[4].value = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[5].value = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[6].value = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[7].value = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[8].value = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[9].value = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[10].value = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[11].value = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[12].value = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[13].value = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[14].value = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[15].value = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			}
			if(i%16==7){  // CRITICAL AUTOMATEME.
				vmask3_subp[i/SUBPMASKFACTOR].data[0].key = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[1].key = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[2].key = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[3].key = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[4].key = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[5].key = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[6].key = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[7].key = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[8].key = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[9].key = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[10].key = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[11].key = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[12].key = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[13].key = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[14].key = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[15].key = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			} else {
				vmask3_subp[i/SUBPMASKFACTOR].data[0].value = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[1].value = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[2].value = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[3].value = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[4].value = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[5].value = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[6].value = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[7].value = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[8].value = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[9].value = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[10].value = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[11].value = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[12].value = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[13].value = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[14].value = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[15].value = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			}
			
			tempvSUBmask.data[0].key = 0;
			tempvSUBmask.data[0].value = 0;
			tempvSUBmask.data[1].key = 0;
			tempvSUBmask.data[1].value = 0;
			tempvSUBmask.data[2].key = 0;
			tempvSUBmask.data[2].value = 0;
			tempvSUBmask.data[3].key = 0;
			tempvSUBmask.data[3].value = 0;
			tempvSUBmask.data[4].key = 0;
			tempvSUBmask.data[4].value = 0;
			tempvSUBmask.data[5].key = 0;
			tempvSUBmask.data[5].value = 0;
			tempvSUBmask.data[6].key = 0;
			tempvSUBmask.data[6].value = 0;
			tempvSUBmask.data[7].key = 0;
			tempvSUBmask.data[7].value = 0;
			tempvSUBmask.data[8].key = 0;
			tempvSUBmask.data[8].value = 0;
			tempvSUBmask.data[9].key = 0;
			tempvSUBmask.data[9].value = 0;
			tempvSUBmask.data[10].key = 0;
			tempvSUBmask.data[10].value = 0;
			tempvSUBmask.data[11].key = 0;
			tempvSUBmask.data[11].value = 0;
			tempvSUBmask.data[12].key = 0;
			tempvSUBmask.data[12].value = 0;
			tempvSUBmask.data[13].key = 0;
			tempvSUBmask.data[13].value = 0;
			tempvSUBmask.data[14].key = 0;
			tempvSUBmask.data[14].value = 0;
			tempvSUBmask.data[15].key = 0;
			tempvSUBmask.data[15].value = 0;
		} */
		#endif 
	}
	return;
}
void //
	#ifdef SW 
	actsproc::
	#endif 
loadmany5vmasks_subp(bool_type enable, unitBRAMwidth_type vmask0[BLOCKRAM_SIZE], unitBRAMwidth_type vmask0_subp[BLOCKRAM_SIZE],unitBRAMwidth_type vmask1_subp[BLOCKRAM_SIZE],unitBRAMwidth_type vmask2_subp[BLOCKRAM_SIZE],unitBRAMwidth_type vmask3_subp[BLOCKRAM_SIZE],unitBRAMwidth_type vmask4_subp[BLOCKRAM_SIZE], buffer_type size_kvs){
	if(enable == OFF){ return; }
	analysis_type analysis_loopcount1 = BLOCKRAM_SIZE;
	analysis_type analysis_loopcount2 = BLOCKRAM_SIZE / 16;
	analysis_type analysis_loopcount3 = BLOCKRAM_SIZE;
	
	buffer_type transfsize = size_kvs * 16;

	unitBRAMwidth_type tempvmask;
	#pragma HLS DATA_PACK variable = tempvmask	
	unitBRAMwidth_type tempvSUBmask;
	#pragma HLS DATA_PACK variable = tempvSUBmask		
	tempvSUBmask.data[0].key = 0;
	tempvSUBmask.data[0].value = 0;
	tempvSUBmask.data[1].key = 0;
	tempvSUBmask.data[1].value = 0;
	tempvSUBmask.data[2].key = 0;
	tempvSUBmask.data[2].value = 0;
	tempvSUBmask.data[3].key = 0;
	tempvSUBmask.data[3].value = 0;
	tempvSUBmask.data[4].key = 0;
	tempvSUBmask.data[4].value = 0;
	tempvSUBmask.data[5].key = 0;
	tempvSUBmask.data[5].value = 0;
	tempvSUBmask.data[6].key = 0;
	tempvSUBmask.data[6].value = 0;
	tempvSUBmask.data[7].key = 0;
	tempvSUBmask.data[7].value = 0;
	tempvSUBmask.data[8].key = 0;
	tempvSUBmask.data[8].value = 0;
	tempvSUBmask.data[9].key = 0;
	tempvSUBmask.data[9].value = 0;
	tempvSUBmask.data[10].key = 0;
	tempvSUBmask.data[10].value = 0;
	tempvSUBmask.data[11].key = 0;
	tempvSUBmask.data[11].value = 0;
	tempvSUBmask.data[12].key = 0;
	tempvSUBmask.data[12].value = 0;
	tempvSUBmask.data[13].key = 0;
	tempvSUBmask.data[13].value = 0;
	tempvSUBmask.data[14].key = 0;
	tempvSUBmask.data[14].value = 0;
	tempvSUBmask.data[15].key = 0;
	tempvSUBmask.data[15].value = 0;
	LOADVMASKSSUBP_LOOP2: for (buffer_type i=0; i<transfsize; i++){ // transfsize, reducebuffersz
	#pragma HLS LOOP_TRIPCOUNT min=0 max=analysis_loopcount3 avg=analysis_loopcount3
	#pragma HLS PIPELINE II=2
		
		tempvmask = vmask0[i];
		
		// subp mask 
		#ifdef ENABLE_SUBVMASKING
		tempvSUBmask.data[0].key = tempvSUBmask.data[0].key | tempvmask.data[0].key;
		tempvSUBmask.data[0].value = tempvSUBmask.data[0].value | tempvmask.data[0].value;
		tempvSUBmask.data[1].key = tempvSUBmask.data[1].key | tempvmask.data[1].key;
		tempvSUBmask.data[1].value = tempvSUBmask.data[1].value | tempvmask.data[1].value;
		tempvSUBmask.data[2].key = tempvSUBmask.data[2].key | tempvmask.data[2].key;
		tempvSUBmask.data[2].value = tempvSUBmask.data[2].value | tempvmask.data[2].value;
		tempvSUBmask.data[3].key = tempvSUBmask.data[3].key | tempvmask.data[3].key;
		tempvSUBmask.data[3].value = tempvSUBmask.data[3].value | tempvmask.data[3].value;
		tempvSUBmask.data[4].key = tempvSUBmask.data[4].key | tempvmask.data[4].key;
		tempvSUBmask.data[4].value = tempvSUBmask.data[4].value | tempvmask.data[4].value;
		tempvSUBmask.data[5].key = tempvSUBmask.data[5].key | tempvmask.data[5].key;
		tempvSUBmask.data[5].value = tempvSUBmask.data[5].value | tempvmask.data[5].value;
		tempvSUBmask.data[6].key = tempvSUBmask.data[6].key | tempvmask.data[6].key;
		tempvSUBmask.data[6].value = tempvSUBmask.data[6].value | tempvmask.data[6].value;
		tempvSUBmask.data[7].key = tempvSUBmask.data[7].key | tempvmask.data[7].key;
		tempvSUBmask.data[7].value = tempvSUBmask.data[7].value | tempvmask.data[7].value;
		tempvSUBmask.data[8].key = tempvSUBmask.data[8].key | tempvmask.data[8].key;
		tempvSUBmask.data[8].value = tempvSUBmask.data[8].value | tempvmask.data[8].value;
		tempvSUBmask.data[9].key = tempvSUBmask.data[9].key | tempvmask.data[9].key;
		tempvSUBmask.data[9].value = tempvSUBmask.data[9].value | tempvmask.data[9].value;
		tempvSUBmask.data[10].key = tempvSUBmask.data[10].key | tempvmask.data[10].key;
		tempvSUBmask.data[10].value = tempvSUBmask.data[10].value | tempvmask.data[10].value;
		tempvSUBmask.data[11].key = tempvSUBmask.data[11].key | tempvmask.data[11].key;
		tempvSUBmask.data[11].value = tempvSUBmask.data[11].value | tempvmask.data[11].value;
		tempvSUBmask.data[12].key = tempvSUBmask.data[12].key | tempvmask.data[12].key;
		tempvSUBmask.data[12].value = tempvSUBmask.data[12].value | tempvmask.data[12].value;
		tempvSUBmask.data[13].key = tempvSUBmask.data[13].key | tempvmask.data[13].key;
		tempvSUBmask.data[13].value = tempvSUBmask.data[13].value | tempvmask.data[13].value;
		tempvSUBmask.data[14].key = tempvSUBmask.data[14].key | tempvmask.data[14].key;
		tempvSUBmask.data[14].value = tempvSUBmask.data[14].value | tempvmask.data[14].value;
		tempvSUBmask.data[15].key = tempvSUBmask.data[15].key | tempvmask.data[15].key;
		tempvSUBmask.data[15].value = tempvSUBmask.data[15].value | tempvmask.data[15].value;
		
		if(i % 8 == 7){ // CRITICAL AUTOMATEME.
			if(i%16==7){  // CRITICAL AUTOMATEME.
				vmask0_subp[i/16].data[0].key = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask0_subp[i/16].data[1].key = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask0_subp[i/16].data[2].key = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask0_subp[i/16].data[3].key = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask0_subp[i/16].data[4].key = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask0_subp[i/16].data[5].key = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask0_subp[i/16].data[6].key = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask0_subp[i/16].data[7].key = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask0_subp[i/16].data[8].key = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask0_subp[i/16].data[9].key = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask0_subp[i/16].data[10].key = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask0_subp[i/16].data[11].key = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask0_subp[i/16].data[12].key = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask0_subp[i/16].data[13].key = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask0_subp[i/16].data[14].key = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask0_subp[i/16].data[15].key = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			} else {
				vmask0_subp[i/16].data[0].value = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask0_subp[i/16].data[1].value = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask0_subp[i/16].data[2].value = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask0_subp[i/16].data[3].value = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask0_subp[i/16].data[4].value = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask0_subp[i/16].data[5].value = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask0_subp[i/16].data[6].value = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask0_subp[i/16].data[7].value = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask0_subp[i/16].data[8].value = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask0_subp[i/16].data[9].value = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask0_subp[i/16].data[10].value = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask0_subp[i/16].data[11].value = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask0_subp[i/16].data[12].value = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask0_subp[i/16].data[13].value = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask0_subp[i/16].data[14].value = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask0_subp[i/16].data[15].value = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			}
			if(i%16==7){  // CRITICAL AUTOMATEME.
				vmask1_subp[i/16].data[0].key = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask1_subp[i/16].data[1].key = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask1_subp[i/16].data[2].key = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask1_subp[i/16].data[3].key = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask1_subp[i/16].data[4].key = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask1_subp[i/16].data[5].key = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask1_subp[i/16].data[6].key = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask1_subp[i/16].data[7].key = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask1_subp[i/16].data[8].key = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask1_subp[i/16].data[9].key = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask1_subp[i/16].data[10].key = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask1_subp[i/16].data[11].key = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask1_subp[i/16].data[12].key = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask1_subp[i/16].data[13].key = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask1_subp[i/16].data[14].key = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask1_subp[i/16].data[15].key = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			} else {
				vmask1_subp[i/16].data[0].value = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask1_subp[i/16].data[1].value = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask1_subp[i/16].data[2].value = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask1_subp[i/16].data[3].value = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask1_subp[i/16].data[4].value = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask1_subp[i/16].data[5].value = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask1_subp[i/16].data[6].value = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask1_subp[i/16].data[7].value = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask1_subp[i/16].data[8].value = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask1_subp[i/16].data[9].value = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask1_subp[i/16].data[10].value = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask1_subp[i/16].data[11].value = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask1_subp[i/16].data[12].value = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask1_subp[i/16].data[13].value = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask1_subp[i/16].data[14].value = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask1_subp[i/16].data[15].value = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			}
			if(i%16==7){  // CRITICAL AUTOMATEME.
				vmask2_subp[i/16].data[0].key = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask2_subp[i/16].data[1].key = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask2_subp[i/16].data[2].key = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask2_subp[i/16].data[3].key = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask2_subp[i/16].data[4].key = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask2_subp[i/16].data[5].key = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask2_subp[i/16].data[6].key = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask2_subp[i/16].data[7].key = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask2_subp[i/16].data[8].key = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask2_subp[i/16].data[9].key = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask2_subp[i/16].data[10].key = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask2_subp[i/16].data[11].key = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask2_subp[i/16].data[12].key = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask2_subp[i/16].data[13].key = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask2_subp[i/16].data[14].key = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask2_subp[i/16].data[15].key = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			} else {
				vmask2_subp[i/16].data[0].value = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask2_subp[i/16].data[1].value = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask2_subp[i/16].data[2].value = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask2_subp[i/16].data[3].value = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask2_subp[i/16].data[4].value = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask2_subp[i/16].data[5].value = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask2_subp[i/16].data[6].value = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask2_subp[i/16].data[7].value = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask2_subp[i/16].data[8].value = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask2_subp[i/16].data[9].value = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask2_subp[i/16].data[10].value = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask2_subp[i/16].data[11].value = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask2_subp[i/16].data[12].value = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask2_subp[i/16].data[13].value = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask2_subp[i/16].data[14].value = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask2_subp[i/16].data[15].value = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			}
			if(i%16==7){  // CRITICAL AUTOMATEME.
				vmask3_subp[i/16].data[0].key = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask3_subp[i/16].data[1].key = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask3_subp[i/16].data[2].key = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask3_subp[i/16].data[3].key = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask3_subp[i/16].data[4].key = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask3_subp[i/16].data[5].key = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask3_subp[i/16].data[6].key = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask3_subp[i/16].data[7].key = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask3_subp[i/16].data[8].key = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask3_subp[i/16].data[9].key = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask3_subp[i/16].data[10].key = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask3_subp[i/16].data[11].key = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask3_subp[i/16].data[12].key = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask3_subp[i/16].data[13].key = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask3_subp[i/16].data[14].key = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask3_subp[i/16].data[15].key = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			} else {
				vmask3_subp[i/16].data[0].value = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask3_subp[i/16].data[1].value = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask3_subp[i/16].data[2].value = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask3_subp[i/16].data[3].value = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask3_subp[i/16].data[4].value = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask3_subp[i/16].data[5].value = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask3_subp[i/16].data[6].value = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask3_subp[i/16].data[7].value = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask3_subp[i/16].data[8].value = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask3_subp[i/16].data[9].value = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask3_subp[i/16].data[10].value = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask3_subp[i/16].data[11].value = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask3_subp[i/16].data[12].value = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask3_subp[i/16].data[13].value = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask3_subp[i/16].data[14].value = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask3_subp[i/16].data[15].value = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			}
			if(i%16==7){  // CRITICAL AUTOMATEME.
				vmask4_subp[i/16].data[0].key = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask4_subp[i/16].data[1].key = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask4_subp[i/16].data[2].key = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask4_subp[i/16].data[3].key = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask4_subp[i/16].data[4].key = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask4_subp[i/16].data[5].key = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask4_subp[i/16].data[6].key = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask4_subp[i/16].data[7].key = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask4_subp[i/16].data[8].key = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask4_subp[i/16].data[9].key = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask4_subp[i/16].data[10].key = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask4_subp[i/16].data[11].key = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask4_subp[i/16].data[12].key = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask4_subp[i/16].data[13].key = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask4_subp[i/16].data[14].key = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask4_subp[i/16].data[15].key = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			} else {
				vmask4_subp[i/16].data[0].value = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask4_subp[i/16].data[1].value = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask4_subp[i/16].data[2].value = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask4_subp[i/16].data[3].value = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask4_subp[i/16].data[4].value = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask4_subp[i/16].data[5].value = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask4_subp[i/16].data[6].value = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask4_subp[i/16].data[7].value = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask4_subp[i/16].data[8].value = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask4_subp[i/16].data[9].value = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask4_subp[i/16].data[10].value = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask4_subp[i/16].data[11].value = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask4_subp[i/16].data[12].value = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask4_subp[i/16].data[13].value = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask4_subp[i/16].data[14].value = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask4_subp[i/16].data[15].value = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			}
			
			tempvSUBmask.data[0].key = 0;
			tempvSUBmask.data[0].value = 0;
			tempvSUBmask.data[1].key = 0;
			tempvSUBmask.data[1].value = 0;
			tempvSUBmask.data[2].key = 0;
			tempvSUBmask.data[2].value = 0;
			tempvSUBmask.data[3].key = 0;
			tempvSUBmask.data[3].value = 0;
			tempvSUBmask.data[4].key = 0;
			tempvSUBmask.data[4].value = 0;
			tempvSUBmask.data[5].key = 0;
			tempvSUBmask.data[5].value = 0;
			tempvSUBmask.data[6].key = 0;
			tempvSUBmask.data[6].value = 0;
			tempvSUBmask.data[7].key = 0;
			tempvSUBmask.data[7].value = 0;
			tempvSUBmask.data[8].key = 0;
			tempvSUBmask.data[8].value = 0;
			tempvSUBmask.data[9].key = 0;
			tempvSUBmask.data[9].value = 0;
			tempvSUBmask.data[10].key = 0;
			tempvSUBmask.data[10].value = 0;
			tempvSUBmask.data[11].key = 0;
			tempvSUBmask.data[11].value = 0;
			tempvSUBmask.data[12].key = 0;
			tempvSUBmask.data[12].value = 0;
			tempvSUBmask.data[13].key = 0;
			tempvSUBmask.data[13].value = 0;
			tempvSUBmask.data[14].key = 0;
			tempvSUBmask.data[14].value = 0;
			tempvSUBmask.data[15].key = 0;
			tempvSUBmask.data[15].value = 0;
		}
		
		/* if(i % SUBPMASKFACTOR == SUBPMASKFACTOR-1){ // CRITICAL AUTOMATEME.
			if(i%16==7){  // CRITICAL AUTOMATEME.
				vmask0_subp[i/SUBPMASKFACTOR].data[0].key = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[1].key = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[2].key = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[3].key = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[4].key = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[5].key = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[6].key = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[7].key = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[8].key = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[9].key = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[10].key = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[11].key = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[12].key = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[13].key = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[14].key = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[15].key = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			} else {
				vmask0_subp[i/SUBPMASKFACTOR].data[0].value = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[1].value = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[2].value = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[3].value = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[4].value = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[5].value = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[6].value = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[7].value = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[8].value = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[9].value = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[10].value = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[11].value = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[12].value = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[13].value = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[14].value = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[15].value = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			}
			if(i%16==7){  // CRITICAL AUTOMATEME.
				vmask1_subp[i/SUBPMASKFACTOR].data[0].key = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[1].key = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[2].key = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[3].key = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[4].key = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[5].key = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[6].key = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[7].key = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[8].key = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[9].key = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[10].key = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[11].key = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[12].key = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[13].key = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[14].key = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[15].key = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			} else {
				vmask1_subp[i/SUBPMASKFACTOR].data[0].value = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[1].value = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[2].value = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[3].value = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[4].value = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[5].value = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[6].value = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[7].value = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[8].value = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[9].value = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[10].value = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[11].value = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[12].value = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[13].value = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[14].value = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[15].value = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			}
			if(i%16==7){  // CRITICAL AUTOMATEME.
				vmask2_subp[i/SUBPMASKFACTOR].data[0].key = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[1].key = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[2].key = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[3].key = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[4].key = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[5].key = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[6].key = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[7].key = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[8].key = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[9].key = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[10].key = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[11].key = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[12].key = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[13].key = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[14].key = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[15].key = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			} else {
				vmask2_subp[i/SUBPMASKFACTOR].data[0].value = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[1].value = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[2].value = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[3].value = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[4].value = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[5].value = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[6].value = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[7].value = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[8].value = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[9].value = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[10].value = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[11].value = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[12].value = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[13].value = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[14].value = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[15].value = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			}
			if(i%16==7){  // CRITICAL AUTOMATEME.
				vmask3_subp[i/SUBPMASKFACTOR].data[0].key = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[1].key = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[2].key = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[3].key = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[4].key = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[5].key = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[6].key = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[7].key = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[8].key = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[9].key = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[10].key = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[11].key = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[12].key = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[13].key = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[14].key = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[15].key = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			} else {
				vmask3_subp[i/SUBPMASKFACTOR].data[0].value = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[1].value = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[2].value = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[3].value = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[4].value = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[5].value = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[6].value = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[7].value = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[8].value = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[9].value = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[10].value = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[11].value = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[12].value = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[13].value = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[14].value = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[15].value = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			}
			if(i%16==7){  // CRITICAL AUTOMATEME.
				vmask4_subp[i/SUBPMASKFACTOR].data[0].key = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[1].key = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[2].key = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[3].key = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[4].key = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[5].key = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[6].key = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[7].key = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[8].key = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[9].key = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[10].key = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[11].key = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[12].key = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[13].key = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[14].key = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[15].key = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			} else {
				vmask4_subp[i/SUBPMASKFACTOR].data[0].value = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[1].value = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[2].value = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[3].value = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[4].value = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[5].value = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[6].value = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[7].value = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[8].value = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[9].value = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[10].value = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[11].value = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[12].value = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[13].value = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[14].value = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[15].value = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			}
			
			tempvSUBmask.data[0].key = 0;
			tempvSUBmask.data[0].value = 0;
			tempvSUBmask.data[1].key = 0;
			tempvSUBmask.data[1].value = 0;
			tempvSUBmask.data[2].key = 0;
			tempvSUBmask.data[2].value = 0;
			tempvSUBmask.data[3].key = 0;
			tempvSUBmask.data[3].value = 0;
			tempvSUBmask.data[4].key = 0;
			tempvSUBmask.data[4].value = 0;
			tempvSUBmask.data[5].key = 0;
			tempvSUBmask.data[5].value = 0;
			tempvSUBmask.data[6].key = 0;
			tempvSUBmask.data[6].value = 0;
			tempvSUBmask.data[7].key = 0;
			tempvSUBmask.data[7].value = 0;
			tempvSUBmask.data[8].key = 0;
			tempvSUBmask.data[8].value = 0;
			tempvSUBmask.data[9].key = 0;
			tempvSUBmask.data[9].value = 0;
			tempvSUBmask.data[10].key = 0;
			tempvSUBmask.data[10].value = 0;
			tempvSUBmask.data[11].key = 0;
			tempvSUBmask.data[11].value = 0;
			tempvSUBmask.data[12].key = 0;
			tempvSUBmask.data[12].value = 0;
			tempvSUBmask.data[13].key = 0;
			tempvSUBmask.data[13].value = 0;
			tempvSUBmask.data[14].key = 0;
			tempvSUBmask.data[14].value = 0;
			tempvSUBmask.data[15].key = 0;
			tempvSUBmask.data[15].value = 0;
		} */
		#endif 
	}
	return;
}
void //
	#ifdef SW 
	actsproc::
	#endif 
loadmany6vmasks_subp(bool_type enable, unitBRAMwidth_type vmask0[BLOCKRAM_SIZE], unitBRAMwidth_type vmask0_subp[BLOCKRAM_SIZE],unitBRAMwidth_type vmask1_subp[BLOCKRAM_SIZE],unitBRAMwidth_type vmask2_subp[BLOCKRAM_SIZE],unitBRAMwidth_type vmask3_subp[BLOCKRAM_SIZE],unitBRAMwidth_type vmask4_subp[BLOCKRAM_SIZE],unitBRAMwidth_type vmask5_subp[BLOCKRAM_SIZE], buffer_type size_kvs){
	if(enable == OFF){ return; }
	analysis_type analysis_loopcount1 = BLOCKRAM_SIZE;
	analysis_type analysis_loopcount2 = BLOCKRAM_SIZE / 16;
	analysis_type analysis_loopcount3 = BLOCKRAM_SIZE;
	
	buffer_type transfsize = size_kvs * 16;

	unitBRAMwidth_type tempvmask;
	#pragma HLS DATA_PACK variable = tempvmask	
	unitBRAMwidth_type tempvSUBmask;
	#pragma HLS DATA_PACK variable = tempvSUBmask		
	tempvSUBmask.data[0].key = 0;
	tempvSUBmask.data[0].value = 0;
	tempvSUBmask.data[1].key = 0;
	tempvSUBmask.data[1].value = 0;
	tempvSUBmask.data[2].key = 0;
	tempvSUBmask.data[2].value = 0;
	tempvSUBmask.data[3].key = 0;
	tempvSUBmask.data[3].value = 0;
	tempvSUBmask.data[4].key = 0;
	tempvSUBmask.data[4].value = 0;
	tempvSUBmask.data[5].key = 0;
	tempvSUBmask.data[5].value = 0;
	tempvSUBmask.data[6].key = 0;
	tempvSUBmask.data[6].value = 0;
	tempvSUBmask.data[7].key = 0;
	tempvSUBmask.data[7].value = 0;
	tempvSUBmask.data[8].key = 0;
	tempvSUBmask.data[8].value = 0;
	tempvSUBmask.data[9].key = 0;
	tempvSUBmask.data[9].value = 0;
	tempvSUBmask.data[10].key = 0;
	tempvSUBmask.data[10].value = 0;
	tempvSUBmask.data[11].key = 0;
	tempvSUBmask.data[11].value = 0;
	tempvSUBmask.data[12].key = 0;
	tempvSUBmask.data[12].value = 0;
	tempvSUBmask.data[13].key = 0;
	tempvSUBmask.data[13].value = 0;
	tempvSUBmask.data[14].key = 0;
	tempvSUBmask.data[14].value = 0;
	tempvSUBmask.data[15].key = 0;
	tempvSUBmask.data[15].value = 0;
	LOADVMASKSSUBP_LOOP2: for (buffer_type i=0; i<transfsize; i++){ // transfsize, reducebuffersz
	#pragma HLS LOOP_TRIPCOUNT min=0 max=analysis_loopcount3 avg=analysis_loopcount3
	#pragma HLS PIPELINE II=2
		
		tempvmask = vmask0[i];
		
		// subp mask 
		#ifdef ENABLE_SUBVMASKING
		tempvSUBmask.data[0].key = tempvSUBmask.data[0].key | tempvmask.data[0].key;
		tempvSUBmask.data[0].value = tempvSUBmask.data[0].value | tempvmask.data[0].value;
		tempvSUBmask.data[1].key = tempvSUBmask.data[1].key | tempvmask.data[1].key;
		tempvSUBmask.data[1].value = tempvSUBmask.data[1].value | tempvmask.data[1].value;
		tempvSUBmask.data[2].key = tempvSUBmask.data[2].key | tempvmask.data[2].key;
		tempvSUBmask.data[2].value = tempvSUBmask.data[2].value | tempvmask.data[2].value;
		tempvSUBmask.data[3].key = tempvSUBmask.data[3].key | tempvmask.data[3].key;
		tempvSUBmask.data[3].value = tempvSUBmask.data[3].value | tempvmask.data[3].value;
		tempvSUBmask.data[4].key = tempvSUBmask.data[4].key | tempvmask.data[4].key;
		tempvSUBmask.data[4].value = tempvSUBmask.data[4].value | tempvmask.data[4].value;
		tempvSUBmask.data[5].key = tempvSUBmask.data[5].key | tempvmask.data[5].key;
		tempvSUBmask.data[5].value = tempvSUBmask.data[5].value | tempvmask.data[5].value;
		tempvSUBmask.data[6].key = tempvSUBmask.data[6].key | tempvmask.data[6].key;
		tempvSUBmask.data[6].value = tempvSUBmask.data[6].value | tempvmask.data[6].value;
		tempvSUBmask.data[7].key = tempvSUBmask.data[7].key | tempvmask.data[7].key;
		tempvSUBmask.data[7].value = tempvSUBmask.data[7].value | tempvmask.data[7].value;
		tempvSUBmask.data[8].key = tempvSUBmask.data[8].key | tempvmask.data[8].key;
		tempvSUBmask.data[8].value = tempvSUBmask.data[8].value | tempvmask.data[8].value;
		tempvSUBmask.data[9].key = tempvSUBmask.data[9].key | tempvmask.data[9].key;
		tempvSUBmask.data[9].value = tempvSUBmask.data[9].value | tempvmask.data[9].value;
		tempvSUBmask.data[10].key = tempvSUBmask.data[10].key | tempvmask.data[10].key;
		tempvSUBmask.data[10].value = tempvSUBmask.data[10].value | tempvmask.data[10].value;
		tempvSUBmask.data[11].key = tempvSUBmask.data[11].key | tempvmask.data[11].key;
		tempvSUBmask.data[11].value = tempvSUBmask.data[11].value | tempvmask.data[11].value;
		tempvSUBmask.data[12].key = tempvSUBmask.data[12].key | tempvmask.data[12].key;
		tempvSUBmask.data[12].value = tempvSUBmask.data[12].value | tempvmask.data[12].value;
		tempvSUBmask.data[13].key = tempvSUBmask.data[13].key | tempvmask.data[13].key;
		tempvSUBmask.data[13].value = tempvSUBmask.data[13].value | tempvmask.data[13].value;
		tempvSUBmask.data[14].key = tempvSUBmask.data[14].key | tempvmask.data[14].key;
		tempvSUBmask.data[14].value = tempvSUBmask.data[14].value | tempvmask.data[14].value;
		tempvSUBmask.data[15].key = tempvSUBmask.data[15].key | tempvmask.data[15].key;
		tempvSUBmask.data[15].value = tempvSUBmask.data[15].value | tempvmask.data[15].value;
		
		if(i % 8 == 7){ // CRITICAL AUTOMATEME.
			if(i%16==7){  // CRITICAL AUTOMATEME.
				vmask0_subp[i/16].data[0].key = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask0_subp[i/16].data[1].key = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask0_subp[i/16].data[2].key = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask0_subp[i/16].data[3].key = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask0_subp[i/16].data[4].key = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask0_subp[i/16].data[5].key = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask0_subp[i/16].data[6].key = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask0_subp[i/16].data[7].key = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask0_subp[i/16].data[8].key = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask0_subp[i/16].data[9].key = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask0_subp[i/16].data[10].key = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask0_subp[i/16].data[11].key = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask0_subp[i/16].data[12].key = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask0_subp[i/16].data[13].key = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask0_subp[i/16].data[14].key = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask0_subp[i/16].data[15].key = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			} else {
				vmask0_subp[i/16].data[0].value = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask0_subp[i/16].data[1].value = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask0_subp[i/16].data[2].value = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask0_subp[i/16].data[3].value = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask0_subp[i/16].data[4].value = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask0_subp[i/16].data[5].value = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask0_subp[i/16].data[6].value = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask0_subp[i/16].data[7].value = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask0_subp[i/16].data[8].value = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask0_subp[i/16].data[9].value = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask0_subp[i/16].data[10].value = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask0_subp[i/16].data[11].value = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask0_subp[i/16].data[12].value = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask0_subp[i/16].data[13].value = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask0_subp[i/16].data[14].value = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask0_subp[i/16].data[15].value = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			}
			if(i%16==7){  // CRITICAL AUTOMATEME.
				vmask1_subp[i/16].data[0].key = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask1_subp[i/16].data[1].key = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask1_subp[i/16].data[2].key = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask1_subp[i/16].data[3].key = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask1_subp[i/16].data[4].key = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask1_subp[i/16].data[5].key = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask1_subp[i/16].data[6].key = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask1_subp[i/16].data[7].key = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask1_subp[i/16].data[8].key = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask1_subp[i/16].data[9].key = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask1_subp[i/16].data[10].key = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask1_subp[i/16].data[11].key = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask1_subp[i/16].data[12].key = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask1_subp[i/16].data[13].key = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask1_subp[i/16].data[14].key = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask1_subp[i/16].data[15].key = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			} else {
				vmask1_subp[i/16].data[0].value = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask1_subp[i/16].data[1].value = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask1_subp[i/16].data[2].value = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask1_subp[i/16].data[3].value = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask1_subp[i/16].data[4].value = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask1_subp[i/16].data[5].value = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask1_subp[i/16].data[6].value = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask1_subp[i/16].data[7].value = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask1_subp[i/16].data[8].value = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask1_subp[i/16].data[9].value = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask1_subp[i/16].data[10].value = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask1_subp[i/16].data[11].value = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask1_subp[i/16].data[12].value = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask1_subp[i/16].data[13].value = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask1_subp[i/16].data[14].value = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask1_subp[i/16].data[15].value = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			}
			if(i%16==7){  // CRITICAL AUTOMATEME.
				vmask2_subp[i/16].data[0].key = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask2_subp[i/16].data[1].key = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask2_subp[i/16].data[2].key = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask2_subp[i/16].data[3].key = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask2_subp[i/16].data[4].key = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask2_subp[i/16].data[5].key = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask2_subp[i/16].data[6].key = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask2_subp[i/16].data[7].key = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask2_subp[i/16].data[8].key = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask2_subp[i/16].data[9].key = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask2_subp[i/16].data[10].key = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask2_subp[i/16].data[11].key = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask2_subp[i/16].data[12].key = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask2_subp[i/16].data[13].key = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask2_subp[i/16].data[14].key = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask2_subp[i/16].data[15].key = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			} else {
				vmask2_subp[i/16].data[0].value = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask2_subp[i/16].data[1].value = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask2_subp[i/16].data[2].value = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask2_subp[i/16].data[3].value = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask2_subp[i/16].data[4].value = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask2_subp[i/16].data[5].value = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask2_subp[i/16].data[6].value = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask2_subp[i/16].data[7].value = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask2_subp[i/16].data[8].value = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask2_subp[i/16].data[9].value = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask2_subp[i/16].data[10].value = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask2_subp[i/16].data[11].value = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask2_subp[i/16].data[12].value = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask2_subp[i/16].data[13].value = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask2_subp[i/16].data[14].value = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask2_subp[i/16].data[15].value = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			}
			if(i%16==7){  // CRITICAL AUTOMATEME.
				vmask3_subp[i/16].data[0].key = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask3_subp[i/16].data[1].key = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask3_subp[i/16].data[2].key = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask3_subp[i/16].data[3].key = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask3_subp[i/16].data[4].key = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask3_subp[i/16].data[5].key = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask3_subp[i/16].data[6].key = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask3_subp[i/16].data[7].key = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask3_subp[i/16].data[8].key = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask3_subp[i/16].data[9].key = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask3_subp[i/16].data[10].key = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask3_subp[i/16].data[11].key = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask3_subp[i/16].data[12].key = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask3_subp[i/16].data[13].key = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask3_subp[i/16].data[14].key = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask3_subp[i/16].data[15].key = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			} else {
				vmask3_subp[i/16].data[0].value = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask3_subp[i/16].data[1].value = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask3_subp[i/16].data[2].value = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask3_subp[i/16].data[3].value = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask3_subp[i/16].data[4].value = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask3_subp[i/16].data[5].value = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask3_subp[i/16].data[6].value = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask3_subp[i/16].data[7].value = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask3_subp[i/16].data[8].value = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask3_subp[i/16].data[9].value = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask3_subp[i/16].data[10].value = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask3_subp[i/16].data[11].value = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask3_subp[i/16].data[12].value = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask3_subp[i/16].data[13].value = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask3_subp[i/16].data[14].value = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask3_subp[i/16].data[15].value = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			}
			if(i%16==7){  // CRITICAL AUTOMATEME.
				vmask4_subp[i/16].data[0].key = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask4_subp[i/16].data[1].key = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask4_subp[i/16].data[2].key = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask4_subp[i/16].data[3].key = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask4_subp[i/16].data[4].key = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask4_subp[i/16].data[5].key = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask4_subp[i/16].data[6].key = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask4_subp[i/16].data[7].key = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask4_subp[i/16].data[8].key = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask4_subp[i/16].data[9].key = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask4_subp[i/16].data[10].key = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask4_subp[i/16].data[11].key = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask4_subp[i/16].data[12].key = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask4_subp[i/16].data[13].key = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask4_subp[i/16].data[14].key = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask4_subp[i/16].data[15].key = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			} else {
				vmask4_subp[i/16].data[0].value = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask4_subp[i/16].data[1].value = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask4_subp[i/16].data[2].value = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask4_subp[i/16].data[3].value = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask4_subp[i/16].data[4].value = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask4_subp[i/16].data[5].value = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask4_subp[i/16].data[6].value = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask4_subp[i/16].data[7].value = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask4_subp[i/16].data[8].value = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask4_subp[i/16].data[9].value = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask4_subp[i/16].data[10].value = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask4_subp[i/16].data[11].value = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask4_subp[i/16].data[12].value = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask4_subp[i/16].data[13].value = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask4_subp[i/16].data[14].value = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask4_subp[i/16].data[15].value = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			}
			if(i%16==7){  // CRITICAL AUTOMATEME.
				vmask5_subp[i/16].data[0].key = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask5_subp[i/16].data[1].key = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask5_subp[i/16].data[2].key = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask5_subp[i/16].data[3].key = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask5_subp[i/16].data[4].key = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask5_subp[i/16].data[5].key = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask5_subp[i/16].data[6].key = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask5_subp[i/16].data[7].key = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask5_subp[i/16].data[8].key = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask5_subp[i/16].data[9].key = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask5_subp[i/16].data[10].key = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask5_subp[i/16].data[11].key = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask5_subp[i/16].data[12].key = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask5_subp[i/16].data[13].key = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask5_subp[i/16].data[14].key = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask5_subp[i/16].data[15].key = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			} else {
				vmask5_subp[i/16].data[0].value = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask5_subp[i/16].data[1].value = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask5_subp[i/16].data[2].value = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask5_subp[i/16].data[3].value = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask5_subp[i/16].data[4].value = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask5_subp[i/16].data[5].value = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask5_subp[i/16].data[6].value = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask5_subp[i/16].data[7].value = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask5_subp[i/16].data[8].value = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask5_subp[i/16].data[9].value = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask5_subp[i/16].data[10].value = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask5_subp[i/16].data[11].value = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask5_subp[i/16].data[12].value = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask5_subp[i/16].data[13].value = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask5_subp[i/16].data[14].value = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask5_subp[i/16].data[15].value = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			}
			
			tempvSUBmask.data[0].key = 0;
			tempvSUBmask.data[0].value = 0;
			tempvSUBmask.data[1].key = 0;
			tempvSUBmask.data[1].value = 0;
			tempvSUBmask.data[2].key = 0;
			tempvSUBmask.data[2].value = 0;
			tempvSUBmask.data[3].key = 0;
			tempvSUBmask.data[3].value = 0;
			tempvSUBmask.data[4].key = 0;
			tempvSUBmask.data[4].value = 0;
			tempvSUBmask.data[5].key = 0;
			tempvSUBmask.data[5].value = 0;
			tempvSUBmask.data[6].key = 0;
			tempvSUBmask.data[6].value = 0;
			tempvSUBmask.data[7].key = 0;
			tempvSUBmask.data[7].value = 0;
			tempvSUBmask.data[8].key = 0;
			tempvSUBmask.data[8].value = 0;
			tempvSUBmask.data[9].key = 0;
			tempvSUBmask.data[9].value = 0;
			tempvSUBmask.data[10].key = 0;
			tempvSUBmask.data[10].value = 0;
			tempvSUBmask.data[11].key = 0;
			tempvSUBmask.data[11].value = 0;
			tempvSUBmask.data[12].key = 0;
			tempvSUBmask.data[12].value = 0;
			tempvSUBmask.data[13].key = 0;
			tempvSUBmask.data[13].value = 0;
			tempvSUBmask.data[14].key = 0;
			tempvSUBmask.data[14].value = 0;
			tempvSUBmask.data[15].key = 0;
			tempvSUBmask.data[15].value = 0;
		}
		
		/* if(i % SUBPMASKFACTOR == SUBPMASKFACTOR-1){ // CRITICAL AUTOMATEME.
			if(i%16==7){  // CRITICAL AUTOMATEME.
				vmask0_subp[i/SUBPMASKFACTOR].data[0].key = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[1].key = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[2].key = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[3].key = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[4].key = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[5].key = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[6].key = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[7].key = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[8].key = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[9].key = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[10].key = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[11].key = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[12].key = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[13].key = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[14].key = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[15].key = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			} else {
				vmask0_subp[i/SUBPMASKFACTOR].data[0].value = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[1].value = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[2].value = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[3].value = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[4].value = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[5].value = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[6].value = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[7].value = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[8].value = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[9].value = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[10].value = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[11].value = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[12].value = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[13].value = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[14].value = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[15].value = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			}
			if(i%16==7){  // CRITICAL AUTOMATEME.
				vmask1_subp[i/SUBPMASKFACTOR].data[0].key = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[1].key = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[2].key = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[3].key = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[4].key = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[5].key = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[6].key = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[7].key = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[8].key = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[9].key = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[10].key = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[11].key = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[12].key = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[13].key = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[14].key = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[15].key = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			} else {
				vmask1_subp[i/SUBPMASKFACTOR].data[0].value = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[1].value = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[2].value = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[3].value = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[4].value = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[5].value = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[6].value = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[7].value = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[8].value = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[9].value = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[10].value = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[11].value = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[12].value = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[13].value = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[14].value = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[15].value = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			}
			if(i%16==7){  // CRITICAL AUTOMATEME.
				vmask2_subp[i/SUBPMASKFACTOR].data[0].key = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[1].key = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[2].key = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[3].key = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[4].key = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[5].key = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[6].key = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[7].key = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[8].key = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[9].key = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[10].key = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[11].key = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[12].key = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[13].key = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[14].key = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[15].key = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			} else {
				vmask2_subp[i/SUBPMASKFACTOR].data[0].value = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[1].value = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[2].value = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[3].value = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[4].value = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[5].value = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[6].value = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[7].value = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[8].value = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[9].value = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[10].value = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[11].value = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[12].value = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[13].value = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[14].value = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[15].value = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			}
			if(i%16==7){  // CRITICAL AUTOMATEME.
				vmask3_subp[i/SUBPMASKFACTOR].data[0].key = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[1].key = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[2].key = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[3].key = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[4].key = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[5].key = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[6].key = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[7].key = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[8].key = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[9].key = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[10].key = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[11].key = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[12].key = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[13].key = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[14].key = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[15].key = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			} else {
				vmask3_subp[i/SUBPMASKFACTOR].data[0].value = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[1].value = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[2].value = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[3].value = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[4].value = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[5].value = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[6].value = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[7].value = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[8].value = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[9].value = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[10].value = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[11].value = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[12].value = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[13].value = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[14].value = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[15].value = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			}
			if(i%16==7){  // CRITICAL AUTOMATEME.
				vmask4_subp[i/SUBPMASKFACTOR].data[0].key = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[1].key = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[2].key = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[3].key = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[4].key = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[5].key = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[6].key = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[7].key = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[8].key = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[9].key = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[10].key = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[11].key = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[12].key = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[13].key = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[14].key = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[15].key = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			} else {
				vmask4_subp[i/SUBPMASKFACTOR].data[0].value = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[1].value = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[2].value = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[3].value = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[4].value = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[5].value = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[6].value = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[7].value = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[8].value = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[9].value = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[10].value = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[11].value = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[12].value = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[13].value = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[14].value = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[15].value = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			}
			if(i%16==7){  // CRITICAL AUTOMATEME.
				vmask5_subp[i/SUBPMASKFACTOR].data[0].key = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[1].key = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[2].key = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[3].key = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[4].key = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[5].key = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[6].key = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[7].key = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[8].key = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[9].key = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[10].key = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[11].key = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[12].key = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[13].key = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[14].key = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[15].key = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			} else {
				vmask5_subp[i/SUBPMASKFACTOR].data[0].value = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[1].value = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[2].value = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[3].value = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[4].value = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[5].value = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[6].value = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[7].value = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[8].value = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[9].value = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[10].value = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[11].value = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[12].value = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[13].value = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[14].value = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[15].value = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			}
			
			tempvSUBmask.data[0].key = 0;
			tempvSUBmask.data[0].value = 0;
			tempvSUBmask.data[1].key = 0;
			tempvSUBmask.data[1].value = 0;
			tempvSUBmask.data[2].key = 0;
			tempvSUBmask.data[2].value = 0;
			tempvSUBmask.data[3].key = 0;
			tempvSUBmask.data[3].value = 0;
			tempvSUBmask.data[4].key = 0;
			tempvSUBmask.data[4].value = 0;
			tempvSUBmask.data[5].key = 0;
			tempvSUBmask.data[5].value = 0;
			tempvSUBmask.data[6].key = 0;
			tempvSUBmask.data[6].value = 0;
			tempvSUBmask.data[7].key = 0;
			tempvSUBmask.data[7].value = 0;
			tempvSUBmask.data[8].key = 0;
			tempvSUBmask.data[8].value = 0;
			tempvSUBmask.data[9].key = 0;
			tempvSUBmask.data[9].value = 0;
			tempvSUBmask.data[10].key = 0;
			tempvSUBmask.data[10].value = 0;
			tempvSUBmask.data[11].key = 0;
			tempvSUBmask.data[11].value = 0;
			tempvSUBmask.data[12].key = 0;
			tempvSUBmask.data[12].value = 0;
			tempvSUBmask.data[13].key = 0;
			tempvSUBmask.data[13].value = 0;
			tempvSUBmask.data[14].key = 0;
			tempvSUBmask.data[14].value = 0;
			tempvSUBmask.data[15].key = 0;
			tempvSUBmask.data[15].value = 0;
		} */
		#endif 
	}
	return;
}
void //
	#ifdef SW 
	actsproc::
	#endif 
loadmany7vmasks_subp(bool_type enable, unitBRAMwidth_type vmask0[BLOCKRAM_SIZE], unitBRAMwidth_type vmask0_subp[BLOCKRAM_SIZE],unitBRAMwidth_type vmask1_subp[BLOCKRAM_SIZE],unitBRAMwidth_type vmask2_subp[BLOCKRAM_SIZE],unitBRAMwidth_type vmask3_subp[BLOCKRAM_SIZE],unitBRAMwidth_type vmask4_subp[BLOCKRAM_SIZE],unitBRAMwidth_type vmask5_subp[BLOCKRAM_SIZE],unitBRAMwidth_type vmask6_subp[BLOCKRAM_SIZE], buffer_type size_kvs){
	if(enable == OFF){ return; }
	analysis_type analysis_loopcount1 = BLOCKRAM_SIZE;
	analysis_type analysis_loopcount2 = BLOCKRAM_SIZE / 16;
	analysis_type analysis_loopcount3 = BLOCKRAM_SIZE;
	
	buffer_type transfsize = size_kvs * 16;

	unitBRAMwidth_type tempvmask;
	#pragma HLS DATA_PACK variable = tempvmask	
	unitBRAMwidth_type tempvSUBmask;
	#pragma HLS DATA_PACK variable = tempvSUBmask		
	tempvSUBmask.data[0].key = 0;
	tempvSUBmask.data[0].value = 0;
	tempvSUBmask.data[1].key = 0;
	tempvSUBmask.data[1].value = 0;
	tempvSUBmask.data[2].key = 0;
	tempvSUBmask.data[2].value = 0;
	tempvSUBmask.data[3].key = 0;
	tempvSUBmask.data[3].value = 0;
	tempvSUBmask.data[4].key = 0;
	tempvSUBmask.data[4].value = 0;
	tempvSUBmask.data[5].key = 0;
	tempvSUBmask.data[5].value = 0;
	tempvSUBmask.data[6].key = 0;
	tempvSUBmask.data[6].value = 0;
	tempvSUBmask.data[7].key = 0;
	tempvSUBmask.data[7].value = 0;
	tempvSUBmask.data[8].key = 0;
	tempvSUBmask.data[8].value = 0;
	tempvSUBmask.data[9].key = 0;
	tempvSUBmask.data[9].value = 0;
	tempvSUBmask.data[10].key = 0;
	tempvSUBmask.data[10].value = 0;
	tempvSUBmask.data[11].key = 0;
	tempvSUBmask.data[11].value = 0;
	tempvSUBmask.data[12].key = 0;
	tempvSUBmask.data[12].value = 0;
	tempvSUBmask.data[13].key = 0;
	tempvSUBmask.data[13].value = 0;
	tempvSUBmask.data[14].key = 0;
	tempvSUBmask.data[14].value = 0;
	tempvSUBmask.data[15].key = 0;
	tempvSUBmask.data[15].value = 0;
	LOADVMASKSSUBP_LOOP2: for (buffer_type i=0; i<transfsize; i++){ // transfsize, reducebuffersz
	#pragma HLS LOOP_TRIPCOUNT min=0 max=analysis_loopcount3 avg=analysis_loopcount3
	#pragma HLS PIPELINE II=2
		
		tempvmask = vmask0[i];
		
		// subp mask 
		#ifdef ENABLE_SUBVMASKING
		tempvSUBmask.data[0].key = tempvSUBmask.data[0].key | tempvmask.data[0].key;
		tempvSUBmask.data[0].value = tempvSUBmask.data[0].value | tempvmask.data[0].value;
		tempvSUBmask.data[1].key = tempvSUBmask.data[1].key | tempvmask.data[1].key;
		tempvSUBmask.data[1].value = tempvSUBmask.data[1].value | tempvmask.data[1].value;
		tempvSUBmask.data[2].key = tempvSUBmask.data[2].key | tempvmask.data[2].key;
		tempvSUBmask.data[2].value = tempvSUBmask.data[2].value | tempvmask.data[2].value;
		tempvSUBmask.data[3].key = tempvSUBmask.data[3].key | tempvmask.data[3].key;
		tempvSUBmask.data[3].value = tempvSUBmask.data[3].value | tempvmask.data[3].value;
		tempvSUBmask.data[4].key = tempvSUBmask.data[4].key | tempvmask.data[4].key;
		tempvSUBmask.data[4].value = tempvSUBmask.data[4].value | tempvmask.data[4].value;
		tempvSUBmask.data[5].key = tempvSUBmask.data[5].key | tempvmask.data[5].key;
		tempvSUBmask.data[5].value = tempvSUBmask.data[5].value | tempvmask.data[5].value;
		tempvSUBmask.data[6].key = tempvSUBmask.data[6].key | tempvmask.data[6].key;
		tempvSUBmask.data[6].value = tempvSUBmask.data[6].value | tempvmask.data[6].value;
		tempvSUBmask.data[7].key = tempvSUBmask.data[7].key | tempvmask.data[7].key;
		tempvSUBmask.data[7].value = tempvSUBmask.data[7].value | tempvmask.data[7].value;
		tempvSUBmask.data[8].key = tempvSUBmask.data[8].key | tempvmask.data[8].key;
		tempvSUBmask.data[8].value = tempvSUBmask.data[8].value | tempvmask.data[8].value;
		tempvSUBmask.data[9].key = tempvSUBmask.data[9].key | tempvmask.data[9].key;
		tempvSUBmask.data[9].value = tempvSUBmask.data[9].value | tempvmask.data[9].value;
		tempvSUBmask.data[10].key = tempvSUBmask.data[10].key | tempvmask.data[10].key;
		tempvSUBmask.data[10].value = tempvSUBmask.data[10].value | tempvmask.data[10].value;
		tempvSUBmask.data[11].key = tempvSUBmask.data[11].key | tempvmask.data[11].key;
		tempvSUBmask.data[11].value = tempvSUBmask.data[11].value | tempvmask.data[11].value;
		tempvSUBmask.data[12].key = tempvSUBmask.data[12].key | tempvmask.data[12].key;
		tempvSUBmask.data[12].value = tempvSUBmask.data[12].value | tempvmask.data[12].value;
		tempvSUBmask.data[13].key = tempvSUBmask.data[13].key | tempvmask.data[13].key;
		tempvSUBmask.data[13].value = tempvSUBmask.data[13].value | tempvmask.data[13].value;
		tempvSUBmask.data[14].key = tempvSUBmask.data[14].key | tempvmask.data[14].key;
		tempvSUBmask.data[14].value = tempvSUBmask.data[14].value | tempvmask.data[14].value;
		tempvSUBmask.data[15].key = tempvSUBmask.data[15].key | tempvmask.data[15].key;
		tempvSUBmask.data[15].value = tempvSUBmask.data[15].value | tempvmask.data[15].value;
		
		if(i % 8 == 7){ // CRITICAL AUTOMATEME.
			if(i%16==7){  // CRITICAL AUTOMATEME.
				vmask0_subp[i/16].data[0].key = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask0_subp[i/16].data[1].key = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask0_subp[i/16].data[2].key = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask0_subp[i/16].data[3].key = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask0_subp[i/16].data[4].key = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask0_subp[i/16].data[5].key = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask0_subp[i/16].data[6].key = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask0_subp[i/16].data[7].key = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask0_subp[i/16].data[8].key = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask0_subp[i/16].data[9].key = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask0_subp[i/16].data[10].key = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask0_subp[i/16].data[11].key = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask0_subp[i/16].data[12].key = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask0_subp[i/16].data[13].key = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask0_subp[i/16].data[14].key = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask0_subp[i/16].data[15].key = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			} else {
				vmask0_subp[i/16].data[0].value = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask0_subp[i/16].data[1].value = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask0_subp[i/16].data[2].value = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask0_subp[i/16].data[3].value = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask0_subp[i/16].data[4].value = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask0_subp[i/16].data[5].value = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask0_subp[i/16].data[6].value = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask0_subp[i/16].data[7].value = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask0_subp[i/16].data[8].value = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask0_subp[i/16].data[9].value = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask0_subp[i/16].data[10].value = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask0_subp[i/16].data[11].value = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask0_subp[i/16].data[12].value = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask0_subp[i/16].data[13].value = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask0_subp[i/16].data[14].value = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask0_subp[i/16].data[15].value = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			}
			if(i%16==7){  // CRITICAL AUTOMATEME.
				vmask1_subp[i/16].data[0].key = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask1_subp[i/16].data[1].key = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask1_subp[i/16].data[2].key = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask1_subp[i/16].data[3].key = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask1_subp[i/16].data[4].key = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask1_subp[i/16].data[5].key = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask1_subp[i/16].data[6].key = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask1_subp[i/16].data[7].key = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask1_subp[i/16].data[8].key = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask1_subp[i/16].data[9].key = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask1_subp[i/16].data[10].key = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask1_subp[i/16].data[11].key = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask1_subp[i/16].data[12].key = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask1_subp[i/16].data[13].key = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask1_subp[i/16].data[14].key = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask1_subp[i/16].data[15].key = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			} else {
				vmask1_subp[i/16].data[0].value = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask1_subp[i/16].data[1].value = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask1_subp[i/16].data[2].value = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask1_subp[i/16].data[3].value = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask1_subp[i/16].data[4].value = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask1_subp[i/16].data[5].value = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask1_subp[i/16].data[6].value = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask1_subp[i/16].data[7].value = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask1_subp[i/16].data[8].value = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask1_subp[i/16].data[9].value = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask1_subp[i/16].data[10].value = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask1_subp[i/16].data[11].value = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask1_subp[i/16].data[12].value = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask1_subp[i/16].data[13].value = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask1_subp[i/16].data[14].value = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask1_subp[i/16].data[15].value = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			}
			if(i%16==7){  // CRITICAL AUTOMATEME.
				vmask2_subp[i/16].data[0].key = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask2_subp[i/16].data[1].key = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask2_subp[i/16].data[2].key = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask2_subp[i/16].data[3].key = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask2_subp[i/16].data[4].key = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask2_subp[i/16].data[5].key = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask2_subp[i/16].data[6].key = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask2_subp[i/16].data[7].key = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask2_subp[i/16].data[8].key = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask2_subp[i/16].data[9].key = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask2_subp[i/16].data[10].key = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask2_subp[i/16].data[11].key = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask2_subp[i/16].data[12].key = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask2_subp[i/16].data[13].key = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask2_subp[i/16].data[14].key = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask2_subp[i/16].data[15].key = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			} else {
				vmask2_subp[i/16].data[0].value = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask2_subp[i/16].data[1].value = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask2_subp[i/16].data[2].value = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask2_subp[i/16].data[3].value = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask2_subp[i/16].data[4].value = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask2_subp[i/16].data[5].value = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask2_subp[i/16].data[6].value = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask2_subp[i/16].data[7].value = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask2_subp[i/16].data[8].value = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask2_subp[i/16].data[9].value = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask2_subp[i/16].data[10].value = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask2_subp[i/16].data[11].value = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask2_subp[i/16].data[12].value = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask2_subp[i/16].data[13].value = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask2_subp[i/16].data[14].value = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask2_subp[i/16].data[15].value = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			}
			if(i%16==7){  // CRITICAL AUTOMATEME.
				vmask3_subp[i/16].data[0].key = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask3_subp[i/16].data[1].key = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask3_subp[i/16].data[2].key = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask3_subp[i/16].data[3].key = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask3_subp[i/16].data[4].key = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask3_subp[i/16].data[5].key = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask3_subp[i/16].data[6].key = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask3_subp[i/16].data[7].key = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask3_subp[i/16].data[8].key = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask3_subp[i/16].data[9].key = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask3_subp[i/16].data[10].key = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask3_subp[i/16].data[11].key = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask3_subp[i/16].data[12].key = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask3_subp[i/16].data[13].key = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask3_subp[i/16].data[14].key = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask3_subp[i/16].data[15].key = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			} else {
				vmask3_subp[i/16].data[0].value = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask3_subp[i/16].data[1].value = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask3_subp[i/16].data[2].value = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask3_subp[i/16].data[3].value = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask3_subp[i/16].data[4].value = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask3_subp[i/16].data[5].value = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask3_subp[i/16].data[6].value = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask3_subp[i/16].data[7].value = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask3_subp[i/16].data[8].value = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask3_subp[i/16].data[9].value = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask3_subp[i/16].data[10].value = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask3_subp[i/16].data[11].value = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask3_subp[i/16].data[12].value = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask3_subp[i/16].data[13].value = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask3_subp[i/16].data[14].value = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask3_subp[i/16].data[15].value = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			}
			if(i%16==7){  // CRITICAL AUTOMATEME.
				vmask4_subp[i/16].data[0].key = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask4_subp[i/16].data[1].key = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask4_subp[i/16].data[2].key = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask4_subp[i/16].data[3].key = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask4_subp[i/16].data[4].key = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask4_subp[i/16].data[5].key = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask4_subp[i/16].data[6].key = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask4_subp[i/16].data[7].key = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask4_subp[i/16].data[8].key = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask4_subp[i/16].data[9].key = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask4_subp[i/16].data[10].key = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask4_subp[i/16].data[11].key = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask4_subp[i/16].data[12].key = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask4_subp[i/16].data[13].key = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask4_subp[i/16].data[14].key = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask4_subp[i/16].data[15].key = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			} else {
				vmask4_subp[i/16].data[0].value = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask4_subp[i/16].data[1].value = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask4_subp[i/16].data[2].value = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask4_subp[i/16].data[3].value = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask4_subp[i/16].data[4].value = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask4_subp[i/16].data[5].value = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask4_subp[i/16].data[6].value = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask4_subp[i/16].data[7].value = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask4_subp[i/16].data[8].value = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask4_subp[i/16].data[9].value = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask4_subp[i/16].data[10].value = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask4_subp[i/16].data[11].value = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask4_subp[i/16].data[12].value = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask4_subp[i/16].data[13].value = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask4_subp[i/16].data[14].value = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask4_subp[i/16].data[15].value = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			}
			if(i%16==7){  // CRITICAL AUTOMATEME.
				vmask5_subp[i/16].data[0].key = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask5_subp[i/16].data[1].key = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask5_subp[i/16].data[2].key = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask5_subp[i/16].data[3].key = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask5_subp[i/16].data[4].key = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask5_subp[i/16].data[5].key = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask5_subp[i/16].data[6].key = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask5_subp[i/16].data[7].key = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask5_subp[i/16].data[8].key = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask5_subp[i/16].data[9].key = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask5_subp[i/16].data[10].key = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask5_subp[i/16].data[11].key = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask5_subp[i/16].data[12].key = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask5_subp[i/16].data[13].key = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask5_subp[i/16].data[14].key = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask5_subp[i/16].data[15].key = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			} else {
				vmask5_subp[i/16].data[0].value = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask5_subp[i/16].data[1].value = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask5_subp[i/16].data[2].value = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask5_subp[i/16].data[3].value = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask5_subp[i/16].data[4].value = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask5_subp[i/16].data[5].value = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask5_subp[i/16].data[6].value = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask5_subp[i/16].data[7].value = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask5_subp[i/16].data[8].value = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask5_subp[i/16].data[9].value = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask5_subp[i/16].data[10].value = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask5_subp[i/16].data[11].value = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask5_subp[i/16].data[12].value = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask5_subp[i/16].data[13].value = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask5_subp[i/16].data[14].value = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask5_subp[i/16].data[15].value = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			}
			if(i%16==7){  // CRITICAL AUTOMATEME.
				vmask6_subp[i/16].data[0].key = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask6_subp[i/16].data[1].key = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask6_subp[i/16].data[2].key = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask6_subp[i/16].data[3].key = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask6_subp[i/16].data[4].key = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask6_subp[i/16].data[5].key = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask6_subp[i/16].data[6].key = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask6_subp[i/16].data[7].key = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask6_subp[i/16].data[8].key = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask6_subp[i/16].data[9].key = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask6_subp[i/16].data[10].key = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask6_subp[i/16].data[11].key = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask6_subp[i/16].data[12].key = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask6_subp[i/16].data[13].key = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask6_subp[i/16].data[14].key = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask6_subp[i/16].data[15].key = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			} else {
				vmask6_subp[i/16].data[0].value = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask6_subp[i/16].data[1].value = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask6_subp[i/16].data[2].value = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask6_subp[i/16].data[3].value = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask6_subp[i/16].data[4].value = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask6_subp[i/16].data[5].value = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask6_subp[i/16].data[6].value = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask6_subp[i/16].data[7].value = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask6_subp[i/16].data[8].value = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask6_subp[i/16].data[9].value = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask6_subp[i/16].data[10].value = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask6_subp[i/16].data[11].value = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask6_subp[i/16].data[12].value = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask6_subp[i/16].data[13].value = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask6_subp[i/16].data[14].value = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask6_subp[i/16].data[15].value = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			}
			
			tempvSUBmask.data[0].key = 0;
			tempvSUBmask.data[0].value = 0;
			tempvSUBmask.data[1].key = 0;
			tempvSUBmask.data[1].value = 0;
			tempvSUBmask.data[2].key = 0;
			tempvSUBmask.data[2].value = 0;
			tempvSUBmask.data[3].key = 0;
			tempvSUBmask.data[3].value = 0;
			tempvSUBmask.data[4].key = 0;
			tempvSUBmask.data[4].value = 0;
			tempvSUBmask.data[5].key = 0;
			tempvSUBmask.data[5].value = 0;
			tempvSUBmask.data[6].key = 0;
			tempvSUBmask.data[6].value = 0;
			tempvSUBmask.data[7].key = 0;
			tempvSUBmask.data[7].value = 0;
			tempvSUBmask.data[8].key = 0;
			tempvSUBmask.data[8].value = 0;
			tempvSUBmask.data[9].key = 0;
			tempvSUBmask.data[9].value = 0;
			tempvSUBmask.data[10].key = 0;
			tempvSUBmask.data[10].value = 0;
			tempvSUBmask.data[11].key = 0;
			tempvSUBmask.data[11].value = 0;
			tempvSUBmask.data[12].key = 0;
			tempvSUBmask.data[12].value = 0;
			tempvSUBmask.data[13].key = 0;
			tempvSUBmask.data[13].value = 0;
			tempvSUBmask.data[14].key = 0;
			tempvSUBmask.data[14].value = 0;
			tempvSUBmask.data[15].key = 0;
			tempvSUBmask.data[15].value = 0;
		}
		
		/* if(i % SUBPMASKFACTOR == SUBPMASKFACTOR-1){ // CRITICAL AUTOMATEME.
			if(i%16==7){  // CRITICAL AUTOMATEME.
				vmask0_subp[i/SUBPMASKFACTOR].data[0].key = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[1].key = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[2].key = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[3].key = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[4].key = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[5].key = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[6].key = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[7].key = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[8].key = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[9].key = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[10].key = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[11].key = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[12].key = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[13].key = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[14].key = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[15].key = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			} else {
				vmask0_subp[i/SUBPMASKFACTOR].data[0].value = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[1].value = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[2].value = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[3].value = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[4].value = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[5].value = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[6].value = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[7].value = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[8].value = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[9].value = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[10].value = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[11].value = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[12].value = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[13].value = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[14].value = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[15].value = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			}
			if(i%16==7){  // CRITICAL AUTOMATEME.
				vmask1_subp[i/SUBPMASKFACTOR].data[0].key = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[1].key = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[2].key = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[3].key = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[4].key = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[5].key = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[6].key = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[7].key = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[8].key = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[9].key = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[10].key = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[11].key = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[12].key = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[13].key = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[14].key = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[15].key = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			} else {
				vmask1_subp[i/SUBPMASKFACTOR].data[0].value = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[1].value = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[2].value = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[3].value = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[4].value = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[5].value = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[6].value = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[7].value = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[8].value = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[9].value = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[10].value = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[11].value = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[12].value = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[13].value = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[14].value = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[15].value = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			}
			if(i%16==7){  // CRITICAL AUTOMATEME.
				vmask2_subp[i/SUBPMASKFACTOR].data[0].key = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[1].key = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[2].key = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[3].key = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[4].key = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[5].key = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[6].key = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[7].key = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[8].key = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[9].key = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[10].key = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[11].key = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[12].key = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[13].key = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[14].key = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[15].key = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			} else {
				vmask2_subp[i/SUBPMASKFACTOR].data[0].value = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[1].value = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[2].value = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[3].value = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[4].value = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[5].value = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[6].value = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[7].value = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[8].value = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[9].value = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[10].value = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[11].value = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[12].value = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[13].value = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[14].value = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[15].value = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			}
			if(i%16==7){  // CRITICAL AUTOMATEME.
				vmask3_subp[i/SUBPMASKFACTOR].data[0].key = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[1].key = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[2].key = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[3].key = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[4].key = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[5].key = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[6].key = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[7].key = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[8].key = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[9].key = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[10].key = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[11].key = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[12].key = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[13].key = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[14].key = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[15].key = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			} else {
				vmask3_subp[i/SUBPMASKFACTOR].data[0].value = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[1].value = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[2].value = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[3].value = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[4].value = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[5].value = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[6].value = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[7].value = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[8].value = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[9].value = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[10].value = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[11].value = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[12].value = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[13].value = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[14].value = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[15].value = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			}
			if(i%16==7){  // CRITICAL AUTOMATEME.
				vmask4_subp[i/SUBPMASKFACTOR].data[0].key = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[1].key = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[2].key = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[3].key = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[4].key = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[5].key = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[6].key = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[7].key = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[8].key = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[9].key = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[10].key = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[11].key = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[12].key = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[13].key = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[14].key = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[15].key = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			} else {
				vmask4_subp[i/SUBPMASKFACTOR].data[0].value = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[1].value = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[2].value = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[3].value = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[4].value = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[5].value = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[6].value = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[7].value = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[8].value = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[9].value = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[10].value = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[11].value = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[12].value = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[13].value = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[14].value = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[15].value = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			}
			if(i%16==7){  // CRITICAL AUTOMATEME.
				vmask5_subp[i/SUBPMASKFACTOR].data[0].key = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[1].key = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[2].key = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[3].key = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[4].key = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[5].key = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[6].key = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[7].key = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[8].key = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[9].key = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[10].key = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[11].key = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[12].key = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[13].key = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[14].key = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[15].key = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			} else {
				vmask5_subp[i/SUBPMASKFACTOR].data[0].value = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[1].value = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[2].value = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[3].value = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[4].value = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[5].value = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[6].value = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[7].value = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[8].value = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[9].value = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[10].value = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[11].value = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[12].value = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[13].value = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[14].value = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[15].value = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			}
			if(i%16==7){  // CRITICAL AUTOMATEME.
				vmask6_subp[i/SUBPMASKFACTOR].data[0].key = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask6_subp[i/SUBPMASKFACTOR].data[1].key = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask6_subp[i/SUBPMASKFACTOR].data[2].key = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask6_subp[i/SUBPMASKFACTOR].data[3].key = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask6_subp[i/SUBPMASKFACTOR].data[4].key = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask6_subp[i/SUBPMASKFACTOR].data[5].key = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask6_subp[i/SUBPMASKFACTOR].data[6].key = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask6_subp[i/SUBPMASKFACTOR].data[7].key = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask6_subp[i/SUBPMASKFACTOR].data[8].key = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask6_subp[i/SUBPMASKFACTOR].data[9].key = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask6_subp[i/SUBPMASKFACTOR].data[10].key = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask6_subp[i/SUBPMASKFACTOR].data[11].key = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask6_subp[i/SUBPMASKFACTOR].data[12].key = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask6_subp[i/SUBPMASKFACTOR].data[13].key = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask6_subp[i/SUBPMASKFACTOR].data[14].key = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask6_subp[i/SUBPMASKFACTOR].data[15].key = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			} else {
				vmask6_subp[i/SUBPMASKFACTOR].data[0].value = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask6_subp[i/SUBPMASKFACTOR].data[1].value = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask6_subp[i/SUBPMASKFACTOR].data[2].value = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask6_subp[i/SUBPMASKFACTOR].data[3].value = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask6_subp[i/SUBPMASKFACTOR].data[4].value = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask6_subp[i/SUBPMASKFACTOR].data[5].value = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask6_subp[i/SUBPMASKFACTOR].data[6].value = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask6_subp[i/SUBPMASKFACTOR].data[7].value = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask6_subp[i/SUBPMASKFACTOR].data[8].value = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask6_subp[i/SUBPMASKFACTOR].data[9].value = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask6_subp[i/SUBPMASKFACTOR].data[10].value = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask6_subp[i/SUBPMASKFACTOR].data[11].value = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask6_subp[i/SUBPMASKFACTOR].data[12].value = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask6_subp[i/SUBPMASKFACTOR].data[13].value = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask6_subp[i/SUBPMASKFACTOR].data[14].value = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask6_subp[i/SUBPMASKFACTOR].data[15].value = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			}
			
			tempvSUBmask.data[0].key = 0;
			tempvSUBmask.data[0].value = 0;
			tempvSUBmask.data[1].key = 0;
			tempvSUBmask.data[1].value = 0;
			tempvSUBmask.data[2].key = 0;
			tempvSUBmask.data[2].value = 0;
			tempvSUBmask.data[3].key = 0;
			tempvSUBmask.data[3].value = 0;
			tempvSUBmask.data[4].key = 0;
			tempvSUBmask.data[4].value = 0;
			tempvSUBmask.data[5].key = 0;
			tempvSUBmask.data[5].value = 0;
			tempvSUBmask.data[6].key = 0;
			tempvSUBmask.data[6].value = 0;
			tempvSUBmask.data[7].key = 0;
			tempvSUBmask.data[7].value = 0;
			tempvSUBmask.data[8].key = 0;
			tempvSUBmask.data[8].value = 0;
			tempvSUBmask.data[9].key = 0;
			tempvSUBmask.data[9].value = 0;
			tempvSUBmask.data[10].key = 0;
			tempvSUBmask.data[10].value = 0;
			tempvSUBmask.data[11].key = 0;
			tempvSUBmask.data[11].value = 0;
			tempvSUBmask.data[12].key = 0;
			tempvSUBmask.data[12].value = 0;
			tempvSUBmask.data[13].key = 0;
			tempvSUBmask.data[13].value = 0;
			tempvSUBmask.data[14].key = 0;
			tempvSUBmask.data[14].value = 0;
			tempvSUBmask.data[15].key = 0;
			tempvSUBmask.data[15].value = 0;
		} */
		#endif 
	}
	return;
}
void //
	#ifdef SW 
	actsproc::
	#endif 
loadmany8vmasks_subp(bool_type enable, unitBRAMwidth_type vmask0[BLOCKRAM_SIZE], unitBRAMwidth_type vmask0_subp[BLOCKRAM_SIZE],unitBRAMwidth_type vmask1_subp[BLOCKRAM_SIZE],unitBRAMwidth_type vmask2_subp[BLOCKRAM_SIZE],unitBRAMwidth_type vmask3_subp[BLOCKRAM_SIZE],unitBRAMwidth_type vmask4_subp[BLOCKRAM_SIZE],unitBRAMwidth_type vmask5_subp[BLOCKRAM_SIZE],unitBRAMwidth_type vmask6_subp[BLOCKRAM_SIZE],unitBRAMwidth_type vmask7_subp[BLOCKRAM_SIZE], buffer_type size_kvs){
	if(enable == OFF){ return; }
	analysis_type analysis_loopcount1 = BLOCKRAM_SIZE;
	analysis_type analysis_loopcount2 = BLOCKRAM_SIZE / 16;
	analysis_type analysis_loopcount3 = BLOCKRAM_SIZE;
	
	buffer_type transfsize = size_kvs * 16;

	unitBRAMwidth_type tempvmask;
	#pragma HLS DATA_PACK variable = tempvmask	
	unitBRAMwidth_type tempvSUBmask;
	#pragma HLS DATA_PACK variable = tempvSUBmask		
	tempvSUBmask.data[0].key = 0;
	tempvSUBmask.data[0].value = 0;
	tempvSUBmask.data[1].key = 0;
	tempvSUBmask.data[1].value = 0;
	tempvSUBmask.data[2].key = 0;
	tempvSUBmask.data[2].value = 0;
	tempvSUBmask.data[3].key = 0;
	tempvSUBmask.data[3].value = 0;
	tempvSUBmask.data[4].key = 0;
	tempvSUBmask.data[4].value = 0;
	tempvSUBmask.data[5].key = 0;
	tempvSUBmask.data[5].value = 0;
	tempvSUBmask.data[6].key = 0;
	tempvSUBmask.data[6].value = 0;
	tempvSUBmask.data[7].key = 0;
	tempvSUBmask.data[7].value = 0;
	tempvSUBmask.data[8].key = 0;
	tempvSUBmask.data[8].value = 0;
	tempvSUBmask.data[9].key = 0;
	tempvSUBmask.data[9].value = 0;
	tempvSUBmask.data[10].key = 0;
	tempvSUBmask.data[10].value = 0;
	tempvSUBmask.data[11].key = 0;
	tempvSUBmask.data[11].value = 0;
	tempvSUBmask.data[12].key = 0;
	tempvSUBmask.data[12].value = 0;
	tempvSUBmask.data[13].key = 0;
	tempvSUBmask.data[13].value = 0;
	tempvSUBmask.data[14].key = 0;
	tempvSUBmask.data[14].value = 0;
	tempvSUBmask.data[15].key = 0;
	tempvSUBmask.data[15].value = 0;
	LOADVMASKSSUBP_LOOP2: for (buffer_type i=0; i<transfsize; i++){ // transfsize, reducebuffersz
	#pragma HLS LOOP_TRIPCOUNT min=0 max=analysis_loopcount3 avg=analysis_loopcount3
	#pragma HLS PIPELINE II=2
		
		tempvmask = vmask0[i];
		
		// subp mask 
		#ifdef ENABLE_SUBVMASKING
		tempvSUBmask.data[0].key = tempvSUBmask.data[0].key | tempvmask.data[0].key;
		tempvSUBmask.data[0].value = tempvSUBmask.data[0].value | tempvmask.data[0].value;
		tempvSUBmask.data[1].key = tempvSUBmask.data[1].key | tempvmask.data[1].key;
		tempvSUBmask.data[1].value = tempvSUBmask.data[1].value | tempvmask.data[1].value;
		tempvSUBmask.data[2].key = tempvSUBmask.data[2].key | tempvmask.data[2].key;
		tempvSUBmask.data[2].value = tempvSUBmask.data[2].value | tempvmask.data[2].value;
		tempvSUBmask.data[3].key = tempvSUBmask.data[3].key | tempvmask.data[3].key;
		tempvSUBmask.data[3].value = tempvSUBmask.data[3].value | tempvmask.data[3].value;
		tempvSUBmask.data[4].key = tempvSUBmask.data[4].key | tempvmask.data[4].key;
		tempvSUBmask.data[4].value = tempvSUBmask.data[4].value | tempvmask.data[4].value;
		tempvSUBmask.data[5].key = tempvSUBmask.data[5].key | tempvmask.data[5].key;
		tempvSUBmask.data[5].value = tempvSUBmask.data[5].value | tempvmask.data[5].value;
		tempvSUBmask.data[6].key = tempvSUBmask.data[6].key | tempvmask.data[6].key;
		tempvSUBmask.data[6].value = tempvSUBmask.data[6].value | tempvmask.data[6].value;
		tempvSUBmask.data[7].key = tempvSUBmask.data[7].key | tempvmask.data[7].key;
		tempvSUBmask.data[7].value = tempvSUBmask.data[7].value | tempvmask.data[7].value;
		tempvSUBmask.data[8].key = tempvSUBmask.data[8].key | tempvmask.data[8].key;
		tempvSUBmask.data[8].value = tempvSUBmask.data[8].value | tempvmask.data[8].value;
		tempvSUBmask.data[9].key = tempvSUBmask.data[9].key | tempvmask.data[9].key;
		tempvSUBmask.data[9].value = tempvSUBmask.data[9].value | tempvmask.data[9].value;
		tempvSUBmask.data[10].key = tempvSUBmask.data[10].key | tempvmask.data[10].key;
		tempvSUBmask.data[10].value = tempvSUBmask.data[10].value | tempvmask.data[10].value;
		tempvSUBmask.data[11].key = tempvSUBmask.data[11].key | tempvmask.data[11].key;
		tempvSUBmask.data[11].value = tempvSUBmask.data[11].value | tempvmask.data[11].value;
		tempvSUBmask.data[12].key = tempvSUBmask.data[12].key | tempvmask.data[12].key;
		tempvSUBmask.data[12].value = tempvSUBmask.data[12].value | tempvmask.data[12].value;
		tempvSUBmask.data[13].key = tempvSUBmask.data[13].key | tempvmask.data[13].key;
		tempvSUBmask.data[13].value = tempvSUBmask.data[13].value | tempvmask.data[13].value;
		tempvSUBmask.data[14].key = tempvSUBmask.data[14].key | tempvmask.data[14].key;
		tempvSUBmask.data[14].value = tempvSUBmask.data[14].value | tempvmask.data[14].value;
		tempvSUBmask.data[15].key = tempvSUBmask.data[15].key | tempvmask.data[15].key;
		tempvSUBmask.data[15].value = tempvSUBmask.data[15].value | tempvmask.data[15].value;
		
		if(i % 8 == 7){ // CRITICAL AUTOMATEME.
			if(i%16==7){  // CRITICAL AUTOMATEME.
				vmask0_subp[i/16].data[0].key = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask0_subp[i/16].data[1].key = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask0_subp[i/16].data[2].key = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask0_subp[i/16].data[3].key = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask0_subp[i/16].data[4].key = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask0_subp[i/16].data[5].key = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask0_subp[i/16].data[6].key = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask0_subp[i/16].data[7].key = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask0_subp[i/16].data[8].key = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask0_subp[i/16].data[9].key = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask0_subp[i/16].data[10].key = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask0_subp[i/16].data[11].key = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask0_subp[i/16].data[12].key = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask0_subp[i/16].data[13].key = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask0_subp[i/16].data[14].key = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask0_subp[i/16].data[15].key = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			} else {
				vmask0_subp[i/16].data[0].value = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask0_subp[i/16].data[1].value = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask0_subp[i/16].data[2].value = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask0_subp[i/16].data[3].value = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask0_subp[i/16].data[4].value = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask0_subp[i/16].data[5].value = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask0_subp[i/16].data[6].value = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask0_subp[i/16].data[7].value = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask0_subp[i/16].data[8].value = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask0_subp[i/16].data[9].value = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask0_subp[i/16].data[10].value = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask0_subp[i/16].data[11].value = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask0_subp[i/16].data[12].value = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask0_subp[i/16].data[13].value = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask0_subp[i/16].data[14].value = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask0_subp[i/16].data[15].value = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			}
			if(i%16==7){  // CRITICAL AUTOMATEME.
				vmask1_subp[i/16].data[0].key = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask1_subp[i/16].data[1].key = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask1_subp[i/16].data[2].key = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask1_subp[i/16].data[3].key = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask1_subp[i/16].data[4].key = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask1_subp[i/16].data[5].key = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask1_subp[i/16].data[6].key = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask1_subp[i/16].data[7].key = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask1_subp[i/16].data[8].key = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask1_subp[i/16].data[9].key = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask1_subp[i/16].data[10].key = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask1_subp[i/16].data[11].key = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask1_subp[i/16].data[12].key = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask1_subp[i/16].data[13].key = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask1_subp[i/16].data[14].key = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask1_subp[i/16].data[15].key = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			} else {
				vmask1_subp[i/16].data[0].value = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask1_subp[i/16].data[1].value = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask1_subp[i/16].data[2].value = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask1_subp[i/16].data[3].value = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask1_subp[i/16].data[4].value = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask1_subp[i/16].data[5].value = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask1_subp[i/16].data[6].value = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask1_subp[i/16].data[7].value = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask1_subp[i/16].data[8].value = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask1_subp[i/16].data[9].value = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask1_subp[i/16].data[10].value = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask1_subp[i/16].data[11].value = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask1_subp[i/16].data[12].value = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask1_subp[i/16].data[13].value = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask1_subp[i/16].data[14].value = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask1_subp[i/16].data[15].value = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			}
			if(i%16==7){  // CRITICAL AUTOMATEME.
				vmask2_subp[i/16].data[0].key = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask2_subp[i/16].data[1].key = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask2_subp[i/16].data[2].key = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask2_subp[i/16].data[3].key = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask2_subp[i/16].data[4].key = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask2_subp[i/16].data[5].key = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask2_subp[i/16].data[6].key = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask2_subp[i/16].data[7].key = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask2_subp[i/16].data[8].key = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask2_subp[i/16].data[9].key = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask2_subp[i/16].data[10].key = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask2_subp[i/16].data[11].key = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask2_subp[i/16].data[12].key = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask2_subp[i/16].data[13].key = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask2_subp[i/16].data[14].key = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask2_subp[i/16].data[15].key = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			} else {
				vmask2_subp[i/16].data[0].value = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask2_subp[i/16].data[1].value = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask2_subp[i/16].data[2].value = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask2_subp[i/16].data[3].value = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask2_subp[i/16].data[4].value = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask2_subp[i/16].data[5].value = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask2_subp[i/16].data[6].value = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask2_subp[i/16].data[7].value = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask2_subp[i/16].data[8].value = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask2_subp[i/16].data[9].value = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask2_subp[i/16].data[10].value = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask2_subp[i/16].data[11].value = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask2_subp[i/16].data[12].value = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask2_subp[i/16].data[13].value = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask2_subp[i/16].data[14].value = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask2_subp[i/16].data[15].value = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			}
			if(i%16==7){  // CRITICAL AUTOMATEME.
				vmask3_subp[i/16].data[0].key = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask3_subp[i/16].data[1].key = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask3_subp[i/16].data[2].key = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask3_subp[i/16].data[3].key = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask3_subp[i/16].data[4].key = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask3_subp[i/16].data[5].key = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask3_subp[i/16].data[6].key = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask3_subp[i/16].data[7].key = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask3_subp[i/16].data[8].key = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask3_subp[i/16].data[9].key = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask3_subp[i/16].data[10].key = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask3_subp[i/16].data[11].key = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask3_subp[i/16].data[12].key = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask3_subp[i/16].data[13].key = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask3_subp[i/16].data[14].key = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask3_subp[i/16].data[15].key = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			} else {
				vmask3_subp[i/16].data[0].value = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask3_subp[i/16].data[1].value = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask3_subp[i/16].data[2].value = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask3_subp[i/16].data[3].value = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask3_subp[i/16].data[4].value = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask3_subp[i/16].data[5].value = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask3_subp[i/16].data[6].value = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask3_subp[i/16].data[7].value = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask3_subp[i/16].data[8].value = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask3_subp[i/16].data[9].value = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask3_subp[i/16].data[10].value = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask3_subp[i/16].data[11].value = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask3_subp[i/16].data[12].value = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask3_subp[i/16].data[13].value = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask3_subp[i/16].data[14].value = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask3_subp[i/16].data[15].value = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			}
			if(i%16==7){  // CRITICAL AUTOMATEME.
				vmask4_subp[i/16].data[0].key = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask4_subp[i/16].data[1].key = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask4_subp[i/16].data[2].key = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask4_subp[i/16].data[3].key = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask4_subp[i/16].data[4].key = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask4_subp[i/16].data[5].key = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask4_subp[i/16].data[6].key = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask4_subp[i/16].data[7].key = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask4_subp[i/16].data[8].key = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask4_subp[i/16].data[9].key = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask4_subp[i/16].data[10].key = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask4_subp[i/16].data[11].key = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask4_subp[i/16].data[12].key = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask4_subp[i/16].data[13].key = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask4_subp[i/16].data[14].key = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask4_subp[i/16].data[15].key = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			} else {
				vmask4_subp[i/16].data[0].value = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask4_subp[i/16].data[1].value = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask4_subp[i/16].data[2].value = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask4_subp[i/16].data[3].value = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask4_subp[i/16].data[4].value = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask4_subp[i/16].data[5].value = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask4_subp[i/16].data[6].value = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask4_subp[i/16].data[7].value = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask4_subp[i/16].data[8].value = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask4_subp[i/16].data[9].value = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask4_subp[i/16].data[10].value = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask4_subp[i/16].data[11].value = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask4_subp[i/16].data[12].value = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask4_subp[i/16].data[13].value = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask4_subp[i/16].data[14].value = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask4_subp[i/16].data[15].value = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			}
			if(i%16==7){  // CRITICAL AUTOMATEME.
				vmask5_subp[i/16].data[0].key = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask5_subp[i/16].data[1].key = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask5_subp[i/16].data[2].key = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask5_subp[i/16].data[3].key = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask5_subp[i/16].data[4].key = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask5_subp[i/16].data[5].key = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask5_subp[i/16].data[6].key = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask5_subp[i/16].data[7].key = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask5_subp[i/16].data[8].key = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask5_subp[i/16].data[9].key = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask5_subp[i/16].data[10].key = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask5_subp[i/16].data[11].key = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask5_subp[i/16].data[12].key = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask5_subp[i/16].data[13].key = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask5_subp[i/16].data[14].key = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask5_subp[i/16].data[15].key = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			} else {
				vmask5_subp[i/16].data[0].value = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask5_subp[i/16].data[1].value = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask5_subp[i/16].data[2].value = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask5_subp[i/16].data[3].value = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask5_subp[i/16].data[4].value = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask5_subp[i/16].data[5].value = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask5_subp[i/16].data[6].value = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask5_subp[i/16].data[7].value = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask5_subp[i/16].data[8].value = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask5_subp[i/16].data[9].value = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask5_subp[i/16].data[10].value = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask5_subp[i/16].data[11].value = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask5_subp[i/16].data[12].value = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask5_subp[i/16].data[13].value = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask5_subp[i/16].data[14].value = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask5_subp[i/16].data[15].value = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			}
			if(i%16==7){  // CRITICAL AUTOMATEME.
				vmask6_subp[i/16].data[0].key = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask6_subp[i/16].data[1].key = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask6_subp[i/16].data[2].key = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask6_subp[i/16].data[3].key = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask6_subp[i/16].data[4].key = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask6_subp[i/16].data[5].key = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask6_subp[i/16].data[6].key = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask6_subp[i/16].data[7].key = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask6_subp[i/16].data[8].key = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask6_subp[i/16].data[9].key = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask6_subp[i/16].data[10].key = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask6_subp[i/16].data[11].key = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask6_subp[i/16].data[12].key = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask6_subp[i/16].data[13].key = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask6_subp[i/16].data[14].key = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask6_subp[i/16].data[15].key = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			} else {
				vmask6_subp[i/16].data[0].value = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask6_subp[i/16].data[1].value = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask6_subp[i/16].data[2].value = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask6_subp[i/16].data[3].value = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask6_subp[i/16].data[4].value = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask6_subp[i/16].data[5].value = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask6_subp[i/16].data[6].value = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask6_subp[i/16].data[7].value = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask6_subp[i/16].data[8].value = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask6_subp[i/16].data[9].value = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask6_subp[i/16].data[10].value = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask6_subp[i/16].data[11].value = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask6_subp[i/16].data[12].value = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask6_subp[i/16].data[13].value = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask6_subp[i/16].data[14].value = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask6_subp[i/16].data[15].value = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			}
			if(i%16==7){  // CRITICAL AUTOMATEME.
				vmask7_subp[i/16].data[0].key = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask7_subp[i/16].data[1].key = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask7_subp[i/16].data[2].key = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask7_subp[i/16].data[3].key = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask7_subp[i/16].data[4].key = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask7_subp[i/16].data[5].key = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask7_subp[i/16].data[6].key = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask7_subp[i/16].data[7].key = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask7_subp[i/16].data[8].key = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask7_subp[i/16].data[9].key = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask7_subp[i/16].data[10].key = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask7_subp[i/16].data[11].key = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask7_subp[i/16].data[12].key = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask7_subp[i/16].data[13].key = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask7_subp[i/16].data[14].key = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask7_subp[i/16].data[15].key = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			} else {
				vmask7_subp[i/16].data[0].value = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask7_subp[i/16].data[1].value = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask7_subp[i/16].data[2].value = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask7_subp[i/16].data[3].value = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask7_subp[i/16].data[4].value = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask7_subp[i/16].data[5].value = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask7_subp[i/16].data[6].value = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask7_subp[i/16].data[7].value = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask7_subp[i/16].data[8].value = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask7_subp[i/16].data[9].value = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask7_subp[i/16].data[10].value = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask7_subp[i/16].data[11].value = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask7_subp[i/16].data[12].value = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask7_subp[i/16].data[13].value = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask7_subp[i/16].data[14].value = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask7_subp[i/16].data[15].value = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			}
			
			tempvSUBmask.data[0].key = 0;
			tempvSUBmask.data[0].value = 0;
			tempvSUBmask.data[1].key = 0;
			tempvSUBmask.data[1].value = 0;
			tempvSUBmask.data[2].key = 0;
			tempvSUBmask.data[2].value = 0;
			tempvSUBmask.data[3].key = 0;
			tempvSUBmask.data[3].value = 0;
			tempvSUBmask.data[4].key = 0;
			tempvSUBmask.data[4].value = 0;
			tempvSUBmask.data[5].key = 0;
			tempvSUBmask.data[5].value = 0;
			tempvSUBmask.data[6].key = 0;
			tempvSUBmask.data[6].value = 0;
			tempvSUBmask.data[7].key = 0;
			tempvSUBmask.data[7].value = 0;
			tempvSUBmask.data[8].key = 0;
			tempvSUBmask.data[8].value = 0;
			tempvSUBmask.data[9].key = 0;
			tempvSUBmask.data[9].value = 0;
			tempvSUBmask.data[10].key = 0;
			tempvSUBmask.data[10].value = 0;
			tempvSUBmask.data[11].key = 0;
			tempvSUBmask.data[11].value = 0;
			tempvSUBmask.data[12].key = 0;
			tempvSUBmask.data[12].value = 0;
			tempvSUBmask.data[13].key = 0;
			tempvSUBmask.data[13].value = 0;
			tempvSUBmask.data[14].key = 0;
			tempvSUBmask.data[14].value = 0;
			tempvSUBmask.data[15].key = 0;
			tempvSUBmask.data[15].value = 0;
		}
		
		/* if(i % SUBPMASKFACTOR == SUBPMASKFACTOR-1){ // CRITICAL AUTOMATEME.
			if(i%16==7){  // CRITICAL AUTOMATEME.
				vmask0_subp[i/SUBPMASKFACTOR].data[0].key = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[1].key = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[2].key = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[3].key = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[4].key = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[5].key = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[6].key = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[7].key = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[8].key = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[9].key = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[10].key = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[11].key = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[12].key = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[13].key = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[14].key = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[15].key = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			} else {
				vmask0_subp[i/SUBPMASKFACTOR].data[0].value = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[1].value = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[2].value = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[3].value = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[4].value = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[5].value = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[6].value = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[7].value = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[8].value = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[9].value = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[10].value = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[11].value = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[12].value = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[13].value = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[14].value = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[15].value = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			}
			if(i%16==7){  // CRITICAL AUTOMATEME.
				vmask1_subp[i/SUBPMASKFACTOR].data[0].key = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[1].key = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[2].key = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[3].key = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[4].key = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[5].key = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[6].key = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[7].key = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[8].key = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[9].key = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[10].key = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[11].key = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[12].key = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[13].key = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[14].key = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[15].key = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			} else {
				vmask1_subp[i/SUBPMASKFACTOR].data[0].value = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[1].value = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[2].value = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[3].value = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[4].value = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[5].value = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[6].value = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[7].value = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[8].value = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[9].value = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[10].value = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[11].value = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[12].value = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[13].value = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[14].value = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[15].value = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			}
			if(i%16==7){  // CRITICAL AUTOMATEME.
				vmask2_subp[i/SUBPMASKFACTOR].data[0].key = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[1].key = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[2].key = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[3].key = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[4].key = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[5].key = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[6].key = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[7].key = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[8].key = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[9].key = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[10].key = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[11].key = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[12].key = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[13].key = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[14].key = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[15].key = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			} else {
				vmask2_subp[i/SUBPMASKFACTOR].data[0].value = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[1].value = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[2].value = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[3].value = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[4].value = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[5].value = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[6].value = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[7].value = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[8].value = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[9].value = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[10].value = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[11].value = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[12].value = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[13].value = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[14].value = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[15].value = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			}
			if(i%16==7){  // CRITICAL AUTOMATEME.
				vmask3_subp[i/SUBPMASKFACTOR].data[0].key = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[1].key = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[2].key = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[3].key = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[4].key = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[5].key = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[6].key = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[7].key = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[8].key = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[9].key = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[10].key = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[11].key = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[12].key = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[13].key = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[14].key = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[15].key = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			} else {
				vmask3_subp[i/SUBPMASKFACTOR].data[0].value = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[1].value = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[2].value = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[3].value = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[4].value = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[5].value = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[6].value = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[7].value = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[8].value = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[9].value = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[10].value = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[11].value = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[12].value = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[13].value = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[14].value = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[15].value = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			}
			if(i%16==7){  // CRITICAL AUTOMATEME.
				vmask4_subp[i/SUBPMASKFACTOR].data[0].key = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[1].key = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[2].key = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[3].key = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[4].key = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[5].key = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[6].key = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[7].key = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[8].key = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[9].key = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[10].key = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[11].key = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[12].key = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[13].key = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[14].key = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[15].key = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			} else {
				vmask4_subp[i/SUBPMASKFACTOR].data[0].value = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[1].value = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[2].value = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[3].value = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[4].value = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[5].value = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[6].value = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[7].value = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[8].value = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[9].value = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[10].value = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[11].value = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[12].value = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[13].value = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[14].value = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[15].value = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			}
			if(i%16==7){  // CRITICAL AUTOMATEME.
				vmask5_subp[i/SUBPMASKFACTOR].data[0].key = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[1].key = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[2].key = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[3].key = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[4].key = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[5].key = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[6].key = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[7].key = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[8].key = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[9].key = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[10].key = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[11].key = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[12].key = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[13].key = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[14].key = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[15].key = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			} else {
				vmask5_subp[i/SUBPMASKFACTOR].data[0].value = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[1].value = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[2].value = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[3].value = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[4].value = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[5].value = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[6].value = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[7].value = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[8].value = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[9].value = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[10].value = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[11].value = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[12].value = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[13].value = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[14].value = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[15].value = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			}
			if(i%16==7){  // CRITICAL AUTOMATEME.
				vmask6_subp[i/SUBPMASKFACTOR].data[0].key = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask6_subp[i/SUBPMASKFACTOR].data[1].key = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask6_subp[i/SUBPMASKFACTOR].data[2].key = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask6_subp[i/SUBPMASKFACTOR].data[3].key = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask6_subp[i/SUBPMASKFACTOR].data[4].key = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask6_subp[i/SUBPMASKFACTOR].data[5].key = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask6_subp[i/SUBPMASKFACTOR].data[6].key = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask6_subp[i/SUBPMASKFACTOR].data[7].key = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask6_subp[i/SUBPMASKFACTOR].data[8].key = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask6_subp[i/SUBPMASKFACTOR].data[9].key = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask6_subp[i/SUBPMASKFACTOR].data[10].key = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask6_subp[i/SUBPMASKFACTOR].data[11].key = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask6_subp[i/SUBPMASKFACTOR].data[12].key = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask6_subp[i/SUBPMASKFACTOR].data[13].key = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask6_subp[i/SUBPMASKFACTOR].data[14].key = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask6_subp[i/SUBPMASKFACTOR].data[15].key = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			} else {
				vmask6_subp[i/SUBPMASKFACTOR].data[0].value = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask6_subp[i/SUBPMASKFACTOR].data[1].value = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask6_subp[i/SUBPMASKFACTOR].data[2].value = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask6_subp[i/SUBPMASKFACTOR].data[3].value = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask6_subp[i/SUBPMASKFACTOR].data[4].value = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask6_subp[i/SUBPMASKFACTOR].data[5].value = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask6_subp[i/SUBPMASKFACTOR].data[6].value = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask6_subp[i/SUBPMASKFACTOR].data[7].value = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask6_subp[i/SUBPMASKFACTOR].data[8].value = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask6_subp[i/SUBPMASKFACTOR].data[9].value = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask6_subp[i/SUBPMASKFACTOR].data[10].value = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask6_subp[i/SUBPMASKFACTOR].data[11].value = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask6_subp[i/SUBPMASKFACTOR].data[12].value = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask6_subp[i/SUBPMASKFACTOR].data[13].value = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask6_subp[i/SUBPMASKFACTOR].data[14].value = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask6_subp[i/SUBPMASKFACTOR].data[15].value = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			}
			if(i%16==7){  // CRITICAL AUTOMATEME.
				vmask7_subp[i/SUBPMASKFACTOR].data[0].key = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask7_subp[i/SUBPMASKFACTOR].data[1].key = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask7_subp[i/SUBPMASKFACTOR].data[2].key = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask7_subp[i/SUBPMASKFACTOR].data[3].key = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask7_subp[i/SUBPMASKFACTOR].data[4].key = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask7_subp[i/SUBPMASKFACTOR].data[5].key = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask7_subp[i/SUBPMASKFACTOR].data[6].key = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask7_subp[i/SUBPMASKFACTOR].data[7].key = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask7_subp[i/SUBPMASKFACTOR].data[8].key = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask7_subp[i/SUBPMASKFACTOR].data[9].key = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask7_subp[i/SUBPMASKFACTOR].data[10].key = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask7_subp[i/SUBPMASKFACTOR].data[11].key = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask7_subp[i/SUBPMASKFACTOR].data[12].key = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask7_subp[i/SUBPMASKFACTOR].data[13].key = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask7_subp[i/SUBPMASKFACTOR].data[14].key = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask7_subp[i/SUBPMASKFACTOR].data[15].key = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			} else {
				vmask7_subp[i/SUBPMASKFACTOR].data[0].value = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask7_subp[i/SUBPMASKFACTOR].data[1].value = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask7_subp[i/SUBPMASKFACTOR].data[2].value = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask7_subp[i/SUBPMASKFACTOR].data[3].value = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask7_subp[i/SUBPMASKFACTOR].data[4].value = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask7_subp[i/SUBPMASKFACTOR].data[5].value = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask7_subp[i/SUBPMASKFACTOR].data[6].value = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask7_subp[i/SUBPMASKFACTOR].data[7].value = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask7_subp[i/SUBPMASKFACTOR].data[8].value = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask7_subp[i/SUBPMASKFACTOR].data[9].value = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask7_subp[i/SUBPMASKFACTOR].data[10].value = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask7_subp[i/SUBPMASKFACTOR].data[11].value = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask7_subp[i/SUBPMASKFACTOR].data[12].value = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask7_subp[i/SUBPMASKFACTOR].data[13].value = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask7_subp[i/SUBPMASKFACTOR].data[14].value = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask7_subp[i/SUBPMASKFACTOR].data[15].value = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			}
			
			tempvSUBmask.data[0].key = 0;
			tempvSUBmask.data[0].value = 0;
			tempvSUBmask.data[1].key = 0;
			tempvSUBmask.data[1].value = 0;
			tempvSUBmask.data[2].key = 0;
			tempvSUBmask.data[2].value = 0;
			tempvSUBmask.data[3].key = 0;
			tempvSUBmask.data[3].value = 0;
			tempvSUBmask.data[4].key = 0;
			tempvSUBmask.data[4].value = 0;
			tempvSUBmask.data[5].key = 0;
			tempvSUBmask.data[5].value = 0;
			tempvSUBmask.data[6].key = 0;
			tempvSUBmask.data[6].value = 0;
			tempvSUBmask.data[7].key = 0;
			tempvSUBmask.data[7].value = 0;
			tempvSUBmask.data[8].key = 0;
			tempvSUBmask.data[8].value = 0;
			tempvSUBmask.data[9].key = 0;
			tempvSUBmask.data[9].value = 0;
			tempvSUBmask.data[10].key = 0;
			tempvSUBmask.data[10].value = 0;
			tempvSUBmask.data[11].key = 0;
			tempvSUBmask.data[11].value = 0;
			tempvSUBmask.data[12].key = 0;
			tempvSUBmask.data[12].value = 0;
			tempvSUBmask.data[13].key = 0;
			tempvSUBmask.data[13].value = 0;
			tempvSUBmask.data[14].key = 0;
			tempvSUBmask.data[14].value = 0;
			tempvSUBmask.data[15].key = 0;
			tempvSUBmask.data[15].value = 0;
		} */
		#endif 
	}
	return;
}
void //
	#ifdef SW 
	actsproc::
	#endif 
loadmany9vmasks_subp(bool_type enable, unitBRAMwidth_type vmask0[BLOCKRAM_SIZE], unitBRAMwidth_type vmask0_subp[BLOCKRAM_SIZE],unitBRAMwidth_type vmask1_subp[BLOCKRAM_SIZE],unitBRAMwidth_type vmask2_subp[BLOCKRAM_SIZE],unitBRAMwidth_type vmask3_subp[BLOCKRAM_SIZE],unitBRAMwidth_type vmask4_subp[BLOCKRAM_SIZE],unitBRAMwidth_type vmask5_subp[BLOCKRAM_SIZE],unitBRAMwidth_type vmask6_subp[BLOCKRAM_SIZE],unitBRAMwidth_type vmask7_subp[BLOCKRAM_SIZE],unitBRAMwidth_type vmask8_subp[BLOCKRAM_SIZE], buffer_type size_kvs){
	if(enable == OFF){ return; }
	analysis_type analysis_loopcount1 = BLOCKRAM_SIZE;
	analysis_type analysis_loopcount2 = BLOCKRAM_SIZE / 16;
	analysis_type analysis_loopcount3 = BLOCKRAM_SIZE;
	
	buffer_type transfsize = size_kvs * 16;

	unitBRAMwidth_type tempvmask;
	#pragma HLS DATA_PACK variable = tempvmask	
	unitBRAMwidth_type tempvSUBmask;
	#pragma HLS DATA_PACK variable = tempvSUBmask		
	tempvSUBmask.data[0].key = 0;
	tempvSUBmask.data[0].value = 0;
	tempvSUBmask.data[1].key = 0;
	tempvSUBmask.data[1].value = 0;
	tempvSUBmask.data[2].key = 0;
	tempvSUBmask.data[2].value = 0;
	tempvSUBmask.data[3].key = 0;
	tempvSUBmask.data[3].value = 0;
	tempvSUBmask.data[4].key = 0;
	tempvSUBmask.data[4].value = 0;
	tempvSUBmask.data[5].key = 0;
	tempvSUBmask.data[5].value = 0;
	tempvSUBmask.data[6].key = 0;
	tempvSUBmask.data[6].value = 0;
	tempvSUBmask.data[7].key = 0;
	tempvSUBmask.data[7].value = 0;
	tempvSUBmask.data[8].key = 0;
	tempvSUBmask.data[8].value = 0;
	tempvSUBmask.data[9].key = 0;
	tempvSUBmask.data[9].value = 0;
	tempvSUBmask.data[10].key = 0;
	tempvSUBmask.data[10].value = 0;
	tempvSUBmask.data[11].key = 0;
	tempvSUBmask.data[11].value = 0;
	tempvSUBmask.data[12].key = 0;
	tempvSUBmask.data[12].value = 0;
	tempvSUBmask.data[13].key = 0;
	tempvSUBmask.data[13].value = 0;
	tempvSUBmask.data[14].key = 0;
	tempvSUBmask.data[14].value = 0;
	tempvSUBmask.data[15].key = 0;
	tempvSUBmask.data[15].value = 0;
	LOADVMASKSSUBP_LOOP2: for (buffer_type i=0; i<transfsize; i++){ // transfsize, reducebuffersz
	#pragma HLS LOOP_TRIPCOUNT min=0 max=analysis_loopcount3 avg=analysis_loopcount3
	#pragma HLS PIPELINE II=2
		
		tempvmask = vmask0[i];
		
		// subp mask 
		#ifdef ENABLE_SUBVMASKING
		tempvSUBmask.data[0].key = tempvSUBmask.data[0].key | tempvmask.data[0].key;
		tempvSUBmask.data[0].value = tempvSUBmask.data[0].value | tempvmask.data[0].value;
		tempvSUBmask.data[1].key = tempvSUBmask.data[1].key | tempvmask.data[1].key;
		tempvSUBmask.data[1].value = tempvSUBmask.data[1].value | tempvmask.data[1].value;
		tempvSUBmask.data[2].key = tempvSUBmask.data[2].key | tempvmask.data[2].key;
		tempvSUBmask.data[2].value = tempvSUBmask.data[2].value | tempvmask.data[2].value;
		tempvSUBmask.data[3].key = tempvSUBmask.data[3].key | tempvmask.data[3].key;
		tempvSUBmask.data[3].value = tempvSUBmask.data[3].value | tempvmask.data[3].value;
		tempvSUBmask.data[4].key = tempvSUBmask.data[4].key | tempvmask.data[4].key;
		tempvSUBmask.data[4].value = tempvSUBmask.data[4].value | tempvmask.data[4].value;
		tempvSUBmask.data[5].key = tempvSUBmask.data[5].key | tempvmask.data[5].key;
		tempvSUBmask.data[5].value = tempvSUBmask.data[5].value | tempvmask.data[5].value;
		tempvSUBmask.data[6].key = tempvSUBmask.data[6].key | tempvmask.data[6].key;
		tempvSUBmask.data[6].value = tempvSUBmask.data[6].value | tempvmask.data[6].value;
		tempvSUBmask.data[7].key = tempvSUBmask.data[7].key | tempvmask.data[7].key;
		tempvSUBmask.data[7].value = tempvSUBmask.data[7].value | tempvmask.data[7].value;
		tempvSUBmask.data[8].key = tempvSUBmask.data[8].key | tempvmask.data[8].key;
		tempvSUBmask.data[8].value = tempvSUBmask.data[8].value | tempvmask.data[8].value;
		tempvSUBmask.data[9].key = tempvSUBmask.data[9].key | tempvmask.data[9].key;
		tempvSUBmask.data[9].value = tempvSUBmask.data[9].value | tempvmask.data[9].value;
		tempvSUBmask.data[10].key = tempvSUBmask.data[10].key | tempvmask.data[10].key;
		tempvSUBmask.data[10].value = tempvSUBmask.data[10].value | tempvmask.data[10].value;
		tempvSUBmask.data[11].key = tempvSUBmask.data[11].key | tempvmask.data[11].key;
		tempvSUBmask.data[11].value = tempvSUBmask.data[11].value | tempvmask.data[11].value;
		tempvSUBmask.data[12].key = tempvSUBmask.data[12].key | tempvmask.data[12].key;
		tempvSUBmask.data[12].value = tempvSUBmask.data[12].value | tempvmask.data[12].value;
		tempvSUBmask.data[13].key = tempvSUBmask.data[13].key | tempvmask.data[13].key;
		tempvSUBmask.data[13].value = tempvSUBmask.data[13].value | tempvmask.data[13].value;
		tempvSUBmask.data[14].key = tempvSUBmask.data[14].key | tempvmask.data[14].key;
		tempvSUBmask.data[14].value = tempvSUBmask.data[14].value | tempvmask.data[14].value;
		tempvSUBmask.data[15].key = tempvSUBmask.data[15].key | tempvmask.data[15].key;
		tempvSUBmask.data[15].value = tempvSUBmask.data[15].value | tempvmask.data[15].value;
		
		if(i % 8 == 7){ // CRITICAL AUTOMATEME.
			if(i%16==7){  // CRITICAL AUTOMATEME.
				vmask0_subp[i/16].data[0].key = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask0_subp[i/16].data[1].key = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask0_subp[i/16].data[2].key = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask0_subp[i/16].data[3].key = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask0_subp[i/16].data[4].key = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask0_subp[i/16].data[5].key = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask0_subp[i/16].data[6].key = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask0_subp[i/16].data[7].key = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask0_subp[i/16].data[8].key = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask0_subp[i/16].data[9].key = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask0_subp[i/16].data[10].key = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask0_subp[i/16].data[11].key = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask0_subp[i/16].data[12].key = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask0_subp[i/16].data[13].key = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask0_subp[i/16].data[14].key = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask0_subp[i/16].data[15].key = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			} else {
				vmask0_subp[i/16].data[0].value = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask0_subp[i/16].data[1].value = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask0_subp[i/16].data[2].value = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask0_subp[i/16].data[3].value = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask0_subp[i/16].data[4].value = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask0_subp[i/16].data[5].value = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask0_subp[i/16].data[6].value = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask0_subp[i/16].data[7].value = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask0_subp[i/16].data[8].value = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask0_subp[i/16].data[9].value = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask0_subp[i/16].data[10].value = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask0_subp[i/16].data[11].value = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask0_subp[i/16].data[12].value = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask0_subp[i/16].data[13].value = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask0_subp[i/16].data[14].value = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask0_subp[i/16].data[15].value = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			}
			if(i%16==7){  // CRITICAL AUTOMATEME.
				vmask1_subp[i/16].data[0].key = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask1_subp[i/16].data[1].key = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask1_subp[i/16].data[2].key = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask1_subp[i/16].data[3].key = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask1_subp[i/16].data[4].key = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask1_subp[i/16].data[5].key = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask1_subp[i/16].data[6].key = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask1_subp[i/16].data[7].key = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask1_subp[i/16].data[8].key = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask1_subp[i/16].data[9].key = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask1_subp[i/16].data[10].key = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask1_subp[i/16].data[11].key = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask1_subp[i/16].data[12].key = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask1_subp[i/16].data[13].key = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask1_subp[i/16].data[14].key = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask1_subp[i/16].data[15].key = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			} else {
				vmask1_subp[i/16].data[0].value = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask1_subp[i/16].data[1].value = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask1_subp[i/16].data[2].value = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask1_subp[i/16].data[3].value = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask1_subp[i/16].data[4].value = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask1_subp[i/16].data[5].value = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask1_subp[i/16].data[6].value = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask1_subp[i/16].data[7].value = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask1_subp[i/16].data[8].value = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask1_subp[i/16].data[9].value = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask1_subp[i/16].data[10].value = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask1_subp[i/16].data[11].value = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask1_subp[i/16].data[12].value = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask1_subp[i/16].data[13].value = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask1_subp[i/16].data[14].value = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask1_subp[i/16].data[15].value = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			}
			if(i%16==7){  // CRITICAL AUTOMATEME.
				vmask2_subp[i/16].data[0].key = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask2_subp[i/16].data[1].key = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask2_subp[i/16].data[2].key = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask2_subp[i/16].data[3].key = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask2_subp[i/16].data[4].key = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask2_subp[i/16].data[5].key = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask2_subp[i/16].data[6].key = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask2_subp[i/16].data[7].key = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask2_subp[i/16].data[8].key = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask2_subp[i/16].data[9].key = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask2_subp[i/16].data[10].key = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask2_subp[i/16].data[11].key = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask2_subp[i/16].data[12].key = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask2_subp[i/16].data[13].key = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask2_subp[i/16].data[14].key = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask2_subp[i/16].data[15].key = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			} else {
				vmask2_subp[i/16].data[0].value = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask2_subp[i/16].data[1].value = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask2_subp[i/16].data[2].value = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask2_subp[i/16].data[3].value = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask2_subp[i/16].data[4].value = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask2_subp[i/16].data[5].value = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask2_subp[i/16].data[6].value = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask2_subp[i/16].data[7].value = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask2_subp[i/16].data[8].value = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask2_subp[i/16].data[9].value = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask2_subp[i/16].data[10].value = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask2_subp[i/16].data[11].value = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask2_subp[i/16].data[12].value = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask2_subp[i/16].data[13].value = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask2_subp[i/16].data[14].value = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask2_subp[i/16].data[15].value = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			}
			if(i%16==7){  // CRITICAL AUTOMATEME.
				vmask3_subp[i/16].data[0].key = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask3_subp[i/16].data[1].key = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask3_subp[i/16].data[2].key = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask3_subp[i/16].data[3].key = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask3_subp[i/16].data[4].key = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask3_subp[i/16].data[5].key = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask3_subp[i/16].data[6].key = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask3_subp[i/16].data[7].key = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask3_subp[i/16].data[8].key = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask3_subp[i/16].data[9].key = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask3_subp[i/16].data[10].key = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask3_subp[i/16].data[11].key = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask3_subp[i/16].data[12].key = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask3_subp[i/16].data[13].key = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask3_subp[i/16].data[14].key = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask3_subp[i/16].data[15].key = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			} else {
				vmask3_subp[i/16].data[0].value = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask3_subp[i/16].data[1].value = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask3_subp[i/16].data[2].value = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask3_subp[i/16].data[3].value = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask3_subp[i/16].data[4].value = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask3_subp[i/16].data[5].value = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask3_subp[i/16].data[6].value = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask3_subp[i/16].data[7].value = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask3_subp[i/16].data[8].value = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask3_subp[i/16].data[9].value = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask3_subp[i/16].data[10].value = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask3_subp[i/16].data[11].value = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask3_subp[i/16].data[12].value = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask3_subp[i/16].data[13].value = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask3_subp[i/16].data[14].value = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask3_subp[i/16].data[15].value = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			}
			if(i%16==7){  // CRITICAL AUTOMATEME.
				vmask4_subp[i/16].data[0].key = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask4_subp[i/16].data[1].key = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask4_subp[i/16].data[2].key = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask4_subp[i/16].data[3].key = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask4_subp[i/16].data[4].key = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask4_subp[i/16].data[5].key = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask4_subp[i/16].data[6].key = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask4_subp[i/16].data[7].key = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask4_subp[i/16].data[8].key = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask4_subp[i/16].data[9].key = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask4_subp[i/16].data[10].key = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask4_subp[i/16].data[11].key = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask4_subp[i/16].data[12].key = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask4_subp[i/16].data[13].key = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask4_subp[i/16].data[14].key = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask4_subp[i/16].data[15].key = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			} else {
				vmask4_subp[i/16].data[0].value = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask4_subp[i/16].data[1].value = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask4_subp[i/16].data[2].value = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask4_subp[i/16].data[3].value = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask4_subp[i/16].data[4].value = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask4_subp[i/16].data[5].value = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask4_subp[i/16].data[6].value = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask4_subp[i/16].data[7].value = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask4_subp[i/16].data[8].value = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask4_subp[i/16].data[9].value = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask4_subp[i/16].data[10].value = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask4_subp[i/16].data[11].value = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask4_subp[i/16].data[12].value = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask4_subp[i/16].data[13].value = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask4_subp[i/16].data[14].value = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask4_subp[i/16].data[15].value = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			}
			if(i%16==7){  // CRITICAL AUTOMATEME.
				vmask5_subp[i/16].data[0].key = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask5_subp[i/16].data[1].key = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask5_subp[i/16].data[2].key = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask5_subp[i/16].data[3].key = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask5_subp[i/16].data[4].key = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask5_subp[i/16].data[5].key = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask5_subp[i/16].data[6].key = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask5_subp[i/16].data[7].key = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask5_subp[i/16].data[8].key = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask5_subp[i/16].data[9].key = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask5_subp[i/16].data[10].key = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask5_subp[i/16].data[11].key = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask5_subp[i/16].data[12].key = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask5_subp[i/16].data[13].key = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask5_subp[i/16].data[14].key = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask5_subp[i/16].data[15].key = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			} else {
				vmask5_subp[i/16].data[0].value = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask5_subp[i/16].data[1].value = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask5_subp[i/16].data[2].value = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask5_subp[i/16].data[3].value = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask5_subp[i/16].data[4].value = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask5_subp[i/16].data[5].value = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask5_subp[i/16].data[6].value = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask5_subp[i/16].data[7].value = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask5_subp[i/16].data[8].value = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask5_subp[i/16].data[9].value = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask5_subp[i/16].data[10].value = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask5_subp[i/16].data[11].value = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask5_subp[i/16].data[12].value = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask5_subp[i/16].data[13].value = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask5_subp[i/16].data[14].value = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask5_subp[i/16].data[15].value = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			}
			if(i%16==7){  // CRITICAL AUTOMATEME.
				vmask6_subp[i/16].data[0].key = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask6_subp[i/16].data[1].key = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask6_subp[i/16].data[2].key = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask6_subp[i/16].data[3].key = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask6_subp[i/16].data[4].key = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask6_subp[i/16].data[5].key = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask6_subp[i/16].data[6].key = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask6_subp[i/16].data[7].key = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask6_subp[i/16].data[8].key = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask6_subp[i/16].data[9].key = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask6_subp[i/16].data[10].key = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask6_subp[i/16].data[11].key = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask6_subp[i/16].data[12].key = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask6_subp[i/16].data[13].key = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask6_subp[i/16].data[14].key = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask6_subp[i/16].data[15].key = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			} else {
				vmask6_subp[i/16].data[0].value = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask6_subp[i/16].data[1].value = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask6_subp[i/16].data[2].value = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask6_subp[i/16].data[3].value = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask6_subp[i/16].data[4].value = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask6_subp[i/16].data[5].value = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask6_subp[i/16].data[6].value = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask6_subp[i/16].data[7].value = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask6_subp[i/16].data[8].value = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask6_subp[i/16].data[9].value = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask6_subp[i/16].data[10].value = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask6_subp[i/16].data[11].value = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask6_subp[i/16].data[12].value = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask6_subp[i/16].data[13].value = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask6_subp[i/16].data[14].value = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask6_subp[i/16].data[15].value = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			}
			if(i%16==7){  // CRITICAL AUTOMATEME.
				vmask7_subp[i/16].data[0].key = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask7_subp[i/16].data[1].key = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask7_subp[i/16].data[2].key = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask7_subp[i/16].data[3].key = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask7_subp[i/16].data[4].key = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask7_subp[i/16].data[5].key = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask7_subp[i/16].data[6].key = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask7_subp[i/16].data[7].key = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask7_subp[i/16].data[8].key = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask7_subp[i/16].data[9].key = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask7_subp[i/16].data[10].key = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask7_subp[i/16].data[11].key = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask7_subp[i/16].data[12].key = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask7_subp[i/16].data[13].key = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask7_subp[i/16].data[14].key = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask7_subp[i/16].data[15].key = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			} else {
				vmask7_subp[i/16].data[0].value = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask7_subp[i/16].data[1].value = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask7_subp[i/16].data[2].value = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask7_subp[i/16].data[3].value = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask7_subp[i/16].data[4].value = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask7_subp[i/16].data[5].value = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask7_subp[i/16].data[6].value = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask7_subp[i/16].data[7].value = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask7_subp[i/16].data[8].value = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask7_subp[i/16].data[9].value = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask7_subp[i/16].data[10].value = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask7_subp[i/16].data[11].value = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask7_subp[i/16].data[12].value = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask7_subp[i/16].data[13].value = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask7_subp[i/16].data[14].value = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask7_subp[i/16].data[15].value = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			}
			if(i%16==7){  // CRITICAL AUTOMATEME.
				vmask8_subp[i/16].data[0].key = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask8_subp[i/16].data[1].key = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask8_subp[i/16].data[2].key = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask8_subp[i/16].data[3].key = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask8_subp[i/16].data[4].key = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask8_subp[i/16].data[5].key = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask8_subp[i/16].data[6].key = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask8_subp[i/16].data[7].key = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask8_subp[i/16].data[8].key = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask8_subp[i/16].data[9].key = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask8_subp[i/16].data[10].key = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask8_subp[i/16].data[11].key = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask8_subp[i/16].data[12].key = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask8_subp[i/16].data[13].key = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask8_subp[i/16].data[14].key = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask8_subp[i/16].data[15].key = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			} else {
				vmask8_subp[i/16].data[0].value = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask8_subp[i/16].data[1].value = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask8_subp[i/16].data[2].value = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask8_subp[i/16].data[3].value = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask8_subp[i/16].data[4].value = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask8_subp[i/16].data[5].value = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask8_subp[i/16].data[6].value = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask8_subp[i/16].data[7].value = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask8_subp[i/16].data[8].value = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask8_subp[i/16].data[9].value = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask8_subp[i/16].data[10].value = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask8_subp[i/16].data[11].value = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask8_subp[i/16].data[12].value = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask8_subp[i/16].data[13].value = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask8_subp[i/16].data[14].value = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask8_subp[i/16].data[15].value = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			}
			
			tempvSUBmask.data[0].key = 0;
			tempvSUBmask.data[0].value = 0;
			tempvSUBmask.data[1].key = 0;
			tempvSUBmask.data[1].value = 0;
			tempvSUBmask.data[2].key = 0;
			tempvSUBmask.data[2].value = 0;
			tempvSUBmask.data[3].key = 0;
			tempvSUBmask.data[3].value = 0;
			tempvSUBmask.data[4].key = 0;
			tempvSUBmask.data[4].value = 0;
			tempvSUBmask.data[5].key = 0;
			tempvSUBmask.data[5].value = 0;
			tempvSUBmask.data[6].key = 0;
			tempvSUBmask.data[6].value = 0;
			tempvSUBmask.data[7].key = 0;
			tempvSUBmask.data[7].value = 0;
			tempvSUBmask.data[8].key = 0;
			tempvSUBmask.data[8].value = 0;
			tempvSUBmask.data[9].key = 0;
			tempvSUBmask.data[9].value = 0;
			tempvSUBmask.data[10].key = 0;
			tempvSUBmask.data[10].value = 0;
			tempvSUBmask.data[11].key = 0;
			tempvSUBmask.data[11].value = 0;
			tempvSUBmask.data[12].key = 0;
			tempvSUBmask.data[12].value = 0;
			tempvSUBmask.data[13].key = 0;
			tempvSUBmask.data[13].value = 0;
			tempvSUBmask.data[14].key = 0;
			tempvSUBmask.data[14].value = 0;
			tempvSUBmask.data[15].key = 0;
			tempvSUBmask.data[15].value = 0;
		}
		
		/* if(i % SUBPMASKFACTOR == SUBPMASKFACTOR-1){ // CRITICAL AUTOMATEME.
			if(i%16==7){  // CRITICAL AUTOMATEME.
				vmask0_subp[i/SUBPMASKFACTOR].data[0].key = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[1].key = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[2].key = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[3].key = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[4].key = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[5].key = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[6].key = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[7].key = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[8].key = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[9].key = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[10].key = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[11].key = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[12].key = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[13].key = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[14].key = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[15].key = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			} else {
				vmask0_subp[i/SUBPMASKFACTOR].data[0].value = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[1].value = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[2].value = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[3].value = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[4].value = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[5].value = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[6].value = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[7].value = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[8].value = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[9].value = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[10].value = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[11].value = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[12].value = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[13].value = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[14].value = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[15].value = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			}
			if(i%16==7){  // CRITICAL AUTOMATEME.
				vmask1_subp[i/SUBPMASKFACTOR].data[0].key = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[1].key = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[2].key = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[3].key = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[4].key = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[5].key = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[6].key = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[7].key = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[8].key = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[9].key = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[10].key = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[11].key = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[12].key = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[13].key = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[14].key = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[15].key = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			} else {
				vmask1_subp[i/SUBPMASKFACTOR].data[0].value = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[1].value = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[2].value = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[3].value = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[4].value = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[5].value = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[6].value = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[7].value = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[8].value = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[9].value = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[10].value = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[11].value = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[12].value = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[13].value = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[14].value = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[15].value = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			}
			if(i%16==7){  // CRITICAL AUTOMATEME.
				vmask2_subp[i/SUBPMASKFACTOR].data[0].key = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[1].key = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[2].key = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[3].key = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[4].key = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[5].key = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[6].key = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[7].key = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[8].key = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[9].key = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[10].key = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[11].key = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[12].key = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[13].key = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[14].key = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[15].key = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			} else {
				vmask2_subp[i/SUBPMASKFACTOR].data[0].value = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[1].value = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[2].value = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[3].value = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[4].value = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[5].value = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[6].value = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[7].value = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[8].value = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[9].value = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[10].value = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[11].value = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[12].value = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[13].value = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[14].value = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[15].value = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			}
			if(i%16==7){  // CRITICAL AUTOMATEME.
				vmask3_subp[i/SUBPMASKFACTOR].data[0].key = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[1].key = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[2].key = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[3].key = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[4].key = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[5].key = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[6].key = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[7].key = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[8].key = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[9].key = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[10].key = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[11].key = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[12].key = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[13].key = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[14].key = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[15].key = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			} else {
				vmask3_subp[i/SUBPMASKFACTOR].data[0].value = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[1].value = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[2].value = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[3].value = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[4].value = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[5].value = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[6].value = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[7].value = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[8].value = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[9].value = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[10].value = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[11].value = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[12].value = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[13].value = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[14].value = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[15].value = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			}
			if(i%16==7){  // CRITICAL AUTOMATEME.
				vmask4_subp[i/SUBPMASKFACTOR].data[0].key = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[1].key = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[2].key = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[3].key = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[4].key = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[5].key = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[6].key = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[7].key = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[8].key = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[9].key = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[10].key = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[11].key = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[12].key = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[13].key = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[14].key = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[15].key = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			} else {
				vmask4_subp[i/SUBPMASKFACTOR].data[0].value = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[1].value = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[2].value = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[3].value = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[4].value = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[5].value = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[6].value = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[7].value = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[8].value = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[9].value = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[10].value = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[11].value = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[12].value = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[13].value = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[14].value = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[15].value = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			}
			if(i%16==7){  // CRITICAL AUTOMATEME.
				vmask5_subp[i/SUBPMASKFACTOR].data[0].key = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[1].key = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[2].key = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[3].key = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[4].key = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[5].key = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[6].key = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[7].key = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[8].key = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[9].key = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[10].key = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[11].key = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[12].key = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[13].key = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[14].key = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[15].key = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			} else {
				vmask5_subp[i/SUBPMASKFACTOR].data[0].value = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[1].value = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[2].value = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[3].value = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[4].value = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[5].value = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[6].value = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[7].value = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[8].value = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[9].value = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[10].value = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[11].value = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[12].value = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[13].value = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[14].value = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[15].value = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			}
			if(i%16==7){  // CRITICAL AUTOMATEME.
				vmask6_subp[i/SUBPMASKFACTOR].data[0].key = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask6_subp[i/SUBPMASKFACTOR].data[1].key = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask6_subp[i/SUBPMASKFACTOR].data[2].key = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask6_subp[i/SUBPMASKFACTOR].data[3].key = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask6_subp[i/SUBPMASKFACTOR].data[4].key = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask6_subp[i/SUBPMASKFACTOR].data[5].key = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask6_subp[i/SUBPMASKFACTOR].data[6].key = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask6_subp[i/SUBPMASKFACTOR].data[7].key = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask6_subp[i/SUBPMASKFACTOR].data[8].key = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask6_subp[i/SUBPMASKFACTOR].data[9].key = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask6_subp[i/SUBPMASKFACTOR].data[10].key = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask6_subp[i/SUBPMASKFACTOR].data[11].key = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask6_subp[i/SUBPMASKFACTOR].data[12].key = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask6_subp[i/SUBPMASKFACTOR].data[13].key = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask6_subp[i/SUBPMASKFACTOR].data[14].key = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask6_subp[i/SUBPMASKFACTOR].data[15].key = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			} else {
				vmask6_subp[i/SUBPMASKFACTOR].data[0].value = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask6_subp[i/SUBPMASKFACTOR].data[1].value = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask6_subp[i/SUBPMASKFACTOR].data[2].value = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask6_subp[i/SUBPMASKFACTOR].data[3].value = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask6_subp[i/SUBPMASKFACTOR].data[4].value = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask6_subp[i/SUBPMASKFACTOR].data[5].value = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask6_subp[i/SUBPMASKFACTOR].data[6].value = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask6_subp[i/SUBPMASKFACTOR].data[7].value = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask6_subp[i/SUBPMASKFACTOR].data[8].value = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask6_subp[i/SUBPMASKFACTOR].data[9].value = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask6_subp[i/SUBPMASKFACTOR].data[10].value = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask6_subp[i/SUBPMASKFACTOR].data[11].value = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask6_subp[i/SUBPMASKFACTOR].data[12].value = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask6_subp[i/SUBPMASKFACTOR].data[13].value = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask6_subp[i/SUBPMASKFACTOR].data[14].value = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask6_subp[i/SUBPMASKFACTOR].data[15].value = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			}
			if(i%16==7){  // CRITICAL AUTOMATEME.
				vmask7_subp[i/SUBPMASKFACTOR].data[0].key = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask7_subp[i/SUBPMASKFACTOR].data[1].key = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask7_subp[i/SUBPMASKFACTOR].data[2].key = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask7_subp[i/SUBPMASKFACTOR].data[3].key = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask7_subp[i/SUBPMASKFACTOR].data[4].key = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask7_subp[i/SUBPMASKFACTOR].data[5].key = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask7_subp[i/SUBPMASKFACTOR].data[6].key = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask7_subp[i/SUBPMASKFACTOR].data[7].key = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask7_subp[i/SUBPMASKFACTOR].data[8].key = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask7_subp[i/SUBPMASKFACTOR].data[9].key = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask7_subp[i/SUBPMASKFACTOR].data[10].key = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask7_subp[i/SUBPMASKFACTOR].data[11].key = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask7_subp[i/SUBPMASKFACTOR].data[12].key = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask7_subp[i/SUBPMASKFACTOR].data[13].key = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask7_subp[i/SUBPMASKFACTOR].data[14].key = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask7_subp[i/SUBPMASKFACTOR].data[15].key = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			} else {
				vmask7_subp[i/SUBPMASKFACTOR].data[0].value = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask7_subp[i/SUBPMASKFACTOR].data[1].value = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask7_subp[i/SUBPMASKFACTOR].data[2].value = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask7_subp[i/SUBPMASKFACTOR].data[3].value = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask7_subp[i/SUBPMASKFACTOR].data[4].value = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask7_subp[i/SUBPMASKFACTOR].data[5].value = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask7_subp[i/SUBPMASKFACTOR].data[6].value = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask7_subp[i/SUBPMASKFACTOR].data[7].value = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask7_subp[i/SUBPMASKFACTOR].data[8].value = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask7_subp[i/SUBPMASKFACTOR].data[9].value = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask7_subp[i/SUBPMASKFACTOR].data[10].value = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask7_subp[i/SUBPMASKFACTOR].data[11].value = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask7_subp[i/SUBPMASKFACTOR].data[12].value = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask7_subp[i/SUBPMASKFACTOR].data[13].value = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask7_subp[i/SUBPMASKFACTOR].data[14].value = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask7_subp[i/SUBPMASKFACTOR].data[15].value = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			}
			if(i%16==7){  // CRITICAL AUTOMATEME.
				vmask8_subp[i/SUBPMASKFACTOR].data[0].key = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask8_subp[i/SUBPMASKFACTOR].data[1].key = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask8_subp[i/SUBPMASKFACTOR].data[2].key = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask8_subp[i/SUBPMASKFACTOR].data[3].key = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask8_subp[i/SUBPMASKFACTOR].data[4].key = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask8_subp[i/SUBPMASKFACTOR].data[5].key = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask8_subp[i/SUBPMASKFACTOR].data[6].key = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask8_subp[i/SUBPMASKFACTOR].data[7].key = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask8_subp[i/SUBPMASKFACTOR].data[8].key = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask8_subp[i/SUBPMASKFACTOR].data[9].key = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask8_subp[i/SUBPMASKFACTOR].data[10].key = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask8_subp[i/SUBPMASKFACTOR].data[11].key = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask8_subp[i/SUBPMASKFACTOR].data[12].key = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask8_subp[i/SUBPMASKFACTOR].data[13].key = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask8_subp[i/SUBPMASKFACTOR].data[14].key = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask8_subp[i/SUBPMASKFACTOR].data[15].key = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			} else {
				vmask8_subp[i/SUBPMASKFACTOR].data[0].value = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask8_subp[i/SUBPMASKFACTOR].data[1].value = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask8_subp[i/SUBPMASKFACTOR].data[2].value = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask8_subp[i/SUBPMASKFACTOR].data[3].value = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask8_subp[i/SUBPMASKFACTOR].data[4].value = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask8_subp[i/SUBPMASKFACTOR].data[5].value = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask8_subp[i/SUBPMASKFACTOR].data[6].value = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask8_subp[i/SUBPMASKFACTOR].data[7].value = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask8_subp[i/SUBPMASKFACTOR].data[8].value = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask8_subp[i/SUBPMASKFACTOR].data[9].value = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask8_subp[i/SUBPMASKFACTOR].data[10].value = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask8_subp[i/SUBPMASKFACTOR].data[11].value = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask8_subp[i/SUBPMASKFACTOR].data[12].value = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask8_subp[i/SUBPMASKFACTOR].data[13].value = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask8_subp[i/SUBPMASKFACTOR].data[14].value = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask8_subp[i/SUBPMASKFACTOR].data[15].value = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			}
			
			tempvSUBmask.data[0].key = 0;
			tempvSUBmask.data[0].value = 0;
			tempvSUBmask.data[1].key = 0;
			tempvSUBmask.data[1].value = 0;
			tempvSUBmask.data[2].key = 0;
			tempvSUBmask.data[2].value = 0;
			tempvSUBmask.data[3].key = 0;
			tempvSUBmask.data[3].value = 0;
			tempvSUBmask.data[4].key = 0;
			tempvSUBmask.data[4].value = 0;
			tempvSUBmask.data[5].key = 0;
			tempvSUBmask.data[5].value = 0;
			tempvSUBmask.data[6].key = 0;
			tempvSUBmask.data[6].value = 0;
			tempvSUBmask.data[7].key = 0;
			tempvSUBmask.data[7].value = 0;
			tempvSUBmask.data[8].key = 0;
			tempvSUBmask.data[8].value = 0;
			tempvSUBmask.data[9].key = 0;
			tempvSUBmask.data[9].value = 0;
			tempvSUBmask.data[10].key = 0;
			tempvSUBmask.data[10].value = 0;
			tempvSUBmask.data[11].key = 0;
			tempvSUBmask.data[11].value = 0;
			tempvSUBmask.data[12].key = 0;
			tempvSUBmask.data[12].value = 0;
			tempvSUBmask.data[13].key = 0;
			tempvSUBmask.data[13].value = 0;
			tempvSUBmask.data[14].key = 0;
			tempvSUBmask.data[14].value = 0;
			tempvSUBmask.data[15].key = 0;
			tempvSUBmask.data[15].value = 0;
		} */
		#endif 
	}
	return;
}
void //
	#ifdef SW 
	actsproc::
	#endif 
loadmany10vmasks_subp(bool_type enable, unitBRAMwidth_type vmask0[BLOCKRAM_SIZE], unitBRAMwidth_type vmask0_subp[BLOCKRAM_SIZE],unitBRAMwidth_type vmask1_subp[BLOCKRAM_SIZE],unitBRAMwidth_type vmask2_subp[BLOCKRAM_SIZE],unitBRAMwidth_type vmask3_subp[BLOCKRAM_SIZE],unitBRAMwidth_type vmask4_subp[BLOCKRAM_SIZE],unitBRAMwidth_type vmask5_subp[BLOCKRAM_SIZE],unitBRAMwidth_type vmask6_subp[BLOCKRAM_SIZE],unitBRAMwidth_type vmask7_subp[BLOCKRAM_SIZE],unitBRAMwidth_type vmask8_subp[BLOCKRAM_SIZE],unitBRAMwidth_type vmask9_subp[BLOCKRAM_SIZE], buffer_type size_kvs){
	if(enable == OFF){ return; }
	analysis_type analysis_loopcount1 = BLOCKRAM_SIZE;
	analysis_type analysis_loopcount2 = BLOCKRAM_SIZE / 16;
	analysis_type analysis_loopcount3 = BLOCKRAM_SIZE;
	
	buffer_type transfsize = size_kvs * 16;

	unitBRAMwidth_type tempvmask;
	#pragma HLS DATA_PACK variable = tempvmask	
	unitBRAMwidth_type tempvSUBmask;
	#pragma HLS DATA_PACK variable = tempvSUBmask		
	tempvSUBmask.data[0].key = 0;
	tempvSUBmask.data[0].value = 0;
	tempvSUBmask.data[1].key = 0;
	tempvSUBmask.data[1].value = 0;
	tempvSUBmask.data[2].key = 0;
	tempvSUBmask.data[2].value = 0;
	tempvSUBmask.data[3].key = 0;
	tempvSUBmask.data[3].value = 0;
	tempvSUBmask.data[4].key = 0;
	tempvSUBmask.data[4].value = 0;
	tempvSUBmask.data[5].key = 0;
	tempvSUBmask.data[5].value = 0;
	tempvSUBmask.data[6].key = 0;
	tempvSUBmask.data[6].value = 0;
	tempvSUBmask.data[7].key = 0;
	tempvSUBmask.data[7].value = 0;
	tempvSUBmask.data[8].key = 0;
	tempvSUBmask.data[8].value = 0;
	tempvSUBmask.data[9].key = 0;
	tempvSUBmask.data[9].value = 0;
	tempvSUBmask.data[10].key = 0;
	tempvSUBmask.data[10].value = 0;
	tempvSUBmask.data[11].key = 0;
	tempvSUBmask.data[11].value = 0;
	tempvSUBmask.data[12].key = 0;
	tempvSUBmask.data[12].value = 0;
	tempvSUBmask.data[13].key = 0;
	tempvSUBmask.data[13].value = 0;
	tempvSUBmask.data[14].key = 0;
	tempvSUBmask.data[14].value = 0;
	tempvSUBmask.data[15].key = 0;
	tempvSUBmask.data[15].value = 0;
	LOADVMASKSSUBP_LOOP2: for (buffer_type i=0; i<transfsize; i++){ // transfsize, reducebuffersz
	#pragma HLS LOOP_TRIPCOUNT min=0 max=analysis_loopcount3 avg=analysis_loopcount3
	#pragma HLS PIPELINE II=2
		
		tempvmask = vmask0[i];
		
		// subp mask 
		#ifdef ENABLE_SUBVMASKING
		tempvSUBmask.data[0].key = tempvSUBmask.data[0].key | tempvmask.data[0].key;
		tempvSUBmask.data[0].value = tempvSUBmask.data[0].value | tempvmask.data[0].value;
		tempvSUBmask.data[1].key = tempvSUBmask.data[1].key | tempvmask.data[1].key;
		tempvSUBmask.data[1].value = tempvSUBmask.data[1].value | tempvmask.data[1].value;
		tempvSUBmask.data[2].key = tempvSUBmask.data[2].key | tempvmask.data[2].key;
		tempvSUBmask.data[2].value = tempvSUBmask.data[2].value | tempvmask.data[2].value;
		tempvSUBmask.data[3].key = tempvSUBmask.data[3].key | tempvmask.data[3].key;
		tempvSUBmask.data[3].value = tempvSUBmask.data[3].value | tempvmask.data[3].value;
		tempvSUBmask.data[4].key = tempvSUBmask.data[4].key | tempvmask.data[4].key;
		tempvSUBmask.data[4].value = tempvSUBmask.data[4].value | tempvmask.data[4].value;
		tempvSUBmask.data[5].key = tempvSUBmask.data[5].key | tempvmask.data[5].key;
		tempvSUBmask.data[5].value = tempvSUBmask.data[5].value | tempvmask.data[5].value;
		tempvSUBmask.data[6].key = tempvSUBmask.data[6].key | tempvmask.data[6].key;
		tempvSUBmask.data[6].value = tempvSUBmask.data[6].value | tempvmask.data[6].value;
		tempvSUBmask.data[7].key = tempvSUBmask.data[7].key | tempvmask.data[7].key;
		tempvSUBmask.data[7].value = tempvSUBmask.data[7].value | tempvmask.data[7].value;
		tempvSUBmask.data[8].key = tempvSUBmask.data[8].key | tempvmask.data[8].key;
		tempvSUBmask.data[8].value = tempvSUBmask.data[8].value | tempvmask.data[8].value;
		tempvSUBmask.data[9].key = tempvSUBmask.data[9].key | tempvmask.data[9].key;
		tempvSUBmask.data[9].value = tempvSUBmask.data[9].value | tempvmask.data[9].value;
		tempvSUBmask.data[10].key = tempvSUBmask.data[10].key | tempvmask.data[10].key;
		tempvSUBmask.data[10].value = tempvSUBmask.data[10].value | tempvmask.data[10].value;
		tempvSUBmask.data[11].key = tempvSUBmask.data[11].key | tempvmask.data[11].key;
		tempvSUBmask.data[11].value = tempvSUBmask.data[11].value | tempvmask.data[11].value;
		tempvSUBmask.data[12].key = tempvSUBmask.data[12].key | tempvmask.data[12].key;
		tempvSUBmask.data[12].value = tempvSUBmask.data[12].value | tempvmask.data[12].value;
		tempvSUBmask.data[13].key = tempvSUBmask.data[13].key | tempvmask.data[13].key;
		tempvSUBmask.data[13].value = tempvSUBmask.data[13].value | tempvmask.data[13].value;
		tempvSUBmask.data[14].key = tempvSUBmask.data[14].key | tempvmask.data[14].key;
		tempvSUBmask.data[14].value = tempvSUBmask.data[14].value | tempvmask.data[14].value;
		tempvSUBmask.data[15].key = tempvSUBmask.data[15].key | tempvmask.data[15].key;
		tempvSUBmask.data[15].value = tempvSUBmask.data[15].value | tempvmask.data[15].value;
		
		if(i % 8 == 7){ // CRITICAL AUTOMATEME.
			if(i%16==7){  // CRITICAL AUTOMATEME.
				vmask0_subp[i/16].data[0].key = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask0_subp[i/16].data[1].key = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask0_subp[i/16].data[2].key = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask0_subp[i/16].data[3].key = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask0_subp[i/16].data[4].key = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask0_subp[i/16].data[5].key = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask0_subp[i/16].data[6].key = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask0_subp[i/16].data[7].key = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask0_subp[i/16].data[8].key = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask0_subp[i/16].data[9].key = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask0_subp[i/16].data[10].key = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask0_subp[i/16].data[11].key = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask0_subp[i/16].data[12].key = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask0_subp[i/16].data[13].key = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask0_subp[i/16].data[14].key = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask0_subp[i/16].data[15].key = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			} else {
				vmask0_subp[i/16].data[0].value = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask0_subp[i/16].data[1].value = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask0_subp[i/16].data[2].value = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask0_subp[i/16].data[3].value = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask0_subp[i/16].data[4].value = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask0_subp[i/16].data[5].value = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask0_subp[i/16].data[6].value = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask0_subp[i/16].data[7].value = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask0_subp[i/16].data[8].value = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask0_subp[i/16].data[9].value = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask0_subp[i/16].data[10].value = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask0_subp[i/16].data[11].value = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask0_subp[i/16].data[12].value = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask0_subp[i/16].data[13].value = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask0_subp[i/16].data[14].value = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask0_subp[i/16].data[15].value = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			}
			if(i%16==7){  // CRITICAL AUTOMATEME.
				vmask1_subp[i/16].data[0].key = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask1_subp[i/16].data[1].key = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask1_subp[i/16].data[2].key = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask1_subp[i/16].data[3].key = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask1_subp[i/16].data[4].key = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask1_subp[i/16].data[5].key = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask1_subp[i/16].data[6].key = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask1_subp[i/16].data[7].key = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask1_subp[i/16].data[8].key = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask1_subp[i/16].data[9].key = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask1_subp[i/16].data[10].key = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask1_subp[i/16].data[11].key = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask1_subp[i/16].data[12].key = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask1_subp[i/16].data[13].key = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask1_subp[i/16].data[14].key = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask1_subp[i/16].data[15].key = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			} else {
				vmask1_subp[i/16].data[0].value = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask1_subp[i/16].data[1].value = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask1_subp[i/16].data[2].value = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask1_subp[i/16].data[3].value = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask1_subp[i/16].data[4].value = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask1_subp[i/16].data[5].value = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask1_subp[i/16].data[6].value = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask1_subp[i/16].data[7].value = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask1_subp[i/16].data[8].value = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask1_subp[i/16].data[9].value = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask1_subp[i/16].data[10].value = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask1_subp[i/16].data[11].value = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask1_subp[i/16].data[12].value = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask1_subp[i/16].data[13].value = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask1_subp[i/16].data[14].value = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask1_subp[i/16].data[15].value = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			}
			if(i%16==7){  // CRITICAL AUTOMATEME.
				vmask2_subp[i/16].data[0].key = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask2_subp[i/16].data[1].key = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask2_subp[i/16].data[2].key = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask2_subp[i/16].data[3].key = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask2_subp[i/16].data[4].key = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask2_subp[i/16].data[5].key = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask2_subp[i/16].data[6].key = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask2_subp[i/16].data[7].key = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask2_subp[i/16].data[8].key = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask2_subp[i/16].data[9].key = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask2_subp[i/16].data[10].key = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask2_subp[i/16].data[11].key = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask2_subp[i/16].data[12].key = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask2_subp[i/16].data[13].key = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask2_subp[i/16].data[14].key = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask2_subp[i/16].data[15].key = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			} else {
				vmask2_subp[i/16].data[0].value = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask2_subp[i/16].data[1].value = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask2_subp[i/16].data[2].value = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask2_subp[i/16].data[3].value = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask2_subp[i/16].data[4].value = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask2_subp[i/16].data[5].value = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask2_subp[i/16].data[6].value = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask2_subp[i/16].data[7].value = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask2_subp[i/16].data[8].value = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask2_subp[i/16].data[9].value = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask2_subp[i/16].data[10].value = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask2_subp[i/16].data[11].value = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask2_subp[i/16].data[12].value = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask2_subp[i/16].data[13].value = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask2_subp[i/16].data[14].value = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask2_subp[i/16].data[15].value = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			}
			if(i%16==7){  // CRITICAL AUTOMATEME.
				vmask3_subp[i/16].data[0].key = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask3_subp[i/16].data[1].key = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask3_subp[i/16].data[2].key = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask3_subp[i/16].data[3].key = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask3_subp[i/16].data[4].key = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask3_subp[i/16].data[5].key = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask3_subp[i/16].data[6].key = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask3_subp[i/16].data[7].key = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask3_subp[i/16].data[8].key = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask3_subp[i/16].data[9].key = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask3_subp[i/16].data[10].key = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask3_subp[i/16].data[11].key = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask3_subp[i/16].data[12].key = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask3_subp[i/16].data[13].key = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask3_subp[i/16].data[14].key = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask3_subp[i/16].data[15].key = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			} else {
				vmask3_subp[i/16].data[0].value = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask3_subp[i/16].data[1].value = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask3_subp[i/16].data[2].value = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask3_subp[i/16].data[3].value = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask3_subp[i/16].data[4].value = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask3_subp[i/16].data[5].value = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask3_subp[i/16].data[6].value = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask3_subp[i/16].data[7].value = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask3_subp[i/16].data[8].value = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask3_subp[i/16].data[9].value = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask3_subp[i/16].data[10].value = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask3_subp[i/16].data[11].value = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask3_subp[i/16].data[12].value = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask3_subp[i/16].data[13].value = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask3_subp[i/16].data[14].value = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask3_subp[i/16].data[15].value = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			}
			if(i%16==7){  // CRITICAL AUTOMATEME.
				vmask4_subp[i/16].data[0].key = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask4_subp[i/16].data[1].key = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask4_subp[i/16].data[2].key = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask4_subp[i/16].data[3].key = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask4_subp[i/16].data[4].key = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask4_subp[i/16].data[5].key = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask4_subp[i/16].data[6].key = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask4_subp[i/16].data[7].key = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask4_subp[i/16].data[8].key = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask4_subp[i/16].data[9].key = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask4_subp[i/16].data[10].key = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask4_subp[i/16].data[11].key = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask4_subp[i/16].data[12].key = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask4_subp[i/16].data[13].key = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask4_subp[i/16].data[14].key = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask4_subp[i/16].data[15].key = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			} else {
				vmask4_subp[i/16].data[0].value = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask4_subp[i/16].data[1].value = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask4_subp[i/16].data[2].value = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask4_subp[i/16].data[3].value = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask4_subp[i/16].data[4].value = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask4_subp[i/16].data[5].value = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask4_subp[i/16].data[6].value = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask4_subp[i/16].data[7].value = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask4_subp[i/16].data[8].value = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask4_subp[i/16].data[9].value = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask4_subp[i/16].data[10].value = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask4_subp[i/16].data[11].value = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask4_subp[i/16].data[12].value = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask4_subp[i/16].data[13].value = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask4_subp[i/16].data[14].value = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask4_subp[i/16].data[15].value = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			}
			if(i%16==7){  // CRITICAL AUTOMATEME.
				vmask5_subp[i/16].data[0].key = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask5_subp[i/16].data[1].key = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask5_subp[i/16].data[2].key = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask5_subp[i/16].data[3].key = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask5_subp[i/16].data[4].key = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask5_subp[i/16].data[5].key = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask5_subp[i/16].data[6].key = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask5_subp[i/16].data[7].key = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask5_subp[i/16].data[8].key = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask5_subp[i/16].data[9].key = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask5_subp[i/16].data[10].key = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask5_subp[i/16].data[11].key = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask5_subp[i/16].data[12].key = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask5_subp[i/16].data[13].key = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask5_subp[i/16].data[14].key = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask5_subp[i/16].data[15].key = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			} else {
				vmask5_subp[i/16].data[0].value = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask5_subp[i/16].data[1].value = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask5_subp[i/16].data[2].value = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask5_subp[i/16].data[3].value = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask5_subp[i/16].data[4].value = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask5_subp[i/16].data[5].value = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask5_subp[i/16].data[6].value = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask5_subp[i/16].data[7].value = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask5_subp[i/16].data[8].value = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask5_subp[i/16].data[9].value = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask5_subp[i/16].data[10].value = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask5_subp[i/16].data[11].value = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask5_subp[i/16].data[12].value = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask5_subp[i/16].data[13].value = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask5_subp[i/16].data[14].value = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask5_subp[i/16].data[15].value = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			}
			if(i%16==7){  // CRITICAL AUTOMATEME.
				vmask6_subp[i/16].data[0].key = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask6_subp[i/16].data[1].key = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask6_subp[i/16].data[2].key = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask6_subp[i/16].data[3].key = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask6_subp[i/16].data[4].key = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask6_subp[i/16].data[5].key = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask6_subp[i/16].data[6].key = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask6_subp[i/16].data[7].key = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask6_subp[i/16].data[8].key = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask6_subp[i/16].data[9].key = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask6_subp[i/16].data[10].key = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask6_subp[i/16].data[11].key = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask6_subp[i/16].data[12].key = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask6_subp[i/16].data[13].key = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask6_subp[i/16].data[14].key = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask6_subp[i/16].data[15].key = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			} else {
				vmask6_subp[i/16].data[0].value = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask6_subp[i/16].data[1].value = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask6_subp[i/16].data[2].value = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask6_subp[i/16].data[3].value = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask6_subp[i/16].data[4].value = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask6_subp[i/16].data[5].value = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask6_subp[i/16].data[6].value = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask6_subp[i/16].data[7].value = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask6_subp[i/16].data[8].value = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask6_subp[i/16].data[9].value = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask6_subp[i/16].data[10].value = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask6_subp[i/16].data[11].value = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask6_subp[i/16].data[12].value = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask6_subp[i/16].data[13].value = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask6_subp[i/16].data[14].value = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask6_subp[i/16].data[15].value = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			}
			if(i%16==7){  // CRITICAL AUTOMATEME.
				vmask7_subp[i/16].data[0].key = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask7_subp[i/16].data[1].key = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask7_subp[i/16].data[2].key = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask7_subp[i/16].data[3].key = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask7_subp[i/16].data[4].key = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask7_subp[i/16].data[5].key = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask7_subp[i/16].data[6].key = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask7_subp[i/16].data[7].key = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask7_subp[i/16].data[8].key = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask7_subp[i/16].data[9].key = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask7_subp[i/16].data[10].key = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask7_subp[i/16].data[11].key = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask7_subp[i/16].data[12].key = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask7_subp[i/16].data[13].key = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask7_subp[i/16].data[14].key = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask7_subp[i/16].data[15].key = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			} else {
				vmask7_subp[i/16].data[0].value = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask7_subp[i/16].data[1].value = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask7_subp[i/16].data[2].value = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask7_subp[i/16].data[3].value = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask7_subp[i/16].data[4].value = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask7_subp[i/16].data[5].value = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask7_subp[i/16].data[6].value = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask7_subp[i/16].data[7].value = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask7_subp[i/16].data[8].value = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask7_subp[i/16].data[9].value = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask7_subp[i/16].data[10].value = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask7_subp[i/16].data[11].value = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask7_subp[i/16].data[12].value = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask7_subp[i/16].data[13].value = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask7_subp[i/16].data[14].value = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask7_subp[i/16].data[15].value = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			}
			if(i%16==7){  // CRITICAL AUTOMATEME.
				vmask8_subp[i/16].data[0].key = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask8_subp[i/16].data[1].key = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask8_subp[i/16].data[2].key = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask8_subp[i/16].data[3].key = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask8_subp[i/16].data[4].key = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask8_subp[i/16].data[5].key = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask8_subp[i/16].data[6].key = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask8_subp[i/16].data[7].key = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask8_subp[i/16].data[8].key = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask8_subp[i/16].data[9].key = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask8_subp[i/16].data[10].key = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask8_subp[i/16].data[11].key = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask8_subp[i/16].data[12].key = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask8_subp[i/16].data[13].key = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask8_subp[i/16].data[14].key = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask8_subp[i/16].data[15].key = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			} else {
				vmask8_subp[i/16].data[0].value = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask8_subp[i/16].data[1].value = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask8_subp[i/16].data[2].value = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask8_subp[i/16].data[3].value = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask8_subp[i/16].data[4].value = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask8_subp[i/16].data[5].value = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask8_subp[i/16].data[6].value = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask8_subp[i/16].data[7].value = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask8_subp[i/16].data[8].value = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask8_subp[i/16].data[9].value = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask8_subp[i/16].data[10].value = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask8_subp[i/16].data[11].value = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask8_subp[i/16].data[12].value = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask8_subp[i/16].data[13].value = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask8_subp[i/16].data[14].value = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask8_subp[i/16].data[15].value = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			}
			if(i%16==7){  // CRITICAL AUTOMATEME.
				vmask9_subp[i/16].data[0].key = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask9_subp[i/16].data[1].key = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask9_subp[i/16].data[2].key = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask9_subp[i/16].data[3].key = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask9_subp[i/16].data[4].key = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask9_subp[i/16].data[5].key = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask9_subp[i/16].data[6].key = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask9_subp[i/16].data[7].key = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask9_subp[i/16].data[8].key = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask9_subp[i/16].data[9].key = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask9_subp[i/16].data[10].key = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask9_subp[i/16].data[11].key = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask9_subp[i/16].data[12].key = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask9_subp[i/16].data[13].key = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask9_subp[i/16].data[14].key = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask9_subp[i/16].data[15].key = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			} else {
				vmask9_subp[i/16].data[0].value = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask9_subp[i/16].data[1].value = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask9_subp[i/16].data[2].value = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask9_subp[i/16].data[3].value = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask9_subp[i/16].data[4].value = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask9_subp[i/16].data[5].value = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask9_subp[i/16].data[6].value = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask9_subp[i/16].data[7].value = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask9_subp[i/16].data[8].value = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask9_subp[i/16].data[9].value = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask9_subp[i/16].data[10].value = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask9_subp[i/16].data[11].value = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask9_subp[i/16].data[12].value = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask9_subp[i/16].data[13].value = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask9_subp[i/16].data[14].value = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask9_subp[i/16].data[15].value = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			}
			
			tempvSUBmask.data[0].key = 0;
			tempvSUBmask.data[0].value = 0;
			tempvSUBmask.data[1].key = 0;
			tempvSUBmask.data[1].value = 0;
			tempvSUBmask.data[2].key = 0;
			tempvSUBmask.data[2].value = 0;
			tempvSUBmask.data[3].key = 0;
			tempvSUBmask.data[3].value = 0;
			tempvSUBmask.data[4].key = 0;
			tempvSUBmask.data[4].value = 0;
			tempvSUBmask.data[5].key = 0;
			tempvSUBmask.data[5].value = 0;
			tempvSUBmask.data[6].key = 0;
			tempvSUBmask.data[6].value = 0;
			tempvSUBmask.data[7].key = 0;
			tempvSUBmask.data[7].value = 0;
			tempvSUBmask.data[8].key = 0;
			tempvSUBmask.data[8].value = 0;
			tempvSUBmask.data[9].key = 0;
			tempvSUBmask.data[9].value = 0;
			tempvSUBmask.data[10].key = 0;
			tempvSUBmask.data[10].value = 0;
			tempvSUBmask.data[11].key = 0;
			tempvSUBmask.data[11].value = 0;
			tempvSUBmask.data[12].key = 0;
			tempvSUBmask.data[12].value = 0;
			tempvSUBmask.data[13].key = 0;
			tempvSUBmask.data[13].value = 0;
			tempvSUBmask.data[14].key = 0;
			tempvSUBmask.data[14].value = 0;
			tempvSUBmask.data[15].key = 0;
			tempvSUBmask.data[15].value = 0;
		}
		
		/* if(i % SUBPMASKFACTOR == SUBPMASKFACTOR-1){ // CRITICAL AUTOMATEME.
			if(i%16==7){  // CRITICAL AUTOMATEME.
				vmask0_subp[i/SUBPMASKFACTOR].data[0].key = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[1].key = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[2].key = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[3].key = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[4].key = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[5].key = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[6].key = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[7].key = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[8].key = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[9].key = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[10].key = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[11].key = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[12].key = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[13].key = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[14].key = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[15].key = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			} else {
				vmask0_subp[i/SUBPMASKFACTOR].data[0].value = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[1].value = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[2].value = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[3].value = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[4].value = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[5].value = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[6].value = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[7].value = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[8].value = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[9].value = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[10].value = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[11].value = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[12].value = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[13].value = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[14].value = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[15].value = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			}
			if(i%16==7){  // CRITICAL AUTOMATEME.
				vmask1_subp[i/SUBPMASKFACTOR].data[0].key = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[1].key = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[2].key = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[3].key = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[4].key = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[5].key = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[6].key = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[7].key = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[8].key = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[9].key = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[10].key = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[11].key = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[12].key = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[13].key = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[14].key = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[15].key = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			} else {
				vmask1_subp[i/SUBPMASKFACTOR].data[0].value = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[1].value = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[2].value = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[3].value = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[4].value = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[5].value = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[6].value = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[7].value = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[8].value = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[9].value = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[10].value = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[11].value = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[12].value = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[13].value = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[14].value = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[15].value = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			}
			if(i%16==7){  // CRITICAL AUTOMATEME.
				vmask2_subp[i/SUBPMASKFACTOR].data[0].key = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[1].key = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[2].key = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[3].key = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[4].key = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[5].key = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[6].key = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[7].key = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[8].key = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[9].key = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[10].key = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[11].key = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[12].key = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[13].key = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[14].key = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[15].key = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			} else {
				vmask2_subp[i/SUBPMASKFACTOR].data[0].value = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[1].value = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[2].value = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[3].value = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[4].value = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[5].value = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[6].value = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[7].value = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[8].value = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[9].value = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[10].value = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[11].value = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[12].value = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[13].value = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[14].value = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[15].value = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			}
			if(i%16==7){  // CRITICAL AUTOMATEME.
				vmask3_subp[i/SUBPMASKFACTOR].data[0].key = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[1].key = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[2].key = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[3].key = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[4].key = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[5].key = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[6].key = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[7].key = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[8].key = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[9].key = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[10].key = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[11].key = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[12].key = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[13].key = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[14].key = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[15].key = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			} else {
				vmask3_subp[i/SUBPMASKFACTOR].data[0].value = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[1].value = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[2].value = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[3].value = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[4].value = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[5].value = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[6].value = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[7].value = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[8].value = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[9].value = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[10].value = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[11].value = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[12].value = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[13].value = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[14].value = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[15].value = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			}
			if(i%16==7){  // CRITICAL AUTOMATEME.
				vmask4_subp[i/SUBPMASKFACTOR].data[0].key = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[1].key = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[2].key = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[3].key = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[4].key = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[5].key = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[6].key = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[7].key = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[8].key = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[9].key = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[10].key = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[11].key = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[12].key = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[13].key = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[14].key = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[15].key = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			} else {
				vmask4_subp[i/SUBPMASKFACTOR].data[0].value = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[1].value = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[2].value = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[3].value = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[4].value = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[5].value = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[6].value = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[7].value = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[8].value = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[9].value = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[10].value = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[11].value = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[12].value = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[13].value = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[14].value = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[15].value = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			}
			if(i%16==7){  // CRITICAL AUTOMATEME.
				vmask5_subp[i/SUBPMASKFACTOR].data[0].key = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[1].key = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[2].key = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[3].key = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[4].key = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[5].key = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[6].key = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[7].key = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[8].key = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[9].key = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[10].key = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[11].key = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[12].key = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[13].key = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[14].key = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[15].key = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			} else {
				vmask5_subp[i/SUBPMASKFACTOR].data[0].value = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[1].value = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[2].value = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[3].value = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[4].value = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[5].value = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[6].value = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[7].value = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[8].value = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[9].value = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[10].value = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[11].value = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[12].value = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[13].value = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[14].value = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[15].value = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			}
			if(i%16==7){  // CRITICAL AUTOMATEME.
				vmask6_subp[i/SUBPMASKFACTOR].data[0].key = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask6_subp[i/SUBPMASKFACTOR].data[1].key = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask6_subp[i/SUBPMASKFACTOR].data[2].key = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask6_subp[i/SUBPMASKFACTOR].data[3].key = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask6_subp[i/SUBPMASKFACTOR].data[4].key = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask6_subp[i/SUBPMASKFACTOR].data[5].key = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask6_subp[i/SUBPMASKFACTOR].data[6].key = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask6_subp[i/SUBPMASKFACTOR].data[7].key = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask6_subp[i/SUBPMASKFACTOR].data[8].key = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask6_subp[i/SUBPMASKFACTOR].data[9].key = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask6_subp[i/SUBPMASKFACTOR].data[10].key = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask6_subp[i/SUBPMASKFACTOR].data[11].key = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask6_subp[i/SUBPMASKFACTOR].data[12].key = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask6_subp[i/SUBPMASKFACTOR].data[13].key = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask6_subp[i/SUBPMASKFACTOR].data[14].key = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask6_subp[i/SUBPMASKFACTOR].data[15].key = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			} else {
				vmask6_subp[i/SUBPMASKFACTOR].data[0].value = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask6_subp[i/SUBPMASKFACTOR].data[1].value = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask6_subp[i/SUBPMASKFACTOR].data[2].value = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask6_subp[i/SUBPMASKFACTOR].data[3].value = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask6_subp[i/SUBPMASKFACTOR].data[4].value = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask6_subp[i/SUBPMASKFACTOR].data[5].value = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask6_subp[i/SUBPMASKFACTOR].data[6].value = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask6_subp[i/SUBPMASKFACTOR].data[7].value = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask6_subp[i/SUBPMASKFACTOR].data[8].value = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask6_subp[i/SUBPMASKFACTOR].data[9].value = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask6_subp[i/SUBPMASKFACTOR].data[10].value = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask6_subp[i/SUBPMASKFACTOR].data[11].value = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask6_subp[i/SUBPMASKFACTOR].data[12].value = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask6_subp[i/SUBPMASKFACTOR].data[13].value = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask6_subp[i/SUBPMASKFACTOR].data[14].value = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask6_subp[i/SUBPMASKFACTOR].data[15].value = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			}
			if(i%16==7){  // CRITICAL AUTOMATEME.
				vmask7_subp[i/SUBPMASKFACTOR].data[0].key = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask7_subp[i/SUBPMASKFACTOR].data[1].key = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask7_subp[i/SUBPMASKFACTOR].data[2].key = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask7_subp[i/SUBPMASKFACTOR].data[3].key = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask7_subp[i/SUBPMASKFACTOR].data[4].key = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask7_subp[i/SUBPMASKFACTOR].data[5].key = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask7_subp[i/SUBPMASKFACTOR].data[6].key = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask7_subp[i/SUBPMASKFACTOR].data[7].key = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask7_subp[i/SUBPMASKFACTOR].data[8].key = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask7_subp[i/SUBPMASKFACTOR].data[9].key = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask7_subp[i/SUBPMASKFACTOR].data[10].key = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask7_subp[i/SUBPMASKFACTOR].data[11].key = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask7_subp[i/SUBPMASKFACTOR].data[12].key = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask7_subp[i/SUBPMASKFACTOR].data[13].key = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask7_subp[i/SUBPMASKFACTOR].data[14].key = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask7_subp[i/SUBPMASKFACTOR].data[15].key = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			} else {
				vmask7_subp[i/SUBPMASKFACTOR].data[0].value = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask7_subp[i/SUBPMASKFACTOR].data[1].value = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask7_subp[i/SUBPMASKFACTOR].data[2].value = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask7_subp[i/SUBPMASKFACTOR].data[3].value = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask7_subp[i/SUBPMASKFACTOR].data[4].value = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask7_subp[i/SUBPMASKFACTOR].data[5].value = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask7_subp[i/SUBPMASKFACTOR].data[6].value = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask7_subp[i/SUBPMASKFACTOR].data[7].value = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask7_subp[i/SUBPMASKFACTOR].data[8].value = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask7_subp[i/SUBPMASKFACTOR].data[9].value = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask7_subp[i/SUBPMASKFACTOR].data[10].value = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask7_subp[i/SUBPMASKFACTOR].data[11].value = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask7_subp[i/SUBPMASKFACTOR].data[12].value = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask7_subp[i/SUBPMASKFACTOR].data[13].value = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask7_subp[i/SUBPMASKFACTOR].data[14].value = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask7_subp[i/SUBPMASKFACTOR].data[15].value = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			}
			if(i%16==7){  // CRITICAL AUTOMATEME.
				vmask8_subp[i/SUBPMASKFACTOR].data[0].key = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask8_subp[i/SUBPMASKFACTOR].data[1].key = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask8_subp[i/SUBPMASKFACTOR].data[2].key = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask8_subp[i/SUBPMASKFACTOR].data[3].key = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask8_subp[i/SUBPMASKFACTOR].data[4].key = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask8_subp[i/SUBPMASKFACTOR].data[5].key = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask8_subp[i/SUBPMASKFACTOR].data[6].key = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask8_subp[i/SUBPMASKFACTOR].data[7].key = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask8_subp[i/SUBPMASKFACTOR].data[8].key = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask8_subp[i/SUBPMASKFACTOR].data[9].key = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask8_subp[i/SUBPMASKFACTOR].data[10].key = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask8_subp[i/SUBPMASKFACTOR].data[11].key = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask8_subp[i/SUBPMASKFACTOR].data[12].key = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask8_subp[i/SUBPMASKFACTOR].data[13].key = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask8_subp[i/SUBPMASKFACTOR].data[14].key = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask8_subp[i/SUBPMASKFACTOR].data[15].key = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			} else {
				vmask8_subp[i/SUBPMASKFACTOR].data[0].value = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask8_subp[i/SUBPMASKFACTOR].data[1].value = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask8_subp[i/SUBPMASKFACTOR].data[2].value = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask8_subp[i/SUBPMASKFACTOR].data[3].value = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask8_subp[i/SUBPMASKFACTOR].data[4].value = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask8_subp[i/SUBPMASKFACTOR].data[5].value = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask8_subp[i/SUBPMASKFACTOR].data[6].value = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask8_subp[i/SUBPMASKFACTOR].data[7].value = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask8_subp[i/SUBPMASKFACTOR].data[8].value = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask8_subp[i/SUBPMASKFACTOR].data[9].value = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask8_subp[i/SUBPMASKFACTOR].data[10].value = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask8_subp[i/SUBPMASKFACTOR].data[11].value = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask8_subp[i/SUBPMASKFACTOR].data[12].value = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask8_subp[i/SUBPMASKFACTOR].data[13].value = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask8_subp[i/SUBPMASKFACTOR].data[14].value = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask8_subp[i/SUBPMASKFACTOR].data[15].value = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			}
			if(i%16==7){  // CRITICAL AUTOMATEME.
				vmask9_subp[i/SUBPMASKFACTOR].data[0].key = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask9_subp[i/SUBPMASKFACTOR].data[1].key = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask9_subp[i/SUBPMASKFACTOR].data[2].key = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask9_subp[i/SUBPMASKFACTOR].data[3].key = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask9_subp[i/SUBPMASKFACTOR].data[4].key = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask9_subp[i/SUBPMASKFACTOR].data[5].key = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask9_subp[i/SUBPMASKFACTOR].data[6].key = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask9_subp[i/SUBPMASKFACTOR].data[7].key = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask9_subp[i/SUBPMASKFACTOR].data[8].key = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask9_subp[i/SUBPMASKFACTOR].data[9].key = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask9_subp[i/SUBPMASKFACTOR].data[10].key = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask9_subp[i/SUBPMASKFACTOR].data[11].key = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask9_subp[i/SUBPMASKFACTOR].data[12].key = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask9_subp[i/SUBPMASKFACTOR].data[13].key = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask9_subp[i/SUBPMASKFACTOR].data[14].key = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask9_subp[i/SUBPMASKFACTOR].data[15].key = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			} else {
				vmask9_subp[i/SUBPMASKFACTOR].data[0].value = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask9_subp[i/SUBPMASKFACTOR].data[1].value = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask9_subp[i/SUBPMASKFACTOR].data[2].value = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask9_subp[i/SUBPMASKFACTOR].data[3].value = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask9_subp[i/SUBPMASKFACTOR].data[4].value = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask9_subp[i/SUBPMASKFACTOR].data[5].value = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask9_subp[i/SUBPMASKFACTOR].data[6].value = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask9_subp[i/SUBPMASKFACTOR].data[7].value = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask9_subp[i/SUBPMASKFACTOR].data[8].value = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask9_subp[i/SUBPMASKFACTOR].data[9].value = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask9_subp[i/SUBPMASKFACTOR].data[10].value = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask9_subp[i/SUBPMASKFACTOR].data[11].value = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask9_subp[i/SUBPMASKFACTOR].data[12].value = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask9_subp[i/SUBPMASKFACTOR].data[13].value = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask9_subp[i/SUBPMASKFACTOR].data[14].value = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask9_subp[i/SUBPMASKFACTOR].data[15].value = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			}
			
			tempvSUBmask.data[0].key = 0;
			tempvSUBmask.data[0].value = 0;
			tempvSUBmask.data[1].key = 0;
			tempvSUBmask.data[1].value = 0;
			tempvSUBmask.data[2].key = 0;
			tempvSUBmask.data[2].value = 0;
			tempvSUBmask.data[3].key = 0;
			tempvSUBmask.data[3].value = 0;
			tempvSUBmask.data[4].key = 0;
			tempvSUBmask.data[4].value = 0;
			tempvSUBmask.data[5].key = 0;
			tempvSUBmask.data[5].value = 0;
			tempvSUBmask.data[6].key = 0;
			tempvSUBmask.data[6].value = 0;
			tempvSUBmask.data[7].key = 0;
			tempvSUBmask.data[7].value = 0;
			tempvSUBmask.data[8].key = 0;
			tempvSUBmask.data[8].value = 0;
			tempvSUBmask.data[9].key = 0;
			tempvSUBmask.data[9].value = 0;
			tempvSUBmask.data[10].key = 0;
			tempvSUBmask.data[10].value = 0;
			tempvSUBmask.data[11].key = 0;
			tempvSUBmask.data[11].value = 0;
			tempvSUBmask.data[12].key = 0;
			tempvSUBmask.data[12].value = 0;
			tempvSUBmask.data[13].key = 0;
			tempvSUBmask.data[13].value = 0;
			tempvSUBmask.data[14].key = 0;
			tempvSUBmask.data[14].value = 0;
			tempvSUBmask.data[15].key = 0;
			tempvSUBmask.data[15].value = 0;
		} */
		#endif 
	}
	return;
}
void //
	#ifdef SW 
	actsproc::
	#endif 
loadmany11vmasks_subp(bool_type enable, unitBRAMwidth_type vmask0[BLOCKRAM_SIZE], unitBRAMwidth_type vmask0_subp[BLOCKRAM_SIZE],unitBRAMwidth_type vmask1_subp[BLOCKRAM_SIZE],unitBRAMwidth_type vmask2_subp[BLOCKRAM_SIZE],unitBRAMwidth_type vmask3_subp[BLOCKRAM_SIZE],unitBRAMwidth_type vmask4_subp[BLOCKRAM_SIZE],unitBRAMwidth_type vmask5_subp[BLOCKRAM_SIZE],unitBRAMwidth_type vmask6_subp[BLOCKRAM_SIZE],unitBRAMwidth_type vmask7_subp[BLOCKRAM_SIZE],unitBRAMwidth_type vmask8_subp[BLOCKRAM_SIZE],unitBRAMwidth_type vmask9_subp[BLOCKRAM_SIZE],unitBRAMwidth_type vmask10_subp[BLOCKRAM_SIZE], buffer_type size_kvs){
	if(enable == OFF){ return; }
	analysis_type analysis_loopcount1 = BLOCKRAM_SIZE;
	analysis_type analysis_loopcount2 = BLOCKRAM_SIZE / 16;
	analysis_type analysis_loopcount3 = BLOCKRAM_SIZE;
	
	buffer_type transfsize = size_kvs * 16;

	unitBRAMwidth_type tempvmask;
	#pragma HLS DATA_PACK variable = tempvmask	
	unitBRAMwidth_type tempvSUBmask;
	#pragma HLS DATA_PACK variable = tempvSUBmask		
	tempvSUBmask.data[0].key = 0;
	tempvSUBmask.data[0].value = 0;
	tempvSUBmask.data[1].key = 0;
	tempvSUBmask.data[1].value = 0;
	tempvSUBmask.data[2].key = 0;
	tempvSUBmask.data[2].value = 0;
	tempvSUBmask.data[3].key = 0;
	tempvSUBmask.data[3].value = 0;
	tempvSUBmask.data[4].key = 0;
	tempvSUBmask.data[4].value = 0;
	tempvSUBmask.data[5].key = 0;
	tempvSUBmask.data[5].value = 0;
	tempvSUBmask.data[6].key = 0;
	tempvSUBmask.data[6].value = 0;
	tempvSUBmask.data[7].key = 0;
	tempvSUBmask.data[7].value = 0;
	tempvSUBmask.data[8].key = 0;
	tempvSUBmask.data[8].value = 0;
	tempvSUBmask.data[9].key = 0;
	tempvSUBmask.data[9].value = 0;
	tempvSUBmask.data[10].key = 0;
	tempvSUBmask.data[10].value = 0;
	tempvSUBmask.data[11].key = 0;
	tempvSUBmask.data[11].value = 0;
	tempvSUBmask.data[12].key = 0;
	tempvSUBmask.data[12].value = 0;
	tempvSUBmask.data[13].key = 0;
	tempvSUBmask.data[13].value = 0;
	tempvSUBmask.data[14].key = 0;
	tempvSUBmask.data[14].value = 0;
	tempvSUBmask.data[15].key = 0;
	tempvSUBmask.data[15].value = 0;
	LOADVMASKSSUBP_LOOP2: for (buffer_type i=0; i<transfsize; i++){ // transfsize, reducebuffersz
	#pragma HLS LOOP_TRIPCOUNT min=0 max=analysis_loopcount3 avg=analysis_loopcount3
	#pragma HLS PIPELINE II=2
		
		tempvmask = vmask0[i];
		
		// subp mask 
		#ifdef ENABLE_SUBVMASKING
		tempvSUBmask.data[0].key = tempvSUBmask.data[0].key | tempvmask.data[0].key;
		tempvSUBmask.data[0].value = tempvSUBmask.data[0].value | tempvmask.data[0].value;
		tempvSUBmask.data[1].key = tempvSUBmask.data[1].key | tempvmask.data[1].key;
		tempvSUBmask.data[1].value = tempvSUBmask.data[1].value | tempvmask.data[1].value;
		tempvSUBmask.data[2].key = tempvSUBmask.data[2].key | tempvmask.data[2].key;
		tempvSUBmask.data[2].value = tempvSUBmask.data[2].value | tempvmask.data[2].value;
		tempvSUBmask.data[3].key = tempvSUBmask.data[3].key | tempvmask.data[3].key;
		tempvSUBmask.data[3].value = tempvSUBmask.data[3].value | tempvmask.data[3].value;
		tempvSUBmask.data[4].key = tempvSUBmask.data[4].key | tempvmask.data[4].key;
		tempvSUBmask.data[4].value = tempvSUBmask.data[4].value | tempvmask.data[4].value;
		tempvSUBmask.data[5].key = tempvSUBmask.data[5].key | tempvmask.data[5].key;
		tempvSUBmask.data[5].value = tempvSUBmask.data[5].value | tempvmask.data[5].value;
		tempvSUBmask.data[6].key = tempvSUBmask.data[6].key | tempvmask.data[6].key;
		tempvSUBmask.data[6].value = tempvSUBmask.data[6].value | tempvmask.data[6].value;
		tempvSUBmask.data[7].key = tempvSUBmask.data[7].key | tempvmask.data[7].key;
		tempvSUBmask.data[7].value = tempvSUBmask.data[7].value | tempvmask.data[7].value;
		tempvSUBmask.data[8].key = tempvSUBmask.data[8].key | tempvmask.data[8].key;
		tempvSUBmask.data[8].value = tempvSUBmask.data[8].value | tempvmask.data[8].value;
		tempvSUBmask.data[9].key = tempvSUBmask.data[9].key | tempvmask.data[9].key;
		tempvSUBmask.data[9].value = tempvSUBmask.data[9].value | tempvmask.data[9].value;
		tempvSUBmask.data[10].key = tempvSUBmask.data[10].key | tempvmask.data[10].key;
		tempvSUBmask.data[10].value = tempvSUBmask.data[10].value | tempvmask.data[10].value;
		tempvSUBmask.data[11].key = tempvSUBmask.data[11].key | tempvmask.data[11].key;
		tempvSUBmask.data[11].value = tempvSUBmask.data[11].value | tempvmask.data[11].value;
		tempvSUBmask.data[12].key = tempvSUBmask.data[12].key | tempvmask.data[12].key;
		tempvSUBmask.data[12].value = tempvSUBmask.data[12].value | tempvmask.data[12].value;
		tempvSUBmask.data[13].key = tempvSUBmask.data[13].key | tempvmask.data[13].key;
		tempvSUBmask.data[13].value = tempvSUBmask.data[13].value | tempvmask.data[13].value;
		tempvSUBmask.data[14].key = tempvSUBmask.data[14].key | tempvmask.data[14].key;
		tempvSUBmask.data[14].value = tempvSUBmask.data[14].value | tempvmask.data[14].value;
		tempvSUBmask.data[15].key = tempvSUBmask.data[15].key | tempvmask.data[15].key;
		tempvSUBmask.data[15].value = tempvSUBmask.data[15].value | tempvmask.data[15].value;
		
		if(i % 8 == 7){ // CRITICAL AUTOMATEME.
			if(i%16==7){  // CRITICAL AUTOMATEME.
				vmask0_subp[i/16].data[0].key = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask0_subp[i/16].data[1].key = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask0_subp[i/16].data[2].key = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask0_subp[i/16].data[3].key = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask0_subp[i/16].data[4].key = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask0_subp[i/16].data[5].key = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask0_subp[i/16].data[6].key = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask0_subp[i/16].data[7].key = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask0_subp[i/16].data[8].key = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask0_subp[i/16].data[9].key = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask0_subp[i/16].data[10].key = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask0_subp[i/16].data[11].key = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask0_subp[i/16].data[12].key = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask0_subp[i/16].data[13].key = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask0_subp[i/16].data[14].key = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask0_subp[i/16].data[15].key = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			} else {
				vmask0_subp[i/16].data[0].value = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask0_subp[i/16].data[1].value = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask0_subp[i/16].data[2].value = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask0_subp[i/16].data[3].value = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask0_subp[i/16].data[4].value = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask0_subp[i/16].data[5].value = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask0_subp[i/16].data[6].value = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask0_subp[i/16].data[7].value = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask0_subp[i/16].data[8].value = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask0_subp[i/16].data[9].value = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask0_subp[i/16].data[10].value = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask0_subp[i/16].data[11].value = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask0_subp[i/16].data[12].value = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask0_subp[i/16].data[13].value = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask0_subp[i/16].data[14].value = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask0_subp[i/16].data[15].value = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			}
			if(i%16==7){  // CRITICAL AUTOMATEME.
				vmask1_subp[i/16].data[0].key = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask1_subp[i/16].data[1].key = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask1_subp[i/16].data[2].key = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask1_subp[i/16].data[3].key = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask1_subp[i/16].data[4].key = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask1_subp[i/16].data[5].key = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask1_subp[i/16].data[6].key = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask1_subp[i/16].data[7].key = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask1_subp[i/16].data[8].key = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask1_subp[i/16].data[9].key = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask1_subp[i/16].data[10].key = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask1_subp[i/16].data[11].key = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask1_subp[i/16].data[12].key = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask1_subp[i/16].data[13].key = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask1_subp[i/16].data[14].key = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask1_subp[i/16].data[15].key = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			} else {
				vmask1_subp[i/16].data[0].value = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask1_subp[i/16].data[1].value = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask1_subp[i/16].data[2].value = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask1_subp[i/16].data[3].value = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask1_subp[i/16].data[4].value = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask1_subp[i/16].data[5].value = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask1_subp[i/16].data[6].value = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask1_subp[i/16].data[7].value = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask1_subp[i/16].data[8].value = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask1_subp[i/16].data[9].value = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask1_subp[i/16].data[10].value = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask1_subp[i/16].data[11].value = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask1_subp[i/16].data[12].value = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask1_subp[i/16].data[13].value = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask1_subp[i/16].data[14].value = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask1_subp[i/16].data[15].value = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			}
			if(i%16==7){  // CRITICAL AUTOMATEME.
				vmask2_subp[i/16].data[0].key = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask2_subp[i/16].data[1].key = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask2_subp[i/16].data[2].key = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask2_subp[i/16].data[3].key = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask2_subp[i/16].data[4].key = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask2_subp[i/16].data[5].key = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask2_subp[i/16].data[6].key = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask2_subp[i/16].data[7].key = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask2_subp[i/16].data[8].key = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask2_subp[i/16].data[9].key = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask2_subp[i/16].data[10].key = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask2_subp[i/16].data[11].key = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask2_subp[i/16].data[12].key = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask2_subp[i/16].data[13].key = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask2_subp[i/16].data[14].key = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask2_subp[i/16].data[15].key = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			} else {
				vmask2_subp[i/16].data[0].value = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask2_subp[i/16].data[1].value = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask2_subp[i/16].data[2].value = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask2_subp[i/16].data[3].value = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask2_subp[i/16].data[4].value = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask2_subp[i/16].data[5].value = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask2_subp[i/16].data[6].value = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask2_subp[i/16].data[7].value = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask2_subp[i/16].data[8].value = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask2_subp[i/16].data[9].value = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask2_subp[i/16].data[10].value = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask2_subp[i/16].data[11].value = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask2_subp[i/16].data[12].value = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask2_subp[i/16].data[13].value = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask2_subp[i/16].data[14].value = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask2_subp[i/16].data[15].value = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			}
			if(i%16==7){  // CRITICAL AUTOMATEME.
				vmask3_subp[i/16].data[0].key = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask3_subp[i/16].data[1].key = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask3_subp[i/16].data[2].key = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask3_subp[i/16].data[3].key = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask3_subp[i/16].data[4].key = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask3_subp[i/16].data[5].key = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask3_subp[i/16].data[6].key = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask3_subp[i/16].data[7].key = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask3_subp[i/16].data[8].key = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask3_subp[i/16].data[9].key = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask3_subp[i/16].data[10].key = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask3_subp[i/16].data[11].key = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask3_subp[i/16].data[12].key = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask3_subp[i/16].data[13].key = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask3_subp[i/16].data[14].key = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask3_subp[i/16].data[15].key = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			} else {
				vmask3_subp[i/16].data[0].value = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask3_subp[i/16].data[1].value = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask3_subp[i/16].data[2].value = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask3_subp[i/16].data[3].value = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask3_subp[i/16].data[4].value = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask3_subp[i/16].data[5].value = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask3_subp[i/16].data[6].value = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask3_subp[i/16].data[7].value = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask3_subp[i/16].data[8].value = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask3_subp[i/16].data[9].value = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask3_subp[i/16].data[10].value = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask3_subp[i/16].data[11].value = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask3_subp[i/16].data[12].value = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask3_subp[i/16].data[13].value = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask3_subp[i/16].data[14].value = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask3_subp[i/16].data[15].value = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			}
			if(i%16==7){  // CRITICAL AUTOMATEME.
				vmask4_subp[i/16].data[0].key = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask4_subp[i/16].data[1].key = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask4_subp[i/16].data[2].key = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask4_subp[i/16].data[3].key = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask4_subp[i/16].data[4].key = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask4_subp[i/16].data[5].key = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask4_subp[i/16].data[6].key = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask4_subp[i/16].data[7].key = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask4_subp[i/16].data[8].key = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask4_subp[i/16].data[9].key = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask4_subp[i/16].data[10].key = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask4_subp[i/16].data[11].key = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask4_subp[i/16].data[12].key = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask4_subp[i/16].data[13].key = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask4_subp[i/16].data[14].key = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask4_subp[i/16].data[15].key = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			} else {
				vmask4_subp[i/16].data[0].value = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask4_subp[i/16].data[1].value = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask4_subp[i/16].data[2].value = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask4_subp[i/16].data[3].value = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask4_subp[i/16].data[4].value = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask4_subp[i/16].data[5].value = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask4_subp[i/16].data[6].value = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask4_subp[i/16].data[7].value = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask4_subp[i/16].data[8].value = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask4_subp[i/16].data[9].value = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask4_subp[i/16].data[10].value = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask4_subp[i/16].data[11].value = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask4_subp[i/16].data[12].value = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask4_subp[i/16].data[13].value = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask4_subp[i/16].data[14].value = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask4_subp[i/16].data[15].value = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			}
			if(i%16==7){  // CRITICAL AUTOMATEME.
				vmask5_subp[i/16].data[0].key = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask5_subp[i/16].data[1].key = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask5_subp[i/16].data[2].key = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask5_subp[i/16].data[3].key = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask5_subp[i/16].data[4].key = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask5_subp[i/16].data[5].key = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask5_subp[i/16].data[6].key = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask5_subp[i/16].data[7].key = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask5_subp[i/16].data[8].key = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask5_subp[i/16].data[9].key = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask5_subp[i/16].data[10].key = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask5_subp[i/16].data[11].key = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask5_subp[i/16].data[12].key = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask5_subp[i/16].data[13].key = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask5_subp[i/16].data[14].key = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask5_subp[i/16].data[15].key = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			} else {
				vmask5_subp[i/16].data[0].value = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask5_subp[i/16].data[1].value = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask5_subp[i/16].data[2].value = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask5_subp[i/16].data[3].value = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask5_subp[i/16].data[4].value = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask5_subp[i/16].data[5].value = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask5_subp[i/16].data[6].value = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask5_subp[i/16].data[7].value = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask5_subp[i/16].data[8].value = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask5_subp[i/16].data[9].value = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask5_subp[i/16].data[10].value = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask5_subp[i/16].data[11].value = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask5_subp[i/16].data[12].value = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask5_subp[i/16].data[13].value = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask5_subp[i/16].data[14].value = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask5_subp[i/16].data[15].value = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			}
			if(i%16==7){  // CRITICAL AUTOMATEME.
				vmask6_subp[i/16].data[0].key = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask6_subp[i/16].data[1].key = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask6_subp[i/16].data[2].key = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask6_subp[i/16].data[3].key = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask6_subp[i/16].data[4].key = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask6_subp[i/16].data[5].key = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask6_subp[i/16].data[6].key = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask6_subp[i/16].data[7].key = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask6_subp[i/16].data[8].key = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask6_subp[i/16].data[9].key = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask6_subp[i/16].data[10].key = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask6_subp[i/16].data[11].key = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask6_subp[i/16].data[12].key = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask6_subp[i/16].data[13].key = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask6_subp[i/16].data[14].key = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask6_subp[i/16].data[15].key = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			} else {
				vmask6_subp[i/16].data[0].value = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask6_subp[i/16].data[1].value = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask6_subp[i/16].data[2].value = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask6_subp[i/16].data[3].value = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask6_subp[i/16].data[4].value = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask6_subp[i/16].data[5].value = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask6_subp[i/16].data[6].value = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask6_subp[i/16].data[7].value = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask6_subp[i/16].data[8].value = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask6_subp[i/16].data[9].value = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask6_subp[i/16].data[10].value = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask6_subp[i/16].data[11].value = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask6_subp[i/16].data[12].value = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask6_subp[i/16].data[13].value = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask6_subp[i/16].data[14].value = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask6_subp[i/16].data[15].value = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			}
			if(i%16==7){  // CRITICAL AUTOMATEME.
				vmask7_subp[i/16].data[0].key = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask7_subp[i/16].data[1].key = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask7_subp[i/16].data[2].key = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask7_subp[i/16].data[3].key = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask7_subp[i/16].data[4].key = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask7_subp[i/16].data[5].key = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask7_subp[i/16].data[6].key = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask7_subp[i/16].data[7].key = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask7_subp[i/16].data[8].key = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask7_subp[i/16].data[9].key = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask7_subp[i/16].data[10].key = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask7_subp[i/16].data[11].key = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask7_subp[i/16].data[12].key = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask7_subp[i/16].data[13].key = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask7_subp[i/16].data[14].key = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask7_subp[i/16].data[15].key = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			} else {
				vmask7_subp[i/16].data[0].value = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask7_subp[i/16].data[1].value = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask7_subp[i/16].data[2].value = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask7_subp[i/16].data[3].value = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask7_subp[i/16].data[4].value = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask7_subp[i/16].data[5].value = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask7_subp[i/16].data[6].value = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask7_subp[i/16].data[7].value = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask7_subp[i/16].data[8].value = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask7_subp[i/16].data[9].value = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask7_subp[i/16].data[10].value = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask7_subp[i/16].data[11].value = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask7_subp[i/16].data[12].value = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask7_subp[i/16].data[13].value = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask7_subp[i/16].data[14].value = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask7_subp[i/16].data[15].value = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			}
			if(i%16==7){  // CRITICAL AUTOMATEME.
				vmask8_subp[i/16].data[0].key = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask8_subp[i/16].data[1].key = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask8_subp[i/16].data[2].key = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask8_subp[i/16].data[3].key = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask8_subp[i/16].data[4].key = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask8_subp[i/16].data[5].key = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask8_subp[i/16].data[6].key = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask8_subp[i/16].data[7].key = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask8_subp[i/16].data[8].key = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask8_subp[i/16].data[9].key = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask8_subp[i/16].data[10].key = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask8_subp[i/16].data[11].key = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask8_subp[i/16].data[12].key = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask8_subp[i/16].data[13].key = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask8_subp[i/16].data[14].key = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask8_subp[i/16].data[15].key = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			} else {
				vmask8_subp[i/16].data[0].value = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask8_subp[i/16].data[1].value = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask8_subp[i/16].data[2].value = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask8_subp[i/16].data[3].value = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask8_subp[i/16].data[4].value = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask8_subp[i/16].data[5].value = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask8_subp[i/16].data[6].value = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask8_subp[i/16].data[7].value = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask8_subp[i/16].data[8].value = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask8_subp[i/16].data[9].value = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask8_subp[i/16].data[10].value = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask8_subp[i/16].data[11].value = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask8_subp[i/16].data[12].value = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask8_subp[i/16].data[13].value = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask8_subp[i/16].data[14].value = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask8_subp[i/16].data[15].value = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			}
			if(i%16==7){  // CRITICAL AUTOMATEME.
				vmask9_subp[i/16].data[0].key = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask9_subp[i/16].data[1].key = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask9_subp[i/16].data[2].key = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask9_subp[i/16].data[3].key = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask9_subp[i/16].data[4].key = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask9_subp[i/16].data[5].key = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask9_subp[i/16].data[6].key = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask9_subp[i/16].data[7].key = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask9_subp[i/16].data[8].key = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask9_subp[i/16].data[9].key = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask9_subp[i/16].data[10].key = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask9_subp[i/16].data[11].key = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask9_subp[i/16].data[12].key = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask9_subp[i/16].data[13].key = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask9_subp[i/16].data[14].key = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask9_subp[i/16].data[15].key = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			} else {
				vmask9_subp[i/16].data[0].value = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask9_subp[i/16].data[1].value = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask9_subp[i/16].data[2].value = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask9_subp[i/16].data[3].value = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask9_subp[i/16].data[4].value = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask9_subp[i/16].data[5].value = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask9_subp[i/16].data[6].value = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask9_subp[i/16].data[7].value = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask9_subp[i/16].data[8].value = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask9_subp[i/16].data[9].value = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask9_subp[i/16].data[10].value = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask9_subp[i/16].data[11].value = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask9_subp[i/16].data[12].value = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask9_subp[i/16].data[13].value = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask9_subp[i/16].data[14].value = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask9_subp[i/16].data[15].value = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			}
			if(i%16==7){  // CRITICAL AUTOMATEME.
				vmask10_subp[i/16].data[0].key = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask10_subp[i/16].data[1].key = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask10_subp[i/16].data[2].key = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask10_subp[i/16].data[3].key = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask10_subp[i/16].data[4].key = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask10_subp[i/16].data[5].key = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask10_subp[i/16].data[6].key = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask10_subp[i/16].data[7].key = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask10_subp[i/16].data[8].key = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask10_subp[i/16].data[9].key = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask10_subp[i/16].data[10].key = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask10_subp[i/16].data[11].key = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask10_subp[i/16].data[12].key = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask10_subp[i/16].data[13].key = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask10_subp[i/16].data[14].key = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask10_subp[i/16].data[15].key = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			} else {
				vmask10_subp[i/16].data[0].value = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask10_subp[i/16].data[1].value = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask10_subp[i/16].data[2].value = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask10_subp[i/16].data[3].value = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask10_subp[i/16].data[4].value = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask10_subp[i/16].data[5].value = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask10_subp[i/16].data[6].value = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask10_subp[i/16].data[7].value = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask10_subp[i/16].data[8].value = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask10_subp[i/16].data[9].value = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask10_subp[i/16].data[10].value = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask10_subp[i/16].data[11].value = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask10_subp[i/16].data[12].value = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask10_subp[i/16].data[13].value = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask10_subp[i/16].data[14].value = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask10_subp[i/16].data[15].value = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			}
			
			tempvSUBmask.data[0].key = 0;
			tempvSUBmask.data[0].value = 0;
			tempvSUBmask.data[1].key = 0;
			tempvSUBmask.data[1].value = 0;
			tempvSUBmask.data[2].key = 0;
			tempvSUBmask.data[2].value = 0;
			tempvSUBmask.data[3].key = 0;
			tempvSUBmask.data[3].value = 0;
			tempvSUBmask.data[4].key = 0;
			tempvSUBmask.data[4].value = 0;
			tempvSUBmask.data[5].key = 0;
			tempvSUBmask.data[5].value = 0;
			tempvSUBmask.data[6].key = 0;
			tempvSUBmask.data[6].value = 0;
			tempvSUBmask.data[7].key = 0;
			tempvSUBmask.data[7].value = 0;
			tempvSUBmask.data[8].key = 0;
			tempvSUBmask.data[8].value = 0;
			tempvSUBmask.data[9].key = 0;
			tempvSUBmask.data[9].value = 0;
			tempvSUBmask.data[10].key = 0;
			tempvSUBmask.data[10].value = 0;
			tempvSUBmask.data[11].key = 0;
			tempvSUBmask.data[11].value = 0;
			tempvSUBmask.data[12].key = 0;
			tempvSUBmask.data[12].value = 0;
			tempvSUBmask.data[13].key = 0;
			tempvSUBmask.data[13].value = 0;
			tempvSUBmask.data[14].key = 0;
			tempvSUBmask.data[14].value = 0;
			tempvSUBmask.data[15].key = 0;
			tempvSUBmask.data[15].value = 0;
		}
		
		/* if(i % SUBPMASKFACTOR == SUBPMASKFACTOR-1){ // CRITICAL AUTOMATEME.
			if(i%16==7){  // CRITICAL AUTOMATEME.
				vmask0_subp[i/SUBPMASKFACTOR].data[0].key = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[1].key = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[2].key = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[3].key = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[4].key = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[5].key = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[6].key = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[7].key = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[8].key = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[9].key = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[10].key = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[11].key = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[12].key = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[13].key = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[14].key = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[15].key = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			} else {
				vmask0_subp[i/SUBPMASKFACTOR].data[0].value = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[1].value = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[2].value = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[3].value = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[4].value = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[5].value = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[6].value = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[7].value = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[8].value = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[9].value = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[10].value = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[11].value = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[12].value = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[13].value = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[14].value = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[15].value = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			}
			if(i%16==7){  // CRITICAL AUTOMATEME.
				vmask1_subp[i/SUBPMASKFACTOR].data[0].key = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[1].key = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[2].key = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[3].key = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[4].key = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[5].key = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[6].key = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[7].key = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[8].key = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[9].key = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[10].key = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[11].key = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[12].key = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[13].key = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[14].key = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[15].key = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			} else {
				vmask1_subp[i/SUBPMASKFACTOR].data[0].value = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[1].value = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[2].value = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[3].value = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[4].value = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[5].value = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[6].value = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[7].value = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[8].value = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[9].value = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[10].value = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[11].value = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[12].value = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[13].value = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[14].value = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[15].value = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			}
			if(i%16==7){  // CRITICAL AUTOMATEME.
				vmask2_subp[i/SUBPMASKFACTOR].data[0].key = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[1].key = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[2].key = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[3].key = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[4].key = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[5].key = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[6].key = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[7].key = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[8].key = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[9].key = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[10].key = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[11].key = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[12].key = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[13].key = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[14].key = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[15].key = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			} else {
				vmask2_subp[i/SUBPMASKFACTOR].data[0].value = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[1].value = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[2].value = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[3].value = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[4].value = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[5].value = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[6].value = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[7].value = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[8].value = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[9].value = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[10].value = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[11].value = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[12].value = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[13].value = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[14].value = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[15].value = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			}
			if(i%16==7){  // CRITICAL AUTOMATEME.
				vmask3_subp[i/SUBPMASKFACTOR].data[0].key = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[1].key = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[2].key = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[3].key = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[4].key = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[5].key = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[6].key = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[7].key = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[8].key = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[9].key = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[10].key = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[11].key = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[12].key = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[13].key = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[14].key = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[15].key = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			} else {
				vmask3_subp[i/SUBPMASKFACTOR].data[0].value = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[1].value = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[2].value = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[3].value = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[4].value = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[5].value = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[6].value = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[7].value = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[8].value = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[9].value = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[10].value = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[11].value = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[12].value = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[13].value = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[14].value = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[15].value = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			}
			if(i%16==7){  // CRITICAL AUTOMATEME.
				vmask4_subp[i/SUBPMASKFACTOR].data[0].key = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[1].key = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[2].key = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[3].key = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[4].key = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[5].key = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[6].key = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[7].key = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[8].key = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[9].key = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[10].key = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[11].key = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[12].key = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[13].key = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[14].key = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[15].key = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			} else {
				vmask4_subp[i/SUBPMASKFACTOR].data[0].value = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[1].value = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[2].value = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[3].value = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[4].value = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[5].value = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[6].value = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[7].value = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[8].value = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[9].value = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[10].value = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[11].value = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[12].value = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[13].value = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[14].value = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[15].value = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			}
			if(i%16==7){  // CRITICAL AUTOMATEME.
				vmask5_subp[i/SUBPMASKFACTOR].data[0].key = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[1].key = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[2].key = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[3].key = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[4].key = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[5].key = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[6].key = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[7].key = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[8].key = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[9].key = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[10].key = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[11].key = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[12].key = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[13].key = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[14].key = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[15].key = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			} else {
				vmask5_subp[i/SUBPMASKFACTOR].data[0].value = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[1].value = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[2].value = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[3].value = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[4].value = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[5].value = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[6].value = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[7].value = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[8].value = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[9].value = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[10].value = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[11].value = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[12].value = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[13].value = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[14].value = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[15].value = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			}
			if(i%16==7){  // CRITICAL AUTOMATEME.
				vmask6_subp[i/SUBPMASKFACTOR].data[0].key = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask6_subp[i/SUBPMASKFACTOR].data[1].key = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask6_subp[i/SUBPMASKFACTOR].data[2].key = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask6_subp[i/SUBPMASKFACTOR].data[3].key = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask6_subp[i/SUBPMASKFACTOR].data[4].key = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask6_subp[i/SUBPMASKFACTOR].data[5].key = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask6_subp[i/SUBPMASKFACTOR].data[6].key = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask6_subp[i/SUBPMASKFACTOR].data[7].key = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask6_subp[i/SUBPMASKFACTOR].data[8].key = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask6_subp[i/SUBPMASKFACTOR].data[9].key = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask6_subp[i/SUBPMASKFACTOR].data[10].key = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask6_subp[i/SUBPMASKFACTOR].data[11].key = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask6_subp[i/SUBPMASKFACTOR].data[12].key = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask6_subp[i/SUBPMASKFACTOR].data[13].key = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask6_subp[i/SUBPMASKFACTOR].data[14].key = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask6_subp[i/SUBPMASKFACTOR].data[15].key = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			} else {
				vmask6_subp[i/SUBPMASKFACTOR].data[0].value = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask6_subp[i/SUBPMASKFACTOR].data[1].value = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask6_subp[i/SUBPMASKFACTOR].data[2].value = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask6_subp[i/SUBPMASKFACTOR].data[3].value = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask6_subp[i/SUBPMASKFACTOR].data[4].value = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask6_subp[i/SUBPMASKFACTOR].data[5].value = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask6_subp[i/SUBPMASKFACTOR].data[6].value = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask6_subp[i/SUBPMASKFACTOR].data[7].value = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask6_subp[i/SUBPMASKFACTOR].data[8].value = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask6_subp[i/SUBPMASKFACTOR].data[9].value = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask6_subp[i/SUBPMASKFACTOR].data[10].value = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask6_subp[i/SUBPMASKFACTOR].data[11].value = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask6_subp[i/SUBPMASKFACTOR].data[12].value = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask6_subp[i/SUBPMASKFACTOR].data[13].value = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask6_subp[i/SUBPMASKFACTOR].data[14].value = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask6_subp[i/SUBPMASKFACTOR].data[15].value = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			}
			if(i%16==7){  // CRITICAL AUTOMATEME.
				vmask7_subp[i/SUBPMASKFACTOR].data[0].key = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask7_subp[i/SUBPMASKFACTOR].data[1].key = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask7_subp[i/SUBPMASKFACTOR].data[2].key = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask7_subp[i/SUBPMASKFACTOR].data[3].key = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask7_subp[i/SUBPMASKFACTOR].data[4].key = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask7_subp[i/SUBPMASKFACTOR].data[5].key = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask7_subp[i/SUBPMASKFACTOR].data[6].key = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask7_subp[i/SUBPMASKFACTOR].data[7].key = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask7_subp[i/SUBPMASKFACTOR].data[8].key = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask7_subp[i/SUBPMASKFACTOR].data[9].key = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask7_subp[i/SUBPMASKFACTOR].data[10].key = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask7_subp[i/SUBPMASKFACTOR].data[11].key = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask7_subp[i/SUBPMASKFACTOR].data[12].key = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask7_subp[i/SUBPMASKFACTOR].data[13].key = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask7_subp[i/SUBPMASKFACTOR].data[14].key = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask7_subp[i/SUBPMASKFACTOR].data[15].key = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			} else {
				vmask7_subp[i/SUBPMASKFACTOR].data[0].value = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask7_subp[i/SUBPMASKFACTOR].data[1].value = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask7_subp[i/SUBPMASKFACTOR].data[2].value = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask7_subp[i/SUBPMASKFACTOR].data[3].value = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask7_subp[i/SUBPMASKFACTOR].data[4].value = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask7_subp[i/SUBPMASKFACTOR].data[5].value = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask7_subp[i/SUBPMASKFACTOR].data[6].value = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask7_subp[i/SUBPMASKFACTOR].data[7].value = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask7_subp[i/SUBPMASKFACTOR].data[8].value = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask7_subp[i/SUBPMASKFACTOR].data[9].value = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask7_subp[i/SUBPMASKFACTOR].data[10].value = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask7_subp[i/SUBPMASKFACTOR].data[11].value = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask7_subp[i/SUBPMASKFACTOR].data[12].value = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask7_subp[i/SUBPMASKFACTOR].data[13].value = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask7_subp[i/SUBPMASKFACTOR].data[14].value = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask7_subp[i/SUBPMASKFACTOR].data[15].value = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			}
			if(i%16==7){  // CRITICAL AUTOMATEME.
				vmask8_subp[i/SUBPMASKFACTOR].data[0].key = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask8_subp[i/SUBPMASKFACTOR].data[1].key = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask8_subp[i/SUBPMASKFACTOR].data[2].key = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask8_subp[i/SUBPMASKFACTOR].data[3].key = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask8_subp[i/SUBPMASKFACTOR].data[4].key = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask8_subp[i/SUBPMASKFACTOR].data[5].key = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask8_subp[i/SUBPMASKFACTOR].data[6].key = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask8_subp[i/SUBPMASKFACTOR].data[7].key = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask8_subp[i/SUBPMASKFACTOR].data[8].key = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask8_subp[i/SUBPMASKFACTOR].data[9].key = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask8_subp[i/SUBPMASKFACTOR].data[10].key = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask8_subp[i/SUBPMASKFACTOR].data[11].key = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask8_subp[i/SUBPMASKFACTOR].data[12].key = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask8_subp[i/SUBPMASKFACTOR].data[13].key = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask8_subp[i/SUBPMASKFACTOR].data[14].key = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask8_subp[i/SUBPMASKFACTOR].data[15].key = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			} else {
				vmask8_subp[i/SUBPMASKFACTOR].data[0].value = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask8_subp[i/SUBPMASKFACTOR].data[1].value = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask8_subp[i/SUBPMASKFACTOR].data[2].value = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask8_subp[i/SUBPMASKFACTOR].data[3].value = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask8_subp[i/SUBPMASKFACTOR].data[4].value = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask8_subp[i/SUBPMASKFACTOR].data[5].value = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask8_subp[i/SUBPMASKFACTOR].data[6].value = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask8_subp[i/SUBPMASKFACTOR].data[7].value = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask8_subp[i/SUBPMASKFACTOR].data[8].value = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask8_subp[i/SUBPMASKFACTOR].data[9].value = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask8_subp[i/SUBPMASKFACTOR].data[10].value = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask8_subp[i/SUBPMASKFACTOR].data[11].value = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask8_subp[i/SUBPMASKFACTOR].data[12].value = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask8_subp[i/SUBPMASKFACTOR].data[13].value = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask8_subp[i/SUBPMASKFACTOR].data[14].value = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask8_subp[i/SUBPMASKFACTOR].data[15].value = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			}
			if(i%16==7){  // CRITICAL AUTOMATEME.
				vmask9_subp[i/SUBPMASKFACTOR].data[0].key = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask9_subp[i/SUBPMASKFACTOR].data[1].key = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask9_subp[i/SUBPMASKFACTOR].data[2].key = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask9_subp[i/SUBPMASKFACTOR].data[3].key = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask9_subp[i/SUBPMASKFACTOR].data[4].key = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask9_subp[i/SUBPMASKFACTOR].data[5].key = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask9_subp[i/SUBPMASKFACTOR].data[6].key = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask9_subp[i/SUBPMASKFACTOR].data[7].key = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask9_subp[i/SUBPMASKFACTOR].data[8].key = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask9_subp[i/SUBPMASKFACTOR].data[9].key = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask9_subp[i/SUBPMASKFACTOR].data[10].key = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask9_subp[i/SUBPMASKFACTOR].data[11].key = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask9_subp[i/SUBPMASKFACTOR].data[12].key = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask9_subp[i/SUBPMASKFACTOR].data[13].key = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask9_subp[i/SUBPMASKFACTOR].data[14].key = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask9_subp[i/SUBPMASKFACTOR].data[15].key = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			} else {
				vmask9_subp[i/SUBPMASKFACTOR].data[0].value = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask9_subp[i/SUBPMASKFACTOR].data[1].value = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask9_subp[i/SUBPMASKFACTOR].data[2].value = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask9_subp[i/SUBPMASKFACTOR].data[3].value = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask9_subp[i/SUBPMASKFACTOR].data[4].value = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask9_subp[i/SUBPMASKFACTOR].data[5].value = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask9_subp[i/SUBPMASKFACTOR].data[6].value = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask9_subp[i/SUBPMASKFACTOR].data[7].value = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask9_subp[i/SUBPMASKFACTOR].data[8].value = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask9_subp[i/SUBPMASKFACTOR].data[9].value = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask9_subp[i/SUBPMASKFACTOR].data[10].value = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask9_subp[i/SUBPMASKFACTOR].data[11].value = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask9_subp[i/SUBPMASKFACTOR].data[12].value = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask9_subp[i/SUBPMASKFACTOR].data[13].value = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask9_subp[i/SUBPMASKFACTOR].data[14].value = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask9_subp[i/SUBPMASKFACTOR].data[15].value = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			}
			if(i%16==7){  // CRITICAL AUTOMATEME.
				vmask10_subp[i/SUBPMASKFACTOR].data[0].key = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask10_subp[i/SUBPMASKFACTOR].data[1].key = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask10_subp[i/SUBPMASKFACTOR].data[2].key = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask10_subp[i/SUBPMASKFACTOR].data[3].key = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask10_subp[i/SUBPMASKFACTOR].data[4].key = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask10_subp[i/SUBPMASKFACTOR].data[5].key = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask10_subp[i/SUBPMASKFACTOR].data[6].key = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask10_subp[i/SUBPMASKFACTOR].data[7].key = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask10_subp[i/SUBPMASKFACTOR].data[8].key = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask10_subp[i/SUBPMASKFACTOR].data[9].key = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask10_subp[i/SUBPMASKFACTOR].data[10].key = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask10_subp[i/SUBPMASKFACTOR].data[11].key = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask10_subp[i/SUBPMASKFACTOR].data[12].key = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask10_subp[i/SUBPMASKFACTOR].data[13].key = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask10_subp[i/SUBPMASKFACTOR].data[14].key = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask10_subp[i/SUBPMASKFACTOR].data[15].key = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			} else {
				vmask10_subp[i/SUBPMASKFACTOR].data[0].value = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask10_subp[i/SUBPMASKFACTOR].data[1].value = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask10_subp[i/SUBPMASKFACTOR].data[2].value = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask10_subp[i/SUBPMASKFACTOR].data[3].value = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask10_subp[i/SUBPMASKFACTOR].data[4].value = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask10_subp[i/SUBPMASKFACTOR].data[5].value = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask10_subp[i/SUBPMASKFACTOR].data[6].value = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask10_subp[i/SUBPMASKFACTOR].data[7].value = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask10_subp[i/SUBPMASKFACTOR].data[8].value = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask10_subp[i/SUBPMASKFACTOR].data[9].value = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask10_subp[i/SUBPMASKFACTOR].data[10].value = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask10_subp[i/SUBPMASKFACTOR].data[11].value = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask10_subp[i/SUBPMASKFACTOR].data[12].value = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask10_subp[i/SUBPMASKFACTOR].data[13].value = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask10_subp[i/SUBPMASKFACTOR].data[14].value = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask10_subp[i/SUBPMASKFACTOR].data[15].value = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			}
			
			tempvSUBmask.data[0].key = 0;
			tempvSUBmask.data[0].value = 0;
			tempvSUBmask.data[1].key = 0;
			tempvSUBmask.data[1].value = 0;
			tempvSUBmask.data[2].key = 0;
			tempvSUBmask.data[2].value = 0;
			tempvSUBmask.data[3].key = 0;
			tempvSUBmask.data[3].value = 0;
			tempvSUBmask.data[4].key = 0;
			tempvSUBmask.data[4].value = 0;
			tempvSUBmask.data[5].key = 0;
			tempvSUBmask.data[5].value = 0;
			tempvSUBmask.data[6].key = 0;
			tempvSUBmask.data[6].value = 0;
			tempvSUBmask.data[7].key = 0;
			tempvSUBmask.data[7].value = 0;
			tempvSUBmask.data[8].key = 0;
			tempvSUBmask.data[8].value = 0;
			tempvSUBmask.data[9].key = 0;
			tempvSUBmask.data[9].value = 0;
			tempvSUBmask.data[10].key = 0;
			tempvSUBmask.data[10].value = 0;
			tempvSUBmask.data[11].key = 0;
			tempvSUBmask.data[11].value = 0;
			tempvSUBmask.data[12].key = 0;
			tempvSUBmask.data[12].value = 0;
			tempvSUBmask.data[13].key = 0;
			tempvSUBmask.data[13].value = 0;
			tempvSUBmask.data[14].key = 0;
			tempvSUBmask.data[14].value = 0;
			tempvSUBmask.data[15].key = 0;
			tempvSUBmask.data[15].value = 0;
		} */
		#endif 
	}
	return;
}
void //
	#ifdef SW 
	actsproc::
	#endif 
loadmany12vmasks_subp(bool_type enable, unitBRAMwidth_type vmask0[BLOCKRAM_SIZE], unitBRAMwidth_type vmask0_subp[BLOCKRAM_SIZE],unitBRAMwidth_type vmask1_subp[BLOCKRAM_SIZE],unitBRAMwidth_type vmask2_subp[BLOCKRAM_SIZE],unitBRAMwidth_type vmask3_subp[BLOCKRAM_SIZE],unitBRAMwidth_type vmask4_subp[BLOCKRAM_SIZE],unitBRAMwidth_type vmask5_subp[BLOCKRAM_SIZE],unitBRAMwidth_type vmask6_subp[BLOCKRAM_SIZE],unitBRAMwidth_type vmask7_subp[BLOCKRAM_SIZE],unitBRAMwidth_type vmask8_subp[BLOCKRAM_SIZE],unitBRAMwidth_type vmask9_subp[BLOCKRAM_SIZE],unitBRAMwidth_type vmask10_subp[BLOCKRAM_SIZE],unitBRAMwidth_type vmask11_subp[BLOCKRAM_SIZE], buffer_type size_kvs){
	if(enable == OFF){ return; }
	analysis_type analysis_loopcount1 = BLOCKRAM_SIZE;
	analysis_type analysis_loopcount2 = BLOCKRAM_SIZE / 16;
	analysis_type analysis_loopcount3 = BLOCKRAM_SIZE;
	
	buffer_type transfsize = size_kvs * 16;

	unitBRAMwidth_type tempvmask;
	#pragma HLS DATA_PACK variable = tempvmask	
	unitBRAMwidth_type tempvSUBmask;
	#pragma HLS DATA_PACK variable = tempvSUBmask		
	tempvSUBmask.data[0].key = 0;
	tempvSUBmask.data[0].value = 0;
	tempvSUBmask.data[1].key = 0;
	tempvSUBmask.data[1].value = 0;
	tempvSUBmask.data[2].key = 0;
	tempvSUBmask.data[2].value = 0;
	tempvSUBmask.data[3].key = 0;
	tempvSUBmask.data[3].value = 0;
	tempvSUBmask.data[4].key = 0;
	tempvSUBmask.data[4].value = 0;
	tempvSUBmask.data[5].key = 0;
	tempvSUBmask.data[5].value = 0;
	tempvSUBmask.data[6].key = 0;
	tempvSUBmask.data[6].value = 0;
	tempvSUBmask.data[7].key = 0;
	tempvSUBmask.data[7].value = 0;
	tempvSUBmask.data[8].key = 0;
	tempvSUBmask.data[8].value = 0;
	tempvSUBmask.data[9].key = 0;
	tempvSUBmask.data[9].value = 0;
	tempvSUBmask.data[10].key = 0;
	tempvSUBmask.data[10].value = 0;
	tempvSUBmask.data[11].key = 0;
	tempvSUBmask.data[11].value = 0;
	tempvSUBmask.data[12].key = 0;
	tempvSUBmask.data[12].value = 0;
	tempvSUBmask.data[13].key = 0;
	tempvSUBmask.data[13].value = 0;
	tempvSUBmask.data[14].key = 0;
	tempvSUBmask.data[14].value = 0;
	tempvSUBmask.data[15].key = 0;
	tempvSUBmask.data[15].value = 0;
	LOADVMASKSSUBP_LOOP2: for (buffer_type i=0; i<transfsize; i++){ // transfsize, reducebuffersz
	#pragma HLS LOOP_TRIPCOUNT min=0 max=analysis_loopcount3 avg=analysis_loopcount3
	#pragma HLS PIPELINE II=2
		
		tempvmask = vmask0[i];
		
		// subp mask 
		#ifdef ENABLE_SUBVMASKING
		tempvSUBmask.data[0].key = tempvSUBmask.data[0].key | tempvmask.data[0].key;
		tempvSUBmask.data[0].value = tempvSUBmask.data[0].value | tempvmask.data[0].value;
		tempvSUBmask.data[1].key = tempvSUBmask.data[1].key | tempvmask.data[1].key;
		tempvSUBmask.data[1].value = tempvSUBmask.data[1].value | tempvmask.data[1].value;
		tempvSUBmask.data[2].key = tempvSUBmask.data[2].key | tempvmask.data[2].key;
		tempvSUBmask.data[2].value = tempvSUBmask.data[2].value | tempvmask.data[2].value;
		tempvSUBmask.data[3].key = tempvSUBmask.data[3].key | tempvmask.data[3].key;
		tempvSUBmask.data[3].value = tempvSUBmask.data[3].value | tempvmask.data[3].value;
		tempvSUBmask.data[4].key = tempvSUBmask.data[4].key | tempvmask.data[4].key;
		tempvSUBmask.data[4].value = tempvSUBmask.data[4].value | tempvmask.data[4].value;
		tempvSUBmask.data[5].key = tempvSUBmask.data[5].key | tempvmask.data[5].key;
		tempvSUBmask.data[5].value = tempvSUBmask.data[5].value | tempvmask.data[5].value;
		tempvSUBmask.data[6].key = tempvSUBmask.data[6].key | tempvmask.data[6].key;
		tempvSUBmask.data[6].value = tempvSUBmask.data[6].value | tempvmask.data[6].value;
		tempvSUBmask.data[7].key = tempvSUBmask.data[7].key | tempvmask.data[7].key;
		tempvSUBmask.data[7].value = tempvSUBmask.data[7].value | tempvmask.data[7].value;
		tempvSUBmask.data[8].key = tempvSUBmask.data[8].key | tempvmask.data[8].key;
		tempvSUBmask.data[8].value = tempvSUBmask.data[8].value | tempvmask.data[8].value;
		tempvSUBmask.data[9].key = tempvSUBmask.data[9].key | tempvmask.data[9].key;
		tempvSUBmask.data[9].value = tempvSUBmask.data[9].value | tempvmask.data[9].value;
		tempvSUBmask.data[10].key = tempvSUBmask.data[10].key | tempvmask.data[10].key;
		tempvSUBmask.data[10].value = tempvSUBmask.data[10].value | tempvmask.data[10].value;
		tempvSUBmask.data[11].key = tempvSUBmask.data[11].key | tempvmask.data[11].key;
		tempvSUBmask.data[11].value = tempvSUBmask.data[11].value | tempvmask.data[11].value;
		tempvSUBmask.data[12].key = tempvSUBmask.data[12].key | tempvmask.data[12].key;
		tempvSUBmask.data[12].value = tempvSUBmask.data[12].value | tempvmask.data[12].value;
		tempvSUBmask.data[13].key = tempvSUBmask.data[13].key | tempvmask.data[13].key;
		tempvSUBmask.data[13].value = tempvSUBmask.data[13].value | tempvmask.data[13].value;
		tempvSUBmask.data[14].key = tempvSUBmask.data[14].key | tempvmask.data[14].key;
		tempvSUBmask.data[14].value = tempvSUBmask.data[14].value | tempvmask.data[14].value;
		tempvSUBmask.data[15].key = tempvSUBmask.data[15].key | tempvmask.data[15].key;
		tempvSUBmask.data[15].value = tempvSUBmask.data[15].value | tempvmask.data[15].value;
		
		if(i % 8 == 7){ // CRITICAL AUTOMATEME.
			if(i%16==7){  // CRITICAL AUTOMATEME.
				vmask0_subp[i/16].data[0].key = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask0_subp[i/16].data[1].key = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask0_subp[i/16].data[2].key = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask0_subp[i/16].data[3].key = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask0_subp[i/16].data[4].key = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask0_subp[i/16].data[5].key = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask0_subp[i/16].data[6].key = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask0_subp[i/16].data[7].key = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask0_subp[i/16].data[8].key = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask0_subp[i/16].data[9].key = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask0_subp[i/16].data[10].key = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask0_subp[i/16].data[11].key = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask0_subp[i/16].data[12].key = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask0_subp[i/16].data[13].key = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask0_subp[i/16].data[14].key = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask0_subp[i/16].data[15].key = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			} else {
				vmask0_subp[i/16].data[0].value = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask0_subp[i/16].data[1].value = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask0_subp[i/16].data[2].value = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask0_subp[i/16].data[3].value = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask0_subp[i/16].data[4].value = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask0_subp[i/16].data[5].value = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask0_subp[i/16].data[6].value = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask0_subp[i/16].data[7].value = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask0_subp[i/16].data[8].value = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask0_subp[i/16].data[9].value = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask0_subp[i/16].data[10].value = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask0_subp[i/16].data[11].value = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask0_subp[i/16].data[12].value = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask0_subp[i/16].data[13].value = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask0_subp[i/16].data[14].value = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask0_subp[i/16].data[15].value = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			}
			if(i%16==7){  // CRITICAL AUTOMATEME.
				vmask1_subp[i/16].data[0].key = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask1_subp[i/16].data[1].key = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask1_subp[i/16].data[2].key = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask1_subp[i/16].data[3].key = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask1_subp[i/16].data[4].key = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask1_subp[i/16].data[5].key = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask1_subp[i/16].data[6].key = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask1_subp[i/16].data[7].key = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask1_subp[i/16].data[8].key = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask1_subp[i/16].data[9].key = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask1_subp[i/16].data[10].key = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask1_subp[i/16].data[11].key = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask1_subp[i/16].data[12].key = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask1_subp[i/16].data[13].key = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask1_subp[i/16].data[14].key = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask1_subp[i/16].data[15].key = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			} else {
				vmask1_subp[i/16].data[0].value = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask1_subp[i/16].data[1].value = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask1_subp[i/16].data[2].value = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask1_subp[i/16].data[3].value = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask1_subp[i/16].data[4].value = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask1_subp[i/16].data[5].value = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask1_subp[i/16].data[6].value = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask1_subp[i/16].data[7].value = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask1_subp[i/16].data[8].value = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask1_subp[i/16].data[9].value = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask1_subp[i/16].data[10].value = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask1_subp[i/16].data[11].value = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask1_subp[i/16].data[12].value = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask1_subp[i/16].data[13].value = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask1_subp[i/16].data[14].value = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask1_subp[i/16].data[15].value = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			}
			if(i%16==7){  // CRITICAL AUTOMATEME.
				vmask2_subp[i/16].data[0].key = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask2_subp[i/16].data[1].key = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask2_subp[i/16].data[2].key = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask2_subp[i/16].data[3].key = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask2_subp[i/16].data[4].key = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask2_subp[i/16].data[5].key = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask2_subp[i/16].data[6].key = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask2_subp[i/16].data[7].key = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask2_subp[i/16].data[8].key = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask2_subp[i/16].data[9].key = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask2_subp[i/16].data[10].key = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask2_subp[i/16].data[11].key = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask2_subp[i/16].data[12].key = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask2_subp[i/16].data[13].key = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask2_subp[i/16].data[14].key = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask2_subp[i/16].data[15].key = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			} else {
				vmask2_subp[i/16].data[0].value = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask2_subp[i/16].data[1].value = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask2_subp[i/16].data[2].value = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask2_subp[i/16].data[3].value = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask2_subp[i/16].data[4].value = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask2_subp[i/16].data[5].value = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask2_subp[i/16].data[6].value = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask2_subp[i/16].data[7].value = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask2_subp[i/16].data[8].value = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask2_subp[i/16].data[9].value = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask2_subp[i/16].data[10].value = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask2_subp[i/16].data[11].value = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask2_subp[i/16].data[12].value = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask2_subp[i/16].data[13].value = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask2_subp[i/16].data[14].value = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask2_subp[i/16].data[15].value = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			}
			if(i%16==7){  // CRITICAL AUTOMATEME.
				vmask3_subp[i/16].data[0].key = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask3_subp[i/16].data[1].key = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask3_subp[i/16].data[2].key = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask3_subp[i/16].data[3].key = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask3_subp[i/16].data[4].key = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask3_subp[i/16].data[5].key = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask3_subp[i/16].data[6].key = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask3_subp[i/16].data[7].key = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask3_subp[i/16].data[8].key = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask3_subp[i/16].data[9].key = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask3_subp[i/16].data[10].key = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask3_subp[i/16].data[11].key = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask3_subp[i/16].data[12].key = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask3_subp[i/16].data[13].key = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask3_subp[i/16].data[14].key = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask3_subp[i/16].data[15].key = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			} else {
				vmask3_subp[i/16].data[0].value = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask3_subp[i/16].data[1].value = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask3_subp[i/16].data[2].value = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask3_subp[i/16].data[3].value = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask3_subp[i/16].data[4].value = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask3_subp[i/16].data[5].value = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask3_subp[i/16].data[6].value = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask3_subp[i/16].data[7].value = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask3_subp[i/16].data[8].value = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask3_subp[i/16].data[9].value = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask3_subp[i/16].data[10].value = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask3_subp[i/16].data[11].value = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask3_subp[i/16].data[12].value = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask3_subp[i/16].data[13].value = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask3_subp[i/16].data[14].value = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask3_subp[i/16].data[15].value = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			}
			if(i%16==7){  // CRITICAL AUTOMATEME.
				vmask4_subp[i/16].data[0].key = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask4_subp[i/16].data[1].key = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask4_subp[i/16].data[2].key = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask4_subp[i/16].data[3].key = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask4_subp[i/16].data[4].key = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask4_subp[i/16].data[5].key = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask4_subp[i/16].data[6].key = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask4_subp[i/16].data[7].key = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask4_subp[i/16].data[8].key = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask4_subp[i/16].data[9].key = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask4_subp[i/16].data[10].key = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask4_subp[i/16].data[11].key = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask4_subp[i/16].data[12].key = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask4_subp[i/16].data[13].key = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask4_subp[i/16].data[14].key = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask4_subp[i/16].data[15].key = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			} else {
				vmask4_subp[i/16].data[0].value = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask4_subp[i/16].data[1].value = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask4_subp[i/16].data[2].value = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask4_subp[i/16].data[3].value = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask4_subp[i/16].data[4].value = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask4_subp[i/16].data[5].value = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask4_subp[i/16].data[6].value = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask4_subp[i/16].data[7].value = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask4_subp[i/16].data[8].value = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask4_subp[i/16].data[9].value = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask4_subp[i/16].data[10].value = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask4_subp[i/16].data[11].value = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask4_subp[i/16].data[12].value = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask4_subp[i/16].data[13].value = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask4_subp[i/16].data[14].value = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask4_subp[i/16].data[15].value = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			}
			if(i%16==7){  // CRITICAL AUTOMATEME.
				vmask5_subp[i/16].data[0].key = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask5_subp[i/16].data[1].key = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask5_subp[i/16].data[2].key = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask5_subp[i/16].data[3].key = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask5_subp[i/16].data[4].key = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask5_subp[i/16].data[5].key = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask5_subp[i/16].data[6].key = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask5_subp[i/16].data[7].key = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask5_subp[i/16].data[8].key = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask5_subp[i/16].data[9].key = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask5_subp[i/16].data[10].key = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask5_subp[i/16].data[11].key = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask5_subp[i/16].data[12].key = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask5_subp[i/16].data[13].key = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask5_subp[i/16].data[14].key = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask5_subp[i/16].data[15].key = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			} else {
				vmask5_subp[i/16].data[0].value = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask5_subp[i/16].data[1].value = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask5_subp[i/16].data[2].value = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask5_subp[i/16].data[3].value = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask5_subp[i/16].data[4].value = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask5_subp[i/16].data[5].value = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask5_subp[i/16].data[6].value = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask5_subp[i/16].data[7].value = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask5_subp[i/16].data[8].value = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask5_subp[i/16].data[9].value = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask5_subp[i/16].data[10].value = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask5_subp[i/16].data[11].value = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask5_subp[i/16].data[12].value = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask5_subp[i/16].data[13].value = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask5_subp[i/16].data[14].value = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask5_subp[i/16].data[15].value = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			}
			if(i%16==7){  // CRITICAL AUTOMATEME.
				vmask6_subp[i/16].data[0].key = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask6_subp[i/16].data[1].key = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask6_subp[i/16].data[2].key = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask6_subp[i/16].data[3].key = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask6_subp[i/16].data[4].key = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask6_subp[i/16].data[5].key = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask6_subp[i/16].data[6].key = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask6_subp[i/16].data[7].key = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask6_subp[i/16].data[8].key = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask6_subp[i/16].data[9].key = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask6_subp[i/16].data[10].key = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask6_subp[i/16].data[11].key = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask6_subp[i/16].data[12].key = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask6_subp[i/16].data[13].key = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask6_subp[i/16].data[14].key = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask6_subp[i/16].data[15].key = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			} else {
				vmask6_subp[i/16].data[0].value = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask6_subp[i/16].data[1].value = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask6_subp[i/16].data[2].value = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask6_subp[i/16].data[3].value = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask6_subp[i/16].data[4].value = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask6_subp[i/16].data[5].value = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask6_subp[i/16].data[6].value = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask6_subp[i/16].data[7].value = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask6_subp[i/16].data[8].value = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask6_subp[i/16].data[9].value = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask6_subp[i/16].data[10].value = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask6_subp[i/16].data[11].value = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask6_subp[i/16].data[12].value = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask6_subp[i/16].data[13].value = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask6_subp[i/16].data[14].value = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask6_subp[i/16].data[15].value = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			}
			if(i%16==7){  // CRITICAL AUTOMATEME.
				vmask7_subp[i/16].data[0].key = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask7_subp[i/16].data[1].key = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask7_subp[i/16].data[2].key = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask7_subp[i/16].data[3].key = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask7_subp[i/16].data[4].key = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask7_subp[i/16].data[5].key = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask7_subp[i/16].data[6].key = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask7_subp[i/16].data[7].key = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask7_subp[i/16].data[8].key = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask7_subp[i/16].data[9].key = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask7_subp[i/16].data[10].key = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask7_subp[i/16].data[11].key = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask7_subp[i/16].data[12].key = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask7_subp[i/16].data[13].key = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask7_subp[i/16].data[14].key = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask7_subp[i/16].data[15].key = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			} else {
				vmask7_subp[i/16].data[0].value = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask7_subp[i/16].data[1].value = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask7_subp[i/16].data[2].value = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask7_subp[i/16].data[3].value = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask7_subp[i/16].data[4].value = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask7_subp[i/16].data[5].value = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask7_subp[i/16].data[6].value = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask7_subp[i/16].data[7].value = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask7_subp[i/16].data[8].value = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask7_subp[i/16].data[9].value = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask7_subp[i/16].data[10].value = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask7_subp[i/16].data[11].value = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask7_subp[i/16].data[12].value = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask7_subp[i/16].data[13].value = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask7_subp[i/16].data[14].value = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask7_subp[i/16].data[15].value = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			}
			if(i%16==7){  // CRITICAL AUTOMATEME.
				vmask8_subp[i/16].data[0].key = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask8_subp[i/16].data[1].key = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask8_subp[i/16].data[2].key = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask8_subp[i/16].data[3].key = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask8_subp[i/16].data[4].key = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask8_subp[i/16].data[5].key = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask8_subp[i/16].data[6].key = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask8_subp[i/16].data[7].key = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask8_subp[i/16].data[8].key = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask8_subp[i/16].data[9].key = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask8_subp[i/16].data[10].key = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask8_subp[i/16].data[11].key = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask8_subp[i/16].data[12].key = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask8_subp[i/16].data[13].key = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask8_subp[i/16].data[14].key = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask8_subp[i/16].data[15].key = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			} else {
				vmask8_subp[i/16].data[0].value = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask8_subp[i/16].data[1].value = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask8_subp[i/16].data[2].value = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask8_subp[i/16].data[3].value = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask8_subp[i/16].data[4].value = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask8_subp[i/16].data[5].value = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask8_subp[i/16].data[6].value = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask8_subp[i/16].data[7].value = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask8_subp[i/16].data[8].value = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask8_subp[i/16].data[9].value = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask8_subp[i/16].data[10].value = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask8_subp[i/16].data[11].value = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask8_subp[i/16].data[12].value = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask8_subp[i/16].data[13].value = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask8_subp[i/16].data[14].value = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask8_subp[i/16].data[15].value = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			}
			if(i%16==7){  // CRITICAL AUTOMATEME.
				vmask9_subp[i/16].data[0].key = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask9_subp[i/16].data[1].key = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask9_subp[i/16].data[2].key = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask9_subp[i/16].data[3].key = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask9_subp[i/16].data[4].key = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask9_subp[i/16].data[5].key = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask9_subp[i/16].data[6].key = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask9_subp[i/16].data[7].key = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask9_subp[i/16].data[8].key = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask9_subp[i/16].data[9].key = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask9_subp[i/16].data[10].key = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask9_subp[i/16].data[11].key = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask9_subp[i/16].data[12].key = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask9_subp[i/16].data[13].key = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask9_subp[i/16].data[14].key = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask9_subp[i/16].data[15].key = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			} else {
				vmask9_subp[i/16].data[0].value = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask9_subp[i/16].data[1].value = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask9_subp[i/16].data[2].value = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask9_subp[i/16].data[3].value = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask9_subp[i/16].data[4].value = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask9_subp[i/16].data[5].value = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask9_subp[i/16].data[6].value = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask9_subp[i/16].data[7].value = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask9_subp[i/16].data[8].value = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask9_subp[i/16].data[9].value = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask9_subp[i/16].data[10].value = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask9_subp[i/16].data[11].value = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask9_subp[i/16].data[12].value = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask9_subp[i/16].data[13].value = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask9_subp[i/16].data[14].value = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask9_subp[i/16].data[15].value = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			}
			if(i%16==7){  // CRITICAL AUTOMATEME.
				vmask10_subp[i/16].data[0].key = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask10_subp[i/16].data[1].key = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask10_subp[i/16].data[2].key = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask10_subp[i/16].data[3].key = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask10_subp[i/16].data[4].key = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask10_subp[i/16].data[5].key = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask10_subp[i/16].data[6].key = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask10_subp[i/16].data[7].key = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask10_subp[i/16].data[8].key = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask10_subp[i/16].data[9].key = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask10_subp[i/16].data[10].key = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask10_subp[i/16].data[11].key = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask10_subp[i/16].data[12].key = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask10_subp[i/16].data[13].key = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask10_subp[i/16].data[14].key = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask10_subp[i/16].data[15].key = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			} else {
				vmask10_subp[i/16].data[0].value = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask10_subp[i/16].data[1].value = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask10_subp[i/16].data[2].value = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask10_subp[i/16].data[3].value = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask10_subp[i/16].data[4].value = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask10_subp[i/16].data[5].value = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask10_subp[i/16].data[6].value = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask10_subp[i/16].data[7].value = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask10_subp[i/16].data[8].value = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask10_subp[i/16].data[9].value = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask10_subp[i/16].data[10].value = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask10_subp[i/16].data[11].value = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask10_subp[i/16].data[12].value = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask10_subp[i/16].data[13].value = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask10_subp[i/16].data[14].value = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask10_subp[i/16].data[15].value = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			}
			if(i%16==7){  // CRITICAL AUTOMATEME.
				vmask11_subp[i/16].data[0].key = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask11_subp[i/16].data[1].key = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask11_subp[i/16].data[2].key = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask11_subp[i/16].data[3].key = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask11_subp[i/16].data[4].key = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask11_subp[i/16].data[5].key = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask11_subp[i/16].data[6].key = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask11_subp[i/16].data[7].key = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask11_subp[i/16].data[8].key = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask11_subp[i/16].data[9].key = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask11_subp[i/16].data[10].key = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask11_subp[i/16].data[11].key = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask11_subp[i/16].data[12].key = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask11_subp[i/16].data[13].key = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask11_subp[i/16].data[14].key = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask11_subp[i/16].data[15].key = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			} else {
				vmask11_subp[i/16].data[0].value = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask11_subp[i/16].data[1].value = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask11_subp[i/16].data[2].value = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask11_subp[i/16].data[3].value = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask11_subp[i/16].data[4].value = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask11_subp[i/16].data[5].value = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask11_subp[i/16].data[6].value = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask11_subp[i/16].data[7].value = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask11_subp[i/16].data[8].value = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask11_subp[i/16].data[9].value = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask11_subp[i/16].data[10].value = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask11_subp[i/16].data[11].value = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask11_subp[i/16].data[12].value = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask11_subp[i/16].data[13].value = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask11_subp[i/16].data[14].value = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask11_subp[i/16].data[15].value = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			}
			
			tempvSUBmask.data[0].key = 0;
			tempvSUBmask.data[0].value = 0;
			tempvSUBmask.data[1].key = 0;
			tempvSUBmask.data[1].value = 0;
			tempvSUBmask.data[2].key = 0;
			tempvSUBmask.data[2].value = 0;
			tempvSUBmask.data[3].key = 0;
			tempvSUBmask.data[3].value = 0;
			tempvSUBmask.data[4].key = 0;
			tempvSUBmask.data[4].value = 0;
			tempvSUBmask.data[5].key = 0;
			tempvSUBmask.data[5].value = 0;
			tempvSUBmask.data[6].key = 0;
			tempvSUBmask.data[6].value = 0;
			tempvSUBmask.data[7].key = 0;
			tempvSUBmask.data[7].value = 0;
			tempvSUBmask.data[8].key = 0;
			tempvSUBmask.data[8].value = 0;
			tempvSUBmask.data[9].key = 0;
			tempvSUBmask.data[9].value = 0;
			tempvSUBmask.data[10].key = 0;
			tempvSUBmask.data[10].value = 0;
			tempvSUBmask.data[11].key = 0;
			tempvSUBmask.data[11].value = 0;
			tempvSUBmask.data[12].key = 0;
			tempvSUBmask.data[12].value = 0;
			tempvSUBmask.data[13].key = 0;
			tempvSUBmask.data[13].value = 0;
			tempvSUBmask.data[14].key = 0;
			tempvSUBmask.data[14].value = 0;
			tempvSUBmask.data[15].key = 0;
			tempvSUBmask.data[15].value = 0;
		}
		
		/* if(i % SUBPMASKFACTOR == SUBPMASKFACTOR-1){ // CRITICAL AUTOMATEME.
			if(i%16==7){  // CRITICAL AUTOMATEME.
				vmask0_subp[i/SUBPMASKFACTOR].data[0].key = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[1].key = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[2].key = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[3].key = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[4].key = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[5].key = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[6].key = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[7].key = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[8].key = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[9].key = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[10].key = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[11].key = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[12].key = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[13].key = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[14].key = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[15].key = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			} else {
				vmask0_subp[i/SUBPMASKFACTOR].data[0].value = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[1].value = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[2].value = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[3].value = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[4].value = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[5].value = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[6].value = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[7].value = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[8].value = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[9].value = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[10].value = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[11].value = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[12].value = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[13].value = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[14].value = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask0_subp[i/SUBPMASKFACTOR].data[15].value = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			}
			if(i%16==7){  // CRITICAL AUTOMATEME.
				vmask1_subp[i/SUBPMASKFACTOR].data[0].key = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[1].key = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[2].key = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[3].key = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[4].key = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[5].key = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[6].key = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[7].key = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[8].key = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[9].key = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[10].key = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[11].key = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[12].key = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[13].key = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[14].key = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[15].key = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			} else {
				vmask1_subp[i/SUBPMASKFACTOR].data[0].value = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[1].value = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[2].value = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[3].value = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[4].value = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[5].value = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[6].value = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[7].value = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[8].value = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[9].value = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[10].value = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[11].value = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[12].value = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[13].value = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[14].value = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask1_subp[i/SUBPMASKFACTOR].data[15].value = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			}
			if(i%16==7){  // CRITICAL AUTOMATEME.
				vmask2_subp[i/SUBPMASKFACTOR].data[0].key = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[1].key = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[2].key = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[3].key = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[4].key = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[5].key = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[6].key = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[7].key = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[8].key = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[9].key = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[10].key = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[11].key = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[12].key = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[13].key = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[14].key = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[15].key = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			} else {
				vmask2_subp[i/SUBPMASKFACTOR].data[0].value = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[1].value = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[2].value = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[3].value = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[4].value = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[5].value = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[6].value = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[7].value = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[8].value = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[9].value = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[10].value = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[11].value = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[12].value = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[13].value = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[14].value = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask2_subp[i/SUBPMASKFACTOR].data[15].value = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			}
			if(i%16==7){  // CRITICAL AUTOMATEME.
				vmask3_subp[i/SUBPMASKFACTOR].data[0].key = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[1].key = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[2].key = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[3].key = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[4].key = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[5].key = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[6].key = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[7].key = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[8].key = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[9].key = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[10].key = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[11].key = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[12].key = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[13].key = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[14].key = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[15].key = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			} else {
				vmask3_subp[i/SUBPMASKFACTOR].data[0].value = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[1].value = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[2].value = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[3].value = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[4].value = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[5].value = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[6].value = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[7].value = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[8].value = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[9].value = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[10].value = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[11].value = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[12].value = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[13].value = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[14].value = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask3_subp[i/SUBPMASKFACTOR].data[15].value = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			}
			if(i%16==7){  // CRITICAL AUTOMATEME.
				vmask4_subp[i/SUBPMASKFACTOR].data[0].key = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[1].key = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[2].key = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[3].key = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[4].key = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[5].key = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[6].key = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[7].key = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[8].key = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[9].key = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[10].key = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[11].key = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[12].key = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[13].key = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[14].key = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[15].key = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			} else {
				vmask4_subp[i/SUBPMASKFACTOR].data[0].value = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[1].value = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[2].value = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[3].value = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[4].value = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[5].value = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[6].value = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[7].value = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[8].value = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[9].value = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[10].value = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[11].value = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[12].value = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[13].value = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[14].value = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask4_subp[i/SUBPMASKFACTOR].data[15].value = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			}
			if(i%16==7){  // CRITICAL AUTOMATEME.
				vmask5_subp[i/SUBPMASKFACTOR].data[0].key = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[1].key = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[2].key = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[3].key = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[4].key = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[5].key = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[6].key = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[7].key = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[8].key = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[9].key = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[10].key = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[11].key = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[12].key = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[13].key = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[14].key = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[15].key = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			} else {
				vmask5_subp[i/SUBPMASKFACTOR].data[0].value = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[1].value = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[2].value = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[3].value = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[4].value = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[5].value = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[6].value = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[7].value = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[8].value = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[9].value = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[10].value = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[11].value = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[12].value = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[13].value = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[14].value = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask5_subp[i/SUBPMASKFACTOR].data[15].value = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			}
			if(i%16==7){  // CRITICAL AUTOMATEME.
				vmask6_subp[i/SUBPMASKFACTOR].data[0].key = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask6_subp[i/SUBPMASKFACTOR].data[1].key = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask6_subp[i/SUBPMASKFACTOR].data[2].key = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask6_subp[i/SUBPMASKFACTOR].data[3].key = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask6_subp[i/SUBPMASKFACTOR].data[4].key = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask6_subp[i/SUBPMASKFACTOR].data[5].key = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask6_subp[i/SUBPMASKFACTOR].data[6].key = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask6_subp[i/SUBPMASKFACTOR].data[7].key = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask6_subp[i/SUBPMASKFACTOR].data[8].key = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask6_subp[i/SUBPMASKFACTOR].data[9].key = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask6_subp[i/SUBPMASKFACTOR].data[10].key = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask6_subp[i/SUBPMASKFACTOR].data[11].key = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask6_subp[i/SUBPMASKFACTOR].data[12].key = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask6_subp[i/SUBPMASKFACTOR].data[13].key = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask6_subp[i/SUBPMASKFACTOR].data[14].key = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask6_subp[i/SUBPMASKFACTOR].data[15].key = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			} else {
				vmask6_subp[i/SUBPMASKFACTOR].data[0].value = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask6_subp[i/SUBPMASKFACTOR].data[1].value = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask6_subp[i/SUBPMASKFACTOR].data[2].value = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask6_subp[i/SUBPMASKFACTOR].data[3].value = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask6_subp[i/SUBPMASKFACTOR].data[4].value = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask6_subp[i/SUBPMASKFACTOR].data[5].value = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask6_subp[i/SUBPMASKFACTOR].data[6].value = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask6_subp[i/SUBPMASKFACTOR].data[7].value = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask6_subp[i/SUBPMASKFACTOR].data[8].value = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask6_subp[i/SUBPMASKFACTOR].data[9].value = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask6_subp[i/SUBPMASKFACTOR].data[10].value = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask6_subp[i/SUBPMASKFACTOR].data[11].value = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask6_subp[i/SUBPMASKFACTOR].data[12].value = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask6_subp[i/SUBPMASKFACTOR].data[13].value = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask6_subp[i/SUBPMASKFACTOR].data[14].value = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask6_subp[i/SUBPMASKFACTOR].data[15].value = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			}
			if(i%16==7){  // CRITICAL AUTOMATEME.
				vmask7_subp[i/SUBPMASKFACTOR].data[0].key = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask7_subp[i/SUBPMASKFACTOR].data[1].key = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask7_subp[i/SUBPMASKFACTOR].data[2].key = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask7_subp[i/SUBPMASKFACTOR].data[3].key = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask7_subp[i/SUBPMASKFACTOR].data[4].key = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask7_subp[i/SUBPMASKFACTOR].data[5].key = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask7_subp[i/SUBPMASKFACTOR].data[6].key = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask7_subp[i/SUBPMASKFACTOR].data[7].key = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask7_subp[i/SUBPMASKFACTOR].data[8].key = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask7_subp[i/SUBPMASKFACTOR].data[9].key = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask7_subp[i/SUBPMASKFACTOR].data[10].key = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask7_subp[i/SUBPMASKFACTOR].data[11].key = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask7_subp[i/SUBPMASKFACTOR].data[12].key = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask7_subp[i/SUBPMASKFACTOR].data[13].key = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask7_subp[i/SUBPMASKFACTOR].data[14].key = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask7_subp[i/SUBPMASKFACTOR].data[15].key = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			} else {
				vmask7_subp[i/SUBPMASKFACTOR].data[0].value = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask7_subp[i/SUBPMASKFACTOR].data[1].value = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask7_subp[i/SUBPMASKFACTOR].data[2].value = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask7_subp[i/SUBPMASKFACTOR].data[3].value = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask7_subp[i/SUBPMASKFACTOR].data[4].value = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask7_subp[i/SUBPMASKFACTOR].data[5].value = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask7_subp[i/SUBPMASKFACTOR].data[6].value = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask7_subp[i/SUBPMASKFACTOR].data[7].value = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask7_subp[i/SUBPMASKFACTOR].data[8].value = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask7_subp[i/SUBPMASKFACTOR].data[9].value = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask7_subp[i/SUBPMASKFACTOR].data[10].value = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask7_subp[i/SUBPMASKFACTOR].data[11].value = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask7_subp[i/SUBPMASKFACTOR].data[12].value = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask7_subp[i/SUBPMASKFACTOR].data[13].value = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask7_subp[i/SUBPMASKFACTOR].data[14].value = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask7_subp[i/SUBPMASKFACTOR].data[15].value = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			}
			if(i%16==7){  // CRITICAL AUTOMATEME.
				vmask8_subp[i/SUBPMASKFACTOR].data[0].key = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask8_subp[i/SUBPMASKFACTOR].data[1].key = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask8_subp[i/SUBPMASKFACTOR].data[2].key = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask8_subp[i/SUBPMASKFACTOR].data[3].key = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask8_subp[i/SUBPMASKFACTOR].data[4].key = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask8_subp[i/SUBPMASKFACTOR].data[5].key = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask8_subp[i/SUBPMASKFACTOR].data[6].key = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask8_subp[i/SUBPMASKFACTOR].data[7].key = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask8_subp[i/SUBPMASKFACTOR].data[8].key = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask8_subp[i/SUBPMASKFACTOR].data[9].key = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask8_subp[i/SUBPMASKFACTOR].data[10].key = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask8_subp[i/SUBPMASKFACTOR].data[11].key = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask8_subp[i/SUBPMASKFACTOR].data[12].key = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask8_subp[i/SUBPMASKFACTOR].data[13].key = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask8_subp[i/SUBPMASKFACTOR].data[14].key = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask8_subp[i/SUBPMASKFACTOR].data[15].key = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			} else {
				vmask8_subp[i/SUBPMASKFACTOR].data[0].value = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask8_subp[i/SUBPMASKFACTOR].data[1].value = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask8_subp[i/SUBPMASKFACTOR].data[2].value = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask8_subp[i/SUBPMASKFACTOR].data[3].value = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask8_subp[i/SUBPMASKFACTOR].data[4].value = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask8_subp[i/SUBPMASKFACTOR].data[5].value = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask8_subp[i/SUBPMASKFACTOR].data[6].value = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask8_subp[i/SUBPMASKFACTOR].data[7].value = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask8_subp[i/SUBPMASKFACTOR].data[8].value = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask8_subp[i/SUBPMASKFACTOR].data[9].value = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask8_subp[i/SUBPMASKFACTOR].data[10].value = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask8_subp[i/SUBPMASKFACTOR].data[11].value = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask8_subp[i/SUBPMASKFACTOR].data[12].value = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask8_subp[i/SUBPMASKFACTOR].data[13].value = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask8_subp[i/SUBPMASKFACTOR].data[14].value = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask8_subp[i/SUBPMASKFACTOR].data[15].value = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			}
			if(i%16==7){  // CRITICAL AUTOMATEME.
				vmask9_subp[i/SUBPMASKFACTOR].data[0].key = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask9_subp[i/SUBPMASKFACTOR].data[1].key = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask9_subp[i/SUBPMASKFACTOR].data[2].key = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask9_subp[i/SUBPMASKFACTOR].data[3].key = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask9_subp[i/SUBPMASKFACTOR].data[4].key = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask9_subp[i/SUBPMASKFACTOR].data[5].key = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask9_subp[i/SUBPMASKFACTOR].data[6].key = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask9_subp[i/SUBPMASKFACTOR].data[7].key = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask9_subp[i/SUBPMASKFACTOR].data[8].key = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask9_subp[i/SUBPMASKFACTOR].data[9].key = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask9_subp[i/SUBPMASKFACTOR].data[10].key = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask9_subp[i/SUBPMASKFACTOR].data[11].key = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask9_subp[i/SUBPMASKFACTOR].data[12].key = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask9_subp[i/SUBPMASKFACTOR].data[13].key = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask9_subp[i/SUBPMASKFACTOR].data[14].key = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask9_subp[i/SUBPMASKFACTOR].data[15].key = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			} else {
				vmask9_subp[i/SUBPMASKFACTOR].data[0].value = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask9_subp[i/SUBPMASKFACTOR].data[1].value = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask9_subp[i/SUBPMASKFACTOR].data[2].value = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask9_subp[i/SUBPMASKFACTOR].data[3].value = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask9_subp[i/SUBPMASKFACTOR].data[4].value = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask9_subp[i/SUBPMASKFACTOR].data[5].value = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask9_subp[i/SUBPMASKFACTOR].data[6].value = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask9_subp[i/SUBPMASKFACTOR].data[7].value = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask9_subp[i/SUBPMASKFACTOR].data[8].value = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask9_subp[i/SUBPMASKFACTOR].data[9].value = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask9_subp[i/SUBPMASKFACTOR].data[10].value = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask9_subp[i/SUBPMASKFACTOR].data[11].value = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask9_subp[i/SUBPMASKFACTOR].data[12].value = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask9_subp[i/SUBPMASKFACTOR].data[13].value = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask9_subp[i/SUBPMASKFACTOR].data[14].value = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask9_subp[i/SUBPMASKFACTOR].data[15].value = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			}
			if(i%16==7){  // CRITICAL AUTOMATEME.
				vmask10_subp[i/SUBPMASKFACTOR].data[0].key = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask10_subp[i/SUBPMASKFACTOR].data[1].key = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask10_subp[i/SUBPMASKFACTOR].data[2].key = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask10_subp[i/SUBPMASKFACTOR].data[3].key = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask10_subp[i/SUBPMASKFACTOR].data[4].key = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask10_subp[i/SUBPMASKFACTOR].data[5].key = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask10_subp[i/SUBPMASKFACTOR].data[6].key = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask10_subp[i/SUBPMASKFACTOR].data[7].key = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask10_subp[i/SUBPMASKFACTOR].data[8].key = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask10_subp[i/SUBPMASKFACTOR].data[9].key = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask10_subp[i/SUBPMASKFACTOR].data[10].key = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask10_subp[i/SUBPMASKFACTOR].data[11].key = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask10_subp[i/SUBPMASKFACTOR].data[12].key = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask10_subp[i/SUBPMASKFACTOR].data[13].key = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask10_subp[i/SUBPMASKFACTOR].data[14].key = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask10_subp[i/SUBPMASKFACTOR].data[15].key = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			} else {
				vmask10_subp[i/SUBPMASKFACTOR].data[0].value = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask10_subp[i/SUBPMASKFACTOR].data[1].value = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask10_subp[i/SUBPMASKFACTOR].data[2].value = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask10_subp[i/SUBPMASKFACTOR].data[3].value = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask10_subp[i/SUBPMASKFACTOR].data[4].value = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask10_subp[i/SUBPMASKFACTOR].data[5].value = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask10_subp[i/SUBPMASKFACTOR].data[6].value = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask10_subp[i/SUBPMASKFACTOR].data[7].value = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask10_subp[i/SUBPMASKFACTOR].data[8].value = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask10_subp[i/SUBPMASKFACTOR].data[9].value = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask10_subp[i/SUBPMASKFACTOR].data[10].value = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask10_subp[i/SUBPMASKFACTOR].data[11].value = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask10_subp[i/SUBPMASKFACTOR].data[12].value = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask10_subp[i/SUBPMASKFACTOR].data[13].value = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask10_subp[i/SUBPMASKFACTOR].data[14].value = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask10_subp[i/SUBPMASKFACTOR].data[15].value = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			}
			if(i%16==7){  // CRITICAL AUTOMATEME.
				vmask11_subp[i/SUBPMASKFACTOR].data[0].key = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask11_subp[i/SUBPMASKFACTOR].data[1].key = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask11_subp[i/SUBPMASKFACTOR].data[2].key = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask11_subp[i/SUBPMASKFACTOR].data[3].key = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask11_subp[i/SUBPMASKFACTOR].data[4].key = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask11_subp[i/SUBPMASKFACTOR].data[5].key = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask11_subp[i/SUBPMASKFACTOR].data[6].key = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask11_subp[i/SUBPMASKFACTOR].data[7].key = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask11_subp[i/SUBPMASKFACTOR].data[8].key = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask11_subp[i/SUBPMASKFACTOR].data[9].key = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask11_subp[i/SUBPMASKFACTOR].data[10].key = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask11_subp[i/SUBPMASKFACTOR].data[11].key = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask11_subp[i/SUBPMASKFACTOR].data[12].key = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask11_subp[i/SUBPMASKFACTOR].data[13].key = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask11_subp[i/SUBPMASKFACTOR].data[14].key = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask11_subp[i/SUBPMASKFACTOR].data[15].key = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			} else {
				vmask11_subp[i/SUBPMASKFACTOR].data[0].value = tempvSUBmask.data[0].key | tempvSUBmask.data[0].value; 
				vmask11_subp[i/SUBPMASKFACTOR].data[1].value = tempvSUBmask.data[1].key | tempvSUBmask.data[1].value; 
				vmask11_subp[i/SUBPMASKFACTOR].data[2].value = tempvSUBmask.data[2].key | tempvSUBmask.data[2].value; 
				vmask11_subp[i/SUBPMASKFACTOR].data[3].value = tempvSUBmask.data[3].key | tempvSUBmask.data[3].value; 
				vmask11_subp[i/SUBPMASKFACTOR].data[4].value = tempvSUBmask.data[4].key | tempvSUBmask.data[4].value; 
				vmask11_subp[i/SUBPMASKFACTOR].data[5].value = tempvSUBmask.data[5].key | tempvSUBmask.data[5].value; 
				vmask11_subp[i/SUBPMASKFACTOR].data[6].value = tempvSUBmask.data[6].key | tempvSUBmask.data[6].value; 
				vmask11_subp[i/SUBPMASKFACTOR].data[7].value = tempvSUBmask.data[7].key | tempvSUBmask.data[7].value; 
				vmask11_subp[i/SUBPMASKFACTOR].data[8].value = tempvSUBmask.data[8].key | tempvSUBmask.data[8].value; 
				vmask11_subp[i/SUBPMASKFACTOR].data[9].value = tempvSUBmask.data[9].key | tempvSUBmask.data[9].value; 
				vmask11_subp[i/SUBPMASKFACTOR].data[10].value = tempvSUBmask.data[10].key | tempvSUBmask.data[10].value; 
				vmask11_subp[i/SUBPMASKFACTOR].data[11].value = tempvSUBmask.data[11].key | tempvSUBmask.data[11].value; 
				vmask11_subp[i/SUBPMASKFACTOR].data[12].value = tempvSUBmask.data[12].key | tempvSUBmask.data[12].value; 
				vmask11_subp[i/SUBPMASKFACTOR].data[13].value = tempvSUBmask.data[13].key | tempvSUBmask.data[13].value; 
				vmask11_subp[i/SUBPMASKFACTOR].data[14].value = tempvSUBmask.data[14].key | tempvSUBmask.data[14].value; 
				vmask11_subp[i/SUBPMASKFACTOR].data[15].value = tempvSUBmask.data[15].key | tempvSUBmask.data[15].value; 
			}
			
			tempvSUBmask.data[0].key = 0;
			tempvSUBmask.data[0].value = 0;
			tempvSUBmask.data[1].key = 0;
			tempvSUBmask.data[1].value = 0;
			tempvSUBmask.data[2].key = 0;
			tempvSUBmask.data[2].value = 0;
			tempvSUBmask.data[3].key = 0;
			tempvSUBmask.data[3].value = 0;
			tempvSUBmask.data[4].key = 0;
			tempvSUBmask.data[4].value = 0;
			tempvSUBmask.data[5].key = 0;
			tempvSUBmask.data[5].value = 0;
			tempvSUBmask.data[6].key = 0;
			tempvSUBmask.data[6].value = 0;
			tempvSUBmask.data[7].key = 0;
			tempvSUBmask.data[7].value = 0;
			tempvSUBmask.data[8].key = 0;
			tempvSUBmask.data[8].value = 0;
			tempvSUBmask.data[9].key = 0;
			tempvSUBmask.data[9].value = 0;
			tempvSUBmask.data[10].key = 0;
			tempvSUBmask.data[10].value = 0;
			tempvSUBmask.data[11].key = 0;
			tempvSUBmask.data[11].value = 0;
			tempvSUBmask.data[12].key = 0;
			tempvSUBmask.data[12].value = 0;
			tempvSUBmask.data[13].key = 0;
			tempvSUBmask.data[13].value = 0;
			tempvSUBmask.data[14].key = 0;
			tempvSUBmask.data[14].value = 0;
			tempvSUBmask.data[15].key = 0;
			tempvSUBmask.data[15].value = 0;
		} */
		#endif 
	}
	return;
}

void //
	#ifdef SW 
	actsproc::
	#endif 
loadvmask_p(uint512_dt * kvdram, uint32_type vmask_p[BLOCKRAM_SIZE], batch_type offset_kvs, batch_type size_kvs){
	LOADACTIVEPARTITIONS_LOOP: for (buffer_type i=0; i<size_kvs; i++){
		#ifdef _WIDEWORD
		vmask_p[i] = kvdram[offset_kvs + i].range(31, 0);
		#else
		vmask_p[i] = kvdram[offset_kvs + i].data[0].key;
		#endif 
	}
	return;
}
void //
	#ifdef SW 
	actsproc::
	#endif 
loadmany1vmask_p(uint512_dt * kvdram, uint32_type vmask0_p[BLOCKRAM_SIZE], batch_type offset_kvs, batch_type size_kvs){
	LOADACTIVEPARTITIONS_LOOP: for (buffer_type i=0; i<size_kvs; i++){
		#ifdef _WIDEWORD
		vmask0_p[i] = kvdram[offset_kvs + i].range(31, 0);
		#else
		vmask0_p[i] = kvdram[offset_kvs + i].data[0].key;
		#endif 
	}
	return;
}
void //
	#ifdef SW 
	actsproc::
	#endif 
loadmany2vmask_p(uint512_dt * kvdram, uint32_type vmask0_p[BLOCKRAM_SIZE],uint32_type vmask1_p[BLOCKRAM_SIZE], batch_type offset_kvs, batch_type size_kvs){
	LOADACTIVEPARTITIONS_LOOP: for (buffer_type i=0; i<size_kvs; i++){
		#ifdef _WIDEWORD
		vmask0_p[i] = kvdram[offset_kvs + i].range(31, 0);
		vmask1_p[i] = kvdram[offset_kvs + i].range(31, 0);
		#else
		vmask0_p[i] = kvdram[offset_kvs + i].data[0].key;
		vmask1_p[i] = kvdram[offset_kvs + i].data[0].key;
		#endif 
	}
	return;
}
void //
	#ifdef SW 
	actsproc::
	#endif 
loadmany3vmask_p(uint512_dt * kvdram, uint32_type vmask0_p[BLOCKRAM_SIZE],uint32_type vmask1_p[BLOCKRAM_SIZE],uint32_type vmask2_p[BLOCKRAM_SIZE], batch_type offset_kvs, batch_type size_kvs){
	LOADACTIVEPARTITIONS_LOOP: for (buffer_type i=0; i<size_kvs; i++){
		#ifdef _WIDEWORD
		vmask0_p[i] = kvdram[offset_kvs + i].range(31, 0);
		vmask1_p[i] = kvdram[offset_kvs + i].range(31, 0);
		vmask2_p[i] = kvdram[offset_kvs + i].range(31, 0);
		#else
		vmask0_p[i] = kvdram[offset_kvs + i].data[0].key;
		vmask1_p[i] = kvdram[offset_kvs + i].data[0].key;
		vmask2_p[i] = kvdram[offset_kvs + i].data[0].key;
		#endif 
	}
	return;
}
void //
	#ifdef SW 
	actsproc::
	#endif 
loadmany4vmask_p(uint512_dt * kvdram, uint32_type vmask0_p[BLOCKRAM_SIZE],uint32_type vmask1_p[BLOCKRAM_SIZE],uint32_type vmask2_p[BLOCKRAM_SIZE],uint32_type vmask3_p[BLOCKRAM_SIZE], batch_type offset_kvs, batch_type size_kvs){
	LOADACTIVEPARTITIONS_LOOP: for (buffer_type i=0; i<size_kvs; i++){
		#ifdef _WIDEWORD
		vmask0_p[i] = kvdram[offset_kvs + i].range(31, 0);
		vmask1_p[i] = kvdram[offset_kvs + i].range(31, 0);
		vmask2_p[i] = kvdram[offset_kvs + i].range(31, 0);
		vmask3_p[i] = kvdram[offset_kvs + i].range(31, 0);
		#else
		vmask0_p[i] = kvdram[offset_kvs + i].data[0].key;
		vmask1_p[i] = kvdram[offset_kvs + i].data[0].key;
		vmask2_p[i] = kvdram[offset_kvs + i].data[0].key;
		vmask3_p[i] = kvdram[offset_kvs + i].data[0].key;
		#endif 
	}
	return;
}
void //
	#ifdef SW 
	actsproc::
	#endif 
loadmany5vmask_p(uint512_dt * kvdram, uint32_type vmask0_p[BLOCKRAM_SIZE],uint32_type vmask1_p[BLOCKRAM_SIZE],uint32_type vmask2_p[BLOCKRAM_SIZE],uint32_type vmask3_p[BLOCKRAM_SIZE],uint32_type vmask4_p[BLOCKRAM_SIZE], batch_type offset_kvs, batch_type size_kvs){
	LOADACTIVEPARTITIONS_LOOP: for (buffer_type i=0; i<size_kvs; i++){
		#ifdef _WIDEWORD
		vmask0_p[i] = kvdram[offset_kvs + i].range(31, 0);
		vmask1_p[i] = kvdram[offset_kvs + i].range(31, 0);
		vmask2_p[i] = kvdram[offset_kvs + i].range(31, 0);
		vmask3_p[i] = kvdram[offset_kvs + i].range(31, 0);
		vmask4_p[i] = kvdram[offset_kvs + i].range(31, 0);
		#else
		vmask0_p[i] = kvdram[offset_kvs + i].data[0].key;
		vmask1_p[i] = kvdram[offset_kvs + i].data[0].key;
		vmask2_p[i] = kvdram[offset_kvs + i].data[0].key;
		vmask3_p[i] = kvdram[offset_kvs + i].data[0].key;
		vmask4_p[i] = kvdram[offset_kvs + i].data[0].key;
		#endif 
	}
	return;
}
void //
	#ifdef SW 
	actsproc::
	#endif 
loadmany6vmask_p(uint512_dt * kvdram, uint32_type vmask0_p[BLOCKRAM_SIZE],uint32_type vmask1_p[BLOCKRAM_SIZE],uint32_type vmask2_p[BLOCKRAM_SIZE],uint32_type vmask3_p[BLOCKRAM_SIZE],uint32_type vmask4_p[BLOCKRAM_SIZE],uint32_type vmask5_p[BLOCKRAM_SIZE], batch_type offset_kvs, batch_type size_kvs){
	LOADACTIVEPARTITIONS_LOOP: for (buffer_type i=0; i<size_kvs; i++){
		#ifdef _WIDEWORD
		vmask0_p[i] = kvdram[offset_kvs + i].range(31, 0);
		vmask1_p[i] = kvdram[offset_kvs + i].range(31, 0);
		vmask2_p[i] = kvdram[offset_kvs + i].range(31, 0);
		vmask3_p[i] = kvdram[offset_kvs + i].range(31, 0);
		vmask4_p[i] = kvdram[offset_kvs + i].range(31, 0);
		vmask5_p[i] = kvdram[offset_kvs + i].range(31, 0);
		#else
		vmask0_p[i] = kvdram[offset_kvs + i].data[0].key;
		vmask1_p[i] = kvdram[offset_kvs + i].data[0].key;
		vmask2_p[i] = kvdram[offset_kvs + i].data[0].key;
		vmask3_p[i] = kvdram[offset_kvs + i].data[0].key;
		vmask4_p[i] = kvdram[offset_kvs + i].data[0].key;
		vmask5_p[i] = kvdram[offset_kvs + i].data[0].key;
		#endif 
	}
	return;
}
void //
	#ifdef SW 
	actsproc::
	#endif 
loadmany7vmask_p(uint512_dt * kvdram, uint32_type vmask0_p[BLOCKRAM_SIZE],uint32_type vmask1_p[BLOCKRAM_SIZE],uint32_type vmask2_p[BLOCKRAM_SIZE],uint32_type vmask3_p[BLOCKRAM_SIZE],uint32_type vmask4_p[BLOCKRAM_SIZE],uint32_type vmask5_p[BLOCKRAM_SIZE],uint32_type vmask6_p[BLOCKRAM_SIZE], batch_type offset_kvs, batch_type size_kvs){
	LOADACTIVEPARTITIONS_LOOP: for (buffer_type i=0; i<size_kvs; i++){
		#ifdef _WIDEWORD
		vmask0_p[i] = kvdram[offset_kvs + i].range(31, 0);
		vmask1_p[i] = kvdram[offset_kvs + i].range(31, 0);
		vmask2_p[i] = kvdram[offset_kvs + i].range(31, 0);
		vmask3_p[i] = kvdram[offset_kvs + i].range(31, 0);
		vmask4_p[i] = kvdram[offset_kvs + i].range(31, 0);
		vmask5_p[i] = kvdram[offset_kvs + i].range(31, 0);
		vmask6_p[i] = kvdram[offset_kvs + i].range(31, 0);
		#else
		vmask0_p[i] = kvdram[offset_kvs + i].data[0].key;
		vmask1_p[i] = kvdram[offset_kvs + i].data[0].key;
		vmask2_p[i] = kvdram[offset_kvs + i].data[0].key;
		vmask3_p[i] = kvdram[offset_kvs + i].data[0].key;
		vmask4_p[i] = kvdram[offset_kvs + i].data[0].key;
		vmask5_p[i] = kvdram[offset_kvs + i].data[0].key;
		vmask6_p[i] = kvdram[offset_kvs + i].data[0].key;
		#endif 
	}
	return;
}
void //
	#ifdef SW 
	actsproc::
	#endif 
loadmany8vmask_p(uint512_dt * kvdram, uint32_type vmask0_p[BLOCKRAM_SIZE],uint32_type vmask1_p[BLOCKRAM_SIZE],uint32_type vmask2_p[BLOCKRAM_SIZE],uint32_type vmask3_p[BLOCKRAM_SIZE],uint32_type vmask4_p[BLOCKRAM_SIZE],uint32_type vmask5_p[BLOCKRAM_SIZE],uint32_type vmask6_p[BLOCKRAM_SIZE],uint32_type vmask7_p[BLOCKRAM_SIZE], batch_type offset_kvs, batch_type size_kvs){
	LOADACTIVEPARTITIONS_LOOP: for (buffer_type i=0; i<size_kvs; i++){
		#ifdef _WIDEWORD
		vmask0_p[i] = kvdram[offset_kvs + i].range(31, 0);
		vmask1_p[i] = kvdram[offset_kvs + i].range(31, 0);
		vmask2_p[i] = kvdram[offset_kvs + i].range(31, 0);
		vmask3_p[i] = kvdram[offset_kvs + i].range(31, 0);
		vmask4_p[i] = kvdram[offset_kvs + i].range(31, 0);
		vmask5_p[i] = kvdram[offset_kvs + i].range(31, 0);
		vmask6_p[i] = kvdram[offset_kvs + i].range(31, 0);
		vmask7_p[i] = kvdram[offset_kvs + i].range(31, 0);
		#else
		vmask0_p[i] = kvdram[offset_kvs + i].data[0].key;
		vmask1_p[i] = kvdram[offset_kvs + i].data[0].key;
		vmask2_p[i] = kvdram[offset_kvs + i].data[0].key;
		vmask3_p[i] = kvdram[offset_kvs + i].data[0].key;
		vmask4_p[i] = kvdram[offset_kvs + i].data[0].key;
		vmask5_p[i] = kvdram[offset_kvs + i].data[0].key;
		vmask6_p[i] = kvdram[offset_kvs + i].data[0].key;
		vmask7_p[i] = kvdram[offset_kvs + i].data[0].key;
		#endif 
	}
	return;
}
void //
	#ifdef SW 
	actsproc::
	#endif 
loadmany9vmask_p(uint512_dt * kvdram, uint32_type vmask0_p[BLOCKRAM_SIZE],uint32_type vmask1_p[BLOCKRAM_SIZE],uint32_type vmask2_p[BLOCKRAM_SIZE],uint32_type vmask3_p[BLOCKRAM_SIZE],uint32_type vmask4_p[BLOCKRAM_SIZE],uint32_type vmask5_p[BLOCKRAM_SIZE],uint32_type vmask6_p[BLOCKRAM_SIZE],uint32_type vmask7_p[BLOCKRAM_SIZE],uint32_type vmask8_p[BLOCKRAM_SIZE], batch_type offset_kvs, batch_type size_kvs){
	LOADACTIVEPARTITIONS_LOOP: for (buffer_type i=0; i<size_kvs; i++){
		#ifdef _WIDEWORD
		vmask0_p[i] = kvdram[offset_kvs + i].range(31, 0);
		vmask1_p[i] = kvdram[offset_kvs + i].range(31, 0);
		vmask2_p[i] = kvdram[offset_kvs + i].range(31, 0);
		vmask3_p[i] = kvdram[offset_kvs + i].range(31, 0);
		vmask4_p[i] = kvdram[offset_kvs + i].range(31, 0);
		vmask5_p[i] = kvdram[offset_kvs + i].range(31, 0);
		vmask6_p[i] = kvdram[offset_kvs + i].range(31, 0);
		vmask7_p[i] = kvdram[offset_kvs + i].range(31, 0);
		vmask8_p[i] = kvdram[offset_kvs + i].range(31, 0);
		#else
		vmask0_p[i] = kvdram[offset_kvs + i].data[0].key;
		vmask1_p[i] = kvdram[offset_kvs + i].data[0].key;
		vmask2_p[i] = kvdram[offset_kvs + i].data[0].key;
		vmask3_p[i] = kvdram[offset_kvs + i].data[0].key;
		vmask4_p[i] = kvdram[offset_kvs + i].data[0].key;
		vmask5_p[i] = kvdram[offset_kvs + i].data[0].key;
		vmask6_p[i] = kvdram[offset_kvs + i].data[0].key;
		vmask7_p[i] = kvdram[offset_kvs + i].data[0].key;
		vmask8_p[i] = kvdram[offset_kvs + i].data[0].key;
		#endif 
	}
	return;
}
void //
	#ifdef SW 
	actsproc::
	#endif 
loadmany10vmask_p(uint512_dt * kvdram, uint32_type vmask0_p[BLOCKRAM_SIZE],uint32_type vmask1_p[BLOCKRAM_SIZE],uint32_type vmask2_p[BLOCKRAM_SIZE],uint32_type vmask3_p[BLOCKRAM_SIZE],uint32_type vmask4_p[BLOCKRAM_SIZE],uint32_type vmask5_p[BLOCKRAM_SIZE],uint32_type vmask6_p[BLOCKRAM_SIZE],uint32_type vmask7_p[BLOCKRAM_SIZE],uint32_type vmask8_p[BLOCKRAM_SIZE],uint32_type vmask9_p[BLOCKRAM_SIZE], batch_type offset_kvs, batch_type size_kvs){
	LOADACTIVEPARTITIONS_LOOP: for (buffer_type i=0; i<size_kvs; i++){
		#ifdef _WIDEWORD
		vmask0_p[i] = kvdram[offset_kvs + i].range(31, 0);
		vmask1_p[i] = kvdram[offset_kvs + i].range(31, 0);
		vmask2_p[i] = kvdram[offset_kvs + i].range(31, 0);
		vmask3_p[i] = kvdram[offset_kvs + i].range(31, 0);
		vmask4_p[i] = kvdram[offset_kvs + i].range(31, 0);
		vmask5_p[i] = kvdram[offset_kvs + i].range(31, 0);
		vmask6_p[i] = kvdram[offset_kvs + i].range(31, 0);
		vmask7_p[i] = kvdram[offset_kvs + i].range(31, 0);
		vmask8_p[i] = kvdram[offset_kvs + i].range(31, 0);
		vmask9_p[i] = kvdram[offset_kvs + i].range(31, 0);
		#else
		vmask0_p[i] = kvdram[offset_kvs + i].data[0].key;
		vmask1_p[i] = kvdram[offset_kvs + i].data[0].key;
		vmask2_p[i] = kvdram[offset_kvs + i].data[0].key;
		vmask3_p[i] = kvdram[offset_kvs + i].data[0].key;
		vmask4_p[i] = kvdram[offset_kvs + i].data[0].key;
		vmask5_p[i] = kvdram[offset_kvs + i].data[0].key;
		vmask6_p[i] = kvdram[offset_kvs + i].data[0].key;
		vmask7_p[i] = kvdram[offset_kvs + i].data[0].key;
		vmask8_p[i] = kvdram[offset_kvs + i].data[0].key;
		vmask9_p[i] = kvdram[offset_kvs + i].data[0].key;
		#endif 
	}
	return;
}
void //
	#ifdef SW 
	actsproc::
	#endif 
loadmany11vmask_p(uint512_dt * kvdram, uint32_type vmask0_p[BLOCKRAM_SIZE],uint32_type vmask1_p[BLOCKRAM_SIZE],uint32_type vmask2_p[BLOCKRAM_SIZE],uint32_type vmask3_p[BLOCKRAM_SIZE],uint32_type vmask4_p[BLOCKRAM_SIZE],uint32_type vmask5_p[BLOCKRAM_SIZE],uint32_type vmask6_p[BLOCKRAM_SIZE],uint32_type vmask7_p[BLOCKRAM_SIZE],uint32_type vmask8_p[BLOCKRAM_SIZE],uint32_type vmask9_p[BLOCKRAM_SIZE],uint32_type vmask10_p[BLOCKRAM_SIZE], batch_type offset_kvs, batch_type size_kvs){
	LOADACTIVEPARTITIONS_LOOP: for (buffer_type i=0; i<size_kvs; i++){
		#ifdef _WIDEWORD
		vmask0_p[i] = kvdram[offset_kvs + i].range(31, 0);
		vmask1_p[i] = kvdram[offset_kvs + i].range(31, 0);
		vmask2_p[i] = kvdram[offset_kvs + i].range(31, 0);
		vmask3_p[i] = kvdram[offset_kvs + i].range(31, 0);
		vmask4_p[i] = kvdram[offset_kvs + i].range(31, 0);
		vmask5_p[i] = kvdram[offset_kvs + i].range(31, 0);
		vmask6_p[i] = kvdram[offset_kvs + i].range(31, 0);
		vmask7_p[i] = kvdram[offset_kvs + i].range(31, 0);
		vmask8_p[i] = kvdram[offset_kvs + i].range(31, 0);
		vmask9_p[i] = kvdram[offset_kvs + i].range(31, 0);
		vmask10_p[i] = kvdram[offset_kvs + i].range(31, 0);
		#else
		vmask0_p[i] = kvdram[offset_kvs + i].data[0].key;
		vmask1_p[i] = kvdram[offset_kvs + i].data[0].key;
		vmask2_p[i] = kvdram[offset_kvs + i].data[0].key;
		vmask3_p[i] = kvdram[offset_kvs + i].data[0].key;
		vmask4_p[i] = kvdram[offset_kvs + i].data[0].key;
		vmask5_p[i] = kvdram[offset_kvs + i].data[0].key;
		vmask6_p[i] = kvdram[offset_kvs + i].data[0].key;
		vmask7_p[i] = kvdram[offset_kvs + i].data[0].key;
		vmask8_p[i] = kvdram[offset_kvs + i].data[0].key;
		vmask9_p[i] = kvdram[offset_kvs + i].data[0].key;
		vmask10_p[i] = kvdram[offset_kvs + i].data[0].key;
		#endif 
	}
	return;
}
void //
	#ifdef SW 
	actsproc::
	#endif 
loadmany12vmask_p(uint512_dt * kvdram, uint32_type vmask0_p[BLOCKRAM_SIZE],uint32_type vmask1_p[BLOCKRAM_SIZE],uint32_type vmask2_p[BLOCKRAM_SIZE],uint32_type vmask3_p[BLOCKRAM_SIZE],uint32_type vmask4_p[BLOCKRAM_SIZE],uint32_type vmask5_p[BLOCKRAM_SIZE],uint32_type vmask6_p[BLOCKRAM_SIZE],uint32_type vmask7_p[BLOCKRAM_SIZE],uint32_type vmask8_p[BLOCKRAM_SIZE],uint32_type vmask9_p[BLOCKRAM_SIZE],uint32_type vmask10_p[BLOCKRAM_SIZE],uint32_type vmask11_p[BLOCKRAM_SIZE], batch_type offset_kvs, batch_type size_kvs){
	LOADACTIVEPARTITIONS_LOOP: for (buffer_type i=0; i<size_kvs; i++){
		#ifdef _WIDEWORD
		vmask0_p[i] = kvdram[offset_kvs + i].range(31, 0);
		vmask1_p[i] = kvdram[offset_kvs + i].range(31, 0);
		vmask2_p[i] = kvdram[offset_kvs + i].range(31, 0);
		vmask3_p[i] = kvdram[offset_kvs + i].range(31, 0);
		vmask4_p[i] = kvdram[offset_kvs + i].range(31, 0);
		vmask5_p[i] = kvdram[offset_kvs + i].range(31, 0);
		vmask6_p[i] = kvdram[offset_kvs + i].range(31, 0);
		vmask7_p[i] = kvdram[offset_kvs + i].range(31, 0);
		vmask8_p[i] = kvdram[offset_kvs + i].range(31, 0);
		vmask9_p[i] = kvdram[offset_kvs + i].range(31, 0);
		vmask10_p[i] = kvdram[offset_kvs + i].range(31, 0);
		vmask11_p[i] = kvdram[offset_kvs + i].range(31, 0);
		#else
		vmask0_p[i] = kvdram[offset_kvs + i].data[0].key;
		vmask1_p[i] = kvdram[offset_kvs + i].data[0].key;
		vmask2_p[i] = kvdram[offset_kvs + i].data[0].key;
		vmask3_p[i] = kvdram[offset_kvs + i].data[0].key;
		vmask4_p[i] = kvdram[offset_kvs + i].data[0].key;
		vmask5_p[i] = kvdram[offset_kvs + i].data[0].key;
		vmask6_p[i] = kvdram[offset_kvs + i].data[0].key;
		vmask7_p[i] = kvdram[offset_kvs + i].data[0].key;
		vmask8_p[i] = kvdram[offset_kvs + i].data[0].key;
		vmask9_p[i] = kvdram[offset_kvs + i].data[0].key;
		vmask10_p[i] = kvdram[offset_kvs + i].data[0].key;
		vmask11_p[i] = kvdram[offset_kvs + i].data[0].key;
		#endif 
	}
	return;
}

void //
	#ifdef SW 
	actsproc::
	#endif 
readglobalstats(bool_type enable, uint512_dt * kvdram, keyvalue_t globalstatsbuffer[MAX_NUM_PARTITIONS], batch_type offset_kvs, globalparams_t globalparams){ 
	if(enable == OFF){ return; }
	#ifdef _DEBUGMODE_CHECKS2
	actsutilityobj->checkoutofbounds("readglobalstats", offset_kvs + NUM_PARTITIONS, globalparams.BASEOFFSETKVS_STATSDRAM + KVSTATSDRAMSZ_KVS + 1, NAp, NAp, NAp);
	#endif
	
	READGLOBALSTATS_LOOP: for (buffer_type i=0; i<NUM_PARTITIONS; i++){
		#if NUM_EDGE_BANKS==0
			keyvalue_t kv;
			#ifdef _WIDEWORD
			kv.key = kvdram[offset_kvs + i].range(31, 0); 
			kv.value = kvdram[offset_kvs + i].range(63, 32); 
			#else 
			kv.key = kvdram[offset_kvs + i].data[0].key;
			kv.value = kvdram[offset_kvs + i].data[0].value;
			#endif 
			globalstatsbuffer[i] = kv;
		#else 
			uint512_vec_dt vec;
			#ifdef _WIDEWORD
			vec.data[0].key = kvdram[offset_kvs + i].range(31, 0); 
			vec.data[0].value = kvdram[offset_kvs + i].range(63, 32); 
			vec.data[1].key = kvdram[offset_kvs + i].range(95, 64); 
			vec.data[1].value = kvdram[offset_kvs + i].range(127, 96); 
			vec.data[2].key = kvdram[offset_kvs + i].range(159, 128); 
			vec.data[2].value = kvdram[offset_kvs + i].range(191, 160); 
			vec.data[3].key = kvdram[offset_kvs + i].range(223, 192); 
			vec.data[3].value = kvdram[offset_kvs + i].range(255, 224); 
			vec.data[4].key = kvdram[offset_kvs + i].range(287, 256); 
			vec.data[4].value = kvdram[offset_kvs + i].range(319, 288); 
			vec.data[5].key = kvdram[offset_kvs + i].range(351, 320); 
			vec.data[5].value = kvdram[offset_kvs + i].range(383, 352); 
			vec.data[6].key = kvdram[offset_kvs + i].range(415, 384); 
			vec.data[6].value = kvdram[offset_kvs + i].range(447, 416); 
			vec.data[7].key = kvdram[offset_kvs + i].range(479, 448); 
			vec.data[7].value = kvdram[offset_kvs + i].range(511, 480); 
			#else 
			vec.data[0].key = kvdram[offset_kvs + i].data[0].key; 
			vec.data[0].value = kvdram[offset_kvs + i].data[0].value; 
			vec.data[1].key = kvdram[offset_kvs + i].data[1].key; 
			vec.data[1].value = kvdram[offset_kvs + i].data[1].value; 
			vec.data[2].key = kvdram[offset_kvs + i].data[2].key; 
			vec.data[2].value = kvdram[offset_kvs + i].data[2].value; 
			vec.data[3].key = kvdram[offset_kvs + i].data[3].key; 
			vec.data[3].value = kvdram[offset_kvs + i].data[3].value; 
			vec.data[4].key = kvdram[offset_kvs + i].data[4].key; 
			vec.data[4].value = kvdram[offset_kvs + i].data[4].value; 
			vec.data[5].key = kvdram[offset_kvs + i].data[5].key; 
			vec.data[5].value = kvdram[offset_kvs + i].data[5].value; 
			vec.data[6].key = kvdram[offset_kvs + i].data[6].key; 
			vec.data[6].value = kvdram[offset_kvs + i].data[6].value; 
			vec.data[7].key = kvdram[offset_kvs + i].data[7].key; 
			vec.data[7].value = kvdram[offset_kvs + i].data[7].value; 
			#endif 
			globalstatsbuffer[i] = vec.data[globalparams.VARS_WORKBATCH];
		#endif 
	}
	
	#ifdef _DEBUGMODE_KERNELPRINTS
	actsutilityobj->printkeyvalues("readglobalstats.globalstatsbuffer", globalstatsbuffer, NUM_PARTITIONS); 
	#endif
	return;
}

void 
	#ifdef SW 
	actsproc::
	#endif 
saveglobalstats(bool_type enable, uint512_dt * kvdram, keyvalue_t globalstatsbuffer[MAX_NUM_PARTITIONS], batch_type offset_kvs, globalparams_t globalparams){ 
	if(enable == OFF){ return; }
	#ifdef _DEBUGMODE_CHECKS2
	actsutilityobj->checkoutofbounds("saveglobalstats", offset_kvs + NUM_PARTITIONS, globalparams.BASEOFFSETKVS_STATSDRAM + KVSTATSDRAMSZ_KVS + 1, offset_kvs, NUM_PARTITIONS, KVSTATSDRAMSZ_KVS);
	#endif
	
	SAVEGLOBALSTATS_LOOP: for (buffer_type i=0; i<NUM_PARTITIONS; i++){
		#if NUM_EDGE_BANKS==0
			#ifdef _WIDEWORD
			kvdram[offset_kvs + i].range(31, 0) = globalstatsbuffer[i].key; 
			kvdram[offset_kvs + i].range(63, 32) = globalstatsbuffer[i].value; 
			#else
			kvdram[offset_kvs + i].data[0].key = globalstatsbuffer[i].key; 
			kvdram[offset_kvs + i].data[0].value = globalstatsbuffer[i].value; 
			#endif
		#else
			#ifdef _WIDEWORD
 if(globalparams.VARS_WORKBATCH == 0){
				kvdram[offset_kvs + i].range(31, 0) = globalstatsbuffer[i].key; 
				kvdram[offset_kvs + i].range(63, 32) = globalstatsbuffer[i].value; 
			}
else if(globalparams.VARS_WORKBATCH == 1){
				kvdram[offset_kvs + i].range(95, 64) = globalstatsbuffer[i].key; 
				kvdram[offset_kvs + i].range(127, 96) = globalstatsbuffer[i].value; 
			}
else if(globalparams.VARS_WORKBATCH == 2){
				kvdram[offset_kvs + i].range(159, 128) = globalstatsbuffer[i].key; 
				kvdram[offset_kvs + i].range(191, 160) = globalstatsbuffer[i].value; 
			}
else if(globalparams.VARS_WORKBATCH == 3){
				kvdram[offset_kvs + i].range(223, 192) = globalstatsbuffer[i].key; 
				kvdram[offset_kvs + i].range(255, 224) = globalstatsbuffer[i].value; 
			}
else if(globalparams.VARS_WORKBATCH == 4){
				kvdram[offset_kvs + i].range(287, 256) = globalstatsbuffer[i].key; 
				kvdram[offset_kvs + i].range(319, 288) = globalstatsbuffer[i].value; 
			}
else if(globalparams.VARS_WORKBATCH == 5){
				kvdram[offset_kvs + i].range(351, 320) = globalstatsbuffer[i].key; 
				kvdram[offset_kvs + i].range(383, 352) = globalstatsbuffer[i].value; 
			}
else if(globalparams.VARS_WORKBATCH == 6){
				kvdram[offset_kvs + i].range(415, 384) = globalstatsbuffer[i].key; 
				kvdram[offset_kvs + i].range(447, 416) = globalstatsbuffer[i].value; 
			}
else {
				kvdram[offset_kvs + i].range(479, 448) = globalstatsbuffer[i].key; 
				kvdram[offset_kvs + i].range(511, 480) = globalstatsbuffer[i].value; 
			}
			#else 
 if(globalparams.VARS_WORKBATCH == 0){
				kvdram[offset_kvs + i].data[0].key = globalstatsbuffer[i].key; 
				kvdram[offset_kvs + i].data[0].value = globalstatsbuffer[i].value; 
			}
else if(globalparams.VARS_WORKBATCH == 1){
				kvdram[offset_kvs + i].data[1].key = globalstatsbuffer[i].key; 
				kvdram[offset_kvs + i].data[1].value = globalstatsbuffer[i].value; 
			}
else if(globalparams.VARS_WORKBATCH == 2){
				kvdram[offset_kvs + i].data[2].key = globalstatsbuffer[i].key; 
				kvdram[offset_kvs + i].data[2].value = globalstatsbuffer[i].value; 
			}
else if(globalparams.VARS_WORKBATCH == 3){
				kvdram[offset_kvs + i].data[3].key = globalstatsbuffer[i].key; 
				kvdram[offset_kvs + i].data[3].value = globalstatsbuffer[i].value; 
			}
else if(globalparams.VARS_WORKBATCH == 4){
				kvdram[offset_kvs + i].data[4].key = globalstatsbuffer[i].key; 
				kvdram[offset_kvs + i].data[4].value = globalstatsbuffer[i].value; 
			}
else if(globalparams.VARS_WORKBATCH == 5){
				kvdram[offset_kvs + i].data[5].key = globalstatsbuffer[i].key; 
				kvdram[offset_kvs + i].data[5].value = globalstatsbuffer[i].value; 
			}
else if(globalparams.VARS_WORKBATCH == 6){
				kvdram[offset_kvs + i].data[6].key = globalstatsbuffer[i].key; 
				kvdram[offset_kvs + i].data[6].value = globalstatsbuffer[i].value; 
			}
else {
				kvdram[offset_kvs + i].data[7].key = globalstatsbuffer[i].key; 
				kvdram[offset_kvs + i].data[7].value = globalstatsbuffer[i].value; 
			}
			#endif
		#endif 

		#ifdef _DEBUGMODE_STATS
		actsutilityobj->globalvar_savestats_counttotalstatswritten(VECTOR_SIZE);
		#endif
	}
	
	#ifdef _DEBUGMODE_KERNELPRINTS
	actsutilityobj->printkeyvalues("saveglobalstats.globalstatsbuffer", globalstatsbuffer, NUM_PARTITIONS); 
	#endif
	return;
}

tuple_t 
	#ifdef SW 
	actsproc::
	#endif
getvptrs( uint512_dt * kvdram, unsigned int beginoffset, unsigned int endoffset, unsigned int edgebankID){
	#pragma HLS INLINE
	
	keyy_t beginvptr = 0;
	keyy_t endvptr = 0;
	
	#if NUM_EDGE_BANKS==0
		#ifdef _WIDEWORD
		beginvptr = kvdram[beginoffset].range(31, 0);
		endvptr = kvdram[endoffset].range(31, 0); 
		#else 
		beginvptr = kvdram[beginoffset].data[0].key;
		endvptr = kvdram[endoffset].data[0].key;
		#endif 
	#else
		if(edgebankID == 0){
			#ifdef _WIDEWORD
			beginvptr = edges0[beginoffset].range(31, 0);
			endvptr = edges0[endoffset].range(31, 0); 
			#else 
			beginvptr = edges0[beginoffset].data[0].key;
			endvptr = edges0[endoffset].data[0].key;
			#endif 
		} 
		#if NUM_EDGE_BANKS>1
		else if(edgebankID == 1){
			#ifdef _WIDEWORD
			beginvptr = edges1[beginoffset].range(31, 0);
			endvptr = edges1[endoffset].range(31, 0); 
			#else 
			beginvptr = edges1[beginoffset].data[0].key;
			endvptr = edges1[endoffset].data[0].key;
			#endif 
		} 
		#if NUM_EDGE_BANKS>2
		else if(edgebankID == 2){
			#ifdef _WIDEWORD
			beginvptr = edges2[beginoffset].range(31, 0);
			endvptr = edges2[endoffset].range(31, 0); 
			#else 
			beginvptr = edges2[beginoffset].data[0].key;
			endvptr = edges2[endoffset].data[0].key;
			#endif 
		} 
		#if NUM_EDGE_BANKS>3
		else if(edgebankID == 3){
			#ifdef _WIDEWORD
			beginvptr = edges3[beginoffset].range(31, 0);
			endvptr = edges3[endoffset].range(31, 0); 
			#else 
			beginvptr = edges3[beginoffset].data[0].key;
			endvptr = edges3[endoffset].data[0].key;
			#endif 
		} 
		#if NUM_EDGE_BANKS>4
		else if(edgebankID == 4){
			#ifdef _WIDEWORD
			beginvptr = edges4[beginoffset].range(31, 0);
			endvptr = edges4[endoffset].range(31, 0); 
			#else 
			beginvptr = edges4[beginoffset].data[0].key;
			endvptr = edges4[endoffset].data[0].key;
			#endif 
		} 
		#if NUM_EDGE_BANKS>5
		else if(edgebankID == 5){
			#ifdef _WIDEWORD
			beginvptr = edges5[beginoffset].range(31, 0);
			endvptr = edges5[endoffset].range(31, 0); 
			#else 
			beginvptr = edges5[beginoffset].data[0].key;
			endvptr = edges5[endoffset].data[0].key;
			#endif 
		} 
		#if NUM_EDGE_BANKS>6
		else if(edgebankID == 6){
			#ifdef _WIDEWORD
			beginvptr = edges6[beginoffset].range(31, 0);
			endvptr = edges6[endoffset].range(31, 0); 
			#else 
			beginvptr = edges6[beginoffset].data[0].key;
			endvptr = edges6[endoffset].data[0].key;
			#endif 
		}
		#if NUM_EDGE_BANKS>7
		else if(edgebankID == 7){
			#ifdef _WIDEWORD
			beginvptr = edges7[beginoffset].range(31, 0);
			endvptr = edges7[endoffset].range(31, 0); 
			#else 
			beginvptr = edges7[beginoffset].data[0].key;
			endvptr = edges7[endoffset].data[0].key;
			#endif 
		}
	#endif
	#endif 
	#endif 
	#endif 
	#endif
	#endif 
	#endif
	else {
		#ifdef _WIDEWORD 
		beginvptr = NAp; 
		endvptr = NAp; 
		#else 
		beginvptr = NAp;
		endvptr = NAp;
		#endif 
	}
	#endif 

	tuple_t t; t.A = beginvptr; t.B = endvptr;
	return t;
}

unsigned int 
	#ifdef SW 
	actsproc::
	#endif
getvptr(uint512_dt * kvdram, unsigned int baseoffset_kvs, unsigned int offset){
	keyvalue_t vptr_kv;
	
	uint512_dt V = kvdram[baseoffset_kvs + (offset / 16)];
	unsigned int M = (offset % 16) / 2;
	
	#ifdef _WIDEWORD
 if(M == 0){
		vptr_kv.key = V.range(31, 0); 
		vptr_kv.value = V.range(63, 32); 
	}
else if(M == 1){
		vptr_kv.key = V.range(95, 64); 
		vptr_kv.value = V.range(127, 96); 
	}
else if(M == 2){
		vptr_kv.key = V.range(159, 128); 
		vptr_kv.value = V.range(191, 160); 
	}
else if(M == 3){
		vptr_kv.key = V.range(223, 192); 
		vptr_kv.value = V.range(255, 224); 
	}
else if(M == 4){
		vptr_kv.key = V.range(287, 256); 
		vptr_kv.value = V.range(319, 288); 
	}
else if(M == 5){
		vptr_kv.key = V.range(351, 320); 
		vptr_kv.value = V.range(383, 352); 
	}
else if(M == 6){
		vptr_kv.key = V.range(415, 384); 
		vptr_kv.value = V.range(447, 416); 
	}
else {
		vptr_kv.key = V.range(479, 448); 
		vptr_kv.value = V.range(511, 480); 
	}
	#else 
 if(M == 0){
		vptr_kv.key = V.data[0].key; 
		vptr_kv.value = V.data[0].value; 
	}
else if(M == 1){
		vptr_kv.key = V.data[1].key; 
		vptr_kv.value = V.data[1].value; 
	}
else if(M == 2){
		vptr_kv.key = V.data[2].key; 
		vptr_kv.value = V.data[2].value; 
	}
else if(M == 3){
		vptr_kv.key = V.data[3].key; 
		vptr_kv.value = V.data[3].value; 
	}
else if(M == 4){
		vptr_kv.key = V.data[4].key; 
		vptr_kv.value = V.data[4].value; 
	}
else if(M == 5){
		vptr_kv.key = V.data[5].key; 
		vptr_kv.value = V.data[5].value; 
	}
else if(M == 6){
		vptr_kv.key = V.data[6].key; 
		vptr_kv.value = V.data[6].value; 
	}
else {
		vptr_kv.key = V.data[7].key; 
		vptr_kv.value = V.data[7].value; 
	}
	#endif
	
	if(offset % 2 == 0){ return vptr_kv.key; }
	else { return vptr_kv.value; }
}
tuple_t 
	#ifdef SW 
	actsproc::
	#endif
getvptrs_opt( uint512_dt * kvdram, unsigned int baseoffset_kvs, unsigned int beginoffset, unsigned int endoffset, unsigned int edgebankID){
	#pragma HLS INLINE
	keyy_t beginvptr = 0;
	keyy_t endvptr = 0;
	
	beginoffset = beginoffset / VPTR_SHRINK_RATIO; // convert-to-appropriate-skip-format
	endoffset = endoffset / VPTR_SHRINK_RATIO;
	
	#if NUM_EDGE_BANKS==0
		beginvptr = getvptr(kvdram, baseoffset_kvs, beginoffset);
		endvptr = getvptr(kvdram, baseoffset_kvs, endoffset);
	#else
		if(edgebankID == 0){
			beginvptr = getvptr(edges0, baseoffset_kvs, beginoffset);
			endvptr = getvptr(edges0, baseoffset_kvs, endoffset);
		} 
		#if NUM_EDGE_BANKS>1
		else if(edgebankID == 1){
			beginvptr = getvptr(edges1, baseoffset_kvs, beginoffset);
			endvptr = getvptr(edges1, baseoffset_kvs, endoffset);
		} 
		#if NUM_EDGE_BANKS>2
		else if(edgebankID == 2){
			beginvptr = getvptr(edges2, baseoffset_kvs, beginoffset);
			endvptr = getvptr(edges2, baseoffset_kvs, endoffset);
		} 
		#if NUM_EDGE_BANKS>3
		else if(edgebankID == 3){
			beginvptr = getvptr(edges3, baseoffset_kvs, beginoffset);
			endvptr = getvptr(edges3, baseoffset_kvs, endoffset);
		} 
		#if NUM_EDGE_BANKS>4
		else if(edgebankID == 4){
			beginvptr = getvptr(edges4, baseoffset_kvs, beginoffset);
			endvptr = getvptr(edges4, baseoffset_kvs, endoffset);
		} 
		#if NUM_EDGE_BANKS>5
		else if(edgebankID == 5){
			beginvptr = getvptr(edges5, baseoffset_kvs, beginoffset);
			endvptr = getvptr(edges5, baseoffset_kvs, endoffset);
		} 
		#if NUM_EDGE_BANKS>6
		else if(edgebankID == 6){
			beginvptr = getvptr(edges6, baseoffset_kvs, beginoffset);
			endvptr = getvptr(edges6, baseoffset_kvs, endoffset);
		}
		#if NUM_EDGE_BANKS>7
		else if(edgebankID == 7){
			beginvptr = getvptr(edges7, baseoffset_kvs, beginoffset);
			endvptr = getvptr(edges7, baseoffset_kvs, endoffset);
		}
	#endif
	#endif 
	#endif 
	#endif 
	#endif
	#endif 
	#endif
	else {
		#ifdef _WIDEWORD 
		beginvptr = NAp; 
		endvptr = NAp; 
		#else 
		beginvptr = NAp;
		endvptr = NAp;
		#endif 
	}
	#endif 

	tuple_t t; t.A = beginvptr; t.B = endvptr;
	return t;
}

void
	#ifdef SW 
	actsproc::
	#endif 
copyvs(uint512_dt * kvdram, keyvalue_vbuffer_t vbuffer[VDATA_PACKINGSIZE][BLOCKRAM_SIZE], globalparams_t globalparamsK){
	analysis_type analysis_treedepth = TREE_DEPTH;
	analysis_type analysis_loop1 = 1;
	
	travstate_t rtravstate;
	
	#ifdef ENABLERECURSIVEPARTITIONING
	step_type currentLOP = globalparamsK.ACTSPARAMS_TREEDEPTH;
	batch_type num_source_partitions = get_num_source_partitions(globalparamsK.ACTSPARAMS_TREEDEPTH);
	#else
	step_type currentLOP = globalparamsK.ACTSPARAMS_TREEDEPTH + 1;
	batch_type num_source_partitions = NUM_PARTITIONS;
	#endif
	buffer_type reducebuffersz = globalparamsK.SIZE_REDUCE / 2; // 512
	
	unsigned int sourcestatsmarker = 0;
	#ifdef ENABLERECURSIVEPARTITIONING
	LOADSRCVS_LOOP1: for(unsigned int k=0; k<globalparamsK.ACTSPARAMS_TREEDEPTH-1; k++)
	#else 
	LOADSRCVS_LOOP1: for(unsigned int k=0; k<globalparamsK.ACTSPARAMS_TREEDEPTH; k++)
	#endif 
	{
	#pragma HLS LOOP_TRIPCOUNT min=0 max=analysis_treedepth avg=analysis_treedepth
		sourcestatsmarker += (1 << (NUM_PARTITIONS_POW * k)); 
	}
	
	unsigned int gmask_buffer[BLOCKRAM_SIZE]; // AUTOMATEME.
	LOADSRCVS_LOOP2: for(unsigned int iterationidx=0; iterationidx<num_source_partitions; iterationidx++){
	#pragma HLS PIPELINE II=1
		#ifdef _WIDEWORD
		gmask_buffer[iterationidx] = kvdram[globalparamsK.BASEOFFSETKVS_VERTICESPARTITIONMASK + iterationidx].range(31, 0);
		#else 
		gmask_buffer[iterationidx] = kvdram[globalparamsK.BASEOFFSETKVS_VERTICESPARTITIONMASK + iterationidx].data[0].key;
		#endif
	}
	
	LOADSRCVS_LOOP3: for(batch_type iterationidx=0; iterationidx<num_source_partitions; iterationidx+=1){
	#pragma HLS LOOP_TRIPCOUNT min=0 max=analysis_loop1 avg=analysis_loop1
		if(gmask_buffer[iterationidx] > 0){
			readvdata(ON, kvdram, globalparamsK.BASEOFFSETKVS_DESTVERTICESDATA + (iterationidx * reducebuffersz * FETFACTOR), vbuffer, 0, 0, reducebuffersz, globalparamsK);
			readvdata(ON, kvdram, globalparamsK.BASEOFFSETKVS_DESTVERTICESDATA + (iterationidx * reducebuffersz * FETFACTOR) + reducebuffersz, vbuffer, 8, 0, reducebuffersz, globalparamsK);
			
			savevdata(ON, kvdram, globalparamsK.BASEOFFSETKVS_SRCVERTICESDATA + (iterationidx * reducebuffersz * FETFACTOR), vbuffer, 0, 0, reducebuffersz, globalparamsK);
			savevdata(ON, kvdram, globalparamsK.BASEOFFSETKVS_SRCVERTICESDATA + (iterationidx * reducebuffersz * FETFACTOR) + reducebuffersz, vbuffer, 8, 0, reducebuffersz, globalparamsK);
		}
	}
	return;
}

void
	#ifdef SW 
	actsproc::
	#endif 
copystats(uint512_dt * edges, uint512_dt * kvdram, globalparams_t globalparamsE, globalparams_t globalparamsK){
	analysis_type analysis_treedepth = TREE_DEPTH;
	analysis_type analysis_loop1 = 1;
	
	COPYSTATS_LOOP1: for(unsigned int k=0; k<globalparamsK.SIZE_KVSTATSDRAM; k++){
	#pragma HLS PIPELINE II=1
		kvdram[globalparamsK.BASEOFFSETKVS_STATSDRAM + k] = edges[globalparamsE.BASEOFFSETKVS_STATSDRAM + k];
	}
	return;
}

void
	#ifdef SW 
	actsproc::
	#endif 
copyallstats( uint512_dt * kvdram, globalparams_t globalparamsE, globalparams_t globalparamsK, unsigned int edgebankID){
	analysis_type analysis_treedepth = TREE_DEPTH;
	analysis_type analysis_loop1 = 1;

	return;
}

// functions (process)
value_t 
	#ifdef SW 
	actsproc::
	#endif 
processfunc(value_t udata, value_t edgew, unsigned int GraphAlgo){
	value_t res = 0;
	if(GraphAlgo == PAGERANK){
		res = udata;
	} else if(GraphAlgo == BFS){
		res = NAp;
	} else if(GraphAlgo == SSSP){
		res = udata + edgew;
	} else {
		res = NAp;
	}
	return res;
}

#ifdef ORIGINAL_XXXXXXXXXXXXXXXX
fetchmessage_t 
	#ifdef SW 
	actsproc::
	#endif 
readandprocess(bool_type enable, uint512_dt * edges, uint512_dt * kvdram, keyvalue_vbuffer_t vbuffer[VDATA_PACKINGSIZE][BLOCKRAM_SIZE], unitBRAMwidth_type vmask[BLOCKRAM_SIZE], unitBRAMwidth_type vmask_subp[BLOCKRAM_SIZE], keyvalue_buffer_t buffer[VECTOR_SIZE][SOURCEBLOCKRAM_SIZE], 
		batch_type goffset_kvs, batch_type loffset_kvs, batch_type size_kvs, travstate_t travstate, sweepparams_t sweepparams, globalparams_t globalparams){
	fetchmessage_t fetchmessage;
	fetchmessage.chunksize_kvs = -1;
	fetchmessage.nextoffset_kvs = -1;
	if(enable == OFF){ return fetchmessage; }
	
	analysis_type analysis_loop = BLOCKRAM_SIZE / 2;
	analysis_type analysis_loop1 = SUBPMASKFACTOR;
	analysis_type analysis_loop2 = 16384 / SUBPMASKFACTOR;
	
	value_t E[2][VECTOR_SIZE];
	#pragma HLS ARRAY_PARTITION variable=E complete
	bool_type en = ON;
	
	buffer_type reducebuffersz = globalparams.SIZE_REDUCE / 2;
	unsigned int validbound = reducebuffersz * FETFACTOR * VECTOR2_SIZE;
	
	travstate.i_kvs = travstate.i_kvs / 2;
	travstate.end_kvs = travstate.end_kvs / 2;
	loffset_kvs = loffset_kvs / 2;
	buffer_type edgessize_kvs = size_kvs / 2;
	
	batch_type offset_kvs = goffset_kvs + loffset_kvs;
	
	vertex_t srcvid;
	vertex_t lvid;
	vertex_t lvid_sob = INVALIDDATA;
	vertex_t lvid_eob = INVALIDDATA; 
	vertex_t firstvalidlvid = INVALIDDATA;
	vertex_t lastvalidlvid = INVALIDDATA; 
	
	batch_type vptrbaseoffset_kvs = globalparams.BASEOFFSETKVS_VERTEXPTR + (globalparams.ACTSPARAMS_SRCVOFFSET / VECTOR_SIZE);
	batch_type voffset_kvs = sweepparams.source_partition * reducebuffersz * FETFACTOR;
	keyy_t nextbeginvptr;
	keyy_t nextbeginvptr_kvs;
	
	fetchmessage.chunksize_kvs = edgessize_kvs;
	fetchmessage.nextoffset_kvs = -1;
	buffer_type loadcount = 0;
	
	unsigned int found = 0;
	unsigned int found1 = 0;
	int nextactivei = -1;
	int subpidx = -1;
	unsigned int GraphAlgo = globalparams.ALGORITHMINFO_GRAPHALGORITHMID;
	
	buffer_type chunk_size = getchunksize_kvs(edgessize_kvs, travstate, 0);
	READANDPROCESS_LOOP1: for (buffer_type i=0; i<chunk_size; i++){
	#pragma HLS LOOP_TRIPCOUNT min=0 max=analysis_loop avg=analysis_loop	
	#pragma HLS PIPELINE II=1

		#ifdef _WIDEWORD
		E[0][0] = edges[offset_kvs + i].range(31, 0); 
		E[0][1] = edges[offset_kvs + i].range(63, 32); 
		E[0][2] = edges[offset_kvs + i].range(95, 64); 
		E[0][3] = edges[offset_kvs + i].range(127, 96); 
		E[0][4] = edges[offset_kvs + i].range(159, 128); 
		E[0][5] = edges[offset_kvs + i].range(191, 160); 
		E[0][6] = edges[offset_kvs + i].range(223, 192); 
		E[0][7] = edges[offset_kvs + i].range(255, 224); 
		E[1][0] = edges[offset_kvs + i].range(287, 256); 
		E[1][1] = edges[offset_kvs + i].range(319, 288); 
		E[1][2] = edges[offset_kvs + i].range(351, 320); 
		E[1][3] = edges[offset_kvs + i].range(383, 352); 
		E[1][4] = edges[offset_kvs + i].range(415, 384); 
		E[1][5] = edges[offset_kvs + i].range(447, 416); 
		E[1][6] = edges[offset_kvs + i].range(479, 448); 
		E[1][7] = edges[offset_kvs + i].range(511, 480); 
		#else 
		E[0][0] = edges[offset_kvs + i].data[0].key; 
		E[0][1] = edges[offset_kvs + i].data[0].value; 
		E[0][2] = edges[offset_kvs + i].data[1].key; 
		E[0][3] = edges[offset_kvs + i].data[1].value; 
		E[0][4] = edges[offset_kvs + i].data[2].key; 
		E[0][5] = edges[offset_kvs + i].data[2].value; 
		E[0][6] = edges[offset_kvs + i].data[3].key; 
		E[0][7] = edges[offset_kvs + i].data[3].value; 
		E[1][0] = edges[offset_kvs + i].data[4+0].key; 
		E[1][1] = edges[offset_kvs + i].data[4+0].value; 
		E[1][2] = edges[offset_kvs + i].data[4+1].key; 
		E[1][3] = edges[offset_kvs + i].data[4+1].value; 
		E[1][4] = edges[offset_kvs + i].data[4+2].key; 
		E[1][5] = edges[offset_kvs + i].data[4+2].value; 
		E[1][6] = edges[offset_kvs + i].data[4+3].key; 
		E[1][7] = edges[offset_kvs + i].data[4+3].value; 
		#endif
		
		en = ON;
		
		srcvid = E[0][0];
		lvid = srcvid - travstate.i2;
		
		if(i == 0){ lvid_sob = lvid; } 
		if(i == chunk_size-1){ lvid_eob = lvid; } 
		
		if(lvid >= validbound || srcvid == UNUSEDDATA){ en = OFF; lvid = 0; }
		#ifdef _DEBUGMODE_CHECKS2
		if(srcvid < travstate.i2){ cout<<"readandprocess: INVALID srcvid. this is an error. i: "<<i<<", srcvid: "<<srcvid<<", travstate.i2: "<<travstate.i2<<" offset_kvs: "<<offset_kvs<<". exiting..."<<endl; 
			for(unsigned int v=0; v<VECTOR_SIZE; v++){ cout<<"readandprocess: E[0]["<<v<<"]: "<<E[0][v]<<", E[1]["<<v<<"]: "<<E[1][v]<<endl; }
			exit(EXIT_FAILURE); }
		actsutilityobj->checkoutofbounds("readandprocess.1", lvid, reducebuffersz * FETFACTOR * VECTOR2_SIZE, srcvid, travstate.i2, NAp);
		#endif
		
		value_t udata = GETVTXDATA(vbuffer, lvid, globalparams);
		unsigned int mask;
		if(GraphAlgo == PAGERANK){ mask = 1; } 
		else { mask = GETVTXMASK(vmask, lvid, globalparams); }
		value_t res  = processfunc(udata, 1, globalparams.ALGORITHMINFO_GRAPHALGORITHMID); 
		
		if(en == ON && mask == 1 && firstvalidlvid == INVALIDDATA){ firstvalidlvid = lvid; } // NEWCHANGE.
		if(en == ON && mask == 1){ lastvalidlvid = lvid; }
		
		#ifdef _DEBUGMODE_CHECKS2
		actsutilityobj->checkoutofbounds("readandprocess.1", mask, 2, NAp, NAp, NAp);
		#endif
		
		#ifdef _DEBUGMODE_KERNELPRINTS_TRACE3
		if(en == ON && mask == 1){
			if(true){ cout<<"readandprocess: i: "<<i<<", mask: "<<mask<<", srcvid: "<<srcvid<<", travstate.i2: "<<travstate.i2<<", lvid: "<<lvid<<", udata: "<<udata<<endl; }
			for(unsigned int v=0; v<VECTOR_SIZE; v++){ cout<<"readandprocess: udata: "<<udata<<", E[0]["<<v<<"]: "<<E[0][v]<<", sweepparams.source_partition: "<<sweepparams.source_partition<<endl; }
			for(unsigned int v=0; v<VECTOR_SIZE; v++){ cout<<"readandprocess: udata: "<<udata<<", E[1]["<<v<<"]: "<<E[1][v]<<", sweepparams.source_partition: "<<sweepparams.source_partition<<endl; }
		}
		#endif
		
		keyvalue_t mykeyvalue00;
		keyvalue_t mykeyvalue01;
		keyvalue_t mykeyvalue02;
		keyvalue_t mykeyvalue03;
		keyvalue_t mykeyvalue04;
		keyvalue_t mykeyvalue05;
		keyvalue_t mykeyvalue06;
		keyvalue_t mykeyvalue07;
		keyvalue_t mykeyvalue10;
		keyvalue_t mykeyvalue11;
		keyvalue_t mykeyvalue12;
		keyvalue_t mykeyvalue13;
		keyvalue_t mykeyvalue14;
		keyvalue_t mykeyvalue15;
		keyvalue_t mykeyvalue16;
		keyvalue_t mykeyvalue17;
		
		if(en == ON && mask == 1){
			mykeyvalue00.key = E[0][0]; 
			mykeyvalue00.value = res; 
			mykeyvalue01.key = E[0][1]; 
			mykeyvalue01.value = res; 
			mykeyvalue02.key = E[0][2]; 
			mykeyvalue02.value = res; 
			mykeyvalue03.key = E[0][3]; 
			mykeyvalue03.value = res; 
			mykeyvalue04.key = E[0][4]; 
			mykeyvalue04.value = res; 
			mykeyvalue05.key = E[0][5]; 
			mykeyvalue05.value = res; 
			mykeyvalue06.key = E[0][6]; 
			mykeyvalue06.value = res; 
			mykeyvalue07.key = E[0][7]; 
			mykeyvalue07.value = res; 
			mykeyvalue10.key = E[1][0]; 
			mykeyvalue10.value = res; 
			mykeyvalue11.key = E[1][1]; 
			mykeyvalue11.value = res; 
			mykeyvalue12.key = E[1][2]; 
			mykeyvalue12.value = res; 
			mykeyvalue13.key = E[1][3]; 
			mykeyvalue13.value = res; 
			mykeyvalue14.key = E[1][4]; 
			mykeyvalue14.value = res; 
			mykeyvalue15.key = E[1][5]; 
			mykeyvalue15.value = res; 
			mykeyvalue16.key = E[1][6]; 
			mykeyvalue16.value = res; 
			mykeyvalue17.key = E[1][7]; 
			mykeyvalue17.value = res; 
		} else {
			mykeyvalue00.key = INVALIDDATA; 
			mykeyvalue00.value = INVALIDDATA; 
			mykeyvalue01.key = INVALIDDATA; 
			mykeyvalue01.value = INVALIDDATA; 
			mykeyvalue02.key = INVALIDDATA; 
			mykeyvalue02.value = INVALIDDATA; 
			mykeyvalue03.key = INVALIDDATA; 
			mykeyvalue03.value = INVALIDDATA; 
			mykeyvalue04.key = INVALIDDATA; 
			mykeyvalue04.value = INVALIDDATA; 
			mykeyvalue05.key = INVALIDDATA; 
			mykeyvalue05.value = INVALIDDATA; 
			mykeyvalue06.key = INVALIDDATA; 
			mykeyvalue06.value = INVALIDDATA; 
			mykeyvalue07.key = INVALIDDATA; 
			mykeyvalue07.value = INVALIDDATA; 
			mykeyvalue10.key = INVALIDDATA; 
			mykeyvalue10.value = INVALIDDATA; 
			mykeyvalue11.key = INVALIDDATA; 
			mykeyvalue11.value = INVALIDDATA; 
			mykeyvalue12.key = INVALIDDATA; 
			mykeyvalue12.value = INVALIDDATA; 
			mykeyvalue13.key = INVALIDDATA; 
			mykeyvalue13.value = INVALIDDATA; 
			mykeyvalue14.key = INVALIDDATA; 
			mykeyvalue14.value = INVALIDDATA; 
			mykeyvalue15.key = INVALIDDATA; 
			mykeyvalue15.value = INVALIDDATA; 
			mykeyvalue16.key = INVALIDDATA; 
			mykeyvalue16.value = INVALIDDATA; 
			mykeyvalue17.key = INVALIDDATA; 
			mykeyvalue17.value = INVALIDDATA; 
		}
		
		mykeyvalue00.key = INVALIDDATA;
		mykeyvalue00.value = INVALIDDATA;
		
		buffer[0][loadcount] = GETKV(mykeyvalue00);
		buffer[0][loadcount + 1] = GETKV(mykeyvalue10);
		buffer[1][loadcount] = GETKV(mykeyvalue01);
		buffer[1][loadcount + 1] = GETKV(mykeyvalue11);
		buffer[2][loadcount] = GETKV(mykeyvalue02);
		buffer[2][loadcount + 1] = GETKV(mykeyvalue12);
		buffer[3][loadcount] = GETKV(mykeyvalue03);
		buffer[3][loadcount + 1] = GETKV(mykeyvalue13);
		buffer[4][loadcount] = GETKV(mykeyvalue04);
		buffer[4][loadcount + 1] = GETKV(mykeyvalue14);
		buffer[5][loadcount] = GETKV(mykeyvalue05);
		buffer[5][loadcount + 1] = GETKV(mykeyvalue15);
		buffer[6][loadcount] = GETKV(mykeyvalue06);
		buffer[6][loadcount + 1] = GETKV(mykeyvalue16);
		buffer[7][loadcount] = GETKV(mykeyvalue07);
		buffer[7][loadcount + 1] = GETKV(mykeyvalue17);
		if(en == ON && mask == 1){ loadcount += 2; }
		
		#ifdef _DEBUGMODE_STATS
		actsutilityobj->globalstats_countkvsprocessed(VECTOR_SIZE*2);
		if(en == ON && mask == 1){ actsutilityobj->globalstats_processedges_countvalidkvsprocessed(VECTOR_SIZE*2); }
		#endif 
	}
	
	#ifdef _DEBUGMODE_KERNELPRINTS
	cout<<"readandprocess:: lvid_sob: "<<lvid_sob<<", lvid_eob: "<<lvid_eob<<""<<endl;
	#endif
	
	fetchmessage.chunksize_kvs = loadcount;
	return fetchmessage;
}
#endif 

fetchmessage_t 
	#ifdef SW 
	actsproc::
	#endif 
readandprocess(bool_type enable, uint512_dt * edges, uint512_dt * kvdram, keyvalue_vbuffer_t vbuffer[VDATA_PACKINGSIZE][BLOCKRAM_SIZE], unitBRAMwidth_type vmask[BLOCKRAM_SIZE], unitBRAMwidth_type vmask_subp[BLOCKRAM_SIZE], keyvalue_buffer_t buffer[VECTOR_SIZE][SOURCEBLOCKRAM_SIZE], 
		batch_type goffset_kvs, batch_type loffset_kvs, batch_type size_kvs, travstate_t travstate, sweepparams_t sweepparams, globalparams_t globalparams){
	fetchmessage_t fetchmessage;
	fetchmessage.chunksize_kvs = -1;
	fetchmessage.nextoffset_kvs = -1;
	if(enable == OFF){ return fetchmessage; }
	
	analysis_type analysis_loop = BLOCKRAM_SIZE / 2;
	analysis_type analysis_loop1 = SUBPMASKFACTOR;
	analysis_type analysis_loop2 = 16384 / SUBPMASKFACTOR;
	
	value_t E[2][VECTOR2_SIZE];
	#pragma HLS ARRAY_PARTITION variable=E complete
	bool_type en = ON;
	bool_type ens[VECTOR2_SIZE];
	#pragma HLS ARRAY_PARTITION variable=ens complete
	
	buffer_type reducebuffersz = globalparams.SIZE_REDUCE / 2;
	unsigned int validbound = reducebuffersz * FETFACTOR * VECTOR2_SIZE;
	
	travstate.i_kvs = travstate.i_kvs / 2;
	travstate.end_kvs = travstate.end_kvs / 2;
	loffset_kvs = loffset_kvs / 2;
	buffer_type edgessize_kvs = size_kvs / 2;
	
	batch_type offset_kvs = goffset_kvs + loffset_kvs;
	
	value_t udatas[MAX_NUM_UNIQ_EDGES_PER_VEC]; // AUTOMATEME.
	#pragma HLS ARRAY_PARTITION variable=udatas complete
	value_t masks[MAX_NUM_UNIQ_EDGES_PER_VEC]; // AUTOMATEME.
	#pragma HLS ARRAY_PARTITION variable=masks complete
	vertex_t lvids[VECTOR2_SIZE];
	#pragma HLS ARRAY_PARTITION variable=lvids complete
	
	batch_type vptrbaseoffset_kvs = globalparams.BASEOFFSETKVS_VERTEXPTR + (globalparams.ACTSPARAMS_SRCVOFFSET / VECTOR_SIZE);
	batch_type voffset_kvs = sweepparams.source_partition * reducebuffersz * FETFACTOR;
	keyy_t nextbeginvptr;
	keyy_t nextbeginvptr_kvs;
	
	fetchmessage.chunksize_kvs = edgessize_kvs;
	fetchmessage.nextoffset_kvs = -1;
	buffer_type loadcount = 0;
	
	unsigned int found = 0;
	unsigned int found1 = 0;
	int nextactivei = -1;
	int subpidx = -1;
	unsigned int GraphAlgo = globalparams.ALGORITHMINFO_GRAPHALGORITHMID;
	
	buffer_type chunk_size = getchunksize_kvs(edgessize_kvs, travstate, 0);
	READANDPROCESS_LOOP1: for (buffer_type i=0; i<chunk_size; i++){
	#pragma HLS LOOP_TRIPCOUNT min=0 max=analysis_loop avg=analysis_loop	
	#pragma HLS PIPELINE II=1

		#ifdef _WIDEWORD
		E[0][0] = edges[offset_kvs + i].range(31, 0); 
		E[0][1] = edges[offset_kvs + i].range(63, 32); 
		E[0][2] = edges[offset_kvs + i].range(95, 64); 
		E[0][3] = edges[offset_kvs + i].range(127, 96); 
		E[0][4] = edges[offset_kvs + i].range(159, 128); 
		E[0][5] = edges[offset_kvs + i].range(191, 160); 
		E[0][6] = edges[offset_kvs + i].range(223, 192); 
		E[0][7] = edges[offset_kvs + i].range(255, 224); 
		E[0][8] = edges[offset_kvs + i].range(287, 256); 
		E[0][9] = edges[offset_kvs + i].range(319, 288); 
		E[0][10] = edges[offset_kvs + i].range(351, 320); 
		E[0][11] = edges[offset_kvs + i].range(383, 352); 
		E[0][12] = edges[offset_kvs + i].range(415, 384); 
		E[0][13] = edges[offset_kvs + i].range(447, 416); 
		E[0][14] = edges[offset_kvs + i].range(479, 448); 
		E[0][15] = edges[offset_kvs + i].range(511, 480); 
		#else 
		E[0][0] = edges[offset_kvs + i].data[0].key; 
		E[0][1] = edges[offset_kvs + i].data[0].value; 
		E[0][2] = edges[offset_kvs + i].data[1].key; 
		E[0][3] = edges[offset_kvs + i].data[1].value; 
		E[0][4] = edges[offset_kvs + i].data[2].key; 
		E[0][5] = edges[offset_kvs + i].data[2].value; 
		E[0][6] = edges[offset_kvs + i].data[3].key; 
		E[0][7] = edges[offset_kvs + i].data[3].value; 
		E[0][8] = edges[offset_kvs + i].data[4].key; 
		E[0][9] = edges[offset_kvs + i].data[4].value; 
		E[0][10] = edges[offset_kvs + i].data[5].key; 
		E[0][11] = edges[offset_kvs + i].data[5].value; 
		E[0][12] = edges[offset_kvs + i].data[6].key; 
		E[0][13] = edges[offset_kvs + i].data[6].value; 
		E[0][14] = edges[offset_kvs + i].data[7].key; 
		E[0][15] = edges[offset_kvs + i].data[7].value; 
		#endif
		
		bool_type en = ON;
		bool_type ens0 = ON; if(E[0][0] == INVALIDDATA || E[0][0] >= validbound){ ens0 = OFF; }
		bool_type ens1 = ON; if(E[0][1] == INVALIDDATA || E[0][1] >= validbound){ ens1 = OFF; }
		bool_type ens2 = ON; if(E[0][2] == INVALIDDATA || E[0][2] >= validbound){ ens2 = OFF; }
		bool_type ens3 = ON; if(E[0][3] == INVALIDDATA || E[0][3] >= validbound){ ens3 = OFF; }
		bool_type ens4 = ON; if(E[0][4] == INVALIDDATA || E[0][4] >= validbound){ ens4 = OFF; }
		bool_type ens5 = ON; if(E[0][5] == INVALIDDATA || E[0][5] >= validbound){ ens5 = OFF; }
		bool_type ens6 = ON; if(E[0][6] == INVALIDDATA || E[0][6] >= validbound){ ens6 = OFF; }
		bool_type ens7 = ON; if(E[0][7] == INVALIDDATA || E[0][7] >= validbound){ ens7 = OFF; }
		bool_type ens8 = ON; if(E[0][8] == INVALIDDATA || E[0][8] >= validbound){ ens8 = OFF; }
		bool_type ens9 = ON; if(E[0][9] == INVALIDDATA || E[0][9] >= validbound){ ens9 = OFF; }
		bool_type ens10 = ON; if(E[0][10] == INVALIDDATA || E[0][10] >= validbound){ ens10 = OFF; }
		bool_type ens11 = ON; if(E[0][11] == INVALIDDATA || E[0][11] >= validbound){ ens11 = OFF; }
		bool_type ens12 = ON; if(E[0][12] == INVALIDDATA || E[0][12] >= validbound){ ens12 = OFF; }
		bool_type ens13 = ON; if(E[0][13] == INVALIDDATA || E[0][13] >= validbound){ ens13 = OFF; }
		bool_type ens14 = ON; if(E[0][14] == INVALIDDATA || E[0][14] >= validbound){ ens14 = OFF; }
		bool_type ens15 = ON; if(E[0][15] == INVALIDDATA || E[0][15] >= validbound){ ens15 = OFF; }
		
		vertex_t srcvid_head = E[0][0];
		vertex_t lvid_head = srcvid_head - travstate.i2;
			#ifdef _DEBUGMODE_CHECKS2
			if(srcvid_head < travstate.i2){ cout<<"readandprocess: INVALID srcvid_head. this is an error. i: "<<i<<", srcvid_head: "<<srcvid_head<<", travstate.i2: "<<travstate.i2<<" offset_kvs: "<<offset_kvs<<". exiting..."<<endl; 
				for(unsigned int v=0; v<VECTOR_SIZE; v++){ cout<<"readandprocess: E[0]["<<v<<"]: "<<E[0][v]<<", E[1]["<<v<<"]: "<<E[1][v]<<endl; }
				exit(EXIT_FAILURE); }
			actsutilityobj->checkoutofbounds("readandprocess.1", lvid_head, reducebuffersz * FETFACTOR * VECTOR2_SIZE, srcvid_head, travstate.i2, NAp);
			#endif
		
 // AUTOMATEME. OPTIMIZEME. FIXME.BOTTLENECK
		udatas[0] = GETVTXDATA(vbuffer, lvid_head + 0, globalparams);
		masks[0] = GETVTXMASK(vmask, lvid_head + 0, globalparams); 
 // AUTOMATEME. OPTIMIZEME. FIXME.BOTTLENECK
		udatas[1] = GETVTXDATA(vbuffer, lvid_head + 1, globalparams);
		masks[1] = GETVTXMASK(vmask, lvid_head + 1, globalparams); 
 // AUTOMATEME. OPTIMIZEME. FIXME.BOTTLENECK
		udatas[2] = GETVTXDATA(vbuffer, lvid_head + 2, globalparams);
		masks[2] = GETVTXMASK(vmask, lvid_head + 2, globalparams); 
 // AUTOMATEME. OPTIMIZEME. FIXME.BOTTLENECK
		udatas[3] = GETVTXDATA(vbuffer, lvid_head + 3, globalparams);
		masks[3] = GETVTXMASK(vmask, lvid_head + 3, globalparams); 
 // AUTOMATEME. OPTIMIZEME. FIXME.BOTTLENECK
		udatas[4] = GETVTXDATA(vbuffer, lvid_head + 4, globalparams);
		masks[4] = GETVTXMASK(vmask, lvid_head + 4, globalparams); 
 // AUTOMATEME. OPTIMIZEME. FIXME.BOTTLENECK
		udatas[5] = GETVTXDATA(vbuffer, lvid_head + 5, globalparams);
		masks[5] = GETVTXMASK(vmask, lvid_head + 5, globalparams); 
 // AUTOMATEME. OPTIMIZEME. FIXME.BOTTLENECK
		udatas[6] = GETVTXDATA(vbuffer, lvid_head + 6, globalparams);
		masks[6] = GETVTXMASK(vmask, lvid_head + 6, globalparams); 
 // AUTOMATEME. OPTIMIZEME. FIXME.BOTTLENECK
		udatas[7] = GETVTXDATA(vbuffer, lvid_head + 7, globalparams);
		masks[7] = GETVTXMASK(vmask, lvid_head + 7, globalparams); 
			#ifdef _DEBUGMODE_CHECKS
			if(masks[0] > 2){ cout<<"ERROR @ readandprocess.masks[0].1. masks[0]: "<<masks[0]<<endl; for(unsigned int n=0; n<8; n++){ cout<<">>> readandprocess.mask: masks["<<n<<"]: "<<masks[n]<<", lvid + 0: "<<lvid + 0<<endl; } exit(EXIT_FAILURE); }
			if(masks[1] > 2){ cout<<"ERROR @ readandprocess.masks[1].1. masks[1]: "<<masks[1]<<endl; for(unsigned int n=0; n<8; n++){ cout<<">>> readandprocess.mask: masks["<<n<<"]: "<<masks[n]<<", lvid + 1: "<<lvid + 1<<endl; } exit(EXIT_FAILURE); }
			if(masks[2] > 2){ cout<<"ERROR @ readandprocess.masks[2].1. masks[2]: "<<masks[2]<<endl; for(unsigned int n=0; n<8; n++){ cout<<">>> readandprocess.mask: masks["<<n<<"]: "<<masks[n]<<", lvid + 2: "<<lvid + 2<<endl; } exit(EXIT_FAILURE); }
			if(masks[3] > 2){ cout<<"ERROR @ readandprocess.masks[3].1. masks[3]: "<<masks[3]<<endl; for(unsigned int n=0; n<8; n++){ cout<<">>> readandprocess.mask: masks["<<n<<"]: "<<masks[n]<<", lvid + 3: "<<lvid + 3<<endl; } exit(EXIT_FAILURE); }
			if(masks[4] > 2){ cout<<"ERROR @ readandprocess.masks[4].1. masks[4]: "<<masks[4]<<endl; for(unsigned int n=0; n<8; n++){ cout<<">>> readandprocess.mask: masks["<<n<<"]: "<<masks[n]<<", lvid + 4: "<<lvid + 4<<endl; } exit(EXIT_FAILURE); }
			if(masks[5] > 2){ cout<<"ERROR @ readandprocess.masks[5].1. masks[5]: "<<masks[5]<<endl; for(unsigned int n=0; n<8; n++){ cout<<">>> readandprocess.mask: masks["<<n<<"]: "<<masks[n]<<", lvid + 5: "<<lvid + 5<<endl; } exit(EXIT_FAILURE); }
			if(masks[6] > 2){ cout<<"ERROR @ readandprocess.masks[6].1. masks[6]: "<<masks[6]<<endl; for(unsigned int n=0; n<8; n++){ cout<<">>> readandprocess.mask: masks["<<n<<"]: "<<masks[n]<<", lvid + 6: "<<lvid + 6<<endl; } exit(EXIT_FAILURE); }
			if(masks[7] > 2){ cout<<"ERROR @ readandprocess.masks[7].1. masks[7]: "<<masks[7]<<endl; for(unsigned int n=0; n<8; n++){ cout<<">>> readandprocess.mask: masks["<<n<<"]: "<<masks[n]<<", lvid + 7: "<<lvid + 7<<endl; } exit(EXIT_FAILURE); }
			#endif
		
		unsigned int incr0 = READFROM_UINT(E[0][0], 28, 4);
		unsigned int lsrcvids0 = lvid_head + incr0;
		unsigned int ldstvids0 = READFROM_UINT(E[0][0], 0, 28);
		unsigned int incr1 = READFROM_UINT(E[0][1], 28, 4);
		unsigned int lsrcvids1 = lvid_head + incr1;
		unsigned int ldstvids1 = READFROM_UINT(E[0][1], 0, 28);
		unsigned int incr2 = READFROM_UINT(E[0][2], 28, 4);
		unsigned int lsrcvids2 = lvid_head + incr2;
		unsigned int ldstvids2 = READFROM_UINT(E[0][2], 0, 28);
		unsigned int incr3 = READFROM_UINT(E[0][3], 28, 4);
		unsigned int lsrcvids3 = lvid_head + incr3;
		unsigned int ldstvids3 = READFROM_UINT(E[0][3], 0, 28);
		unsigned int incr4 = READFROM_UINT(E[0][4], 28, 4);
		unsigned int lsrcvids4 = lvid_head + incr4;
		unsigned int ldstvids4 = READFROM_UINT(E[0][4], 0, 28);
		unsigned int incr5 = READFROM_UINT(E[0][5], 28, 4);
		unsigned int lsrcvids5 = lvid_head + incr5;
		unsigned int ldstvids5 = READFROM_UINT(E[0][5], 0, 28);
		unsigned int incr6 = READFROM_UINT(E[0][6], 28, 4);
		unsigned int lsrcvids6 = lvid_head + incr6;
		unsigned int ldstvids6 = READFROM_UINT(E[0][6], 0, 28);
		unsigned int incr7 = READFROM_UINT(E[0][7], 28, 4);
		unsigned int lsrcvids7 = lvid_head + incr7;
		unsigned int ldstvids7 = READFROM_UINT(E[0][7], 0, 28);
		unsigned int incr8 = READFROM_UINT(E[0][8], 28, 4);
		unsigned int lsrcvids8 = lvid_head + incr8;
		unsigned int ldstvids8 = READFROM_UINT(E[0][8], 0, 28);
		unsigned int incr9 = READFROM_UINT(E[0][9], 28, 4);
		unsigned int lsrcvids9 = lvid_head + incr9;
		unsigned int ldstvids9 = READFROM_UINT(E[0][9], 0, 28);
		unsigned int incr10 = READFROM_UINT(E[0][10], 28, 4);
		unsigned int lsrcvids10 = lvid_head + incr10;
		unsigned int ldstvids10 = READFROM_UINT(E[0][10], 0, 28);
		unsigned int incr11 = READFROM_UINT(E[0][11], 28, 4);
		unsigned int lsrcvids11 = lvid_head + incr11;
		unsigned int ldstvids11 = READFROM_UINT(E[0][11], 0, 28);
		unsigned int incr12 = READFROM_UINT(E[0][12], 28, 4);
		unsigned int lsrcvids12 = lvid_head + incr12;
		unsigned int ldstvids12 = READFROM_UINT(E[0][12], 0, 28);
		unsigned int incr13 = READFROM_UINT(E[0][13], 28, 4);
		unsigned int lsrcvids13 = lvid_head + incr13;
		unsigned int ldstvids13 = READFROM_UINT(E[0][13], 0, 28);
		unsigned int incr14 = READFROM_UINT(E[0][14], 28, 4);
		unsigned int lsrcvids14 = lvid_head + incr14;
		unsigned int ldstvids14 = READFROM_UINT(E[0][14], 0, 28);
		unsigned int incr15 = READFROM_UINT(E[0][15], 28, 4);
		unsigned int lsrcvids15 = lvid_head + incr15;
		unsigned int ldstvids15 = READFROM_UINT(E[0][15], 0, 28);
			#ifdef _DEBUGMODE_CHECKS2
			if(ens0 == ON && incr0 > MAX_NUM_UNIQ_EDGES_PER_VEC){ cout<<"readandprocess: incr0("<<incr0<<") > MAX_NUM_UNIQ_EDGES_PER_VEC("<<MAX_NUM_UNIQ_EDGES_PER_VEC<<"). lsrcvids0: "<<lsrcvids0<<", ldstvids0: "<<ldstvids0<<endl; exit(EXIT_FAILURE); }
			if(ens1 == ON && incr1 > MAX_NUM_UNIQ_EDGES_PER_VEC){ cout<<"readandprocess: incr1("<<incr1<<") > MAX_NUM_UNIQ_EDGES_PER_VEC("<<MAX_NUM_UNIQ_EDGES_PER_VEC<<"). lsrcvids1: "<<lsrcvids1<<", ldstvids1: "<<ldstvids1<<endl; exit(EXIT_FAILURE); }
			if(ens2 == ON && incr2 > MAX_NUM_UNIQ_EDGES_PER_VEC){ cout<<"readandprocess: incr2("<<incr2<<") > MAX_NUM_UNIQ_EDGES_PER_VEC("<<MAX_NUM_UNIQ_EDGES_PER_VEC<<"). lsrcvids2: "<<lsrcvids2<<", ldstvids2: "<<ldstvids2<<endl; exit(EXIT_FAILURE); }
			if(ens3 == ON && incr3 > MAX_NUM_UNIQ_EDGES_PER_VEC){ cout<<"readandprocess: incr3("<<incr3<<") > MAX_NUM_UNIQ_EDGES_PER_VEC("<<MAX_NUM_UNIQ_EDGES_PER_VEC<<"). lsrcvids3: "<<lsrcvids3<<", ldstvids3: "<<ldstvids3<<endl; exit(EXIT_FAILURE); }
			if(ens4 == ON && incr4 > MAX_NUM_UNIQ_EDGES_PER_VEC){ cout<<"readandprocess: incr4("<<incr4<<") > MAX_NUM_UNIQ_EDGES_PER_VEC("<<MAX_NUM_UNIQ_EDGES_PER_VEC<<"). lsrcvids4: "<<lsrcvids4<<", ldstvids4: "<<ldstvids4<<endl; exit(EXIT_FAILURE); }
			if(ens5 == ON && incr5 > MAX_NUM_UNIQ_EDGES_PER_VEC){ cout<<"readandprocess: incr5("<<incr5<<") > MAX_NUM_UNIQ_EDGES_PER_VEC("<<MAX_NUM_UNIQ_EDGES_PER_VEC<<"). lsrcvids5: "<<lsrcvids5<<", ldstvids5: "<<ldstvids5<<endl; exit(EXIT_FAILURE); }
			if(ens6 == ON && incr6 > MAX_NUM_UNIQ_EDGES_PER_VEC){ cout<<"readandprocess: incr6("<<incr6<<") > MAX_NUM_UNIQ_EDGES_PER_VEC("<<MAX_NUM_UNIQ_EDGES_PER_VEC<<"). lsrcvids6: "<<lsrcvids6<<", ldstvids6: "<<ldstvids6<<endl; exit(EXIT_FAILURE); }
			if(ens7 == ON && incr7 > MAX_NUM_UNIQ_EDGES_PER_VEC){ cout<<"readandprocess: incr7("<<incr7<<") > MAX_NUM_UNIQ_EDGES_PER_VEC("<<MAX_NUM_UNIQ_EDGES_PER_VEC<<"). lsrcvids7: "<<lsrcvids7<<", ldstvids7: "<<ldstvids7<<endl; exit(EXIT_FAILURE); }
			if(ens8 == ON && incr8 > MAX_NUM_UNIQ_EDGES_PER_VEC){ cout<<"readandprocess: incr8("<<incr8<<") > MAX_NUM_UNIQ_EDGES_PER_VEC("<<MAX_NUM_UNIQ_EDGES_PER_VEC<<"). lsrcvids8: "<<lsrcvids8<<", ldstvids8: "<<ldstvids8<<endl; exit(EXIT_FAILURE); }
			if(ens9 == ON && incr9 > MAX_NUM_UNIQ_EDGES_PER_VEC){ cout<<"readandprocess: incr9("<<incr9<<") > MAX_NUM_UNIQ_EDGES_PER_VEC("<<MAX_NUM_UNIQ_EDGES_PER_VEC<<"). lsrcvids9: "<<lsrcvids9<<", ldstvids9: "<<ldstvids9<<endl; exit(EXIT_FAILURE); }
			if(ens10 == ON && incr10 > MAX_NUM_UNIQ_EDGES_PER_VEC){ cout<<"readandprocess: incr10("<<incr10<<") > MAX_NUM_UNIQ_EDGES_PER_VEC("<<MAX_NUM_UNIQ_EDGES_PER_VEC<<"). lsrcvids10: "<<lsrcvids10<<", ldstvids10: "<<ldstvids10<<endl; exit(EXIT_FAILURE); }
			if(ens11 == ON && incr11 > MAX_NUM_UNIQ_EDGES_PER_VEC){ cout<<"readandprocess: incr11("<<incr11<<") > MAX_NUM_UNIQ_EDGES_PER_VEC("<<MAX_NUM_UNIQ_EDGES_PER_VEC<<"). lsrcvids11: "<<lsrcvids11<<", ldstvids11: "<<ldstvids11<<endl; exit(EXIT_FAILURE); }
			if(ens12 == ON && incr12 > MAX_NUM_UNIQ_EDGES_PER_VEC){ cout<<"readandprocess: incr12("<<incr12<<") > MAX_NUM_UNIQ_EDGES_PER_VEC("<<MAX_NUM_UNIQ_EDGES_PER_VEC<<"). lsrcvids12: "<<lsrcvids12<<", ldstvids12: "<<ldstvids12<<endl; exit(EXIT_FAILURE); }
			if(ens13 == ON && incr13 > MAX_NUM_UNIQ_EDGES_PER_VEC){ cout<<"readandprocess: incr13("<<incr13<<") > MAX_NUM_UNIQ_EDGES_PER_VEC("<<MAX_NUM_UNIQ_EDGES_PER_VEC<<"). lsrcvids13: "<<lsrcvids13<<", ldstvids13: "<<ldstvids13<<endl; exit(EXIT_FAILURE); }
			if(ens14 == ON && incr14 > MAX_NUM_UNIQ_EDGES_PER_VEC){ cout<<"readandprocess: incr14("<<incr14<<") > MAX_NUM_UNIQ_EDGES_PER_VEC("<<MAX_NUM_UNIQ_EDGES_PER_VEC<<"). lsrcvids14: "<<lsrcvids14<<", ldstvids14: "<<ldstvids14<<endl; exit(EXIT_FAILURE); }
			if(ens15 == ON && incr15 > MAX_NUM_UNIQ_EDGES_PER_VEC){ cout<<"readandprocess: incr15("<<incr15<<") > MAX_NUM_UNIQ_EDGES_PER_VEC("<<MAX_NUM_UNIQ_EDGES_PER_VEC<<"). lsrcvids15: "<<lsrcvids15<<", ldstvids15: "<<ldstvids15<<endl; exit(EXIT_FAILURE); }
			#endif
		
		unsigned int mask0; // OPTIMIZEME. bittype_t
		unsigned int mask1; // OPTIMIZEME. bittype_t
		unsigned int mask2; // OPTIMIZEME. bittype_t
		unsigned int mask3; // OPTIMIZEME. bittype_t
		unsigned int mask4; // OPTIMIZEME. bittype_t
		unsigned int mask5; // OPTIMIZEME. bittype_t
		unsigned int mask6; // OPTIMIZEME. bittype_t
		unsigned int mask7; // OPTIMIZEME. bittype_t
		unsigned int mask8; // OPTIMIZEME. bittype_t
		unsigned int mask9; // OPTIMIZEME. bittype_t
		unsigned int mask10; // OPTIMIZEME. bittype_t
		unsigned int mask11; // OPTIMIZEME. bittype_t
		unsigned int mask12; // OPTIMIZEME. bittype_t
		unsigned int mask13; // OPTIMIZEME. bittype_t
		unsigned int mask14; // OPTIMIZEME. bittype_t
		unsigned int mask15; // OPTIMIZEME. bittype_t
		if(GraphAlgo == PAGERANK){  mask0 = 1;  mask1 = 1;  mask2 = 1;  mask3 = 1;  mask4 = 1;  mask5 = 1;  mask6 = 1;  mask7 = 1;  mask8 = 1;  mask9 = 1;  mask10 = 1;  mask11 = 1;  mask12 = 1;  mask13 = 1;  mask14 = 1;  mask15 = 1;  mask0 == 0; } 
		else {  mask0 = masks[incr0];  mask1 = masks[incr1];  mask2 = masks[incr2];  mask3 = masks[incr3];  mask4 = masks[incr4];  mask5 = masks[incr5];  mask6 = masks[incr6];  mask7 = masks[incr7];  mask8 = masks[incr8];  mask9 = masks[incr9];  mask10 = masks[incr10];  mask11 = masks[incr11];  mask12 = masks[incr12];  mask13 = masks[incr13];  mask14 = masks[incr14];  mask15 = masks[incr15];  mask0 == 0; }
			#ifdef _DEBUGMODE_CHECKS2
			if(ens0 == ON && mask0 > 2){ 
				cout<<"ERROR @ readandprocess.mask0.2. mask0: "<<mask0<<", incr0: "<<incr0<<endl; 
				for(unsigned int n=0; n<MAX_NUM_UNIQ_EDGES_PER_VEC; n++){ cout<<">>> readandprocess.mask: masks["<<n<<"]: "<<masks[n]<<endl; } 
				for(unsigned int n=0; n<16; n++){ cout<<">>> readandprocess.mask: E[0]["<<n<<"].dstvid: "<<READFROM_UINT(E[0][n], 0, 28)<<", E[0]["<<n<<"].incr: "<<READFROM_UINT(E[0][0], 28, 4)<<endl; } 
				exit(EXIT_FAILURE); 
			}
			if(ens1 == ON && mask1 > 2){ 
				cout<<"ERROR @ readandprocess.mask1.2. mask1: "<<mask1<<", incr1: "<<incr1<<endl; 
				for(unsigned int n=0; n<MAX_NUM_UNIQ_EDGES_PER_VEC; n++){ cout<<">>> readandprocess.mask: masks["<<n<<"]: "<<masks[n]<<endl; } 
				for(unsigned int n=0; n<16; n++){ cout<<">>> readandprocess.mask: E[0]["<<n<<"].dstvid: "<<READFROM_UINT(E[0][n], 0, 28)<<", E[0]["<<n<<"].incr: "<<READFROM_UINT(E[0][1], 28, 4)<<endl; } 
				exit(EXIT_FAILURE); 
			}
			if(ens2 == ON && mask2 > 2){ 
				cout<<"ERROR @ readandprocess.mask2.2. mask2: "<<mask2<<", incr2: "<<incr2<<endl; 
				for(unsigned int n=0; n<MAX_NUM_UNIQ_EDGES_PER_VEC; n++){ cout<<">>> readandprocess.mask: masks["<<n<<"]: "<<masks[n]<<endl; } 
				for(unsigned int n=0; n<16; n++){ cout<<">>> readandprocess.mask: E[0]["<<n<<"].dstvid: "<<READFROM_UINT(E[0][n], 0, 28)<<", E[0]["<<n<<"].incr: "<<READFROM_UINT(E[0][2], 28, 4)<<endl; } 
				exit(EXIT_FAILURE); 
			}
			if(ens3 == ON && mask3 > 2){ 
				cout<<"ERROR @ readandprocess.mask3.2. mask3: "<<mask3<<", incr3: "<<incr3<<endl; 
				for(unsigned int n=0; n<MAX_NUM_UNIQ_EDGES_PER_VEC; n++){ cout<<">>> readandprocess.mask: masks["<<n<<"]: "<<masks[n]<<endl; } 
				for(unsigned int n=0; n<16; n++){ cout<<">>> readandprocess.mask: E[0]["<<n<<"].dstvid: "<<READFROM_UINT(E[0][n], 0, 28)<<", E[0]["<<n<<"].incr: "<<READFROM_UINT(E[0][3], 28, 4)<<endl; } 
				exit(EXIT_FAILURE); 
			}
			if(ens4 == ON && mask4 > 2){ 
				cout<<"ERROR @ readandprocess.mask4.2. mask4: "<<mask4<<", incr4: "<<incr4<<endl; 
				for(unsigned int n=0; n<MAX_NUM_UNIQ_EDGES_PER_VEC; n++){ cout<<">>> readandprocess.mask: masks["<<n<<"]: "<<masks[n]<<endl; } 
				for(unsigned int n=0; n<16; n++){ cout<<">>> readandprocess.mask: E[0]["<<n<<"].dstvid: "<<READFROM_UINT(E[0][n], 0, 28)<<", E[0]["<<n<<"].incr: "<<READFROM_UINT(E[0][4], 28, 4)<<endl; } 
				exit(EXIT_FAILURE); 
			}
			if(ens5 == ON && mask5 > 2){ 
				cout<<"ERROR @ readandprocess.mask5.2. mask5: "<<mask5<<", incr5: "<<incr5<<endl; 
				for(unsigned int n=0; n<MAX_NUM_UNIQ_EDGES_PER_VEC; n++){ cout<<">>> readandprocess.mask: masks["<<n<<"]: "<<masks[n]<<endl; } 
				for(unsigned int n=0; n<16; n++){ cout<<">>> readandprocess.mask: E[0]["<<n<<"].dstvid: "<<READFROM_UINT(E[0][n], 0, 28)<<", E[0]["<<n<<"].incr: "<<READFROM_UINT(E[0][5], 28, 4)<<endl; } 
				exit(EXIT_FAILURE); 
			}
			if(ens6 == ON && mask6 > 2){ 
				cout<<"ERROR @ readandprocess.mask6.2. mask6: "<<mask6<<", incr6: "<<incr6<<endl; 
				for(unsigned int n=0; n<MAX_NUM_UNIQ_EDGES_PER_VEC; n++){ cout<<">>> readandprocess.mask: masks["<<n<<"]: "<<masks[n]<<endl; } 
				for(unsigned int n=0; n<16; n++){ cout<<">>> readandprocess.mask: E[0]["<<n<<"].dstvid: "<<READFROM_UINT(E[0][n], 0, 28)<<", E[0]["<<n<<"].incr: "<<READFROM_UINT(E[0][6], 28, 4)<<endl; } 
				exit(EXIT_FAILURE); 
			}
			if(ens7 == ON && mask7 > 2){ 
				cout<<"ERROR @ readandprocess.mask7.2. mask7: "<<mask7<<", incr7: "<<incr7<<endl; 
				for(unsigned int n=0; n<MAX_NUM_UNIQ_EDGES_PER_VEC; n++){ cout<<">>> readandprocess.mask: masks["<<n<<"]: "<<masks[n]<<endl; } 
				for(unsigned int n=0; n<16; n++){ cout<<">>> readandprocess.mask: E[0]["<<n<<"].dstvid: "<<READFROM_UINT(E[0][n], 0, 28)<<", E[0]["<<n<<"].incr: "<<READFROM_UINT(E[0][7], 28, 4)<<endl; } 
				exit(EXIT_FAILURE); 
			}
			if(ens8 == ON && mask8 > 2){ 
				cout<<"ERROR @ readandprocess.mask8.2. mask8: "<<mask8<<", incr8: "<<incr8<<endl; 
				for(unsigned int n=0; n<MAX_NUM_UNIQ_EDGES_PER_VEC; n++){ cout<<">>> readandprocess.mask: masks["<<n<<"]: "<<masks[n]<<endl; } 
				for(unsigned int n=0; n<16; n++){ cout<<">>> readandprocess.mask: E[0]["<<n<<"].dstvid: "<<READFROM_UINT(E[0][n], 0, 28)<<", E[0]["<<n<<"].incr: "<<READFROM_UINT(E[0][8], 28, 4)<<endl; } 
				exit(EXIT_FAILURE); 
			}
			if(ens9 == ON && mask9 > 2){ 
				cout<<"ERROR @ readandprocess.mask9.2. mask9: "<<mask9<<", incr9: "<<incr9<<endl; 
				for(unsigned int n=0; n<MAX_NUM_UNIQ_EDGES_PER_VEC; n++){ cout<<">>> readandprocess.mask: masks["<<n<<"]: "<<masks[n]<<endl; } 
				for(unsigned int n=0; n<16; n++){ cout<<">>> readandprocess.mask: E[0]["<<n<<"].dstvid: "<<READFROM_UINT(E[0][n], 0, 28)<<", E[0]["<<n<<"].incr: "<<READFROM_UINT(E[0][9], 28, 4)<<endl; } 
				exit(EXIT_FAILURE); 
			}
			if(ens10 == ON && mask10 > 2){ 
				cout<<"ERROR @ readandprocess.mask10.2. mask10: "<<mask10<<", incr10: "<<incr10<<endl; 
				for(unsigned int n=0; n<MAX_NUM_UNIQ_EDGES_PER_VEC; n++){ cout<<">>> readandprocess.mask: masks["<<n<<"]: "<<masks[n]<<endl; } 
				for(unsigned int n=0; n<16; n++){ cout<<">>> readandprocess.mask: E[0]["<<n<<"].dstvid: "<<READFROM_UINT(E[0][n], 0, 28)<<", E[0]["<<n<<"].incr: "<<READFROM_UINT(E[0][10], 28, 4)<<endl; } 
				exit(EXIT_FAILURE); 
			}
			if(ens11 == ON && mask11 > 2){ 
				cout<<"ERROR @ readandprocess.mask11.2. mask11: "<<mask11<<", incr11: "<<incr11<<endl; 
				for(unsigned int n=0; n<MAX_NUM_UNIQ_EDGES_PER_VEC; n++){ cout<<">>> readandprocess.mask: masks["<<n<<"]: "<<masks[n]<<endl; } 
				for(unsigned int n=0; n<16; n++){ cout<<">>> readandprocess.mask: E[0]["<<n<<"].dstvid: "<<READFROM_UINT(E[0][n], 0, 28)<<", E[0]["<<n<<"].incr: "<<READFROM_UINT(E[0][11], 28, 4)<<endl; } 
				exit(EXIT_FAILURE); 
			}
			if(ens12 == ON && mask12 > 2){ 
				cout<<"ERROR @ readandprocess.mask12.2. mask12: "<<mask12<<", incr12: "<<incr12<<endl; 
				for(unsigned int n=0; n<MAX_NUM_UNIQ_EDGES_PER_VEC; n++){ cout<<">>> readandprocess.mask: masks["<<n<<"]: "<<masks[n]<<endl; } 
				for(unsigned int n=0; n<16; n++){ cout<<">>> readandprocess.mask: E[0]["<<n<<"].dstvid: "<<READFROM_UINT(E[0][n], 0, 28)<<", E[0]["<<n<<"].incr: "<<READFROM_UINT(E[0][12], 28, 4)<<endl; } 
				exit(EXIT_FAILURE); 
			}
			if(ens13 == ON && mask13 > 2){ 
				cout<<"ERROR @ readandprocess.mask13.2. mask13: "<<mask13<<", incr13: "<<incr13<<endl; 
				for(unsigned int n=0; n<MAX_NUM_UNIQ_EDGES_PER_VEC; n++){ cout<<">>> readandprocess.mask: masks["<<n<<"]: "<<masks[n]<<endl; } 
				for(unsigned int n=0; n<16; n++){ cout<<">>> readandprocess.mask: E[0]["<<n<<"].dstvid: "<<READFROM_UINT(E[0][n], 0, 28)<<", E[0]["<<n<<"].incr: "<<READFROM_UINT(E[0][13], 28, 4)<<endl; } 
				exit(EXIT_FAILURE); 
			}
			if(ens14 == ON && mask14 > 2){ 
				cout<<"ERROR @ readandprocess.mask14.2. mask14: "<<mask14<<", incr14: "<<incr14<<endl; 
				for(unsigned int n=0; n<MAX_NUM_UNIQ_EDGES_PER_VEC; n++){ cout<<">>> readandprocess.mask: masks["<<n<<"]: "<<masks[n]<<endl; } 
				for(unsigned int n=0; n<16; n++){ cout<<">>> readandprocess.mask: E[0]["<<n<<"].dstvid: "<<READFROM_UINT(E[0][n], 0, 28)<<", E[0]["<<n<<"].incr: "<<READFROM_UINT(E[0][14], 28, 4)<<endl; } 
				exit(EXIT_FAILURE); 
			}
			if(ens15 == ON && mask15 > 2){ 
				cout<<"ERROR @ readandprocess.mask15.2. mask15: "<<mask15<<", incr15: "<<incr15<<endl; 
				for(unsigned int n=0; n<MAX_NUM_UNIQ_EDGES_PER_VEC; n++){ cout<<">>> readandprocess.mask: masks["<<n<<"]: "<<masks[n]<<endl; } 
				for(unsigned int n=0; n<16; n++){ cout<<">>> readandprocess.mask: E[0]["<<n<<"].dstvid: "<<READFROM_UINT(E[0][n], 0, 28)<<", E[0]["<<n<<"].incr: "<<READFROM_UINT(E[0][15], 28, 4)<<endl; } 
				exit(EXIT_FAILURE); 
			}
			#endif
		
		value_t res0 = processfunc(udatas[incr0], 1, globalparams.ALGORITHMINFO_GRAPHALGORITHMID); 
		value_t res1 = processfunc(udatas[incr1], 1, globalparams.ALGORITHMINFO_GRAPHALGORITHMID); 
		value_t res2 = processfunc(udatas[incr2], 1, globalparams.ALGORITHMINFO_GRAPHALGORITHMID); 
		value_t res3 = processfunc(udatas[incr3], 1, globalparams.ALGORITHMINFO_GRAPHALGORITHMID); 
		value_t res4 = processfunc(udatas[incr4], 1, globalparams.ALGORITHMINFO_GRAPHALGORITHMID); 
		value_t res5 = processfunc(udatas[incr5], 1, globalparams.ALGORITHMINFO_GRAPHALGORITHMID); 
		value_t res6 = processfunc(udatas[incr6], 1, globalparams.ALGORITHMINFO_GRAPHALGORITHMID); 
		value_t res7 = processfunc(udatas[incr7], 1, globalparams.ALGORITHMINFO_GRAPHALGORITHMID); 
		value_t res8 = processfunc(udatas[incr8], 1, globalparams.ALGORITHMINFO_GRAPHALGORITHMID); 
		value_t res9 = processfunc(udatas[incr9], 1, globalparams.ALGORITHMINFO_GRAPHALGORITHMID); 
		value_t res10 = processfunc(udatas[incr10], 1, globalparams.ALGORITHMINFO_GRAPHALGORITHMID); 
		value_t res11 = processfunc(udatas[incr11], 1, globalparams.ALGORITHMINFO_GRAPHALGORITHMID); 
		value_t res12 = processfunc(udatas[incr12], 1, globalparams.ALGORITHMINFO_GRAPHALGORITHMID); 
		value_t res13 = processfunc(udatas[incr13], 1, globalparams.ALGORITHMINFO_GRAPHALGORITHMID); 
		value_t res14 = processfunc(udatas[incr14], 1, globalparams.ALGORITHMINFO_GRAPHALGORITHMID); 
		value_t res15 = processfunc(udatas[incr15], 1, globalparams.ALGORITHMINFO_GRAPHALGORITHMID); 
			#ifdef _DEBUGMODE_KERNELPRINTS_TRACE3
			if(ens0 == ON && mask0 == 1){ cout<<"readandprocess: [lsrcvids0: "<<lsrcvids0<<", ldstvids0: "<<ldstvids0<<", udata: "<<udatas[incr0]<<"]. sweepparams.source_partition: "<<sweepparams.source_partition<<endl; }
			if(ens1 == ON && mask1 == 1){ cout<<"readandprocess: [lsrcvids1: "<<lsrcvids1<<", ldstvids1: "<<ldstvids1<<", udata: "<<udatas[incr1]<<"]. sweepparams.source_partition: "<<sweepparams.source_partition<<endl; }
			if(ens2 == ON && mask2 == 1){ cout<<"readandprocess: [lsrcvids2: "<<lsrcvids2<<", ldstvids2: "<<ldstvids2<<", udata: "<<udatas[incr2]<<"]. sweepparams.source_partition: "<<sweepparams.source_partition<<endl; }
			if(ens3 == ON && mask3 == 1){ cout<<"readandprocess: [lsrcvids3: "<<lsrcvids3<<", ldstvids3: "<<ldstvids3<<", udata: "<<udatas[incr3]<<"]. sweepparams.source_partition: "<<sweepparams.source_partition<<endl; }
			if(ens4 == ON && mask4 == 1){ cout<<"readandprocess: [lsrcvids4: "<<lsrcvids4<<", ldstvids4: "<<ldstvids4<<", udata: "<<udatas[incr4]<<"]. sweepparams.source_partition: "<<sweepparams.source_partition<<endl; }
			if(ens5 == ON && mask5 == 1){ cout<<"readandprocess: [lsrcvids5: "<<lsrcvids5<<", ldstvids5: "<<ldstvids5<<", udata: "<<udatas[incr5]<<"]. sweepparams.source_partition: "<<sweepparams.source_partition<<endl; }
			if(ens6 == ON && mask6 == 1){ cout<<"readandprocess: [lsrcvids6: "<<lsrcvids6<<", ldstvids6: "<<ldstvids6<<", udata: "<<udatas[incr6]<<"]. sweepparams.source_partition: "<<sweepparams.source_partition<<endl; }
			if(ens7 == ON && mask7 == 1){ cout<<"readandprocess: [lsrcvids7: "<<lsrcvids7<<", ldstvids7: "<<ldstvids7<<", udata: "<<udatas[incr7]<<"]. sweepparams.source_partition: "<<sweepparams.source_partition<<endl; }
			if(ens8 == ON && mask8 == 1){ cout<<"readandprocess: [lsrcvids8: "<<lsrcvids8<<", ldstvids8: "<<ldstvids8<<", udata: "<<udatas[incr8]<<"]. sweepparams.source_partition: "<<sweepparams.source_partition<<endl; }
			if(ens9 == ON && mask9 == 1){ cout<<"readandprocess: [lsrcvids9: "<<lsrcvids9<<", ldstvids9: "<<ldstvids9<<", udata: "<<udatas[incr9]<<"]. sweepparams.source_partition: "<<sweepparams.source_partition<<endl; }
			if(ens10 == ON && mask10 == 1){ cout<<"readandprocess: [lsrcvids10: "<<lsrcvids10<<", ldstvids10: "<<ldstvids10<<", udata: "<<udatas[incr10]<<"]. sweepparams.source_partition: "<<sweepparams.source_partition<<endl; }
			if(ens11 == ON && mask11 == 1){ cout<<"readandprocess: [lsrcvids11: "<<lsrcvids11<<", ldstvids11: "<<ldstvids11<<", udata: "<<udatas[incr11]<<"]. sweepparams.source_partition: "<<sweepparams.source_partition<<endl; }
			if(ens12 == ON && mask12 == 1){ cout<<"readandprocess: [lsrcvids12: "<<lsrcvids12<<", ldstvids12: "<<ldstvids12<<", udata: "<<udatas[incr12]<<"]. sweepparams.source_partition: "<<sweepparams.source_partition<<endl; }
			if(ens13 == ON && mask13 == 1){ cout<<"readandprocess: [lsrcvids13: "<<lsrcvids13<<", ldstvids13: "<<ldstvids13<<", udata: "<<udatas[incr13]<<"]. sweepparams.source_partition: "<<sweepparams.source_partition<<endl; }
			if(ens14 == ON && mask14 == 1){ cout<<"readandprocess: [lsrcvids14: "<<lsrcvids14<<", ldstvids14: "<<ldstvids14<<", udata: "<<udatas[incr14]<<"]. sweepparams.source_partition: "<<sweepparams.source_partition<<endl; }
			if(ens15 == ON && mask15 == 1){ cout<<"readandprocess: [lsrcvids15: "<<lsrcvids15<<", ldstvids15: "<<ldstvids15<<", udata: "<<udatas[incr15]<<"]. sweepparams.source_partition: "<<sweepparams.source_partition<<endl; }
			#endif
		
		keyvalue_t mykeyvalue0; if(ens0 == ON && mask0 == 1){ mykeyvalue0.key = ldstvids0; mykeyvalue0.value = res0; } else { mykeyvalue0.key = INVALIDDATA; mykeyvalue0.value = INVALIDDATA;  }
		keyvalue_t mykeyvalue1; if(ens1 == ON && mask1 == 1){ mykeyvalue1.key = ldstvids1; mykeyvalue1.value = res1; } else { mykeyvalue1.key = INVALIDDATA; mykeyvalue1.value = INVALIDDATA;  }
		keyvalue_t mykeyvalue2; if(ens2 == ON && mask2 == 1){ mykeyvalue2.key = ldstvids2; mykeyvalue2.value = res2; } else { mykeyvalue2.key = INVALIDDATA; mykeyvalue2.value = INVALIDDATA;  }
		keyvalue_t mykeyvalue3; if(ens3 == ON && mask3 == 1){ mykeyvalue3.key = ldstvids3; mykeyvalue3.value = res3; } else { mykeyvalue3.key = INVALIDDATA; mykeyvalue3.value = INVALIDDATA;  }
		keyvalue_t mykeyvalue4; if(ens4 == ON && mask4 == 1){ mykeyvalue4.key = ldstvids4; mykeyvalue4.value = res4; } else { mykeyvalue4.key = INVALIDDATA; mykeyvalue4.value = INVALIDDATA;  }
		keyvalue_t mykeyvalue5; if(ens5 == ON && mask5 == 1){ mykeyvalue5.key = ldstvids5; mykeyvalue5.value = res5; } else { mykeyvalue5.key = INVALIDDATA; mykeyvalue5.value = INVALIDDATA;  }
		keyvalue_t mykeyvalue6; if(ens6 == ON && mask6 == 1){ mykeyvalue6.key = ldstvids6; mykeyvalue6.value = res6; } else { mykeyvalue6.key = INVALIDDATA; mykeyvalue6.value = INVALIDDATA;  }
		keyvalue_t mykeyvalue7; if(ens7 == ON && mask7 == 1){ mykeyvalue7.key = ldstvids7; mykeyvalue7.value = res7; } else { mykeyvalue7.key = INVALIDDATA; mykeyvalue7.value = INVALIDDATA;  }
		keyvalue_t mykeyvalue8; if(ens8 == ON && mask8 == 1){ mykeyvalue8.key = ldstvids8; mykeyvalue8.value = res8; } else { mykeyvalue8.key = INVALIDDATA; mykeyvalue8.value = INVALIDDATA;  }
		keyvalue_t mykeyvalue9; if(ens9 == ON && mask9 == 1){ mykeyvalue9.key = ldstvids9; mykeyvalue9.value = res9; } else { mykeyvalue9.key = INVALIDDATA; mykeyvalue9.value = INVALIDDATA;  }
		keyvalue_t mykeyvalue10; if(ens10 == ON && mask10 == 1){ mykeyvalue10.key = ldstvids10; mykeyvalue10.value = res10; } else { mykeyvalue10.key = INVALIDDATA; mykeyvalue10.value = INVALIDDATA;  }
		keyvalue_t mykeyvalue11; if(ens11 == ON && mask11 == 1){ mykeyvalue11.key = ldstvids11; mykeyvalue11.value = res11; } else { mykeyvalue11.key = INVALIDDATA; mykeyvalue11.value = INVALIDDATA;  }
		keyvalue_t mykeyvalue12; if(ens12 == ON && mask12 == 1){ mykeyvalue12.key = ldstvids12; mykeyvalue12.value = res12; } else { mykeyvalue12.key = INVALIDDATA; mykeyvalue12.value = INVALIDDATA;  }
		keyvalue_t mykeyvalue13; if(ens13 == ON && mask13 == 1){ mykeyvalue13.key = ldstvids13; mykeyvalue13.value = res13; } else { mykeyvalue13.key = INVALIDDATA; mykeyvalue13.value = INVALIDDATA;  }
		keyvalue_t mykeyvalue14; if(ens14 == ON && mask14 == 1){ mykeyvalue14.key = ldstvids14; mykeyvalue14.value = res14; } else { mykeyvalue14.key = INVALIDDATA; mykeyvalue14.value = INVALIDDATA;  }
		keyvalue_t mykeyvalue15; if(ens15 == ON && mask15 == 1){ mykeyvalue15.key = ldstvids15; mykeyvalue15.value = res15; } else { mykeyvalue15.key = INVALIDDATA; mykeyvalue15.value = INVALIDDATA;  }
		mykeyvalue0.key = INVALIDDATA;
		mykeyvalue0.value = INVALIDDATA;
		
		buffer[0][loadcount] = GETKV(mykeyvalue0);
		buffer[1][loadcount] = GETKV(mykeyvalue1);
		buffer[2][loadcount] = GETKV(mykeyvalue2);
		buffer[3][loadcount] = GETKV(mykeyvalue3);
		buffer[4][loadcount] = GETKV(mykeyvalue4);
		buffer[5][loadcount] = GETKV(mykeyvalue5);
		buffer[6][loadcount] = GETKV(mykeyvalue6);
		buffer[7][loadcount] = GETKV(mykeyvalue7);
		buffer[8][loadcount] = GETKV(mykeyvalue8);
		buffer[9][loadcount] = GETKV(mykeyvalue9);
		buffer[10][loadcount] = GETKV(mykeyvalue10);
		buffer[11][loadcount] = GETKV(mykeyvalue11);
		buffer[12][loadcount] = GETKV(mykeyvalue12);
		buffer[13][loadcount] = GETKV(mykeyvalue13);
		buffer[14][loadcount] = GETKV(mykeyvalue14);
		buffer[15][loadcount] = GETKV(mykeyvalue15);
		if(
(ens0 == ON && mask0 == 1)
||(ens1 == ON && mask1 == 1)
||(ens2 == ON && mask2 == 1)
||(ens3 == ON && mask3 == 1)
||(ens4 == ON && mask4 == 1)
||(ens5 == ON && mask5 == 1)
||(ens6 == ON && mask6 == 1)
||(ens7 == ON && mask7 == 1)
||(ens8 == ON && mask8 == 1)
||(ens9 == ON && mask9 == 1)
||(ens10 == ON && mask10 == 1)
||(ens11 == ON && mask11 == 1)
||(ens12 == ON && mask12 == 1)
||(ens13 == ON && mask13 == 1)
||(ens14 == ON && mask14 == 1)
||(ens15 == ON && mask15 == 1)
 )
		{ loadcount += 2; } // mask0? FIXME. CRITICAL OPTIMIZEME
		
			#ifdef _DEBUGMODE_STATS
			actsutilityobj->globalstats_countkvsprocessed(1);
			if(ens0 == ON && mask0 == 1){ actsutilityobj->globalstats_processedges_countvalidkvsprocessed(1); } // mask0? FIXME.
			actsutilityobj->globalstats_countkvsprocessed(1);
			if(ens1 == ON && mask1 == 1){ actsutilityobj->globalstats_processedges_countvalidkvsprocessed(1); } // mask0? FIXME.
			actsutilityobj->globalstats_countkvsprocessed(1);
			if(ens2 == ON && mask2 == 1){ actsutilityobj->globalstats_processedges_countvalidkvsprocessed(1); } // mask0? FIXME.
			actsutilityobj->globalstats_countkvsprocessed(1);
			if(ens3 == ON && mask3 == 1){ actsutilityobj->globalstats_processedges_countvalidkvsprocessed(1); } // mask0? FIXME.
			actsutilityobj->globalstats_countkvsprocessed(1);
			if(ens4 == ON && mask4 == 1){ actsutilityobj->globalstats_processedges_countvalidkvsprocessed(1); } // mask0? FIXME.
			actsutilityobj->globalstats_countkvsprocessed(1);
			if(ens5 == ON && mask5 == 1){ actsutilityobj->globalstats_processedges_countvalidkvsprocessed(1); } // mask0? FIXME.
			actsutilityobj->globalstats_countkvsprocessed(1);
			if(ens6 == ON && mask6 == 1){ actsutilityobj->globalstats_processedges_countvalidkvsprocessed(1); } // mask0? FIXME.
			actsutilityobj->globalstats_countkvsprocessed(1);
			if(ens7 == ON && mask7 == 1){ actsutilityobj->globalstats_processedges_countvalidkvsprocessed(1); } // mask0? FIXME.
			actsutilityobj->globalstats_countkvsprocessed(1);
			if(ens8 == ON && mask8 == 1){ actsutilityobj->globalstats_processedges_countvalidkvsprocessed(1); } // mask0? FIXME.
			actsutilityobj->globalstats_countkvsprocessed(1);
			if(ens9 == ON && mask9 == 1){ actsutilityobj->globalstats_processedges_countvalidkvsprocessed(1); } // mask0? FIXME.
			actsutilityobj->globalstats_countkvsprocessed(1);
			if(ens10 == ON && mask10 == 1){ actsutilityobj->globalstats_processedges_countvalidkvsprocessed(1); } // mask0? FIXME.
			actsutilityobj->globalstats_countkvsprocessed(1);
			if(ens11 == ON && mask11 == 1){ actsutilityobj->globalstats_processedges_countvalidkvsprocessed(1); } // mask0? FIXME.
			actsutilityobj->globalstats_countkvsprocessed(1);
			if(ens12 == ON && mask12 == 1){ actsutilityobj->globalstats_processedges_countvalidkvsprocessed(1); } // mask0? FIXME.
			actsutilityobj->globalstats_countkvsprocessed(1);
			if(ens13 == ON && mask13 == 1){ actsutilityobj->globalstats_processedges_countvalidkvsprocessed(1); } // mask0? FIXME.
			actsutilityobj->globalstats_countkvsprocessed(1);
			if(ens14 == ON && mask14 == 1){ actsutilityobj->globalstats_processedges_countvalidkvsprocessed(1); } // mask0? FIXME.
			actsutilityobj->globalstats_countkvsprocessed(1);
			if(ens15 == ON && mask15 == 1){ actsutilityobj->globalstats_processedges_countvalidkvsprocessed(1); } // mask0? FIXME.
			#endif 
	}
	fetchmessage.chunksize_kvs = loadcount;
	return fetchmessage;
}

// functions (partition)
void 
	#ifdef SW 
	actsproc::
	#endif
preparekeyvalues(bool_type enable1, bool_type enable2, keyvalue_buffer_t sourcebuffer[VECTOR_SIZE][SOURCEBLOCKRAM_SIZE], keyvalue_buffer_t destbuffer[VECTOR_SIZE][BLOCKRAM_SIZE], keyvalue_capsule_t localcapsule[VECTOR_SIZE][MAX_NUM_PARTITIONS], step_type currentLOP, sweepparams_t sweepparams, buffer_type size_kvs, buffer_type cutoffs[VECTOR_SIZE], globalparams_t globalparams){				
	if(enable1 == OFF && enable2 == OFF){ return; }
	analysis_type analysis_loop1 = WORKBUFFER_SIZE;
	analysis_type analysis_dummyfiller = SRCBUFFER_SIZE - WORKBUFFER_SIZE;
	
	value_t emptyslot[VECTOR_SIZE];
	#pragma HLS ARRAY_PARTITION variable=emptyslot complete
	resetvalues(emptyslot, VECTOR_SIZE, 0);
	
	buffer_type chunk_size = size_kvs;
	unsigned int upperlimit = sweepparams.upperlimit;
	unsigned int upperpartition = sweepparams.upperpartition;
	
	for(partition_type p=0; p<MAX_NUM_PARTITIONS; p++){ 
		localcapsule[0][p].key = 0;
		localcapsule[0][p].value = 0; 
		localcapsule[1][p].key = 0;
		localcapsule[1][p].value = 0; 
		localcapsule[2][p].key = 0;
		localcapsule[2][p].value = 0; 
		localcapsule[3][p].key = 0;
		localcapsule[3][p].value = 0; 
		localcapsule[4][p].key = 0;
		localcapsule[4][p].value = 0; 
		localcapsule[5][p].key = 0;
		localcapsule[5][p].value = 0; 
		localcapsule[6][p].key = 0;
		localcapsule[6][p].value = 0; 
		localcapsule[7][p].key = 0;
		localcapsule[7][p].value = 0; 
	}
	
	PREPAREKEYVALUES_LOOP1: for(buffer_type i=0; i<chunk_size; i++){
	#pragma HLS LOOP_TRIPCOUNT min=0 max=analysis_loop1 avg=analysis_loop1	
	#pragma HLS PIPELINE II=2
		keyvalue_buffer_t keyvalue0 = sourcebuffer[0][i];
		keyvalue_buffer_t keyvalue1 = sourcebuffer[1][i];
		keyvalue_buffer_t keyvalue2 = sourcebuffer[2][i];
		keyvalue_buffer_t keyvalue3 = sourcebuffer[3][i];
		keyvalue_buffer_t keyvalue4 = sourcebuffer[4][i];
		keyvalue_buffer_t keyvalue5 = sourcebuffer[5][i];
		keyvalue_buffer_t keyvalue6 = sourcebuffer[6][i];
		keyvalue_buffer_t keyvalue7 = sourcebuffer[7][i];
		
		keyvalue_t mykeyvalue0 = GETKV(keyvalue0);
		keyvalue_t mykeyvalue1 = GETKV(keyvalue1);
		keyvalue_t mykeyvalue2 = GETKV(keyvalue2);
		keyvalue_t mykeyvalue3 = GETKV(keyvalue3);
		keyvalue_t mykeyvalue4 = GETKV(keyvalue4);
		keyvalue_t mykeyvalue5 = GETKV(keyvalue5);
		keyvalue_t mykeyvalue6 = GETKV(keyvalue6);
		keyvalue_t mykeyvalue7 = GETKV(keyvalue7);
		
		bool_type valid0 = ON;
		if(mykeyvalue0.key != GETK(INVALIDDATA) && mykeyvalue0.value != GETV(INVALIDDATA)){ valid0 = ON; } else { valid0 = OFF; }
		bool_type valid1 = ON;
		if(mykeyvalue1.key != GETK(INVALIDDATA) && mykeyvalue1.value != GETV(INVALIDDATA)){ valid1 = ON; } else { valid1 = OFF; }
		bool_type valid2 = ON;
		if(mykeyvalue2.key != GETK(INVALIDDATA) && mykeyvalue2.value != GETV(INVALIDDATA)){ valid2 = ON; } else { valid2 = OFF; }
		bool_type valid3 = ON;
		if(mykeyvalue3.key != GETK(INVALIDDATA) && mykeyvalue3.value != GETV(INVALIDDATA)){ valid3 = ON; } else { valid3 = OFF; }
		bool_type valid4 = ON;
		if(mykeyvalue4.key != GETK(INVALIDDATA) && mykeyvalue4.value != GETV(INVALIDDATA)){ valid4 = ON; } else { valid4 = OFF; }
		bool_type valid5 = ON;
		if(mykeyvalue5.key != GETK(INVALIDDATA) && mykeyvalue5.value != GETV(INVALIDDATA)){ valid5 = ON; } else { valid5 = OFF; }
		bool_type valid6 = ON;
		if(mykeyvalue6.key != GETK(INVALIDDATA) && mykeyvalue6.value != GETV(INVALIDDATA)){ valid6 = ON; } else { valid6 = OFF; }
		bool_type valid7 = ON;
		if(mykeyvalue7.key != GETK(INVALIDDATA) && mykeyvalue7.value != GETV(INVALIDDATA)){ valid7 = ON; } else { valid7 = OFF; }
		
		partition_type p0 = 0;
		if(valid0 == ON){ p0 = getpartition(ON, keyvalue0, currentLOP, upperlimit, upperpartition, globalparams.POW_BATCHRANGE); }
		partition_type p1 = 0;
		if(valid1 == ON){ p1 = getpartition(ON, keyvalue1, currentLOP, upperlimit, upperpartition, globalparams.POW_BATCHRANGE); }
		partition_type p2 = 0;
		if(valid2 == ON){ p2 = getpartition(ON, keyvalue2, currentLOP, upperlimit, upperpartition, globalparams.POW_BATCHRANGE); }
		partition_type p3 = 0;
		if(valid3 == ON){ p3 = getpartition(ON, keyvalue3, currentLOP, upperlimit, upperpartition, globalparams.POW_BATCHRANGE); }
		partition_type p4 = 0;
		if(valid4 == ON){ p4 = getpartition(ON, keyvalue4, currentLOP, upperlimit, upperpartition, globalparams.POW_BATCHRANGE); }
		partition_type p5 = 0;
		if(valid5 == ON){ p5 = getpartition(ON, keyvalue5, currentLOP, upperlimit, upperpartition, globalparams.POW_BATCHRANGE); }
		partition_type p6 = 0;
		if(valid6 == ON){ p6 = getpartition(ON, keyvalue6, currentLOP, upperlimit, upperpartition, globalparams.POW_BATCHRANGE); }
		partition_type p7 = 0;
		if(valid7 == ON){ p7 = getpartition(ON, keyvalue7, currentLOP, upperlimit, upperpartition, globalparams.POW_BATCHRANGE); }
		
		if(valid0 == ON){
			if(localcapsule[0][p0].value == 0){ 
				localcapsule[0][p0].key = emptyslot[0]; emptyslot[0] += 4;
			} else if(localcapsule[0][p0].value % 4 == 0){ 
				localcapsule[0][p0].key = emptyslot[0]; emptyslot[0] += 4;
			} else {}
		}
		if(valid1 == ON){
			if(localcapsule[1][p1].value == 0){ 
				localcapsule[1][p1].key = emptyslot[1]; emptyslot[1] += 4;
			} else if(localcapsule[1][p1].value % 4 == 0){ 
				localcapsule[1][p1].key = emptyslot[1]; emptyslot[1] += 4;
			} else {}
		}
		if(valid2 == ON){
			if(localcapsule[2][p2].value == 0){ 
				localcapsule[2][p2].key = emptyslot[2]; emptyslot[2] += 4;
			} else if(localcapsule[2][p2].value % 4 == 0){ 
				localcapsule[2][p2].key = emptyslot[2]; emptyslot[2] += 4;
			} else {}
		}
		if(valid3 == ON){
			if(localcapsule[3][p3].value == 0){ 
				localcapsule[3][p3].key = emptyslot[3]; emptyslot[3] += 4;
			} else if(localcapsule[3][p3].value % 4 == 0){ 
				localcapsule[3][p3].key = emptyslot[3]; emptyslot[3] += 4;
			} else {}
		}
		if(valid4 == ON){
			if(localcapsule[4][p4].value == 0){ 
				localcapsule[4][p4].key = emptyslot[4]; emptyslot[4] += 4;
			} else if(localcapsule[4][p4].value % 4 == 0){ 
				localcapsule[4][p4].key = emptyslot[4]; emptyslot[4] += 4;
			} else {}
		}
		if(valid5 == ON){
			if(localcapsule[5][p5].value == 0){ 
				localcapsule[5][p5].key = emptyslot[5]; emptyslot[5] += 4;
			} else if(localcapsule[5][p5].value % 4 == 0){ 
				localcapsule[5][p5].key = emptyslot[5]; emptyslot[5] += 4;
			} else {}
		}
		if(valid6 == ON){
			if(localcapsule[6][p6].value == 0){ 
				localcapsule[6][p6].key = emptyslot[6]; emptyslot[6] += 4;
			} else if(localcapsule[6][p6].value % 4 == 0){ 
				localcapsule[6][p6].key = emptyslot[6]; emptyslot[6] += 4;
			} else {}
		}
		if(valid7 == ON){
			if(localcapsule[7][p7].value == 0){ 
				localcapsule[7][p7].key = emptyslot[7]; emptyslot[7] += 4;
			} else if(localcapsule[7][p7].value % 4 == 0){ 
				localcapsule[7][p7].key = emptyslot[7]; emptyslot[7] += 4;
			} else {}
		}
		
		buffer_type loc0 = localcapsule[0][p0].key + (localcapsule[0][p0].value % 4);
		buffer_type loc1 = localcapsule[1][p1].key + (localcapsule[1][p1].value % 4);
		buffer_type loc2 = localcapsule[2][p2].key + (localcapsule[2][p2].value % 4);
		buffer_type loc3 = localcapsule[3][p3].key + (localcapsule[3][p3].value % 4);
		buffer_type loc4 = localcapsule[4][p4].key + (localcapsule[4][p4].value % 4);
		buffer_type loc5 = localcapsule[5][p5].key + (localcapsule[5][p5].value % 4);
		buffer_type loc6 = localcapsule[6][p6].key + (localcapsule[6][p6].value % 4);
		buffer_type loc7 = localcapsule[7][p7].key + (localcapsule[7][p7].value % 4);
		
		#ifdef _DEBUGMODE_CHECKS2
		actsutilityobj->checkoutofbounds("preparekeyvalues.localcapsule[0][p0].value", localcapsule[0][p0].value % 4, 4, localcapsule[0][p0].value, localcapsule[0][p0].value, NAp);
		actsutilityobj->checkoutofbounds("preparekeyvalues.loc0", loc0, SRCBUFFER_SIZE, localcapsule[0][p0].key, localcapsule[0][p0].value, NAp);
		actsutilityobj->checkoutofbounds("preparekeyvalues.localcapsule[1][p1].value", localcapsule[1][p1].value % 4, 4, localcapsule[1][p1].value, localcapsule[1][p1].value, NAp);
		actsutilityobj->checkoutofbounds("preparekeyvalues.loc1", loc1, SRCBUFFER_SIZE, localcapsule[1][p1].key, localcapsule[1][p1].value, NAp);
		actsutilityobj->checkoutofbounds("preparekeyvalues.localcapsule[2][p2].value", localcapsule[2][p2].value % 4, 4, localcapsule[2][p2].value, localcapsule[2][p2].value, NAp);
		actsutilityobj->checkoutofbounds("preparekeyvalues.loc2", loc2, SRCBUFFER_SIZE, localcapsule[2][p2].key, localcapsule[2][p2].value, NAp);
		actsutilityobj->checkoutofbounds("preparekeyvalues.localcapsule[3][p3].value", localcapsule[3][p3].value % 4, 4, localcapsule[3][p3].value, localcapsule[3][p3].value, NAp);
		actsutilityobj->checkoutofbounds("preparekeyvalues.loc3", loc3, SRCBUFFER_SIZE, localcapsule[3][p3].key, localcapsule[3][p3].value, NAp);
		actsutilityobj->checkoutofbounds("preparekeyvalues.localcapsule[4][p4].value", localcapsule[4][p4].value % 4, 4, localcapsule[4][p4].value, localcapsule[4][p4].value, NAp);
		actsutilityobj->checkoutofbounds("preparekeyvalues.loc4", loc4, SRCBUFFER_SIZE, localcapsule[4][p4].key, localcapsule[4][p4].value, NAp);
		actsutilityobj->checkoutofbounds("preparekeyvalues.localcapsule[5][p5].value", localcapsule[5][p5].value % 4, 4, localcapsule[5][p5].value, localcapsule[5][p5].value, NAp);
		actsutilityobj->checkoutofbounds("preparekeyvalues.loc5", loc5, SRCBUFFER_SIZE, localcapsule[5][p5].key, localcapsule[5][p5].value, NAp);
		actsutilityobj->checkoutofbounds("preparekeyvalues.localcapsule[6][p6].value", localcapsule[6][p6].value % 4, 4, localcapsule[6][p6].value, localcapsule[6][p6].value, NAp);
		actsutilityobj->checkoutofbounds("preparekeyvalues.loc6", loc6, SRCBUFFER_SIZE, localcapsule[6][p6].key, localcapsule[6][p6].value, NAp);
		actsutilityobj->checkoutofbounds("preparekeyvalues.localcapsule[7][p7].value", localcapsule[7][p7].value % 4, 4, localcapsule[7][p7].value, localcapsule[7][p7].value, NAp);
		actsutilityobj->checkoutofbounds("preparekeyvalues.loc7", loc7, SRCBUFFER_SIZE, localcapsule[7][p7].key, localcapsule[7][p7].value, NAp);
		#endif
		
		if(valid0 == ON){
			destbuffer[0][loc0] = keyvalue0;
			localcapsule[0][p0].value += 1;
		}
		if(valid1 == ON){
			destbuffer[1][loc1] = keyvalue1;
			localcapsule[1][p1].value += 1;
		}
		if(valid2 == ON){
			destbuffer[2][loc2] = keyvalue2;
			localcapsule[2][p2].value += 1;
		}
		if(valid3 == ON){
			destbuffer[3][loc3] = keyvalue3;
			localcapsule[3][p3].value += 1;
		}
		if(valid4 == ON){
			destbuffer[4][loc4] = keyvalue4;
			localcapsule[4][p4].value += 1;
		}
		if(valid5 == ON){
			destbuffer[5][loc5] = keyvalue5;
			localcapsule[5][p5].value += 1;
		}
		if(valid6 == ON){
			destbuffer[6][loc6] = keyvalue6;
			localcapsule[6][p6].value += 1;
		}
		if(valid7 == ON){
			destbuffer[7][loc7] = keyvalue7;
			localcapsule[7][p7].value += 1;
		}
	}
	
	for(partition_type p=0; p<MAX_NUM_PARTITIONS; p++){
		keyvalue_t mydummykv;
		mydummykv.key = p;
		mydummykv.value = INVALIDDATA;
		keyvalue_buffer_t dummykv = GETKV(mydummykv);
		for(vector_type k=0; k<4; k++){
		#pragma HLS PIPELINE II=2
			if(localcapsule[0][p].value > 0 && (localcapsule[0][p].value % 4) > 0){
				if(k >= localcapsule[0][p].value % 4){
					destbuffer[0][localcapsule[0][p].key + k] = dummykv;
					localcapsule[0][p].value += 1;
				}
			}
			if(localcapsule[1][p].value > 0 && (localcapsule[1][p].value % 4) > 0){
				if(k >= localcapsule[1][p].value % 4){
					destbuffer[1][localcapsule[1][p].key + k] = dummykv;
					localcapsule[1][p].value += 1;
				}
			}
			if(localcapsule[2][p].value > 0 && (localcapsule[2][p].value % 4) > 0){
				if(k >= localcapsule[2][p].value % 4){
					destbuffer[2][localcapsule[2][p].key + k] = dummykv;
					localcapsule[2][p].value += 1;
				}
			}
			if(localcapsule[3][p].value > 0 && (localcapsule[3][p].value % 4) > 0){
				if(k >= localcapsule[3][p].value % 4){
					destbuffer[3][localcapsule[3][p].key + k] = dummykv;
					localcapsule[3][p].value += 1;
				}
			}
			if(localcapsule[4][p].value > 0 && (localcapsule[4][p].value % 4) > 0){
				if(k >= localcapsule[4][p].value % 4){
					destbuffer[4][localcapsule[4][p].key + k] = dummykv;
					localcapsule[4][p].value += 1;
				}
			}
			if(localcapsule[5][p].value > 0 && (localcapsule[5][p].value % 4) > 0){
				if(k >= localcapsule[5][p].value % 4){
					destbuffer[5][localcapsule[5][p].key + k] = dummykv;
					localcapsule[5][p].value += 1;
				}
			}
			if(localcapsule[6][p].value > 0 && (localcapsule[6][p].value % 4) > 0){
				if(k >= localcapsule[6][p].value % 4){
					destbuffer[6][localcapsule[6][p].key + k] = dummykv;
					localcapsule[6][p].value += 1;
				}
			}
			if(localcapsule[7][p].value > 0 && (localcapsule[7][p].value % 4) > 0){
				if(k >= localcapsule[7][p].value % 4){
					destbuffer[7][localcapsule[7][p].key + k] = dummykv;
					localcapsule[7][p].value += 1;
				}
			}
		}
	}
	
	for(vector_type v=0; v<VECTOR_SIZE; v++){ cutoffs[v] = emptyslot[v]; }
	
	localcapsule[0][0].value += (SRCBUFFER_SIZE - emptyslot[0]); //?????????????????????? FIXME. MAKE OBSOLETE?
	localcapsule[1][0].value += (SRCBUFFER_SIZE - emptyslot[1]); //?????????????????????? FIXME. MAKE OBSOLETE?
	localcapsule[2][0].value += (SRCBUFFER_SIZE - emptyslot[2]); //?????????????????????? FIXME. MAKE OBSOLETE?
	localcapsule[3][0].value += (SRCBUFFER_SIZE - emptyslot[3]); //?????????????????????? FIXME. MAKE OBSOLETE?
	localcapsule[4][0].value += (SRCBUFFER_SIZE - emptyslot[4]); //?????????????????????? FIXME. MAKE OBSOLETE?
	localcapsule[5][0].value += (SRCBUFFER_SIZE - emptyslot[5]); //?????????????????????? FIXME. MAKE OBSOLETE?
	localcapsule[6][0].value += (SRCBUFFER_SIZE - emptyslot[6]); //?????????????????????? FIXME. MAKE OBSOLETE?
	localcapsule[7][0].value += (SRCBUFFER_SIZE - emptyslot[7]); //?????????????????????? FIXME. MAKE OBSOLETE?
	
	localcapsule[0][0].key = 0;
	localcapsule[1][0].key = 0;
	localcapsule[2][0].key = 0;
	localcapsule[3][0].key = 0;
	localcapsule[4][0].key = 0;
	localcapsule[5][0].key = 0;
	localcapsule[6][0].key = 0;
	localcapsule[7][0].key = 0;
	
	calculatemanyunallignedoffsets(localcapsule, MAX_NUM_PARTITIONS, 0, 0);

	#ifdef _DEBUGMODE_CHECKS2
	for(partition_type p=0; p<MAX_NUM_PARTITIONS; p++){
		for(vector_type v=0; v<VECTOR_SIZE; v++){
			actsutilityobj->checkfordivisibleby(ON, "preparekeyvalues.localcapsule[v][p].key", localcapsule[v][p].key, 4);
		}
	}
	#endif 
	#ifdef _DEBUGMODE_KERNELPRINTS
	actsutilityobj->printkeyvalues("[after]preparekeyvalues.localcapsule[0].2", (keyvalue_t *)localcapsule[0], MAX_NUM_PARTITIONS);
	actsutilityobj->printvalues("preparekeyvalues:cutoffs", cutoffs, VECTOR_SIZE);
	#endif
	return;
}

void 
	#ifdef SW 
	actsproc::
	#endif
priorpartitionkeyvalues(bool_type enable1, bool_type enable2, keyvalue_buffer_t sourcebuffer[VECTOR_SIZE][SOURCEBLOCKRAM_SIZE], keyvalue_buffer_t destbuffer[VECTOR_SIZE][DESTBLOCKRAM_SIZE], keyvalue_capsule_t localcapsule[MAX_NUM_PARTITIONS], step_type currentLOP, sweepparams_t sweepparams, buffer_type size_kvs, globalparams_t globalparams){				
	#ifdef ENABLERECURSIVEPARTITIONING
	if(currentLOP == globalparams.ACTSPARAMS_TREEDEPTH){ return; } /// NEWCHANGE.
	#else 
	if(currentLOP > globalparams.ACTSPARAMS_TREEDEPTH){ return; } /// NEWCHANGE.	
	#endif 
	if(enable1 == OFF && enable2 == OFF){ return; }
	analysis_type analysis_loopcount = SOURCEBLOCKRAM_SIZE;
	analysis_type analysis_loopcount2 = VECTOR_SIZE;
	
	buffer_type chunk_size = size_kvs;
	unsigned int upperlimit = sweepparams.upperlimit;
	unsigned int upperpartition = sweepparams.upperpartition;
	
	for(partition_type p=0; p<NUM_PARTITIONS; p++){ 
	#pragma HLS PIPELINE II=1
		localcapsule[p].key = 0;
		localcapsule[p].value = 0; 
		localcapsule[p].key = 0;
		localcapsule[p].value = 0; 
		localcapsule[p].key = 0;
		localcapsule[p].value = 0; 
		localcapsule[p].key = 0;
		localcapsule[p].value = 0; 
		localcapsule[p].key = 0;
		localcapsule[p].value = 0; 
		localcapsule[p].key = 0;
		localcapsule[p].value = 0; 
		localcapsule[p].key = 0;
		localcapsule[p].value = 0; 
		localcapsule[p].key = 0;
		localcapsule[p].value = 0; 
	}
	
	BASICPARTITIONKEYVALUES_LOOP1: for(buffer_type i=0; i<chunk_size; i++){
	#pragma HLS LOOP_TRIPCOUNT min=0 max=analysis_loopcount avg=analysis_loopcount
		BASICPARTITIONKEYVALUES_LOOP1B: for(unsigned int v=0; v<VECTOR_SIZE; v++){
		#pragma HLS PIPELINE II=2
			keyvalue_buffer_t kv = sourcebuffer[v][i];
			
			partition_type p = getpartition(ON, kv, currentLOP, upperlimit, upperpartition, globalparams.POW_BATCHRANGE);
			if(GETKV(kv).key != GETV(INVALIDDATA) && GETKV(kv).value != GETV(INVALIDDATA)){ localcapsule[p].value += 1; }
		}
	}
	
	calculateoffsets(localcapsule, NUM_PARTITIONS);
	resetvalues(localcapsule, NUM_PARTITIONS, 0);
	
	BASICPARTITIONKEYVALUES_LOOP2: for(buffer_type i=0; i<chunk_size; i++){
	#pragma HLS LOOP_TRIPCOUNT min=0 max=analysis_loopcount avg=analysis_loopcount
		BASICPARTITIONKEYVALUES_LOOP2B: for(unsigned int v=0; v<VECTOR_SIZE; v++){
		#pragma HLS PIPELINE II=2
			keyvalue_buffer_t kv = sourcebuffer[v][i];
			// cout<<"--- priorpartitionkeyvalues: kv.key: "<<kv.key<<endl; // REMOVEME.
			partition_type p = getpartition(ON, kv, currentLOP, upperlimit, upperpartition, globalparams.POW_BATCHRANGE);
			buffer_type pos = localcapsule[p].key + localcapsule[p].value;
			
			if(GETKV(kv).key != GETV(INVALIDDATA) && GETKV(kv).value != GETV(INVALIDDATA)){ destbuffer[pos % VECTOR_SIZE][pos / VECTOR_SIZE] = kv; } // NOTE: could this be the cause of slight imperfection in results?
			if(GETKV(kv).key != GETV(INVALIDDATA) && GETKV(kv).value != GETV(INVALIDDATA)){ localcapsule[p].value += 1; }
		}
	}
	
	BASICPARTITIONKEYVALUES_LOOP3: for(partition_type p=0; p<NUM_PARTITIONS; p++){
	// #pragma HLS PIPELINE II=8
		keyvalue_t mydummykv;
		mydummykv.key = p;
		mydummykv.value = GETV(INVALIDDATA);
		keyvalue_buffer_t dummykv = GETKV(mydummykv);
	
		unsigned int endoffset = localcapsule[p].key + localcapsule[p].value;
		unsigned int xpos = endoffset % VECTOR_SIZE;
		unsigned int ypos = endoffset / VECTOR_SIZE;
		
		if(localcapsule[p].value > 0){
			BASICPARTITIONKEYVALUES_LOOP3B: for(vector_type v=xpos; v<VECTOR_SIZE; v++){
			#pragma HLS LOOP_TRIPCOUNT min=0 max=analysis_loopcount2 avg=analysis_loopcount2
			#pragma HLS PIPELINE II=2
				destbuffer[v][ypos] = dummykv;
				localcapsule[p].value += 1;
			}
		}
	}
	return;
}

// functions (reduce)
value_t 
	#ifdef SW 
	actsproc::
	#endif 
reducefunc(value_t vtemp, value_t res, unsigned int GraphIter, unsigned int GraphAlgo){
	value_t temp = 0;
	if(GraphAlgo == PAGERANK){
		temp = vtemp + res;
	} else if(GraphAlgo == BFS){
		temp = amin(vtemp, GraphIter); // CRITICAL REMOVEME.
	} else if(GraphAlgo == SSSP){
		temp = amin(vtemp, res);
	} else {
		temp = NAp;
	}
	return temp;
}

void 
	#ifdef SW 
	actsproc::
	#endif
reducevector(keyvalue_buffer_t kvdata, keyvalue_vbuffer_t destbuffer[BLOCKRAM_SIZE], buffer_type destoffset, unsigned int upperlimit, sweepparams_t sweepparams, globalparams_t globalparams){
	#pragma HLS PIPELINE II=3 // CRITICAL NEWCHANGE.	
	// #pragma HLS PIPELINE II=2 // CRITICAL NEWCHANGE.	
	analysis_type analysis_loop1 = VECTOR_SIZE;
	
	keyvalue_t mykeyvalue = GETKV(kvdata);
	
	vertex_t loc = mykeyvalue.key - upperlimit;
	
	#ifdef _DEBUGMODE_KERNELPRINTS_TRACE3
	if(mykeyvalue.key != GETK(INVALIDDATA) && mykeyvalue.value != GETV(INVALIDDATA)){ cout<<"REDUCE SEEN @ reducevector:: vid: "<<upperlimit + loc<<", loc: "<<loc<<", mykeyvalue.key: "<<mykeyvalue.key<<", mykeyvalue.value: "<<mykeyvalue.value<<", upperlimit: "<<upperlimit<<", reduce size: "<<globalparams.SIZE_REDUCE<<endl; }
	#endif 
	
	if(loc >= globalparams.SIZE_REDUCE && mykeyvalue.key != GETK(INVALIDDATA) && mykeyvalue.value != GETV(INVALIDDATA)){ 
		#ifdef _DEBUGMODE_CHECKS2
		actsutilityobj->reducehelper_checkreduceloc(0, loc, mykeyvalue, sweepparams, globalparams); 
		#endif 
		loc = 0; }

	vertex_t rowindex = loc / 2;
	vertex_t colindex = loc % 2;
	
	keyvalue_t myvprop;
	if(mykeyvalue.key != GETV(INVALIDDATA) && mykeyvalue.value != GETV(INVALIDDATA)){ myvprop = GETKV2(destbuffer[destoffset + rowindex]); }
	
	value_t temp;
	if(colindex == 0){ temp = myvprop.key; }
	else { temp = myvprop.value; }
	
	value_t rettemp = reducefunc(temp, mykeyvalue.value, globalparams.ALGORITHMINFO_GRAPHITERATIONID, globalparams.ALGORITHMINFO_GRAPHALGORITHMID);
	#ifdef _DEBUGMODE_KERNELPRINTS
	if(mykeyvalue.key != GETV(INVALIDDATA) && mykeyvalue.value != GETV(INVALIDDATA)){ cout<<"REDUCEFUNC RESULT @ reducevector:: rettemp: "<<rettemp<<", temp: "<<temp<<", mykeyvalue.value: "<<mykeyvalue.value<<", NAp: "<<NAp<<endl; }
	#endif 
	
	if(colindex == 0){ myvprop.key = rettemp; }
	else { myvprop.value = rettemp; }
	
	if(mykeyvalue.key != GETV(INVALIDDATA) && mykeyvalue.value != GETV(INVALIDDATA)){ destbuffer[destoffset + rowindex] = GETKV2(myvprop); }
	
	#ifdef _DEBUGMODE_STATS
	actsutilityobj->globalstats_countkvsreduced(1);
	if(mykeyvalue.key != GETV(INVALIDDATA) && mykeyvalue.value != GETV(INVALIDDATA)){ actsutilityobj->globalstats_reduce_countvalidkvsreduced(1); }
	#endif
	return;
}

void 
	#ifdef SW 
	actsproc::
	#endif 
reduceandbuffer(bool_type enable, keyvalue_buffer_t buffer[VECTOR_SIZE][DESTBLOCKRAM_SIZE], keyvalue_capsule_t localcapsule[MAX_NUM_PARTITIONS], keyvalue_vbuffer_t vbuffer[VDATA_PACKINGSIZE][BLOCKRAM_SIZE], sweepparams_t sweepparams, globalparams_t globalparams){				
	if(enable == OFF){ return; }
	#if REDUCEBUFFERFACTOR==8
	analysis_type analysis_loopcount = (DESTBLOCKRAM_SIZE / (NUM_PARTITIONS / 2)); // =46: '2' is safety padding.
	#endif 
	#if REDUCEBUFFERFACTOR==16
	analysis_type analysis_loopcount = (DESTBLOCKRAM_SIZE / NUM_PARTITIONS);
	#endif 
	
	keyvalue_buffer_t kvdata0;
	keyvalue_buffer_t kvdata1;
	keyvalue_buffer_t kvdata2;
	keyvalue_buffer_t kvdata3;
	keyvalue_buffer_t kvdata4;
	keyvalue_buffer_t kvdata5;
	keyvalue_buffer_t kvdata6;
	keyvalue_buffer_t kvdata7;
	keyvalue_buffer_t kvdata8;
	keyvalue_buffer_t kvdata9;
	keyvalue_buffer_t kvdata10;
	keyvalue_buffer_t kvdata11;
	keyvalue_buffer_t kvdata12;
	keyvalue_buffer_t kvdata13;
	keyvalue_buffer_t kvdata14;
	keyvalue_buffer_t kvdata15;
	buffer_type bramoffset_kvs[MAX_NUM_PARTITIONS];
	#pragma HLS ARRAY_PARTITION variable=bramoffset_kvs complete
	buffer_type size_kvs[MAX_NUM_PARTITIONS];
	#pragma HLS ARRAY_PARTITION variable=size_kvs complete
	unsigned int upperlimits[MAX_NUM_PARTITIONS];
	#pragma HLS ARRAY_PARTITION variable=upperlimits complete
	
	#ifdef _DEBUGMODE_KERNELPRINTS
	actsutilityobj->printkeyvalues("reduceandbuffer.localcapsule", (keyvalue_t *)localcapsule, NUM_PARTITIONS);
	#endif 

	unsigned int tmplloprange = 0;
	#if REDUCEBUFFERFACTOR==8
	REDUCEBUFFERPARTITIONS_LOOP1: for(unsigned int it=0; it<NUM_PARTITIONS; it+=NUM_PARTITIONS/2){
		buffer_type maxsize_kvs = 0;
		REDUCEBUFFERPARTITIONS_LOOP1B: for(partition_type p=0; p<NUM_PARTITIONS/2; p++){
		#pragma HLS PIPELINE II=1
			bramoffset_kvs[p] = localcapsule[it+p].key / VECTOR_SIZE;
			size_kvs[p] = localcapsule[it+p].value / VECTOR_SIZE;
			if(maxsize_kvs < size_kvs[p]){ maxsize_kvs = size_kvs[p]; }
		}
		
		unsigned int lloprange = getrangeforeachllop(globalparams);
		REDUCEBUFFERPARTITIONS_LOOP1C: for(unsigned int p=0; p<NUM_PARTITIONS/2; p++){
		#pragma HLS PIPELINE II=1
			upperlimits[p] = sweepparams.upperlimit + tmplloprange;
			tmplloprange += lloprange;
		}
		
		REDUCEBUFFERPARTITIONS_LOOP1D: for(buffer_type i=0; i<maxsize_kvs; i++){
		#pragma HLS LOOP_TRIPCOUNT min=0 max=analysis_loopcount avg=analysis_loopcount
		#pragma HLS PIPELINE II=16
			for(vector_type v=0; v<VECTOR_SIZE; v++){
				kvdata0 = buffer[v][bramoffset_kvs[0] + i]; 	
				kvdata1 = buffer[v][bramoffset_kvs[1] + i]; 	
				kvdata2 = buffer[v][bramoffset_kvs[2] + i]; 	
				kvdata3 = buffer[v][bramoffset_kvs[3] + i]; 	
				kvdata4 = buffer[v][bramoffset_kvs[4] + i]; 	
				kvdata5 = buffer[v][bramoffset_kvs[5] + i]; 	
				kvdata6 = buffer[v][bramoffset_kvs[6] + i]; 	
				kvdata7 = buffer[v][bramoffset_kvs[7] + i]; 	
	

				if(i< size_kvs[0]){ reducevector(kvdata0, vbuffer[it+0], 0, upperlimits[0], sweepparams, globalparams); }
				if(i< size_kvs[1]){ reducevector(kvdata1, vbuffer[it+1], 0, upperlimits[1], sweepparams, globalparams); }
				if(i< size_kvs[2]){ reducevector(kvdata2, vbuffer[it+2], 0, upperlimits[2], sweepparams, globalparams); }
				if(i< size_kvs[3]){ reducevector(kvdata3, vbuffer[it+3], 0, upperlimits[3], sweepparams, globalparams); }
				if(i< size_kvs[4]){ reducevector(kvdata4, vbuffer[it+4], 0, upperlimits[4], sweepparams, globalparams); }
				if(i< size_kvs[5]){ reducevector(kvdata5, vbuffer[it+5], 0, upperlimits[5], sweepparams, globalparams); }
				if(i< size_kvs[6]){ reducevector(kvdata6, vbuffer[it+6], 0, upperlimits[6], sweepparams, globalparams); }
				if(i< size_kvs[7]){ reducevector(kvdata7, vbuffer[it+7], 0, upperlimits[7], sweepparams, globalparams); }
			}
		}
	}
	#endif 
	#if REDUCEBUFFERFACTOR==16
	buffer_type maxsize_kvs = 0;
	REDUCEBUFFERPARTITIONS_LOOP1B: for(partition_type p=0; p<NUM_PARTITIONS; p++){
	#pragma HLS PIPELINE II=1
		bramoffset_kvs[p] = localcapsule[p].key / VECTOR_SIZE;
		size_kvs[p] = localcapsule[p].value / VECTOR_SIZE;
		if(maxsize_kvs < size_kvs[p]){ maxsize_kvs = size_kvs[p]; }
	}
	
	unsigned int lloprange = getrangeforeachllop(globalparams);
	REDUCEBUFFERPARTITIONS_LOOP1C: for(unsigned int p=0; p<NUM_PARTITIONS; p++){
	#pragma HLS PIPELINE II=1
		upperlimits[p] = sweepparams.upperlimit + tmplloprange;
		tmplloprange += lloprange;
	}
	
	REDUCEBUFFERPARTITIONS_LOOP1D: for(buffer_type i=0; i<maxsize_kvs; i++){
	#pragma HLS LOOP_TRIPCOUNT min=0 max=analysis_loopcount avg=analysis_loopcount
	#pragma HLS PIPELINE II=16
		for(vector_type v=0; v<VECTOR_SIZE; v++){
			kvdata0 = buffer[v][bramoffset_kvs[0] + i]; 	
			kvdata1 = buffer[v][bramoffset_kvs[1] + i]; 	
			kvdata2 = buffer[v][bramoffset_kvs[2] + i]; 	
			kvdata3 = buffer[v][bramoffset_kvs[3] + i]; 	
			kvdata4 = buffer[v][bramoffset_kvs[4] + i]; 	
			kvdata5 = buffer[v][bramoffset_kvs[5] + i]; 	
			kvdata6 = buffer[v][bramoffset_kvs[6] + i]; 	
			kvdata7 = buffer[v][bramoffset_kvs[7] + i]; 	
			kvdata8 = buffer[v][bramoffset_kvs[8] + i]; 	
			kvdata9 = buffer[v][bramoffset_kvs[9] + i]; 	
			kvdata10 = buffer[v][bramoffset_kvs[10] + i]; 	
			kvdata11 = buffer[v][bramoffset_kvs[11] + i]; 	
			kvdata12 = buffer[v][bramoffset_kvs[12] + i]; 	
			kvdata13 = buffer[v][bramoffset_kvs[13] + i]; 	
			kvdata14 = buffer[v][bramoffset_kvs[14] + i]; 	
			kvdata15 = buffer[v][bramoffset_kvs[15] + i]; 	
	

			if(i< size_kvs[0]){ reducevector(kvdata0, vbuffer[0], 0, upperlimits[0], sweepparams, globalparams); }
			if(i< size_kvs[1]){ reducevector(kvdata1, vbuffer[1], 0, upperlimits[1], sweepparams, globalparams); }
			if(i< size_kvs[2]){ reducevector(kvdata2, vbuffer[2], 0, upperlimits[2], sweepparams, globalparams); }
			if(i< size_kvs[3]){ reducevector(kvdata3, vbuffer[3], 0, upperlimits[3], sweepparams, globalparams); }
			if(i< size_kvs[4]){ reducevector(kvdata4, vbuffer[4], 0, upperlimits[4], sweepparams, globalparams); }
			if(i< size_kvs[5]){ reducevector(kvdata5, vbuffer[5], 0, upperlimits[5], sweepparams, globalparams); }
			if(i< size_kvs[6]){ reducevector(kvdata6, vbuffer[6], 0, upperlimits[6], sweepparams, globalparams); }
			if(i< size_kvs[7]){ reducevector(kvdata7, vbuffer[7], 0, upperlimits[7], sweepparams, globalparams); }
			if(i< size_kvs[8]){ reducevector(kvdata8, vbuffer[8], 0, upperlimits[8], sweepparams, globalparams); }
			if(i< size_kvs[9]){ reducevector(kvdata9, vbuffer[9], 0, upperlimits[9], sweepparams, globalparams); }
			if(i< size_kvs[10]){ reducevector(kvdata10, vbuffer[10], 0, upperlimits[10], sweepparams, globalparams); }
			if(i< size_kvs[11]){ reducevector(kvdata11, vbuffer[11], 0, upperlimits[11], sweepparams, globalparams); }
			if(i< size_kvs[12]){ reducevector(kvdata12, vbuffer[12], 0, upperlimits[12], sweepparams, globalparams); }
			if(i< size_kvs[13]){ reducevector(kvdata13, vbuffer[13], 0, upperlimits[13], sweepparams, globalparams); }
			if(i< size_kvs[14]){ reducevector(kvdata14, vbuffer[14], 0, upperlimits[14], sweepparams, globalparams); }
			if(i< size_kvs[15]){ reducevector(kvdata15, vbuffer[15], 0, upperlimits[15], sweepparams, globalparams); }
		}
	}
	#endif 
	return;
}

void 
	#ifdef SW 
	actsproc::
	#endif 
priorreduceandbuffer(bool_type enable, keyvalue_buffer_t buffer[VECTOR_SIZE][SOURCEBLOCKRAM_SIZE], keyvalue_capsule_t localcapsule[MAX_NUM_PARTITIONS], keyvalue_vbuffer_t vbuffer[VDATA_PACKINGSIZE][BLOCKRAM_SIZE], buffer_type chunk_size, sweepparams_t sweepparams, globalparams_t globalparams){				
	if(enable == OFF){ return; }
	analysis_type analysis_loopcount = SOURCEBLOCKRAM_SIZE;
	
	#ifdef _DEBUGMODE_KERNELPRINTS
	actsutilityobj->printkeyvalues("priorreduceandbuffer.localcapsule", (keyvalue_t *)localcapsule, 8);
	#endif 
	
	PRIORREDUCEANDBUFFER_LOOP1: for(buffer_type i=0; i<chunk_size; i++){
	#pragma HLS LOOP_TRIPCOUNT min=0 max=analysis_loopcount avg=analysis_loopcount
	#pragma HLS PIPELINE II=16 // NEWCHANGE.
		PRIORREDUCEANDBUFFER_LOOP1B: for(unsigned int v=0; v<VECTOR_SIZE; v++){
		// #pragma HLS PIPELINE II=1 // NEWCHANGE.
			keyvalue_buffer_t kv = buffer[v][i];
			keyvalue_t kv2 = GETKV(kv);
		
			partition_type p = ((kv2.key - sweepparams.upperlimit) >> (REDUCESZ_POW));
			
			unsigned int upperlimit = sweepparams.upperlimit + p*REDUCESZ;
			
			#ifdef _DEBUGMODE_KERNELPRINTS_TRACE3
			cout<<"priorreduceandbuffer: kv2.key: "<<kv2.key<<", kv2.value: "<<kv2.value<<", p: "<<p<<", upperlimit: "<<upperlimit<<", sweepparams.upperlimit: "<<sweepparams.upperlimit<<", currentLOP: "<<sweepparams.currentLOP<<endl;
			#endif 
			
			if(p < VDATA_PACKINGSIZE){ reducevector(kv, vbuffer[p], 0, upperlimit, sweepparams, globalparams); } // REMOVEME.
		}
	}
	return;
}

void
	#ifdef SW
	actsproc::
	#endif 
tradreduceandbuffer(bool_type enable, uint512_dt * kvdram, keyvalue_buffer_t buffer[VECTOR_SIZE][SOURCEBLOCKRAM_SIZE], buffer_type chunk_size, keyvalue_t globalstatsbuffer[MAX_NUM_PARTITIONS], sweepparams_t sweepparams, globalparams_t globalparams){				
	if(enable == OFF){ return; }
	analysis_type analysis_loopcount = SOURCEBLOCKRAM_SIZE;
	
	TRADREDUCEANDBUFFER_LOOP1: for(buffer_type i=0; i<chunk_size; i++){
	#pragma HLS LOOP_TRIPCOUNT min=0 max=analysis_loopcount avg=analysis_loopcount
		TRADREDUCEANDBUFFER_LOOP1B: for(unsigned int v=0; v<VECTOR_SIZE; v++){
		#pragma HLS PIPELINE II=1 // NEWCHANGE.
			keyvalue_buffer_t kv = buffer[v][i];
			keyvalue_t kv2 = GETKV(kv);
			
			if(kv2.key != GETV(INVALIDDATA) && kv2.value != GETV(INVALIDDATA)){
			
				unsigned int block = kv2.key / (REDUCESZ * VECTOR_SIZE); // REDUCESZ, globalparams.SIZE_REDUCE 
				unsigned int globalpos_offset = block * (REDUCESZ * VECTOR_SIZE);
				unsigned int globalrow_offset = globalpos_offset / VECTOR2_SIZE;
				
				unsigned int localpos = kv2.key % (REDUCESZ * VECTOR_SIZE); // 8192;
				unsigned int localrow = (localpos % REDUCESZ) / 2;
				unsigned int localcol = localpos / REDUCESZ;
				
				unsigned int row = globalrow_offset + localrow;
				unsigned int col = localcol;
				
				#ifdef _DEBUGMODE_KERNELPRINTS_TRACE3
				cout<<"REDUCE SEEN @ tradreduceandbuffer:: kv2.key: "<<kv2.key<<", kv2.value: "<<kv2.value<<" || block: "<<block<<", row: "<<row<<", col: "<<col<<" || localpos: "<<localpos<<", localrow: "<<localrow<<", localcol: "<<localcol<<endl;
				#endif
				
				value_t temp;
				uint512_vec_dt vdata;
				#pragma HLS data_pack variable=vdata
				
				#ifdef _WIDEWORD
				vdata.data[0].key = kvdram[globalparams.BASEOFFSETKVS_DESTVERTICESDATA + row].range(31, 0);
				vdata.data[0].value = kvdram[globalparams.BASEOFFSETKVS_DESTVERTICESDATA + row].range(63, 32);
				vdata.data[1].key = kvdram[globalparams.BASEOFFSETKVS_DESTVERTICESDATA + row].range(95, 64);
				vdata.data[1].value = kvdram[globalparams.BASEOFFSETKVS_DESTVERTICESDATA + row].range(127, 96);
				vdata.data[2].key = kvdram[globalparams.BASEOFFSETKVS_DESTVERTICESDATA + row].range(159, 128);
				vdata.data[2].value = kvdram[globalparams.BASEOFFSETKVS_DESTVERTICESDATA + row].range(191, 160);
				vdata.data[3].key = kvdram[globalparams.BASEOFFSETKVS_DESTVERTICESDATA + row].range(223, 192);
				vdata.data[3].value = kvdram[globalparams.BASEOFFSETKVS_DESTVERTICESDATA + row].range(255, 224);
				vdata.data[4].key = kvdram[globalparams.BASEOFFSETKVS_DESTVERTICESDATA + row].range(287, 256);
				vdata.data[4].value = kvdram[globalparams.BASEOFFSETKVS_DESTVERTICESDATA + row].range(319, 288);
				vdata.data[5].key = kvdram[globalparams.BASEOFFSETKVS_DESTVERTICESDATA + row].range(351, 320);
				vdata.data[5].value = kvdram[globalparams.BASEOFFSETKVS_DESTVERTICESDATA + row].range(383, 352);
				vdata.data[6].key = kvdram[globalparams.BASEOFFSETKVS_DESTVERTICESDATA + row].range(415, 384);
				vdata.data[6].value = kvdram[globalparams.BASEOFFSETKVS_DESTVERTICESDATA + row].range(447, 416);
				vdata.data[7].key = kvdram[globalparams.BASEOFFSETKVS_DESTVERTICESDATA + row].range(479, 448);
				vdata.data[7].value = kvdram[globalparams.BASEOFFSETKVS_DESTVERTICESDATA + row].range(511, 480);
				#else 
				vdata.data[0].key = kvdram[globalparams.BASEOFFSETKVS_DESTVERTICESDATA + row].data[0].key; 
				vdata.data[0].value = kvdram[globalparams.BASEOFFSETKVS_DESTVERTICESDATA + row].data[0].value; 
				vdata.data[1].key = kvdram[globalparams.BASEOFFSETKVS_DESTVERTICESDATA + row].data[1].key; 
				vdata.data[1].value = kvdram[globalparams.BASEOFFSETKVS_DESTVERTICESDATA + row].data[1].value; 
				vdata.data[2].key = kvdram[globalparams.BASEOFFSETKVS_DESTVERTICESDATA + row].data[2].key; 
				vdata.data[2].value = kvdram[globalparams.BASEOFFSETKVS_DESTVERTICESDATA + row].data[2].value; 
				vdata.data[3].key = kvdram[globalparams.BASEOFFSETKVS_DESTVERTICESDATA + row].data[3].key; 
				vdata.data[3].value = kvdram[globalparams.BASEOFFSETKVS_DESTVERTICESDATA + row].data[3].value; 
				vdata.data[4].key = kvdram[globalparams.BASEOFFSETKVS_DESTVERTICESDATA + row].data[4].key; 
				vdata.data[4].value = kvdram[globalparams.BASEOFFSETKVS_DESTVERTICESDATA + row].data[4].value; 
				vdata.data[5].key = kvdram[globalparams.BASEOFFSETKVS_DESTVERTICESDATA + row].data[5].key; 
				vdata.data[5].value = kvdram[globalparams.BASEOFFSETKVS_DESTVERTICESDATA + row].data[5].value; 
				vdata.data[6].key = kvdram[globalparams.BASEOFFSETKVS_DESTVERTICESDATA + row].data[6].key; 
				vdata.data[6].value = kvdram[globalparams.BASEOFFSETKVS_DESTVERTICESDATA + row].data[6].value; 
				vdata.data[7].key = kvdram[globalparams.BASEOFFSETKVS_DESTVERTICESDATA + row].data[7].key; 
				vdata.data[7].value = kvdram[globalparams.BASEOFFSETKVS_DESTVERTICESDATA + row].data[7].value; 
				#endif
				
				if(localpos % 2 == 0){ temp = vdata.data[localcol].key; }
				else { temp = vdata.data[localcol].value; }
				
				value_t rettemp = reducefunc(temp, kv2.value, globalparams.ALGORITHMINFO_GRAPHITERATIONID, globalparams.ALGORITHMINFO_GRAPHALGORITHMID);
				
				if(localpos % 2 == 0){ vdata.data[localcol].key = rettemp; }
				else { vdata.data[localcol].value = rettemp; }
				
				#ifdef _WIDEWORD
				kvdram[globalparams.BASEOFFSETKVS_DESTVERTICESDATA + row].range(31, 0) = vdata.data[0].key;
				kvdram[globalparams.BASEOFFSETKVS_DESTVERTICESDATA + row].range(63, 32) = vdata.data[0].value;
				kvdram[globalparams.BASEOFFSETKVS_DESTVERTICESDATA + row].range(95, 64) = vdata.data[1].key;
				kvdram[globalparams.BASEOFFSETKVS_DESTVERTICESDATA + row].range(127, 96) = vdata.data[1].value;
				kvdram[globalparams.BASEOFFSETKVS_DESTVERTICESDATA + row].range(159, 128) = vdata.data[2].key;
				kvdram[globalparams.BASEOFFSETKVS_DESTVERTICESDATA + row].range(191, 160) = vdata.data[2].value;
				kvdram[globalparams.BASEOFFSETKVS_DESTVERTICESDATA + row].range(223, 192) = vdata.data[3].key;
				kvdram[globalparams.BASEOFFSETKVS_DESTVERTICESDATA + row].range(255, 224) = vdata.data[3].value;
				kvdram[globalparams.BASEOFFSETKVS_DESTVERTICESDATA + row].range(287, 256) = vdata.data[4].key;
				kvdram[globalparams.BASEOFFSETKVS_DESTVERTICESDATA + row].range(319, 288) = vdata.data[4].value;
				kvdram[globalparams.BASEOFFSETKVS_DESTVERTICESDATA + row].range(351, 320) = vdata.data[5].key;
				kvdram[globalparams.BASEOFFSETKVS_DESTVERTICESDATA + row].range(383, 352) = vdata.data[5].value;
				kvdram[globalparams.BASEOFFSETKVS_DESTVERTICESDATA + row].range(415, 384) = vdata.data[6].key;
				kvdram[globalparams.BASEOFFSETKVS_DESTVERTICESDATA + row].range(447, 416) = vdata.data[6].value;
				kvdram[globalparams.BASEOFFSETKVS_DESTVERTICESDATA + row].range(479, 448) = vdata.data[7].key;
				kvdram[globalparams.BASEOFFSETKVS_DESTVERTICESDATA + row].range(511, 480) = vdata.data[7].value;
				#else 
				kvdram[globalparams.BASEOFFSETKVS_DESTVERTICESDATA + row].data[0].key = vdata.data[0].key; 
				kvdram[globalparams.BASEOFFSETKVS_DESTVERTICESDATA + row].data[0].value = vdata.data[0].value; 
				kvdram[globalparams.BASEOFFSETKVS_DESTVERTICESDATA + row].data[1].key = vdata.data[1].key; 
				kvdram[globalparams.BASEOFFSETKVS_DESTVERTICESDATA + row].data[1].value = vdata.data[1].value; 
				kvdram[globalparams.BASEOFFSETKVS_DESTVERTICESDATA + row].data[2].key = vdata.data[2].key; 
				kvdram[globalparams.BASEOFFSETKVS_DESTVERTICESDATA + row].data[2].value = vdata.data[2].value; 
				kvdram[globalparams.BASEOFFSETKVS_DESTVERTICESDATA + row].data[3].key = vdata.data[3].key; 
				kvdram[globalparams.BASEOFFSETKVS_DESTVERTICESDATA + row].data[3].value = vdata.data[3].value; 
				kvdram[globalparams.BASEOFFSETKVS_DESTVERTICESDATA + row].data[4].key = vdata.data[4].key; 
				kvdram[globalparams.BASEOFFSETKVS_DESTVERTICESDATA + row].data[4].value = vdata.data[4].value; 
				kvdram[globalparams.BASEOFFSETKVS_DESTVERTICESDATA + row].data[5].key = vdata.data[5].key; 
				kvdram[globalparams.BASEOFFSETKVS_DESTVERTICESDATA + row].data[5].value = vdata.data[5].value; 
				kvdram[globalparams.BASEOFFSETKVS_DESTVERTICESDATA + row].data[6].key = vdata.data[6].key; 
				kvdram[globalparams.BASEOFFSETKVS_DESTVERTICESDATA + row].data[6].value = vdata.data[6].value; 
				kvdram[globalparams.BASEOFFSETKVS_DESTVERTICESDATA + row].data[7].key = vdata.data[7].key; 
				kvdram[globalparams.BASEOFFSETKVS_DESTVERTICESDATA + row].data[7].value = vdata.data[7].value; 
				#endif
				
				partition_type p = getpartition(ON, kv, sweepparams.currentLOP, sweepparams.upperlimit, sweepparams.upperpartition, globalparams.POW_BATCHRANGE);
				globalstatsbuffer[p].value += 1;
				
				#ifdef _DEBUGMODE_KERNELPRINTS_TRACE3
				if(localpos % 2 == 0){ cout<<"--- tradreduceandbuffer :: kvdram[globalparams.BASEOFFSETKVS_DESTVERTICESDATA + "<<row<<"].data["<<localcol<<"].key: "<<kvdram[globalparams.BASEOFFSETKVS_DESTVERTICESDATA + row].data[localcol].key<<endl; }
				else { cout<<"--- tradreduceandbuffer :: kvdram[globalparams.BASEOFFSETKVS_DESTVERTICESDATA + "<<row<<"].data["<<localcol<<"].value: "<<kvdram[globalparams.BASEOFFSETKVS_DESTVERTICESDATA + row].data[localcol].value<<endl; }
				#endif
			}
		}
	}
	return;
}

// functions (merge)
unsigned int
	#ifdef SW 
	actsproc::
	#endif 
SYNC_amin(unsigned int val1, unsigned int val2){
	if(val1 < val2){ return val1; }
	else { return val2; }
}

value_t 
	#ifdef SW 
	actsproc::
	#endif 
mergefunc(value_t value1, value_t value2, unsigned int GraphAlgo){
	return SYNC_amin(value1, value2);
}

void // 
	#ifdef SW 
	actsproc::
	#endif 
readandreplicate1vdata(bool_type enable, uint512_dt * vdram, batch_type dramoffset_kvs, keyvalue_vbuffer_t buffer0[VDATA_PACKINGSIZE][BLOCKRAM_SIZE], unsigned int begincol, batch_type bufferoffset_kvs, buffer_type size_kvs, globalparams_t globalparams){
	if(enable == OFF){ return; }
	analysis_type analysis_loopcount = BLOCKRAM_SIZE;
		
	READVDATA_LOOP: for (buffer_type i=0; i<size_kvs; i++){
	#pragma HLS LOOP_TRIPCOUNT min=0 max=analysis_loopcount avg=analysis_loopcount
	#pragma HLS PIPELINE II=1
		keyvalue_t mykeyvalue0;
		keyvalue_t mykeyvalue1;
		keyvalue_t mykeyvalue2;
		keyvalue_t mykeyvalue3;
		keyvalue_t mykeyvalue4;
		keyvalue_t mykeyvalue5;
		keyvalue_t mykeyvalue6;
		keyvalue_t mykeyvalue7;
		
		#ifdef _WIDEWORD
		mykeyvalue0.key = vdram[dramoffset_kvs + i].range(31, 0); 
		mykeyvalue0.value = vdram[dramoffset_kvs + i].range(63, 32); 
		mykeyvalue1.key = vdram[dramoffset_kvs + i].range(95, 64); 
		mykeyvalue1.value = vdram[dramoffset_kvs + i].range(127, 96); 
		mykeyvalue2.key = vdram[dramoffset_kvs + i].range(159, 128); 
		mykeyvalue2.value = vdram[dramoffset_kvs + i].range(191, 160); 
		mykeyvalue3.key = vdram[dramoffset_kvs + i].range(223, 192); 
		mykeyvalue3.value = vdram[dramoffset_kvs + i].range(255, 224); 
		mykeyvalue4.key = vdram[dramoffset_kvs + i].range(287, 256); 
		mykeyvalue4.value = vdram[dramoffset_kvs + i].range(319, 288); 
		mykeyvalue5.key = vdram[dramoffset_kvs + i].range(351, 320); 
		mykeyvalue5.value = vdram[dramoffset_kvs + i].range(383, 352); 
		mykeyvalue6.key = vdram[dramoffset_kvs + i].range(415, 384); 
		mykeyvalue6.value = vdram[dramoffset_kvs + i].range(447, 416); 
		mykeyvalue7.key = vdram[dramoffset_kvs + i].range(479, 448); 
		mykeyvalue7.value = vdram[dramoffset_kvs + i].range(511, 480); 
		#else 
		mykeyvalue0.key = vdram[dramoffset_kvs + i].data[0].key; 
		mykeyvalue0.value = vdram[dramoffset_kvs + i].data[0].value; 
		mykeyvalue1.key = vdram[dramoffset_kvs + i].data[1].key; 
		mykeyvalue1.value = vdram[dramoffset_kvs + i].data[1].value; 
		mykeyvalue2.key = vdram[dramoffset_kvs + i].data[2].key; 
		mykeyvalue2.value = vdram[dramoffset_kvs + i].data[2].value; 
		mykeyvalue3.key = vdram[dramoffset_kvs + i].data[3].key; 
		mykeyvalue3.value = vdram[dramoffset_kvs + i].data[3].value; 
		mykeyvalue4.key = vdram[dramoffset_kvs + i].data[4].key; 
		mykeyvalue4.value = vdram[dramoffset_kvs + i].data[4].value; 
		mykeyvalue5.key = vdram[dramoffset_kvs + i].data[5].key; 
		mykeyvalue5.value = vdram[dramoffset_kvs + i].data[5].value; 
		mykeyvalue6.key = vdram[dramoffset_kvs + i].data[6].key; 
		mykeyvalue6.value = vdram[dramoffset_kvs + i].data[6].value; 
		mykeyvalue7.key = vdram[dramoffset_kvs + i].data[7].key; 
		mykeyvalue7.value = vdram[dramoffset_kvs + i].data[7].value; 
		#endif 
		
		buffer0[begincol + 0][bufferoffset_kvs + i] = GETKV2(mykeyvalue0);
		buffer0[begincol + 1][bufferoffset_kvs + i] = GETKV2(mykeyvalue1);
		buffer0[begincol + 2][bufferoffset_kvs + i] = GETKV2(mykeyvalue2);
		buffer0[begincol + 3][bufferoffset_kvs + i] = GETKV2(mykeyvalue3);
		buffer0[begincol + 4][bufferoffset_kvs + i] = GETKV2(mykeyvalue4);
		buffer0[begincol + 5][bufferoffset_kvs + i] = GETKV2(mykeyvalue5);
		buffer0[begincol + 6][bufferoffset_kvs + i] = GETKV2(mykeyvalue6);
		buffer0[begincol + 7][bufferoffset_kvs + i] = GETKV2(mykeyvalue7);
		
		#ifdef _DEBUGMODE_STATS
		actsutilityobj->globalstats_countkvsread(VECTOR_SIZE);
		#endif
	}
	#ifdef _DEBUGMODE_KERNELPRINTS
	cout<< TIMINGRESULTSCOLOR<<"readvdata:: vertices read: offset: "<<dramoffset_kvs * VECTOR_SIZE<<"-"<<(dramoffset_kvs + size_kvs) * VECTOR_SIZE<<", number of vertex datas read: "<<(size_kvs * VECTOR_SIZE * 2)<<" ("<<size_kvs * VECTOR_SIZE<<" keyvalues written)"<< RESET<<endl;
	#endif
	#ifdef _DEBUGMODE_KERNELPRINTS
	if(dramoffset_kvs >= globalparams.BASEOFFSETKVS_VERTEXPTR_ && dramoffset_kvs < globalparams.BASEOFFSETKVS_VERTEXPTR + VERTEXPTRSSZ_KVS){ cout<< TIMINGRESULTSCOLOR<<"readvdata:: vertices read: offset: "<<(dramoffset_kvs - globalparams.BASEOFFSETKVS_VERTEXPTR) * VECTOR_SIZE<<"-"<<(dramoffset_kvs + size_kvs - globalparams.BASEOFFSETKVS_VERTEXPTR) * VECTOR_SIZE<<", number of vertex datas read: "<<(size_kvs * VECTOR_SIZE * 2)<<" ("<<size_kvs * VECTOR_SIZE<<" keyvalues written)"<< RESET<<endl; }
	if(dramoffset_kvs >= globalparams.BASEOFFSETKVS_VERTICESDATA_ && dramoffset_kvs < globalparams.BASEOFFSETKVS_DESTVERTICESDATA + VERTICESDATASZ_KVS){ cout<< TIMINGRESULTSCOLOR<<"readvdata:: vertices read: offset: "<<(dramoffset_kvs - globalparams.BASEOFFSETKVS_DESTVERTICESDATA) * VECTOR_SIZE<<"-"<<(dramoffset_kvs + size_kvs - globalparams.BASEOFFSETKVS_DESTVERTICESDATA) * VECTOR_SIZE<<", number of vertex datas read: "<<(size_kvs * VECTOR_SIZE * 2)<<" ("<<size_kvs * VECTOR_SIZE<<" keyvalues written)"<< RESET<<endl; }				
	#endif
	return;
}
void // 
	#ifdef SW 
	actsproc::
	#endif 
readandreplicate2vdata(bool_type enable, uint512_dt * vdram, batch_type dramoffset_kvs, keyvalue_vbuffer_t buffer0[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t buffer1[VDATA_PACKINGSIZE][BLOCKRAM_SIZE], unsigned int begincol, batch_type bufferoffset_kvs, buffer_type size_kvs, globalparams_t globalparams){
	if(enable == OFF){ return; }
	analysis_type analysis_loopcount = BLOCKRAM_SIZE;
		
	READVDATA_LOOP: for (buffer_type i=0; i<size_kvs; i++){
	#pragma HLS LOOP_TRIPCOUNT min=0 max=analysis_loopcount avg=analysis_loopcount
	#pragma HLS PIPELINE II=1
		keyvalue_t mykeyvalue0;
		keyvalue_t mykeyvalue1;
		keyvalue_t mykeyvalue2;
		keyvalue_t mykeyvalue3;
		keyvalue_t mykeyvalue4;
		keyvalue_t mykeyvalue5;
		keyvalue_t mykeyvalue6;
		keyvalue_t mykeyvalue7;
		
		#ifdef _WIDEWORD
		mykeyvalue0.key = vdram[dramoffset_kvs + i].range(31, 0); 
		mykeyvalue0.value = vdram[dramoffset_kvs + i].range(63, 32); 
		mykeyvalue1.key = vdram[dramoffset_kvs + i].range(95, 64); 
		mykeyvalue1.value = vdram[dramoffset_kvs + i].range(127, 96); 
		mykeyvalue2.key = vdram[dramoffset_kvs + i].range(159, 128); 
		mykeyvalue2.value = vdram[dramoffset_kvs + i].range(191, 160); 
		mykeyvalue3.key = vdram[dramoffset_kvs + i].range(223, 192); 
		mykeyvalue3.value = vdram[dramoffset_kvs + i].range(255, 224); 
		mykeyvalue4.key = vdram[dramoffset_kvs + i].range(287, 256); 
		mykeyvalue4.value = vdram[dramoffset_kvs + i].range(319, 288); 
		mykeyvalue5.key = vdram[dramoffset_kvs + i].range(351, 320); 
		mykeyvalue5.value = vdram[dramoffset_kvs + i].range(383, 352); 
		mykeyvalue6.key = vdram[dramoffset_kvs + i].range(415, 384); 
		mykeyvalue6.value = vdram[dramoffset_kvs + i].range(447, 416); 
		mykeyvalue7.key = vdram[dramoffset_kvs + i].range(479, 448); 
		mykeyvalue7.value = vdram[dramoffset_kvs + i].range(511, 480); 
		#else 
		mykeyvalue0.key = vdram[dramoffset_kvs + i].data[0].key; 
		mykeyvalue0.value = vdram[dramoffset_kvs + i].data[0].value; 
		mykeyvalue1.key = vdram[dramoffset_kvs + i].data[1].key; 
		mykeyvalue1.value = vdram[dramoffset_kvs + i].data[1].value; 
		mykeyvalue2.key = vdram[dramoffset_kvs + i].data[2].key; 
		mykeyvalue2.value = vdram[dramoffset_kvs + i].data[2].value; 
		mykeyvalue3.key = vdram[dramoffset_kvs + i].data[3].key; 
		mykeyvalue3.value = vdram[dramoffset_kvs + i].data[3].value; 
		mykeyvalue4.key = vdram[dramoffset_kvs + i].data[4].key; 
		mykeyvalue4.value = vdram[dramoffset_kvs + i].data[4].value; 
		mykeyvalue5.key = vdram[dramoffset_kvs + i].data[5].key; 
		mykeyvalue5.value = vdram[dramoffset_kvs + i].data[5].value; 
		mykeyvalue6.key = vdram[dramoffset_kvs + i].data[6].key; 
		mykeyvalue6.value = vdram[dramoffset_kvs + i].data[6].value; 
		mykeyvalue7.key = vdram[dramoffset_kvs + i].data[7].key; 
		mykeyvalue7.value = vdram[dramoffset_kvs + i].data[7].value; 
		#endif 
		
		buffer0[begincol + 0][bufferoffset_kvs + i] = GETKV2(mykeyvalue0);
		buffer0[begincol + 1][bufferoffset_kvs + i] = GETKV2(mykeyvalue1);
		buffer0[begincol + 2][bufferoffset_kvs + i] = GETKV2(mykeyvalue2);
		buffer0[begincol + 3][bufferoffset_kvs + i] = GETKV2(mykeyvalue3);
		buffer0[begincol + 4][bufferoffset_kvs + i] = GETKV2(mykeyvalue4);
		buffer0[begincol + 5][bufferoffset_kvs + i] = GETKV2(mykeyvalue5);
		buffer0[begincol + 6][bufferoffset_kvs + i] = GETKV2(mykeyvalue6);
		buffer0[begincol + 7][bufferoffset_kvs + i] = GETKV2(mykeyvalue7);
		buffer1[begincol + 0][bufferoffset_kvs + i] = GETKV2(mykeyvalue0);
		buffer1[begincol + 1][bufferoffset_kvs + i] = GETKV2(mykeyvalue1);
		buffer1[begincol + 2][bufferoffset_kvs + i] = GETKV2(mykeyvalue2);
		buffer1[begincol + 3][bufferoffset_kvs + i] = GETKV2(mykeyvalue3);
		buffer1[begincol + 4][bufferoffset_kvs + i] = GETKV2(mykeyvalue4);
		buffer1[begincol + 5][bufferoffset_kvs + i] = GETKV2(mykeyvalue5);
		buffer1[begincol + 6][bufferoffset_kvs + i] = GETKV2(mykeyvalue6);
		buffer1[begincol + 7][bufferoffset_kvs + i] = GETKV2(mykeyvalue7);
		
		#ifdef _DEBUGMODE_STATS
		actsutilityobj->globalstats_countkvsread(VECTOR_SIZE);
		#endif
	}
	#ifdef _DEBUGMODE_KERNELPRINTS
	cout<< TIMINGRESULTSCOLOR<<"readvdata:: vertices read: offset: "<<dramoffset_kvs * VECTOR_SIZE<<"-"<<(dramoffset_kvs + size_kvs) * VECTOR_SIZE<<", number of vertex datas read: "<<(size_kvs * VECTOR_SIZE * 2)<<" ("<<size_kvs * VECTOR_SIZE<<" keyvalues written)"<< RESET<<endl;
	#endif
	#ifdef _DEBUGMODE_KERNELPRINTS
	if(dramoffset_kvs >= globalparams.BASEOFFSETKVS_VERTEXPTR_ && dramoffset_kvs < globalparams.BASEOFFSETKVS_VERTEXPTR + VERTEXPTRSSZ_KVS){ cout<< TIMINGRESULTSCOLOR<<"readvdata:: vertices read: offset: "<<(dramoffset_kvs - globalparams.BASEOFFSETKVS_VERTEXPTR) * VECTOR_SIZE<<"-"<<(dramoffset_kvs + size_kvs - globalparams.BASEOFFSETKVS_VERTEXPTR) * VECTOR_SIZE<<", number of vertex datas read: "<<(size_kvs * VECTOR_SIZE * 2)<<" ("<<size_kvs * VECTOR_SIZE<<" keyvalues written)"<< RESET<<endl; }
	if(dramoffset_kvs >= globalparams.BASEOFFSETKVS_VERTICESDATA_ && dramoffset_kvs < globalparams.BASEOFFSETKVS_DESTVERTICESDATA + VERTICESDATASZ_KVS){ cout<< TIMINGRESULTSCOLOR<<"readvdata:: vertices read: offset: "<<(dramoffset_kvs - globalparams.BASEOFFSETKVS_DESTVERTICESDATA) * VECTOR_SIZE<<"-"<<(dramoffset_kvs + size_kvs - globalparams.BASEOFFSETKVS_DESTVERTICESDATA) * VECTOR_SIZE<<", number of vertex datas read: "<<(size_kvs * VECTOR_SIZE * 2)<<" ("<<size_kvs * VECTOR_SIZE<<" keyvalues written)"<< RESET<<endl; }				
	#endif
	return;
}
void // 
	#ifdef SW 
	actsproc::
	#endif 
readandreplicate3vdata(bool_type enable, uint512_dt * vdram, batch_type dramoffset_kvs, keyvalue_vbuffer_t buffer0[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t buffer1[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t buffer2[VDATA_PACKINGSIZE][BLOCKRAM_SIZE], unsigned int begincol, batch_type bufferoffset_kvs, buffer_type size_kvs, globalparams_t globalparams){
	if(enable == OFF){ return; }
	analysis_type analysis_loopcount = BLOCKRAM_SIZE;
		
	READVDATA_LOOP: for (buffer_type i=0; i<size_kvs; i++){
	#pragma HLS LOOP_TRIPCOUNT min=0 max=analysis_loopcount avg=analysis_loopcount
	#pragma HLS PIPELINE II=1
		keyvalue_t mykeyvalue0;
		keyvalue_t mykeyvalue1;
		keyvalue_t mykeyvalue2;
		keyvalue_t mykeyvalue3;
		keyvalue_t mykeyvalue4;
		keyvalue_t mykeyvalue5;
		keyvalue_t mykeyvalue6;
		keyvalue_t mykeyvalue7;
		
		#ifdef _WIDEWORD
		mykeyvalue0.key = vdram[dramoffset_kvs + i].range(31, 0); 
		mykeyvalue0.value = vdram[dramoffset_kvs + i].range(63, 32); 
		mykeyvalue1.key = vdram[dramoffset_kvs + i].range(95, 64); 
		mykeyvalue1.value = vdram[dramoffset_kvs + i].range(127, 96); 
		mykeyvalue2.key = vdram[dramoffset_kvs + i].range(159, 128); 
		mykeyvalue2.value = vdram[dramoffset_kvs + i].range(191, 160); 
		mykeyvalue3.key = vdram[dramoffset_kvs + i].range(223, 192); 
		mykeyvalue3.value = vdram[dramoffset_kvs + i].range(255, 224); 
		mykeyvalue4.key = vdram[dramoffset_kvs + i].range(287, 256); 
		mykeyvalue4.value = vdram[dramoffset_kvs + i].range(319, 288); 
		mykeyvalue5.key = vdram[dramoffset_kvs + i].range(351, 320); 
		mykeyvalue5.value = vdram[dramoffset_kvs + i].range(383, 352); 
		mykeyvalue6.key = vdram[dramoffset_kvs + i].range(415, 384); 
		mykeyvalue6.value = vdram[dramoffset_kvs + i].range(447, 416); 
		mykeyvalue7.key = vdram[dramoffset_kvs + i].range(479, 448); 
		mykeyvalue7.value = vdram[dramoffset_kvs + i].range(511, 480); 
		#else 
		mykeyvalue0.key = vdram[dramoffset_kvs + i].data[0].key; 
		mykeyvalue0.value = vdram[dramoffset_kvs + i].data[0].value; 
		mykeyvalue1.key = vdram[dramoffset_kvs + i].data[1].key; 
		mykeyvalue1.value = vdram[dramoffset_kvs + i].data[1].value; 
		mykeyvalue2.key = vdram[dramoffset_kvs + i].data[2].key; 
		mykeyvalue2.value = vdram[dramoffset_kvs + i].data[2].value; 
		mykeyvalue3.key = vdram[dramoffset_kvs + i].data[3].key; 
		mykeyvalue3.value = vdram[dramoffset_kvs + i].data[3].value; 
		mykeyvalue4.key = vdram[dramoffset_kvs + i].data[4].key; 
		mykeyvalue4.value = vdram[dramoffset_kvs + i].data[4].value; 
		mykeyvalue5.key = vdram[dramoffset_kvs + i].data[5].key; 
		mykeyvalue5.value = vdram[dramoffset_kvs + i].data[5].value; 
		mykeyvalue6.key = vdram[dramoffset_kvs + i].data[6].key; 
		mykeyvalue6.value = vdram[dramoffset_kvs + i].data[6].value; 
		mykeyvalue7.key = vdram[dramoffset_kvs + i].data[7].key; 
		mykeyvalue7.value = vdram[dramoffset_kvs + i].data[7].value; 
		#endif 
		
		buffer0[begincol + 0][bufferoffset_kvs + i] = GETKV2(mykeyvalue0);
		buffer0[begincol + 1][bufferoffset_kvs + i] = GETKV2(mykeyvalue1);
		buffer0[begincol + 2][bufferoffset_kvs + i] = GETKV2(mykeyvalue2);
		buffer0[begincol + 3][bufferoffset_kvs + i] = GETKV2(mykeyvalue3);
		buffer0[begincol + 4][bufferoffset_kvs + i] = GETKV2(mykeyvalue4);
		buffer0[begincol + 5][bufferoffset_kvs + i] = GETKV2(mykeyvalue5);
		buffer0[begincol + 6][bufferoffset_kvs + i] = GETKV2(mykeyvalue6);
		buffer0[begincol + 7][bufferoffset_kvs + i] = GETKV2(mykeyvalue7);
		buffer1[begincol + 0][bufferoffset_kvs + i] = GETKV2(mykeyvalue0);
		buffer1[begincol + 1][bufferoffset_kvs + i] = GETKV2(mykeyvalue1);
		buffer1[begincol + 2][bufferoffset_kvs + i] = GETKV2(mykeyvalue2);
		buffer1[begincol + 3][bufferoffset_kvs + i] = GETKV2(mykeyvalue3);
		buffer1[begincol + 4][bufferoffset_kvs + i] = GETKV2(mykeyvalue4);
		buffer1[begincol + 5][bufferoffset_kvs + i] = GETKV2(mykeyvalue5);
		buffer1[begincol + 6][bufferoffset_kvs + i] = GETKV2(mykeyvalue6);
		buffer1[begincol + 7][bufferoffset_kvs + i] = GETKV2(mykeyvalue7);
		buffer2[begincol + 0][bufferoffset_kvs + i] = GETKV2(mykeyvalue0);
		buffer2[begincol + 1][bufferoffset_kvs + i] = GETKV2(mykeyvalue1);
		buffer2[begincol + 2][bufferoffset_kvs + i] = GETKV2(mykeyvalue2);
		buffer2[begincol + 3][bufferoffset_kvs + i] = GETKV2(mykeyvalue3);
		buffer2[begincol + 4][bufferoffset_kvs + i] = GETKV2(mykeyvalue4);
		buffer2[begincol + 5][bufferoffset_kvs + i] = GETKV2(mykeyvalue5);
		buffer2[begincol + 6][bufferoffset_kvs + i] = GETKV2(mykeyvalue6);
		buffer2[begincol + 7][bufferoffset_kvs + i] = GETKV2(mykeyvalue7);
		
		#ifdef _DEBUGMODE_STATS
		actsutilityobj->globalstats_countkvsread(VECTOR_SIZE);
		#endif
	}
	#ifdef _DEBUGMODE_KERNELPRINTS
	cout<< TIMINGRESULTSCOLOR<<"readvdata:: vertices read: offset: "<<dramoffset_kvs * VECTOR_SIZE<<"-"<<(dramoffset_kvs + size_kvs) * VECTOR_SIZE<<", number of vertex datas read: "<<(size_kvs * VECTOR_SIZE * 2)<<" ("<<size_kvs * VECTOR_SIZE<<" keyvalues written)"<< RESET<<endl;
	#endif
	#ifdef _DEBUGMODE_KERNELPRINTS
	if(dramoffset_kvs >= globalparams.BASEOFFSETKVS_VERTEXPTR_ && dramoffset_kvs < globalparams.BASEOFFSETKVS_VERTEXPTR + VERTEXPTRSSZ_KVS){ cout<< TIMINGRESULTSCOLOR<<"readvdata:: vertices read: offset: "<<(dramoffset_kvs - globalparams.BASEOFFSETKVS_VERTEXPTR) * VECTOR_SIZE<<"-"<<(dramoffset_kvs + size_kvs - globalparams.BASEOFFSETKVS_VERTEXPTR) * VECTOR_SIZE<<", number of vertex datas read: "<<(size_kvs * VECTOR_SIZE * 2)<<" ("<<size_kvs * VECTOR_SIZE<<" keyvalues written)"<< RESET<<endl; }
	if(dramoffset_kvs >= globalparams.BASEOFFSETKVS_VERTICESDATA_ && dramoffset_kvs < globalparams.BASEOFFSETKVS_DESTVERTICESDATA + VERTICESDATASZ_KVS){ cout<< TIMINGRESULTSCOLOR<<"readvdata:: vertices read: offset: "<<(dramoffset_kvs - globalparams.BASEOFFSETKVS_DESTVERTICESDATA) * VECTOR_SIZE<<"-"<<(dramoffset_kvs + size_kvs - globalparams.BASEOFFSETKVS_DESTVERTICESDATA) * VECTOR_SIZE<<", number of vertex datas read: "<<(size_kvs * VECTOR_SIZE * 2)<<" ("<<size_kvs * VECTOR_SIZE<<" keyvalues written)"<< RESET<<endl; }				
	#endif
	return;
}
void // 
	#ifdef SW 
	actsproc::
	#endif 
readandreplicate4vdata(bool_type enable, uint512_dt * vdram, batch_type dramoffset_kvs, keyvalue_vbuffer_t buffer0[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t buffer1[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t buffer2[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t buffer3[VDATA_PACKINGSIZE][BLOCKRAM_SIZE], unsigned int begincol, batch_type bufferoffset_kvs, buffer_type size_kvs, globalparams_t globalparams){
	if(enable == OFF){ return; }
	analysis_type analysis_loopcount = BLOCKRAM_SIZE;
		
	READVDATA_LOOP: for (buffer_type i=0; i<size_kvs; i++){
	#pragma HLS LOOP_TRIPCOUNT min=0 max=analysis_loopcount avg=analysis_loopcount
	#pragma HLS PIPELINE II=1
		keyvalue_t mykeyvalue0;
		keyvalue_t mykeyvalue1;
		keyvalue_t mykeyvalue2;
		keyvalue_t mykeyvalue3;
		keyvalue_t mykeyvalue4;
		keyvalue_t mykeyvalue5;
		keyvalue_t mykeyvalue6;
		keyvalue_t mykeyvalue7;
		
		#ifdef _WIDEWORD
		mykeyvalue0.key = vdram[dramoffset_kvs + i].range(31, 0); 
		mykeyvalue0.value = vdram[dramoffset_kvs + i].range(63, 32); 
		mykeyvalue1.key = vdram[dramoffset_kvs + i].range(95, 64); 
		mykeyvalue1.value = vdram[dramoffset_kvs + i].range(127, 96); 
		mykeyvalue2.key = vdram[dramoffset_kvs + i].range(159, 128); 
		mykeyvalue2.value = vdram[dramoffset_kvs + i].range(191, 160); 
		mykeyvalue3.key = vdram[dramoffset_kvs + i].range(223, 192); 
		mykeyvalue3.value = vdram[dramoffset_kvs + i].range(255, 224); 
		mykeyvalue4.key = vdram[dramoffset_kvs + i].range(287, 256); 
		mykeyvalue4.value = vdram[dramoffset_kvs + i].range(319, 288); 
		mykeyvalue5.key = vdram[dramoffset_kvs + i].range(351, 320); 
		mykeyvalue5.value = vdram[dramoffset_kvs + i].range(383, 352); 
		mykeyvalue6.key = vdram[dramoffset_kvs + i].range(415, 384); 
		mykeyvalue6.value = vdram[dramoffset_kvs + i].range(447, 416); 
		mykeyvalue7.key = vdram[dramoffset_kvs + i].range(479, 448); 
		mykeyvalue7.value = vdram[dramoffset_kvs + i].range(511, 480); 
		#else 
		mykeyvalue0.key = vdram[dramoffset_kvs + i].data[0].key; 
		mykeyvalue0.value = vdram[dramoffset_kvs + i].data[0].value; 
		mykeyvalue1.key = vdram[dramoffset_kvs + i].data[1].key; 
		mykeyvalue1.value = vdram[dramoffset_kvs + i].data[1].value; 
		mykeyvalue2.key = vdram[dramoffset_kvs + i].data[2].key; 
		mykeyvalue2.value = vdram[dramoffset_kvs + i].data[2].value; 
		mykeyvalue3.key = vdram[dramoffset_kvs + i].data[3].key; 
		mykeyvalue3.value = vdram[dramoffset_kvs + i].data[3].value; 
		mykeyvalue4.key = vdram[dramoffset_kvs + i].data[4].key; 
		mykeyvalue4.value = vdram[dramoffset_kvs + i].data[4].value; 
		mykeyvalue5.key = vdram[dramoffset_kvs + i].data[5].key; 
		mykeyvalue5.value = vdram[dramoffset_kvs + i].data[5].value; 
		mykeyvalue6.key = vdram[dramoffset_kvs + i].data[6].key; 
		mykeyvalue6.value = vdram[dramoffset_kvs + i].data[6].value; 
		mykeyvalue7.key = vdram[dramoffset_kvs + i].data[7].key; 
		mykeyvalue7.value = vdram[dramoffset_kvs + i].data[7].value; 
		#endif 
		
		buffer0[begincol + 0][bufferoffset_kvs + i] = GETKV2(mykeyvalue0);
		buffer0[begincol + 1][bufferoffset_kvs + i] = GETKV2(mykeyvalue1);
		buffer0[begincol + 2][bufferoffset_kvs + i] = GETKV2(mykeyvalue2);
		buffer0[begincol + 3][bufferoffset_kvs + i] = GETKV2(mykeyvalue3);
		buffer0[begincol + 4][bufferoffset_kvs + i] = GETKV2(mykeyvalue4);
		buffer0[begincol + 5][bufferoffset_kvs + i] = GETKV2(mykeyvalue5);
		buffer0[begincol + 6][bufferoffset_kvs + i] = GETKV2(mykeyvalue6);
		buffer0[begincol + 7][bufferoffset_kvs + i] = GETKV2(mykeyvalue7);
		buffer1[begincol + 0][bufferoffset_kvs + i] = GETKV2(mykeyvalue0);
		buffer1[begincol + 1][bufferoffset_kvs + i] = GETKV2(mykeyvalue1);
		buffer1[begincol + 2][bufferoffset_kvs + i] = GETKV2(mykeyvalue2);
		buffer1[begincol + 3][bufferoffset_kvs + i] = GETKV2(mykeyvalue3);
		buffer1[begincol + 4][bufferoffset_kvs + i] = GETKV2(mykeyvalue4);
		buffer1[begincol + 5][bufferoffset_kvs + i] = GETKV2(mykeyvalue5);
		buffer1[begincol + 6][bufferoffset_kvs + i] = GETKV2(mykeyvalue6);
		buffer1[begincol + 7][bufferoffset_kvs + i] = GETKV2(mykeyvalue7);
		buffer2[begincol + 0][bufferoffset_kvs + i] = GETKV2(mykeyvalue0);
		buffer2[begincol + 1][bufferoffset_kvs + i] = GETKV2(mykeyvalue1);
		buffer2[begincol + 2][bufferoffset_kvs + i] = GETKV2(mykeyvalue2);
		buffer2[begincol + 3][bufferoffset_kvs + i] = GETKV2(mykeyvalue3);
		buffer2[begincol + 4][bufferoffset_kvs + i] = GETKV2(mykeyvalue4);
		buffer2[begincol + 5][bufferoffset_kvs + i] = GETKV2(mykeyvalue5);
		buffer2[begincol + 6][bufferoffset_kvs + i] = GETKV2(mykeyvalue6);
		buffer2[begincol + 7][bufferoffset_kvs + i] = GETKV2(mykeyvalue7);
		buffer3[begincol + 0][bufferoffset_kvs + i] = GETKV2(mykeyvalue0);
		buffer3[begincol + 1][bufferoffset_kvs + i] = GETKV2(mykeyvalue1);
		buffer3[begincol + 2][bufferoffset_kvs + i] = GETKV2(mykeyvalue2);
		buffer3[begincol + 3][bufferoffset_kvs + i] = GETKV2(mykeyvalue3);
		buffer3[begincol + 4][bufferoffset_kvs + i] = GETKV2(mykeyvalue4);
		buffer3[begincol + 5][bufferoffset_kvs + i] = GETKV2(mykeyvalue5);
		buffer3[begincol + 6][bufferoffset_kvs + i] = GETKV2(mykeyvalue6);
		buffer3[begincol + 7][bufferoffset_kvs + i] = GETKV2(mykeyvalue7);
		
		#ifdef _DEBUGMODE_STATS
		actsutilityobj->globalstats_countkvsread(VECTOR_SIZE);
		#endif
	}
	#ifdef _DEBUGMODE_KERNELPRINTS
	cout<< TIMINGRESULTSCOLOR<<"readvdata:: vertices read: offset: "<<dramoffset_kvs * VECTOR_SIZE<<"-"<<(dramoffset_kvs + size_kvs) * VECTOR_SIZE<<", number of vertex datas read: "<<(size_kvs * VECTOR_SIZE * 2)<<" ("<<size_kvs * VECTOR_SIZE<<" keyvalues written)"<< RESET<<endl;
	#endif
	#ifdef _DEBUGMODE_KERNELPRINTS
	if(dramoffset_kvs >= globalparams.BASEOFFSETKVS_VERTEXPTR_ && dramoffset_kvs < globalparams.BASEOFFSETKVS_VERTEXPTR + VERTEXPTRSSZ_KVS){ cout<< TIMINGRESULTSCOLOR<<"readvdata:: vertices read: offset: "<<(dramoffset_kvs - globalparams.BASEOFFSETKVS_VERTEXPTR) * VECTOR_SIZE<<"-"<<(dramoffset_kvs + size_kvs - globalparams.BASEOFFSETKVS_VERTEXPTR) * VECTOR_SIZE<<", number of vertex datas read: "<<(size_kvs * VECTOR_SIZE * 2)<<" ("<<size_kvs * VECTOR_SIZE<<" keyvalues written)"<< RESET<<endl; }
	if(dramoffset_kvs >= globalparams.BASEOFFSETKVS_VERTICESDATA_ && dramoffset_kvs < globalparams.BASEOFFSETKVS_DESTVERTICESDATA + VERTICESDATASZ_KVS){ cout<< TIMINGRESULTSCOLOR<<"readvdata:: vertices read: offset: "<<(dramoffset_kvs - globalparams.BASEOFFSETKVS_DESTVERTICESDATA) * VECTOR_SIZE<<"-"<<(dramoffset_kvs + size_kvs - globalparams.BASEOFFSETKVS_DESTVERTICESDATA) * VECTOR_SIZE<<", number of vertex datas read: "<<(size_kvs * VECTOR_SIZE * 2)<<" ("<<size_kvs * VECTOR_SIZE<<" keyvalues written)"<< RESET<<endl; }				
	#endif
	return;
}
void // 
	#ifdef SW 
	actsproc::
	#endif 
readandreplicate5vdata(bool_type enable, uint512_dt * vdram, batch_type dramoffset_kvs, keyvalue_vbuffer_t buffer0[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t buffer1[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t buffer2[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t buffer3[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t buffer4[VDATA_PACKINGSIZE][BLOCKRAM_SIZE], unsigned int begincol, batch_type bufferoffset_kvs, buffer_type size_kvs, globalparams_t globalparams){
	if(enable == OFF){ return; }
	analysis_type analysis_loopcount = BLOCKRAM_SIZE;
		
	READVDATA_LOOP: for (buffer_type i=0; i<size_kvs; i++){
	#pragma HLS LOOP_TRIPCOUNT min=0 max=analysis_loopcount avg=analysis_loopcount
	#pragma HLS PIPELINE II=1
		keyvalue_t mykeyvalue0;
		keyvalue_t mykeyvalue1;
		keyvalue_t mykeyvalue2;
		keyvalue_t mykeyvalue3;
		keyvalue_t mykeyvalue4;
		keyvalue_t mykeyvalue5;
		keyvalue_t mykeyvalue6;
		keyvalue_t mykeyvalue7;
		
		#ifdef _WIDEWORD
		mykeyvalue0.key = vdram[dramoffset_kvs + i].range(31, 0); 
		mykeyvalue0.value = vdram[dramoffset_kvs + i].range(63, 32); 
		mykeyvalue1.key = vdram[dramoffset_kvs + i].range(95, 64); 
		mykeyvalue1.value = vdram[dramoffset_kvs + i].range(127, 96); 
		mykeyvalue2.key = vdram[dramoffset_kvs + i].range(159, 128); 
		mykeyvalue2.value = vdram[dramoffset_kvs + i].range(191, 160); 
		mykeyvalue3.key = vdram[dramoffset_kvs + i].range(223, 192); 
		mykeyvalue3.value = vdram[dramoffset_kvs + i].range(255, 224); 
		mykeyvalue4.key = vdram[dramoffset_kvs + i].range(287, 256); 
		mykeyvalue4.value = vdram[dramoffset_kvs + i].range(319, 288); 
		mykeyvalue5.key = vdram[dramoffset_kvs + i].range(351, 320); 
		mykeyvalue5.value = vdram[dramoffset_kvs + i].range(383, 352); 
		mykeyvalue6.key = vdram[dramoffset_kvs + i].range(415, 384); 
		mykeyvalue6.value = vdram[dramoffset_kvs + i].range(447, 416); 
		mykeyvalue7.key = vdram[dramoffset_kvs + i].range(479, 448); 
		mykeyvalue7.value = vdram[dramoffset_kvs + i].range(511, 480); 
		#else 
		mykeyvalue0.key = vdram[dramoffset_kvs + i].data[0].key; 
		mykeyvalue0.value = vdram[dramoffset_kvs + i].data[0].value; 
		mykeyvalue1.key = vdram[dramoffset_kvs + i].data[1].key; 
		mykeyvalue1.value = vdram[dramoffset_kvs + i].data[1].value; 
		mykeyvalue2.key = vdram[dramoffset_kvs + i].data[2].key; 
		mykeyvalue2.value = vdram[dramoffset_kvs + i].data[2].value; 
		mykeyvalue3.key = vdram[dramoffset_kvs + i].data[3].key; 
		mykeyvalue3.value = vdram[dramoffset_kvs + i].data[3].value; 
		mykeyvalue4.key = vdram[dramoffset_kvs + i].data[4].key; 
		mykeyvalue4.value = vdram[dramoffset_kvs + i].data[4].value; 
		mykeyvalue5.key = vdram[dramoffset_kvs + i].data[5].key; 
		mykeyvalue5.value = vdram[dramoffset_kvs + i].data[5].value; 
		mykeyvalue6.key = vdram[dramoffset_kvs + i].data[6].key; 
		mykeyvalue6.value = vdram[dramoffset_kvs + i].data[6].value; 
		mykeyvalue7.key = vdram[dramoffset_kvs + i].data[7].key; 
		mykeyvalue7.value = vdram[dramoffset_kvs + i].data[7].value; 
		#endif 
		
		buffer0[begincol + 0][bufferoffset_kvs + i] = GETKV2(mykeyvalue0);
		buffer0[begincol + 1][bufferoffset_kvs + i] = GETKV2(mykeyvalue1);
		buffer0[begincol + 2][bufferoffset_kvs + i] = GETKV2(mykeyvalue2);
		buffer0[begincol + 3][bufferoffset_kvs + i] = GETKV2(mykeyvalue3);
		buffer0[begincol + 4][bufferoffset_kvs + i] = GETKV2(mykeyvalue4);
		buffer0[begincol + 5][bufferoffset_kvs + i] = GETKV2(mykeyvalue5);
		buffer0[begincol + 6][bufferoffset_kvs + i] = GETKV2(mykeyvalue6);
		buffer0[begincol + 7][bufferoffset_kvs + i] = GETKV2(mykeyvalue7);
		buffer1[begincol + 0][bufferoffset_kvs + i] = GETKV2(mykeyvalue0);
		buffer1[begincol + 1][bufferoffset_kvs + i] = GETKV2(mykeyvalue1);
		buffer1[begincol + 2][bufferoffset_kvs + i] = GETKV2(mykeyvalue2);
		buffer1[begincol + 3][bufferoffset_kvs + i] = GETKV2(mykeyvalue3);
		buffer1[begincol + 4][bufferoffset_kvs + i] = GETKV2(mykeyvalue4);
		buffer1[begincol + 5][bufferoffset_kvs + i] = GETKV2(mykeyvalue5);
		buffer1[begincol + 6][bufferoffset_kvs + i] = GETKV2(mykeyvalue6);
		buffer1[begincol + 7][bufferoffset_kvs + i] = GETKV2(mykeyvalue7);
		buffer2[begincol + 0][bufferoffset_kvs + i] = GETKV2(mykeyvalue0);
		buffer2[begincol + 1][bufferoffset_kvs + i] = GETKV2(mykeyvalue1);
		buffer2[begincol + 2][bufferoffset_kvs + i] = GETKV2(mykeyvalue2);
		buffer2[begincol + 3][bufferoffset_kvs + i] = GETKV2(mykeyvalue3);
		buffer2[begincol + 4][bufferoffset_kvs + i] = GETKV2(mykeyvalue4);
		buffer2[begincol + 5][bufferoffset_kvs + i] = GETKV2(mykeyvalue5);
		buffer2[begincol + 6][bufferoffset_kvs + i] = GETKV2(mykeyvalue6);
		buffer2[begincol + 7][bufferoffset_kvs + i] = GETKV2(mykeyvalue7);
		buffer3[begincol + 0][bufferoffset_kvs + i] = GETKV2(mykeyvalue0);
		buffer3[begincol + 1][bufferoffset_kvs + i] = GETKV2(mykeyvalue1);
		buffer3[begincol + 2][bufferoffset_kvs + i] = GETKV2(mykeyvalue2);
		buffer3[begincol + 3][bufferoffset_kvs + i] = GETKV2(mykeyvalue3);
		buffer3[begincol + 4][bufferoffset_kvs + i] = GETKV2(mykeyvalue4);
		buffer3[begincol + 5][bufferoffset_kvs + i] = GETKV2(mykeyvalue5);
		buffer3[begincol + 6][bufferoffset_kvs + i] = GETKV2(mykeyvalue6);
		buffer3[begincol + 7][bufferoffset_kvs + i] = GETKV2(mykeyvalue7);
		buffer4[begincol + 0][bufferoffset_kvs + i] = GETKV2(mykeyvalue0);
		buffer4[begincol + 1][bufferoffset_kvs + i] = GETKV2(mykeyvalue1);
		buffer4[begincol + 2][bufferoffset_kvs + i] = GETKV2(mykeyvalue2);
		buffer4[begincol + 3][bufferoffset_kvs + i] = GETKV2(mykeyvalue3);
		buffer4[begincol + 4][bufferoffset_kvs + i] = GETKV2(mykeyvalue4);
		buffer4[begincol + 5][bufferoffset_kvs + i] = GETKV2(mykeyvalue5);
		buffer4[begincol + 6][bufferoffset_kvs + i] = GETKV2(mykeyvalue6);
		buffer4[begincol + 7][bufferoffset_kvs + i] = GETKV2(mykeyvalue7);
		
		#ifdef _DEBUGMODE_STATS
		actsutilityobj->globalstats_countkvsread(VECTOR_SIZE);
		#endif
	}
	#ifdef _DEBUGMODE_KERNELPRINTS
	cout<< TIMINGRESULTSCOLOR<<"readvdata:: vertices read: offset: "<<dramoffset_kvs * VECTOR_SIZE<<"-"<<(dramoffset_kvs + size_kvs) * VECTOR_SIZE<<", number of vertex datas read: "<<(size_kvs * VECTOR_SIZE * 2)<<" ("<<size_kvs * VECTOR_SIZE<<" keyvalues written)"<< RESET<<endl;
	#endif
	#ifdef _DEBUGMODE_KERNELPRINTS
	if(dramoffset_kvs >= globalparams.BASEOFFSETKVS_VERTEXPTR_ && dramoffset_kvs < globalparams.BASEOFFSETKVS_VERTEXPTR + VERTEXPTRSSZ_KVS){ cout<< TIMINGRESULTSCOLOR<<"readvdata:: vertices read: offset: "<<(dramoffset_kvs - globalparams.BASEOFFSETKVS_VERTEXPTR) * VECTOR_SIZE<<"-"<<(dramoffset_kvs + size_kvs - globalparams.BASEOFFSETKVS_VERTEXPTR) * VECTOR_SIZE<<", number of vertex datas read: "<<(size_kvs * VECTOR_SIZE * 2)<<" ("<<size_kvs * VECTOR_SIZE<<" keyvalues written)"<< RESET<<endl; }
	if(dramoffset_kvs >= globalparams.BASEOFFSETKVS_VERTICESDATA_ && dramoffset_kvs < globalparams.BASEOFFSETKVS_DESTVERTICESDATA + VERTICESDATASZ_KVS){ cout<< TIMINGRESULTSCOLOR<<"readvdata:: vertices read: offset: "<<(dramoffset_kvs - globalparams.BASEOFFSETKVS_DESTVERTICESDATA) * VECTOR_SIZE<<"-"<<(dramoffset_kvs + size_kvs - globalparams.BASEOFFSETKVS_DESTVERTICESDATA) * VECTOR_SIZE<<", number of vertex datas read: "<<(size_kvs * VECTOR_SIZE * 2)<<" ("<<size_kvs * VECTOR_SIZE<<" keyvalues written)"<< RESET<<endl; }				
	#endif
	return;
}
void // 
	#ifdef SW 
	actsproc::
	#endif 
readandreplicate6vdata(bool_type enable, uint512_dt * vdram, batch_type dramoffset_kvs, keyvalue_vbuffer_t buffer0[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t buffer1[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t buffer2[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t buffer3[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t buffer4[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t buffer5[VDATA_PACKINGSIZE][BLOCKRAM_SIZE], unsigned int begincol, batch_type bufferoffset_kvs, buffer_type size_kvs, globalparams_t globalparams){
	if(enable == OFF){ return; }
	analysis_type analysis_loopcount = BLOCKRAM_SIZE;
		
	READVDATA_LOOP: for (buffer_type i=0; i<size_kvs; i++){
	#pragma HLS LOOP_TRIPCOUNT min=0 max=analysis_loopcount avg=analysis_loopcount
	#pragma HLS PIPELINE II=1
		keyvalue_t mykeyvalue0;
		keyvalue_t mykeyvalue1;
		keyvalue_t mykeyvalue2;
		keyvalue_t mykeyvalue3;
		keyvalue_t mykeyvalue4;
		keyvalue_t mykeyvalue5;
		keyvalue_t mykeyvalue6;
		keyvalue_t mykeyvalue7;
		
		#ifdef _WIDEWORD
		mykeyvalue0.key = vdram[dramoffset_kvs + i].range(31, 0); 
		mykeyvalue0.value = vdram[dramoffset_kvs + i].range(63, 32); 
		mykeyvalue1.key = vdram[dramoffset_kvs + i].range(95, 64); 
		mykeyvalue1.value = vdram[dramoffset_kvs + i].range(127, 96); 
		mykeyvalue2.key = vdram[dramoffset_kvs + i].range(159, 128); 
		mykeyvalue2.value = vdram[dramoffset_kvs + i].range(191, 160); 
		mykeyvalue3.key = vdram[dramoffset_kvs + i].range(223, 192); 
		mykeyvalue3.value = vdram[dramoffset_kvs + i].range(255, 224); 
		mykeyvalue4.key = vdram[dramoffset_kvs + i].range(287, 256); 
		mykeyvalue4.value = vdram[dramoffset_kvs + i].range(319, 288); 
		mykeyvalue5.key = vdram[dramoffset_kvs + i].range(351, 320); 
		mykeyvalue5.value = vdram[dramoffset_kvs + i].range(383, 352); 
		mykeyvalue6.key = vdram[dramoffset_kvs + i].range(415, 384); 
		mykeyvalue6.value = vdram[dramoffset_kvs + i].range(447, 416); 
		mykeyvalue7.key = vdram[dramoffset_kvs + i].range(479, 448); 
		mykeyvalue7.value = vdram[dramoffset_kvs + i].range(511, 480); 
		#else 
		mykeyvalue0.key = vdram[dramoffset_kvs + i].data[0].key; 
		mykeyvalue0.value = vdram[dramoffset_kvs + i].data[0].value; 
		mykeyvalue1.key = vdram[dramoffset_kvs + i].data[1].key; 
		mykeyvalue1.value = vdram[dramoffset_kvs + i].data[1].value; 
		mykeyvalue2.key = vdram[dramoffset_kvs + i].data[2].key; 
		mykeyvalue2.value = vdram[dramoffset_kvs + i].data[2].value; 
		mykeyvalue3.key = vdram[dramoffset_kvs + i].data[3].key; 
		mykeyvalue3.value = vdram[dramoffset_kvs + i].data[3].value; 
		mykeyvalue4.key = vdram[dramoffset_kvs + i].data[4].key; 
		mykeyvalue4.value = vdram[dramoffset_kvs + i].data[4].value; 
		mykeyvalue5.key = vdram[dramoffset_kvs + i].data[5].key; 
		mykeyvalue5.value = vdram[dramoffset_kvs + i].data[5].value; 
		mykeyvalue6.key = vdram[dramoffset_kvs + i].data[6].key; 
		mykeyvalue6.value = vdram[dramoffset_kvs + i].data[6].value; 
		mykeyvalue7.key = vdram[dramoffset_kvs + i].data[7].key; 
		mykeyvalue7.value = vdram[dramoffset_kvs + i].data[7].value; 
		#endif 
		
		buffer0[begincol + 0][bufferoffset_kvs + i] = GETKV2(mykeyvalue0);
		buffer0[begincol + 1][bufferoffset_kvs + i] = GETKV2(mykeyvalue1);
		buffer0[begincol + 2][bufferoffset_kvs + i] = GETKV2(mykeyvalue2);
		buffer0[begincol + 3][bufferoffset_kvs + i] = GETKV2(mykeyvalue3);
		buffer0[begincol + 4][bufferoffset_kvs + i] = GETKV2(mykeyvalue4);
		buffer0[begincol + 5][bufferoffset_kvs + i] = GETKV2(mykeyvalue5);
		buffer0[begincol + 6][bufferoffset_kvs + i] = GETKV2(mykeyvalue6);
		buffer0[begincol + 7][bufferoffset_kvs + i] = GETKV2(mykeyvalue7);
		buffer1[begincol + 0][bufferoffset_kvs + i] = GETKV2(mykeyvalue0);
		buffer1[begincol + 1][bufferoffset_kvs + i] = GETKV2(mykeyvalue1);
		buffer1[begincol + 2][bufferoffset_kvs + i] = GETKV2(mykeyvalue2);
		buffer1[begincol + 3][bufferoffset_kvs + i] = GETKV2(mykeyvalue3);
		buffer1[begincol + 4][bufferoffset_kvs + i] = GETKV2(mykeyvalue4);
		buffer1[begincol + 5][bufferoffset_kvs + i] = GETKV2(mykeyvalue5);
		buffer1[begincol + 6][bufferoffset_kvs + i] = GETKV2(mykeyvalue6);
		buffer1[begincol + 7][bufferoffset_kvs + i] = GETKV2(mykeyvalue7);
		buffer2[begincol + 0][bufferoffset_kvs + i] = GETKV2(mykeyvalue0);
		buffer2[begincol + 1][bufferoffset_kvs + i] = GETKV2(mykeyvalue1);
		buffer2[begincol + 2][bufferoffset_kvs + i] = GETKV2(mykeyvalue2);
		buffer2[begincol + 3][bufferoffset_kvs + i] = GETKV2(mykeyvalue3);
		buffer2[begincol + 4][bufferoffset_kvs + i] = GETKV2(mykeyvalue4);
		buffer2[begincol + 5][bufferoffset_kvs + i] = GETKV2(mykeyvalue5);
		buffer2[begincol + 6][bufferoffset_kvs + i] = GETKV2(mykeyvalue6);
		buffer2[begincol + 7][bufferoffset_kvs + i] = GETKV2(mykeyvalue7);
		buffer3[begincol + 0][bufferoffset_kvs + i] = GETKV2(mykeyvalue0);
		buffer3[begincol + 1][bufferoffset_kvs + i] = GETKV2(mykeyvalue1);
		buffer3[begincol + 2][bufferoffset_kvs + i] = GETKV2(mykeyvalue2);
		buffer3[begincol + 3][bufferoffset_kvs + i] = GETKV2(mykeyvalue3);
		buffer3[begincol + 4][bufferoffset_kvs + i] = GETKV2(mykeyvalue4);
		buffer3[begincol + 5][bufferoffset_kvs + i] = GETKV2(mykeyvalue5);
		buffer3[begincol + 6][bufferoffset_kvs + i] = GETKV2(mykeyvalue6);
		buffer3[begincol + 7][bufferoffset_kvs + i] = GETKV2(mykeyvalue7);
		buffer4[begincol + 0][bufferoffset_kvs + i] = GETKV2(mykeyvalue0);
		buffer4[begincol + 1][bufferoffset_kvs + i] = GETKV2(mykeyvalue1);
		buffer4[begincol + 2][bufferoffset_kvs + i] = GETKV2(mykeyvalue2);
		buffer4[begincol + 3][bufferoffset_kvs + i] = GETKV2(mykeyvalue3);
		buffer4[begincol + 4][bufferoffset_kvs + i] = GETKV2(mykeyvalue4);
		buffer4[begincol + 5][bufferoffset_kvs + i] = GETKV2(mykeyvalue5);
		buffer4[begincol + 6][bufferoffset_kvs + i] = GETKV2(mykeyvalue6);
		buffer4[begincol + 7][bufferoffset_kvs + i] = GETKV2(mykeyvalue7);
		buffer5[begincol + 0][bufferoffset_kvs + i] = GETKV2(mykeyvalue0);
		buffer5[begincol + 1][bufferoffset_kvs + i] = GETKV2(mykeyvalue1);
		buffer5[begincol + 2][bufferoffset_kvs + i] = GETKV2(mykeyvalue2);
		buffer5[begincol + 3][bufferoffset_kvs + i] = GETKV2(mykeyvalue3);
		buffer5[begincol + 4][bufferoffset_kvs + i] = GETKV2(mykeyvalue4);
		buffer5[begincol + 5][bufferoffset_kvs + i] = GETKV2(mykeyvalue5);
		buffer5[begincol + 6][bufferoffset_kvs + i] = GETKV2(mykeyvalue6);
		buffer5[begincol + 7][bufferoffset_kvs + i] = GETKV2(mykeyvalue7);
		
		#ifdef _DEBUGMODE_STATS
		actsutilityobj->globalstats_countkvsread(VECTOR_SIZE);
		#endif
	}
	#ifdef _DEBUGMODE_KERNELPRINTS
	cout<< TIMINGRESULTSCOLOR<<"readvdata:: vertices read: offset: "<<dramoffset_kvs * VECTOR_SIZE<<"-"<<(dramoffset_kvs + size_kvs) * VECTOR_SIZE<<", number of vertex datas read: "<<(size_kvs * VECTOR_SIZE * 2)<<" ("<<size_kvs * VECTOR_SIZE<<" keyvalues written)"<< RESET<<endl;
	#endif
	#ifdef _DEBUGMODE_KERNELPRINTS
	if(dramoffset_kvs >= globalparams.BASEOFFSETKVS_VERTEXPTR_ && dramoffset_kvs < globalparams.BASEOFFSETKVS_VERTEXPTR + VERTEXPTRSSZ_KVS){ cout<< TIMINGRESULTSCOLOR<<"readvdata:: vertices read: offset: "<<(dramoffset_kvs - globalparams.BASEOFFSETKVS_VERTEXPTR) * VECTOR_SIZE<<"-"<<(dramoffset_kvs + size_kvs - globalparams.BASEOFFSETKVS_VERTEXPTR) * VECTOR_SIZE<<", number of vertex datas read: "<<(size_kvs * VECTOR_SIZE * 2)<<" ("<<size_kvs * VECTOR_SIZE<<" keyvalues written)"<< RESET<<endl; }
	if(dramoffset_kvs >= globalparams.BASEOFFSETKVS_VERTICESDATA_ && dramoffset_kvs < globalparams.BASEOFFSETKVS_DESTVERTICESDATA + VERTICESDATASZ_KVS){ cout<< TIMINGRESULTSCOLOR<<"readvdata:: vertices read: offset: "<<(dramoffset_kvs - globalparams.BASEOFFSETKVS_DESTVERTICESDATA) * VECTOR_SIZE<<"-"<<(dramoffset_kvs + size_kvs - globalparams.BASEOFFSETKVS_DESTVERTICESDATA) * VECTOR_SIZE<<", number of vertex datas read: "<<(size_kvs * VECTOR_SIZE * 2)<<" ("<<size_kvs * VECTOR_SIZE<<" keyvalues written)"<< RESET<<endl; }				
	#endif
	return;
}
void // 
	#ifdef SW 
	actsproc::
	#endif 
readandreplicate7vdata(bool_type enable, uint512_dt * vdram, batch_type dramoffset_kvs, keyvalue_vbuffer_t buffer0[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t buffer1[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t buffer2[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t buffer3[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t buffer4[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t buffer5[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t buffer6[VDATA_PACKINGSIZE][BLOCKRAM_SIZE], unsigned int begincol, batch_type bufferoffset_kvs, buffer_type size_kvs, globalparams_t globalparams){
	if(enable == OFF){ return; }
	analysis_type analysis_loopcount = BLOCKRAM_SIZE;
		
	READVDATA_LOOP: for (buffer_type i=0; i<size_kvs; i++){
	#pragma HLS LOOP_TRIPCOUNT min=0 max=analysis_loopcount avg=analysis_loopcount
	#pragma HLS PIPELINE II=1
		keyvalue_t mykeyvalue0;
		keyvalue_t mykeyvalue1;
		keyvalue_t mykeyvalue2;
		keyvalue_t mykeyvalue3;
		keyvalue_t mykeyvalue4;
		keyvalue_t mykeyvalue5;
		keyvalue_t mykeyvalue6;
		keyvalue_t mykeyvalue7;
		
		#ifdef _WIDEWORD
		mykeyvalue0.key = vdram[dramoffset_kvs + i].range(31, 0); 
		mykeyvalue0.value = vdram[dramoffset_kvs + i].range(63, 32); 
		mykeyvalue1.key = vdram[dramoffset_kvs + i].range(95, 64); 
		mykeyvalue1.value = vdram[dramoffset_kvs + i].range(127, 96); 
		mykeyvalue2.key = vdram[dramoffset_kvs + i].range(159, 128); 
		mykeyvalue2.value = vdram[dramoffset_kvs + i].range(191, 160); 
		mykeyvalue3.key = vdram[dramoffset_kvs + i].range(223, 192); 
		mykeyvalue3.value = vdram[dramoffset_kvs + i].range(255, 224); 
		mykeyvalue4.key = vdram[dramoffset_kvs + i].range(287, 256); 
		mykeyvalue4.value = vdram[dramoffset_kvs + i].range(319, 288); 
		mykeyvalue5.key = vdram[dramoffset_kvs + i].range(351, 320); 
		mykeyvalue5.value = vdram[dramoffset_kvs + i].range(383, 352); 
		mykeyvalue6.key = vdram[dramoffset_kvs + i].range(415, 384); 
		mykeyvalue6.value = vdram[dramoffset_kvs + i].range(447, 416); 
		mykeyvalue7.key = vdram[dramoffset_kvs + i].range(479, 448); 
		mykeyvalue7.value = vdram[dramoffset_kvs + i].range(511, 480); 
		#else 
		mykeyvalue0.key = vdram[dramoffset_kvs + i].data[0].key; 
		mykeyvalue0.value = vdram[dramoffset_kvs + i].data[0].value; 
		mykeyvalue1.key = vdram[dramoffset_kvs + i].data[1].key; 
		mykeyvalue1.value = vdram[dramoffset_kvs + i].data[1].value; 
		mykeyvalue2.key = vdram[dramoffset_kvs + i].data[2].key; 
		mykeyvalue2.value = vdram[dramoffset_kvs + i].data[2].value; 
		mykeyvalue3.key = vdram[dramoffset_kvs + i].data[3].key; 
		mykeyvalue3.value = vdram[dramoffset_kvs + i].data[3].value; 
		mykeyvalue4.key = vdram[dramoffset_kvs + i].data[4].key; 
		mykeyvalue4.value = vdram[dramoffset_kvs + i].data[4].value; 
		mykeyvalue5.key = vdram[dramoffset_kvs + i].data[5].key; 
		mykeyvalue5.value = vdram[dramoffset_kvs + i].data[5].value; 
		mykeyvalue6.key = vdram[dramoffset_kvs + i].data[6].key; 
		mykeyvalue6.value = vdram[dramoffset_kvs + i].data[6].value; 
		mykeyvalue7.key = vdram[dramoffset_kvs + i].data[7].key; 
		mykeyvalue7.value = vdram[dramoffset_kvs + i].data[7].value; 
		#endif 
		
		buffer0[begincol + 0][bufferoffset_kvs + i] = GETKV2(mykeyvalue0);
		buffer0[begincol + 1][bufferoffset_kvs + i] = GETKV2(mykeyvalue1);
		buffer0[begincol + 2][bufferoffset_kvs + i] = GETKV2(mykeyvalue2);
		buffer0[begincol + 3][bufferoffset_kvs + i] = GETKV2(mykeyvalue3);
		buffer0[begincol + 4][bufferoffset_kvs + i] = GETKV2(mykeyvalue4);
		buffer0[begincol + 5][bufferoffset_kvs + i] = GETKV2(mykeyvalue5);
		buffer0[begincol + 6][bufferoffset_kvs + i] = GETKV2(mykeyvalue6);
		buffer0[begincol + 7][bufferoffset_kvs + i] = GETKV2(mykeyvalue7);
		buffer1[begincol + 0][bufferoffset_kvs + i] = GETKV2(mykeyvalue0);
		buffer1[begincol + 1][bufferoffset_kvs + i] = GETKV2(mykeyvalue1);
		buffer1[begincol + 2][bufferoffset_kvs + i] = GETKV2(mykeyvalue2);
		buffer1[begincol + 3][bufferoffset_kvs + i] = GETKV2(mykeyvalue3);
		buffer1[begincol + 4][bufferoffset_kvs + i] = GETKV2(mykeyvalue4);
		buffer1[begincol + 5][bufferoffset_kvs + i] = GETKV2(mykeyvalue5);
		buffer1[begincol + 6][bufferoffset_kvs + i] = GETKV2(mykeyvalue6);
		buffer1[begincol + 7][bufferoffset_kvs + i] = GETKV2(mykeyvalue7);
		buffer2[begincol + 0][bufferoffset_kvs + i] = GETKV2(mykeyvalue0);
		buffer2[begincol + 1][bufferoffset_kvs + i] = GETKV2(mykeyvalue1);
		buffer2[begincol + 2][bufferoffset_kvs + i] = GETKV2(mykeyvalue2);
		buffer2[begincol + 3][bufferoffset_kvs + i] = GETKV2(mykeyvalue3);
		buffer2[begincol + 4][bufferoffset_kvs + i] = GETKV2(mykeyvalue4);
		buffer2[begincol + 5][bufferoffset_kvs + i] = GETKV2(mykeyvalue5);
		buffer2[begincol + 6][bufferoffset_kvs + i] = GETKV2(mykeyvalue6);
		buffer2[begincol + 7][bufferoffset_kvs + i] = GETKV2(mykeyvalue7);
		buffer3[begincol + 0][bufferoffset_kvs + i] = GETKV2(mykeyvalue0);
		buffer3[begincol + 1][bufferoffset_kvs + i] = GETKV2(mykeyvalue1);
		buffer3[begincol + 2][bufferoffset_kvs + i] = GETKV2(mykeyvalue2);
		buffer3[begincol + 3][bufferoffset_kvs + i] = GETKV2(mykeyvalue3);
		buffer3[begincol + 4][bufferoffset_kvs + i] = GETKV2(mykeyvalue4);
		buffer3[begincol + 5][bufferoffset_kvs + i] = GETKV2(mykeyvalue5);
		buffer3[begincol + 6][bufferoffset_kvs + i] = GETKV2(mykeyvalue6);
		buffer3[begincol + 7][bufferoffset_kvs + i] = GETKV2(mykeyvalue7);
		buffer4[begincol + 0][bufferoffset_kvs + i] = GETKV2(mykeyvalue0);
		buffer4[begincol + 1][bufferoffset_kvs + i] = GETKV2(mykeyvalue1);
		buffer4[begincol + 2][bufferoffset_kvs + i] = GETKV2(mykeyvalue2);
		buffer4[begincol + 3][bufferoffset_kvs + i] = GETKV2(mykeyvalue3);
		buffer4[begincol + 4][bufferoffset_kvs + i] = GETKV2(mykeyvalue4);
		buffer4[begincol + 5][bufferoffset_kvs + i] = GETKV2(mykeyvalue5);
		buffer4[begincol + 6][bufferoffset_kvs + i] = GETKV2(mykeyvalue6);
		buffer4[begincol + 7][bufferoffset_kvs + i] = GETKV2(mykeyvalue7);
		buffer5[begincol + 0][bufferoffset_kvs + i] = GETKV2(mykeyvalue0);
		buffer5[begincol + 1][bufferoffset_kvs + i] = GETKV2(mykeyvalue1);
		buffer5[begincol + 2][bufferoffset_kvs + i] = GETKV2(mykeyvalue2);
		buffer5[begincol + 3][bufferoffset_kvs + i] = GETKV2(mykeyvalue3);
		buffer5[begincol + 4][bufferoffset_kvs + i] = GETKV2(mykeyvalue4);
		buffer5[begincol + 5][bufferoffset_kvs + i] = GETKV2(mykeyvalue5);
		buffer5[begincol + 6][bufferoffset_kvs + i] = GETKV2(mykeyvalue6);
		buffer5[begincol + 7][bufferoffset_kvs + i] = GETKV2(mykeyvalue7);
		buffer6[begincol + 0][bufferoffset_kvs + i] = GETKV2(mykeyvalue0);
		buffer6[begincol + 1][bufferoffset_kvs + i] = GETKV2(mykeyvalue1);
		buffer6[begincol + 2][bufferoffset_kvs + i] = GETKV2(mykeyvalue2);
		buffer6[begincol + 3][bufferoffset_kvs + i] = GETKV2(mykeyvalue3);
		buffer6[begincol + 4][bufferoffset_kvs + i] = GETKV2(mykeyvalue4);
		buffer6[begincol + 5][bufferoffset_kvs + i] = GETKV2(mykeyvalue5);
		buffer6[begincol + 6][bufferoffset_kvs + i] = GETKV2(mykeyvalue6);
		buffer6[begincol + 7][bufferoffset_kvs + i] = GETKV2(mykeyvalue7);
		
		#ifdef _DEBUGMODE_STATS
		actsutilityobj->globalstats_countkvsread(VECTOR_SIZE);
		#endif
	}
	#ifdef _DEBUGMODE_KERNELPRINTS
	cout<< TIMINGRESULTSCOLOR<<"readvdata:: vertices read: offset: "<<dramoffset_kvs * VECTOR_SIZE<<"-"<<(dramoffset_kvs + size_kvs) * VECTOR_SIZE<<", number of vertex datas read: "<<(size_kvs * VECTOR_SIZE * 2)<<" ("<<size_kvs * VECTOR_SIZE<<" keyvalues written)"<< RESET<<endl;
	#endif
	#ifdef _DEBUGMODE_KERNELPRINTS
	if(dramoffset_kvs >= globalparams.BASEOFFSETKVS_VERTEXPTR_ && dramoffset_kvs < globalparams.BASEOFFSETKVS_VERTEXPTR + VERTEXPTRSSZ_KVS){ cout<< TIMINGRESULTSCOLOR<<"readvdata:: vertices read: offset: "<<(dramoffset_kvs - globalparams.BASEOFFSETKVS_VERTEXPTR) * VECTOR_SIZE<<"-"<<(dramoffset_kvs + size_kvs - globalparams.BASEOFFSETKVS_VERTEXPTR) * VECTOR_SIZE<<", number of vertex datas read: "<<(size_kvs * VECTOR_SIZE * 2)<<" ("<<size_kvs * VECTOR_SIZE<<" keyvalues written)"<< RESET<<endl; }
	if(dramoffset_kvs >= globalparams.BASEOFFSETKVS_VERTICESDATA_ && dramoffset_kvs < globalparams.BASEOFFSETKVS_DESTVERTICESDATA + VERTICESDATASZ_KVS){ cout<< TIMINGRESULTSCOLOR<<"readvdata:: vertices read: offset: "<<(dramoffset_kvs - globalparams.BASEOFFSETKVS_DESTVERTICESDATA) * VECTOR_SIZE<<"-"<<(dramoffset_kvs + size_kvs - globalparams.BASEOFFSETKVS_DESTVERTICESDATA) * VECTOR_SIZE<<", number of vertex datas read: "<<(size_kvs * VECTOR_SIZE * 2)<<" ("<<size_kvs * VECTOR_SIZE<<" keyvalues written)"<< RESET<<endl; }				
	#endif
	return;
}
void // 
	#ifdef SW 
	actsproc::
	#endif 
readandreplicate8vdata(bool_type enable, uint512_dt * vdram, batch_type dramoffset_kvs, keyvalue_vbuffer_t buffer0[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t buffer1[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t buffer2[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t buffer3[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t buffer4[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t buffer5[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t buffer6[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t buffer7[VDATA_PACKINGSIZE][BLOCKRAM_SIZE], unsigned int begincol, batch_type bufferoffset_kvs, buffer_type size_kvs, globalparams_t globalparams){
	if(enable == OFF){ return; }
	analysis_type analysis_loopcount = BLOCKRAM_SIZE;
		
	READVDATA_LOOP: for (buffer_type i=0; i<size_kvs; i++){
	#pragma HLS LOOP_TRIPCOUNT min=0 max=analysis_loopcount avg=analysis_loopcount
	#pragma HLS PIPELINE II=1
		keyvalue_t mykeyvalue0;
		keyvalue_t mykeyvalue1;
		keyvalue_t mykeyvalue2;
		keyvalue_t mykeyvalue3;
		keyvalue_t mykeyvalue4;
		keyvalue_t mykeyvalue5;
		keyvalue_t mykeyvalue6;
		keyvalue_t mykeyvalue7;
		
		#ifdef _WIDEWORD
		mykeyvalue0.key = vdram[dramoffset_kvs + i].range(31, 0); 
		mykeyvalue0.value = vdram[dramoffset_kvs + i].range(63, 32); 
		mykeyvalue1.key = vdram[dramoffset_kvs + i].range(95, 64); 
		mykeyvalue1.value = vdram[dramoffset_kvs + i].range(127, 96); 
		mykeyvalue2.key = vdram[dramoffset_kvs + i].range(159, 128); 
		mykeyvalue2.value = vdram[dramoffset_kvs + i].range(191, 160); 
		mykeyvalue3.key = vdram[dramoffset_kvs + i].range(223, 192); 
		mykeyvalue3.value = vdram[dramoffset_kvs + i].range(255, 224); 
		mykeyvalue4.key = vdram[dramoffset_kvs + i].range(287, 256); 
		mykeyvalue4.value = vdram[dramoffset_kvs + i].range(319, 288); 
		mykeyvalue5.key = vdram[dramoffset_kvs + i].range(351, 320); 
		mykeyvalue5.value = vdram[dramoffset_kvs + i].range(383, 352); 
		mykeyvalue6.key = vdram[dramoffset_kvs + i].range(415, 384); 
		mykeyvalue6.value = vdram[dramoffset_kvs + i].range(447, 416); 
		mykeyvalue7.key = vdram[dramoffset_kvs + i].range(479, 448); 
		mykeyvalue7.value = vdram[dramoffset_kvs + i].range(511, 480); 
		#else 
		mykeyvalue0.key = vdram[dramoffset_kvs + i].data[0].key; 
		mykeyvalue0.value = vdram[dramoffset_kvs + i].data[0].value; 
		mykeyvalue1.key = vdram[dramoffset_kvs + i].data[1].key; 
		mykeyvalue1.value = vdram[dramoffset_kvs + i].data[1].value; 
		mykeyvalue2.key = vdram[dramoffset_kvs + i].data[2].key; 
		mykeyvalue2.value = vdram[dramoffset_kvs + i].data[2].value; 
		mykeyvalue3.key = vdram[dramoffset_kvs + i].data[3].key; 
		mykeyvalue3.value = vdram[dramoffset_kvs + i].data[3].value; 
		mykeyvalue4.key = vdram[dramoffset_kvs + i].data[4].key; 
		mykeyvalue4.value = vdram[dramoffset_kvs + i].data[4].value; 
		mykeyvalue5.key = vdram[dramoffset_kvs + i].data[5].key; 
		mykeyvalue5.value = vdram[dramoffset_kvs + i].data[5].value; 
		mykeyvalue6.key = vdram[dramoffset_kvs + i].data[6].key; 
		mykeyvalue6.value = vdram[dramoffset_kvs + i].data[6].value; 
		mykeyvalue7.key = vdram[dramoffset_kvs + i].data[7].key; 
		mykeyvalue7.value = vdram[dramoffset_kvs + i].data[7].value; 
		#endif 
		
		buffer0[begincol + 0][bufferoffset_kvs + i] = GETKV2(mykeyvalue0);
		buffer0[begincol + 1][bufferoffset_kvs + i] = GETKV2(mykeyvalue1);
		buffer0[begincol + 2][bufferoffset_kvs + i] = GETKV2(mykeyvalue2);
		buffer0[begincol + 3][bufferoffset_kvs + i] = GETKV2(mykeyvalue3);
		buffer0[begincol + 4][bufferoffset_kvs + i] = GETKV2(mykeyvalue4);
		buffer0[begincol + 5][bufferoffset_kvs + i] = GETKV2(mykeyvalue5);
		buffer0[begincol + 6][bufferoffset_kvs + i] = GETKV2(mykeyvalue6);
		buffer0[begincol + 7][bufferoffset_kvs + i] = GETKV2(mykeyvalue7);
		buffer1[begincol + 0][bufferoffset_kvs + i] = GETKV2(mykeyvalue0);
		buffer1[begincol + 1][bufferoffset_kvs + i] = GETKV2(mykeyvalue1);
		buffer1[begincol + 2][bufferoffset_kvs + i] = GETKV2(mykeyvalue2);
		buffer1[begincol + 3][bufferoffset_kvs + i] = GETKV2(mykeyvalue3);
		buffer1[begincol + 4][bufferoffset_kvs + i] = GETKV2(mykeyvalue4);
		buffer1[begincol + 5][bufferoffset_kvs + i] = GETKV2(mykeyvalue5);
		buffer1[begincol + 6][bufferoffset_kvs + i] = GETKV2(mykeyvalue6);
		buffer1[begincol + 7][bufferoffset_kvs + i] = GETKV2(mykeyvalue7);
		buffer2[begincol + 0][bufferoffset_kvs + i] = GETKV2(mykeyvalue0);
		buffer2[begincol + 1][bufferoffset_kvs + i] = GETKV2(mykeyvalue1);
		buffer2[begincol + 2][bufferoffset_kvs + i] = GETKV2(mykeyvalue2);
		buffer2[begincol + 3][bufferoffset_kvs + i] = GETKV2(mykeyvalue3);
		buffer2[begincol + 4][bufferoffset_kvs + i] = GETKV2(mykeyvalue4);
		buffer2[begincol + 5][bufferoffset_kvs + i] = GETKV2(mykeyvalue5);
		buffer2[begincol + 6][bufferoffset_kvs + i] = GETKV2(mykeyvalue6);
		buffer2[begincol + 7][bufferoffset_kvs + i] = GETKV2(mykeyvalue7);
		buffer3[begincol + 0][bufferoffset_kvs + i] = GETKV2(mykeyvalue0);
		buffer3[begincol + 1][bufferoffset_kvs + i] = GETKV2(mykeyvalue1);
		buffer3[begincol + 2][bufferoffset_kvs + i] = GETKV2(mykeyvalue2);
		buffer3[begincol + 3][bufferoffset_kvs + i] = GETKV2(mykeyvalue3);
		buffer3[begincol + 4][bufferoffset_kvs + i] = GETKV2(mykeyvalue4);
		buffer3[begincol + 5][bufferoffset_kvs + i] = GETKV2(mykeyvalue5);
		buffer3[begincol + 6][bufferoffset_kvs + i] = GETKV2(mykeyvalue6);
		buffer3[begincol + 7][bufferoffset_kvs + i] = GETKV2(mykeyvalue7);
		buffer4[begincol + 0][bufferoffset_kvs + i] = GETKV2(mykeyvalue0);
		buffer4[begincol + 1][bufferoffset_kvs + i] = GETKV2(mykeyvalue1);
		buffer4[begincol + 2][bufferoffset_kvs + i] = GETKV2(mykeyvalue2);
		buffer4[begincol + 3][bufferoffset_kvs + i] = GETKV2(mykeyvalue3);
		buffer4[begincol + 4][bufferoffset_kvs + i] = GETKV2(mykeyvalue4);
		buffer4[begincol + 5][bufferoffset_kvs + i] = GETKV2(mykeyvalue5);
		buffer4[begincol + 6][bufferoffset_kvs + i] = GETKV2(mykeyvalue6);
		buffer4[begincol + 7][bufferoffset_kvs + i] = GETKV2(mykeyvalue7);
		buffer5[begincol + 0][bufferoffset_kvs + i] = GETKV2(mykeyvalue0);
		buffer5[begincol + 1][bufferoffset_kvs + i] = GETKV2(mykeyvalue1);
		buffer5[begincol + 2][bufferoffset_kvs + i] = GETKV2(mykeyvalue2);
		buffer5[begincol + 3][bufferoffset_kvs + i] = GETKV2(mykeyvalue3);
		buffer5[begincol + 4][bufferoffset_kvs + i] = GETKV2(mykeyvalue4);
		buffer5[begincol + 5][bufferoffset_kvs + i] = GETKV2(mykeyvalue5);
		buffer5[begincol + 6][bufferoffset_kvs + i] = GETKV2(mykeyvalue6);
		buffer5[begincol + 7][bufferoffset_kvs + i] = GETKV2(mykeyvalue7);
		buffer6[begincol + 0][bufferoffset_kvs + i] = GETKV2(mykeyvalue0);
		buffer6[begincol + 1][bufferoffset_kvs + i] = GETKV2(mykeyvalue1);
		buffer6[begincol + 2][bufferoffset_kvs + i] = GETKV2(mykeyvalue2);
		buffer6[begincol + 3][bufferoffset_kvs + i] = GETKV2(mykeyvalue3);
		buffer6[begincol + 4][bufferoffset_kvs + i] = GETKV2(mykeyvalue4);
		buffer6[begincol + 5][bufferoffset_kvs + i] = GETKV2(mykeyvalue5);
		buffer6[begincol + 6][bufferoffset_kvs + i] = GETKV2(mykeyvalue6);
		buffer6[begincol + 7][bufferoffset_kvs + i] = GETKV2(mykeyvalue7);
		buffer7[begincol + 0][bufferoffset_kvs + i] = GETKV2(mykeyvalue0);
		buffer7[begincol + 1][bufferoffset_kvs + i] = GETKV2(mykeyvalue1);
		buffer7[begincol + 2][bufferoffset_kvs + i] = GETKV2(mykeyvalue2);
		buffer7[begincol + 3][bufferoffset_kvs + i] = GETKV2(mykeyvalue3);
		buffer7[begincol + 4][bufferoffset_kvs + i] = GETKV2(mykeyvalue4);
		buffer7[begincol + 5][bufferoffset_kvs + i] = GETKV2(mykeyvalue5);
		buffer7[begincol + 6][bufferoffset_kvs + i] = GETKV2(mykeyvalue6);
		buffer7[begincol + 7][bufferoffset_kvs + i] = GETKV2(mykeyvalue7);
		
		#ifdef _DEBUGMODE_STATS
		actsutilityobj->globalstats_countkvsread(VECTOR_SIZE);
		#endif
	}
	#ifdef _DEBUGMODE_KERNELPRINTS
	cout<< TIMINGRESULTSCOLOR<<"readvdata:: vertices read: offset: "<<dramoffset_kvs * VECTOR_SIZE<<"-"<<(dramoffset_kvs + size_kvs) * VECTOR_SIZE<<", number of vertex datas read: "<<(size_kvs * VECTOR_SIZE * 2)<<" ("<<size_kvs * VECTOR_SIZE<<" keyvalues written)"<< RESET<<endl;
	#endif
	#ifdef _DEBUGMODE_KERNELPRINTS
	if(dramoffset_kvs >= globalparams.BASEOFFSETKVS_VERTEXPTR_ && dramoffset_kvs < globalparams.BASEOFFSETKVS_VERTEXPTR + VERTEXPTRSSZ_KVS){ cout<< TIMINGRESULTSCOLOR<<"readvdata:: vertices read: offset: "<<(dramoffset_kvs - globalparams.BASEOFFSETKVS_VERTEXPTR) * VECTOR_SIZE<<"-"<<(dramoffset_kvs + size_kvs - globalparams.BASEOFFSETKVS_VERTEXPTR) * VECTOR_SIZE<<", number of vertex datas read: "<<(size_kvs * VECTOR_SIZE * 2)<<" ("<<size_kvs * VECTOR_SIZE<<" keyvalues written)"<< RESET<<endl; }
	if(dramoffset_kvs >= globalparams.BASEOFFSETKVS_VERTICESDATA_ && dramoffset_kvs < globalparams.BASEOFFSETKVS_DESTVERTICESDATA + VERTICESDATASZ_KVS){ cout<< TIMINGRESULTSCOLOR<<"readvdata:: vertices read: offset: "<<(dramoffset_kvs - globalparams.BASEOFFSETKVS_DESTVERTICESDATA) * VECTOR_SIZE<<"-"<<(dramoffset_kvs + size_kvs - globalparams.BASEOFFSETKVS_DESTVERTICESDATA) * VECTOR_SIZE<<", number of vertex datas read: "<<(size_kvs * VECTOR_SIZE * 2)<<" ("<<size_kvs * VECTOR_SIZE<<" keyvalues written)"<< RESET<<endl; }				
	#endif
	return;
}
void // 
	#ifdef SW 
	actsproc::
	#endif 
readandreplicate9vdata(bool_type enable, uint512_dt * vdram, batch_type dramoffset_kvs, keyvalue_vbuffer_t buffer0[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t buffer1[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t buffer2[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t buffer3[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t buffer4[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t buffer5[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t buffer6[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t buffer7[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t buffer8[VDATA_PACKINGSIZE][BLOCKRAM_SIZE], unsigned int begincol, batch_type bufferoffset_kvs, buffer_type size_kvs, globalparams_t globalparams){
	if(enable == OFF){ return; }
	analysis_type analysis_loopcount = BLOCKRAM_SIZE;
		
	READVDATA_LOOP: for (buffer_type i=0; i<size_kvs; i++){
	#pragma HLS LOOP_TRIPCOUNT min=0 max=analysis_loopcount avg=analysis_loopcount
	#pragma HLS PIPELINE II=1
		keyvalue_t mykeyvalue0;
		keyvalue_t mykeyvalue1;
		keyvalue_t mykeyvalue2;
		keyvalue_t mykeyvalue3;
		keyvalue_t mykeyvalue4;
		keyvalue_t mykeyvalue5;
		keyvalue_t mykeyvalue6;
		keyvalue_t mykeyvalue7;
		
		#ifdef _WIDEWORD
		mykeyvalue0.key = vdram[dramoffset_kvs + i].range(31, 0); 
		mykeyvalue0.value = vdram[dramoffset_kvs + i].range(63, 32); 
		mykeyvalue1.key = vdram[dramoffset_kvs + i].range(95, 64); 
		mykeyvalue1.value = vdram[dramoffset_kvs + i].range(127, 96); 
		mykeyvalue2.key = vdram[dramoffset_kvs + i].range(159, 128); 
		mykeyvalue2.value = vdram[dramoffset_kvs + i].range(191, 160); 
		mykeyvalue3.key = vdram[dramoffset_kvs + i].range(223, 192); 
		mykeyvalue3.value = vdram[dramoffset_kvs + i].range(255, 224); 
		mykeyvalue4.key = vdram[dramoffset_kvs + i].range(287, 256); 
		mykeyvalue4.value = vdram[dramoffset_kvs + i].range(319, 288); 
		mykeyvalue5.key = vdram[dramoffset_kvs + i].range(351, 320); 
		mykeyvalue5.value = vdram[dramoffset_kvs + i].range(383, 352); 
		mykeyvalue6.key = vdram[dramoffset_kvs + i].range(415, 384); 
		mykeyvalue6.value = vdram[dramoffset_kvs + i].range(447, 416); 
		mykeyvalue7.key = vdram[dramoffset_kvs + i].range(479, 448); 
		mykeyvalue7.value = vdram[dramoffset_kvs + i].range(511, 480); 
		#else 
		mykeyvalue0.key = vdram[dramoffset_kvs + i].data[0].key; 
		mykeyvalue0.value = vdram[dramoffset_kvs + i].data[0].value; 
		mykeyvalue1.key = vdram[dramoffset_kvs + i].data[1].key; 
		mykeyvalue1.value = vdram[dramoffset_kvs + i].data[1].value; 
		mykeyvalue2.key = vdram[dramoffset_kvs + i].data[2].key; 
		mykeyvalue2.value = vdram[dramoffset_kvs + i].data[2].value; 
		mykeyvalue3.key = vdram[dramoffset_kvs + i].data[3].key; 
		mykeyvalue3.value = vdram[dramoffset_kvs + i].data[3].value; 
		mykeyvalue4.key = vdram[dramoffset_kvs + i].data[4].key; 
		mykeyvalue4.value = vdram[dramoffset_kvs + i].data[4].value; 
		mykeyvalue5.key = vdram[dramoffset_kvs + i].data[5].key; 
		mykeyvalue5.value = vdram[dramoffset_kvs + i].data[5].value; 
		mykeyvalue6.key = vdram[dramoffset_kvs + i].data[6].key; 
		mykeyvalue6.value = vdram[dramoffset_kvs + i].data[6].value; 
		mykeyvalue7.key = vdram[dramoffset_kvs + i].data[7].key; 
		mykeyvalue7.value = vdram[dramoffset_kvs + i].data[7].value; 
		#endif 
		
		buffer0[begincol + 0][bufferoffset_kvs + i] = GETKV2(mykeyvalue0);
		buffer0[begincol + 1][bufferoffset_kvs + i] = GETKV2(mykeyvalue1);
		buffer0[begincol + 2][bufferoffset_kvs + i] = GETKV2(mykeyvalue2);
		buffer0[begincol + 3][bufferoffset_kvs + i] = GETKV2(mykeyvalue3);
		buffer0[begincol + 4][bufferoffset_kvs + i] = GETKV2(mykeyvalue4);
		buffer0[begincol + 5][bufferoffset_kvs + i] = GETKV2(mykeyvalue5);
		buffer0[begincol + 6][bufferoffset_kvs + i] = GETKV2(mykeyvalue6);
		buffer0[begincol + 7][bufferoffset_kvs + i] = GETKV2(mykeyvalue7);
		buffer1[begincol + 0][bufferoffset_kvs + i] = GETKV2(mykeyvalue0);
		buffer1[begincol + 1][bufferoffset_kvs + i] = GETKV2(mykeyvalue1);
		buffer1[begincol + 2][bufferoffset_kvs + i] = GETKV2(mykeyvalue2);
		buffer1[begincol + 3][bufferoffset_kvs + i] = GETKV2(mykeyvalue3);
		buffer1[begincol + 4][bufferoffset_kvs + i] = GETKV2(mykeyvalue4);
		buffer1[begincol + 5][bufferoffset_kvs + i] = GETKV2(mykeyvalue5);
		buffer1[begincol + 6][bufferoffset_kvs + i] = GETKV2(mykeyvalue6);
		buffer1[begincol + 7][bufferoffset_kvs + i] = GETKV2(mykeyvalue7);
		buffer2[begincol + 0][bufferoffset_kvs + i] = GETKV2(mykeyvalue0);
		buffer2[begincol + 1][bufferoffset_kvs + i] = GETKV2(mykeyvalue1);
		buffer2[begincol + 2][bufferoffset_kvs + i] = GETKV2(mykeyvalue2);
		buffer2[begincol + 3][bufferoffset_kvs + i] = GETKV2(mykeyvalue3);
		buffer2[begincol + 4][bufferoffset_kvs + i] = GETKV2(mykeyvalue4);
		buffer2[begincol + 5][bufferoffset_kvs + i] = GETKV2(mykeyvalue5);
		buffer2[begincol + 6][bufferoffset_kvs + i] = GETKV2(mykeyvalue6);
		buffer2[begincol + 7][bufferoffset_kvs + i] = GETKV2(mykeyvalue7);
		buffer3[begincol + 0][bufferoffset_kvs + i] = GETKV2(mykeyvalue0);
		buffer3[begincol + 1][bufferoffset_kvs + i] = GETKV2(mykeyvalue1);
		buffer3[begincol + 2][bufferoffset_kvs + i] = GETKV2(mykeyvalue2);
		buffer3[begincol + 3][bufferoffset_kvs + i] = GETKV2(mykeyvalue3);
		buffer3[begincol + 4][bufferoffset_kvs + i] = GETKV2(mykeyvalue4);
		buffer3[begincol + 5][bufferoffset_kvs + i] = GETKV2(mykeyvalue5);
		buffer3[begincol + 6][bufferoffset_kvs + i] = GETKV2(mykeyvalue6);
		buffer3[begincol + 7][bufferoffset_kvs + i] = GETKV2(mykeyvalue7);
		buffer4[begincol + 0][bufferoffset_kvs + i] = GETKV2(mykeyvalue0);
		buffer4[begincol + 1][bufferoffset_kvs + i] = GETKV2(mykeyvalue1);
		buffer4[begincol + 2][bufferoffset_kvs + i] = GETKV2(mykeyvalue2);
		buffer4[begincol + 3][bufferoffset_kvs + i] = GETKV2(mykeyvalue3);
		buffer4[begincol + 4][bufferoffset_kvs + i] = GETKV2(mykeyvalue4);
		buffer4[begincol + 5][bufferoffset_kvs + i] = GETKV2(mykeyvalue5);
		buffer4[begincol + 6][bufferoffset_kvs + i] = GETKV2(mykeyvalue6);
		buffer4[begincol + 7][bufferoffset_kvs + i] = GETKV2(mykeyvalue7);
		buffer5[begincol + 0][bufferoffset_kvs + i] = GETKV2(mykeyvalue0);
		buffer5[begincol + 1][bufferoffset_kvs + i] = GETKV2(mykeyvalue1);
		buffer5[begincol + 2][bufferoffset_kvs + i] = GETKV2(mykeyvalue2);
		buffer5[begincol + 3][bufferoffset_kvs + i] = GETKV2(mykeyvalue3);
		buffer5[begincol + 4][bufferoffset_kvs + i] = GETKV2(mykeyvalue4);
		buffer5[begincol + 5][bufferoffset_kvs + i] = GETKV2(mykeyvalue5);
		buffer5[begincol + 6][bufferoffset_kvs + i] = GETKV2(mykeyvalue6);
		buffer5[begincol + 7][bufferoffset_kvs + i] = GETKV2(mykeyvalue7);
		buffer6[begincol + 0][bufferoffset_kvs + i] = GETKV2(mykeyvalue0);
		buffer6[begincol + 1][bufferoffset_kvs + i] = GETKV2(mykeyvalue1);
		buffer6[begincol + 2][bufferoffset_kvs + i] = GETKV2(mykeyvalue2);
		buffer6[begincol + 3][bufferoffset_kvs + i] = GETKV2(mykeyvalue3);
		buffer6[begincol + 4][bufferoffset_kvs + i] = GETKV2(mykeyvalue4);
		buffer6[begincol + 5][bufferoffset_kvs + i] = GETKV2(mykeyvalue5);
		buffer6[begincol + 6][bufferoffset_kvs + i] = GETKV2(mykeyvalue6);
		buffer6[begincol + 7][bufferoffset_kvs + i] = GETKV2(mykeyvalue7);
		buffer7[begincol + 0][bufferoffset_kvs + i] = GETKV2(mykeyvalue0);
		buffer7[begincol + 1][bufferoffset_kvs + i] = GETKV2(mykeyvalue1);
		buffer7[begincol + 2][bufferoffset_kvs + i] = GETKV2(mykeyvalue2);
		buffer7[begincol + 3][bufferoffset_kvs + i] = GETKV2(mykeyvalue3);
		buffer7[begincol + 4][bufferoffset_kvs + i] = GETKV2(mykeyvalue4);
		buffer7[begincol + 5][bufferoffset_kvs + i] = GETKV2(mykeyvalue5);
		buffer7[begincol + 6][bufferoffset_kvs + i] = GETKV2(mykeyvalue6);
		buffer7[begincol + 7][bufferoffset_kvs + i] = GETKV2(mykeyvalue7);
		buffer8[begincol + 0][bufferoffset_kvs + i] = GETKV2(mykeyvalue0);
		buffer8[begincol + 1][bufferoffset_kvs + i] = GETKV2(mykeyvalue1);
		buffer8[begincol + 2][bufferoffset_kvs + i] = GETKV2(mykeyvalue2);
		buffer8[begincol + 3][bufferoffset_kvs + i] = GETKV2(mykeyvalue3);
		buffer8[begincol + 4][bufferoffset_kvs + i] = GETKV2(mykeyvalue4);
		buffer8[begincol + 5][bufferoffset_kvs + i] = GETKV2(mykeyvalue5);
		buffer8[begincol + 6][bufferoffset_kvs + i] = GETKV2(mykeyvalue6);
		buffer8[begincol + 7][bufferoffset_kvs + i] = GETKV2(mykeyvalue7);
		
		#ifdef _DEBUGMODE_STATS
		actsutilityobj->globalstats_countkvsread(VECTOR_SIZE);
		#endif
	}
	#ifdef _DEBUGMODE_KERNELPRINTS
	cout<< TIMINGRESULTSCOLOR<<"readvdata:: vertices read: offset: "<<dramoffset_kvs * VECTOR_SIZE<<"-"<<(dramoffset_kvs + size_kvs) * VECTOR_SIZE<<", number of vertex datas read: "<<(size_kvs * VECTOR_SIZE * 2)<<" ("<<size_kvs * VECTOR_SIZE<<" keyvalues written)"<< RESET<<endl;
	#endif
	#ifdef _DEBUGMODE_KERNELPRINTS
	if(dramoffset_kvs >= globalparams.BASEOFFSETKVS_VERTEXPTR_ && dramoffset_kvs < globalparams.BASEOFFSETKVS_VERTEXPTR + VERTEXPTRSSZ_KVS){ cout<< TIMINGRESULTSCOLOR<<"readvdata:: vertices read: offset: "<<(dramoffset_kvs - globalparams.BASEOFFSETKVS_VERTEXPTR) * VECTOR_SIZE<<"-"<<(dramoffset_kvs + size_kvs - globalparams.BASEOFFSETKVS_VERTEXPTR) * VECTOR_SIZE<<", number of vertex datas read: "<<(size_kvs * VECTOR_SIZE * 2)<<" ("<<size_kvs * VECTOR_SIZE<<" keyvalues written)"<< RESET<<endl; }
	if(dramoffset_kvs >= globalparams.BASEOFFSETKVS_VERTICESDATA_ && dramoffset_kvs < globalparams.BASEOFFSETKVS_DESTVERTICESDATA + VERTICESDATASZ_KVS){ cout<< TIMINGRESULTSCOLOR<<"readvdata:: vertices read: offset: "<<(dramoffset_kvs - globalparams.BASEOFFSETKVS_DESTVERTICESDATA) * VECTOR_SIZE<<"-"<<(dramoffset_kvs + size_kvs - globalparams.BASEOFFSETKVS_DESTVERTICESDATA) * VECTOR_SIZE<<", number of vertex datas read: "<<(size_kvs * VECTOR_SIZE * 2)<<" ("<<size_kvs * VECTOR_SIZE<<" keyvalues written)"<< RESET<<endl; }				
	#endif
	return;
}
void // 
	#ifdef SW 
	actsproc::
	#endif 
readandreplicate10vdata(bool_type enable, uint512_dt * vdram, batch_type dramoffset_kvs, keyvalue_vbuffer_t buffer0[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t buffer1[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t buffer2[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t buffer3[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t buffer4[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t buffer5[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t buffer6[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t buffer7[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t buffer8[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t buffer9[VDATA_PACKINGSIZE][BLOCKRAM_SIZE], unsigned int begincol, batch_type bufferoffset_kvs, buffer_type size_kvs, globalparams_t globalparams){
	if(enable == OFF){ return; }
	analysis_type analysis_loopcount = BLOCKRAM_SIZE;
		
	READVDATA_LOOP: for (buffer_type i=0; i<size_kvs; i++){
	#pragma HLS LOOP_TRIPCOUNT min=0 max=analysis_loopcount avg=analysis_loopcount
	#pragma HLS PIPELINE II=1
		keyvalue_t mykeyvalue0;
		keyvalue_t mykeyvalue1;
		keyvalue_t mykeyvalue2;
		keyvalue_t mykeyvalue3;
		keyvalue_t mykeyvalue4;
		keyvalue_t mykeyvalue5;
		keyvalue_t mykeyvalue6;
		keyvalue_t mykeyvalue7;
		
		#ifdef _WIDEWORD
		mykeyvalue0.key = vdram[dramoffset_kvs + i].range(31, 0); 
		mykeyvalue0.value = vdram[dramoffset_kvs + i].range(63, 32); 
		mykeyvalue1.key = vdram[dramoffset_kvs + i].range(95, 64); 
		mykeyvalue1.value = vdram[dramoffset_kvs + i].range(127, 96); 
		mykeyvalue2.key = vdram[dramoffset_kvs + i].range(159, 128); 
		mykeyvalue2.value = vdram[dramoffset_kvs + i].range(191, 160); 
		mykeyvalue3.key = vdram[dramoffset_kvs + i].range(223, 192); 
		mykeyvalue3.value = vdram[dramoffset_kvs + i].range(255, 224); 
		mykeyvalue4.key = vdram[dramoffset_kvs + i].range(287, 256); 
		mykeyvalue4.value = vdram[dramoffset_kvs + i].range(319, 288); 
		mykeyvalue5.key = vdram[dramoffset_kvs + i].range(351, 320); 
		mykeyvalue5.value = vdram[dramoffset_kvs + i].range(383, 352); 
		mykeyvalue6.key = vdram[dramoffset_kvs + i].range(415, 384); 
		mykeyvalue6.value = vdram[dramoffset_kvs + i].range(447, 416); 
		mykeyvalue7.key = vdram[dramoffset_kvs + i].range(479, 448); 
		mykeyvalue7.value = vdram[dramoffset_kvs + i].range(511, 480); 
		#else 
		mykeyvalue0.key = vdram[dramoffset_kvs + i].data[0].key; 
		mykeyvalue0.value = vdram[dramoffset_kvs + i].data[0].value; 
		mykeyvalue1.key = vdram[dramoffset_kvs + i].data[1].key; 
		mykeyvalue1.value = vdram[dramoffset_kvs + i].data[1].value; 
		mykeyvalue2.key = vdram[dramoffset_kvs + i].data[2].key; 
		mykeyvalue2.value = vdram[dramoffset_kvs + i].data[2].value; 
		mykeyvalue3.key = vdram[dramoffset_kvs + i].data[3].key; 
		mykeyvalue3.value = vdram[dramoffset_kvs + i].data[3].value; 
		mykeyvalue4.key = vdram[dramoffset_kvs + i].data[4].key; 
		mykeyvalue4.value = vdram[dramoffset_kvs + i].data[4].value; 
		mykeyvalue5.key = vdram[dramoffset_kvs + i].data[5].key; 
		mykeyvalue5.value = vdram[dramoffset_kvs + i].data[5].value; 
		mykeyvalue6.key = vdram[dramoffset_kvs + i].data[6].key; 
		mykeyvalue6.value = vdram[dramoffset_kvs + i].data[6].value; 
		mykeyvalue7.key = vdram[dramoffset_kvs + i].data[7].key; 
		mykeyvalue7.value = vdram[dramoffset_kvs + i].data[7].value; 
		#endif 
		
		buffer0[begincol + 0][bufferoffset_kvs + i] = GETKV2(mykeyvalue0);
		buffer0[begincol + 1][bufferoffset_kvs + i] = GETKV2(mykeyvalue1);
		buffer0[begincol + 2][bufferoffset_kvs + i] = GETKV2(mykeyvalue2);
		buffer0[begincol + 3][bufferoffset_kvs + i] = GETKV2(mykeyvalue3);
		buffer0[begincol + 4][bufferoffset_kvs + i] = GETKV2(mykeyvalue4);
		buffer0[begincol + 5][bufferoffset_kvs + i] = GETKV2(mykeyvalue5);
		buffer0[begincol + 6][bufferoffset_kvs + i] = GETKV2(mykeyvalue6);
		buffer0[begincol + 7][bufferoffset_kvs + i] = GETKV2(mykeyvalue7);
		buffer1[begincol + 0][bufferoffset_kvs + i] = GETKV2(mykeyvalue0);
		buffer1[begincol + 1][bufferoffset_kvs + i] = GETKV2(mykeyvalue1);
		buffer1[begincol + 2][bufferoffset_kvs + i] = GETKV2(mykeyvalue2);
		buffer1[begincol + 3][bufferoffset_kvs + i] = GETKV2(mykeyvalue3);
		buffer1[begincol + 4][bufferoffset_kvs + i] = GETKV2(mykeyvalue4);
		buffer1[begincol + 5][bufferoffset_kvs + i] = GETKV2(mykeyvalue5);
		buffer1[begincol + 6][bufferoffset_kvs + i] = GETKV2(mykeyvalue6);
		buffer1[begincol + 7][bufferoffset_kvs + i] = GETKV2(mykeyvalue7);
		buffer2[begincol + 0][bufferoffset_kvs + i] = GETKV2(mykeyvalue0);
		buffer2[begincol + 1][bufferoffset_kvs + i] = GETKV2(mykeyvalue1);
		buffer2[begincol + 2][bufferoffset_kvs + i] = GETKV2(mykeyvalue2);
		buffer2[begincol + 3][bufferoffset_kvs + i] = GETKV2(mykeyvalue3);
		buffer2[begincol + 4][bufferoffset_kvs + i] = GETKV2(mykeyvalue4);
		buffer2[begincol + 5][bufferoffset_kvs + i] = GETKV2(mykeyvalue5);
		buffer2[begincol + 6][bufferoffset_kvs + i] = GETKV2(mykeyvalue6);
		buffer2[begincol + 7][bufferoffset_kvs + i] = GETKV2(mykeyvalue7);
		buffer3[begincol + 0][bufferoffset_kvs + i] = GETKV2(mykeyvalue0);
		buffer3[begincol + 1][bufferoffset_kvs + i] = GETKV2(mykeyvalue1);
		buffer3[begincol + 2][bufferoffset_kvs + i] = GETKV2(mykeyvalue2);
		buffer3[begincol + 3][bufferoffset_kvs + i] = GETKV2(mykeyvalue3);
		buffer3[begincol + 4][bufferoffset_kvs + i] = GETKV2(mykeyvalue4);
		buffer3[begincol + 5][bufferoffset_kvs + i] = GETKV2(mykeyvalue5);
		buffer3[begincol + 6][bufferoffset_kvs + i] = GETKV2(mykeyvalue6);
		buffer3[begincol + 7][bufferoffset_kvs + i] = GETKV2(mykeyvalue7);
		buffer4[begincol + 0][bufferoffset_kvs + i] = GETKV2(mykeyvalue0);
		buffer4[begincol + 1][bufferoffset_kvs + i] = GETKV2(mykeyvalue1);
		buffer4[begincol + 2][bufferoffset_kvs + i] = GETKV2(mykeyvalue2);
		buffer4[begincol + 3][bufferoffset_kvs + i] = GETKV2(mykeyvalue3);
		buffer4[begincol + 4][bufferoffset_kvs + i] = GETKV2(mykeyvalue4);
		buffer4[begincol + 5][bufferoffset_kvs + i] = GETKV2(mykeyvalue5);
		buffer4[begincol + 6][bufferoffset_kvs + i] = GETKV2(mykeyvalue6);
		buffer4[begincol + 7][bufferoffset_kvs + i] = GETKV2(mykeyvalue7);
		buffer5[begincol + 0][bufferoffset_kvs + i] = GETKV2(mykeyvalue0);
		buffer5[begincol + 1][bufferoffset_kvs + i] = GETKV2(mykeyvalue1);
		buffer5[begincol + 2][bufferoffset_kvs + i] = GETKV2(mykeyvalue2);
		buffer5[begincol + 3][bufferoffset_kvs + i] = GETKV2(mykeyvalue3);
		buffer5[begincol + 4][bufferoffset_kvs + i] = GETKV2(mykeyvalue4);
		buffer5[begincol + 5][bufferoffset_kvs + i] = GETKV2(mykeyvalue5);
		buffer5[begincol + 6][bufferoffset_kvs + i] = GETKV2(mykeyvalue6);
		buffer5[begincol + 7][bufferoffset_kvs + i] = GETKV2(mykeyvalue7);
		buffer6[begincol + 0][bufferoffset_kvs + i] = GETKV2(mykeyvalue0);
		buffer6[begincol + 1][bufferoffset_kvs + i] = GETKV2(mykeyvalue1);
		buffer6[begincol + 2][bufferoffset_kvs + i] = GETKV2(mykeyvalue2);
		buffer6[begincol + 3][bufferoffset_kvs + i] = GETKV2(mykeyvalue3);
		buffer6[begincol + 4][bufferoffset_kvs + i] = GETKV2(mykeyvalue4);
		buffer6[begincol + 5][bufferoffset_kvs + i] = GETKV2(mykeyvalue5);
		buffer6[begincol + 6][bufferoffset_kvs + i] = GETKV2(mykeyvalue6);
		buffer6[begincol + 7][bufferoffset_kvs + i] = GETKV2(mykeyvalue7);
		buffer7[begincol + 0][bufferoffset_kvs + i] = GETKV2(mykeyvalue0);
		buffer7[begincol + 1][bufferoffset_kvs + i] = GETKV2(mykeyvalue1);
		buffer7[begincol + 2][bufferoffset_kvs + i] = GETKV2(mykeyvalue2);
		buffer7[begincol + 3][bufferoffset_kvs + i] = GETKV2(mykeyvalue3);
		buffer7[begincol + 4][bufferoffset_kvs + i] = GETKV2(mykeyvalue4);
		buffer7[begincol + 5][bufferoffset_kvs + i] = GETKV2(mykeyvalue5);
		buffer7[begincol + 6][bufferoffset_kvs + i] = GETKV2(mykeyvalue6);
		buffer7[begincol + 7][bufferoffset_kvs + i] = GETKV2(mykeyvalue7);
		buffer8[begincol + 0][bufferoffset_kvs + i] = GETKV2(mykeyvalue0);
		buffer8[begincol + 1][bufferoffset_kvs + i] = GETKV2(mykeyvalue1);
		buffer8[begincol + 2][bufferoffset_kvs + i] = GETKV2(mykeyvalue2);
		buffer8[begincol + 3][bufferoffset_kvs + i] = GETKV2(mykeyvalue3);
		buffer8[begincol + 4][bufferoffset_kvs + i] = GETKV2(mykeyvalue4);
		buffer8[begincol + 5][bufferoffset_kvs + i] = GETKV2(mykeyvalue5);
		buffer8[begincol + 6][bufferoffset_kvs + i] = GETKV2(mykeyvalue6);
		buffer8[begincol + 7][bufferoffset_kvs + i] = GETKV2(mykeyvalue7);
		buffer9[begincol + 0][bufferoffset_kvs + i] = GETKV2(mykeyvalue0);
		buffer9[begincol + 1][bufferoffset_kvs + i] = GETKV2(mykeyvalue1);
		buffer9[begincol + 2][bufferoffset_kvs + i] = GETKV2(mykeyvalue2);
		buffer9[begincol + 3][bufferoffset_kvs + i] = GETKV2(mykeyvalue3);
		buffer9[begincol + 4][bufferoffset_kvs + i] = GETKV2(mykeyvalue4);
		buffer9[begincol + 5][bufferoffset_kvs + i] = GETKV2(mykeyvalue5);
		buffer9[begincol + 6][bufferoffset_kvs + i] = GETKV2(mykeyvalue6);
		buffer9[begincol + 7][bufferoffset_kvs + i] = GETKV2(mykeyvalue7);
		
		#ifdef _DEBUGMODE_STATS
		actsutilityobj->globalstats_countkvsread(VECTOR_SIZE);
		#endif
	}
	#ifdef _DEBUGMODE_KERNELPRINTS
	cout<< TIMINGRESULTSCOLOR<<"readvdata:: vertices read: offset: "<<dramoffset_kvs * VECTOR_SIZE<<"-"<<(dramoffset_kvs + size_kvs) * VECTOR_SIZE<<", number of vertex datas read: "<<(size_kvs * VECTOR_SIZE * 2)<<" ("<<size_kvs * VECTOR_SIZE<<" keyvalues written)"<< RESET<<endl;
	#endif
	#ifdef _DEBUGMODE_KERNELPRINTS
	if(dramoffset_kvs >= globalparams.BASEOFFSETKVS_VERTEXPTR_ && dramoffset_kvs < globalparams.BASEOFFSETKVS_VERTEXPTR + VERTEXPTRSSZ_KVS){ cout<< TIMINGRESULTSCOLOR<<"readvdata:: vertices read: offset: "<<(dramoffset_kvs - globalparams.BASEOFFSETKVS_VERTEXPTR) * VECTOR_SIZE<<"-"<<(dramoffset_kvs + size_kvs - globalparams.BASEOFFSETKVS_VERTEXPTR) * VECTOR_SIZE<<", number of vertex datas read: "<<(size_kvs * VECTOR_SIZE * 2)<<" ("<<size_kvs * VECTOR_SIZE<<" keyvalues written)"<< RESET<<endl; }
	if(dramoffset_kvs >= globalparams.BASEOFFSETKVS_VERTICESDATA_ && dramoffset_kvs < globalparams.BASEOFFSETKVS_DESTVERTICESDATA + VERTICESDATASZ_KVS){ cout<< TIMINGRESULTSCOLOR<<"readvdata:: vertices read: offset: "<<(dramoffset_kvs - globalparams.BASEOFFSETKVS_DESTVERTICESDATA) * VECTOR_SIZE<<"-"<<(dramoffset_kvs + size_kvs - globalparams.BASEOFFSETKVS_DESTVERTICESDATA) * VECTOR_SIZE<<", number of vertex datas read: "<<(size_kvs * VECTOR_SIZE * 2)<<" ("<<size_kvs * VECTOR_SIZE<<" keyvalues written)"<< RESET<<endl; }				
	#endif
	return;
}
void // 
	#ifdef SW 
	actsproc::
	#endif 
readandreplicate11vdata(bool_type enable, uint512_dt * vdram, batch_type dramoffset_kvs, keyvalue_vbuffer_t buffer0[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t buffer1[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t buffer2[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t buffer3[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t buffer4[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t buffer5[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t buffer6[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t buffer7[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t buffer8[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t buffer9[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t buffer10[VDATA_PACKINGSIZE][BLOCKRAM_SIZE], unsigned int begincol, batch_type bufferoffset_kvs, buffer_type size_kvs, globalparams_t globalparams){
	if(enable == OFF){ return; }
	analysis_type analysis_loopcount = BLOCKRAM_SIZE;
		
	READVDATA_LOOP: for (buffer_type i=0; i<size_kvs; i++){
	#pragma HLS LOOP_TRIPCOUNT min=0 max=analysis_loopcount avg=analysis_loopcount
	#pragma HLS PIPELINE II=1
		keyvalue_t mykeyvalue0;
		keyvalue_t mykeyvalue1;
		keyvalue_t mykeyvalue2;
		keyvalue_t mykeyvalue3;
		keyvalue_t mykeyvalue4;
		keyvalue_t mykeyvalue5;
		keyvalue_t mykeyvalue6;
		keyvalue_t mykeyvalue7;
		
		#ifdef _WIDEWORD
		mykeyvalue0.key = vdram[dramoffset_kvs + i].range(31, 0); 
		mykeyvalue0.value = vdram[dramoffset_kvs + i].range(63, 32); 
		mykeyvalue1.key = vdram[dramoffset_kvs + i].range(95, 64); 
		mykeyvalue1.value = vdram[dramoffset_kvs + i].range(127, 96); 
		mykeyvalue2.key = vdram[dramoffset_kvs + i].range(159, 128); 
		mykeyvalue2.value = vdram[dramoffset_kvs + i].range(191, 160); 
		mykeyvalue3.key = vdram[dramoffset_kvs + i].range(223, 192); 
		mykeyvalue3.value = vdram[dramoffset_kvs + i].range(255, 224); 
		mykeyvalue4.key = vdram[dramoffset_kvs + i].range(287, 256); 
		mykeyvalue4.value = vdram[dramoffset_kvs + i].range(319, 288); 
		mykeyvalue5.key = vdram[dramoffset_kvs + i].range(351, 320); 
		mykeyvalue5.value = vdram[dramoffset_kvs + i].range(383, 352); 
		mykeyvalue6.key = vdram[dramoffset_kvs + i].range(415, 384); 
		mykeyvalue6.value = vdram[dramoffset_kvs + i].range(447, 416); 
		mykeyvalue7.key = vdram[dramoffset_kvs + i].range(479, 448); 
		mykeyvalue7.value = vdram[dramoffset_kvs + i].range(511, 480); 
		#else 
		mykeyvalue0.key = vdram[dramoffset_kvs + i].data[0].key; 
		mykeyvalue0.value = vdram[dramoffset_kvs + i].data[0].value; 
		mykeyvalue1.key = vdram[dramoffset_kvs + i].data[1].key; 
		mykeyvalue1.value = vdram[dramoffset_kvs + i].data[1].value; 
		mykeyvalue2.key = vdram[dramoffset_kvs + i].data[2].key; 
		mykeyvalue2.value = vdram[dramoffset_kvs + i].data[2].value; 
		mykeyvalue3.key = vdram[dramoffset_kvs + i].data[3].key; 
		mykeyvalue3.value = vdram[dramoffset_kvs + i].data[3].value; 
		mykeyvalue4.key = vdram[dramoffset_kvs + i].data[4].key; 
		mykeyvalue4.value = vdram[dramoffset_kvs + i].data[4].value; 
		mykeyvalue5.key = vdram[dramoffset_kvs + i].data[5].key; 
		mykeyvalue5.value = vdram[dramoffset_kvs + i].data[5].value; 
		mykeyvalue6.key = vdram[dramoffset_kvs + i].data[6].key; 
		mykeyvalue6.value = vdram[dramoffset_kvs + i].data[6].value; 
		mykeyvalue7.key = vdram[dramoffset_kvs + i].data[7].key; 
		mykeyvalue7.value = vdram[dramoffset_kvs + i].data[7].value; 
		#endif 
		
		buffer0[begincol + 0][bufferoffset_kvs + i] = GETKV2(mykeyvalue0);
		buffer0[begincol + 1][bufferoffset_kvs + i] = GETKV2(mykeyvalue1);
		buffer0[begincol + 2][bufferoffset_kvs + i] = GETKV2(mykeyvalue2);
		buffer0[begincol + 3][bufferoffset_kvs + i] = GETKV2(mykeyvalue3);
		buffer0[begincol + 4][bufferoffset_kvs + i] = GETKV2(mykeyvalue4);
		buffer0[begincol + 5][bufferoffset_kvs + i] = GETKV2(mykeyvalue5);
		buffer0[begincol + 6][bufferoffset_kvs + i] = GETKV2(mykeyvalue6);
		buffer0[begincol + 7][bufferoffset_kvs + i] = GETKV2(mykeyvalue7);
		buffer1[begincol + 0][bufferoffset_kvs + i] = GETKV2(mykeyvalue0);
		buffer1[begincol + 1][bufferoffset_kvs + i] = GETKV2(mykeyvalue1);
		buffer1[begincol + 2][bufferoffset_kvs + i] = GETKV2(mykeyvalue2);
		buffer1[begincol + 3][bufferoffset_kvs + i] = GETKV2(mykeyvalue3);
		buffer1[begincol + 4][bufferoffset_kvs + i] = GETKV2(mykeyvalue4);
		buffer1[begincol + 5][bufferoffset_kvs + i] = GETKV2(mykeyvalue5);
		buffer1[begincol + 6][bufferoffset_kvs + i] = GETKV2(mykeyvalue6);
		buffer1[begincol + 7][bufferoffset_kvs + i] = GETKV2(mykeyvalue7);
		buffer2[begincol + 0][bufferoffset_kvs + i] = GETKV2(mykeyvalue0);
		buffer2[begincol + 1][bufferoffset_kvs + i] = GETKV2(mykeyvalue1);
		buffer2[begincol + 2][bufferoffset_kvs + i] = GETKV2(mykeyvalue2);
		buffer2[begincol + 3][bufferoffset_kvs + i] = GETKV2(mykeyvalue3);
		buffer2[begincol + 4][bufferoffset_kvs + i] = GETKV2(mykeyvalue4);
		buffer2[begincol + 5][bufferoffset_kvs + i] = GETKV2(mykeyvalue5);
		buffer2[begincol + 6][bufferoffset_kvs + i] = GETKV2(mykeyvalue6);
		buffer2[begincol + 7][bufferoffset_kvs + i] = GETKV2(mykeyvalue7);
		buffer3[begincol + 0][bufferoffset_kvs + i] = GETKV2(mykeyvalue0);
		buffer3[begincol + 1][bufferoffset_kvs + i] = GETKV2(mykeyvalue1);
		buffer3[begincol + 2][bufferoffset_kvs + i] = GETKV2(mykeyvalue2);
		buffer3[begincol + 3][bufferoffset_kvs + i] = GETKV2(mykeyvalue3);
		buffer3[begincol + 4][bufferoffset_kvs + i] = GETKV2(mykeyvalue4);
		buffer3[begincol + 5][bufferoffset_kvs + i] = GETKV2(mykeyvalue5);
		buffer3[begincol + 6][bufferoffset_kvs + i] = GETKV2(mykeyvalue6);
		buffer3[begincol + 7][bufferoffset_kvs + i] = GETKV2(mykeyvalue7);
		buffer4[begincol + 0][bufferoffset_kvs + i] = GETKV2(mykeyvalue0);
		buffer4[begincol + 1][bufferoffset_kvs + i] = GETKV2(mykeyvalue1);
		buffer4[begincol + 2][bufferoffset_kvs + i] = GETKV2(mykeyvalue2);
		buffer4[begincol + 3][bufferoffset_kvs + i] = GETKV2(mykeyvalue3);
		buffer4[begincol + 4][bufferoffset_kvs + i] = GETKV2(mykeyvalue4);
		buffer4[begincol + 5][bufferoffset_kvs + i] = GETKV2(mykeyvalue5);
		buffer4[begincol + 6][bufferoffset_kvs + i] = GETKV2(mykeyvalue6);
		buffer4[begincol + 7][bufferoffset_kvs + i] = GETKV2(mykeyvalue7);
		buffer5[begincol + 0][bufferoffset_kvs + i] = GETKV2(mykeyvalue0);
		buffer5[begincol + 1][bufferoffset_kvs + i] = GETKV2(mykeyvalue1);
		buffer5[begincol + 2][bufferoffset_kvs + i] = GETKV2(mykeyvalue2);
		buffer5[begincol + 3][bufferoffset_kvs + i] = GETKV2(mykeyvalue3);
		buffer5[begincol + 4][bufferoffset_kvs + i] = GETKV2(mykeyvalue4);
		buffer5[begincol + 5][bufferoffset_kvs + i] = GETKV2(mykeyvalue5);
		buffer5[begincol + 6][bufferoffset_kvs + i] = GETKV2(mykeyvalue6);
		buffer5[begincol + 7][bufferoffset_kvs + i] = GETKV2(mykeyvalue7);
		buffer6[begincol + 0][bufferoffset_kvs + i] = GETKV2(mykeyvalue0);
		buffer6[begincol + 1][bufferoffset_kvs + i] = GETKV2(mykeyvalue1);
		buffer6[begincol + 2][bufferoffset_kvs + i] = GETKV2(mykeyvalue2);
		buffer6[begincol + 3][bufferoffset_kvs + i] = GETKV2(mykeyvalue3);
		buffer6[begincol + 4][bufferoffset_kvs + i] = GETKV2(mykeyvalue4);
		buffer6[begincol + 5][bufferoffset_kvs + i] = GETKV2(mykeyvalue5);
		buffer6[begincol + 6][bufferoffset_kvs + i] = GETKV2(mykeyvalue6);
		buffer6[begincol + 7][bufferoffset_kvs + i] = GETKV2(mykeyvalue7);
		buffer7[begincol + 0][bufferoffset_kvs + i] = GETKV2(mykeyvalue0);
		buffer7[begincol + 1][bufferoffset_kvs + i] = GETKV2(mykeyvalue1);
		buffer7[begincol + 2][bufferoffset_kvs + i] = GETKV2(mykeyvalue2);
		buffer7[begincol + 3][bufferoffset_kvs + i] = GETKV2(mykeyvalue3);
		buffer7[begincol + 4][bufferoffset_kvs + i] = GETKV2(mykeyvalue4);
		buffer7[begincol + 5][bufferoffset_kvs + i] = GETKV2(mykeyvalue5);
		buffer7[begincol + 6][bufferoffset_kvs + i] = GETKV2(mykeyvalue6);
		buffer7[begincol + 7][bufferoffset_kvs + i] = GETKV2(mykeyvalue7);
		buffer8[begincol + 0][bufferoffset_kvs + i] = GETKV2(mykeyvalue0);
		buffer8[begincol + 1][bufferoffset_kvs + i] = GETKV2(mykeyvalue1);
		buffer8[begincol + 2][bufferoffset_kvs + i] = GETKV2(mykeyvalue2);
		buffer8[begincol + 3][bufferoffset_kvs + i] = GETKV2(mykeyvalue3);
		buffer8[begincol + 4][bufferoffset_kvs + i] = GETKV2(mykeyvalue4);
		buffer8[begincol + 5][bufferoffset_kvs + i] = GETKV2(mykeyvalue5);
		buffer8[begincol + 6][bufferoffset_kvs + i] = GETKV2(mykeyvalue6);
		buffer8[begincol + 7][bufferoffset_kvs + i] = GETKV2(mykeyvalue7);
		buffer9[begincol + 0][bufferoffset_kvs + i] = GETKV2(mykeyvalue0);
		buffer9[begincol + 1][bufferoffset_kvs + i] = GETKV2(mykeyvalue1);
		buffer9[begincol + 2][bufferoffset_kvs + i] = GETKV2(mykeyvalue2);
		buffer9[begincol + 3][bufferoffset_kvs + i] = GETKV2(mykeyvalue3);
		buffer9[begincol + 4][bufferoffset_kvs + i] = GETKV2(mykeyvalue4);
		buffer9[begincol + 5][bufferoffset_kvs + i] = GETKV2(mykeyvalue5);
		buffer9[begincol + 6][bufferoffset_kvs + i] = GETKV2(mykeyvalue6);
		buffer9[begincol + 7][bufferoffset_kvs + i] = GETKV2(mykeyvalue7);
		buffer10[begincol + 0][bufferoffset_kvs + i] = GETKV2(mykeyvalue0);
		buffer10[begincol + 1][bufferoffset_kvs + i] = GETKV2(mykeyvalue1);
		buffer10[begincol + 2][bufferoffset_kvs + i] = GETKV2(mykeyvalue2);
		buffer10[begincol + 3][bufferoffset_kvs + i] = GETKV2(mykeyvalue3);
		buffer10[begincol + 4][bufferoffset_kvs + i] = GETKV2(mykeyvalue4);
		buffer10[begincol + 5][bufferoffset_kvs + i] = GETKV2(mykeyvalue5);
		buffer10[begincol + 6][bufferoffset_kvs + i] = GETKV2(mykeyvalue6);
		buffer10[begincol + 7][bufferoffset_kvs + i] = GETKV2(mykeyvalue7);
		
		#ifdef _DEBUGMODE_STATS
		actsutilityobj->globalstats_countkvsread(VECTOR_SIZE);
		#endif
	}
	#ifdef _DEBUGMODE_KERNELPRINTS
	cout<< TIMINGRESULTSCOLOR<<"readvdata:: vertices read: offset: "<<dramoffset_kvs * VECTOR_SIZE<<"-"<<(dramoffset_kvs + size_kvs) * VECTOR_SIZE<<", number of vertex datas read: "<<(size_kvs * VECTOR_SIZE * 2)<<" ("<<size_kvs * VECTOR_SIZE<<" keyvalues written)"<< RESET<<endl;
	#endif
	#ifdef _DEBUGMODE_KERNELPRINTS
	if(dramoffset_kvs >= globalparams.BASEOFFSETKVS_VERTEXPTR_ && dramoffset_kvs < globalparams.BASEOFFSETKVS_VERTEXPTR + VERTEXPTRSSZ_KVS){ cout<< TIMINGRESULTSCOLOR<<"readvdata:: vertices read: offset: "<<(dramoffset_kvs - globalparams.BASEOFFSETKVS_VERTEXPTR) * VECTOR_SIZE<<"-"<<(dramoffset_kvs + size_kvs - globalparams.BASEOFFSETKVS_VERTEXPTR) * VECTOR_SIZE<<", number of vertex datas read: "<<(size_kvs * VECTOR_SIZE * 2)<<" ("<<size_kvs * VECTOR_SIZE<<" keyvalues written)"<< RESET<<endl; }
	if(dramoffset_kvs >= globalparams.BASEOFFSETKVS_VERTICESDATA_ && dramoffset_kvs < globalparams.BASEOFFSETKVS_DESTVERTICESDATA + VERTICESDATASZ_KVS){ cout<< TIMINGRESULTSCOLOR<<"readvdata:: vertices read: offset: "<<(dramoffset_kvs - globalparams.BASEOFFSETKVS_DESTVERTICESDATA) * VECTOR_SIZE<<"-"<<(dramoffset_kvs + size_kvs - globalparams.BASEOFFSETKVS_DESTVERTICESDATA) * VECTOR_SIZE<<", number of vertex datas read: "<<(size_kvs * VECTOR_SIZE * 2)<<" ("<<size_kvs * VECTOR_SIZE<<" keyvalues written)"<< RESET<<endl; }				
	#endif
	return;
}
void // 
	#ifdef SW 
	actsproc::
	#endif 
readandreplicate12vdata(bool_type enable, uint512_dt * vdram, batch_type dramoffset_kvs, keyvalue_vbuffer_t buffer0[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t buffer1[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t buffer2[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t buffer3[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t buffer4[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t buffer5[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t buffer6[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t buffer7[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t buffer8[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t buffer9[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t buffer10[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t buffer11[VDATA_PACKINGSIZE][BLOCKRAM_SIZE], unsigned int begincol, batch_type bufferoffset_kvs, buffer_type size_kvs, globalparams_t globalparams){
	if(enable == OFF){ return; }
	analysis_type analysis_loopcount = BLOCKRAM_SIZE;
		
	READVDATA_LOOP: for (buffer_type i=0; i<size_kvs; i++){
	#pragma HLS LOOP_TRIPCOUNT min=0 max=analysis_loopcount avg=analysis_loopcount
	#pragma HLS PIPELINE II=1
		keyvalue_t mykeyvalue0;
		keyvalue_t mykeyvalue1;
		keyvalue_t mykeyvalue2;
		keyvalue_t mykeyvalue3;
		keyvalue_t mykeyvalue4;
		keyvalue_t mykeyvalue5;
		keyvalue_t mykeyvalue6;
		keyvalue_t mykeyvalue7;
		
		#ifdef _WIDEWORD
		mykeyvalue0.key = vdram[dramoffset_kvs + i].range(31, 0); 
		mykeyvalue0.value = vdram[dramoffset_kvs + i].range(63, 32); 
		mykeyvalue1.key = vdram[dramoffset_kvs + i].range(95, 64); 
		mykeyvalue1.value = vdram[dramoffset_kvs + i].range(127, 96); 
		mykeyvalue2.key = vdram[dramoffset_kvs + i].range(159, 128); 
		mykeyvalue2.value = vdram[dramoffset_kvs + i].range(191, 160); 
		mykeyvalue3.key = vdram[dramoffset_kvs + i].range(223, 192); 
		mykeyvalue3.value = vdram[dramoffset_kvs + i].range(255, 224); 
		mykeyvalue4.key = vdram[dramoffset_kvs + i].range(287, 256); 
		mykeyvalue4.value = vdram[dramoffset_kvs + i].range(319, 288); 
		mykeyvalue5.key = vdram[dramoffset_kvs + i].range(351, 320); 
		mykeyvalue5.value = vdram[dramoffset_kvs + i].range(383, 352); 
		mykeyvalue6.key = vdram[dramoffset_kvs + i].range(415, 384); 
		mykeyvalue6.value = vdram[dramoffset_kvs + i].range(447, 416); 
		mykeyvalue7.key = vdram[dramoffset_kvs + i].range(479, 448); 
		mykeyvalue7.value = vdram[dramoffset_kvs + i].range(511, 480); 
		#else 
		mykeyvalue0.key = vdram[dramoffset_kvs + i].data[0].key; 
		mykeyvalue0.value = vdram[dramoffset_kvs + i].data[0].value; 
		mykeyvalue1.key = vdram[dramoffset_kvs + i].data[1].key; 
		mykeyvalue1.value = vdram[dramoffset_kvs + i].data[1].value; 
		mykeyvalue2.key = vdram[dramoffset_kvs + i].data[2].key; 
		mykeyvalue2.value = vdram[dramoffset_kvs + i].data[2].value; 
		mykeyvalue3.key = vdram[dramoffset_kvs + i].data[3].key; 
		mykeyvalue3.value = vdram[dramoffset_kvs + i].data[3].value; 
		mykeyvalue4.key = vdram[dramoffset_kvs + i].data[4].key; 
		mykeyvalue4.value = vdram[dramoffset_kvs + i].data[4].value; 
		mykeyvalue5.key = vdram[dramoffset_kvs + i].data[5].key; 
		mykeyvalue5.value = vdram[dramoffset_kvs + i].data[5].value; 
		mykeyvalue6.key = vdram[dramoffset_kvs + i].data[6].key; 
		mykeyvalue6.value = vdram[dramoffset_kvs + i].data[6].value; 
		mykeyvalue7.key = vdram[dramoffset_kvs + i].data[7].key; 
		mykeyvalue7.value = vdram[dramoffset_kvs + i].data[7].value; 
		#endif 
		
		buffer0[begincol + 0][bufferoffset_kvs + i] = GETKV2(mykeyvalue0);
		buffer0[begincol + 1][bufferoffset_kvs + i] = GETKV2(mykeyvalue1);
		buffer0[begincol + 2][bufferoffset_kvs + i] = GETKV2(mykeyvalue2);
		buffer0[begincol + 3][bufferoffset_kvs + i] = GETKV2(mykeyvalue3);
		buffer0[begincol + 4][bufferoffset_kvs + i] = GETKV2(mykeyvalue4);
		buffer0[begincol + 5][bufferoffset_kvs + i] = GETKV2(mykeyvalue5);
		buffer0[begincol + 6][bufferoffset_kvs + i] = GETKV2(mykeyvalue6);
		buffer0[begincol + 7][bufferoffset_kvs + i] = GETKV2(mykeyvalue7);
		buffer1[begincol + 0][bufferoffset_kvs + i] = GETKV2(mykeyvalue0);
		buffer1[begincol + 1][bufferoffset_kvs + i] = GETKV2(mykeyvalue1);
		buffer1[begincol + 2][bufferoffset_kvs + i] = GETKV2(mykeyvalue2);
		buffer1[begincol + 3][bufferoffset_kvs + i] = GETKV2(mykeyvalue3);
		buffer1[begincol + 4][bufferoffset_kvs + i] = GETKV2(mykeyvalue4);
		buffer1[begincol + 5][bufferoffset_kvs + i] = GETKV2(mykeyvalue5);
		buffer1[begincol + 6][bufferoffset_kvs + i] = GETKV2(mykeyvalue6);
		buffer1[begincol + 7][bufferoffset_kvs + i] = GETKV2(mykeyvalue7);
		buffer2[begincol + 0][bufferoffset_kvs + i] = GETKV2(mykeyvalue0);
		buffer2[begincol + 1][bufferoffset_kvs + i] = GETKV2(mykeyvalue1);
		buffer2[begincol + 2][bufferoffset_kvs + i] = GETKV2(mykeyvalue2);
		buffer2[begincol + 3][bufferoffset_kvs + i] = GETKV2(mykeyvalue3);
		buffer2[begincol + 4][bufferoffset_kvs + i] = GETKV2(mykeyvalue4);
		buffer2[begincol + 5][bufferoffset_kvs + i] = GETKV2(mykeyvalue5);
		buffer2[begincol + 6][bufferoffset_kvs + i] = GETKV2(mykeyvalue6);
		buffer2[begincol + 7][bufferoffset_kvs + i] = GETKV2(mykeyvalue7);
		buffer3[begincol + 0][bufferoffset_kvs + i] = GETKV2(mykeyvalue0);
		buffer3[begincol + 1][bufferoffset_kvs + i] = GETKV2(mykeyvalue1);
		buffer3[begincol + 2][bufferoffset_kvs + i] = GETKV2(mykeyvalue2);
		buffer3[begincol + 3][bufferoffset_kvs + i] = GETKV2(mykeyvalue3);
		buffer3[begincol + 4][bufferoffset_kvs + i] = GETKV2(mykeyvalue4);
		buffer3[begincol + 5][bufferoffset_kvs + i] = GETKV2(mykeyvalue5);
		buffer3[begincol + 6][bufferoffset_kvs + i] = GETKV2(mykeyvalue6);
		buffer3[begincol + 7][bufferoffset_kvs + i] = GETKV2(mykeyvalue7);
		buffer4[begincol + 0][bufferoffset_kvs + i] = GETKV2(mykeyvalue0);
		buffer4[begincol + 1][bufferoffset_kvs + i] = GETKV2(mykeyvalue1);
		buffer4[begincol + 2][bufferoffset_kvs + i] = GETKV2(mykeyvalue2);
		buffer4[begincol + 3][bufferoffset_kvs + i] = GETKV2(mykeyvalue3);
		buffer4[begincol + 4][bufferoffset_kvs + i] = GETKV2(mykeyvalue4);
		buffer4[begincol + 5][bufferoffset_kvs + i] = GETKV2(mykeyvalue5);
		buffer4[begincol + 6][bufferoffset_kvs + i] = GETKV2(mykeyvalue6);
		buffer4[begincol + 7][bufferoffset_kvs + i] = GETKV2(mykeyvalue7);
		buffer5[begincol + 0][bufferoffset_kvs + i] = GETKV2(mykeyvalue0);
		buffer5[begincol + 1][bufferoffset_kvs + i] = GETKV2(mykeyvalue1);
		buffer5[begincol + 2][bufferoffset_kvs + i] = GETKV2(mykeyvalue2);
		buffer5[begincol + 3][bufferoffset_kvs + i] = GETKV2(mykeyvalue3);
		buffer5[begincol + 4][bufferoffset_kvs + i] = GETKV2(mykeyvalue4);
		buffer5[begincol + 5][bufferoffset_kvs + i] = GETKV2(mykeyvalue5);
		buffer5[begincol + 6][bufferoffset_kvs + i] = GETKV2(mykeyvalue6);
		buffer5[begincol + 7][bufferoffset_kvs + i] = GETKV2(mykeyvalue7);
		buffer6[begincol + 0][bufferoffset_kvs + i] = GETKV2(mykeyvalue0);
		buffer6[begincol + 1][bufferoffset_kvs + i] = GETKV2(mykeyvalue1);
		buffer6[begincol + 2][bufferoffset_kvs + i] = GETKV2(mykeyvalue2);
		buffer6[begincol + 3][bufferoffset_kvs + i] = GETKV2(mykeyvalue3);
		buffer6[begincol + 4][bufferoffset_kvs + i] = GETKV2(mykeyvalue4);
		buffer6[begincol + 5][bufferoffset_kvs + i] = GETKV2(mykeyvalue5);
		buffer6[begincol + 6][bufferoffset_kvs + i] = GETKV2(mykeyvalue6);
		buffer6[begincol + 7][bufferoffset_kvs + i] = GETKV2(mykeyvalue7);
		buffer7[begincol + 0][bufferoffset_kvs + i] = GETKV2(mykeyvalue0);
		buffer7[begincol + 1][bufferoffset_kvs + i] = GETKV2(mykeyvalue1);
		buffer7[begincol + 2][bufferoffset_kvs + i] = GETKV2(mykeyvalue2);
		buffer7[begincol + 3][bufferoffset_kvs + i] = GETKV2(mykeyvalue3);
		buffer7[begincol + 4][bufferoffset_kvs + i] = GETKV2(mykeyvalue4);
		buffer7[begincol + 5][bufferoffset_kvs + i] = GETKV2(mykeyvalue5);
		buffer7[begincol + 6][bufferoffset_kvs + i] = GETKV2(mykeyvalue6);
		buffer7[begincol + 7][bufferoffset_kvs + i] = GETKV2(mykeyvalue7);
		buffer8[begincol + 0][bufferoffset_kvs + i] = GETKV2(mykeyvalue0);
		buffer8[begincol + 1][bufferoffset_kvs + i] = GETKV2(mykeyvalue1);
		buffer8[begincol + 2][bufferoffset_kvs + i] = GETKV2(mykeyvalue2);
		buffer8[begincol + 3][bufferoffset_kvs + i] = GETKV2(mykeyvalue3);
		buffer8[begincol + 4][bufferoffset_kvs + i] = GETKV2(mykeyvalue4);
		buffer8[begincol + 5][bufferoffset_kvs + i] = GETKV2(mykeyvalue5);
		buffer8[begincol + 6][bufferoffset_kvs + i] = GETKV2(mykeyvalue6);
		buffer8[begincol + 7][bufferoffset_kvs + i] = GETKV2(mykeyvalue7);
		buffer9[begincol + 0][bufferoffset_kvs + i] = GETKV2(mykeyvalue0);
		buffer9[begincol + 1][bufferoffset_kvs + i] = GETKV2(mykeyvalue1);
		buffer9[begincol + 2][bufferoffset_kvs + i] = GETKV2(mykeyvalue2);
		buffer9[begincol + 3][bufferoffset_kvs + i] = GETKV2(mykeyvalue3);
		buffer9[begincol + 4][bufferoffset_kvs + i] = GETKV2(mykeyvalue4);
		buffer9[begincol + 5][bufferoffset_kvs + i] = GETKV2(mykeyvalue5);
		buffer9[begincol + 6][bufferoffset_kvs + i] = GETKV2(mykeyvalue6);
		buffer9[begincol + 7][bufferoffset_kvs + i] = GETKV2(mykeyvalue7);
		buffer10[begincol + 0][bufferoffset_kvs + i] = GETKV2(mykeyvalue0);
		buffer10[begincol + 1][bufferoffset_kvs + i] = GETKV2(mykeyvalue1);
		buffer10[begincol + 2][bufferoffset_kvs + i] = GETKV2(mykeyvalue2);
		buffer10[begincol + 3][bufferoffset_kvs + i] = GETKV2(mykeyvalue3);
		buffer10[begincol + 4][bufferoffset_kvs + i] = GETKV2(mykeyvalue4);
		buffer10[begincol + 5][bufferoffset_kvs + i] = GETKV2(mykeyvalue5);
		buffer10[begincol + 6][bufferoffset_kvs + i] = GETKV2(mykeyvalue6);
		buffer10[begincol + 7][bufferoffset_kvs + i] = GETKV2(mykeyvalue7);
		buffer11[begincol + 0][bufferoffset_kvs + i] = GETKV2(mykeyvalue0);
		buffer11[begincol + 1][bufferoffset_kvs + i] = GETKV2(mykeyvalue1);
		buffer11[begincol + 2][bufferoffset_kvs + i] = GETKV2(mykeyvalue2);
		buffer11[begincol + 3][bufferoffset_kvs + i] = GETKV2(mykeyvalue3);
		buffer11[begincol + 4][bufferoffset_kvs + i] = GETKV2(mykeyvalue4);
		buffer11[begincol + 5][bufferoffset_kvs + i] = GETKV2(mykeyvalue5);
		buffer11[begincol + 6][bufferoffset_kvs + i] = GETKV2(mykeyvalue6);
		buffer11[begincol + 7][bufferoffset_kvs + i] = GETKV2(mykeyvalue7);
		
		#ifdef _DEBUGMODE_STATS
		actsutilityobj->globalstats_countkvsread(VECTOR_SIZE);
		#endif
	}
	#ifdef _DEBUGMODE_KERNELPRINTS
	cout<< TIMINGRESULTSCOLOR<<"readvdata:: vertices read: offset: "<<dramoffset_kvs * VECTOR_SIZE<<"-"<<(dramoffset_kvs + size_kvs) * VECTOR_SIZE<<", number of vertex datas read: "<<(size_kvs * VECTOR_SIZE * 2)<<" ("<<size_kvs * VECTOR_SIZE<<" keyvalues written)"<< RESET<<endl;
	#endif
	#ifdef _DEBUGMODE_KERNELPRINTS
	if(dramoffset_kvs >= globalparams.BASEOFFSETKVS_VERTEXPTR_ && dramoffset_kvs < globalparams.BASEOFFSETKVS_VERTEXPTR + VERTEXPTRSSZ_KVS){ cout<< TIMINGRESULTSCOLOR<<"readvdata:: vertices read: offset: "<<(dramoffset_kvs - globalparams.BASEOFFSETKVS_VERTEXPTR) * VECTOR_SIZE<<"-"<<(dramoffset_kvs + size_kvs - globalparams.BASEOFFSETKVS_VERTEXPTR) * VECTOR_SIZE<<", number of vertex datas read: "<<(size_kvs * VECTOR_SIZE * 2)<<" ("<<size_kvs * VECTOR_SIZE<<" keyvalues written)"<< RESET<<endl; }
	if(dramoffset_kvs >= globalparams.BASEOFFSETKVS_VERTICESDATA_ && dramoffset_kvs < globalparams.BASEOFFSETKVS_DESTVERTICESDATA + VERTICESDATASZ_KVS){ cout<< TIMINGRESULTSCOLOR<<"readvdata:: vertices read: offset: "<<(dramoffset_kvs - globalparams.BASEOFFSETKVS_DESTVERTICESDATA) * VECTOR_SIZE<<"-"<<(dramoffset_kvs + size_kvs - globalparams.BASEOFFSETKVS_DESTVERTICESDATA) * VECTOR_SIZE<<", number of vertex datas read: "<<(size_kvs * VECTOR_SIZE * 2)<<" ("<<size_kvs * VECTOR_SIZE<<" keyvalues written)"<< RESET<<endl; }				
	#endif
	return;
}

void
	#if defined(SW)
	actsproc::
	#endif
merge1andsavevdata(bool_type enable, uint512_dt * vdram, keyvalue_vbuffer_t vbuffer0[VDATA_PACKINGSIZE][BLOCKRAM_SIZE], unsigned int begincol, batch_type bufferoffset_kvs, unsigned int dramoffset_kvs){
	if(enable == OFF){ return; }
	keyvalue_t dummykv;
	dummykv.key = 0xFFFFFFFF; dummykv.value = 0xFFFFFFFF;
	
	keyy_t keyA0 = dummykv.key;
	value_t valA0 = dummykv.key;
	keyy_t keyB0 = dummykv.key;
	value_t valB0 = dummykv.key;
	keyy_t keyC0 = dummykv.key;
	value_t valC0 = dummykv.key;
	keyy_t keyD0 = dummykv.key;
	value_t valD0 = dummykv.key;
	keyy_t keyE0 = dummykv.key;
	value_t valE0 = dummykv.key;
	keyy_t keyF0 = dummykv.key;
	value_t valF0 = dummykv.key;
	keyy_t keyG0 = dummykv.key;
	value_t valG0 = dummykv.key;
	keyy_t keyH0 = dummykv.key;
	value_t valH0 = dummykv.key;
	keyy_t keyI0 = dummykv.key;
	value_t valI0 = dummykv.key;
	keyy_t keyJ0 = dummykv.key;
	value_t valJ0 = dummykv.key;
	keyy_t keyK0 = dummykv.key;
	value_t valK0 = dummykv.key;
	keyy_t keyL0 = dummykv.key;
	value_t valL0 = dummykv.key;
	keyy_t keyM0 = dummykv.key;
	value_t valM0 = dummykv.key;
	keyy_t keyA1 = dummykv.key;
	value_t valA1 = dummykv.key;
	keyy_t keyB1 = dummykv.key;
	value_t valB1 = dummykv.key;
	keyy_t keyC1 = dummykv.key;
	value_t valC1 = dummykv.key;
	keyy_t keyD1 = dummykv.key;
	value_t valD1 = dummykv.key;
	keyy_t keyE1 = dummykv.key;
	value_t valE1 = dummykv.key;
	keyy_t keyF1 = dummykv.key;
	value_t valF1 = dummykv.key;
	keyy_t keyG1 = dummykv.key;
	value_t valG1 = dummykv.key;
	keyy_t keyH1 = dummykv.key;
	value_t valH1 = dummykv.key;
	keyy_t keyI1 = dummykv.key;
	value_t valI1 = dummykv.key;
	keyy_t keyJ1 = dummykv.key;
	value_t valJ1 = dummykv.key;
	keyy_t keyK1 = dummykv.key;
	value_t valK1 = dummykv.key;
	keyy_t keyL1 = dummykv.key;
	value_t valL1 = dummykv.key;
	keyy_t keyM1 = dummykv.key;
	value_t valM1 = dummykv.key;
	keyy_t keyA2 = dummykv.key;
	value_t valA2 = dummykv.key;
	keyy_t keyB2 = dummykv.key;
	value_t valB2 = dummykv.key;
	keyy_t keyC2 = dummykv.key;
	value_t valC2 = dummykv.key;
	keyy_t keyD2 = dummykv.key;
	value_t valD2 = dummykv.key;
	keyy_t keyE2 = dummykv.key;
	value_t valE2 = dummykv.key;
	keyy_t keyF2 = dummykv.key;
	value_t valF2 = dummykv.key;
	keyy_t keyG2 = dummykv.key;
	value_t valG2 = dummykv.key;
	keyy_t keyH2 = dummykv.key;
	value_t valH2 = dummykv.key;
	keyy_t keyI2 = dummykv.key;
	value_t valI2 = dummykv.key;
	keyy_t keyJ2 = dummykv.key;
	value_t valJ2 = dummykv.key;
	keyy_t keyK2 = dummykv.key;
	value_t valK2 = dummykv.key;
	keyy_t keyL2 = dummykv.key;
	value_t valL2 = dummykv.key;
	keyy_t keyM2 = dummykv.key;
	value_t valM2 = dummykv.key;
	keyy_t keyA3 = dummykv.key;
	value_t valA3 = dummykv.key;
	keyy_t keyB3 = dummykv.key;
	value_t valB3 = dummykv.key;
	keyy_t keyC3 = dummykv.key;
	value_t valC3 = dummykv.key;
	keyy_t keyD3 = dummykv.key;
	value_t valD3 = dummykv.key;
	keyy_t keyE3 = dummykv.key;
	value_t valE3 = dummykv.key;
	keyy_t keyF3 = dummykv.key;
	value_t valF3 = dummykv.key;
	keyy_t keyG3 = dummykv.key;
	value_t valG3 = dummykv.key;
	keyy_t keyH3 = dummykv.key;
	value_t valH3 = dummykv.key;
	keyy_t keyI3 = dummykv.key;
	value_t valI3 = dummykv.key;
	keyy_t keyJ3 = dummykv.key;
	value_t valJ3 = dummykv.key;
	keyy_t keyK3 = dummykv.key;
	value_t valK3 = dummykv.key;
	keyy_t keyL3 = dummykv.key;
	value_t valL3 = dummykv.key;
	keyy_t keyM3 = dummykv.key;
	value_t valM3 = dummykv.key;
	keyy_t keyA4 = dummykv.key;
	value_t valA4 = dummykv.key;
	keyy_t keyB4 = dummykv.key;
	value_t valB4 = dummykv.key;
	keyy_t keyC4 = dummykv.key;
	value_t valC4 = dummykv.key;
	keyy_t keyD4 = dummykv.key;
	value_t valD4 = dummykv.key;
	keyy_t keyE4 = dummykv.key;
	value_t valE4 = dummykv.key;
	keyy_t keyF4 = dummykv.key;
	value_t valF4 = dummykv.key;
	keyy_t keyG4 = dummykv.key;
	value_t valG4 = dummykv.key;
	keyy_t keyH4 = dummykv.key;
	value_t valH4 = dummykv.key;
	keyy_t keyI4 = dummykv.key;
	value_t valI4 = dummykv.key;
	keyy_t keyJ4 = dummykv.key;
	value_t valJ4 = dummykv.key;
	keyy_t keyK4 = dummykv.key;
	value_t valK4 = dummykv.key;
	keyy_t keyL4 = dummykv.key;
	value_t valL4 = dummykv.key;
	keyy_t keyM4 = dummykv.key;
	value_t valM4 = dummykv.key;
	keyy_t keyA5 = dummykv.key;
	value_t valA5 = dummykv.key;
	keyy_t keyB5 = dummykv.key;
	value_t valB5 = dummykv.key;
	keyy_t keyC5 = dummykv.key;
	value_t valC5 = dummykv.key;
	keyy_t keyD5 = dummykv.key;
	value_t valD5 = dummykv.key;
	keyy_t keyE5 = dummykv.key;
	value_t valE5 = dummykv.key;
	keyy_t keyF5 = dummykv.key;
	value_t valF5 = dummykv.key;
	keyy_t keyG5 = dummykv.key;
	value_t valG5 = dummykv.key;
	keyy_t keyH5 = dummykv.key;
	value_t valH5 = dummykv.key;
	keyy_t keyI5 = dummykv.key;
	value_t valI5 = dummykv.key;
	keyy_t keyJ5 = dummykv.key;
	value_t valJ5 = dummykv.key;
	keyy_t keyK5 = dummykv.key;
	value_t valK5 = dummykv.key;
	keyy_t keyL5 = dummykv.key;
	value_t valL5 = dummykv.key;
	keyy_t keyM5 = dummykv.key;
	value_t valM5 = dummykv.key;
	keyy_t keyA6 = dummykv.key;
	value_t valA6 = dummykv.key;
	keyy_t keyB6 = dummykv.key;
	value_t valB6 = dummykv.key;
	keyy_t keyC6 = dummykv.key;
	value_t valC6 = dummykv.key;
	keyy_t keyD6 = dummykv.key;
	value_t valD6 = dummykv.key;
	keyy_t keyE6 = dummykv.key;
	value_t valE6 = dummykv.key;
	keyy_t keyF6 = dummykv.key;
	value_t valF6 = dummykv.key;
	keyy_t keyG6 = dummykv.key;
	value_t valG6 = dummykv.key;
	keyy_t keyH6 = dummykv.key;
	value_t valH6 = dummykv.key;
	keyy_t keyI6 = dummykv.key;
	value_t valI6 = dummykv.key;
	keyy_t keyJ6 = dummykv.key;
	value_t valJ6 = dummykv.key;
	keyy_t keyK6 = dummykv.key;
	value_t valK6 = dummykv.key;
	keyy_t keyL6 = dummykv.key;
	value_t valL6 = dummykv.key;
	keyy_t keyM6 = dummykv.key;
	value_t valM6 = dummykv.key;
	keyy_t keyA7 = dummykv.key;
	value_t valA7 = dummykv.key;
	keyy_t keyB7 = dummykv.key;
	value_t valB7 = dummykv.key;
	keyy_t keyC7 = dummykv.key;
	value_t valC7 = dummykv.key;
	keyy_t keyD7 = dummykv.key;
	value_t valD7 = dummykv.key;
	keyy_t keyE7 = dummykv.key;
	value_t valE7 = dummykv.key;
	keyy_t keyF7 = dummykv.key;
	value_t valF7 = dummykv.key;
	keyy_t keyG7 = dummykv.key;
	value_t valG7 = dummykv.key;
	keyy_t keyH7 = dummykv.key;
	value_t valH7 = dummykv.key;
	keyy_t keyI7 = dummykv.key;
	value_t valI7 = dummykv.key;
	keyy_t keyJ7 = dummykv.key;
	value_t valJ7 = dummykv.key;
	keyy_t keyK7 = dummykv.key;
	value_t valK7 = dummykv.key;
	keyy_t keyL7 = dummykv.key;
	value_t valL7 = dummykv.key;
	keyy_t keyM7 = dummykv.key;
	value_t valM7 = dummykv.key;
	
	MERGE1_LOOP1: for (buffer_type j=0; j<BLOCKRAM_SIZE; j++){
	#pragma HLS PIPELINE II=1
		keyvalue_t mykeyvalue00 = GETKV2(vbuffer0[begincol + 0][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue01 = GETKV2(vbuffer0[begincol + 1][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue02 = GETKV2(vbuffer0[begincol + 2][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue03 = GETKV2(vbuffer0[begincol + 3][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue04 = GETKV2(vbuffer0[begincol + 4][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue05 = GETKV2(vbuffer0[begincol + 5][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue06 = GETKV2(vbuffer0[begincol + 6][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue07 = GETKV2(vbuffer0[begincol + 7][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue10 = dummykv;
		keyvalue_t mykeyvalue11 = dummykv;
		keyvalue_t mykeyvalue12 = dummykv;
		keyvalue_t mykeyvalue13 = dummykv;
		keyvalue_t mykeyvalue14 = dummykv;
		keyvalue_t mykeyvalue15 = dummykv;
		keyvalue_t mykeyvalue16 = dummykv;
		keyvalue_t mykeyvalue17 = dummykv;
		keyvalue_t mykeyvalue20 = dummykv;
		keyvalue_t mykeyvalue21 = dummykv;
		keyvalue_t mykeyvalue22 = dummykv;
		keyvalue_t mykeyvalue23 = dummykv;
		keyvalue_t mykeyvalue24 = dummykv;
		keyvalue_t mykeyvalue25 = dummykv;
		keyvalue_t mykeyvalue26 = dummykv;
		keyvalue_t mykeyvalue27 = dummykv;
		keyvalue_t mykeyvalue30 = dummykv;
		keyvalue_t mykeyvalue31 = dummykv;
		keyvalue_t mykeyvalue32 = dummykv;
		keyvalue_t mykeyvalue33 = dummykv;
		keyvalue_t mykeyvalue34 = dummykv;
		keyvalue_t mykeyvalue35 = dummykv;
		keyvalue_t mykeyvalue36 = dummykv;
		keyvalue_t mykeyvalue37 = dummykv;
		keyvalue_t mykeyvalue40 = dummykv;
		keyvalue_t mykeyvalue41 = dummykv;
		keyvalue_t mykeyvalue42 = dummykv;
		keyvalue_t mykeyvalue43 = dummykv;
		keyvalue_t mykeyvalue44 = dummykv;
		keyvalue_t mykeyvalue45 = dummykv;
		keyvalue_t mykeyvalue46 = dummykv;
		keyvalue_t mykeyvalue47 = dummykv;
		keyvalue_t mykeyvalue50 = dummykv;
		keyvalue_t mykeyvalue51 = dummykv;
		keyvalue_t mykeyvalue52 = dummykv;
		keyvalue_t mykeyvalue53 = dummykv;
		keyvalue_t mykeyvalue54 = dummykv;
		keyvalue_t mykeyvalue55 = dummykv;
		keyvalue_t mykeyvalue56 = dummykv;
		keyvalue_t mykeyvalue57 = dummykv;
		keyvalue_t mykeyvalue60 = dummykv;
		keyvalue_t mykeyvalue61 = dummykv;
		keyvalue_t mykeyvalue62 = dummykv;
		keyvalue_t mykeyvalue63 = dummykv;
		keyvalue_t mykeyvalue64 = dummykv;
		keyvalue_t mykeyvalue65 = dummykv;
		keyvalue_t mykeyvalue66 = dummykv;
		keyvalue_t mykeyvalue67 = dummykv;
		keyvalue_t mykeyvalue70 = dummykv;
		keyvalue_t mykeyvalue71 = dummykv;
		keyvalue_t mykeyvalue72 = dummykv;
		keyvalue_t mykeyvalue73 = dummykv;
		keyvalue_t mykeyvalue74 = dummykv;
		keyvalue_t mykeyvalue75 = dummykv;
		keyvalue_t mykeyvalue76 = dummykv;
		keyvalue_t mykeyvalue77 = dummykv;
		keyvalue_t mykeyvalue80 = dummykv;
		keyvalue_t mykeyvalue81 = dummykv;
		keyvalue_t mykeyvalue82 = dummykv;
		keyvalue_t mykeyvalue83 = dummykv;
		keyvalue_t mykeyvalue84 = dummykv;
		keyvalue_t mykeyvalue85 = dummykv;
		keyvalue_t mykeyvalue86 = dummykv;
		keyvalue_t mykeyvalue87 = dummykv;
		keyvalue_t mykeyvalue90 = dummykv;
		keyvalue_t mykeyvalue91 = dummykv;
		keyvalue_t mykeyvalue92 = dummykv;
		keyvalue_t mykeyvalue93 = dummykv;
		keyvalue_t mykeyvalue94 = dummykv;
		keyvalue_t mykeyvalue95 = dummykv;
		keyvalue_t mykeyvalue96 = dummykv;
		keyvalue_t mykeyvalue97 = dummykv;
		keyvalue_t mykeyvalue100 = dummykv;
		keyvalue_t mykeyvalue101 = dummykv;
		keyvalue_t mykeyvalue102 = dummykv;
		keyvalue_t mykeyvalue103 = dummykv;
		keyvalue_t mykeyvalue104 = dummykv;
		keyvalue_t mykeyvalue105 = dummykv;
		keyvalue_t mykeyvalue106 = dummykv;
		keyvalue_t mykeyvalue107 = dummykv;
		keyvalue_t mykeyvalue110 = dummykv;
		keyvalue_t mykeyvalue111 = dummykv;
		keyvalue_t mykeyvalue112 = dummykv;
		keyvalue_t mykeyvalue113 = dummykv;
		keyvalue_t mykeyvalue114 = dummykv;
		keyvalue_t mykeyvalue115 = dummykv;
		keyvalue_t mykeyvalue116 = dummykv;
		keyvalue_t mykeyvalue117 = dummykv;
		keyvalue_t mykeyvalue120 = dummykv;
		keyvalue_t mykeyvalue121 = dummykv;
		keyvalue_t mykeyvalue122 = dummykv;
		keyvalue_t mykeyvalue123 = dummykv;
		keyvalue_t mykeyvalue124 = dummykv;
		keyvalue_t mykeyvalue125 = dummykv;
		keyvalue_t mykeyvalue126 = dummykv;
		keyvalue_t mykeyvalue127 = dummykv;
		keyvalue_t mykeyvalue130 = dummykv;
		keyvalue_t mykeyvalue131 = dummykv;
		keyvalue_t mykeyvalue132 = dummykv;
		keyvalue_t mykeyvalue133 = dummykv;
		keyvalue_t mykeyvalue134 = dummykv;
		keyvalue_t mykeyvalue135 = dummykv;
		keyvalue_t mykeyvalue136 = dummykv;
		keyvalue_t mykeyvalue137 = dummykv;
		keyvalue_t mykeyvalue140 = dummykv;
		keyvalue_t mykeyvalue141 = dummykv;
		keyvalue_t mykeyvalue142 = dummykv;
		keyvalue_t mykeyvalue143 = dummykv;
		keyvalue_t mykeyvalue144 = dummykv;
		keyvalue_t mykeyvalue145 = dummykv;
		keyvalue_t mykeyvalue146 = dummykv;
		keyvalue_t mykeyvalue147 = dummykv;
		
		//((n)/2)
		keyA0 = mergefunc(mykeyvalue00.key, mykeyvalue10.key, NAp);
		keyA1 = mergefunc(mykeyvalue01.key, mykeyvalue11.key, NAp);
		keyA2 = mergefunc(mykeyvalue02.key, mykeyvalue12.key, NAp);
		keyA3 = mergefunc(mykeyvalue03.key, mykeyvalue13.key, NAp);
		keyA4 = mergefunc(mykeyvalue04.key, mykeyvalue14.key, NAp);
		keyA5 = mergefunc(mykeyvalue05.key, mykeyvalue15.key, NAp);
		keyA6 = mergefunc(mykeyvalue06.key, mykeyvalue16.key, NAp);
		keyA7 = mergefunc(mykeyvalue07.key, mykeyvalue17.key, NAp);
		keyy_t keyPA0 = mergefunc(keyA0, keyB0, NAp);
		keyy_t keyPB0 = mergefunc(keyC0, keyD0, NAp);
		keyy_t keyPC0 = mergefunc(keyE0, keyF0, NAp);
		keyy_t keyRA0 = mergefunc(keyPA0, keyPB0, NAp);
		keyy_t keyRB0 = mergefunc(keyPC0, keyF0, NAp);
		keyy_t keyRZ0 = mergefunc(keyRA0, keyRB0, NAp);
		keyy_t keyPA1 = mergefunc(keyA1, keyB1, NAp);
		keyy_t keyPB1 = mergefunc(keyC1, keyD1, NAp);
		keyy_t keyPC1 = mergefunc(keyE1, keyF1, NAp);
		keyy_t keyRA1 = mergefunc(keyPA1, keyPB1, NAp);
		keyy_t keyRB1 = mergefunc(keyPC1, keyF1, NAp);
		keyy_t keyRZ1 = mergefunc(keyRA1, keyRB1, NAp);
		keyy_t keyPA2 = mergefunc(keyA2, keyB2, NAp);
		keyy_t keyPB2 = mergefunc(keyC2, keyD2, NAp);
		keyy_t keyPC2 = mergefunc(keyE2, keyF2, NAp);
		keyy_t keyRA2 = mergefunc(keyPA2, keyPB2, NAp);
		keyy_t keyRB2 = mergefunc(keyPC2, keyF2, NAp);
		keyy_t keyRZ2 = mergefunc(keyRA2, keyRB2, NAp);
		keyy_t keyPA3 = mergefunc(keyA3, keyB3, NAp);
		keyy_t keyPB3 = mergefunc(keyC3, keyD3, NAp);
		keyy_t keyPC3 = mergefunc(keyE3, keyF3, NAp);
		keyy_t keyRA3 = mergefunc(keyPA3, keyPB3, NAp);
		keyy_t keyRB3 = mergefunc(keyPC3, keyF3, NAp);
		keyy_t keyRZ3 = mergefunc(keyRA3, keyRB3, NAp);
		keyy_t keyPA4 = mergefunc(keyA4, keyB4, NAp);
		keyy_t keyPB4 = mergefunc(keyC4, keyD4, NAp);
		keyy_t keyPC4 = mergefunc(keyE4, keyF4, NAp);
		keyy_t keyRA4 = mergefunc(keyPA4, keyPB4, NAp);
		keyy_t keyRB4 = mergefunc(keyPC4, keyF4, NAp);
		keyy_t keyRZ4 = mergefunc(keyRA4, keyRB4, NAp);
		keyy_t keyPA5 = mergefunc(keyA5, keyB5, NAp);
		keyy_t keyPB5 = mergefunc(keyC5, keyD5, NAp);
		keyy_t keyPC5 = mergefunc(keyE5, keyF5, NAp);
		keyy_t keyRA5 = mergefunc(keyPA5, keyPB5, NAp);
		keyy_t keyRB5 = mergefunc(keyPC5, keyF5, NAp);
		keyy_t keyRZ5 = mergefunc(keyRA5, keyRB5, NAp);
		keyy_t keyPA6 = mergefunc(keyA6, keyB6, NAp);
		keyy_t keyPB6 = mergefunc(keyC6, keyD6, NAp);
		keyy_t keyPC6 = mergefunc(keyE6, keyF6, NAp);
		keyy_t keyRA6 = mergefunc(keyPA6, keyPB6, NAp);
		keyy_t keyRB6 = mergefunc(keyPC6, keyF6, NAp);
		keyy_t keyRZ6 = mergefunc(keyRA6, keyRB6, NAp);
		keyy_t keyPA7 = mergefunc(keyA7, keyB7, NAp);
		keyy_t keyPB7 = mergefunc(keyC7, keyD7, NAp);
		keyy_t keyPC7 = mergefunc(keyE7, keyF7, NAp);
		keyy_t keyRA7 = mergefunc(keyPA7, keyPB7, NAp);
		keyy_t keyRB7 = mergefunc(keyPC7, keyF7, NAp);
		keyy_t keyRZ7 = mergefunc(keyRA7, keyRB7, NAp);
		
		//((n)/2)
		valA0 = mergefunc(mykeyvalue00.value, mykeyvalue10.value, NAp);
		valA1 = mergefunc(mykeyvalue01.value, mykeyvalue11.value, NAp);
		valA2 = mergefunc(mykeyvalue02.value, mykeyvalue12.value, NAp);
		valA3 = mergefunc(mykeyvalue03.value, mykeyvalue13.value, NAp);
		valA4 = mergefunc(mykeyvalue04.value, mykeyvalue14.value, NAp);
		valA5 = mergefunc(mykeyvalue05.value, mykeyvalue15.value, NAp);
		valA6 = mergefunc(mykeyvalue06.value, mykeyvalue16.value, NAp);
		valA7 = mergefunc(mykeyvalue07.value, mykeyvalue17.value, NAp);
		value_t valPA0 = mergefunc(valA0, valB0, NAp);
		value_t valPB0 = mergefunc(valC0, valD0, NAp);
		value_t valPC0 = mergefunc(valE0, valF0, NAp);
		value_t valRA0 = mergefunc(valPA0, valPB0, NAp);
		value_t valRB0 = mergefunc(valPC0, valF0, NAp);
		value_t valRZ0 = mergefunc(valRA0, valRB0, NAp);
		value_t valPA1 = mergefunc(valA1, valB1, NAp);
		value_t valPB1 = mergefunc(valC1, valD1, NAp);
		value_t valPC1 = mergefunc(valE1, valF1, NAp);
		value_t valRA1 = mergefunc(valPA1, valPB1, NAp);
		value_t valRB1 = mergefunc(valPC1, valF1, NAp);
		value_t valRZ1 = mergefunc(valRA1, valRB1, NAp);
		value_t valPA2 = mergefunc(valA2, valB2, NAp);
		value_t valPB2 = mergefunc(valC2, valD2, NAp);
		value_t valPC2 = mergefunc(valE2, valF2, NAp);
		value_t valRA2 = mergefunc(valPA2, valPB2, NAp);
		value_t valRB2 = mergefunc(valPC2, valF2, NAp);
		value_t valRZ2 = mergefunc(valRA2, valRB2, NAp);
		value_t valPA3 = mergefunc(valA3, valB3, NAp);
		value_t valPB3 = mergefunc(valC3, valD3, NAp);
		value_t valPC3 = mergefunc(valE3, valF3, NAp);
		value_t valRA3 = mergefunc(valPA3, valPB3, NAp);
		value_t valRB3 = mergefunc(valPC3, valF3, NAp);
		value_t valRZ3 = mergefunc(valRA3, valRB3, NAp);
		value_t valPA4 = mergefunc(valA4, valB4, NAp);
		value_t valPB4 = mergefunc(valC4, valD4, NAp);
		value_t valPC4 = mergefunc(valE4, valF4, NAp);
		value_t valRA4 = mergefunc(valPA4, valPB4, NAp);
		value_t valRB4 = mergefunc(valPC4, valF4, NAp);
		value_t valRZ4 = mergefunc(valRA4, valRB4, NAp);
		value_t valPA5 = mergefunc(valA5, valB5, NAp);
		value_t valPB5 = mergefunc(valC5, valD5, NAp);
		value_t valPC5 = mergefunc(valE5, valF5, NAp);
		value_t valRA5 = mergefunc(valPA5, valPB5, NAp);
		value_t valRB5 = mergefunc(valPC5, valF5, NAp);
		value_t valRZ5 = mergefunc(valRA5, valRB5, NAp);
		value_t valPA6 = mergefunc(valA6, valB6, NAp);
		value_t valPB6 = mergefunc(valC6, valD6, NAp);
		value_t valPC6 = mergefunc(valE6, valF6, NAp);
		value_t valRA6 = mergefunc(valPA6, valPB6, NAp);
		value_t valRB6 = mergefunc(valPC6, valF6, NAp);
		value_t valRZ6 = mergefunc(valRA6, valRB6, NAp);
		value_t valPA7 = mergefunc(valA7, valB7, NAp);
		value_t valPB7 = mergefunc(valC7, valD7, NAp);
		value_t valPC7 = mergefunc(valE7, valF7, NAp);
		value_t valRA7 = mergefunc(valPA7, valPB7, NAp);
		value_t valRB7 = mergefunc(valPC7, valF7, NAp);
		value_t valRZ7 = mergefunc(valRA7, valRB7, NAp);
		
		#ifdef _WIDEWORD
		vdram[dramoffset_kvs + j].range(31, 0) = keyRZ0;
		vdram[dramoffset_kvs + j].range(63, 32) = valRZ0;
		vdram[dramoffset_kvs + j].range(95, 64) = keyRZ1;
		vdram[dramoffset_kvs + j].range(127, 96) = valRZ1;
		vdram[dramoffset_kvs + j].range(159, 128) = keyRZ2;
		vdram[dramoffset_kvs + j].range(191, 160) = valRZ2;
		vdram[dramoffset_kvs + j].range(223, 192) = keyRZ3;
		vdram[dramoffset_kvs + j].range(255, 224) = valRZ3;
		vdram[dramoffset_kvs + j].range(287, 256) = keyRZ4;
		vdram[dramoffset_kvs + j].range(319, 288) = valRZ4;
		vdram[dramoffset_kvs + j].range(351, 320) = keyRZ5;
		vdram[dramoffset_kvs + j].range(383, 352) = valRZ5;
		vdram[dramoffset_kvs + j].range(415, 384) = keyRZ6;
		vdram[dramoffset_kvs + j].range(447, 416) = valRZ6;
		vdram[dramoffset_kvs + j].range(479, 448) = keyRZ7;
		vdram[dramoffset_kvs + j].range(511, 480) = valRZ7;
		#else
		vdram[dramoffset_kvs + j].data[0].key = keyRZ0;
		vdram[dramoffset_kvs + j].data[0].value = valRZ0;
		vdram[dramoffset_kvs + j].data[1].key = keyRZ1;
		vdram[dramoffset_kvs + j].data[1].value = valRZ1;
		vdram[dramoffset_kvs + j].data[2].key = keyRZ2;
		vdram[dramoffset_kvs + j].data[2].value = valRZ2;
		vdram[dramoffset_kvs + j].data[3].key = keyRZ3;
		vdram[dramoffset_kvs + j].data[3].value = valRZ3;
		vdram[dramoffset_kvs + j].data[4].key = keyRZ4;
		vdram[dramoffset_kvs + j].data[4].value = valRZ4;
		vdram[dramoffset_kvs + j].data[5].key = keyRZ5;
		vdram[dramoffset_kvs + j].data[5].value = valRZ5;
		vdram[dramoffset_kvs + j].data[6].key = keyRZ6;
		vdram[dramoffset_kvs + j].data[6].value = valRZ6;
		vdram[dramoffset_kvs + j].data[7].key = keyRZ7;
		vdram[dramoffset_kvs + j].data[7].value = valRZ7;
		#endif
	}
	return;
}
void
	#if defined(SW)
	actsproc::
	#endif
merge2andsavevdata(bool_type enable, uint512_dt * vdram, keyvalue_vbuffer_t vbuffer0[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t vbuffer1[VDATA_PACKINGSIZE][BLOCKRAM_SIZE], unsigned int begincol, batch_type bufferoffset_kvs, unsigned int dramoffset_kvs){
	if(enable == OFF){ return; }
	keyvalue_t dummykv;
	dummykv.key = 0xFFFFFFFF; dummykv.value = 0xFFFFFFFF;
	
	keyy_t keyA0 = dummykv.key;
	value_t valA0 = dummykv.key;
	keyy_t keyB0 = dummykv.key;
	value_t valB0 = dummykv.key;
	keyy_t keyC0 = dummykv.key;
	value_t valC0 = dummykv.key;
	keyy_t keyD0 = dummykv.key;
	value_t valD0 = dummykv.key;
	keyy_t keyE0 = dummykv.key;
	value_t valE0 = dummykv.key;
	keyy_t keyF0 = dummykv.key;
	value_t valF0 = dummykv.key;
	keyy_t keyG0 = dummykv.key;
	value_t valG0 = dummykv.key;
	keyy_t keyH0 = dummykv.key;
	value_t valH0 = dummykv.key;
	keyy_t keyI0 = dummykv.key;
	value_t valI0 = dummykv.key;
	keyy_t keyJ0 = dummykv.key;
	value_t valJ0 = dummykv.key;
	keyy_t keyK0 = dummykv.key;
	value_t valK0 = dummykv.key;
	keyy_t keyL0 = dummykv.key;
	value_t valL0 = dummykv.key;
	keyy_t keyM0 = dummykv.key;
	value_t valM0 = dummykv.key;
	keyy_t keyA1 = dummykv.key;
	value_t valA1 = dummykv.key;
	keyy_t keyB1 = dummykv.key;
	value_t valB1 = dummykv.key;
	keyy_t keyC1 = dummykv.key;
	value_t valC1 = dummykv.key;
	keyy_t keyD1 = dummykv.key;
	value_t valD1 = dummykv.key;
	keyy_t keyE1 = dummykv.key;
	value_t valE1 = dummykv.key;
	keyy_t keyF1 = dummykv.key;
	value_t valF1 = dummykv.key;
	keyy_t keyG1 = dummykv.key;
	value_t valG1 = dummykv.key;
	keyy_t keyH1 = dummykv.key;
	value_t valH1 = dummykv.key;
	keyy_t keyI1 = dummykv.key;
	value_t valI1 = dummykv.key;
	keyy_t keyJ1 = dummykv.key;
	value_t valJ1 = dummykv.key;
	keyy_t keyK1 = dummykv.key;
	value_t valK1 = dummykv.key;
	keyy_t keyL1 = dummykv.key;
	value_t valL1 = dummykv.key;
	keyy_t keyM1 = dummykv.key;
	value_t valM1 = dummykv.key;
	keyy_t keyA2 = dummykv.key;
	value_t valA2 = dummykv.key;
	keyy_t keyB2 = dummykv.key;
	value_t valB2 = dummykv.key;
	keyy_t keyC2 = dummykv.key;
	value_t valC2 = dummykv.key;
	keyy_t keyD2 = dummykv.key;
	value_t valD2 = dummykv.key;
	keyy_t keyE2 = dummykv.key;
	value_t valE2 = dummykv.key;
	keyy_t keyF2 = dummykv.key;
	value_t valF2 = dummykv.key;
	keyy_t keyG2 = dummykv.key;
	value_t valG2 = dummykv.key;
	keyy_t keyH2 = dummykv.key;
	value_t valH2 = dummykv.key;
	keyy_t keyI2 = dummykv.key;
	value_t valI2 = dummykv.key;
	keyy_t keyJ2 = dummykv.key;
	value_t valJ2 = dummykv.key;
	keyy_t keyK2 = dummykv.key;
	value_t valK2 = dummykv.key;
	keyy_t keyL2 = dummykv.key;
	value_t valL2 = dummykv.key;
	keyy_t keyM2 = dummykv.key;
	value_t valM2 = dummykv.key;
	keyy_t keyA3 = dummykv.key;
	value_t valA3 = dummykv.key;
	keyy_t keyB3 = dummykv.key;
	value_t valB3 = dummykv.key;
	keyy_t keyC3 = dummykv.key;
	value_t valC3 = dummykv.key;
	keyy_t keyD3 = dummykv.key;
	value_t valD3 = dummykv.key;
	keyy_t keyE3 = dummykv.key;
	value_t valE3 = dummykv.key;
	keyy_t keyF3 = dummykv.key;
	value_t valF3 = dummykv.key;
	keyy_t keyG3 = dummykv.key;
	value_t valG3 = dummykv.key;
	keyy_t keyH3 = dummykv.key;
	value_t valH3 = dummykv.key;
	keyy_t keyI3 = dummykv.key;
	value_t valI3 = dummykv.key;
	keyy_t keyJ3 = dummykv.key;
	value_t valJ3 = dummykv.key;
	keyy_t keyK3 = dummykv.key;
	value_t valK3 = dummykv.key;
	keyy_t keyL3 = dummykv.key;
	value_t valL3 = dummykv.key;
	keyy_t keyM3 = dummykv.key;
	value_t valM3 = dummykv.key;
	keyy_t keyA4 = dummykv.key;
	value_t valA4 = dummykv.key;
	keyy_t keyB4 = dummykv.key;
	value_t valB4 = dummykv.key;
	keyy_t keyC4 = dummykv.key;
	value_t valC4 = dummykv.key;
	keyy_t keyD4 = dummykv.key;
	value_t valD4 = dummykv.key;
	keyy_t keyE4 = dummykv.key;
	value_t valE4 = dummykv.key;
	keyy_t keyF4 = dummykv.key;
	value_t valF4 = dummykv.key;
	keyy_t keyG4 = dummykv.key;
	value_t valG4 = dummykv.key;
	keyy_t keyH4 = dummykv.key;
	value_t valH4 = dummykv.key;
	keyy_t keyI4 = dummykv.key;
	value_t valI4 = dummykv.key;
	keyy_t keyJ4 = dummykv.key;
	value_t valJ4 = dummykv.key;
	keyy_t keyK4 = dummykv.key;
	value_t valK4 = dummykv.key;
	keyy_t keyL4 = dummykv.key;
	value_t valL4 = dummykv.key;
	keyy_t keyM4 = dummykv.key;
	value_t valM4 = dummykv.key;
	keyy_t keyA5 = dummykv.key;
	value_t valA5 = dummykv.key;
	keyy_t keyB5 = dummykv.key;
	value_t valB5 = dummykv.key;
	keyy_t keyC5 = dummykv.key;
	value_t valC5 = dummykv.key;
	keyy_t keyD5 = dummykv.key;
	value_t valD5 = dummykv.key;
	keyy_t keyE5 = dummykv.key;
	value_t valE5 = dummykv.key;
	keyy_t keyF5 = dummykv.key;
	value_t valF5 = dummykv.key;
	keyy_t keyG5 = dummykv.key;
	value_t valG5 = dummykv.key;
	keyy_t keyH5 = dummykv.key;
	value_t valH5 = dummykv.key;
	keyy_t keyI5 = dummykv.key;
	value_t valI5 = dummykv.key;
	keyy_t keyJ5 = dummykv.key;
	value_t valJ5 = dummykv.key;
	keyy_t keyK5 = dummykv.key;
	value_t valK5 = dummykv.key;
	keyy_t keyL5 = dummykv.key;
	value_t valL5 = dummykv.key;
	keyy_t keyM5 = dummykv.key;
	value_t valM5 = dummykv.key;
	keyy_t keyA6 = dummykv.key;
	value_t valA6 = dummykv.key;
	keyy_t keyB6 = dummykv.key;
	value_t valB6 = dummykv.key;
	keyy_t keyC6 = dummykv.key;
	value_t valC6 = dummykv.key;
	keyy_t keyD6 = dummykv.key;
	value_t valD6 = dummykv.key;
	keyy_t keyE6 = dummykv.key;
	value_t valE6 = dummykv.key;
	keyy_t keyF6 = dummykv.key;
	value_t valF6 = dummykv.key;
	keyy_t keyG6 = dummykv.key;
	value_t valG6 = dummykv.key;
	keyy_t keyH6 = dummykv.key;
	value_t valH6 = dummykv.key;
	keyy_t keyI6 = dummykv.key;
	value_t valI6 = dummykv.key;
	keyy_t keyJ6 = dummykv.key;
	value_t valJ6 = dummykv.key;
	keyy_t keyK6 = dummykv.key;
	value_t valK6 = dummykv.key;
	keyy_t keyL6 = dummykv.key;
	value_t valL6 = dummykv.key;
	keyy_t keyM6 = dummykv.key;
	value_t valM6 = dummykv.key;
	keyy_t keyA7 = dummykv.key;
	value_t valA7 = dummykv.key;
	keyy_t keyB7 = dummykv.key;
	value_t valB7 = dummykv.key;
	keyy_t keyC7 = dummykv.key;
	value_t valC7 = dummykv.key;
	keyy_t keyD7 = dummykv.key;
	value_t valD7 = dummykv.key;
	keyy_t keyE7 = dummykv.key;
	value_t valE7 = dummykv.key;
	keyy_t keyF7 = dummykv.key;
	value_t valF7 = dummykv.key;
	keyy_t keyG7 = dummykv.key;
	value_t valG7 = dummykv.key;
	keyy_t keyH7 = dummykv.key;
	value_t valH7 = dummykv.key;
	keyy_t keyI7 = dummykv.key;
	value_t valI7 = dummykv.key;
	keyy_t keyJ7 = dummykv.key;
	value_t valJ7 = dummykv.key;
	keyy_t keyK7 = dummykv.key;
	value_t valK7 = dummykv.key;
	keyy_t keyL7 = dummykv.key;
	value_t valL7 = dummykv.key;
	keyy_t keyM7 = dummykv.key;
	value_t valM7 = dummykv.key;
	
	MERGE2_LOOP1: for (buffer_type j=0; j<BLOCKRAM_SIZE; j++){
	#pragma HLS PIPELINE II=1
		keyvalue_t mykeyvalue00 = GETKV2(vbuffer0[begincol + 0][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue01 = GETKV2(vbuffer0[begincol + 1][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue02 = GETKV2(vbuffer0[begincol + 2][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue03 = GETKV2(vbuffer0[begincol + 3][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue04 = GETKV2(vbuffer0[begincol + 4][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue05 = GETKV2(vbuffer0[begincol + 5][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue06 = GETKV2(vbuffer0[begincol + 6][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue07 = GETKV2(vbuffer0[begincol + 7][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue10 = GETKV2(vbuffer1[begincol + 0][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue11 = GETKV2(vbuffer1[begincol + 1][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue12 = GETKV2(vbuffer1[begincol + 2][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue13 = GETKV2(vbuffer1[begincol + 3][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue14 = GETKV2(vbuffer1[begincol + 4][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue15 = GETKV2(vbuffer1[begincol + 5][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue16 = GETKV2(vbuffer1[begincol + 6][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue17 = GETKV2(vbuffer1[begincol + 7][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue20 = dummykv;
		keyvalue_t mykeyvalue21 = dummykv;
		keyvalue_t mykeyvalue22 = dummykv;
		keyvalue_t mykeyvalue23 = dummykv;
		keyvalue_t mykeyvalue24 = dummykv;
		keyvalue_t mykeyvalue25 = dummykv;
		keyvalue_t mykeyvalue26 = dummykv;
		keyvalue_t mykeyvalue27 = dummykv;
		keyvalue_t mykeyvalue30 = dummykv;
		keyvalue_t mykeyvalue31 = dummykv;
		keyvalue_t mykeyvalue32 = dummykv;
		keyvalue_t mykeyvalue33 = dummykv;
		keyvalue_t mykeyvalue34 = dummykv;
		keyvalue_t mykeyvalue35 = dummykv;
		keyvalue_t mykeyvalue36 = dummykv;
		keyvalue_t mykeyvalue37 = dummykv;
		keyvalue_t mykeyvalue40 = dummykv;
		keyvalue_t mykeyvalue41 = dummykv;
		keyvalue_t mykeyvalue42 = dummykv;
		keyvalue_t mykeyvalue43 = dummykv;
		keyvalue_t mykeyvalue44 = dummykv;
		keyvalue_t mykeyvalue45 = dummykv;
		keyvalue_t mykeyvalue46 = dummykv;
		keyvalue_t mykeyvalue47 = dummykv;
		keyvalue_t mykeyvalue50 = dummykv;
		keyvalue_t mykeyvalue51 = dummykv;
		keyvalue_t mykeyvalue52 = dummykv;
		keyvalue_t mykeyvalue53 = dummykv;
		keyvalue_t mykeyvalue54 = dummykv;
		keyvalue_t mykeyvalue55 = dummykv;
		keyvalue_t mykeyvalue56 = dummykv;
		keyvalue_t mykeyvalue57 = dummykv;
		keyvalue_t mykeyvalue60 = dummykv;
		keyvalue_t mykeyvalue61 = dummykv;
		keyvalue_t mykeyvalue62 = dummykv;
		keyvalue_t mykeyvalue63 = dummykv;
		keyvalue_t mykeyvalue64 = dummykv;
		keyvalue_t mykeyvalue65 = dummykv;
		keyvalue_t mykeyvalue66 = dummykv;
		keyvalue_t mykeyvalue67 = dummykv;
		keyvalue_t mykeyvalue70 = dummykv;
		keyvalue_t mykeyvalue71 = dummykv;
		keyvalue_t mykeyvalue72 = dummykv;
		keyvalue_t mykeyvalue73 = dummykv;
		keyvalue_t mykeyvalue74 = dummykv;
		keyvalue_t mykeyvalue75 = dummykv;
		keyvalue_t mykeyvalue76 = dummykv;
		keyvalue_t mykeyvalue77 = dummykv;
		keyvalue_t mykeyvalue80 = dummykv;
		keyvalue_t mykeyvalue81 = dummykv;
		keyvalue_t mykeyvalue82 = dummykv;
		keyvalue_t mykeyvalue83 = dummykv;
		keyvalue_t mykeyvalue84 = dummykv;
		keyvalue_t mykeyvalue85 = dummykv;
		keyvalue_t mykeyvalue86 = dummykv;
		keyvalue_t mykeyvalue87 = dummykv;
		keyvalue_t mykeyvalue90 = dummykv;
		keyvalue_t mykeyvalue91 = dummykv;
		keyvalue_t mykeyvalue92 = dummykv;
		keyvalue_t mykeyvalue93 = dummykv;
		keyvalue_t mykeyvalue94 = dummykv;
		keyvalue_t mykeyvalue95 = dummykv;
		keyvalue_t mykeyvalue96 = dummykv;
		keyvalue_t mykeyvalue97 = dummykv;
		keyvalue_t mykeyvalue100 = dummykv;
		keyvalue_t mykeyvalue101 = dummykv;
		keyvalue_t mykeyvalue102 = dummykv;
		keyvalue_t mykeyvalue103 = dummykv;
		keyvalue_t mykeyvalue104 = dummykv;
		keyvalue_t mykeyvalue105 = dummykv;
		keyvalue_t mykeyvalue106 = dummykv;
		keyvalue_t mykeyvalue107 = dummykv;
		keyvalue_t mykeyvalue110 = dummykv;
		keyvalue_t mykeyvalue111 = dummykv;
		keyvalue_t mykeyvalue112 = dummykv;
		keyvalue_t mykeyvalue113 = dummykv;
		keyvalue_t mykeyvalue114 = dummykv;
		keyvalue_t mykeyvalue115 = dummykv;
		keyvalue_t mykeyvalue116 = dummykv;
		keyvalue_t mykeyvalue117 = dummykv;
		keyvalue_t mykeyvalue120 = dummykv;
		keyvalue_t mykeyvalue121 = dummykv;
		keyvalue_t mykeyvalue122 = dummykv;
		keyvalue_t mykeyvalue123 = dummykv;
		keyvalue_t mykeyvalue124 = dummykv;
		keyvalue_t mykeyvalue125 = dummykv;
		keyvalue_t mykeyvalue126 = dummykv;
		keyvalue_t mykeyvalue127 = dummykv;
		keyvalue_t mykeyvalue130 = dummykv;
		keyvalue_t mykeyvalue131 = dummykv;
		keyvalue_t mykeyvalue132 = dummykv;
		keyvalue_t mykeyvalue133 = dummykv;
		keyvalue_t mykeyvalue134 = dummykv;
		keyvalue_t mykeyvalue135 = dummykv;
		keyvalue_t mykeyvalue136 = dummykv;
		keyvalue_t mykeyvalue137 = dummykv;
		keyvalue_t mykeyvalue140 = dummykv;
		keyvalue_t mykeyvalue141 = dummykv;
		keyvalue_t mykeyvalue142 = dummykv;
		keyvalue_t mykeyvalue143 = dummykv;
		keyvalue_t mykeyvalue144 = dummykv;
		keyvalue_t mykeyvalue145 = dummykv;
		keyvalue_t mykeyvalue146 = dummykv;
		keyvalue_t mykeyvalue147 = dummykv;
		
		//((n)/2)
		keyA0 = mergefunc(mykeyvalue00.key, mykeyvalue10.key, NAp);
		keyB0 = mergefunc(mykeyvalue20.key, mykeyvalue30.key, NAp);
		keyA1 = mergefunc(mykeyvalue01.key, mykeyvalue11.key, NAp);
		keyB1 = mergefunc(mykeyvalue21.key, mykeyvalue31.key, NAp);
		keyA2 = mergefunc(mykeyvalue02.key, mykeyvalue12.key, NAp);
		keyB2 = mergefunc(mykeyvalue22.key, mykeyvalue32.key, NAp);
		keyA3 = mergefunc(mykeyvalue03.key, mykeyvalue13.key, NAp);
		keyB3 = mergefunc(mykeyvalue23.key, mykeyvalue33.key, NAp);
		keyA4 = mergefunc(mykeyvalue04.key, mykeyvalue14.key, NAp);
		keyB4 = mergefunc(mykeyvalue24.key, mykeyvalue34.key, NAp);
		keyA5 = mergefunc(mykeyvalue05.key, mykeyvalue15.key, NAp);
		keyB5 = mergefunc(mykeyvalue25.key, mykeyvalue35.key, NAp);
		keyA6 = mergefunc(mykeyvalue06.key, mykeyvalue16.key, NAp);
		keyB6 = mergefunc(mykeyvalue26.key, mykeyvalue36.key, NAp);
		keyA7 = mergefunc(mykeyvalue07.key, mykeyvalue17.key, NAp);
		keyB7 = mergefunc(mykeyvalue27.key, mykeyvalue37.key, NAp);
		keyy_t keyPA0 = mergefunc(keyA0, keyB0, NAp);
		keyy_t keyPB0 = mergefunc(keyC0, keyD0, NAp);
		keyy_t keyPC0 = mergefunc(keyE0, keyF0, NAp);
		keyy_t keyRA0 = mergefunc(keyPA0, keyPB0, NAp);
		keyy_t keyRB0 = mergefunc(keyPC0, keyF0, NAp);
		keyy_t keyRZ0 = mergefunc(keyRA0, keyRB0, NAp);
		keyy_t keyPA1 = mergefunc(keyA1, keyB1, NAp);
		keyy_t keyPB1 = mergefunc(keyC1, keyD1, NAp);
		keyy_t keyPC1 = mergefunc(keyE1, keyF1, NAp);
		keyy_t keyRA1 = mergefunc(keyPA1, keyPB1, NAp);
		keyy_t keyRB1 = mergefunc(keyPC1, keyF1, NAp);
		keyy_t keyRZ1 = mergefunc(keyRA1, keyRB1, NAp);
		keyy_t keyPA2 = mergefunc(keyA2, keyB2, NAp);
		keyy_t keyPB2 = mergefunc(keyC2, keyD2, NAp);
		keyy_t keyPC2 = mergefunc(keyE2, keyF2, NAp);
		keyy_t keyRA2 = mergefunc(keyPA2, keyPB2, NAp);
		keyy_t keyRB2 = mergefunc(keyPC2, keyF2, NAp);
		keyy_t keyRZ2 = mergefunc(keyRA2, keyRB2, NAp);
		keyy_t keyPA3 = mergefunc(keyA3, keyB3, NAp);
		keyy_t keyPB3 = mergefunc(keyC3, keyD3, NAp);
		keyy_t keyPC3 = mergefunc(keyE3, keyF3, NAp);
		keyy_t keyRA3 = mergefunc(keyPA3, keyPB3, NAp);
		keyy_t keyRB3 = mergefunc(keyPC3, keyF3, NAp);
		keyy_t keyRZ3 = mergefunc(keyRA3, keyRB3, NAp);
		keyy_t keyPA4 = mergefunc(keyA4, keyB4, NAp);
		keyy_t keyPB4 = mergefunc(keyC4, keyD4, NAp);
		keyy_t keyPC4 = mergefunc(keyE4, keyF4, NAp);
		keyy_t keyRA4 = mergefunc(keyPA4, keyPB4, NAp);
		keyy_t keyRB4 = mergefunc(keyPC4, keyF4, NAp);
		keyy_t keyRZ4 = mergefunc(keyRA4, keyRB4, NAp);
		keyy_t keyPA5 = mergefunc(keyA5, keyB5, NAp);
		keyy_t keyPB5 = mergefunc(keyC5, keyD5, NAp);
		keyy_t keyPC5 = mergefunc(keyE5, keyF5, NAp);
		keyy_t keyRA5 = mergefunc(keyPA5, keyPB5, NAp);
		keyy_t keyRB5 = mergefunc(keyPC5, keyF5, NAp);
		keyy_t keyRZ5 = mergefunc(keyRA5, keyRB5, NAp);
		keyy_t keyPA6 = mergefunc(keyA6, keyB6, NAp);
		keyy_t keyPB6 = mergefunc(keyC6, keyD6, NAp);
		keyy_t keyPC6 = mergefunc(keyE6, keyF6, NAp);
		keyy_t keyRA6 = mergefunc(keyPA6, keyPB6, NAp);
		keyy_t keyRB6 = mergefunc(keyPC6, keyF6, NAp);
		keyy_t keyRZ6 = mergefunc(keyRA6, keyRB6, NAp);
		keyy_t keyPA7 = mergefunc(keyA7, keyB7, NAp);
		keyy_t keyPB7 = mergefunc(keyC7, keyD7, NAp);
		keyy_t keyPC7 = mergefunc(keyE7, keyF7, NAp);
		keyy_t keyRA7 = mergefunc(keyPA7, keyPB7, NAp);
		keyy_t keyRB7 = mergefunc(keyPC7, keyF7, NAp);
		keyy_t keyRZ7 = mergefunc(keyRA7, keyRB7, NAp);
		
		//((n)/2)
		valA0 = mergefunc(mykeyvalue00.value, mykeyvalue10.value, NAp);
		valB0 = mergefunc(mykeyvalue20.value, mykeyvalue30.value, NAp);
		valA1 = mergefunc(mykeyvalue01.value, mykeyvalue11.value, NAp);
		valB1 = mergefunc(mykeyvalue21.value, mykeyvalue31.value, NAp);
		valA2 = mergefunc(mykeyvalue02.value, mykeyvalue12.value, NAp);
		valB2 = mergefunc(mykeyvalue22.value, mykeyvalue32.value, NAp);
		valA3 = mergefunc(mykeyvalue03.value, mykeyvalue13.value, NAp);
		valB3 = mergefunc(mykeyvalue23.value, mykeyvalue33.value, NAp);
		valA4 = mergefunc(mykeyvalue04.value, mykeyvalue14.value, NAp);
		valB4 = mergefunc(mykeyvalue24.value, mykeyvalue34.value, NAp);
		valA5 = mergefunc(mykeyvalue05.value, mykeyvalue15.value, NAp);
		valB5 = mergefunc(mykeyvalue25.value, mykeyvalue35.value, NAp);
		valA6 = mergefunc(mykeyvalue06.value, mykeyvalue16.value, NAp);
		valB6 = mergefunc(mykeyvalue26.value, mykeyvalue36.value, NAp);
		valA7 = mergefunc(mykeyvalue07.value, mykeyvalue17.value, NAp);
		valB7 = mergefunc(mykeyvalue27.value, mykeyvalue37.value, NAp);
		value_t valPA0 = mergefunc(valA0, valB0, NAp);
		value_t valPB0 = mergefunc(valC0, valD0, NAp);
		value_t valPC0 = mergefunc(valE0, valF0, NAp);
		value_t valRA0 = mergefunc(valPA0, valPB0, NAp);
		value_t valRB0 = mergefunc(valPC0, valF0, NAp);
		value_t valRZ0 = mergefunc(valRA0, valRB0, NAp);
		value_t valPA1 = mergefunc(valA1, valB1, NAp);
		value_t valPB1 = mergefunc(valC1, valD1, NAp);
		value_t valPC1 = mergefunc(valE1, valF1, NAp);
		value_t valRA1 = mergefunc(valPA1, valPB1, NAp);
		value_t valRB1 = mergefunc(valPC1, valF1, NAp);
		value_t valRZ1 = mergefunc(valRA1, valRB1, NAp);
		value_t valPA2 = mergefunc(valA2, valB2, NAp);
		value_t valPB2 = mergefunc(valC2, valD2, NAp);
		value_t valPC2 = mergefunc(valE2, valF2, NAp);
		value_t valRA2 = mergefunc(valPA2, valPB2, NAp);
		value_t valRB2 = mergefunc(valPC2, valF2, NAp);
		value_t valRZ2 = mergefunc(valRA2, valRB2, NAp);
		value_t valPA3 = mergefunc(valA3, valB3, NAp);
		value_t valPB3 = mergefunc(valC3, valD3, NAp);
		value_t valPC3 = mergefunc(valE3, valF3, NAp);
		value_t valRA3 = mergefunc(valPA3, valPB3, NAp);
		value_t valRB3 = mergefunc(valPC3, valF3, NAp);
		value_t valRZ3 = mergefunc(valRA3, valRB3, NAp);
		value_t valPA4 = mergefunc(valA4, valB4, NAp);
		value_t valPB4 = mergefunc(valC4, valD4, NAp);
		value_t valPC4 = mergefunc(valE4, valF4, NAp);
		value_t valRA4 = mergefunc(valPA4, valPB4, NAp);
		value_t valRB4 = mergefunc(valPC4, valF4, NAp);
		value_t valRZ4 = mergefunc(valRA4, valRB4, NAp);
		value_t valPA5 = mergefunc(valA5, valB5, NAp);
		value_t valPB5 = mergefunc(valC5, valD5, NAp);
		value_t valPC5 = mergefunc(valE5, valF5, NAp);
		value_t valRA5 = mergefunc(valPA5, valPB5, NAp);
		value_t valRB5 = mergefunc(valPC5, valF5, NAp);
		value_t valRZ5 = mergefunc(valRA5, valRB5, NAp);
		value_t valPA6 = mergefunc(valA6, valB6, NAp);
		value_t valPB6 = mergefunc(valC6, valD6, NAp);
		value_t valPC6 = mergefunc(valE6, valF6, NAp);
		value_t valRA6 = mergefunc(valPA6, valPB6, NAp);
		value_t valRB6 = mergefunc(valPC6, valF6, NAp);
		value_t valRZ6 = mergefunc(valRA6, valRB6, NAp);
		value_t valPA7 = mergefunc(valA7, valB7, NAp);
		value_t valPB7 = mergefunc(valC7, valD7, NAp);
		value_t valPC7 = mergefunc(valE7, valF7, NAp);
		value_t valRA7 = mergefunc(valPA7, valPB7, NAp);
		value_t valRB7 = mergefunc(valPC7, valF7, NAp);
		value_t valRZ7 = mergefunc(valRA7, valRB7, NAp);
		
		#ifdef _WIDEWORD
		vdram[dramoffset_kvs + j].range(31, 0) = keyRZ0;
		vdram[dramoffset_kvs + j].range(63, 32) = valRZ0;
		vdram[dramoffset_kvs + j].range(95, 64) = keyRZ1;
		vdram[dramoffset_kvs + j].range(127, 96) = valRZ1;
		vdram[dramoffset_kvs + j].range(159, 128) = keyRZ2;
		vdram[dramoffset_kvs + j].range(191, 160) = valRZ2;
		vdram[dramoffset_kvs + j].range(223, 192) = keyRZ3;
		vdram[dramoffset_kvs + j].range(255, 224) = valRZ3;
		vdram[dramoffset_kvs + j].range(287, 256) = keyRZ4;
		vdram[dramoffset_kvs + j].range(319, 288) = valRZ4;
		vdram[dramoffset_kvs + j].range(351, 320) = keyRZ5;
		vdram[dramoffset_kvs + j].range(383, 352) = valRZ5;
		vdram[dramoffset_kvs + j].range(415, 384) = keyRZ6;
		vdram[dramoffset_kvs + j].range(447, 416) = valRZ6;
		vdram[dramoffset_kvs + j].range(479, 448) = keyRZ7;
		vdram[dramoffset_kvs + j].range(511, 480) = valRZ7;
		#else
		vdram[dramoffset_kvs + j].data[0].key = keyRZ0;
		vdram[dramoffset_kvs + j].data[0].value = valRZ0;
		vdram[dramoffset_kvs + j].data[1].key = keyRZ1;
		vdram[dramoffset_kvs + j].data[1].value = valRZ1;
		vdram[dramoffset_kvs + j].data[2].key = keyRZ2;
		vdram[dramoffset_kvs + j].data[2].value = valRZ2;
		vdram[dramoffset_kvs + j].data[3].key = keyRZ3;
		vdram[dramoffset_kvs + j].data[3].value = valRZ3;
		vdram[dramoffset_kvs + j].data[4].key = keyRZ4;
		vdram[dramoffset_kvs + j].data[4].value = valRZ4;
		vdram[dramoffset_kvs + j].data[5].key = keyRZ5;
		vdram[dramoffset_kvs + j].data[5].value = valRZ5;
		vdram[dramoffset_kvs + j].data[6].key = keyRZ6;
		vdram[dramoffset_kvs + j].data[6].value = valRZ6;
		vdram[dramoffset_kvs + j].data[7].key = keyRZ7;
		vdram[dramoffset_kvs + j].data[7].value = valRZ7;
		#endif
	}
	return;
}
void
	#if defined(SW)
	actsproc::
	#endif
merge3andsavevdata(bool_type enable, uint512_dt * vdram, keyvalue_vbuffer_t vbuffer0[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t vbuffer1[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t vbuffer2[VDATA_PACKINGSIZE][BLOCKRAM_SIZE], unsigned int begincol, batch_type bufferoffset_kvs, unsigned int dramoffset_kvs){
	if(enable == OFF){ return; }
	keyvalue_t dummykv;
	dummykv.key = 0xFFFFFFFF; dummykv.value = 0xFFFFFFFF;
	
	keyy_t keyA0 = dummykv.key;
	value_t valA0 = dummykv.key;
	keyy_t keyB0 = dummykv.key;
	value_t valB0 = dummykv.key;
	keyy_t keyC0 = dummykv.key;
	value_t valC0 = dummykv.key;
	keyy_t keyD0 = dummykv.key;
	value_t valD0 = dummykv.key;
	keyy_t keyE0 = dummykv.key;
	value_t valE0 = dummykv.key;
	keyy_t keyF0 = dummykv.key;
	value_t valF0 = dummykv.key;
	keyy_t keyG0 = dummykv.key;
	value_t valG0 = dummykv.key;
	keyy_t keyH0 = dummykv.key;
	value_t valH0 = dummykv.key;
	keyy_t keyI0 = dummykv.key;
	value_t valI0 = dummykv.key;
	keyy_t keyJ0 = dummykv.key;
	value_t valJ0 = dummykv.key;
	keyy_t keyK0 = dummykv.key;
	value_t valK0 = dummykv.key;
	keyy_t keyL0 = dummykv.key;
	value_t valL0 = dummykv.key;
	keyy_t keyM0 = dummykv.key;
	value_t valM0 = dummykv.key;
	keyy_t keyA1 = dummykv.key;
	value_t valA1 = dummykv.key;
	keyy_t keyB1 = dummykv.key;
	value_t valB1 = dummykv.key;
	keyy_t keyC1 = dummykv.key;
	value_t valC1 = dummykv.key;
	keyy_t keyD1 = dummykv.key;
	value_t valD1 = dummykv.key;
	keyy_t keyE1 = dummykv.key;
	value_t valE1 = dummykv.key;
	keyy_t keyF1 = dummykv.key;
	value_t valF1 = dummykv.key;
	keyy_t keyG1 = dummykv.key;
	value_t valG1 = dummykv.key;
	keyy_t keyH1 = dummykv.key;
	value_t valH1 = dummykv.key;
	keyy_t keyI1 = dummykv.key;
	value_t valI1 = dummykv.key;
	keyy_t keyJ1 = dummykv.key;
	value_t valJ1 = dummykv.key;
	keyy_t keyK1 = dummykv.key;
	value_t valK1 = dummykv.key;
	keyy_t keyL1 = dummykv.key;
	value_t valL1 = dummykv.key;
	keyy_t keyM1 = dummykv.key;
	value_t valM1 = dummykv.key;
	keyy_t keyA2 = dummykv.key;
	value_t valA2 = dummykv.key;
	keyy_t keyB2 = dummykv.key;
	value_t valB2 = dummykv.key;
	keyy_t keyC2 = dummykv.key;
	value_t valC2 = dummykv.key;
	keyy_t keyD2 = dummykv.key;
	value_t valD2 = dummykv.key;
	keyy_t keyE2 = dummykv.key;
	value_t valE2 = dummykv.key;
	keyy_t keyF2 = dummykv.key;
	value_t valF2 = dummykv.key;
	keyy_t keyG2 = dummykv.key;
	value_t valG2 = dummykv.key;
	keyy_t keyH2 = dummykv.key;
	value_t valH2 = dummykv.key;
	keyy_t keyI2 = dummykv.key;
	value_t valI2 = dummykv.key;
	keyy_t keyJ2 = dummykv.key;
	value_t valJ2 = dummykv.key;
	keyy_t keyK2 = dummykv.key;
	value_t valK2 = dummykv.key;
	keyy_t keyL2 = dummykv.key;
	value_t valL2 = dummykv.key;
	keyy_t keyM2 = dummykv.key;
	value_t valM2 = dummykv.key;
	keyy_t keyA3 = dummykv.key;
	value_t valA3 = dummykv.key;
	keyy_t keyB3 = dummykv.key;
	value_t valB3 = dummykv.key;
	keyy_t keyC3 = dummykv.key;
	value_t valC3 = dummykv.key;
	keyy_t keyD3 = dummykv.key;
	value_t valD3 = dummykv.key;
	keyy_t keyE3 = dummykv.key;
	value_t valE3 = dummykv.key;
	keyy_t keyF3 = dummykv.key;
	value_t valF3 = dummykv.key;
	keyy_t keyG3 = dummykv.key;
	value_t valG3 = dummykv.key;
	keyy_t keyH3 = dummykv.key;
	value_t valH3 = dummykv.key;
	keyy_t keyI3 = dummykv.key;
	value_t valI3 = dummykv.key;
	keyy_t keyJ3 = dummykv.key;
	value_t valJ3 = dummykv.key;
	keyy_t keyK3 = dummykv.key;
	value_t valK3 = dummykv.key;
	keyy_t keyL3 = dummykv.key;
	value_t valL3 = dummykv.key;
	keyy_t keyM3 = dummykv.key;
	value_t valM3 = dummykv.key;
	keyy_t keyA4 = dummykv.key;
	value_t valA4 = dummykv.key;
	keyy_t keyB4 = dummykv.key;
	value_t valB4 = dummykv.key;
	keyy_t keyC4 = dummykv.key;
	value_t valC4 = dummykv.key;
	keyy_t keyD4 = dummykv.key;
	value_t valD4 = dummykv.key;
	keyy_t keyE4 = dummykv.key;
	value_t valE4 = dummykv.key;
	keyy_t keyF4 = dummykv.key;
	value_t valF4 = dummykv.key;
	keyy_t keyG4 = dummykv.key;
	value_t valG4 = dummykv.key;
	keyy_t keyH4 = dummykv.key;
	value_t valH4 = dummykv.key;
	keyy_t keyI4 = dummykv.key;
	value_t valI4 = dummykv.key;
	keyy_t keyJ4 = dummykv.key;
	value_t valJ4 = dummykv.key;
	keyy_t keyK4 = dummykv.key;
	value_t valK4 = dummykv.key;
	keyy_t keyL4 = dummykv.key;
	value_t valL4 = dummykv.key;
	keyy_t keyM4 = dummykv.key;
	value_t valM4 = dummykv.key;
	keyy_t keyA5 = dummykv.key;
	value_t valA5 = dummykv.key;
	keyy_t keyB5 = dummykv.key;
	value_t valB5 = dummykv.key;
	keyy_t keyC5 = dummykv.key;
	value_t valC5 = dummykv.key;
	keyy_t keyD5 = dummykv.key;
	value_t valD5 = dummykv.key;
	keyy_t keyE5 = dummykv.key;
	value_t valE5 = dummykv.key;
	keyy_t keyF5 = dummykv.key;
	value_t valF5 = dummykv.key;
	keyy_t keyG5 = dummykv.key;
	value_t valG5 = dummykv.key;
	keyy_t keyH5 = dummykv.key;
	value_t valH5 = dummykv.key;
	keyy_t keyI5 = dummykv.key;
	value_t valI5 = dummykv.key;
	keyy_t keyJ5 = dummykv.key;
	value_t valJ5 = dummykv.key;
	keyy_t keyK5 = dummykv.key;
	value_t valK5 = dummykv.key;
	keyy_t keyL5 = dummykv.key;
	value_t valL5 = dummykv.key;
	keyy_t keyM5 = dummykv.key;
	value_t valM5 = dummykv.key;
	keyy_t keyA6 = dummykv.key;
	value_t valA6 = dummykv.key;
	keyy_t keyB6 = dummykv.key;
	value_t valB6 = dummykv.key;
	keyy_t keyC6 = dummykv.key;
	value_t valC6 = dummykv.key;
	keyy_t keyD6 = dummykv.key;
	value_t valD6 = dummykv.key;
	keyy_t keyE6 = dummykv.key;
	value_t valE6 = dummykv.key;
	keyy_t keyF6 = dummykv.key;
	value_t valF6 = dummykv.key;
	keyy_t keyG6 = dummykv.key;
	value_t valG6 = dummykv.key;
	keyy_t keyH6 = dummykv.key;
	value_t valH6 = dummykv.key;
	keyy_t keyI6 = dummykv.key;
	value_t valI6 = dummykv.key;
	keyy_t keyJ6 = dummykv.key;
	value_t valJ6 = dummykv.key;
	keyy_t keyK6 = dummykv.key;
	value_t valK6 = dummykv.key;
	keyy_t keyL6 = dummykv.key;
	value_t valL6 = dummykv.key;
	keyy_t keyM6 = dummykv.key;
	value_t valM6 = dummykv.key;
	keyy_t keyA7 = dummykv.key;
	value_t valA7 = dummykv.key;
	keyy_t keyB7 = dummykv.key;
	value_t valB7 = dummykv.key;
	keyy_t keyC7 = dummykv.key;
	value_t valC7 = dummykv.key;
	keyy_t keyD7 = dummykv.key;
	value_t valD7 = dummykv.key;
	keyy_t keyE7 = dummykv.key;
	value_t valE7 = dummykv.key;
	keyy_t keyF7 = dummykv.key;
	value_t valF7 = dummykv.key;
	keyy_t keyG7 = dummykv.key;
	value_t valG7 = dummykv.key;
	keyy_t keyH7 = dummykv.key;
	value_t valH7 = dummykv.key;
	keyy_t keyI7 = dummykv.key;
	value_t valI7 = dummykv.key;
	keyy_t keyJ7 = dummykv.key;
	value_t valJ7 = dummykv.key;
	keyy_t keyK7 = dummykv.key;
	value_t valK7 = dummykv.key;
	keyy_t keyL7 = dummykv.key;
	value_t valL7 = dummykv.key;
	keyy_t keyM7 = dummykv.key;
	value_t valM7 = dummykv.key;
	
	MERGE3_LOOP1: for (buffer_type j=0; j<BLOCKRAM_SIZE; j++){
	#pragma HLS PIPELINE II=1
		keyvalue_t mykeyvalue00 = GETKV2(vbuffer0[begincol + 0][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue01 = GETKV2(vbuffer0[begincol + 1][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue02 = GETKV2(vbuffer0[begincol + 2][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue03 = GETKV2(vbuffer0[begincol + 3][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue04 = GETKV2(vbuffer0[begincol + 4][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue05 = GETKV2(vbuffer0[begincol + 5][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue06 = GETKV2(vbuffer0[begincol + 6][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue07 = GETKV2(vbuffer0[begincol + 7][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue10 = GETKV2(vbuffer1[begincol + 0][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue11 = GETKV2(vbuffer1[begincol + 1][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue12 = GETKV2(vbuffer1[begincol + 2][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue13 = GETKV2(vbuffer1[begincol + 3][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue14 = GETKV2(vbuffer1[begincol + 4][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue15 = GETKV2(vbuffer1[begincol + 5][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue16 = GETKV2(vbuffer1[begincol + 6][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue17 = GETKV2(vbuffer1[begincol + 7][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue20 = GETKV2(vbuffer2[begincol + 0][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue21 = GETKV2(vbuffer2[begincol + 1][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue22 = GETKV2(vbuffer2[begincol + 2][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue23 = GETKV2(vbuffer2[begincol + 3][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue24 = GETKV2(vbuffer2[begincol + 4][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue25 = GETKV2(vbuffer2[begincol + 5][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue26 = GETKV2(vbuffer2[begincol + 6][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue27 = GETKV2(vbuffer2[begincol + 7][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue30 = dummykv;
		keyvalue_t mykeyvalue31 = dummykv;
		keyvalue_t mykeyvalue32 = dummykv;
		keyvalue_t mykeyvalue33 = dummykv;
		keyvalue_t mykeyvalue34 = dummykv;
		keyvalue_t mykeyvalue35 = dummykv;
		keyvalue_t mykeyvalue36 = dummykv;
		keyvalue_t mykeyvalue37 = dummykv;
		keyvalue_t mykeyvalue40 = dummykv;
		keyvalue_t mykeyvalue41 = dummykv;
		keyvalue_t mykeyvalue42 = dummykv;
		keyvalue_t mykeyvalue43 = dummykv;
		keyvalue_t mykeyvalue44 = dummykv;
		keyvalue_t mykeyvalue45 = dummykv;
		keyvalue_t mykeyvalue46 = dummykv;
		keyvalue_t mykeyvalue47 = dummykv;
		keyvalue_t mykeyvalue50 = dummykv;
		keyvalue_t mykeyvalue51 = dummykv;
		keyvalue_t mykeyvalue52 = dummykv;
		keyvalue_t mykeyvalue53 = dummykv;
		keyvalue_t mykeyvalue54 = dummykv;
		keyvalue_t mykeyvalue55 = dummykv;
		keyvalue_t mykeyvalue56 = dummykv;
		keyvalue_t mykeyvalue57 = dummykv;
		keyvalue_t mykeyvalue60 = dummykv;
		keyvalue_t mykeyvalue61 = dummykv;
		keyvalue_t mykeyvalue62 = dummykv;
		keyvalue_t mykeyvalue63 = dummykv;
		keyvalue_t mykeyvalue64 = dummykv;
		keyvalue_t mykeyvalue65 = dummykv;
		keyvalue_t mykeyvalue66 = dummykv;
		keyvalue_t mykeyvalue67 = dummykv;
		keyvalue_t mykeyvalue70 = dummykv;
		keyvalue_t mykeyvalue71 = dummykv;
		keyvalue_t mykeyvalue72 = dummykv;
		keyvalue_t mykeyvalue73 = dummykv;
		keyvalue_t mykeyvalue74 = dummykv;
		keyvalue_t mykeyvalue75 = dummykv;
		keyvalue_t mykeyvalue76 = dummykv;
		keyvalue_t mykeyvalue77 = dummykv;
		keyvalue_t mykeyvalue80 = dummykv;
		keyvalue_t mykeyvalue81 = dummykv;
		keyvalue_t mykeyvalue82 = dummykv;
		keyvalue_t mykeyvalue83 = dummykv;
		keyvalue_t mykeyvalue84 = dummykv;
		keyvalue_t mykeyvalue85 = dummykv;
		keyvalue_t mykeyvalue86 = dummykv;
		keyvalue_t mykeyvalue87 = dummykv;
		keyvalue_t mykeyvalue90 = dummykv;
		keyvalue_t mykeyvalue91 = dummykv;
		keyvalue_t mykeyvalue92 = dummykv;
		keyvalue_t mykeyvalue93 = dummykv;
		keyvalue_t mykeyvalue94 = dummykv;
		keyvalue_t mykeyvalue95 = dummykv;
		keyvalue_t mykeyvalue96 = dummykv;
		keyvalue_t mykeyvalue97 = dummykv;
		keyvalue_t mykeyvalue100 = dummykv;
		keyvalue_t mykeyvalue101 = dummykv;
		keyvalue_t mykeyvalue102 = dummykv;
		keyvalue_t mykeyvalue103 = dummykv;
		keyvalue_t mykeyvalue104 = dummykv;
		keyvalue_t mykeyvalue105 = dummykv;
		keyvalue_t mykeyvalue106 = dummykv;
		keyvalue_t mykeyvalue107 = dummykv;
		keyvalue_t mykeyvalue110 = dummykv;
		keyvalue_t mykeyvalue111 = dummykv;
		keyvalue_t mykeyvalue112 = dummykv;
		keyvalue_t mykeyvalue113 = dummykv;
		keyvalue_t mykeyvalue114 = dummykv;
		keyvalue_t mykeyvalue115 = dummykv;
		keyvalue_t mykeyvalue116 = dummykv;
		keyvalue_t mykeyvalue117 = dummykv;
		keyvalue_t mykeyvalue120 = dummykv;
		keyvalue_t mykeyvalue121 = dummykv;
		keyvalue_t mykeyvalue122 = dummykv;
		keyvalue_t mykeyvalue123 = dummykv;
		keyvalue_t mykeyvalue124 = dummykv;
		keyvalue_t mykeyvalue125 = dummykv;
		keyvalue_t mykeyvalue126 = dummykv;
		keyvalue_t mykeyvalue127 = dummykv;
		keyvalue_t mykeyvalue130 = dummykv;
		keyvalue_t mykeyvalue131 = dummykv;
		keyvalue_t mykeyvalue132 = dummykv;
		keyvalue_t mykeyvalue133 = dummykv;
		keyvalue_t mykeyvalue134 = dummykv;
		keyvalue_t mykeyvalue135 = dummykv;
		keyvalue_t mykeyvalue136 = dummykv;
		keyvalue_t mykeyvalue137 = dummykv;
		keyvalue_t mykeyvalue140 = dummykv;
		keyvalue_t mykeyvalue141 = dummykv;
		keyvalue_t mykeyvalue142 = dummykv;
		keyvalue_t mykeyvalue143 = dummykv;
		keyvalue_t mykeyvalue144 = dummykv;
		keyvalue_t mykeyvalue145 = dummykv;
		keyvalue_t mykeyvalue146 = dummykv;
		keyvalue_t mykeyvalue147 = dummykv;
		
		//((n)/2)
		keyA0 = mergefunc(mykeyvalue00.key, mykeyvalue10.key, NAp);
		keyB0 = mergefunc(mykeyvalue20.key, mykeyvalue30.key, NAp);
		keyA1 = mergefunc(mykeyvalue01.key, mykeyvalue11.key, NAp);
		keyB1 = mergefunc(mykeyvalue21.key, mykeyvalue31.key, NAp);
		keyA2 = mergefunc(mykeyvalue02.key, mykeyvalue12.key, NAp);
		keyB2 = mergefunc(mykeyvalue22.key, mykeyvalue32.key, NAp);
		keyA3 = mergefunc(mykeyvalue03.key, mykeyvalue13.key, NAp);
		keyB3 = mergefunc(mykeyvalue23.key, mykeyvalue33.key, NAp);
		keyA4 = mergefunc(mykeyvalue04.key, mykeyvalue14.key, NAp);
		keyB4 = mergefunc(mykeyvalue24.key, mykeyvalue34.key, NAp);
		keyA5 = mergefunc(mykeyvalue05.key, mykeyvalue15.key, NAp);
		keyB5 = mergefunc(mykeyvalue25.key, mykeyvalue35.key, NAp);
		keyA6 = mergefunc(mykeyvalue06.key, mykeyvalue16.key, NAp);
		keyB6 = mergefunc(mykeyvalue26.key, mykeyvalue36.key, NAp);
		keyA7 = mergefunc(mykeyvalue07.key, mykeyvalue17.key, NAp);
		keyB7 = mergefunc(mykeyvalue27.key, mykeyvalue37.key, NAp);
		keyy_t keyPA0 = mergefunc(keyA0, keyB0, NAp);
		keyy_t keyPB0 = mergefunc(keyC0, keyD0, NAp);
		keyy_t keyPC0 = mergefunc(keyE0, keyF0, NAp);
		keyy_t keyRA0 = mergefunc(keyPA0, keyPB0, NAp);
		keyy_t keyRB0 = mergefunc(keyPC0, keyF0, NAp);
		keyy_t keyRZ0 = mergefunc(keyRA0, keyRB0, NAp);
		keyy_t keyPA1 = mergefunc(keyA1, keyB1, NAp);
		keyy_t keyPB1 = mergefunc(keyC1, keyD1, NAp);
		keyy_t keyPC1 = mergefunc(keyE1, keyF1, NAp);
		keyy_t keyRA1 = mergefunc(keyPA1, keyPB1, NAp);
		keyy_t keyRB1 = mergefunc(keyPC1, keyF1, NAp);
		keyy_t keyRZ1 = mergefunc(keyRA1, keyRB1, NAp);
		keyy_t keyPA2 = mergefunc(keyA2, keyB2, NAp);
		keyy_t keyPB2 = mergefunc(keyC2, keyD2, NAp);
		keyy_t keyPC2 = mergefunc(keyE2, keyF2, NAp);
		keyy_t keyRA2 = mergefunc(keyPA2, keyPB2, NAp);
		keyy_t keyRB2 = mergefunc(keyPC2, keyF2, NAp);
		keyy_t keyRZ2 = mergefunc(keyRA2, keyRB2, NAp);
		keyy_t keyPA3 = mergefunc(keyA3, keyB3, NAp);
		keyy_t keyPB3 = mergefunc(keyC3, keyD3, NAp);
		keyy_t keyPC3 = mergefunc(keyE3, keyF3, NAp);
		keyy_t keyRA3 = mergefunc(keyPA3, keyPB3, NAp);
		keyy_t keyRB3 = mergefunc(keyPC3, keyF3, NAp);
		keyy_t keyRZ3 = mergefunc(keyRA3, keyRB3, NAp);
		keyy_t keyPA4 = mergefunc(keyA4, keyB4, NAp);
		keyy_t keyPB4 = mergefunc(keyC4, keyD4, NAp);
		keyy_t keyPC4 = mergefunc(keyE4, keyF4, NAp);
		keyy_t keyRA4 = mergefunc(keyPA4, keyPB4, NAp);
		keyy_t keyRB4 = mergefunc(keyPC4, keyF4, NAp);
		keyy_t keyRZ4 = mergefunc(keyRA4, keyRB4, NAp);
		keyy_t keyPA5 = mergefunc(keyA5, keyB5, NAp);
		keyy_t keyPB5 = mergefunc(keyC5, keyD5, NAp);
		keyy_t keyPC5 = mergefunc(keyE5, keyF5, NAp);
		keyy_t keyRA5 = mergefunc(keyPA5, keyPB5, NAp);
		keyy_t keyRB5 = mergefunc(keyPC5, keyF5, NAp);
		keyy_t keyRZ5 = mergefunc(keyRA5, keyRB5, NAp);
		keyy_t keyPA6 = mergefunc(keyA6, keyB6, NAp);
		keyy_t keyPB6 = mergefunc(keyC6, keyD6, NAp);
		keyy_t keyPC6 = mergefunc(keyE6, keyF6, NAp);
		keyy_t keyRA6 = mergefunc(keyPA6, keyPB6, NAp);
		keyy_t keyRB6 = mergefunc(keyPC6, keyF6, NAp);
		keyy_t keyRZ6 = mergefunc(keyRA6, keyRB6, NAp);
		keyy_t keyPA7 = mergefunc(keyA7, keyB7, NAp);
		keyy_t keyPB7 = mergefunc(keyC7, keyD7, NAp);
		keyy_t keyPC7 = mergefunc(keyE7, keyF7, NAp);
		keyy_t keyRA7 = mergefunc(keyPA7, keyPB7, NAp);
		keyy_t keyRB7 = mergefunc(keyPC7, keyF7, NAp);
		keyy_t keyRZ7 = mergefunc(keyRA7, keyRB7, NAp);
		
		//((n)/2)
		valA0 = mergefunc(mykeyvalue00.value, mykeyvalue10.value, NAp);
		valB0 = mergefunc(mykeyvalue20.value, mykeyvalue30.value, NAp);
		valA1 = mergefunc(mykeyvalue01.value, mykeyvalue11.value, NAp);
		valB1 = mergefunc(mykeyvalue21.value, mykeyvalue31.value, NAp);
		valA2 = mergefunc(mykeyvalue02.value, mykeyvalue12.value, NAp);
		valB2 = mergefunc(mykeyvalue22.value, mykeyvalue32.value, NAp);
		valA3 = mergefunc(mykeyvalue03.value, mykeyvalue13.value, NAp);
		valB3 = mergefunc(mykeyvalue23.value, mykeyvalue33.value, NAp);
		valA4 = mergefunc(mykeyvalue04.value, mykeyvalue14.value, NAp);
		valB4 = mergefunc(mykeyvalue24.value, mykeyvalue34.value, NAp);
		valA5 = mergefunc(mykeyvalue05.value, mykeyvalue15.value, NAp);
		valB5 = mergefunc(mykeyvalue25.value, mykeyvalue35.value, NAp);
		valA6 = mergefunc(mykeyvalue06.value, mykeyvalue16.value, NAp);
		valB6 = mergefunc(mykeyvalue26.value, mykeyvalue36.value, NAp);
		valA7 = mergefunc(mykeyvalue07.value, mykeyvalue17.value, NAp);
		valB7 = mergefunc(mykeyvalue27.value, mykeyvalue37.value, NAp);
		value_t valPA0 = mergefunc(valA0, valB0, NAp);
		value_t valPB0 = mergefunc(valC0, valD0, NAp);
		value_t valPC0 = mergefunc(valE0, valF0, NAp);
		value_t valRA0 = mergefunc(valPA0, valPB0, NAp);
		value_t valRB0 = mergefunc(valPC0, valF0, NAp);
		value_t valRZ0 = mergefunc(valRA0, valRB0, NAp);
		value_t valPA1 = mergefunc(valA1, valB1, NAp);
		value_t valPB1 = mergefunc(valC1, valD1, NAp);
		value_t valPC1 = mergefunc(valE1, valF1, NAp);
		value_t valRA1 = mergefunc(valPA1, valPB1, NAp);
		value_t valRB1 = mergefunc(valPC1, valF1, NAp);
		value_t valRZ1 = mergefunc(valRA1, valRB1, NAp);
		value_t valPA2 = mergefunc(valA2, valB2, NAp);
		value_t valPB2 = mergefunc(valC2, valD2, NAp);
		value_t valPC2 = mergefunc(valE2, valF2, NAp);
		value_t valRA2 = mergefunc(valPA2, valPB2, NAp);
		value_t valRB2 = mergefunc(valPC2, valF2, NAp);
		value_t valRZ2 = mergefunc(valRA2, valRB2, NAp);
		value_t valPA3 = mergefunc(valA3, valB3, NAp);
		value_t valPB3 = mergefunc(valC3, valD3, NAp);
		value_t valPC3 = mergefunc(valE3, valF3, NAp);
		value_t valRA3 = mergefunc(valPA3, valPB3, NAp);
		value_t valRB3 = mergefunc(valPC3, valF3, NAp);
		value_t valRZ3 = mergefunc(valRA3, valRB3, NAp);
		value_t valPA4 = mergefunc(valA4, valB4, NAp);
		value_t valPB4 = mergefunc(valC4, valD4, NAp);
		value_t valPC4 = mergefunc(valE4, valF4, NAp);
		value_t valRA4 = mergefunc(valPA4, valPB4, NAp);
		value_t valRB4 = mergefunc(valPC4, valF4, NAp);
		value_t valRZ4 = mergefunc(valRA4, valRB4, NAp);
		value_t valPA5 = mergefunc(valA5, valB5, NAp);
		value_t valPB5 = mergefunc(valC5, valD5, NAp);
		value_t valPC5 = mergefunc(valE5, valF5, NAp);
		value_t valRA5 = mergefunc(valPA5, valPB5, NAp);
		value_t valRB5 = mergefunc(valPC5, valF5, NAp);
		value_t valRZ5 = mergefunc(valRA5, valRB5, NAp);
		value_t valPA6 = mergefunc(valA6, valB6, NAp);
		value_t valPB6 = mergefunc(valC6, valD6, NAp);
		value_t valPC6 = mergefunc(valE6, valF6, NAp);
		value_t valRA6 = mergefunc(valPA6, valPB6, NAp);
		value_t valRB6 = mergefunc(valPC6, valF6, NAp);
		value_t valRZ6 = mergefunc(valRA6, valRB6, NAp);
		value_t valPA7 = mergefunc(valA7, valB7, NAp);
		value_t valPB7 = mergefunc(valC7, valD7, NAp);
		value_t valPC7 = mergefunc(valE7, valF7, NAp);
		value_t valRA7 = mergefunc(valPA7, valPB7, NAp);
		value_t valRB7 = mergefunc(valPC7, valF7, NAp);
		value_t valRZ7 = mergefunc(valRA7, valRB7, NAp);
		
		#ifdef _WIDEWORD
		vdram[dramoffset_kvs + j].range(31, 0) = keyRZ0;
		vdram[dramoffset_kvs + j].range(63, 32) = valRZ0;
		vdram[dramoffset_kvs + j].range(95, 64) = keyRZ1;
		vdram[dramoffset_kvs + j].range(127, 96) = valRZ1;
		vdram[dramoffset_kvs + j].range(159, 128) = keyRZ2;
		vdram[dramoffset_kvs + j].range(191, 160) = valRZ2;
		vdram[dramoffset_kvs + j].range(223, 192) = keyRZ3;
		vdram[dramoffset_kvs + j].range(255, 224) = valRZ3;
		vdram[dramoffset_kvs + j].range(287, 256) = keyRZ4;
		vdram[dramoffset_kvs + j].range(319, 288) = valRZ4;
		vdram[dramoffset_kvs + j].range(351, 320) = keyRZ5;
		vdram[dramoffset_kvs + j].range(383, 352) = valRZ5;
		vdram[dramoffset_kvs + j].range(415, 384) = keyRZ6;
		vdram[dramoffset_kvs + j].range(447, 416) = valRZ6;
		vdram[dramoffset_kvs + j].range(479, 448) = keyRZ7;
		vdram[dramoffset_kvs + j].range(511, 480) = valRZ7;
		#else
		vdram[dramoffset_kvs + j].data[0].key = keyRZ0;
		vdram[dramoffset_kvs + j].data[0].value = valRZ0;
		vdram[dramoffset_kvs + j].data[1].key = keyRZ1;
		vdram[dramoffset_kvs + j].data[1].value = valRZ1;
		vdram[dramoffset_kvs + j].data[2].key = keyRZ2;
		vdram[dramoffset_kvs + j].data[2].value = valRZ2;
		vdram[dramoffset_kvs + j].data[3].key = keyRZ3;
		vdram[dramoffset_kvs + j].data[3].value = valRZ3;
		vdram[dramoffset_kvs + j].data[4].key = keyRZ4;
		vdram[dramoffset_kvs + j].data[4].value = valRZ4;
		vdram[dramoffset_kvs + j].data[5].key = keyRZ5;
		vdram[dramoffset_kvs + j].data[5].value = valRZ5;
		vdram[dramoffset_kvs + j].data[6].key = keyRZ6;
		vdram[dramoffset_kvs + j].data[6].value = valRZ6;
		vdram[dramoffset_kvs + j].data[7].key = keyRZ7;
		vdram[dramoffset_kvs + j].data[7].value = valRZ7;
		#endif
	}
	return;
}
void
	#if defined(SW)
	actsproc::
	#endif
merge4andsavevdata(bool_type enable, uint512_dt * vdram, keyvalue_vbuffer_t vbuffer0[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t vbuffer1[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t vbuffer2[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t vbuffer3[VDATA_PACKINGSIZE][BLOCKRAM_SIZE], unsigned int begincol, batch_type bufferoffset_kvs, unsigned int dramoffset_kvs){
	if(enable == OFF){ return; }
	keyvalue_t dummykv;
	dummykv.key = 0xFFFFFFFF; dummykv.value = 0xFFFFFFFF;
	
	keyy_t keyA0 = dummykv.key;
	value_t valA0 = dummykv.key;
	keyy_t keyB0 = dummykv.key;
	value_t valB0 = dummykv.key;
	keyy_t keyC0 = dummykv.key;
	value_t valC0 = dummykv.key;
	keyy_t keyD0 = dummykv.key;
	value_t valD0 = dummykv.key;
	keyy_t keyE0 = dummykv.key;
	value_t valE0 = dummykv.key;
	keyy_t keyF0 = dummykv.key;
	value_t valF0 = dummykv.key;
	keyy_t keyG0 = dummykv.key;
	value_t valG0 = dummykv.key;
	keyy_t keyH0 = dummykv.key;
	value_t valH0 = dummykv.key;
	keyy_t keyI0 = dummykv.key;
	value_t valI0 = dummykv.key;
	keyy_t keyJ0 = dummykv.key;
	value_t valJ0 = dummykv.key;
	keyy_t keyK0 = dummykv.key;
	value_t valK0 = dummykv.key;
	keyy_t keyL0 = dummykv.key;
	value_t valL0 = dummykv.key;
	keyy_t keyM0 = dummykv.key;
	value_t valM0 = dummykv.key;
	keyy_t keyA1 = dummykv.key;
	value_t valA1 = dummykv.key;
	keyy_t keyB1 = dummykv.key;
	value_t valB1 = dummykv.key;
	keyy_t keyC1 = dummykv.key;
	value_t valC1 = dummykv.key;
	keyy_t keyD1 = dummykv.key;
	value_t valD1 = dummykv.key;
	keyy_t keyE1 = dummykv.key;
	value_t valE1 = dummykv.key;
	keyy_t keyF1 = dummykv.key;
	value_t valF1 = dummykv.key;
	keyy_t keyG1 = dummykv.key;
	value_t valG1 = dummykv.key;
	keyy_t keyH1 = dummykv.key;
	value_t valH1 = dummykv.key;
	keyy_t keyI1 = dummykv.key;
	value_t valI1 = dummykv.key;
	keyy_t keyJ1 = dummykv.key;
	value_t valJ1 = dummykv.key;
	keyy_t keyK1 = dummykv.key;
	value_t valK1 = dummykv.key;
	keyy_t keyL1 = dummykv.key;
	value_t valL1 = dummykv.key;
	keyy_t keyM1 = dummykv.key;
	value_t valM1 = dummykv.key;
	keyy_t keyA2 = dummykv.key;
	value_t valA2 = dummykv.key;
	keyy_t keyB2 = dummykv.key;
	value_t valB2 = dummykv.key;
	keyy_t keyC2 = dummykv.key;
	value_t valC2 = dummykv.key;
	keyy_t keyD2 = dummykv.key;
	value_t valD2 = dummykv.key;
	keyy_t keyE2 = dummykv.key;
	value_t valE2 = dummykv.key;
	keyy_t keyF2 = dummykv.key;
	value_t valF2 = dummykv.key;
	keyy_t keyG2 = dummykv.key;
	value_t valG2 = dummykv.key;
	keyy_t keyH2 = dummykv.key;
	value_t valH2 = dummykv.key;
	keyy_t keyI2 = dummykv.key;
	value_t valI2 = dummykv.key;
	keyy_t keyJ2 = dummykv.key;
	value_t valJ2 = dummykv.key;
	keyy_t keyK2 = dummykv.key;
	value_t valK2 = dummykv.key;
	keyy_t keyL2 = dummykv.key;
	value_t valL2 = dummykv.key;
	keyy_t keyM2 = dummykv.key;
	value_t valM2 = dummykv.key;
	keyy_t keyA3 = dummykv.key;
	value_t valA3 = dummykv.key;
	keyy_t keyB3 = dummykv.key;
	value_t valB3 = dummykv.key;
	keyy_t keyC3 = dummykv.key;
	value_t valC3 = dummykv.key;
	keyy_t keyD3 = dummykv.key;
	value_t valD3 = dummykv.key;
	keyy_t keyE3 = dummykv.key;
	value_t valE3 = dummykv.key;
	keyy_t keyF3 = dummykv.key;
	value_t valF3 = dummykv.key;
	keyy_t keyG3 = dummykv.key;
	value_t valG3 = dummykv.key;
	keyy_t keyH3 = dummykv.key;
	value_t valH3 = dummykv.key;
	keyy_t keyI3 = dummykv.key;
	value_t valI3 = dummykv.key;
	keyy_t keyJ3 = dummykv.key;
	value_t valJ3 = dummykv.key;
	keyy_t keyK3 = dummykv.key;
	value_t valK3 = dummykv.key;
	keyy_t keyL3 = dummykv.key;
	value_t valL3 = dummykv.key;
	keyy_t keyM3 = dummykv.key;
	value_t valM3 = dummykv.key;
	keyy_t keyA4 = dummykv.key;
	value_t valA4 = dummykv.key;
	keyy_t keyB4 = dummykv.key;
	value_t valB4 = dummykv.key;
	keyy_t keyC4 = dummykv.key;
	value_t valC4 = dummykv.key;
	keyy_t keyD4 = dummykv.key;
	value_t valD4 = dummykv.key;
	keyy_t keyE4 = dummykv.key;
	value_t valE4 = dummykv.key;
	keyy_t keyF4 = dummykv.key;
	value_t valF4 = dummykv.key;
	keyy_t keyG4 = dummykv.key;
	value_t valG4 = dummykv.key;
	keyy_t keyH4 = dummykv.key;
	value_t valH4 = dummykv.key;
	keyy_t keyI4 = dummykv.key;
	value_t valI4 = dummykv.key;
	keyy_t keyJ4 = dummykv.key;
	value_t valJ4 = dummykv.key;
	keyy_t keyK4 = dummykv.key;
	value_t valK4 = dummykv.key;
	keyy_t keyL4 = dummykv.key;
	value_t valL4 = dummykv.key;
	keyy_t keyM4 = dummykv.key;
	value_t valM4 = dummykv.key;
	keyy_t keyA5 = dummykv.key;
	value_t valA5 = dummykv.key;
	keyy_t keyB5 = dummykv.key;
	value_t valB5 = dummykv.key;
	keyy_t keyC5 = dummykv.key;
	value_t valC5 = dummykv.key;
	keyy_t keyD5 = dummykv.key;
	value_t valD5 = dummykv.key;
	keyy_t keyE5 = dummykv.key;
	value_t valE5 = dummykv.key;
	keyy_t keyF5 = dummykv.key;
	value_t valF5 = dummykv.key;
	keyy_t keyG5 = dummykv.key;
	value_t valG5 = dummykv.key;
	keyy_t keyH5 = dummykv.key;
	value_t valH5 = dummykv.key;
	keyy_t keyI5 = dummykv.key;
	value_t valI5 = dummykv.key;
	keyy_t keyJ5 = dummykv.key;
	value_t valJ5 = dummykv.key;
	keyy_t keyK5 = dummykv.key;
	value_t valK5 = dummykv.key;
	keyy_t keyL5 = dummykv.key;
	value_t valL5 = dummykv.key;
	keyy_t keyM5 = dummykv.key;
	value_t valM5 = dummykv.key;
	keyy_t keyA6 = dummykv.key;
	value_t valA6 = dummykv.key;
	keyy_t keyB6 = dummykv.key;
	value_t valB6 = dummykv.key;
	keyy_t keyC6 = dummykv.key;
	value_t valC6 = dummykv.key;
	keyy_t keyD6 = dummykv.key;
	value_t valD6 = dummykv.key;
	keyy_t keyE6 = dummykv.key;
	value_t valE6 = dummykv.key;
	keyy_t keyF6 = dummykv.key;
	value_t valF6 = dummykv.key;
	keyy_t keyG6 = dummykv.key;
	value_t valG6 = dummykv.key;
	keyy_t keyH6 = dummykv.key;
	value_t valH6 = dummykv.key;
	keyy_t keyI6 = dummykv.key;
	value_t valI6 = dummykv.key;
	keyy_t keyJ6 = dummykv.key;
	value_t valJ6 = dummykv.key;
	keyy_t keyK6 = dummykv.key;
	value_t valK6 = dummykv.key;
	keyy_t keyL6 = dummykv.key;
	value_t valL6 = dummykv.key;
	keyy_t keyM6 = dummykv.key;
	value_t valM6 = dummykv.key;
	keyy_t keyA7 = dummykv.key;
	value_t valA7 = dummykv.key;
	keyy_t keyB7 = dummykv.key;
	value_t valB7 = dummykv.key;
	keyy_t keyC7 = dummykv.key;
	value_t valC7 = dummykv.key;
	keyy_t keyD7 = dummykv.key;
	value_t valD7 = dummykv.key;
	keyy_t keyE7 = dummykv.key;
	value_t valE7 = dummykv.key;
	keyy_t keyF7 = dummykv.key;
	value_t valF7 = dummykv.key;
	keyy_t keyG7 = dummykv.key;
	value_t valG7 = dummykv.key;
	keyy_t keyH7 = dummykv.key;
	value_t valH7 = dummykv.key;
	keyy_t keyI7 = dummykv.key;
	value_t valI7 = dummykv.key;
	keyy_t keyJ7 = dummykv.key;
	value_t valJ7 = dummykv.key;
	keyy_t keyK7 = dummykv.key;
	value_t valK7 = dummykv.key;
	keyy_t keyL7 = dummykv.key;
	value_t valL7 = dummykv.key;
	keyy_t keyM7 = dummykv.key;
	value_t valM7 = dummykv.key;
	
	MERGE4_LOOP1: for (buffer_type j=0; j<BLOCKRAM_SIZE; j++){
	#pragma HLS PIPELINE II=1
		keyvalue_t mykeyvalue00 = GETKV2(vbuffer0[begincol + 0][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue01 = GETKV2(vbuffer0[begincol + 1][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue02 = GETKV2(vbuffer0[begincol + 2][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue03 = GETKV2(vbuffer0[begincol + 3][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue04 = GETKV2(vbuffer0[begincol + 4][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue05 = GETKV2(vbuffer0[begincol + 5][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue06 = GETKV2(vbuffer0[begincol + 6][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue07 = GETKV2(vbuffer0[begincol + 7][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue10 = GETKV2(vbuffer1[begincol + 0][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue11 = GETKV2(vbuffer1[begincol + 1][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue12 = GETKV2(vbuffer1[begincol + 2][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue13 = GETKV2(vbuffer1[begincol + 3][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue14 = GETKV2(vbuffer1[begincol + 4][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue15 = GETKV2(vbuffer1[begincol + 5][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue16 = GETKV2(vbuffer1[begincol + 6][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue17 = GETKV2(vbuffer1[begincol + 7][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue20 = GETKV2(vbuffer2[begincol + 0][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue21 = GETKV2(vbuffer2[begincol + 1][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue22 = GETKV2(vbuffer2[begincol + 2][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue23 = GETKV2(vbuffer2[begincol + 3][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue24 = GETKV2(vbuffer2[begincol + 4][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue25 = GETKV2(vbuffer2[begincol + 5][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue26 = GETKV2(vbuffer2[begincol + 6][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue27 = GETKV2(vbuffer2[begincol + 7][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue30 = GETKV2(vbuffer3[begincol + 0][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue31 = GETKV2(vbuffer3[begincol + 1][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue32 = GETKV2(vbuffer3[begincol + 2][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue33 = GETKV2(vbuffer3[begincol + 3][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue34 = GETKV2(vbuffer3[begincol + 4][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue35 = GETKV2(vbuffer3[begincol + 5][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue36 = GETKV2(vbuffer3[begincol + 6][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue37 = GETKV2(vbuffer3[begincol + 7][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue40 = dummykv;
		keyvalue_t mykeyvalue41 = dummykv;
		keyvalue_t mykeyvalue42 = dummykv;
		keyvalue_t mykeyvalue43 = dummykv;
		keyvalue_t mykeyvalue44 = dummykv;
		keyvalue_t mykeyvalue45 = dummykv;
		keyvalue_t mykeyvalue46 = dummykv;
		keyvalue_t mykeyvalue47 = dummykv;
		keyvalue_t mykeyvalue50 = dummykv;
		keyvalue_t mykeyvalue51 = dummykv;
		keyvalue_t mykeyvalue52 = dummykv;
		keyvalue_t mykeyvalue53 = dummykv;
		keyvalue_t mykeyvalue54 = dummykv;
		keyvalue_t mykeyvalue55 = dummykv;
		keyvalue_t mykeyvalue56 = dummykv;
		keyvalue_t mykeyvalue57 = dummykv;
		keyvalue_t mykeyvalue60 = dummykv;
		keyvalue_t mykeyvalue61 = dummykv;
		keyvalue_t mykeyvalue62 = dummykv;
		keyvalue_t mykeyvalue63 = dummykv;
		keyvalue_t mykeyvalue64 = dummykv;
		keyvalue_t mykeyvalue65 = dummykv;
		keyvalue_t mykeyvalue66 = dummykv;
		keyvalue_t mykeyvalue67 = dummykv;
		keyvalue_t mykeyvalue70 = dummykv;
		keyvalue_t mykeyvalue71 = dummykv;
		keyvalue_t mykeyvalue72 = dummykv;
		keyvalue_t mykeyvalue73 = dummykv;
		keyvalue_t mykeyvalue74 = dummykv;
		keyvalue_t mykeyvalue75 = dummykv;
		keyvalue_t mykeyvalue76 = dummykv;
		keyvalue_t mykeyvalue77 = dummykv;
		keyvalue_t mykeyvalue80 = dummykv;
		keyvalue_t mykeyvalue81 = dummykv;
		keyvalue_t mykeyvalue82 = dummykv;
		keyvalue_t mykeyvalue83 = dummykv;
		keyvalue_t mykeyvalue84 = dummykv;
		keyvalue_t mykeyvalue85 = dummykv;
		keyvalue_t mykeyvalue86 = dummykv;
		keyvalue_t mykeyvalue87 = dummykv;
		keyvalue_t mykeyvalue90 = dummykv;
		keyvalue_t mykeyvalue91 = dummykv;
		keyvalue_t mykeyvalue92 = dummykv;
		keyvalue_t mykeyvalue93 = dummykv;
		keyvalue_t mykeyvalue94 = dummykv;
		keyvalue_t mykeyvalue95 = dummykv;
		keyvalue_t mykeyvalue96 = dummykv;
		keyvalue_t mykeyvalue97 = dummykv;
		keyvalue_t mykeyvalue100 = dummykv;
		keyvalue_t mykeyvalue101 = dummykv;
		keyvalue_t mykeyvalue102 = dummykv;
		keyvalue_t mykeyvalue103 = dummykv;
		keyvalue_t mykeyvalue104 = dummykv;
		keyvalue_t mykeyvalue105 = dummykv;
		keyvalue_t mykeyvalue106 = dummykv;
		keyvalue_t mykeyvalue107 = dummykv;
		keyvalue_t mykeyvalue110 = dummykv;
		keyvalue_t mykeyvalue111 = dummykv;
		keyvalue_t mykeyvalue112 = dummykv;
		keyvalue_t mykeyvalue113 = dummykv;
		keyvalue_t mykeyvalue114 = dummykv;
		keyvalue_t mykeyvalue115 = dummykv;
		keyvalue_t mykeyvalue116 = dummykv;
		keyvalue_t mykeyvalue117 = dummykv;
		keyvalue_t mykeyvalue120 = dummykv;
		keyvalue_t mykeyvalue121 = dummykv;
		keyvalue_t mykeyvalue122 = dummykv;
		keyvalue_t mykeyvalue123 = dummykv;
		keyvalue_t mykeyvalue124 = dummykv;
		keyvalue_t mykeyvalue125 = dummykv;
		keyvalue_t mykeyvalue126 = dummykv;
		keyvalue_t mykeyvalue127 = dummykv;
		keyvalue_t mykeyvalue130 = dummykv;
		keyvalue_t mykeyvalue131 = dummykv;
		keyvalue_t mykeyvalue132 = dummykv;
		keyvalue_t mykeyvalue133 = dummykv;
		keyvalue_t mykeyvalue134 = dummykv;
		keyvalue_t mykeyvalue135 = dummykv;
		keyvalue_t mykeyvalue136 = dummykv;
		keyvalue_t mykeyvalue137 = dummykv;
		keyvalue_t mykeyvalue140 = dummykv;
		keyvalue_t mykeyvalue141 = dummykv;
		keyvalue_t mykeyvalue142 = dummykv;
		keyvalue_t mykeyvalue143 = dummykv;
		keyvalue_t mykeyvalue144 = dummykv;
		keyvalue_t mykeyvalue145 = dummykv;
		keyvalue_t mykeyvalue146 = dummykv;
		keyvalue_t mykeyvalue147 = dummykv;
		
		//((n)/2)
		keyA0 = mergefunc(mykeyvalue00.key, mykeyvalue10.key, NAp);
		keyB0 = mergefunc(mykeyvalue20.key, mykeyvalue30.key, NAp);
		keyC0 = mergefunc(mykeyvalue40.key, mykeyvalue50.key, NAp);
		keyA1 = mergefunc(mykeyvalue01.key, mykeyvalue11.key, NAp);
		keyB1 = mergefunc(mykeyvalue21.key, mykeyvalue31.key, NAp);
		keyC1 = mergefunc(mykeyvalue41.key, mykeyvalue51.key, NAp);
		keyA2 = mergefunc(mykeyvalue02.key, mykeyvalue12.key, NAp);
		keyB2 = mergefunc(mykeyvalue22.key, mykeyvalue32.key, NAp);
		keyC2 = mergefunc(mykeyvalue42.key, mykeyvalue52.key, NAp);
		keyA3 = mergefunc(mykeyvalue03.key, mykeyvalue13.key, NAp);
		keyB3 = mergefunc(mykeyvalue23.key, mykeyvalue33.key, NAp);
		keyC3 = mergefunc(mykeyvalue43.key, mykeyvalue53.key, NAp);
		keyA4 = mergefunc(mykeyvalue04.key, mykeyvalue14.key, NAp);
		keyB4 = mergefunc(mykeyvalue24.key, mykeyvalue34.key, NAp);
		keyC4 = mergefunc(mykeyvalue44.key, mykeyvalue54.key, NAp);
		keyA5 = mergefunc(mykeyvalue05.key, mykeyvalue15.key, NAp);
		keyB5 = mergefunc(mykeyvalue25.key, mykeyvalue35.key, NAp);
		keyC5 = mergefunc(mykeyvalue45.key, mykeyvalue55.key, NAp);
		keyA6 = mergefunc(mykeyvalue06.key, mykeyvalue16.key, NAp);
		keyB6 = mergefunc(mykeyvalue26.key, mykeyvalue36.key, NAp);
		keyC6 = mergefunc(mykeyvalue46.key, mykeyvalue56.key, NAp);
		keyA7 = mergefunc(mykeyvalue07.key, mykeyvalue17.key, NAp);
		keyB7 = mergefunc(mykeyvalue27.key, mykeyvalue37.key, NAp);
		keyC7 = mergefunc(mykeyvalue47.key, mykeyvalue57.key, NAp);
		keyy_t keyPA0 = mergefunc(keyA0, keyB0, NAp);
		keyy_t keyPB0 = mergefunc(keyC0, keyD0, NAp);
		keyy_t keyPC0 = mergefunc(keyE0, keyF0, NAp);
		keyy_t keyRA0 = mergefunc(keyPA0, keyPB0, NAp);
		keyy_t keyRB0 = mergefunc(keyPC0, keyF0, NAp);
		keyy_t keyRZ0 = mergefunc(keyRA0, keyRB0, NAp);
		keyy_t keyPA1 = mergefunc(keyA1, keyB1, NAp);
		keyy_t keyPB1 = mergefunc(keyC1, keyD1, NAp);
		keyy_t keyPC1 = mergefunc(keyE1, keyF1, NAp);
		keyy_t keyRA1 = mergefunc(keyPA1, keyPB1, NAp);
		keyy_t keyRB1 = mergefunc(keyPC1, keyF1, NAp);
		keyy_t keyRZ1 = mergefunc(keyRA1, keyRB1, NAp);
		keyy_t keyPA2 = mergefunc(keyA2, keyB2, NAp);
		keyy_t keyPB2 = mergefunc(keyC2, keyD2, NAp);
		keyy_t keyPC2 = mergefunc(keyE2, keyF2, NAp);
		keyy_t keyRA2 = mergefunc(keyPA2, keyPB2, NAp);
		keyy_t keyRB2 = mergefunc(keyPC2, keyF2, NAp);
		keyy_t keyRZ2 = mergefunc(keyRA2, keyRB2, NAp);
		keyy_t keyPA3 = mergefunc(keyA3, keyB3, NAp);
		keyy_t keyPB3 = mergefunc(keyC3, keyD3, NAp);
		keyy_t keyPC3 = mergefunc(keyE3, keyF3, NAp);
		keyy_t keyRA3 = mergefunc(keyPA3, keyPB3, NAp);
		keyy_t keyRB3 = mergefunc(keyPC3, keyF3, NAp);
		keyy_t keyRZ3 = mergefunc(keyRA3, keyRB3, NAp);
		keyy_t keyPA4 = mergefunc(keyA4, keyB4, NAp);
		keyy_t keyPB4 = mergefunc(keyC4, keyD4, NAp);
		keyy_t keyPC4 = mergefunc(keyE4, keyF4, NAp);
		keyy_t keyRA4 = mergefunc(keyPA4, keyPB4, NAp);
		keyy_t keyRB4 = mergefunc(keyPC4, keyF4, NAp);
		keyy_t keyRZ4 = mergefunc(keyRA4, keyRB4, NAp);
		keyy_t keyPA5 = mergefunc(keyA5, keyB5, NAp);
		keyy_t keyPB5 = mergefunc(keyC5, keyD5, NAp);
		keyy_t keyPC5 = mergefunc(keyE5, keyF5, NAp);
		keyy_t keyRA5 = mergefunc(keyPA5, keyPB5, NAp);
		keyy_t keyRB5 = mergefunc(keyPC5, keyF5, NAp);
		keyy_t keyRZ5 = mergefunc(keyRA5, keyRB5, NAp);
		keyy_t keyPA6 = mergefunc(keyA6, keyB6, NAp);
		keyy_t keyPB6 = mergefunc(keyC6, keyD6, NAp);
		keyy_t keyPC6 = mergefunc(keyE6, keyF6, NAp);
		keyy_t keyRA6 = mergefunc(keyPA6, keyPB6, NAp);
		keyy_t keyRB6 = mergefunc(keyPC6, keyF6, NAp);
		keyy_t keyRZ6 = mergefunc(keyRA6, keyRB6, NAp);
		keyy_t keyPA7 = mergefunc(keyA7, keyB7, NAp);
		keyy_t keyPB7 = mergefunc(keyC7, keyD7, NAp);
		keyy_t keyPC7 = mergefunc(keyE7, keyF7, NAp);
		keyy_t keyRA7 = mergefunc(keyPA7, keyPB7, NAp);
		keyy_t keyRB7 = mergefunc(keyPC7, keyF7, NAp);
		keyy_t keyRZ7 = mergefunc(keyRA7, keyRB7, NAp);
		
		//((n)/2)
		valA0 = mergefunc(mykeyvalue00.value, mykeyvalue10.value, NAp);
		valB0 = mergefunc(mykeyvalue20.value, mykeyvalue30.value, NAp);
		valC0 = mergefunc(mykeyvalue40.value, mykeyvalue50.value, NAp);
		valA1 = mergefunc(mykeyvalue01.value, mykeyvalue11.value, NAp);
		valB1 = mergefunc(mykeyvalue21.value, mykeyvalue31.value, NAp);
		valC1 = mergefunc(mykeyvalue41.value, mykeyvalue51.value, NAp);
		valA2 = mergefunc(mykeyvalue02.value, mykeyvalue12.value, NAp);
		valB2 = mergefunc(mykeyvalue22.value, mykeyvalue32.value, NAp);
		valC2 = mergefunc(mykeyvalue42.value, mykeyvalue52.value, NAp);
		valA3 = mergefunc(mykeyvalue03.value, mykeyvalue13.value, NAp);
		valB3 = mergefunc(mykeyvalue23.value, mykeyvalue33.value, NAp);
		valC3 = mergefunc(mykeyvalue43.value, mykeyvalue53.value, NAp);
		valA4 = mergefunc(mykeyvalue04.value, mykeyvalue14.value, NAp);
		valB4 = mergefunc(mykeyvalue24.value, mykeyvalue34.value, NAp);
		valC4 = mergefunc(mykeyvalue44.value, mykeyvalue54.value, NAp);
		valA5 = mergefunc(mykeyvalue05.value, mykeyvalue15.value, NAp);
		valB5 = mergefunc(mykeyvalue25.value, mykeyvalue35.value, NAp);
		valC5 = mergefunc(mykeyvalue45.value, mykeyvalue55.value, NAp);
		valA6 = mergefunc(mykeyvalue06.value, mykeyvalue16.value, NAp);
		valB6 = mergefunc(mykeyvalue26.value, mykeyvalue36.value, NAp);
		valC6 = mergefunc(mykeyvalue46.value, mykeyvalue56.value, NAp);
		valA7 = mergefunc(mykeyvalue07.value, mykeyvalue17.value, NAp);
		valB7 = mergefunc(mykeyvalue27.value, mykeyvalue37.value, NAp);
		valC7 = mergefunc(mykeyvalue47.value, mykeyvalue57.value, NAp);
		value_t valPA0 = mergefunc(valA0, valB0, NAp);
		value_t valPB0 = mergefunc(valC0, valD0, NAp);
		value_t valPC0 = mergefunc(valE0, valF0, NAp);
		value_t valRA0 = mergefunc(valPA0, valPB0, NAp);
		value_t valRB0 = mergefunc(valPC0, valF0, NAp);
		value_t valRZ0 = mergefunc(valRA0, valRB0, NAp);
		value_t valPA1 = mergefunc(valA1, valB1, NAp);
		value_t valPB1 = mergefunc(valC1, valD1, NAp);
		value_t valPC1 = mergefunc(valE1, valF1, NAp);
		value_t valRA1 = mergefunc(valPA1, valPB1, NAp);
		value_t valRB1 = mergefunc(valPC1, valF1, NAp);
		value_t valRZ1 = mergefunc(valRA1, valRB1, NAp);
		value_t valPA2 = mergefunc(valA2, valB2, NAp);
		value_t valPB2 = mergefunc(valC2, valD2, NAp);
		value_t valPC2 = mergefunc(valE2, valF2, NAp);
		value_t valRA2 = mergefunc(valPA2, valPB2, NAp);
		value_t valRB2 = mergefunc(valPC2, valF2, NAp);
		value_t valRZ2 = mergefunc(valRA2, valRB2, NAp);
		value_t valPA3 = mergefunc(valA3, valB3, NAp);
		value_t valPB3 = mergefunc(valC3, valD3, NAp);
		value_t valPC3 = mergefunc(valE3, valF3, NAp);
		value_t valRA3 = mergefunc(valPA3, valPB3, NAp);
		value_t valRB3 = mergefunc(valPC3, valF3, NAp);
		value_t valRZ3 = mergefunc(valRA3, valRB3, NAp);
		value_t valPA4 = mergefunc(valA4, valB4, NAp);
		value_t valPB4 = mergefunc(valC4, valD4, NAp);
		value_t valPC4 = mergefunc(valE4, valF4, NAp);
		value_t valRA4 = mergefunc(valPA4, valPB4, NAp);
		value_t valRB4 = mergefunc(valPC4, valF4, NAp);
		value_t valRZ4 = mergefunc(valRA4, valRB4, NAp);
		value_t valPA5 = mergefunc(valA5, valB5, NAp);
		value_t valPB5 = mergefunc(valC5, valD5, NAp);
		value_t valPC5 = mergefunc(valE5, valF5, NAp);
		value_t valRA5 = mergefunc(valPA5, valPB5, NAp);
		value_t valRB5 = mergefunc(valPC5, valF5, NAp);
		value_t valRZ5 = mergefunc(valRA5, valRB5, NAp);
		value_t valPA6 = mergefunc(valA6, valB6, NAp);
		value_t valPB6 = mergefunc(valC6, valD6, NAp);
		value_t valPC6 = mergefunc(valE6, valF6, NAp);
		value_t valRA6 = mergefunc(valPA6, valPB6, NAp);
		value_t valRB6 = mergefunc(valPC6, valF6, NAp);
		value_t valRZ6 = mergefunc(valRA6, valRB6, NAp);
		value_t valPA7 = mergefunc(valA7, valB7, NAp);
		value_t valPB7 = mergefunc(valC7, valD7, NAp);
		value_t valPC7 = mergefunc(valE7, valF7, NAp);
		value_t valRA7 = mergefunc(valPA7, valPB7, NAp);
		value_t valRB7 = mergefunc(valPC7, valF7, NAp);
		value_t valRZ7 = mergefunc(valRA7, valRB7, NAp);
		
		#ifdef _WIDEWORD
		vdram[dramoffset_kvs + j].range(31, 0) = keyRZ0;
		vdram[dramoffset_kvs + j].range(63, 32) = valRZ0;
		vdram[dramoffset_kvs + j].range(95, 64) = keyRZ1;
		vdram[dramoffset_kvs + j].range(127, 96) = valRZ1;
		vdram[dramoffset_kvs + j].range(159, 128) = keyRZ2;
		vdram[dramoffset_kvs + j].range(191, 160) = valRZ2;
		vdram[dramoffset_kvs + j].range(223, 192) = keyRZ3;
		vdram[dramoffset_kvs + j].range(255, 224) = valRZ3;
		vdram[dramoffset_kvs + j].range(287, 256) = keyRZ4;
		vdram[dramoffset_kvs + j].range(319, 288) = valRZ4;
		vdram[dramoffset_kvs + j].range(351, 320) = keyRZ5;
		vdram[dramoffset_kvs + j].range(383, 352) = valRZ5;
		vdram[dramoffset_kvs + j].range(415, 384) = keyRZ6;
		vdram[dramoffset_kvs + j].range(447, 416) = valRZ6;
		vdram[dramoffset_kvs + j].range(479, 448) = keyRZ7;
		vdram[dramoffset_kvs + j].range(511, 480) = valRZ7;
		#else
		vdram[dramoffset_kvs + j].data[0].key = keyRZ0;
		vdram[dramoffset_kvs + j].data[0].value = valRZ0;
		vdram[dramoffset_kvs + j].data[1].key = keyRZ1;
		vdram[dramoffset_kvs + j].data[1].value = valRZ1;
		vdram[dramoffset_kvs + j].data[2].key = keyRZ2;
		vdram[dramoffset_kvs + j].data[2].value = valRZ2;
		vdram[dramoffset_kvs + j].data[3].key = keyRZ3;
		vdram[dramoffset_kvs + j].data[3].value = valRZ3;
		vdram[dramoffset_kvs + j].data[4].key = keyRZ4;
		vdram[dramoffset_kvs + j].data[4].value = valRZ4;
		vdram[dramoffset_kvs + j].data[5].key = keyRZ5;
		vdram[dramoffset_kvs + j].data[5].value = valRZ5;
		vdram[dramoffset_kvs + j].data[6].key = keyRZ6;
		vdram[dramoffset_kvs + j].data[6].value = valRZ6;
		vdram[dramoffset_kvs + j].data[7].key = keyRZ7;
		vdram[dramoffset_kvs + j].data[7].value = valRZ7;
		#endif
	}
	return;
}
void
	#if defined(SW)
	actsproc::
	#endif
merge5andsavevdata(bool_type enable, uint512_dt * vdram, keyvalue_vbuffer_t vbuffer0[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t vbuffer1[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t vbuffer2[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t vbuffer3[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t vbuffer4[VDATA_PACKINGSIZE][BLOCKRAM_SIZE], unsigned int begincol, batch_type bufferoffset_kvs, unsigned int dramoffset_kvs){
	if(enable == OFF){ return; }
	keyvalue_t dummykv;
	dummykv.key = 0xFFFFFFFF; dummykv.value = 0xFFFFFFFF;
	
	keyy_t keyA0 = dummykv.key;
	value_t valA0 = dummykv.key;
	keyy_t keyB0 = dummykv.key;
	value_t valB0 = dummykv.key;
	keyy_t keyC0 = dummykv.key;
	value_t valC0 = dummykv.key;
	keyy_t keyD0 = dummykv.key;
	value_t valD0 = dummykv.key;
	keyy_t keyE0 = dummykv.key;
	value_t valE0 = dummykv.key;
	keyy_t keyF0 = dummykv.key;
	value_t valF0 = dummykv.key;
	keyy_t keyG0 = dummykv.key;
	value_t valG0 = dummykv.key;
	keyy_t keyH0 = dummykv.key;
	value_t valH0 = dummykv.key;
	keyy_t keyI0 = dummykv.key;
	value_t valI0 = dummykv.key;
	keyy_t keyJ0 = dummykv.key;
	value_t valJ0 = dummykv.key;
	keyy_t keyK0 = dummykv.key;
	value_t valK0 = dummykv.key;
	keyy_t keyL0 = dummykv.key;
	value_t valL0 = dummykv.key;
	keyy_t keyM0 = dummykv.key;
	value_t valM0 = dummykv.key;
	keyy_t keyA1 = dummykv.key;
	value_t valA1 = dummykv.key;
	keyy_t keyB1 = dummykv.key;
	value_t valB1 = dummykv.key;
	keyy_t keyC1 = dummykv.key;
	value_t valC1 = dummykv.key;
	keyy_t keyD1 = dummykv.key;
	value_t valD1 = dummykv.key;
	keyy_t keyE1 = dummykv.key;
	value_t valE1 = dummykv.key;
	keyy_t keyF1 = dummykv.key;
	value_t valF1 = dummykv.key;
	keyy_t keyG1 = dummykv.key;
	value_t valG1 = dummykv.key;
	keyy_t keyH1 = dummykv.key;
	value_t valH1 = dummykv.key;
	keyy_t keyI1 = dummykv.key;
	value_t valI1 = dummykv.key;
	keyy_t keyJ1 = dummykv.key;
	value_t valJ1 = dummykv.key;
	keyy_t keyK1 = dummykv.key;
	value_t valK1 = dummykv.key;
	keyy_t keyL1 = dummykv.key;
	value_t valL1 = dummykv.key;
	keyy_t keyM1 = dummykv.key;
	value_t valM1 = dummykv.key;
	keyy_t keyA2 = dummykv.key;
	value_t valA2 = dummykv.key;
	keyy_t keyB2 = dummykv.key;
	value_t valB2 = dummykv.key;
	keyy_t keyC2 = dummykv.key;
	value_t valC2 = dummykv.key;
	keyy_t keyD2 = dummykv.key;
	value_t valD2 = dummykv.key;
	keyy_t keyE2 = dummykv.key;
	value_t valE2 = dummykv.key;
	keyy_t keyF2 = dummykv.key;
	value_t valF2 = dummykv.key;
	keyy_t keyG2 = dummykv.key;
	value_t valG2 = dummykv.key;
	keyy_t keyH2 = dummykv.key;
	value_t valH2 = dummykv.key;
	keyy_t keyI2 = dummykv.key;
	value_t valI2 = dummykv.key;
	keyy_t keyJ2 = dummykv.key;
	value_t valJ2 = dummykv.key;
	keyy_t keyK2 = dummykv.key;
	value_t valK2 = dummykv.key;
	keyy_t keyL2 = dummykv.key;
	value_t valL2 = dummykv.key;
	keyy_t keyM2 = dummykv.key;
	value_t valM2 = dummykv.key;
	keyy_t keyA3 = dummykv.key;
	value_t valA3 = dummykv.key;
	keyy_t keyB3 = dummykv.key;
	value_t valB3 = dummykv.key;
	keyy_t keyC3 = dummykv.key;
	value_t valC3 = dummykv.key;
	keyy_t keyD3 = dummykv.key;
	value_t valD3 = dummykv.key;
	keyy_t keyE3 = dummykv.key;
	value_t valE3 = dummykv.key;
	keyy_t keyF3 = dummykv.key;
	value_t valF3 = dummykv.key;
	keyy_t keyG3 = dummykv.key;
	value_t valG3 = dummykv.key;
	keyy_t keyH3 = dummykv.key;
	value_t valH3 = dummykv.key;
	keyy_t keyI3 = dummykv.key;
	value_t valI3 = dummykv.key;
	keyy_t keyJ3 = dummykv.key;
	value_t valJ3 = dummykv.key;
	keyy_t keyK3 = dummykv.key;
	value_t valK3 = dummykv.key;
	keyy_t keyL3 = dummykv.key;
	value_t valL3 = dummykv.key;
	keyy_t keyM3 = dummykv.key;
	value_t valM3 = dummykv.key;
	keyy_t keyA4 = dummykv.key;
	value_t valA4 = dummykv.key;
	keyy_t keyB4 = dummykv.key;
	value_t valB4 = dummykv.key;
	keyy_t keyC4 = dummykv.key;
	value_t valC4 = dummykv.key;
	keyy_t keyD4 = dummykv.key;
	value_t valD4 = dummykv.key;
	keyy_t keyE4 = dummykv.key;
	value_t valE4 = dummykv.key;
	keyy_t keyF4 = dummykv.key;
	value_t valF4 = dummykv.key;
	keyy_t keyG4 = dummykv.key;
	value_t valG4 = dummykv.key;
	keyy_t keyH4 = dummykv.key;
	value_t valH4 = dummykv.key;
	keyy_t keyI4 = dummykv.key;
	value_t valI4 = dummykv.key;
	keyy_t keyJ4 = dummykv.key;
	value_t valJ4 = dummykv.key;
	keyy_t keyK4 = dummykv.key;
	value_t valK4 = dummykv.key;
	keyy_t keyL4 = dummykv.key;
	value_t valL4 = dummykv.key;
	keyy_t keyM4 = dummykv.key;
	value_t valM4 = dummykv.key;
	keyy_t keyA5 = dummykv.key;
	value_t valA5 = dummykv.key;
	keyy_t keyB5 = dummykv.key;
	value_t valB5 = dummykv.key;
	keyy_t keyC5 = dummykv.key;
	value_t valC5 = dummykv.key;
	keyy_t keyD5 = dummykv.key;
	value_t valD5 = dummykv.key;
	keyy_t keyE5 = dummykv.key;
	value_t valE5 = dummykv.key;
	keyy_t keyF5 = dummykv.key;
	value_t valF5 = dummykv.key;
	keyy_t keyG5 = dummykv.key;
	value_t valG5 = dummykv.key;
	keyy_t keyH5 = dummykv.key;
	value_t valH5 = dummykv.key;
	keyy_t keyI5 = dummykv.key;
	value_t valI5 = dummykv.key;
	keyy_t keyJ5 = dummykv.key;
	value_t valJ5 = dummykv.key;
	keyy_t keyK5 = dummykv.key;
	value_t valK5 = dummykv.key;
	keyy_t keyL5 = dummykv.key;
	value_t valL5 = dummykv.key;
	keyy_t keyM5 = dummykv.key;
	value_t valM5 = dummykv.key;
	keyy_t keyA6 = dummykv.key;
	value_t valA6 = dummykv.key;
	keyy_t keyB6 = dummykv.key;
	value_t valB6 = dummykv.key;
	keyy_t keyC6 = dummykv.key;
	value_t valC6 = dummykv.key;
	keyy_t keyD6 = dummykv.key;
	value_t valD6 = dummykv.key;
	keyy_t keyE6 = dummykv.key;
	value_t valE6 = dummykv.key;
	keyy_t keyF6 = dummykv.key;
	value_t valF6 = dummykv.key;
	keyy_t keyG6 = dummykv.key;
	value_t valG6 = dummykv.key;
	keyy_t keyH6 = dummykv.key;
	value_t valH6 = dummykv.key;
	keyy_t keyI6 = dummykv.key;
	value_t valI6 = dummykv.key;
	keyy_t keyJ6 = dummykv.key;
	value_t valJ6 = dummykv.key;
	keyy_t keyK6 = dummykv.key;
	value_t valK6 = dummykv.key;
	keyy_t keyL6 = dummykv.key;
	value_t valL6 = dummykv.key;
	keyy_t keyM6 = dummykv.key;
	value_t valM6 = dummykv.key;
	keyy_t keyA7 = dummykv.key;
	value_t valA7 = dummykv.key;
	keyy_t keyB7 = dummykv.key;
	value_t valB7 = dummykv.key;
	keyy_t keyC7 = dummykv.key;
	value_t valC7 = dummykv.key;
	keyy_t keyD7 = dummykv.key;
	value_t valD7 = dummykv.key;
	keyy_t keyE7 = dummykv.key;
	value_t valE7 = dummykv.key;
	keyy_t keyF7 = dummykv.key;
	value_t valF7 = dummykv.key;
	keyy_t keyG7 = dummykv.key;
	value_t valG7 = dummykv.key;
	keyy_t keyH7 = dummykv.key;
	value_t valH7 = dummykv.key;
	keyy_t keyI7 = dummykv.key;
	value_t valI7 = dummykv.key;
	keyy_t keyJ7 = dummykv.key;
	value_t valJ7 = dummykv.key;
	keyy_t keyK7 = dummykv.key;
	value_t valK7 = dummykv.key;
	keyy_t keyL7 = dummykv.key;
	value_t valL7 = dummykv.key;
	keyy_t keyM7 = dummykv.key;
	value_t valM7 = dummykv.key;
	
	MERGE5_LOOP1: for (buffer_type j=0; j<BLOCKRAM_SIZE; j++){
	#pragma HLS PIPELINE II=1
		keyvalue_t mykeyvalue00 = GETKV2(vbuffer0[begincol + 0][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue01 = GETKV2(vbuffer0[begincol + 1][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue02 = GETKV2(vbuffer0[begincol + 2][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue03 = GETKV2(vbuffer0[begincol + 3][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue04 = GETKV2(vbuffer0[begincol + 4][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue05 = GETKV2(vbuffer0[begincol + 5][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue06 = GETKV2(vbuffer0[begincol + 6][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue07 = GETKV2(vbuffer0[begincol + 7][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue10 = GETKV2(vbuffer1[begincol + 0][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue11 = GETKV2(vbuffer1[begincol + 1][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue12 = GETKV2(vbuffer1[begincol + 2][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue13 = GETKV2(vbuffer1[begincol + 3][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue14 = GETKV2(vbuffer1[begincol + 4][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue15 = GETKV2(vbuffer1[begincol + 5][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue16 = GETKV2(vbuffer1[begincol + 6][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue17 = GETKV2(vbuffer1[begincol + 7][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue20 = GETKV2(vbuffer2[begincol + 0][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue21 = GETKV2(vbuffer2[begincol + 1][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue22 = GETKV2(vbuffer2[begincol + 2][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue23 = GETKV2(vbuffer2[begincol + 3][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue24 = GETKV2(vbuffer2[begincol + 4][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue25 = GETKV2(vbuffer2[begincol + 5][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue26 = GETKV2(vbuffer2[begincol + 6][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue27 = GETKV2(vbuffer2[begincol + 7][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue30 = GETKV2(vbuffer3[begincol + 0][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue31 = GETKV2(vbuffer3[begincol + 1][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue32 = GETKV2(vbuffer3[begincol + 2][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue33 = GETKV2(vbuffer3[begincol + 3][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue34 = GETKV2(vbuffer3[begincol + 4][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue35 = GETKV2(vbuffer3[begincol + 5][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue36 = GETKV2(vbuffer3[begincol + 6][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue37 = GETKV2(vbuffer3[begincol + 7][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue40 = GETKV2(vbuffer4[begincol + 0][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue41 = GETKV2(vbuffer4[begincol + 1][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue42 = GETKV2(vbuffer4[begincol + 2][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue43 = GETKV2(vbuffer4[begincol + 3][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue44 = GETKV2(vbuffer4[begincol + 4][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue45 = GETKV2(vbuffer4[begincol + 5][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue46 = GETKV2(vbuffer4[begincol + 6][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue47 = GETKV2(vbuffer4[begincol + 7][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue50 = dummykv;
		keyvalue_t mykeyvalue51 = dummykv;
		keyvalue_t mykeyvalue52 = dummykv;
		keyvalue_t mykeyvalue53 = dummykv;
		keyvalue_t mykeyvalue54 = dummykv;
		keyvalue_t mykeyvalue55 = dummykv;
		keyvalue_t mykeyvalue56 = dummykv;
		keyvalue_t mykeyvalue57 = dummykv;
		keyvalue_t mykeyvalue60 = dummykv;
		keyvalue_t mykeyvalue61 = dummykv;
		keyvalue_t mykeyvalue62 = dummykv;
		keyvalue_t mykeyvalue63 = dummykv;
		keyvalue_t mykeyvalue64 = dummykv;
		keyvalue_t mykeyvalue65 = dummykv;
		keyvalue_t mykeyvalue66 = dummykv;
		keyvalue_t mykeyvalue67 = dummykv;
		keyvalue_t mykeyvalue70 = dummykv;
		keyvalue_t mykeyvalue71 = dummykv;
		keyvalue_t mykeyvalue72 = dummykv;
		keyvalue_t mykeyvalue73 = dummykv;
		keyvalue_t mykeyvalue74 = dummykv;
		keyvalue_t mykeyvalue75 = dummykv;
		keyvalue_t mykeyvalue76 = dummykv;
		keyvalue_t mykeyvalue77 = dummykv;
		keyvalue_t mykeyvalue80 = dummykv;
		keyvalue_t mykeyvalue81 = dummykv;
		keyvalue_t mykeyvalue82 = dummykv;
		keyvalue_t mykeyvalue83 = dummykv;
		keyvalue_t mykeyvalue84 = dummykv;
		keyvalue_t mykeyvalue85 = dummykv;
		keyvalue_t mykeyvalue86 = dummykv;
		keyvalue_t mykeyvalue87 = dummykv;
		keyvalue_t mykeyvalue90 = dummykv;
		keyvalue_t mykeyvalue91 = dummykv;
		keyvalue_t mykeyvalue92 = dummykv;
		keyvalue_t mykeyvalue93 = dummykv;
		keyvalue_t mykeyvalue94 = dummykv;
		keyvalue_t mykeyvalue95 = dummykv;
		keyvalue_t mykeyvalue96 = dummykv;
		keyvalue_t mykeyvalue97 = dummykv;
		keyvalue_t mykeyvalue100 = dummykv;
		keyvalue_t mykeyvalue101 = dummykv;
		keyvalue_t mykeyvalue102 = dummykv;
		keyvalue_t mykeyvalue103 = dummykv;
		keyvalue_t mykeyvalue104 = dummykv;
		keyvalue_t mykeyvalue105 = dummykv;
		keyvalue_t mykeyvalue106 = dummykv;
		keyvalue_t mykeyvalue107 = dummykv;
		keyvalue_t mykeyvalue110 = dummykv;
		keyvalue_t mykeyvalue111 = dummykv;
		keyvalue_t mykeyvalue112 = dummykv;
		keyvalue_t mykeyvalue113 = dummykv;
		keyvalue_t mykeyvalue114 = dummykv;
		keyvalue_t mykeyvalue115 = dummykv;
		keyvalue_t mykeyvalue116 = dummykv;
		keyvalue_t mykeyvalue117 = dummykv;
		keyvalue_t mykeyvalue120 = dummykv;
		keyvalue_t mykeyvalue121 = dummykv;
		keyvalue_t mykeyvalue122 = dummykv;
		keyvalue_t mykeyvalue123 = dummykv;
		keyvalue_t mykeyvalue124 = dummykv;
		keyvalue_t mykeyvalue125 = dummykv;
		keyvalue_t mykeyvalue126 = dummykv;
		keyvalue_t mykeyvalue127 = dummykv;
		keyvalue_t mykeyvalue130 = dummykv;
		keyvalue_t mykeyvalue131 = dummykv;
		keyvalue_t mykeyvalue132 = dummykv;
		keyvalue_t mykeyvalue133 = dummykv;
		keyvalue_t mykeyvalue134 = dummykv;
		keyvalue_t mykeyvalue135 = dummykv;
		keyvalue_t mykeyvalue136 = dummykv;
		keyvalue_t mykeyvalue137 = dummykv;
		keyvalue_t mykeyvalue140 = dummykv;
		keyvalue_t mykeyvalue141 = dummykv;
		keyvalue_t mykeyvalue142 = dummykv;
		keyvalue_t mykeyvalue143 = dummykv;
		keyvalue_t mykeyvalue144 = dummykv;
		keyvalue_t mykeyvalue145 = dummykv;
		keyvalue_t mykeyvalue146 = dummykv;
		keyvalue_t mykeyvalue147 = dummykv;
		
		//((n)/2)
		keyA0 = mergefunc(mykeyvalue00.key, mykeyvalue10.key, NAp);
		keyB0 = mergefunc(mykeyvalue20.key, mykeyvalue30.key, NAp);
		keyC0 = mergefunc(mykeyvalue40.key, mykeyvalue50.key, NAp);
		keyA1 = mergefunc(mykeyvalue01.key, mykeyvalue11.key, NAp);
		keyB1 = mergefunc(mykeyvalue21.key, mykeyvalue31.key, NAp);
		keyC1 = mergefunc(mykeyvalue41.key, mykeyvalue51.key, NAp);
		keyA2 = mergefunc(mykeyvalue02.key, mykeyvalue12.key, NAp);
		keyB2 = mergefunc(mykeyvalue22.key, mykeyvalue32.key, NAp);
		keyC2 = mergefunc(mykeyvalue42.key, mykeyvalue52.key, NAp);
		keyA3 = mergefunc(mykeyvalue03.key, mykeyvalue13.key, NAp);
		keyB3 = mergefunc(mykeyvalue23.key, mykeyvalue33.key, NAp);
		keyC3 = mergefunc(mykeyvalue43.key, mykeyvalue53.key, NAp);
		keyA4 = mergefunc(mykeyvalue04.key, mykeyvalue14.key, NAp);
		keyB4 = mergefunc(mykeyvalue24.key, mykeyvalue34.key, NAp);
		keyC4 = mergefunc(mykeyvalue44.key, mykeyvalue54.key, NAp);
		keyA5 = mergefunc(mykeyvalue05.key, mykeyvalue15.key, NAp);
		keyB5 = mergefunc(mykeyvalue25.key, mykeyvalue35.key, NAp);
		keyC5 = mergefunc(mykeyvalue45.key, mykeyvalue55.key, NAp);
		keyA6 = mergefunc(mykeyvalue06.key, mykeyvalue16.key, NAp);
		keyB6 = mergefunc(mykeyvalue26.key, mykeyvalue36.key, NAp);
		keyC6 = mergefunc(mykeyvalue46.key, mykeyvalue56.key, NAp);
		keyA7 = mergefunc(mykeyvalue07.key, mykeyvalue17.key, NAp);
		keyB7 = mergefunc(mykeyvalue27.key, mykeyvalue37.key, NAp);
		keyC7 = mergefunc(mykeyvalue47.key, mykeyvalue57.key, NAp);
		keyy_t keyPA0 = mergefunc(keyA0, keyB0, NAp);
		keyy_t keyPB0 = mergefunc(keyC0, keyD0, NAp);
		keyy_t keyPC0 = mergefunc(keyE0, keyF0, NAp);
		keyy_t keyRA0 = mergefunc(keyPA0, keyPB0, NAp);
		keyy_t keyRB0 = mergefunc(keyPC0, keyF0, NAp);
		keyy_t keyRZ0 = mergefunc(keyRA0, keyRB0, NAp);
		keyy_t keyPA1 = mergefunc(keyA1, keyB1, NAp);
		keyy_t keyPB1 = mergefunc(keyC1, keyD1, NAp);
		keyy_t keyPC1 = mergefunc(keyE1, keyF1, NAp);
		keyy_t keyRA1 = mergefunc(keyPA1, keyPB1, NAp);
		keyy_t keyRB1 = mergefunc(keyPC1, keyF1, NAp);
		keyy_t keyRZ1 = mergefunc(keyRA1, keyRB1, NAp);
		keyy_t keyPA2 = mergefunc(keyA2, keyB2, NAp);
		keyy_t keyPB2 = mergefunc(keyC2, keyD2, NAp);
		keyy_t keyPC2 = mergefunc(keyE2, keyF2, NAp);
		keyy_t keyRA2 = mergefunc(keyPA2, keyPB2, NAp);
		keyy_t keyRB2 = mergefunc(keyPC2, keyF2, NAp);
		keyy_t keyRZ2 = mergefunc(keyRA2, keyRB2, NAp);
		keyy_t keyPA3 = mergefunc(keyA3, keyB3, NAp);
		keyy_t keyPB3 = mergefunc(keyC3, keyD3, NAp);
		keyy_t keyPC3 = mergefunc(keyE3, keyF3, NAp);
		keyy_t keyRA3 = mergefunc(keyPA3, keyPB3, NAp);
		keyy_t keyRB3 = mergefunc(keyPC3, keyF3, NAp);
		keyy_t keyRZ3 = mergefunc(keyRA3, keyRB3, NAp);
		keyy_t keyPA4 = mergefunc(keyA4, keyB4, NAp);
		keyy_t keyPB4 = mergefunc(keyC4, keyD4, NAp);
		keyy_t keyPC4 = mergefunc(keyE4, keyF4, NAp);
		keyy_t keyRA4 = mergefunc(keyPA4, keyPB4, NAp);
		keyy_t keyRB4 = mergefunc(keyPC4, keyF4, NAp);
		keyy_t keyRZ4 = mergefunc(keyRA4, keyRB4, NAp);
		keyy_t keyPA5 = mergefunc(keyA5, keyB5, NAp);
		keyy_t keyPB5 = mergefunc(keyC5, keyD5, NAp);
		keyy_t keyPC5 = mergefunc(keyE5, keyF5, NAp);
		keyy_t keyRA5 = mergefunc(keyPA5, keyPB5, NAp);
		keyy_t keyRB5 = mergefunc(keyPC5, keyF5, NAp);
		keyy_t keyRZ5 = mergefunc(keyRA5, keyRB5, NAp);
		keyy_t keyPA6 = mergefunc(keyA6, keyB6, NAp);
		keyy_t keyPB6 = mergefunc(keyC6, keyD6, NAp);
		keyy_t keyPC6 = mergefunc(keyE6, keyF6, NAp);
		keyy_t keyRA6 = mergefunc(keyPA6, keyPB6, NAp);
		keyy_t keyRB6 = mergefunc(keyPC6, keyF6, NAp);
		keyy_t keyRZ6 = mergefunc(keyRA6, keyRB6, NAp);
		keyy_t keyPA7 = mergefunc(keyA7, keyB7, NAp);
		keyy_t keyPB7 = mergefunc(keyC7, keyD7, NAp);
		keyy_t keyPC7 = mergefunc(keyE7, keyF7, NAp);
		keyy_t keyRA7 = mergefunc(keyPA7, keyPB7, NAp);
		keyy_t keyRB7 = mergefunc(keyPC7, keyF7, NAp);
		keyy_t keyRZ7 = mergefunc(keyRA7, keyRB7, NAp);
		
		//((n)/2)
		valA0 = mergefunc(mykeyvalue00.value, mykeyvalue10.value, NAp);
		valB0 = mergefunc(mykeyvalue20.value, mykeyvalue30.value, NAp);
		valC0 = mergefunc(mykeyvalue40.value, mykeyvalue50.value, NAp);
		valA1 = mergefunc(mykeyvalue01.value, mykeyvalue11.value, NAp);
		valB1 = mergefunc(mykeyvalue21.value, mykeyvalue31.value, NAp);
		valC1 = mergefunc(mykeyvalue41.value, mykeyvalue51.value, NAp);
		valA2 = mergefunc(mykeyvalue02.value, mykeyvalue12.value, NAp);
		valB2 = mergefunc(mykeyvalue22.value, mykeyvalue32.value, NAp);
		valC2 = mergefunc(mykeyvalue42.value, mykeyvalue52.value, NAp);
		valA3 = mergefunc(mykeyvalue03.value, mykeyvalue13.value, NAp);
		valB3 = mergefunc(mykeyvalue23.value, mykeyvalue33.value, NAp);
		valC3 = mergefunc(mykeyvalue43.value, mykeyvalue53.value, NAp);
		valA4 = mergefunc(mykeyvalue04.value, mykeyvalue14.value, NAp);
		valB4 = mergefunc(mykeyvalue24.value, mykeyvalue34.value, NAp);
		valC4 = mergefunc(mykeyvalue44.value, mykeyvalue54.value, NAp);
		valA5 = mergefunc(mykeyvalue05.value, mykeyvalue15.value, NAp);
		valB5 = mergefunc(mykeyvalue25.value, mykeyvalue35.value, NAp);
		valC5 = mergefunc(mykeyvalue45.value, mykeyvalue55.value, NAp);
		valA6 = mergefunc(mykeyvalue06.value, mykeyvalue16.value, NAp);
		valB6 = mergefunc(mykeyvalue26.value, mykeyvalue36.value, NAp);
		valC6 = mergefunc(mykeyvalue46.value, mykeyvalue56.value, NAp);
		valA7 = mergefunc(mykeyvalue07.value, mykeyvalue17.value, NAp);
		valB7 = mergefunc(mykeyvalue27.value, mykeyvalue37.value, NAp);
		valC7 = mergefunc(mykeyvalue47.value, mykeyvalue57.value, NAp);
		value_t valPA0 = mergefunc(valA0, valB0, NAp);
		value_t valPB0 = mergefunc(valC0, valD0, NAp);
		value_t valPC0 = mergefunc(valE0, valF0, NAp);
		value_t valRA0 = mergefunc(valPA0, valPB0, NAp);
		value_t valRB0 = mergefunc(valPC0, valF0, NAp);
		value_t valRZ0 = mergefunc(valRA0, valRB0, NAp);
		value_t valPA1 = mergefunc(valA1, valB1, NAp);
		value_t valPB1 = mergefunc(valC1, valD1, NAp);
		value_t valPC1 = mergefunc(valE1, valF1, NAp);
		value_t valRA1 = mergefunc(valPA1, valPB1, NAp);
		value_t valRB1 = mergefunc(valPC1, valF1, NAp);
		value_t valRZ1 = mergefunc(valRA1, valRB1, NAp);
		value_t valPA2 = mergefunc(valA2, valB2, NAp);
		value_t valPB2 = mergefunc(valC2, valD2, NAp);
		value_t valPC2 = mergefunc(valE2, valF2, NAp);
		value_t valRA2 = mergefunc(valPA2, valPB2, NAp);
		value_t valRB2 = mergefunc(valPC2, valF2, NAp);
		value_t valRZ2 = mergefunc(valRA2, valRB2, NAp);
		value_t valPA3 = mergefunc(valA3, valB3, NAp);
		value_t valPB3 = mergefunc(valC3, valD3, NAp);
		value_t valPC3 = mergefunc(valE3, valF3, NAp);
		value_t valRA3 = mergefunc(valPA3, valPB3, NAp);
		value_t valRB3 = mergefunc(valPC3, valF3, NAp);
		value_t valRZ3 = mergefunc(valRA3, valRB3, NAp);
		value_t valPA4 = mergefunc(valA4, valB4, NAp);
		value_t valPB4 = mergefunc(valC4, valD4, NAp);
		value_t valPC4 = mergefunc(valE4, valF4, NAp);
		value_t valRA4 = mergefunc(valPA4, valPB4, NAp);
		value_t valRB4 = mergefunc(valPC4, valF4, NAp);
		value_t valRZ4 = mergefunc(valRA4, valRB4, NAp);
		value_t valPA5 = mergefunc(valA5, valB5, NAp);
		value_t valPB5 = mergefunc(valC5, valD5, NAp);
		value_t valPC5 = mergefunc(valE5, valF5, NAp);
		value_t valRA5 = mergefunc(valPA5, valPB5, NAp);
		value_t valRB5 = mergefunc(valPC5, valF5, NAp);
		value_t valRZ5 = mergefunc(valRA5, valRB5, NAp);
		value_t valPA6 = mergefunc(valA6, valB6, NAp);
		value_t valPB6 = mergefunc(valC6, valD6, NAp);
		value_t valPC6 = mergefunc(valE6, valF6, NAp);
		value_t valRA6 = mergefunc(valPA6, valPB6, NAp);
		value_t valRB6 = mergefunc(valPC6, valF6, NAp);
		value_t valRZ6 = mergefunc(valRA6, valRB6, NAp);
		value_t valPA7 = mergefunc(valA7, valB7, NAp);
		value_t valPB7 = mergefunc(valC7, valD7, NAp);
		value_t valPC7 = mergefunc(valE7, valF7, NAp);
		value_t valRA7 = mergefunc(valPA7, valPB7, NAp);
		value_t valRB7 = mergefunc(valPC7, valF7, NAp);
		value_t valRZ7 = mergefunc(valRA7, valRB7, NAp);
		
		#ifdef _WIDEWORD
		vdram[dramoffset_kvs + j].range(31, 0) = keyRZ0;
		vdram[dramoffset_kvs + j].range(63, 32) = valRZ0;
		vdram[dramoffset_kvs + j].range(95, 64) = keyRZ1;
		vdram[dramoffset_kvs + j].range(127, 96) = valRZ1;
		vdram[dramoffset_kvs + j].range(159, 128) = keyRZ2;
		vdram[dramoffset_kvs + j].range(191, 160) = valRZ2;
		vdram[dramoffset_kvs + j].range(223, 192) = keyRZ3;
		vdram[dramoffset_kvs + j].range(255, 224) = valRZ3;
		vdram[dramoffset_kvs + j].range(287, 256) = keyRZ4;
		vdram[dramoffset_kvs + j].range(319, 288) = valRZ4;
		vdram[dramoffset_kvs + j].range(351, 320) = keyRZ5;
		vdram[dramoffset_kvs + j].range(383, 352) = valRZ5;
		vdram[dramoffset_kvs + j].range(415, 384) = keyRZ6;
		vdram[dramoffset_kvs + j].range(447, 416) = valRZ6;
		vdram[dramoffset_kvs + j].range(479, 448) = keyRZ7;
		vdram[dramoffset_kvs + j].range(511, 480) = valRZ7;
		#else
		vdram[dramoffset_kvs + j].data[0].key = keyRZ0;
		vdram[dramoffset_kvs + j].data[0].value = valRZ0;
		vdram[dramoffset_kvs + j].data[1].key = keyRZ1;
		vdram[dramoffset_kvs + j].data[1].value = valRZ1;
		vdram[dramoffset_kvs + j].data[2].key = keyRZ2;
		vdram[dramoffset_kvs + j].data[2].value = valRZ2;
		vdram[dramoffset_kvs + j].data[3].key = keyRZ3;
		vdram[dramoffset_kvs + j].data[3].value = valRZ3;
		vdram[dramoffset_kvs + j].data[4].key = keyRZ4;
		vdram[dramoffset_kvs + j].data[4].value = valRZ4;
		vdram[dramoffset_kvs + j].data[5].key = keyRZ5;
		vdram[dramoffset_kvs + j].data[5].value = valRZ5;
		vdram[dramoffset_kvs + j].data[6].key = keyRZ6;
		vdram[dramoffset_kvs + j].data[6].value = valRZ6;
		vdram[dramoffset_kvs + j].data[7].key = keyRZ7;
		vdram[dramoffset_kvs + j].data[7].value = valRZ7;
		#endif
	}
	return;
}
void
	#if defined(SW)
	actsproc::
	#endif
merge6andsavevdata(bool_type enable, uint512_dt * vdram, keyvalue_vbuffer_t vbuffer0[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t vbuffer1[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t vbuffer2[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t vbuffer3[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t vbuffer4[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t vbuffer5[VDATA_PACKINGSIZE][BLOCKRAM_SIZE], unsigned int begincol, batch_type bufferoffset_kvs, unsigned int dramoffset_kvs){
	if(enable == OFF){ return; }
	keyvalue_t dummykv;
	dummykv.key = 0xFFFFFFFF; dummykv.value = 0xFFFFFFFF;
	
	keyy_t keyA0 = dummykv.key;
	value_t valA0 = dummykv.key;
	keyy_t keyB0 = dummykv.key;
	value_t valB0 = dummykv.key;
	keyy_t keyC0 = dummykv.key;
	value_t valC0 = dummykv.key;
	keyy_t keyD0 = dummykv.key;
	value_t valD0 = dummykv.key;
	keyy_t keyE0 = dummykv.key;
	value_t valE0 = dummykv.key;
	keyy_t keyF0 = dummykv.key;
	value_t valF0 = dummykv.key;
	keyy_t keyG0 = dummykv.key;
	value_t valG0 = dummykv.key;
	keyy_t keyH0 = dummykv.key;
	value_t valH0 = dummykv.key;
	keyy_t keyI0 = dummykv.key;
	value_t valI0 = dummykv.key;
	keyy_t keyJ0 = dummykv.key;
	value_t valJ0 = dummykv.key;
	keyy_t keyK0 = dummykv.key;
	value_t valK0 = dummykv.key;
	keyy_t keyL0 = dummykv.key;
	value_t valL0 = dummykv.key;
	keyy_t keyM0 = dummykv.key;
	value_t valM0 = dummykv.key;
	keyy_t keyA1 = dummykv.key;
	value_t valA1 = dummykv.key;
	keyy_t keyB1 = dummykv.key;
	value_t valB1 = dummykv.key;
	keyy_t keyC1 = dummykv.key;
	value_t valC1 = dummykv.key;
	keyy_t keyD1 = dummykv.key;
	value_t valD1 = dummykv.key;
	keyy_t keyE1 = dummykv.key;
	value_t valE1 = dummykv.key;
	keyy_t keyF1 = dummykv.key;
	value_t valF1 = dummykv.key;
	keyy_t keyG1 = dummykv.key;
	value_t valG1 = dummykv.key;
	keyy_t keyH1 = dummykv.key;
	value_t valH1 = dummykv.key;
	keyy_t keyI1 = dummykv.key;
	value_t valI1 = dummykv.key;
	keyy_t keyJ1 = dummykv.key;
	value_t valJ1 = dummykv.key;
	keyy_t keyK1 = dummykv.key;
	value_t valK1 = dummykv.key;
	keyy_t keyL1 = dummykv.key;
	value_t valL1 = dummykv.key;
	keyy_t keyM1 = dummykv.key;
	value_t valM1 = dummykv.key;
	keyy_t keyA2 = dummykv.key;
	value_t valA2 = dummykv.key;
	keyy_t keyB2 = dummykv.key;
	value_t valB2 = dummykv.key;
	keyy_t keyC2 = dummykv.key;
	value_t valC2 = dummykv.key;
	keyy_t keyD2 = dummykv.key;
	value_t valD2 = dummykv.key;
	keyy_t keyE2 = dummykv.key;
	value_t valE2 = dummykv.key;
	keyy_t keyF2 = dummykv.key;
	value_t valF2 = dummykv.key;
	keyy_t keyG2 = dummykv.key;
	value_t valG2 = dummykv.key;
	keyy_t keyH2 = dummykv.key;
	value_t valH2 = dummykv.key;
	keyy_t keyI2 = dummykv.key;
	value_t valI2 = dummykv.key;
	keyy_t keyJ2 = dummykv.key;
	value_t valJ2 = dummykv.key;
	keyy_t keyK2 = dummykv.key;
	value_t valK2 = dummykv.key;
	keyy_t keyL2 = dummykv.key;
	value_t valL2 = dummykv.key;
	keyy_t keyM2 = dummykv.key;
	value_t valM2 = dummykv.key;
	keyy_t keyA3 = dummykv.key;
	value_t valA3 = dummykv.key;
	keyy_t keyB3 = dummykv.key;
	value_t valB3 = dummykv.key;
	keyy_t keyC3 = dummykv.key;
	value_t valC3 = dummykv.key;
	keyy_t keyD3 = dummykv.key;
	value_t valD3 = dummykv.key;
	keyy_t keyE3 = dummykv.key;
	value_t valE3 = dummykv.key;
	keyy_t keyF3 = dummykv.key;
	value_t valF3 = dummykv.key;
	keyy_t keyG3 = dummykv.key;
	value_t valG3 = dummykv.key;
	keyy_t keyH3 = dummykv.key;
	value_t valH3 = dummykv.key;
	keyy_t keyI3 = dummykv.key;
	value_t valI3 = dummykv.key;
	keyy_t keyJ3 = dummykv.key;
	value_t valJ3 = dummykv.key;
	keyy_t keyK3 = dummykv.key;
	value_t valK3 = dummykv.key;
	keyy_t keyL3 = dummykv.key;
	value_t valL3 = dummykv.key;
	keyy_t keyM3 = dummykv.key;
	value_t valM3 = dummykv.key;
	keyy_t keyA4 = dummykv.key;
	value_t valA4 = dummykv.key;
	keyy_t keyB4 = dummykv.key;
	value_t valB4 = dummykv.key;
	keyy_t keyC4 = dummykv.key;
	value_t valC4 = dummykv.key;
	keyy_t keyD4 = dummykv.key;
	value_t valD4 = dummykv.key;
	keyy_t keyE4 = dummykv.key;
	value_t valE4 = dummykv.key;
	keyy_t keyF4 = dummykv.key;
	value_t valF4 = dummykv.key;
	keyy_t keyG4 = dummykv.key;
	value_t valG4 = dummykv.key;
	keyy_t keyH4 = dummykv.key;
	value_t valH4 = dummykv.key;
	keyy_t keyI4 = dummykv.key;
	value_t valI4 = dummykv.key;
	keyy_t keyJ4 = dummykv.key;
	value_t valJ4 = dummykv.key;
	keyy_t keyK4 = dummykv.key;
	value_t valK4 = dummykv.key;
	keyy_t keyL4 = dummykv.key;
	value_t valL4 = dummykv.key;
	keyy_t keyM4 = dummykv.key;
	value_t valM4 = dummykv.key;
	keyy_t keyA5 = dummykv.key;
	value_t valA5 = dummykv.key;
	keyy_t keyB5 = dummykv.key;
	value_t valB5 = dummykv.key;
	keyy_t keyC5 = dummykv.key;
	value_t valC5 = dummykv.key;
	keyy_t keyD5 = dummykv.key;
	value_t valD5 = dummykv.key;
	keyy_t keyE5 = dummykv.key;
	value_t valE5 = dummykv.key;
	keyy_t keyF5 = dummykv.key;
	value_t valF5 = dummykv.key;
	keyy_t keyG5 = dummykv.key;
	value_t valG5 = dummykv.key;
	keyy_t keyH5 = dummykv.key;
	value_t valH5 = dummykv.key;
	keyy_t keyI5 = dummykv.key;
	value_t valI5 = dummykv.key;
	keyy_t keyJ5 = dummykv.key;
	value_t valJ5 = dummykv.key;
	keyy_t keyK5 = dummykv.key;
	value_t valK5 = dummykv.key;
	keyy_t keyL5 = dummykv.key;
	value_t valL5 = dummykv.key;
	keyy_t keyM5 = dummykv.key;
	value_t valM5 = dummykv.key;
	keyy_t keyA6 = dummykv.key;
	value_t valA6 = dummykv.key;
	keyy_t keyB6 = dummykv.key;
	value_t valB6 = dummykv.key;
	keyy_t keyC6 = dummykv.key;
	value_t valC6 = dummykv.key;
	keyy_t keyD6 = dummykv.key;
	value_t valD6 = dummykv.key;
	keyy_t keyE6 = dummykv.key;
	value_t valE6 = dummykv.key;
	keyy_t keyF6 = dummykv.key;
	value_t valF6 = dummykv.key;
	keyy_t keyG6 = dummykv.key;
	value_t valG6 = dummykv.key;
	keyy_t keyH6 = dummykv.key;
	value_t valH6 = dummykv.key;
	keyy_t keyI6 = dummykv.key;
	value_t valI6 = dummykv.key;
	keyy_t keyJ6 = dummykv.key;
	value_t valJ6 = dummykv.key;
	keyy_t keyK6 = dummykv.key;
	value_t valK6 = dummykv.key;
	keyy_t keyL6 = dummykv.key;
	value_t valL6 = dummykv.key;
	keyy_t keyM6 = dummykv.key;
	value_t valM6 = dummykv.key;
	keyy_t keyA7 = dummykv.key;
	value_t valA7 = dummykv.key;
	keyy_t keyB7 = dummykv.key;
	value_t valB7 = dummykv.key;
	keyy_t keyC7 = dummykv.key;
	value_t valC7 = dummykv.key;
	keyy_t keyD7 = dummykv.key;
	value_t valD7 = dummykv.key;
	keyy_t keyE7 = dummykv.key;
	value_t valE7 = dummykv.key;
	keyy_t keyF7 = dummykv.key;
	value_t valF7 = dummykv.key;
	keyy_t keyG7 = dummykv.key;
	value_t valG7 = dummykv.key;
	keyy_t keyH7 = dummykv.key;
	value_t valH7 = dummykv.key;
	keyy_t keyI7 = dummykv.key;
	value_t valI7 = dummykv.key;
	keyy_t keyJ7 = dummykv.key;
	value_t valJ7 = dummykv.key;
	keyy_t keyK7 = dummykv.key;
	value_t valK7 = dummykv.key;
	keyy_t keyL7 = dummykv.key;
	value_t valL7 = dummykv.key;
	keyy_t keyM7 = dummykv.key;
	value_t valM7 = dummykv.key;
	
	MERGE6_LOOP1: for (buffer_type j=0; j<BLOCKRAM_SIZE; j++){
	#pragma HLS PIPELINE II=1
		keyvalue_t mykeyvalue00 = GETKV2(vbuffer0[begincol + 0][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue01 = GETKV2(vbuffer0[begincol + 1][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue02 = GETKV2(vbuffer0[begincol + 2][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue03 = GETKV2(vbuffer0[begincol + 3][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue04 = GETKV2(vbuffer0[begincol + 4][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue05 = GETKV2(vbuffer0[begincol + 5][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue06 = GETKV2(vbuffer0[begincol + 6][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue07 = GETKV2(vbuffer0[begincol + 7][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue10 = GETKV2(vbuffer1[begincol + 0][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue11 = GETKV2(vbuffer1[begincol + 1][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue12 = GETKV2(vbuffer1[begincol + 2][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue13 = GETKV2(vbuffer1[begincol + 3][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue14 = GETKV2(vbuffer1[begincol + 4][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue15 = GETKV2(vbuffer1[begincol + 5][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue16 = GETKV2(vbuffer1[begincol + 6][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue17 = GETKV2(vbuffer1[begincol + 7][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue20 = GETKV2(vbuffer2[begincol + 0][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue21 = GETKV2(vbuffer2[begincol + 1][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue22 = GETKV2(vbuffer2[begincol + 2][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue23 = GETKV2(vbuffer2[begincol + 3][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue24 = GETKV2(vbuffer2[begincol + 4][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue25 = GETKV2(vbuffer2[begincol + 5][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue26 = GETKV2(vbuffer2[begincol + 6][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue27 = GETKV2(vbuffer2[begincol + 7][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue30 = GETKV2(vbuffer3[begincol + 0][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue31 = GETKV2(vbuffer3[begincol + 1][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue32 = GETKV2(vbuffer3[begincol + 2][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue33 = GETKV2(vbuffer3[begincol + 3][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue34 = GETKV2(vbuffer3[begincol + 4][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue35 = GETKV2(vbuffer3[begincol + 5][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue36 = GETKV2(vbuffer3[begincol + 6][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue37 = GETKV2(vbuffer3[begincol + 7][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue40 = GETKV2(vbuffer4[begincol + 0][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue41 = GETKV2(vbuffer4[begincol + 1][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue42 = GETKV2(vbuffer4[begincol + 2][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue43 = GETKV2(vbuffer4[begincol + 3][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue44 = GETKV2(vbuffer4[begincol + 4][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue45 = GETKV2(vbuffer4[begincol + 5][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue46 = GETKV2(vbuffer4[begincol + 6][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue47 = GETKV2(vbuffer4[begincol + 7][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue50 = GETKV2(vbuffer5[begincol + 0][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue51 = GETKV2(vbuffer5[begincol + 1][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue52 = GETKV2(vbuffer5[begincol + 2][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue53 = GETKV2(vbuffer5[begincol + 3][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue54 = GETKV2(vbuffer5[begincol + 4][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue55 = GETKV2(vbuffer5[begincol + 5][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue56 = GETKV2(vbuffer5[begincol + 6][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue57 = GETKV2(vbuffer5[begincol + 7][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue60 = dummykv;
		keyvalue_t mykeyvalue61 = dummykv;
		keyvalue_t mykeyvalue62 = dummykv;
		keyvalue_t mykeyvalue63 = dummykv;
		keyvalue_t mykeyvalue64 = dummykv;
		keyvalue_t mykeyvalue65 = dummykv;
		keyvalue_t mykeyvalue66 = dummykv;
		keyvalue_t mykeyvalue67 = dummykv;
		keyvalue_t mykeyvalue70 = dummykv;
		keyvalue_t mykeyvalue71 = dummykv;
		keyvalue_t mykeyvalue72 = dummykv;
		keyvalue_t mykeyvalue73 = dummykv;
		keyvalue_t mykeyvalue74 = dummykv;
		keyvalue_t mykeyvalue75 = dummykv;
		keyvalue_t mykeyvalue76 = dummykv;
		keyvalue_t mykeyvalue77 = dummykv;
		keyvalue_t mykeyvalue80 = dummykv;
		keyvalue_t mykeyvalue81 = dummykv;
		keyvalue_t mykeyvalue82 = dummykv;
		keyvalue_t mykeyvalue83 = dummykv;
		keyvalue_t mykeyvalue84 = dummykv;
		keyvalue_t mykeyvalue85 = dummykv;
		keyvalue_t mykeyvalue86 = dummykv;
		keyvalue_t mykeyvalue87 = dummykv;
		keyvalue_t mykeyvalue90 = dummykv;
		keyvalue_t mykeyvalue91 = dummykv;
		keyvalue_t mykeyvalue92 = dummykv;
		keyvalue_t mykeyvalue93 = dummykv;
		keyvalue_t mykeyvalue94 = dummykv;
		keyvalue_t mykeyvalue95 = dummykv;
		keyvalue_t mykeyvalue96 = dummykv;
		keyvalue_t mykeyvalue97 = dummykv;
		keyvalue_t mykeyvalue100 = dummykv;
		keyvalue_t mykeyvalue101 = dummykv;
		keyvalue_t mykeyvalue102 = dummykv;
		keyvalue_t mykeyvalue103 = dummykv;
		keyvalue_t mykeyvalue104 = dummykv;
		keyvalue_t mykeyvalue105 = dummykv;
		keyvalue_t mykeyvalue106 = dummykv;
		keyvalue_t mykeyvalue107 = dummykv;
		keyvalue_t mykeyvalue110 = dummykv;
		keyvalue_t mykeyvalue111 = dummykv;
		keyvalue_t mykeyvalue112 = dummykv;
		keyvalue_t mykeyvalue113 = dummykv;
		keyvalue_t mykeyvalue114 = dummykv;
		keyvalue_t mykeyvalue115 = dummykv;
		keyvalue_t mykeyvalue116 = dummykv;
		keyvalue_t mykeyvalue117 = dummykv;
		keyvalue_t mykeyvalue120 = dummykv;
		keyvalue_t mykeyvalue121 = dummykv;
		keyvalue_t mykeyvalue122 = dummykv;
		keyvalue_t mykeyvalue123 = dummykv;
		keyvalue_t mykeyvalue124 = dummykv;
		keyvalue_t mykeyvalue125 = dummykv;
		keyvalue_t mykeyvalue126 = dummykv;
		keyvalue_t mykeyvalue127 = dummykv;
		keyvalue_t mykeyvalue130 = dummykv;
		keyvalue_t mykeyvalue131 = dummykv;
		keyvalue_t mykeyvalue132 = dummykv;
		keyvalue_t mykeyvalue133 = dummykv;
		keyvalue_t mykeyvalue134 = dummykv;
		keyvalue_t mykeyvalue135 = dummykv;
		keyvalue_t mykeyvalue136 = dummykv;
		keyvalue_t mykeyvalue137 = dummykv;
		keyvalue_t mykeyvalue140 = dummykv;
		keyvalue_t mykeyvalue141 = dummykv;
		keyvalue_t mykeyvalue142 = dummykv;
		keyvalue_t mykeyvalue143 = dummykv;
		keyvalue_t mykeyvalue144 = dummykv;
		keyvalue_t mykeyvalue145 = dummykv;
		keyvalue_t mykeyvalue146 = dummykv;
		keyvalue_t mykeyvalue147 = dummykv;
		
		//((n)/2)
		keyA0 = mergefunc(mykeyvalue00.key, mykeyvalue10.key, NAp);
		keyB0 = mergefunc(mykeyvalue20.key, mykeyvalue30.key, NAp);
		keyC0 = mergefunc(mykeyvalue40.key, mykeyvalue50.key, NAp);
		keyD0 = mergefunc(mykeyvalue60.key, mykeyvalue70.key, NAp);
		keyA1 = mergefunc(mykeyvalue01.key, mykeyvalue11.key, NAp);
		keyB1 = mergefunc(mykeyvalue21.key, mykeyvalue31.key, NAp);
		keyC1 = mergefunc(mykeyvalue41.key, mykeyvalue51.key, NAp);
		keyD1 = mergefunc(mykeyvalue61.key, mykeyvalue71.key, NAp);
		keyA2 = mergefunc(mykeyvalue02.key, mykeyvalue12.key, NAp);
		keyB2 = mergefunc(mykeyvalue22.key, mykeyvalue32.key, NAp);
		keyC2 = mergefunc(mykeyvalue42.key, mykeyvalue52.key, NAp);
		keyD2 = mergefunc(mykeyvalue62.key, mykeyvalue72.key, NAp);
		keyA3 = mergefunc(mykeyvalue03.key, mykeyvalue13.key, NAp);
		keyB3 = mergefunc(mykeyvalue23.key, mykeyvalue33.key, NAp);
		keyC3 = mergefunc(mykeyvalue43.key, mykeyvalue53.key, NAp);
		keyD3 = mergefunc(mykeyvalue63.key, mykeyvalue73.key, NAp);
		keyA4 = mergefunc(mykeyvalue04.key, mykeyvalue14.key, NAp);
		keyB4 = mergefunc(mykeyvalue24.key, mykeyvalue34.key, NAp);
		keyC4 = mergefunc(mykeyvalue44.key, mykeyvalue54.key, NAp);
		keyD4 = mergefunc(mykeyvalue64.key, mykeyvalue74.key, NAp);
		keyA5 = mergefunc(mykeyvalue05.key, mykeyvalue15.key, NAp);
		keyB5 = mergefunc(mykeyvalue25.key, mykeyvalue35.key, NAp);
		keyC5 = mergefunc(mykeyvalue45.key, mykeyvalue55.key, NAp);
		keyD5 = mergefunc(mykeyvalue65.key, mykeyvalue75.key, NAp);
		keyA6 = mergefunc(mykeyvalue06.key, mykeyvalue16.key, NAp);
		keyB6 = mergefunc(mykeyvalue26.key, mykeyvalue36.key, NAp);
		keyC6 = mergefunc(mykeyvalue46.key, mykeyvalue56.key, NAp);
		keyD6 = mergefunc(mykeyvalue66.key, mykeyvalue76.key, NAp);
		keyA7 = mergefunc(mykeyvalue07.key, mykeyvalue17.key, NAp);
		keyB7 = mergefunc(mykeyvalue27.key, mykeyvalue37.key, NAp);
		keyC7 = mergefunc(mykeyvalue47.key, mykeyvalue57.key, NAp);
		keyD7 = mergefunc(mykeyvalue67.key, mykeyvalue77.key, NAp);
		keyy_t keyPA0 = mergefunc(keyA0, keyB0, NAp);
		keyy_t keyPB0 = mergefunc(keyC0, keyD0, NAp);
		keyy_t keyPC0 = mergefunc(keyE0, keyF0, NAp);
		keyy_t keyRA0 = mergefunc(keyPA0, keyPB0, NAp);
		keyy_t keyRB0 = mergefunc(keyPC0, keyF0, NAp);
		keyy_t keyRZ0 = mergefunc(keyRA0, keyRB0, NAp);
		keyy_t keyPA1 = mergefunc(keyA1, keyB1, NAp);
		keyy_t keyPB1 = mergefunc(keyC1, keyD1, NAp);
		keyy_t keyPC1 = mergefunc(keyE1, keyF1, NAp);
		keyy_t keyRA1 = mergefunc(keyPA1, keyPB1, NAp);
		keyy_t keyRB1 = mergefunc(keyPC1, keyF1, NAp);
		keyy_t keyRZ1 = mergefunc(keyRA1, keyRB1, NAp);
		keyy_t keyPA2 = mergefunc(keyA2, keyB2, NAp);
		keyy_t keyPB2 = mergefunc(keyC2, keyD2, NAp);
		keyy_t keyPC2 = mergefunc(keyE2, keyF2, NAp);
		keyy_t keyRA2 = mergefunc(keyPA2, keyPB2, NAp);
		keyy_t keyRB2 = mergefunc(keyPC2, keyF2, NAp);
		keyy_t keyRZ2 = mergefunc(keyRA2, keyRB2, NAp);
		keyy_t keyPA3 = mergefunc(keyA3, keyB3, NAp);
		keyy_t keyPB3 = mergefunc(keyC3, keyD3, NAp);
		keyy_t keyPC3 = mergefunc(keyE3, keyF3, NAp);
		keyy_t keyRA3 = mergefunc(keyPA3, keyPB3, NAp);
		keyy_t keyRB3 = mergefunc(keyPC3, keyF3, NAp);
		keyy_t keyRZ3 = mergefunc(keyRA3, keyRB3, NAp);
		keyy_t keyPA4 = mergefunc(keyA4, keyB4, NAp);
		keyy_t keyPB4 = mergefunc(keyC4, keyD4, NAp);
		keyy_t keyPC4 = mergefunc(keyE4, keyF4, NAp);
		keyy_t keyRA4 = mergefunc(keyPA4, keyPB4, NAp);
		keyy_t keyRB4 = mergefunc(keyPC4, keyF4, NAp);
		keyy_t keyRZ4 = mergefunc(keyRA4, keyRB4, NAp);
		keyy_t keyPA5 = mergefunc(keyA5, keyB5, NAp);
		keyy_t keyPB5 = mergefunc(keyC5, keyD5, NAp);
		keyy_t keyPC5 = mergefunc(keyE5, keyF5, NAp);
		keyy_t keyRA5 = mergefunc(keyPA5, keyPB5, NAp);
		keyy_t keyRB5 = mergefunc(keyPC5, keyF5, NAp);
		keyy_t keyRZ5 = mergefunc(keyRA5, keyRB5, NAp);
		keyy_t keyPA6 = mergefunc(keyA6, keyB6, NAp);
		keyy_t keyPB6 = mergefunc(keyC6, keyD6, NAp);
		keyy_t keyPC6 = mergefunc(keyE6, keyF6, NAp);
		keyy_t keyRA6 = mergefunc(keyPA6, keyPB6, NAp);
		keyy_t keyRB6 = mergefunc(keyPC6, keyF6, NAp);
		keyy_t keyRZ6 = mergefunc(keyRA6, keyRB6, NAp);
		keyy_t keyPA7 = mergefunc(keyA7, keyB7, NAp);
		keyy_t keyPB7 = mergefunc(keyC7, keyD7, NAp);
		keyy_t keyPC7 = mergefunc(keyE7, keyF7, NAp);
		keyy_t keyRA7 = mergefunc(keyPA7, keyPB7, NAp);
		keyy_t keyRB7 = mergefunc(keyPC7, keyF7, NAp);
		keyy_t keyRZ7 = mergefunc(keyRA7, keyRB7, NAp);
		
		//((n)/2)
		valA0 = mergefunc(mykeyvalue00.value, mykeyvalue10.value, NAp);
		valB0 = mergefunc(mykeyvalue20.value, mykeyvalue30.value, NAp);
		valC0 = mergefunc(mykeyvalue40.value, mykeyvalue50.value, NAp);
		valD0 = mergefunc(mykeyvalue60.value, mykeyvalue70.value, NAp);
		valA1 = mergefunc(mykeyvalue01.value, mykeyvalue11.value, NAp);
		valB1 = mergefunc(mykeyvalue21.value, mykeyvalue31.value, NAp);
		valC1 = mergefunc(mykeyvalue41.value, mykeyvalue51.value, NAp);
		valD1 = mergefunc(mykeyvalue61.value, mykeyvalue71.value, NAp);
		valA2 = mergefunc(mykeyvalue02.value, mykeyvalue12.value, NAp);
		valB2 = mergefunc(mykeyvalue22.value, mykeyvalue32.value, NAp);
		valC2 = mergefunc(mykeyvalue42.value, mykeyvalue52.value, NAp);
		valD2 = mergefunc(mykeyvalue62.value, mykeyvalue72.value, NAp);
		valA3 = mergefunc(mykeyvalue03.value, mykeyvalue13.value, NAp);
		valB3 = mergefunc(mykeyvalue23.value, mykeyvalue33.value, NAp);
		valC3 = mergefunc(mykeyvalue43.value, mykeyvalue53.value, NAp);
		valD3 = mergefunc(mykeyvalue63.value, mykeyvalue73.value, NAp);
		valA4 = mergefunc(mykeyvalue04.value, mykeyvalue14.value, NAp);
		valB4 = mergefunc(mykeyvalue24.value, mykeyvalue34.value, NAp);
		valC4 = mergefunc(mykeyvalue44.value, mykeyvalue54.value, NAp);
		valD4 = mergefunc(mykeyvalue64.value, mykeyvalue74.value, NAp);
		valA5 = mergefunc(mykeyvalue05.value, mykeyvalue15.value, NAp);
		valB5 = mergefunc(mykeyvalue25.value, mykeyvalue35.value, NAp);
		valC5 = mergefunc(mykeyvalue45.value, mykeyvalue55.value, NAp);
		valD5 = mergefunc(mykeyvalue65.value, mykeyvalue75.value, NAp);
		valA6 = mergefunc(mykeyvalue06.value, mykeyvalue16.value, NAp);
		valB6 = mergefunc(mykeyvalue26.value, mykeyvalue36.value, NAp);
		valC6 = mergefunc(mykeyvalue46.value, mykeyvalue56.value, NAp);
		valD6 = mergefunc(mykeyvalue66.value, mykeyvalue76.value, NAp);
		valA7 = mergefunc(mykeyvalue07.value, mykeyvalue17.value, NAp);
		valB7 = mergefunc(mykeyvalue27.value, mykeyvalue37.value, NAp);
		valC7 = mergefunc(mykeyvalue47.value, mykeyvalue57.value, NAp);
		valD7 = mergefunc(mykeyvalue67.value, mykeyvalue77.value, NAp);
		value_t valPA0 = mergefunc(valA0, valB0, NAp);
		value_t valPB0 = mergefunc(valC0, valD0, NAp);
		value_t valPC0 = mergefunc(valE0, valF0, NAp);
		value_t valRA0 = mergefunc(valPA0, valPB0, NAp);
		value_t valRB0 = mergefunc(valPC0, valF0, NAp);
		value_t valRZ0 = mergefunc(valRA0, valRB0, NAp);
		value_t valPA1 = mergefunc(valA1, valB1, NAp);
		value_t valPB1 = mergefunc(valC1, valD1, NAp);
		value_t valPC1 = mergefunc(valE1, valF1, NAp);
		value_t valRA1 = mergefunc(valPA1, valPB1, NAp);
		value_t valRB1 = mergefunc(valPC1, valF1, NAp);
		value_t valRZ1 = mergefunc(valRA1, valRB1, NAp);
		value_t valPA2 = mergefunc(valA2, valB2, NAp);
		value_t valPB2 = mergefunc(valC2, valD2, NAp);
		value_t valPC2 = mergefunc(valE2, valF2, NAp);
		value_t valRA2 = mergefunc(valPA2, valPB2, NAp);
		value_t valRB2 = mergefunc(valPC2, valF2, NAp);
		value_t valRZ2 = mergefunc(valRA2, valRB2, NAp);
		value_t valPA3 = mergefunc(valA3, valB3, NAp);
		value_t valPB3 = mergefunc(valC3, valD3, NAp);
		value_t valPC3 = mergefunc(valE3, valF3, NAp);
		value_t valRA3 = mergefunc(valPA3, valPB3, NAp);
		value_t valRB3 = mergefunc(valPC3, valF3, NAp);
		value_t valRZ3 = mergefunc(valRA3, valRB3, NAp);
		value_t valPA4 = mergefunc(valA4, valB4, NAp);
		value_t valPB4 = mergefunc(valC4, valD4, NAp);
		value_t valPC4 = mergefunc(valE4, valF4, NAp);
		value_t valRA4 = mergefunc(valPA4, valPB4, NAp);
		value_t valRB4 = mergefunc(valPC4, valF4, NAp);
		value_t valRZ4 = mergefunc(valRA4, valRB4, NAp);
		value_t valPA5 = mergefunc(valA5, valB5, NAp);
		value_t valPB5 = mergefunc(valC5, valD5, NAp);
		value_t valPC5 = mergefunc(valE5, valF5, NAp);
		value_t valRA5 = mergefunc(valPA5, valPB5, NAp);
		value_t valRB5 = mergefunc(valPC5, valF5, NAp);
		value_t valRZ5 = mergefunc(valRA5, valRB5, NAp);
		value_t valPA6 = mergefunc(valA6, valB6, NAp);
		value_t valPB6 = mergefunc(valC6, valD6, NAp);
		value_t valPC6 = mergefunc(valE6, valF6, NAp);
		value_t valRA6 = mergefunc(valPA6, valPB6, NAp);
		value_t valRB6 = mergefunc(valPC6, valF6, NAp);
		value_t valRZ6 = mergefunc(valRA6, valRB6, NAp);
		value_t valPA7 = mergefunc(valA7, valB7, NAp);
		value_t valPB7 = mergefunc(valC7, valD7, NAp);
		value_t valPC7 = mergefunc(valE7, valF7, NAp);
		value_t valRA7 = mergefunc(valPA7, valPB7, NAp);
		value_t valRB7 = mergefunc(valPC7, valF7, NAp);
		value_t valRZ7 = mergefunc(valRA7, valRB7, NAp);
		
		#ifdef _WIDEWORD
		vdram[dramoffset_kvs + j].range(31, 0) = keyRZ0;
		vdram[dramoffset_kvs + j].range(63, 32) = valRZ0;
		vdram[dramoffset_kvs + j].range(95, 64) = keyRZ1;
		vdram[dramoffset_kvs + j].range(127, 96) = valRZ1;
		vdram[dramoffset_kvs + j].range(159, 128) = keyRZ2;
		vdram[dramoffset_kvs + j].range(191, 160) = valRZ2;
		vdram[dramoffset_kvs + j].range(223, 192) = keyRZ3;
		vdram[dramoffset_kvs + j].range(255, 224) = valRZ3;
		vdram[dramoffset_kvs + j].range(287, 256) = keyRZ4;
		vdram[dramoffset_kvs + j].range(319, 288) = valRZ4;
		vdram[dramoffset_kvs + j].range(351, 320) = keyRZ5;
		vdram[dramoffset_kvs + j].range(383, 352) = valRZ5;
		vdram[dramoffset_kvs + j].range(415, 384) = keyRZ6;
		vdram[dramoffset_kvs + j].range(447, 416) = valRZ6;
		vdram[dramoffset_kvs + j].range(479, 448) = keyRZ7;
		vdram[dramoffset_kvs + j].range(511, 480) = valRZ7;
		#else
		vdram[dramoffset_kvs + j].data[0].key = keyRZ0;
		vdram[dramoffset_kvs + j].data[0].value = valRZ0;
		vdram[dramoffset_kvs + j].data[1].key = keyRZ1;
		vdram[dramoffset_kvs + j].data[1].value = valRZ1;
		vdram[dramoffset_kvs + j].data[2].key = keyRZ2;
		vdram[dramoffset_kvs + j].data[2].value = valRZ2;
		vdram[dramoffset_kvs + j].data[3].key = keyRZ3;
		vdram[dramoffset_kvs + j].data[3].value = valRZ3;
		vdram[dramoffset_kvs + j].data[4].key = keyRZ4;
		vdram[dramoffset_kvs + j].data[4].value = valRZ4;
		vdram[dramoffset_kvs + j].data[5].key = keyRZ5;
		vdram[dramoffset_kvs + j].data[5].value = valRZ5;
		vdram[dramoffset_kvs + j].data[6].key = keyRZ6;
		vdram[dramoffset_kvs + j].data[6].value = valRZ6;
		vdram[dramoffset_kvs + j].data[7].key = keyRZ7;
		vdram[dramoffset_kvs + j].data[7].value = valRZ7;
		#endif
	}
	return;
}
void
	#if defined(SW)
	actsproc::
	#endif
merge7andsavevdata(bool_type enable, uint512_dt * vdram, keyvalue_vbuffer_t vbuffer0[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t vbuffer1[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t vbuffer2[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t vbuffer3[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t vbuffer4[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t vbuffer5[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t vbuffer6[VDATA_PACKINGSIZE][BLOCKRAM_SIZE], unsigned int begincol, batch_type bufferoffset_kvs, unsigned int dramoffset_kvs){
	if(enable == OFF){ return; }
	keyvalue_t dummykv;
	dummykv.key = 0xFFFFFFFF; dummykv.value = 0xFFFFFFFF;
	
	keyy_t keyA0 = dummykv.key;
	value_t valA0 = dummykv.key;
	keyy_t keyB0 = dummykv.key;
	value_t valB0 = dummykv.key;
	keyy_t keyC0 = dummykv.key;
	value_t valC0 = dummykv.key;
	keyy_t keyD0 = dummykv.key;
	value_t valD0 = dummykv.key;
	keyy_t keyE0 = dummykv.key;
	value_t valE0 = dummykv.key;
	keyy_t keyF0 = dummykv.key;
	value_t valF0 = dummykv.key;
	keyy_t keyG0 = dummykv.key;
	value_t valG0 = dummykv.key;
	keyy_t keyH0 = dummykv.key;
	value_t valH0 = dummykv.key;
	keyy_t keyI0 = dummykv.key;
	value_t valI0 = dummykv.key;
	keyy_t keyJ0 = dummykv.key;
	value_t valJ0 = dummykv.key;
	keyy_t keyK0 = dummykv.key;
	value_t valK0 = dummykv.key;
	keyy_t keyL0 = dummykv.key;
	value_t valL0 = dummykv.key;
	keyy_t keyM0 = dummykv.key;
	value_t valM0 = dummykv.key;
	keyy_t keyA1 = dummykv.key;
	value_t valA1 = dummykv.key;
	keyy_t keyB1 = dummykv.key;
	value_t valB1 = dummykv.key;
	keyy_t keyC1 = dummykv.key;
	value_t valC1 = dummykv.key;
	keyy_t keyD1 = dummykv.key;
	value_t valD1 = dummykv.key;
	keyy_t keyE1 = dummykv.key;
	value_t valE1 = dummykv.key;
	keyy_t keyF1 = dummykv.key;
	value_t valF1 = dummykv.key;
	keyy_t keyG1 = dummykv.key;
	value_t valG1 = dummykv.key;
	keyy_t keyH1 = dummykv.key;
	value_t valH1 = dummykv.key;
	keyy_t keyI1 = dummykv.key;
	value_t valI1 = dummykv.key;
	keyy_t keyJ1 = dummykv.key;
	value_t valJ1 = dummykv.key;
	keyy_t keyK1 = dummykv.key;
	value_t valK1 = dummykv.key;
	keyy_t keyL1 = dummykv.key;
	value_t valL1 = dummykv.key;
	keyy_t keyM1 = dummykv.key;
	value_t valM1 = dummykv.key;
	keyy_t keyA2 = dummykv.key;
	value_t valA2 = dummykv.key;
	keyy_t keyB2 = dummykv.key;
	value_t valB2 = dummykv.key;
	keyy_t keyC2 = dummykv.key;
	value_t valC2 = dummykv.key;
	keyy_t keyD2 = dummykv.key;
	value_t valD2 = dummykv.key;
	keyy_t keyE2 = dummykv.key;
	value_t valE2 = dummykv.key;
	keyy_t keyF2 = dummykv.key;
	value_t valF2 = dummykv.key;
	keyy_t keyG2 = dummykv.key;
	value_t valG2 = dummykv.key;
	keyy_t keyH2 = dummykv.key;
	value_t valH2 = dummykv.key;
	keyy_t keyI2 = dummykv.key;
	value_t valI2 = dummykv.key;
	keyy_t keyJ2 = dummykv.key;
	value_t valJ2 = dummykv.key;
	keyy_t keyK2 = dummykv.key;
	value_t valK2 = dummykv.key;
	keyy_t keyL2 = dummykv.key;
	value_t valL2 = dummykv.key;
	keyy_t keyM2 = dummykv.key;
	value_t valM2 = dummykv.key;
	keyy_t keyA3 = dummykv.key;
	value_t valA3 = dummykv.key;
	keyy_t keyB3 = dummykv.key;
	value_t valB3 = dummykv.key;
	keyy_t keyC3 = dummykv.key;
	value_t valC3 = dummykv.key;
	keyy_t keyD3 = dummykv.key;
	value_t valD3 = dummykv.key;
	keyy_t keyE3 = dummykv.key;
	value_t valE3 = dummykv.key;
	keyy_t keyF3 = dummykv.key;
	value_t valF3 = dummykv.key;
	keyy_t keyG3 = dummykv.key;
	value_t valG3 = dummykv.key;
	keyy_t keyH3 = dummykv.key;
	value_t valH3 = dummykv.key;
	keyy_t keyI3 = dummykv.key;
	value_t valI3 = dummykv.key;
	keyy_t keyJ3 = dummykv.key;
	value_t valJ3 = dummykv.key;
	keyy_t keyK3 = dummykv.key;
	value_t valK3 = dummykv.key;
	keyy_t keyL3 = dummykv.key;
	value_t valL3 = dummykv.key;
	keyy_t keyM3 = dummykv.key;
	value_t valM3 = dummykv.key;
	keyy_t keyA4 = dummykv.key;
	value_t valA4 = dummykv.key;
	keyy_t keyB4 = dummykv.key;
	value_t valB4 = dummykv.key;
	keyy_t keyC4 = dummykv.key;
	value_t valC4 = dummykv.key;
	keyy_t keyD4 = dummykv.key;
	value_t valD4 = dummykv.key;
	keyy_t keyE4 = dummykv.key;
	value_t valE4 = dummykv.key;
	keyy_t keyF4 = dummykv.key;
	value_t valF4 = dummykv.key;
	keyy_t keyG4 = dummykv.key;
	value_t valG4 = dummykv.key;
	keyy_t keyH4 = dummykv.key;
	value_t valH4 = dummykv.key;
	keyy_t keyI4 = dummykv.key;
	value_t valI4 = dummykv.key;
	keyy_t keyJ4 = dummykv.key;
	value_t valJ4 = dummykv.key;
	keyy_t keyK4 = dummykv.key;
	value_t valK4 = dummykv.key;
	keyy_t keyL4 = dummykv.key;
	value_t valL4 = dummykv.key;
	keyy_t keyM4 = dummykv.key;
	value_t valM4 = dummykv.key;
	keyy_t keyA5 = dummykv.key;
	value_t valA5 = dummykv.key;
	keyy_t keyB5 = dummykv.key;
	value_t valB5 = dummykv.key;
	keyy_t keyC5 = dummykv.key;
	value_t valC5 = dummykv.key;
	keyy_t keyD5 = dummykv.key;
	value_t valD5 = dummykv.key;
	keyy_t keyE5 = dummykv.key;
	value_t valE5 = dummykv.key;
	keyy_t keyF5 = dummykv.key;
	value_t valF5 = dummykv.key;
	keyy_t keyG5 = dummykv.key;
	value_t valG5 = dummykv.key;
	keyy_t keyH5 = dummykv.key;
	value_t valH5 = dummykv.key;
	keyy_t keyI5 = dummykv.key;
	value_t valI5 = dummykv.key;
	keyy_t keyJ5 = dummykv.key;
	value_t valJ5 = dummykv.key;
	keyy_t keyK5 = dummykv.key;
	value_t valK5 = dummykv.key;
	keyy_t keyL5 = dummykv.key;
	value_t valL5 = dummykv.key;
	keyy_t keyM5 = dummykv.key;
	value_t valM5 = dummykv.key;
	keyy_t keyA6 = dummykv.key;
	value_t valA6 = dummykv.key;
	keyy_t keyB6 = dummykv.key;
	value_t valB6 = dummykv.key;
	keyy_t keyC6 = dummykv.key;
	value_t valC6 = dummykv.key;
	keyy_t keyD6 = dummykv.key;
	value_t valD6 = dummykv.key;
	keyy_t keyE6 = dummykv.key;
	value_t valE6 = dummykv.key;
	keyy_t keyF6 = dummykv.key;
	value_t valF6 = dummykv.key;
	keyy_t keyG6 = dummykv.key;
	value_t valG6 = dummykv.key;
	keyy_t keyH6 = dummykv.key;
	value_t valH6 = dummykv.key;
	keyy_t keyI6 = dummykv.key;
	value_t valI6 = dummykv.key;
	keyy_t keyJ6 = dummykv.key;
	value_t valJ6 = dummykv.key;
	keyy_t keyK6 = dummykv.key;
	value_t valK6 = dummykv.key;
	keyy_t keyL6 = dummykv.key;
	value_t valL6 = dummykv.key;
	keyy_t keyM6 = dummykv.key;
	value_t valM6 = dummykv.key;
	keyy_t keyA7 = dummykv.key;
	value_t valA7 = dummykv.key;
	keyy_t keyB7 = dummykv.key;
	value_t valB7 = dummykv.key;
	keyy_t keyC7 = dummykv.key;
	value_t valC7 = dummykv.key;
	keyy_t keyD7 = dummykv.key;
	value_t valD7 = dummykv.key;
	keyy_t keyE7 = dummykv.key;
	value_t valE7 = dummykv.key;
	keyy_t keyF7 = dummykv.key;
	value_t valF7 = dummykv.key;
	keyy_t keyG7 = dummykv.key;
	value_t valG7 = dummykv.key;
	keyy_t keyH7 = dummykv.key;
	value_t valH7 = dummykv.key;
	keyy_t keyI7 = dummykv.key;
	value_t valI7 = dummykv.key;
	keyy_t keyJ7 = dummykv.key;
	value_t valJ7 = dummykv.key;
	keyy_t keyK7 = dummykv.key;
	value_t valK7 = dummykv.key;
	keyy_t keyL7 = dummykv.key;
	value_t valL7 = dummykv.key;
	keyy_t keyM7 = dummykv.key;
	value_t valM7 = dummykv.key;
	
	MERGE7_LOOP1: for (buffer_type j=0; j<BLOCKRAM_SIZE; j++){
	#pragma HLS PIPELINE II=1
		keyvalue_t mykeyvalue00 = GETKV2(vbuffer0[begincol + 0][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue01 = GETKV2(vbuffer0[begincol + 1][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue02 = GETKV2(vbuffer0[begincol + 2][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue03 = GETKV2(vbuffer0[begincol + 3][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue04 = GETKV2(vbuffer0[begincol + 4][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue05 = GETKV2(vbuffer0[begincol + 5][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue06 = GETKV2(vbuffer0[begincol + 6][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue07 = GETKV2(vbuffer0[begincol + 7][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue10 = GETKV2(vbuffer1[begincol + 0][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue11 = GETKV2(vbuffer1[begincol + 1][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue12 = GETKV2(vbuffer1[begincol + 2][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue13 = GETKV2(vbuffer1[begincol + 3][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue14 = GETKV2(vbuffer1[begincol + 4][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue15 = GETKV2(vbuffer1[begincol + 5][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue16 = GETKV2(vbuffer1[begincol + 6][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue17 = GETKV2(vbuffer1[begincol + 7][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue20 = GETKV2(vbuffer2[begincol + 0][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue21 = GETKV2(vbuffer2[begincol + 1][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue22 = GETKV2(vbuffer2[begincol + 2][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue23 = GETKV2(vbuffer2[begincol + 3][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue24 = GETKV2(vbuffer2[begincol + 4][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue25 = GETKV2(vbuffer2[begincol + 5][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue26 = GETKV2(vbuffer2[begincol + 6][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue27 = GETKV2(vbuffer2[begincol + 7][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue30 = GETKV2(vbuffer3[begincol + 0][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue31 = GETKV2(vbuffer3[begincol + 1][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue32 = GETKV2(vbuffer3[begincol + 2][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue33 = GETKV2(vbuffer3[begincol + 3][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue34 = GETKV2(vbuffer3[begincol + 4][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue35 = GETKV2(vbuffer3[begincol + 5][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue36 = GETKV2(vbuffer3[begincol + 6][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue37 = GETKV2(vbuffer3[begincol + 7][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue40 = GETKV2(vbuffer4[begincol + 0][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue41 = GETKV2(vbuffer4[begincol + 1][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue42 = GETKV2(vbuffer4[begincol + 2][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue43 = GETKV2(vbuffer4[begincol + 3][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue44 = GETKV2(vbuffer4[begincol + 4][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue45 = GETKV2(vbuffer4[begincol + 5][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue46 = GETKV2(vbuffer4[begincol + 6][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue47 = GETKV2(vbuffer4[begincol + 7][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue50 = GETKV2(vbuffer5[begincol + 0][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue51 = GETKV2(vbuffer5[begincol + 1][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue52 = GETKV2(vbuffer5[begincol + 2][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue53 = GETKV2(vbuffer5[begincol + 3][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue54 = GETKV2(vbuffer5[begincol + 4][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue55 = GETKV2(vbuffer5[begincol + 5][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue56 = GETKV2(vbuffer5[begincol + 6][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue57 = GETKV2(vbuffer5[begincol + 7][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue60 = GETKV2(vbuffer6[begincol + 0][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue61 = GETKV2(vbuffer6[begincol + 1][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue62 = GETKV2(vbuffer6[begincol + 2][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue63 = GETKV2(vbuffer6[begincol + 3][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue64 = GETKV2(vbuffer6[begincol + 4][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue65 = GETKV2(vbuffer6[begincol + 5][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue66 = GETKV2(vbuffer6[begincol + 6][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue67 = GETKV2(vbuffer6[begincol + 7][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue70 = dummykv;
		keyvalue_t mykeyvalue71 = dummykv;
		keyvalue_t mykeyvalue72 = dummykv;
		keyvalue_t mykeyvalue73 = dummykv;
		keyvalue_t mykeyvalue74 = dummykv;
		keyvalue_t mykeyvalue75 = dummykv;
		keyvalue_t mykeyvalue76 = dummykv;
		keyvalue_t mykeyvalue77 = dummykv;
		keyvalue_t mykeyvalue80 = dummykv;
		keyvalue_t mykeyvalue81 = dummykv;
		keyvalue_t mykeyvalue82 = dummykv;
		keyvalue_t mykeyvalue83 = dummykv;
		keyvalue_t mykeyvalue84 = dummykv;
		keyvalue_t mykeyvalue85 = dummykv;
		keyvalue_t mykeyvalue86 = dummykv;
		keyvalue_t mykeyvalue87 = dummykv;
		keyvalue_t mykeyvalue90 = dummykv;
		keyvalue_t mykeyvalue91 = dummykv;
		keyvalue_t mykeyvalue92 = dummykv;
		keyvalue_t mykeyvalue93 = dummykv;
		keyvalue_t mykeyvalue94 = dummykv;
		keyvalue_t mykeyvalue95 = dummykv;
		keyvalue_t mykeyvalue96 = dummykv;
		keyvalue_t mykeyvalue97 = dummykv;
		keyvalue_t mykeyvalue100 = dummykv;
		keyvalue_t mykeyvalue101 = dummykv;
		keyvalue_t mykeyvalue102 = dummykv;
		keyvalue_t mykeyvalue103 = dummykv;
		keyvalue_t mykeyvalue104 = dummykv;
		keyvalue_t mykeyvalue105 = dummykv;
		keyvalue_t mykeyvalue106 = dummykv;
		keyvalue_t mykeyvalue107 = dummykv;
		keyvalue_t mykeyvalue110 = dummykv;
		keyvalue_t mykeyvalue111 = dummykv;
		keyvalue_t mykeyvalue112 = dummykv;
		keyvalue_t mykeyvalue113 = dummykv;
		keyvalue_t mykeyvalue114 = dummykv;
		keyvalue_t mykeyvalue115 = dummykv;
		keyvalue_t mykeyvalue116 = dummykv;
		keyvalue_t mykeyvalue117 = dummykv;
		keyvalue_t mykeyvalue120 = dummykv;
		keyvalue_t mykeyvalue121 = dummykv;
		keyvalue_t mykeyvalue122 = dummykv;
		keyvalue_t mykeyvalue123 = dummykv;
		keyvalue_t mykeyvalue124 = dummykv;
		keyvalue_t mykeyvalue125 = dummykv;
		keyvalue_t mykeyvalue126 = dummykv;
		keyvalue_t mykeyvalue127 = dummykv;
		keyvalue_t mykeyvalue130 = dummykv;
		keyvalue_t mykeyvalue131 = dummykv;
		keyvalue_t mykeyvalue132 = dummykv;
		keyvalue_t mykeyvalue133 = dummykv;
		keyvalue_t mykeyvalue134 = dummykv;
		keyvalue_t mykeyvalue135 = dummykv;
		keyvalue_t mykeyvalue136 = dummykv;
		keyvalue_t mykeyvalue137 = dummykv;
		keyvalue_t mykeyvalue140 = dummykv;
		keyvalue_t mykeyvalue141 = dummykv;
		keyvalue_t mykeyvalue142 = dummykv;
		keyvalue_t mykeyvalue143 = dummykv;
		keyvalue_t mykeyvalue144 = dummykv;
		keyvalue_t mykeyvalue145 = dummykv;
		keyvalue_t mykeyvalue146 = dummykv;
		keyvalue_t mykeyvalue147 = dummykv;
		
		//((n)/2)
		keyA0 = mergefunc(mykeyvalue00.key, mykeyvalue10.key, NAp);
		keyB0 = mergefunc(mykeyvalue20.key, mykeyvalue30.key, NAp);
		keyC0 = mergefunc(mykeyvalue40.key, mykeyvalue50.key, NAp);
		keyD0 = mergefunc(mykeyvalue60.key, mykeyvalue70.key, NAp);
		keyA1 = mergefunc(mykeyvalue01.key, mykeyvalue11.key, NAp);
		keyB1 = mergefunc(mykeyvalue21.key, mykeyvalue31.key, NAp);
		keyC1 = mergefunc(mykeyvalue41.key, mykeyvalue51.key, NAp);
		keyD1 = mergefunc(mykeyvalue61.key, mykeyvalue71.key, NAp);
		keyA2 = mergefunc(mykeyvalue02.key, mykeyvalue12.key, NAp);
		keyB2 = mergefunc(mykeyvalue22.key, mykeyvalue32.key, NAp);
		keyC2 = mergefunc(mykeyvalue42.key, mykeyvalue52.key, NAp);
		keyD2 = mergefunc(mykeyvalue62.key, mykeyvalue72.key, NAp);
		keyA3 = mergefunc(mykeyvalue03.key, mykeyvalue13.key, NAp);
		keyB3 = mergefunc(mykeyvalue23.key, mykeyvalue33.key, NAp);
		keyC3 = mergefunc(mykeyvalue43.key, mykeyvalue53.key, NAp);
		keyD3 = mergefunc(mykeyvalue63.key, mykeyvalue73.key, NAp);
		keyA4 = mergefunc(mykeyvalue04.key, mykeyvalue14.key, NAp);
		keyB4 = mergefunc(mykeyvalue24.key, mykeyvalue34.key, NAp);
		keyC4 = mergefunc(mykeyvalue44.key, mykeyvalue54.key, NAp);
		keyD4 = mergefunc(mykeyvalue64.key, mykeyvalue74.key, NAp);
		keyA5 = mergefunc(mykeyvalue05.key, mykeyvalue15.key, NAp);
		keyB5 = mergefunc(mykeyvalue25.key, mykeyvalue35.key, NAp);
		keyC5 = mergefunc(mykeyvalue45.key, mykeyvalue55.key, NAp);
		keyD5 = mergefunc(mykeyvalue65.key, mykeyvalue75.key, NAp);
		keyA6 = mergefunc(mykeyvalue06.key, mykeyvalue16.key, NAp);
		keyB6 = mergefunc(mykeyvalue26.key, mykeyvalue36.key, NAp);
		keyC6 = mergefunc(mykeyvalue46.key, mykeyvalue56.key, NAp);
		keyD6 = mergefunc(mykeyvalue66.key, mykeyvalue76.key, NAp);
		keyA7 = mergefunc(mykeyvalue07.key, mykeyvalue17.key, NAp);
		keyB7 = mergefunc(mykeyvalue27.key, mykeyvalue37.key, NAp);
		keyC7 = mergefunc(mykeyvalue47.key, mykeyvalue57.key, NAp);
		keyD7 = mergefunc(mykeyvalue67.key, mykeyvalue77.key, NAp);
		keyy_t keyPA0 = mergefunc(keyA0, keyB0, NAp);
		keyy_t keyPB0 = mergefunc(keyC0, keyD0, NAp);
		keyy_t keyPC0 = mergefunc(keyE0, keyF0, NAp);
		keyy_t keyRA0 = mergefunc(keyPA0, keyPB0, NAp);
		keyy_t keyRB0 = mergefunc(keyPC0, keyF0, NAp);
		keyy_t keyRZ0 = mergefunc(keyRA0, keyRB0, NAp);
		keyy_t keyPA1 = mergefunc(keyA1, keyB1, NAp);
		keyy_t keyPB1 = mergefunc(keyC1, keyD1, NAp);
		keyy_t keyPC1 = mergefunc(keyE1, keyF1, NAp);
		keyy_t keyRA1 = mergefunc(keyPA1, keyPB1, NAp);
		keyy_t keyRB1 = mergefunc(keyPC1, keyF1, NAp);
		keyy_t keyRZ1 = mergefunc(keyRA1, keyRB1, NAp);
		keyy_t keyPA2 = mergefunc(keyA2, keyB2, NAp);
		keyy_t keyPB2 = mergefunc(keyC2, keyD2, NAp);
		keyy_t keyPC2 = mergefunc(keyE2, keyF2, NAp);
		keyy_t keyRA2 = mergefunc(keyPA2, keyPB2, NAp);
		keyy_t keyRB2 = mergefunc(keyPC2, keyF2, NAp);
		keyy_t keyRZ2 = mergefunc(keyRA2, keyRB2, NAp);
		keyy_t keyPA3 = mergefunc(keyA3, keyB3, NAp);
		keyy_t keyPB3 = mergefunc(keyC3, keyD3, NAp);
		keyy_t keyPC3 = mergefunc(keyE3, keyF3, NAp);
		keyy_t keyRA3 = mergefunc(keyPA3, keyPB3, NAp);
		keyy_t keyRB3 = mergefunc(keyPC3, keyF3, NAp);
		keyy_t keyRZ3 = mergefunc(keyRA3, keyRB3, NAp);
		keyy_t keyPA4 = mergefunc(keyA4, keyB4, NAp);
		keyy_t keyPB4 = mergefunc(keyC4, keyD4, NAp);
		keyy_t keyPC4 = mergefunc(keyE4, keyF4, NAp);
		keyy_t keyRA4 = mergefunc(keyPA4, keyPB4, NAp);
		keyy_t keyRB4 = mergefunc(keyPC4, keyF4, NAp);
		keyy_t keyRZ4 = mergefunc(keyRA4, keyRB4, NAp);
		keyy_t keyPA5 = mergefunc(keyA5, keyB5, NAp);
		keyy_t keyPB5 = mergefunc(keyC5, keyD5, NAp);
		keyy_t keyPC5 = mergefunc(keyE5, keyF5, NAp);
		keyy_t keyRA5 = mergefunc(keyPA5, keyPB5, NAp);
		keyy_t keyRB5 = mergefunc(keyPC5, keyF5, NAp);
		keyy_t keyRZ5 = mergefunc(keyRA5, keyRB5, NAp);
		keyy_t keyPA6 = mergefunc(keyA6, keyB6, NAp);
		keyy_t keyPB6 = mergefunc(keyC6, keyD6, NAp);
		keyy_t keyPC6 = mergefunc(keyE6, keyF6, NAp);
		keyy_t keyRA6 = mergefunc(keyPA6, keyPB6, NAp);
		keyy_t keyRB6 = mergefunc(keyPC6, keyF6, NAp);
		keyy_t keyRZ6 = mergefunc(keyRA6, keyRB6, NAp);
		keyy_t keyPA7 = mergefunc(keyA7, keyB7, NAp);
		keyy_t keyPB7 = mergefunc(keyC7, keyD7, NAp);
		keyy_t keyPC7 = mergefunc(keyE7, keyF7, NAp);
		keyy_t keyRA7 = mergefunc(keyPA7, keyPB7, NAp);
		keyy_t keyRB7 = mergefunc(keyPC7, keyF7, NAp);
		keyy_t keyRZ7 = mergefunc(keyRA7, keyRB7, NAp);
		
		//((n)/2)
		valA0 = mergefunc(mykeyvalue00.value, mykeyvalue10.value, NAp);
		valB0 = mergefunc(mykeyvalue20.value, mykeyvalue30.value, NAp);
		valC0 = mergefunc(mykeyvalue40.value, mykeyvalue50.value, NAp);
		valD0 = mergefunc(mykeyvalue60.value, mykeyvalue70.value, NAp);
		valA1 = mergefunc(mykeyvalue01.value, mykeyvalue11.value, NAp);
		valB1 = mergefunc(mykeyvalue21.value, mykeyvalue31.value, NAp);
		valC1 = mergefunc(mykeyvalue41.value, mykeyvalue51.value, NAp);
		valD1 = mergefunc(mykeyvalue61.value, mykeyvalue71.value, NAp);
		valA2 = mergefunc(mykeyvalue02.value, mykeyvalue12.value, NAp);
		valB2 = mergefunc(mykeyvalue22.value, mykeyvalue32.value, NAp);
		valC2 = mergefunc(mykeyvalue42.value, mykeyvalue52.value, NAp);
		valD2 = mergefunc(mykeyvalue62.value, mykeyvalue72.value, NAp);
		valA3 = mergefunc(mykeyvalue03.value, mykeyvalue13.value, NAp);
		valB3 = mergefunc(mykeyvalue23.value, mykeyvalue33.value, NAp);
		valC3 = mergefunc(mykeyvalue43.value, mykeyvalue53.value, NAp);
		valD3 = mergefunc(mykeyvalue63.value, mykeyvalue73.value, NAp);
		valA4 = mergefunc(mykeyvalue04.value, mykeyvalue14.value, NAp);
		valB4 = mergefunc(mykeyvalue24.value, mykeyvalue34.value, NAp);
		valC4 = mergefunc(mykeyvalue44.value, mykeyvalue54.value, NAp);
		valD4 = mergefunc(mykeyvalue64.value, mykeyvalue74.value, NAp);
		valA5 = mergefunc(mykeyvalue05.value, mykeyvalue15.value, NAp);
		valB5 = mergefunc(mykeyvalue25.value, mykeyvalue35.value, NAp);
		valC5 = mergefunc(mykeyvalue45.value, mykeyvalue55.value, NAp);
		valD5 = mergefunc(mykeyvalue65.value, mykeyvalue75.value, NAp);
		valA6 = mergefunc(mykeyvalue06.value, mykeyvalue16.value, NAp);
		valB6 = mergefunc(mykeyvalue26.value, mykeyvalue36.value, NAp);
		valC6 = mergefunc(mykeyvalue46.value, mykeyvalue56.value, NAp);
		valD6 = mergefunc(mykeyvalue66.value, mykeyvalue76.value, NAp);
		valA7 = mergefunc(mykeyvalue07.value, mykeyvalue17.value, NAp);
		valB7 = mergefunc(mykeyvalue27.value, mykeyvalue37.value, NAp);
		valC7 = mergefunc(mykeyvalue47.value, mykeyvalue57.value, NAp);
		valD7 = mergefunc(mykeyvalue67.value, mykeyvalue77.value, NAp);
		value_t valPA0 = mergefunc(valA0, valB0, NAp);
		value_t valPB0 = mergefunc(valC0, valD0, NAp);
		value_t valPC0 = mergefunc(valE0, valF0, NAp);
		value_t valRA0 = mergefunc(valPA0, valPB0, NAp);
		value_t valRB0 = mergefunc(valPC0, valF0, NAp);
		value_t valRZ0 = mergefunc(valRA0, valRB0, NAp);
		value_t valPA1 = mergefunc(valA1, valB1, NAp);
		value_t valPB1 = mergefunc(valC1, valD1, NAp);
		value_t valPC1 = mergefunc(valE1, valF1, NAp);
		value_t valRA1 = mergefunc(valPA1, valPB1, NAp);
		value_t valRB1 = mergefunc(valPC1, valF1, NAp);
		value_t valRZ1 = mergefunc(valRA1, valRB1, NAp);
		value_t valPA2 = mergefunc(valA2, valB2, NAp);
		value_t valPB2 = mergefunc(valC2, valD2, NAp);
		value_t valPC2 = mergefunc(valE2, valF2, NAp);
		value_t valRA2 = mergefunc(valPA2, valPB2, NAp);
		value_t valRB2 = mergefunc(valPC2, valF2, NAp);
		value_t valRZ2 = mergefunc(valRA2, valRB2, NAp);
		value_t valPA3 = mergefunc(valA3, valB3, NAp);
		value_t valPB3 = mergefunc(valC3, valD3, NAp);
		value_t valPC3 = mergefunc(valE3, valF3, NAp);
		value_t valRA3 = mergefunc(valPA3, valPB3, NAp);
		value_t valRB3 = mergefunc(valPC3, valF3, NAp);
		value_t valRZ3 = mergefunc(valRA3, valRB3, NAp);
		value_t valPA4 = mergefunc(valA4, valB4, NAp);
		value_t valPB4 = mergefunc(valC4, valD4, NAp);
		value_t valPC4 = mergefunc(valE4, valF4, NAp);
		value_t valRA4 = mergefunc(valPA4, valPB4, NAp);
		value_t valRB4 = mergefunc(valPC4, valF4, NAp);
		value_t valRZ4 = mergefunc(valRA4, valRB4, NAp);
		value_t valPA5 = mergefunc(valA5, valB5, NAp);
		value_t valPB5 = mergefunc(valC5, valD5, NAp);
		value_t valPC5 = mergefunc(valE5, valF5, NAp);
		value_t valRA5 = mergefunc(valPA5, valPB5, NAp);
		value_t valRB5 = mergefunc(valPC5, valF5, NAp);
		value_t valRZ5 = mergefunc(valRA5, valRB5, NAp);
		value_t valPA6 = mergefunc(valA6, valB6, NAp);
		value_t valPB6 = mergefunc(valC6, valD6, NAp);
		value_t valPC6 = mergefunc(valE6, valF6, NAp);
		value_t valRA6 = mergefunc(valPA6, valPB6, NAp);
		value_t valRB6 = mergefunc(valPC6, valF6, NAp);
		value_t valRZ6 = mergefunc(valRA6, valRB6, NAp);
		value_t valPA7 = mergefunc(valA7, valB7, NAp);
		value_t valPB7 = mergefunc(valC7, valD7, NAp);
		value_t valPC7 = mergefunc(valE7, valF7, NAp);
		value_t valRA7 = mergefunc(valPA7, valPB7, NAp);
		value_t valRB7 = mergefunc(valPC7, valF7, NAp);
		value_t valRZ7 = mergefunc(valRA7, valRB7, NAp);
		
		#ifdef _WIDEWORD
		vdram[dramoffset_kvs + j].range(31, 0) = keyRZ0;
		vdram[dramoffset_kvs + j].range(63, 32) = valRZ0;
		vdram[dramoffset_kvs + j].range(95, 64) = keyRZ1;
		vdram[dramoffset_kvs + j].range(127, 96) = valRZ1;
		vdram[dramoffset_kvs + j].range(159, 128) = keyRZ2;
		vdram[dramoffset_kvs + j].range(191, 160) = valRZ2;
		vdram[dramoffset_kvs + j].range(223, 192) = keyRZ3;
		vdram[dramoffset_kvs + j].range(255, 224) = valRZ3;
		vdram[dramoffset_kvs + j].range(287, 256) = keyRZ4;
		vdram[dramoffset_kvs + j].range(319, 288) = valRZ4;
		vdram[dramoffset_kvs + j].range(351, 320) = keyRZ5;
		vdram[dramoffset_kvs + j].range(383, 352) = valRZ5;
		vdram[dramoffset_kvs + j].range(415, 384) = keyRZ6;
		vdram[dramoffset_kvs + j].range(447, 416) = valRZ6;
		vdram[dramoffset_kvs + j].range(479, 448) = keyRZ7;
		vdram[dramoffset_kvs + j].range(511, 480) = valRZ7;
		#else
		vdram[dramoffset_kvs + j].data[0].key = keyRZ0;
		vdram[dramoffset_kvs + j].data[0].value = valRZ0;
		vdram[dramoffset_kvs + j].data[1].key = keyRZ1;
		vdram[dramoffset_kvs + j].data[1].value = valRZ1;
		vdram[dramoffset_kvs + j].data[2].key = keyRZ2;
		vdram[dramoffset_kvs + j].data[2].value = valRZ2;
		vdram[dramoffset_kvs + j].data[3].key = keyRZ3;
		vdram[dramoffset_kvs + j].data[3].value = valRZ3;
		vdram[dramoffset_kvs + j].data[4].key = keyRZ4;
		vdram[dramoffset_kvs + j].data[4].value = valRZ4;
		vdram[dramoffset_kvs + j].data[5].key = keyRZ5;
		vdram[dramoffset_kvs + j].data[5].value = valRZ5;
		vdram[dramoffset_kvs + j].data[6].key = keyRZ6;
		vdram[dramoffset_kvs + j].data[6].value = valRZ6;
		vdram[dramoffset_kvs + j].data[7].key = keyRZ7;
		vdram[dramoffset_kvs + j].data[7].value = valRZ7;
		#endif
	}
	return;
}
void
	#if defined(SW)
	actsproc::
	#endif
merge8andsavevdata(bool_type enable, uint512_dt * vdram, keyvalue_vbuffer_t vbuffer0[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t vbuffer1[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t vbuffer2[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t vbuffer3[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t vbuffer4[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t vbuffer5[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t vbuffer6[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t vbuffer7[VDATA_PACKINGSIZE][BLOCKRAM_SIZE], unsigned int begincol, batch_type bufferoffset_kvs, unsigned int dramoffset_kvs){
	if(enable == OFF){ return; }
	keyvalue_t dummykv;
	dummykv.key = 0xFFFFFFFF; dummykv.value = 0xFFFFFFFF;
	
	keyy_t keyA0 = dummykv.key;
	value_t valA0 = dummykv.key;
	keyy_t keyB0 = dummykv.key;
	value_t valB0 = dummykv.key;
	keyy_t keyC0 = dummykv.key;
	value_t valC0 = dummykv.key;
	keyy_t keyD0 = dummykv.key;
	value_t valD0 = dummykv.key;
	keyy_t keyE0 = dummykv.key;
	value_t valE0 = dummykv.key;
	keyy_t keyF0 = dummykv.key;
	value_t valF0 = dummykv.key;
	keyy_t keyG0 = dummykv.key;
	value_t valG0 = dummykv.key;
	keyy_t keyH0 = dummykv.key;
	value_t valH0 = dummykv.key;
	keyy_t keyI0 = dummykv.key;
	value_t valI0 = dummykv.key;
	keyy_t keyJ0 = dummykv.key;
	value_t valJ0 = dummykv.key;
	keyy_t keyK0 = dummykv.key;
	value_t valK0 = dummykv.key;
	keyy_t keyL0 = dummykv.key;
	value_t valL0 = dummykv.key;
	keyy_t keyM0 = dummykv.key;
	value_t valM0 = dummykv.key;
	keyy_t keyA1 = dummykv.key;
	value_t valA1 = dummykv.key;
	keyy_t keyB1 = dummykv.key;
	value_t valB1 = dummykv.key;
	keyy_t keyC1 = dummykv.key;
	value_t valC1 = dummykv.key;
	keyy_t keyD1 = dummykv.key;
	value_t valD1 = dummykv.key;
	keyy_t keyE1 = dummykv.key;
	value_t valE1 = dummykv.key;
	keyy_t keyF1 = dummykv.key;
	value_t valF1 = dummykv.key;
	keyy_t keyG1 = dummykv.key;
	value_t valG1 = dummykv.key;
	keyy_t keyH1 = dummykv.key;
	value_t valH1 = dummykv.key;
	keyy_t keyI1 = dummykv.key;
	value_t valI1 = dummykv.key;
	keyy_t keyJ1 = dummykv.key;
	value_t valJ1 = dummykv.key;
	keyy_t keyK1 = dummykv.key;
	value_t valK1 = dummykv.key;
	keyy_t keyL1 = dummykv.key;
	value_t valL1 = dummykv.key;
	keyy_t keyM1 = dummykv.key;
	value_t valM1 = dummykv.key;
	keyy_t keyA2 = dummykv.key;
	value_t valA2 = dummykv.key;
	keyy_t keyB2 = dummykv.key;
	value_t valB2 = dummykv.key;
	keyy_t keyC2 = dummykv.key;
	value_t valC2 = dummykv.key;
	keyy_t keyD2 = dummykv.key;
	value_t valD2 = dummykv.key;
	keyy_t keyE2 = dummykv.key;
	value_t valE2 = dummykv.key;
	keyy_t keyF2 = dummykv.key;
	value_t valF2 = dummykv.key;
	keyy_t keyG2 = dummykv.key;
	value_t valG2 = dummykv.key;
	keyy_t keyH2 = dummykv.key;
	value_t valH2 = dummykv.key;
	keyy_t keyI2 = dummykv.key;
	value_t valI2 = dummykv.key;
	keyy_t keyJ2 = dummykv.key;
	value_t valJ2 = dummykv.key;
	keyy_t keyK2 = dummykv.key;
	value_t valK2 = dummykv.key;
	keyy_t keyL2 = dummykv.key;
	value_t valL2 = dummykv.key;
	keyy_t keyM2 = dummykv.key;
	value_t valM2 = dummykv.key;
	keyy_t keyA3 = dummykv.key;
	value_t valA3 = dummykv.key;
	keyy_t keyB3 = dummykv.key;
	value_t valB3 = dummykv.key;
	keyy_t keyC3 = dummykv.key;
	value_t valC3 = dummykv.key;
	keyy_t keyD3 = dummykv.key;
	value_t valD3 = dummykv.key;
	keyy_t keyE3 = dummykv.key;
	value_t valE3 = dummykv.key;
	keyy_t keyF3 = dummykv.key;
	value_t valF3 = dummykv.key;
	keyy_t keyG3 = dummykv.key;
	value_t valG3 = dummykv.key;
	keyy_t keyH3 = dummykv.key;
	value_t valH3 = dummykv.key;
	keyy_t keyI3 = dummykv.key;
	value_t valI3 = dummykv.key;
	keyy_t keyJ3 = dummykv.key;
	value_t valJ3 = dummykv.key;
	keyy_t keyK3 = dummykv.key;
	value_t valK3 = dummykv.key;
	keyy_t keyL3 = dummykv.key;
	value_t valL3 = dummykv.key;
	keyy_t keyM3 = dummykv.key;
	value_t valM3 = dummykv.key;
	keyy_t keyA4 = dummykv.key;
	value_t valA4 = dummykv.key;
	keyy_t keyB4 = dummykv.key;
	value_t valB4 = dummykv.key;
	keyy_t keyC4 = dummykv.key;
	value_t valC4 = dummykv.key;
	keyy_t keyD4 = dummykv.key;
	value_t valD4 = dummykv.key;
	keyy_t keyE4 = dummykv.key;
	value_t valE4 = dummykv.key;
	keyy_t keyF4 = dummykv.key;
	value_t valF4 = dummykv.key;
	keyy_t keyG4 = dummykv.key;
	value_t valG4 = dummykv.key;
	keyy_t keyH4 = dummykv.key;
	value_t valH4 = dummykv.key;
	keyy_t keyI4 = dummykv.key;
	value_t valI4 = dummykv.key;
	keyy_t keyJ4 = dummykv.key;
	value_t valJ4 = dummykv.key;
	keyy_t keyK4 = dummykv.key;
	value_t valK4 = dummykv.key;
	keyy_t keyL4 = dummykv.key;
	value_t valL4 = dummykv.key;
	keyy_t keyM4 = dummykv.key;
	value_t valM4 = dummykv.key;
	keyy_t keyA5 = dummykv.key;
	value_t valA5 = dummykv.key;
	keyy_t keyB5 = dummykv.key;
	value_t valB5 = dummykv.key;
	keyy_t keyC5 = dummykv.key;
	value_t valC5 = dummykv.key;
	keyy_t keyD5 = dummykv.key;
	value_t valD5 = dummykv.key;
	keyy_t keyE5 = dummykv.key;
	value_t valE5 = dummykv.key;
	keyy_t keyF5 = dummykv.key;
	value_t valF5 = dummykv.key;
	keyy_t keyG5 = dummykv.key;
	value_t valG5 = dummykv.key;
	keyy_t keyH5 = dummykv.key;
	value_t valH5 = dummykv.key;
	keyy_t keyI5 = dummykv.key;
	value_t valI5 = dummykv.key;
	keyy_t keyJ5 = dummykv.key;
	value_t valJ5 = dummykv.key;
	keyy_t keyK5 = dummykv.key;
	value_t valK5 = dummykv.key;
	keyy_t keyL5 = dummykv.key;
	value_t valL5 = dummykv.key;
	keyy_t keyM5 = dummykv.key;
	value_t valM5 = dummykv.key;
	keyy_t keyA6 = dummykv.key;
	value_t valA6 = dummykv.key;
	keyy_t keyB6 = dummykv.key;
	value_t valB6 = dummykv.key;
	keyy_t keyC6 = dummykv.key;
	value_t valC6 = dummykv.key;
	keyy_t keyD6 = dummykv.key;
	value_t valD6 = dummykv.key;
	keyy_t keyE6 = dummykv.key;
	value_t valE6 = dummykv.key;
	keyy_t keyF6 = dummykv.key;
	value_t valF6 = dummykv.key;
	keyy_t keyG6 = dummykv.key;
	value_t valG6 = dummykv.key;
	keyy_t keyH6 = dummykv.key;
	value_t valH6 = dummykv.key;
	keyy_t keyI6 = dummykv.key;
	value_t valI6 = dummykv.key;
	keyy_t keyJ6 = dummykv.key;
	value_t valJ6 = dummykv.key;
	keyy_t keyK6 = dummykv.key;
	value_t valK6 = dummykv.key;
	keyy_t keyL6 = dummykv.key;
	value_t valL6 = dummykv.key;
	keyy_t keyM6 = dummykv.key;
	value_t valM6 = dummykv.key;
	keyy_t keyA7 = dummykv.key;
	value_t valA7 = dummykv.key;
	keyy_t keyB7 = dummykv.key;
	value_t valB7 = dummykv.key;
	keyy_t keyC7 = dummykv.key;
	value_t valC7 = dummykv.key;
	keyy_t keyD7 = dummykv.key;
	value_t valD7 = dummykv.key;
	keyy_t keyE7 = dummykv.key;
	value_t valE7 = dummykv.key;
	keyy_t keyF7 = dummykv.key;
	value_t valF7 = dummykv.key;
	keyy_t keyG7 = dummykv.key;
	value_t valG7 = dummykv.key;
	keyy_t keyH7 = dummykv.key;
	value_t valH7 = dummykv.key;
	keyy_t keyI7 = dummykv.key;
	value_t valI7 = dummykv.key;
	keyy_t keyJ7 = dummykv.key;
	value_t valJ7 = dummykv.key;
	keyy_t keyK7 = dummykv.key;
	value_t valK7 = dummykv.key;
	keyy_t keyL7 = dummykv.key;
	value_t valL7 = dummykv.key;
	keyy_t keyM7 = dummykv.key;
	value_t valM7 = dummykv.key;
	
	MERGE8_LOOP1: for (buffer_type j=0; j<BLOCKRAM_SIZE; j++){
	#pragma HLS PIPELINE II=1
		keyvalue_t mykeyvalue00 = GETKV2(vbuffer0[begincol + 0][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue01 = GETKV2(vbuffer0[begincol + 1][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue02 = GETKV2(vbuffer0[begincol + 2][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue03 = GETKV2(vbuffer0[begincol + 3][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue04 = GETKV2(vbuffer0[begincol + 4][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue05 = GETKV2(vbuffer0[begincol + 5][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue06 = GETKV2(vbuffer0[begincol + 6][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue07 = GETKV2(vbuffer0[begincol + 7][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue10 = GETKV2(vbuffer1[begincol + 0][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue11 = GETKV2(vbuffer1[begincol + 1][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue12 = GETKV2(vbuffer1[begincol + 2][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue13 = GETKV2(vbuffer1[begincol + 3][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue14 = GETKV2(vbuffer1[begincol + 4][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue15 = GETKV2(vbuffer1[begincol + 5][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue16 = GETKV2(vbuffer1[begincol + 6][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue17 = GETKV2(vbuffer1[begincol + 7][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue20 = GETKV2(vbuffer2[begincol + 0][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue21 = GETKV2(vbuffer2[begincol + 1][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue22 = GETKV2(vbuffer2[begincol + 2][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue23 = GETKV2(vbuffer2[begincol + 3][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue24 = GETKV2(vbuffer2[begincol + 4][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue25 = GETKV2(vbuffer2[begincol + 5][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue26 = GETKV2(vbuffer2[begincol + 6][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue27 = GETKV2(vbuffer2[begincol + 7][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue30 = GETKV2(vbuffer3[begincol + 0][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue31 = GETKV2(vbuffer3[begincol + 1][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue32 = GETKV2(vbuffer3[begincol + 2][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue33 = GETKV2(vbuffer3[begincol + 3][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue34 = GETKV2(vbuffer3[begincol + 4][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue35 = GETKV2(vbuffer3[begincol + 5][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue36 = GETKV2(vbuffer3[begincol + 6][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue37 = GETKV2(vbuffer3[begincol + 7][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue40 = GETKV2(vbuffer4[begincol + 0][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue41 = GETKV2(vbuffer4[begincol + 1][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue42 = GETKV2(vbuffer4[begincol + 2][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue43 = GETKV2(vbuffer4[begincol + 3][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue44 = GETKV2(vbuffer4[begincol + 4][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue45 = GETKV2(vbuffer4[begincol + 5][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue46 = GETKV2(vbuffer4[begincol + 6][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue47 = GETKV2(vbuffer4[begincol + 7][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue50 = GETKV2(vbuffer5[begincol + 0][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue51 = GETKV2(vbuffer5[begincol + 1][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue52 = GETKV2(vbuffer5[begincol + 2][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue53 = GETKV2(vbuffer5[begincol + 3][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue54 = GETKV2(vbuffer5[begincol + 4][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue55 = GETKV2(vbuffer5[begincol + 5][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue56 = GETKV2(vbuffer5[begincol + 6][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue57 = GETKV2(vbuffer5[begincol + 7][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue60 = GETKV2(vbuffer6[begincol + 0][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue61 = GETKV2(vbuffer6[begincol + 1][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue62 = GETKV2(vbuffer6[begincol + 2][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue63 = GETKV2(vbuffer6[begincol + 3][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue64 = GETKV2(vbuffer6[begincol + 4][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue65 = GETKV2(vbuffer6[begincol + 5][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue66 = GETKV2(vbuffer6[begincol + 6][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue67 = GETKV2(vbuffer6[begincol + 7][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue70 = GETKV2(vbuffer7[begincol + 0][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue71 = GETKV2(vbuffer7[begincol + 1][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue72 = GETKV2(vbuffer7[begincol + 2][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue73 = GETKV2(vbuffer7[begincol + 3][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue74 = GETKV2(vbuffer7[begincol + 4][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue75 = GETKV2(vbuffer7[begincol + 5][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue76 = GETKV2(vbuffer7[begincol + 6][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue77 = GETKV2(vbuffer7[begincol + 7][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue80 = dummykv;
		keyvalue_t mykeyvalue81 = dummykv;
		keyvalue_t mykeyvalue82 = dummykv;
		keyvalue_t mykeyvalue83 = dummykv;
		keyvalue_t mykeyvalue84 = dummykv;
		keyvalue_t mykeyvalue85 = dummykv;
		keyvalue_t mykeyvalue86 = dummykv;
		keyvalue_t mykeyvalue87 = dummykv;
		keyvalue_t mykeyvalue90 = dummykv;
		keyvalue_t mykeyvalue91 = dummykv;
		keyvalue_t mykeyvalue92 = dummykv;
		keyvalue_t mykeyvalue93 = dummykv;
		keyvalue_t mykeyvalue94 = dummykv;
		keyvalue_t mykeyvalue95 = dummykv;
		keyvalue_t mykeyvalue96 = dummykv;
		keyvalue_t mykeyvalue97 = dummykv;
		keyvalue_t mykeyvalue100 = dummykv;
		keyvalue_t mykeyvalue101 = dummykv;
		keyvalue_t mykeyvalue102 = dummykv;
		keyvalue_t mykeyvalue103 = dummykv;
		keyvalue_t mykeyvalue104 = dummykv;
		keyvalue_t mykeyvalue105 = dummykv;
		keyvalue_t mykeyvalue106 = dummykv;
		keyvalue_t mykeyvalue107 = dummykv;
		keyvalue_t mykeyvalue110 = dummykv;
		keyvalue_t mykeyvalue111 = dummykv;
		keyvalue_t mykeyvalue112 = dummykv;
		keyvalue_t mykeyvalue113 = dummykv;
		keyvalue_t mykeyvalue114 = dummykv;
		keyvalue_t mykeyvalue115 = dummykv;
		keyvalue_t mykeyvalue116 = dummykv;
		keyvalue_t mykeyvalue117 = dummykv;
		keyvalue_t mykeyvalue120 = dummykv;
		keyvalue_t mykeyvalue121 = dummykv;
		keyvalue_t mykeyvalue122 = dummykv;
		keyvalue_t mykeyvalue123 = dummykv;
		keyvalue_t mykeyvalue124 = dummykv;
		keyvalue_t mykeyvalue125 = dummykv;
		keyvalue_t mykeyvalue126 = dummykv;
		keyvalue_t mykeyvalue127 = dummykv;
		keyvalue_t mykeyvalue130 = dummykv;
		keyvalue_t mykeyvalue131 = dummykv;
		keyvalue_t mykeyvalue132 = dummykv;
		keyvalue_t mykeyvalue133 = dummykv;
		keyvalue_t mykeyvalue134 = dummykv;
		keyvalue_t mykeyvalue135 = dummykv;
		keyvalue_t mykeyvalue136 = dummykv;
		keyvalue_t mykeyvalue137 = dummykv;
		keyvalue_t mykeyvalue140 = dummykv;
		keyvalue_t mykeyvalue141 = dummykv;
		keyvalue_t mykeyvalue142 = dummykv;
		keyvalue_t mykeyvalue143 = dummykv;
		keyvalue_t mykeyvalue144 = dummykv;
		keyvalue_t mykeyvalue145 = dummykv;
		keyvalue_t mykeyvalue146 = dummykv;
		keyvalue_t mykeyvalue147 = dummykv;
		
		//((n)/2)
		keyA0 = mergefunc(mykeyvalue00.key, mykeyvalue10.key, NAp);
		keyB0 = mergefunc(mykeyvalue20.key, mykeyvalue30.key, NAp);
		keyC0 = mergefunc(mykeyvalue40.key, mykeyvalue50.key, NAp);
		keyD0 = mergefunc(mykeyvalue60.key, mykeyvalue70.key, NAp);
		keyE0 = mergefunc(mykeyvalue80.key, mykeyvalue90.key, NAp);
		keyA1 = mergefunc(mykeyvalue01.key, mykeyvalue11.key, NAp);
		keyB1 = mergefunc(mykeyvalue21.key, mykeyvalue31.key, NAp);
		keyC1 = mergefunc(mykeyvalue41.key, mykeyvalue51.key, NAp);
		keyD1 = mergefunc(mykeyvalue61.key, mykeyvalue71.key, NAp);
		keyE1 = mergefunc(mykeyvalue81.key, mykeyvalue91.key, NAp);
		keyA2 = mergefunc(mykeyvalue02.key, mykeyvalue12.key, NAp);
		keyB2 = mergefunc(mykeyvalue22.key, mykeyvalue32.key, NAp);
		keyC2 = mergefunc(mykeyvalue42.key, mykeyvalue52.key, NAp);
		keyD2 = mergefunc(mykeyvalue62.key, mykeyvalue72.key, NAp);
		keyE2 = mergefunc(mykeyvalue82.key, mykeyvalue92.key, NAp);
		keyA3 = mergefunc(mykeyvalue03.key, mykeyvalue13.key, NAp);
		keyB3 = mergefunc(mykeyvalue23.key, mykeyvalue33.key, NAp);
		keyC3 = mergefunc(mykeyvalue43.key, mykeyvalue53.key, NAp);
		keyD3 = mergefunc(mykeyvalue63.key, mykeyvalue73.key, NAp);
		keyE3 = mergefunc(mykeyvalue83.key, mykeyvalue93.key, NAp);
		keyA4 = mergefunc(mykeyvalue04.key, mykeyvalue14.key, NAp);
		keyB4 = mergefunc(mykeyvalue24.key, mykeyvalue34.key, NAp);
		keyC4 = mergefunc(mykeyvalue44.key, mykeyvalue54.key, NAp);
		keyD4 = mergefunc(mykeyvalue64.key, mykeyvalue74.key, NAp);
		keyE4 = mergefunc(mykeyvalue84.key, mykeyvalue94.key, NAp);
		keyA5 = mergefunc(mykeyvalue05.key, mykeyvalue15.key, NAp);
		keyB5 = mergefunc(mykeyvalue25.key, mykeyvalue35.key, NAp);
		keyC5 = mergefunc(mykeyvalue45.key, mykeyvalue55.key, NAp);
		keyD5 = mergefunc(mykeyvalue65.key, mykeyvalue75.key, NAp);
		keyE5 = mergefunc(mykeyvalue85.key, mykeyvalue95.key, NAp);
		keyA6 = mergefunc(mykeyvalue06.key, mykeyvalue16.key, NAp);
		keyB6 = mergefunc(mykeyvalue26.key, mykeyvalue36.key, NAp);
		keyC6 = mergefunc(mykeyvalue46.key, mykeyvalue56.key, NAp);
		keyD6 = mergefunc(mykeyvalue66.key, mykeyvalue76.key, NAp);
		keyE6 = mergefunc(mykeyvalue86.key, mykeyvalue96.key, NAp);
		keyA7 = mergefunc(mykeyvalue07.key, mykeyvalue17.key, NAp);
		keyB7 = mergefunc(mykeyvalue27.key, mykeyvalue37.key, NAp);
		keyC7 = mergefunc(mykeyvalue47.key, mykeyvalue57.key, NAp);
		keyD7 = mergefunc(mykeyvalue67.key, mykeyvalue77.key, NAp);
		keyE7 = mergefunc(mykeyvalue87.key, mykeyvalue97.key, NAp);
		keyy_t keyPA0 = mergefunc(keyA0, keyB0, NAp);
		keyy_t keyPB0 = mergefunc(keyC0, keyD0, NAp);
		keyy_t keyPC0 = mergefunc(keyE0, keyF0, NAp);
		keyy_t keyRA0 = mergefunc(keyPA0, keyPB0, NAp);
		keyy_t keyRB0 = mergefunc(keyPC0, keyF0, NAp);
		keyy_t keyRZ0 = mergefunc(keyRA0, keyRB0, NAp);
		keyy_t keyPA1 = mergefunc(keyA1, keyB1, NAp);
		keyy_t keyPB1 = mergefunc(keyC1, keyD1, NAp);
		keyy_t keyPC1 = mergefunc(keyE1, keyF1, NAp);
		keyy_t keyRA1 = mergefunc(keyPA1, keyPB1, NAp);
		keyy_t keyRB1 = mergefunc(keyPC1, keyF1, NAp);
		keyy_t keyRZ1 = mergefunc(keyRA1, keyRB1, NAp);
		keyy_t keyPA2 = mergefunc(keyA2, keyB2, NAp);
		keyy_t keyPB2 = mergefunc(keyC2, keyD2, NAp);
		keyy_t keyPC2 = mergefunc(keyE2, keyF2, NAp);
		keyy_t keyRA2 = mergefunc(keyPA2, keyPB2, NAp);
		keyy_t keyRB2 = mergefunc(keyPC2, keyF2, NAp);
		keyy_t keyRZ2 = mergefunc(keyRA2, keyRB2, NAp);
		keyy_t keyPA3 = mergefunc(keyA3, keyB3, NAp);
		keyy_t keyPB3 = mergefunc(keyC3, keyD3, NAp);
		keyy_t keyPC3 = mergefunc(keyE3, keyF3, NAp);
		keyy_t keyRA3 = mergefunc(keyPA3, keyPB3, NAp);
		keyy_t keyRB3 = mergefunc(keyPC3, keyF3, NAp);
		keyy_t keyRZ3 = mergefunc(keyRA3, keyRB3, NAp);
		keyy_t keyPA4 = mergefunc(keyA4, keyB4, NAp);
		keyy_t keyPB4 = mergefunc(keyC4, keyD4, NAp);
		keyy_t keyPC4 = mergefunc(keyE4, keyF4, NAp);
		keyy_t keyRA4 = mergefunc(keyPA4, keyPB4, NAp);
		keyy_t keyRB4 = mergefunc(keyPC4, keyF4, NAp);
		keyy_t keyRZ4 = mergefunc(keyRA4, keyRB4, NAp);
		keyy_t keyPA5 = mergefunc(keyA5, keyB5, NAp);
		keyy_t keyPB5 = mergefunc(keyC5, keyD5, NAp);
		keyy_t keyPC5 = mergefunc(keyE5, keyF5, NAp);
		keyy_t keyRA5 = mergefunc(keyPA5, keyPB5, NAp);
		keyy_t keyRB5 = mergefunc(keyPC5, keyF5, NAp);
		keyy_t keyRZ5 = mergefunc(keyRA5, keyRB5, NAp);
		keyy_t keyPA6 = mergefunc(keyA6, keyB6, NAp);
		keyy_t keyPB6 = mergefunc(keyC6, keyD6, NAp);
		keyy_t keyPC6 = mergefunc(keyE6, keyF6, NAp);
		keyy_t keyRA6 = mergefunc(keyPA6, keyPB6, NAp);
		keyy_t keyRB6 = mergefunc(keyPC6, keyF6, NAp);
		keyy_t keyRZ6 = mergefunc(keyRA6, keyRB6, NAp);
		keyy_t keyPA7 = mergefunc(keyA7, keyB7, NAp);
		keyy_t keyPB7 = mergefunc(keyC7, keyD7, NAp);
		keyy_t keyPC7 = mergefunc(keyE7, keyF7, NAp);
		keyy_t keyRA7 = mergefunc(keyPA7, keyPB7, NAp);
		keyy_t keyRB7 = mergefunc(keyPC7, keyF7, NAp);
		keyy_t keyRZ7 = mergefunc(keyRA7, keyRB7, NAp);
		
		//((n)/2)
		valA0 = mergefunc(mykeyvalue00.value, mykeyvalue10.value, NAp);
		valB0 = mergefunc(mykeyvalue20.value, mykeyvalue30.value, NAp);
		valC0 = mergefunc(mykeyvalue40.value, mykeyvalue50.value, NAp);
		valD0 = mergefunc(mykeyvalue60.value, mykeyvalue70.value, NAp);
		valE0 = mergefunc(mykeyvalue80.value, mykeyvalue90.value, NAp);
		valA1 = mergefunc(mykeyvalue01.value, mykeyvalue11.value, NAp);
		valB1 = mergefunc(mykeyvalue21.value, mykeyvalue31.value, NAp);
		valC1 = mergefunc(mykeyvalue41.value, mykeyvalue51.value, NAp);
		valD1 = mergefunc(mykeyvalue61.value, mykeyvalue71.value, NAp);
		valE1 = mergefunc(mykeyvalue81.value, mykeyvalue91.value, NAp);
		valA2 = mergefunc(mykeyvalue02.value, mykeyvalue12.value, NAp);
		valB2 = mergefunc(mykeyvalue22.value, mykeyvalue32.value, NAp);
		valC2 = mergefunc(mykeyvalue42.value, mykeyvalue52.value, NAp);
		valD2 = mergefunc(mykeyvalue62.value, mykeyvalue72.value, NAp);
		valE2 = mergefunc(mykeyvalue82.value, mykeyvalue92.value, NAp);
		valA3 = mergefunc(mykeyvalue03.value, mykeyvalue13.value, NAp);
		valB3 = mergefunc(mykeyvalue23.value, mykeyvalue33.value, NAp);
		valC3 = mergefunc(mykeyvalue43.value, mykeyvalue53.value, NAp);
		valD3 = mergefunc(mykeyvalue63.value, mykeyvalue73.value, NAp);
		valE3 = mergefunc(mykeyvalue83.value, mykeyvalue93.value, NAp);
		valA4 = mergefunc(mykeyvalue04.value, mykeyvalue14.value, NAp);
		valB4 = mergefunc(mykeyvalue24.value, mykeyvalue34.value, NAp);
		valC4 = mergefunc(mykeyvalue44.value, mykeyvalue54.value, NAp);
		valD4 = mergefunc(mykeyvalue64.value, mykeyvalue74.value, NAp);
		valE4 = mergefunc(mykeyvalue84.value, mykeyvalue94.value, NAp);
		valA5 = mergefunc(mykeyvalue05.value, mykeyvalue15.value, NAp);
		valB5 = mergefunc(mykeyvalue25.value, mykeyvalue35.value, NAp);
		valC5 = mergefunc(mykeyvalue45.value, mykeyvalue55.value, NAp);
		valD5 = mergefunc(mykeyvalue65.value, mykeyvalue75.value, NAp);
		valE5 = mergefunc(mykeyvalue85.value, mykeyvalue95.value, NAp);
		valA6 = mergefunc(mykeyvalue06.value, mykeyvalue16.value, NAp);
		valB6 = mergefunc(mykeyvalue26.value, mykeyvalue36.value, NAp);
		valC6 = mergefunc(mykeyvalue46.value, mykeyvalue56.value, NAp);
		valD6 = mergefunc(mykeyvalue66.value, mykeyvalue76.value, NAp);
		valE6 = mergefunc(mykeyvalue86.value, mykeyvalue96.value, NAp);
		valA7 = mergefunc(mykeyvalue07.value, mykeyvalue17.value, NAp);
		valB7 = mergefunc(mykeyvalue27.value, mykeyvalue37.value, NAp);
		valC7 = mergefunc(mykeyvalue47.value, mykeyvalue57.value, NAp);
		valD7 = mergefunc(mykeyvalue67.value, mykeyvalue77.value, NAp);
		valE7 = mergefunc(mykeyvalue87.value, mykeyvalue97.value, NAp);
		value_t valPA0 = mergefunc(valA0, valB0, NAp);
		value_t valPB0 = mergefunc(valC0, valD0, NAp);
		value_t valPC0 = mergefunc(valE0, valF0, NAp);
		value_t valRA0 = mergefunc(valPA0, valPB0, NAp);
		value_t valRB0 = mergefunc(valPC0, valF0, NAp);
		value_t valRZ0 = mergefunc(valRA0, valRB0, NAp);
		value_t valPA1 = mergefunc(valA1, valB1, NAp);
		value_t valPB1 = mergefunc(valC1, valD1, NAp);
		value_t valPC1 = mergefunc(valE1, valF1, NAp);
		value_t valRA1 = mergefunc(valPA1, valPB1, NAp);
		value_t valRB1 = mergefunc(valPC1, valF1, NAp);
		value_t valRZ1 = mergefunc(valRA1, valRB1, NAp);
		value_t valPA2 = mergefunc(valA2, valB2, NAp);
		value_t valPB2 = mergefunc(valC2, valD2, NAp);
		value_t valPC2 = mergefunc(valE2, valF2, NAp);
		value_t valRA2 = mergefunc(valPA2, valPB2, NAp);
		value_t valRB2 = mergefunc(valPC2, valF2, NAp);
		value_t valRZ2 = mergefunc(valRA2, valRB2, NAp);
		value_t valPA3 = mergefunc(valA3, valB3, NAp);
		value_t valPB3 = mergefunc(valC3, valD3, NAp);
		value_t valPC3 = mergefunc(valE3, valF3, NAp);
		value_t valRA3 = mergefunc(valPA3, valPB3, NAp);
		value_t valRB3 = mergefunc(valPC3, valF3, NAp);
		value_t valRZ3 = mergefunc(valRA3, valRB3, NAp);
		value_t valPA4 = mergefunc(valA4, valB4, NAp);
		value_t valPB4 = mergefunc(valC4, valD4, NAp);
		value_t valPC4 = mergefunc(valE4, valF4, NAp);
		value_t valRA4 = mergefunc(valPA4, valPB4, NAp);
		value_t valRB4 = mergefunc(valPC4, valF4, NAp);
		value_t valRZ4 = mergefunc(valRA4, valRB4, NAp);
		value_t valPA5 = mergefunc(valA5, valB5, NAp);
		value_t valPB5 = mergefunc(valC5, valD5, NAp);
		value_t valPC5 = mergefunc(valE5, valF5, NAp);
		value_t valRA5 = mergefunc(valPA5, valPB5, NAp);
		value_t valRB5 = mergefunc(valPC5, valF5, NAp);
		value_t valRZ5 = mergefunc(valRA5, valRB5, NAp);
		value_t valPA6 = mergefunc(valA6, valB6, NAp);
		value_t valPB6 = mergefunc(valC6, valD6, NAp);
		value_t valPC6 = mergefunc(valE6, valF6, NAp);
		value_t valRA6 = mergefunc(valPA6, valPB6, NAp);
		value_t valRB6 = mergefunc(valPC6, valF6, NAp);
		value_t valRZ6 = mergefunc(valRA6, valRB6, NAp);
		value_t valPA7 = mergefunc(valA7, valB7, NAp);
		value_t valPB7 = mergefunc(valC7, valD7, NAp);
		value_t valPC7 = mergefunc(valE7, valF7, NAp);
		value_t valRA7 = mergefunc(valPA7, valPB7, NAp);
		value_t valRB7 = mergefunc(valPC7, valF7, NAp);
		value_t valRZ7 = mergefunc(valRA7, valRB7, NAp);
		
		#ifdef _WIDEWORD
		vdram[dramoffset_kvs + j].range(31, 0) = keyRZ0;
		vdram[dramoffset_kvs + j].range(63, 32) = valRZ0;
		vdram[dramoffset_kvs + j].range(95, 64) = keyRZ1;
		vdram[dramoffset_kvs + j].range(127, 96) = valRZ1;
		vdram[dramoffset_kvs + j].range(159, 128) = keyRZ2;
		vdram[dramoffset_kvs + j].range(191, 160) = valRZ2;
		vdram[dramoffset_kvs + j].range(223, 192) = keyRZ3;
		vdram[dramoffset_kvs + j].range(255, 224) = valRZ3;
		vdram[dramoffset_kvs + j].range(287, 256) = keyRZ4;
		vdram[dramoffset_kvs + j].range(319, 288) = valRZ4;
		vdram[dramoffset_kvs + j].range(351, 320) = keyRZ5;
		vdram[dramoffset_kvs + j].range(383, 352) = valRZ5;
		vdram[dramoffset_kvs + j].range(415, 384) = keyRZ6;
		vdram[dramoffset_kvs + j].range(447, 416) = valRZ6;
		vdram[dramoffset_kvs + j].range(479, 448) = keyRZ7;
		vdram[dramoffset_kvs + j].range(511, 480) = valRZ7;
		#else
		vdram[dramoffset_kvs + j].data[0].key = keyRZ0;
		vdram[dramoffset_kvs + j].data[0].value = valRZ0;
		vdram[dramoffset_kvs + j].data[1].key = keyRZ1;
		vdram[dramoffset_kvs + j].data[1].value = valRZ1;
		vdram[dramoffset_kvs + j].data[2].key = keyRZ2;
		vdram[dramoffset_kvs + j].data[2].value = valRZ2;
		vdram[dramoffset_kvs + j].data[3].key = keyRZ3;
		vdram[dramoffset_kvs + j].data[3].value = valRZ3;
		vdram[dramoffset_kvs + j].data[4].key = keyRZ4;
		vdram[dramoffset_kvs + j].data[4].value = valRZ4;
		vdram[dramoffset_kvs + j].data[5].key = keyRZ5;
		vdram[dramoffset_kvs + j].data[5].value = valRZ5;
		vdram[dramoffset_kvs + j].data[6].key = keyRZ6;
		vdram[dramoffset_kvs + j].data[6].value = valRZ6;
		vdram[dramoffset_kvs + j].data[7].key = keyRZ7;
		vdram[dramoffset_kvs + j].data[7].value = valRZ7;
		#endif
	}
	return;
}
void
	#if defined(SW)
	actsproc::
	#endif
merge9andsavevdata(bool_type enable, uint512_dt * vdram, keyvalue_vbuffer_t vbuffer0[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t vbuffer1[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t vbuffer2[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t vbuffer3[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t vbuffer4[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t vbuffer5[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t vbuffer6[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t vbuffer7[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t vbuffer8[VDATA_PACKINGSIZE][BLOCKRAM_SIZE], unsigned int begincol, batch_type bufferoffset_kvs, unsigned int dramoffset_kvs){
	if(enable == OFF){ return; }
	keyvalue_t dummykv;
	dummykv.key = 0xFFFFFFFF; dummykv.value = 0xFFFFFFFF;
	
	keyy_t keyA0 = dummykv.key;
	value_t valA0 = dummykv.key;
	keyy_t keyB0 = dummykv.key;
	value_t valB0 = dummykv.key;
	keyy_t keyC0 = dummykv.key;
	value_t valC0 = dummykv.key;
	keyy_t keyD0 = dummykv.key;
	value_t valD0 = dummykv.key;
	keyy_t keyE0 = dummykv.key;
	value_t valE0 = dummykv.key;
	keyy_t keyF0 = dummykv.key;
	value_t valF0 = dummykv.key;
	keyy_t keyG0 = dummykv.key;
	value_t valG0 = dummykv.key;
	keyy_t keyH0 = dummykv.key;
	value_t valH0 = dummykv.key;
	keyy_t keyI0 = dummykv.key;
	value_t valI0 = dummykv.key;
	keyy_t keyJ0 = dummykv.key;
	value_t valJ0 = dummykv.key;
	keyy_t keyK0 = dummykv.key;
	value_t valK0 = dummykv.key;
	keyy_t keyL0 = dummykv.key;
	value_t valL0 = dummykv.key;
	keyy_t keyM0 = dummykv.key;
	value_t valM0 = dummykv.key;
	keyy_t keyA1 = dummykv.key;
	value_t valA1 = dummykv.key;
	keyy_t keyB1 = dummykv.key;
	value_t valB1 = dummykv.key;
	keyy_t keyC1 = dummykv.key;
	value_t valC1 = dummykv.key;
	keyy_t keyD1 = dummykv.key;
	value_t valD1 = dummykv.key;
	keyy_t keyE1 = dummykv.key;
	value_t valE1 = dummykv.key;
	keyy_t keyF1 = dummykv.key;
	value_t valF1 = dummykv.key;
	keyy_t keyG1 = dummykv.key;
	value_t valG1 = dummykv.key;
	keyy_t keyH1 = dummykv.key;
	value_t valH1 = dummykv.key;
	keyy_t keyI1 = dummykv.key;
	value_t valI1 = dummykv.key;
	keyy_t keyJ1 = dummykv.key;
	value_t valJ1 = dummykv.key;
	keyy_t keyK1 = dummykv.key;
	value_t valK1 = dummykv.key;
	keyy_t keyL1 = dummykv.key;
	value_t valL1 = dummykv.key;
	keyy_t keyM1 = dummykv.key;
	value_t valM1 = dummykv.key;
	keyy_t keyA2 = dummykv.key;
	value_t valA2 = dummykv.key;
	keyy_t keyB2 = dummykv.key;
	value_t valB2 = dummykv.key;
	keyy_t keyC2 = dummykv.key;
	value_t valC2 = dummykv.key;
	keyy_t keyD2 = dummykv.key;
	value_t valD2 = dummykv.key;
	keyy_t keyE2 = dummykv.key;
	value_t valE2 = dummykv.key;
	keyy_t keyF2 = dummykv.key;
	value_t valF2 = dummykv.key;
	keyy_t keyG2 = dummykv.key;
	value_t valG2 = dummykv.key;
	keyy_t keyH2 = dummykv.key;
	value_t valH2 = dummykv.key;
	keyy_t keyI2 = dummykv.key;
	value_t valI2 = dummykv.key;
	keyy_t keyJ2 = dummykv.key;
	value_t valJ2 = dummykv.key;
	keyy_t keyK2 = dummykv.key;
	value_t valK2 = dummykv.key;
	keyy_t keyL2 = dummykv.key;
	value_t valL2 = dummykv.key;
	keyy_t keyM2 = dummykv.key;
	value_t valM2 = dummykv.key;
	keyy_t keyA3 = dummykv.key;
	value_t valA3 = dummykv.key;
	keyy_t keyB3 = dummykv.key;
	value_t valB3 = dummykv.key;
	keyy_t keyC3 = dummykv.key;
	value_t valC3 = dummykv.key;
	keyy_t keyD3 = dummykv.key;
	value_t valD3 = dummykv.key;
	keyy_t keyE3 = dummykv.key;
	value_t valE3 = dummykv.key;
	keyy_t keyF3 = dummykv.key;
	value_t valF3 = dummykv.key;
	keyy_t keyG3 = dummykv.key;
	value_t valG3 = dummykv.key;
	keyy_t keyH3 = dummykv.key;
	value_t valH3 = dummykv.key;
	keyy_t keyI3 = dummykv.key;
	value_t valI3 = dummykv.key;
	keyy_t keyJ3 = dummykv.key;
	value_t valJ3 = dummykv.key;
	keyy_t keyK3 = dummykv.key;
	value_t valK3 = dummykv.key;
	keyy_t keyL3 = dummykv.key;
	value_t valL3 = dummykv.key;
	keyy_t keyM3 = dummykv.key;
	value_t valM3 = dummykv.key;
	keyy_t keyA4 = dummykv.key;
	value_t valA4 = dummykv.key;
	keyy_t keyB4 = dummykv.key;
	value_t valB4 = dummykv.key;
	keyy_t keyC4 = dummykv.key;
	value_t valC4 = dummykv.key;
	keyy_t keyD4 = dummykv.key;
	value_t valD4 = dummykv.key;
	keyy_t keyE4 = dummykv.key;
	value_t valE4 = dummykv.key;
	keyy_t keyF4 = dummykv.key;
	value_t valF4 = dummykv.key;
	keyy_t keyG4 = dummykv.key;
	value_t valG4 = dummykv.key;
	keyy_t keyH4 = dummykv.key;
	value_t valH4 = dummykv.key;
	keyy_t keyI4 = dummykv.key;
	value_t valI4 = dummykv.key;
	keyy_t keyJ4 = dummykv.key;
	value_t valJ4 = dummykv.key;
	keyy_t keyK4 = dummykv.key;
	value_t valK4 = dummykv.key;
	keyy_t keyL4 = dummykv.key;
	value_t valL4 = dummykv.key;
	keyy_t keyM4 = dummykv.key;
	value_t valM4 = dummykv.key;
	keyy_t keyA5 = dummykv.key;
	value_t valA5 = dummykv.key;
	keyy_t keyB5 = dummykv.key;
	value_t valB5 = dummykv.key;
	keyy_t keyC5 = dummykv.key;
	value_t valC5 = dummykv.key;
	keyy_t keyD5 = dummykv.key;
	value_t valD5 = dummykv.key;
	keyy_t keyE5 = dummykv.key;
	value_t valE5 = dummykv.key;
	keyy_t keyF5 = dummykv.key;
	value_t valF5 = dummykv.key;
	keyy_t keyG5 = dummykv.key;
	value_t valG5 = dummykv.key;
	keyy_t keyH5 = dummykv.key;
	value_t valH5 = dummykv.key;
	keyy_t keyI5 = dummykv.key;
	value_t valI5 = dummykv.key;
	keyy_t keyJ5 = dummykv.key;
	value_t valJ5 = dummykv.key;
	keyy_t keyK5 = dummykv.key;
	value_t valK5 = dummykv.key;
	keyy_t keyL5 = dummykv.key;
	value_t valL5 = dummykv.key;
	keyy_t keyM5 = dummykv.key;
	value_t valM5 = dummykv.key;
	keyy_t keyA6 = dummykv.key;
	value_t valA6 = dummykv.key;
	keyy_t keyB6 = dummykv.key;
	value_t valB6 = dummykv.key;
	keyy_t keyC6 = dummykv.key;
	value_t valC6 = dummykv.key;
	keyy_t keyD6 = dummykv.key;
	value_t valD6 = dummykv.key;
	keyy_t keyE6 = dummykv.key;
	value_t valE6 = dummykv.key;
	keyy_t keyF6 = dummykv.key;
	value_t valF6 = dummykv.key;
	keyy_t keyG6 = dummykv.key;
	value_t valG6 = dummykv.key;
	keyy_t keyH6 = dummykv.key;
	value_t valH6 = dummykv.key;
	keyy_t keyI6 = dummykv.key;
	value_t valI6 = dummykv.key;
	keyy_t keyJ6 = dummykv.key;
	value_t valJ6 = dummykv.key;
	keyy_t keyK6 = dummykv.key;
	value_t valK6 = dummykv.key;
	keyy_t keyL6 = dummykv.key;
	value_t valL6 = dummykv.key;
	keyy_t keyM6 = dummykv.key;
	value_t valM6 = dummykv.key;
	keyy_t keyA7 = dummykv.key;
	value_t valA7 = dummykv.key;
	keyy_t keyB7 = dummykv.key;
	value_t valB7 = dummykv.key;
	keyy_t keyC7 = dummykv.key;
	value_t valC7 = dummykv.key;
	keyy_t keyD7 = dummykv.key;
	value_t valD7 = dummykv.key;
	keyy_t keyE7 = dummykv.key;
	value_t valE7 = dummykv.key;
	keyy_t keyF7 = dummykv.key;
	value_t valF7 = dummykv.key;
	keyy_t keyG7 = dummykv.key;
	value_t valG7 = dummykv.key;
	keyy_t keyH7 = dummykv.key;
	value_t valH7 = dummykv.key;
	keyy_t keyI7 = dummykv.key;
	value_t valI7 = dummykv.key;
	keyy_t keyJ7 = dummykv.key;
	value_t valJ7 = dummykv.key;
	keyy_t keyK7 = dummykv.key;
	value_t valK7 = dummykv.key;
	keyy_t keyL7 = dummykv.key;
	value_t valL7 = dummykv.key;
	keyy_t keyM7 = dummykv.key;
	value_t valM7 = dummykv.key;
	
	MERGE9_LOOP1: for (buffer_type j=0; j<BLOCKRAM_SIZE; j++){
	#pragma HLS PIPELINE II=1
		keyvalue_t mykeyvalue00 = GETKV2(vbuffer0[begincol + 0][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue01 = GETKV2(vbuffer0[begincol + 1][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue02 = GETKV2(vbuffer0[begincol + 2][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue03 = GETKV2(vbuffer0[begincol + 3][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue04 = GETKV2(vbuffer0[begincol + 4][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue05 = GETKV2(vbuffer0[begincol + 5][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue06 = GETKV2(vbuffer0[begincol + 6][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue07 = GETKV2(vbuffer0[begincol + 7][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue10 = GETKV2(vbuffer1[begincol + 0][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue11 = GETKV2(vbuffer1[begincol + 1][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue12 = GETKV2(vbuffer1[begincol + 2][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue13 = GETKV2(vbuffer1[begincol + 3][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue14 = GETKV2(vbuffer1[begincol + 4][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue15 = GETKV2(vbuffer1[begincol + 5][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue16 = GETKV2(vbuffer1[begincol + 6][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue17 = GETKV2(vbuffer1[begincol + 7][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue20 = GETKV2(vbuffer2[begincol + 0][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue21 = GETKV2(vbuffer2[begincol + 1][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue22 = GETKV2(vbuffer2[begincol + 2][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue23 = GETKV2(vbuffer2[begincol + 3][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue24 = GETKV2(vbuffer2[begincol + 4][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue25 = GETKV2(vbuffer2[begincol + 5][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue26 = GETKV2(vbuffer2[begincol + 6][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue27 = GETKV2(vbuffer2[begincol + 7][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue30 = GETKV2(vbuffer3[begincol + 0][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue31 = GETKV2(vbuffer3[begincol + 1][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue32 = GETKV2(vbuffer3[begincol + 2][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue33 = GETKV2(vbuffer3[begincol + 3][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue34 = GETKV2(vbuffer3[begincol + 4][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue35 = GETKV2(vbuffer3[begincol + 5][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue36 = GETKV2(vbuffer3[begincol + 6][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue37 = GETKV2(vbuffer3[begincol + 7][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue40 = GETKV2(vbuffer4[begincol + 0][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue41 = GETKV2(vbuffer4[begincol + 1][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue42 = GETKV2(vbuffer4[begincol + 2][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue43 = GETKV2(vbuffer4[begincol + 3][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue44 = GETKV2(vbuffer4[begincol + 4][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue45 = GETKV2(vbuffer4[begincol + 5][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue46 = GETKV2(vbuffer4[begincol + 6][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue47 = GETKV2(vbuffer4[begincol + 7][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue50 = GETKV2(vbuffer5[begincol + 0][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue51 = GETKV2(vbuffer5[begincol + 1][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue52 = GETKV2(vbuffer5[begincol + 2][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue53 = GETKV2(vbuffer5[begincol + 3][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue54 = GETKV2(vbuffer5[begincol + 4][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue55 = GETKV2(vbuffer5[begincol + 5][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue56 = GETKV2(vbuffer5[begincol + 6][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue57 = GETKV2(vbuffer5[begincol + 7][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue60 = GETKV2(vbuffer6[begincol + 0][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue61 = GETKV2(vbuffer6[begincol + 1][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue62 = GETKV2(vbuffer6[begincol + 2][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue63 = GETKV2(vbuffer6[begincol + 3][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue64 = GETKV2(vbuffer6[begincol + 4][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue65 = GETKV2(vbuffer6[begincol + 5][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue66 = GETKV2(vbuffer6[begincol + 6][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue67 = GETKV2(vbuffer6[begincol + 7][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue70 = GETKV2(vbuffer7[begincol + 0][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue71 = GETKV2(vbuffer7[begincol + 1][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue72 = GETKV2(vbuffer7[begincol + 2][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue73 = GETKV2(vbuffer7[begincol + 3][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue74 = GETKV2(vbuffer7[begincol + 4][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue75 = GETKV2(vbuffer7[begincol + 5][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue76 = GETKV2(vbuffer7[begincol + 6][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue77 = GETKV2(vbuffer7[begincol + 7][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue80 = GETKV2(vbuffer8[begincol + 0][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue81 = GETKV2(vbuffer8[begincol + 1][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue82 = GETKV2(vbuffer8[begincol + 2][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue83 = GETKV2(vbuffer8[begincol + 3][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue84 = GETKV2(vbuffer8[begincol + 4][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue85 = GETKV2(vbuffer8[begincol + 5][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue86 = GETKV2(vbuffer8[begincol + 6][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue87 = GETKV2(vbuffer8[begincol + 7][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue90 = dummykv;
		keyvalue_t mykeyvalue91 = dummykv;
		keyvalue_t mykeyvalue92 = dummykv;
		keyvalue_t mykeyvalue93 = dummykv;
		keyvalue_t mykeyvalue94 = dummykv;
		keyvalue_t mykeyvalue95 = dummykv;
		keyvalue_t mykeyvalue96 = dummykv;
		keyvalue_t mykeyvalue97 = dummykv;
		keyvalue_t mykeyvalue100 = dummykv;
		keyvalue_t mykeyvalue101 = dummykv;
		keyvalue_t mykeyvalue102 = dummykv;
		keyvalue_t mykeyvalue103 = dummykv;
		keyvalue_t mykeyvalue104 = dummykv;
		keyvalue_t mykeyvalue105 = dummykv;
		keyvalue_t mykeyvalue106 = dummykv;
		keyvalue_t mykeyvalue107 = dummykv;
		keyvalue_t mykeyvalue110 = dummykv;
		keyvalue_t mykeyvalue111 = dummykv;
		keyvalue_t mykeyvalue112 = dummykv;
		keyvalue_t mykeyvalue113 = dummykv;
		keyvalue_t mykeyvalue114 = dummykv;
		keyvalue_t mykeyvalue115 = dummykv;
		keyvalue_t mykeyvalue116 = dummykv;
		keyvalue_t mykeyvalue117 = dummykv;
		keyvalue_t mykeyvalue120 = dummykv;
		keyvalue_t mykeyvalue121 = dummykv;
		keyvalue_t mykeyvalue122 = dummykv;
		keyvalue_t mykeyvalue123 = dummykv;
		keyvalue_t mykeyvalue124 = dummykv;
		keyvalue_t mykeyvalue125 = dummykv;
		keyvalue_t mykeyvalue126 = dummykv;
		keyvalue_t mykeyvalue127 = dummykv;
		keyvalue_t mykeyvalue130 = dummykv;
		keyvalue_t mykeyvalue131 = dummykv;
		keyvalue_t mykeyvalue132 = dummykv;
		keyvalue_t mykeyvalue133 = dummykv;
		keyvalue_t mykeyvalue134 = dummykv;
		keyvalue_t mykeyvalue135 = dummykv;
		keyvalue_t mykeyvalue136 = dummykv;
		keyvalue_t mykeyvalue137 = dummykv;
		keyvalue_t mykeyvalue140 = dummykv;
		keyvalue_t mykeyvalue141 = dummykv;
		keyvalue_t mykeyvalue142 = dummykv;
		keyvalue_t mykeyvalue143 = dummykv;
		keyvalue_t mykeyvalue144 = dummykv;
		keyvalue_t mykeyvalue145 = dummykv;
		keyvalue_t mykeyvalue146 = dummykv;
		keyvalue_t mykeyvalue147 = dummykv;
		
		//((n)/2)
		keyA0 = mergefunc(mykeyvalue00.key, mykeyvalue10.key, NAp);
		keyB0 = mergefunc(mykeyvalue20.key, mykeyvalue30.key, NAp);
		keyC0 = mergefunc(mykeyvalue40.key, mykeyvalue50.key, NAp);
		keyD0 = mergefunc(mykeyvalue60.key, mykeyvalue70.key, NAp);
		keyE0 = mergefunc(mykeyvalue80.key, mykeyvalue90.key, NAp);
		keyA1 = mergefunc(mykeyvalue01.key, mykeyvalue11.key, NAp);
		keyB1 = mergefunc(mykeyvalue21.key, mykeyvalue31.key, NAp);
		keyC1 = mergefunc(mykeyvalue41.key, mykeyvalue51.key, NAp);
		keyD1 = mergefunc(mykeyvalue61.key, mykeyvalue71.key, NAp);
		keyE1 = mergefunc(mykeyvalue81.key, mykeyvalue91.key, NAp);
		keyA2 = mergefunc(mykeyvalue02.key, mykeyvalue12.key, NAp);
		keyB2 = mergefunc(mykeyvalue22.key, mykeyvalue32.key, NAp);
		keyC2 = mergefunc(mykeyvalue42.key, mykeyvalue52.key, NAp);
		keyD2 = mergefunc(mykeyvalue62.key, mykeyvalue72.key, NAp);
		keyE2 = mergefunc(mykeyvalue82.key, mykeyvalue92.key, NAp);
		keyA3 = mergefunc(mykeyvalue03.key, mykeyvalue13.key, NAp);
		keyB3 = mergefunc(mykeyvalue23.key, mykeyvalue33.key, NAp);
		keyC3 = mergefunc(mykeyvalue43.key, mykeyvalue53.key, NAp);
		keyD3 = mergefunc(mykeyvalue63.key, mykeyvalue73.key, NAp);
		keyE3 = mergefunc(mykeyvalue83.key, mykeyvalue93.key, NAp);
		keyA4 = mergefunc(mykeyvalue04.key, mykeyvalue14.key, NAp);
		keyB4 = mergefunc(mykeyvalue24.key, mykeyvalue34.key, NAp);
		keyC4 = mergefunc(mykeyvalue44.key, mykeyvalue54.key, NAp);
		keyD4 = mergefunc(mykeyvalue64.key, mykeyvalue74.key, NAp);
		keyE4 = mergefunc(mykeyvalue84.key, mykeyvalue94.key, NAp);
		keyA5 = mergefunc(mykeyvalue05.key, mykeyvalue15.key, NAp);
		keyB5 = mergefunc(mykeyvalue25.key, mykeyvalue35.key, NAp);
		keyC5 = mergefunc(mykeyvalue45.key, mykeyvalue55.key, NAp);
		keyD5 = mergefunc(mykeyvalue65.key, mykeyvalue75.key, NAp);
		keyE5 = mergefunc(mykeyvalue85.key, mykeyvalue95.key, NAp);
		keyA6 = mergefunc(mykeyvalue06.key, mykeyvalue16.key, NAp);
		keyB6 = mergefunc(mykeyvalue26.key, mykeyvalue36.key, NAp);
		keyC6 = mergefunc(mykeyvalue46.key, mykeyvalue56.key, NAp);
		keyD6 = mergefunc(mykeyvalue66.key, mykeyvalue76.key, NAp);
		keyE6 = mergefunc(mykeyvalue86.key, mykeyvalue96.key, NAp);
		keyA7 = mergefunc(mykeyvalue07.key, mykeyvalue17.key, NAp);
		keyB7 = mergefunc(mykeyvalue27.key, mykeyvalue37.key, NAp);
		keyC7 = mergefunc(mykeyvalue47.key, mykeyvalue57.key, NAp);
		keyD7 = mergefunc(mykeyvalue67.key, mykeyvalue77.key, NAp);
		keyE7 = mergefunc(mykeyvalue87.key, mykeyvalue97.key, NAp);
		keyy_t keyPA0 = mergefunc(keyA0, keyB0, NAp);
		keyy_t keyPB0 = mergefunc(keyC0, keyD0, NAp);
		keyy_t keyPC0 = mergefunc(keyE0, keyF0, NAp);
		keyy_t keyRA0 = mergefunc(keyPA0, keyPB0, NAp);
		keyy_t keyRB0 = mergefunc(keyPC0, keyF0, NAp);
		keyy_t keyRZ0 = mergefunc(keyRA0, keyRB0, NAp);
		keyy_t keyPA1 = mergefunc(keyA1, keyB1, NAp);
		keyy_t keyPB1 = mergefunc(keyC1, keyD1, NAp);
		keyy_t keyPC1 = mergefunc(keyE1, keyF1, NAp);
		keyy_t keyRA1 = mergefunc(keyPA1, keyPB1, NAp);
		keyy_t keyRB1 = mergefunc(keyPC1, keyF1, NAp);
		keyy_t keyRZ1 = mergefunc(keyRA1, keyRB1, NAp);
		keyy_t keyPA2 = mergefunc(keyA2, keyB2, NAp);
		keyy_t keyPB2 = mergefunc(keyC2, keyD2, NAp);
		keyy_t keyPC2 = mergefunc(keyE2, keyF2, NAp);
		keyy_t keyRA2 = mergefunc(keyPA2, keyPB2, NAp);
		keyy_t keyRB2 = mergefunc(keyPC2, keyF2, NAp);
		keyy_t keyRZ2 = mergefunc(keyRA2, keyRB2, NAp);
		keyy_t keyPA3 = mergefunc(keyA3, keyB3, NAp);
		keyy_t keyPB3 = mergefunc(keyC3, keyD3, NAp);
		keyy_t keyPC3 = mergefunc(keyE3, keyF3, NAp);
		keyy_t keyRA3 = mergefunc(keyPA3, keyPB3, NAp);
		keyy_t keyRB3 = mergefunc(keyPC3, keyF3, NAp);
		keyy_t keyRZ3 = mergefunc(keyRA3, keyRB3, NAp);
		keyy_t keyPA4 = mergefunc(keyA4, keyB4, NAp);
		keyy_t keyPB4 = mergefunc(keyC4, keyD4, NAp);
		keyy_t keyPC4 = mergefunc(keyE4, keyF4, NAp);
		keyy_t keyRA4 = mergefunc(keyPA4, keyPB4, NAp);
		keyy_t keyRB4 = mergefunc(keyPC4, keyF4, NAp);
		keyy_t keyRZ4 = mergefunc(keyRA4, keyRB4, NAp);
		keyy_t keyPA5 = mergefunc(keyA5, keyB5, NAp);
		keyy_t keyPB5 = mergefunc(keyC5, keyD5, NAp);
		keyy_t keyPC5 = mergefunc(keyE5, keyF5, NAp);
		keyy_t keyRA5 = mergefunc(keyPA5, keyPB5, NAp);
		keyy_t keyRB5 = mergefunc(keyPC5, keyF5, NAp);
		keyy_t keyRZ5 = mergefunc(keyRA5, keyRB5, NAp);
		keyy_t keyPA6 = mergefunc(keyA6, keyB6, NAp);
		keyy_t keyPB6 = mergefunc(keyC6, keyD6, NAp);
		keyy_t keyPC6 = mergefunc(keyE6, keyF6, NAp);
		keyy_t keyRA6 = mergefunc(keyPA6, keyPB6, NAp);
		keyy_t keyRB6 = mergefunc(keyPC6, keyF6, NAp);
		keyy_t keyRZ6 = mergefunc(keyRA6, keyRB6, NAp);
		keyy_t keyPA7 = mergefunc(keyA7, keyB7, NAp);
		keyy_t keyPB7 = mergefunc(keyC7, keyD7, NAp);
		keyy_t keyPC7 = mergefunc(keyE7, keyF7, NAp);
		keyy_t keyRA7 = mergefunc(keyPA7, keyPB7, NAp);
		keyy_t keyRB7 = mergefunc(keyPC7, keyF7, NAp);
		keyy_t keyRZ7 = mergefunc(keyRA7, keyRB7, NAp);
		
		//((n)/2)
		valA0 = mergefunc(mykeyvalue00.value, mykeyvalue10.value, NAp);
		valB0 = mergefunc(mykeyvalue20.value, mykeyvalue30.value, NAp);
		valC0 = mergefunc(mykeyvalue40.value, mykeyvalue50.value, NAp);
		valD0 = mergefunc(mykeyvalue60.value, mykeyvalue70.value, NAp);
		valE0 = mergefunc(mykeyvalue80.value, mykeyvalue90.value, NAp);
		valA1 = mergefunc(mykeyvalue01.value, mykeyvalue11.value, NAp);
		valB1 = mergefunc(mykeyvalue21.value, mykeyvalue31.value, NAp);
		valC1 = mergefunc(mykeyvalue41.value, mykeyvalue51.value, NAp);
		valD1 = mergefunc(mykeyvalue61.value, mykeyvalue71.value, NAp);
		valE1 = mergefunc(mykeyvalue81.value, mykeyvalue91.value, NAp);
		valA2 = mergefunc(mykeyvalue02.value, mykeyvalue12.value, NAp);
		valB2 = mergefunc(mykeyvalue22.value, mykeyvalue32.value, NAp);
		valC2 = mergefunc(mykeyvalue42.value, mykeyvalue52.value, NAp);
		valD2 = mergefunc(mykeyvalue62.value, mykeyvalue72.value, NAp);
		valE2 = mergefunc(mykeyvalue82.value, mykeyvalue92.value, NAp);
		valA3 = mergefunc(mykeyvalue03.value, mykeyvalue13.value, NAp);
		valB3 = mergefunc(mykeyvalue23.value, mykeyvalue33.value, NAp);
		valC3 = mergefunc(mykeyvalue43.value, mykeyvalue53.value, NAp);
		valD3 = mergefunc(mykeyvalue63.value, mykeyvalue73.value, NAp);
		valE3 = mergefunc(mykeyvalue83.value, mykeyvalue93.value, NAp);
		valA4 = mergefunc(mykeyvalue04.value, mykeyvalue14.value, NAp);
		valB4 = mergefunc(mykeyvalue24.value, mykeyvalue34.value, NAp);
		valC4 = mergefunc(mykeyvalue44.value, mykeyvalue54.value, NAp);
		valD4 = mergefunc(mykeyvalue64.value, mykeyvalue74.value, NAp);
		valE4 = mergefunc(mykeyvalue84.value, mykeyvalue94.value, NAp);
		valA5 = mergefunc(mykeyvalue05.value, mykeyvalue15.value, NAp);
		valB5 = mergefunc(mykeyvalue25.value, mykeyvalue35.value, NAp);
		valC5 = mergefunc(mykeyvalue45.value, mykeyvalue55.value, NAp);
		valD5 = mergefunc(mykeyvalue65.value, mykeyvalue75.value, NAp);
		valE5 = mergefunc(mykeyvalue85.value, mykeyvalue95.value, NAp);
		valA6 = mergefunc(mykeyvalue06.value, mykeyvalue16.value, NAp);
		valB6 = mergefunc(mykeyvalue26.value, mykeyvalue36.value, NAp);
		valC6 = mergefunc(mykeyvalue46.value, mykeyvalue56.value, NAp);
		valD6 = mergefunc(mykeyvalue66.value, mykeyvalue76.value, NAp);
		valE6 = mergefunc(mykeyvalue86.value, mykeyvalue96.value, NAp);
		valA7 = mergefunc(mykeyvalue07.value, mykeyvalue17.value, NAp);
		valB7 = mergefunc(mykeyvalue27.value, mykeyvalue37.value, NAp);
		valC7 = mergefunc(mykeyvalue47.value, mykeyvalue57.value, NAp);
		valD7 = mergefunc(mykeyvalue67.value, mykeyvalue77.value, NAp);
		valE7 = mergefunc(mykeyvalue87.value, mykeyvalue97.value, NAp);
		value_t valPA0 = mergefunc(valA0, valB0, NAp);
		value_t valPB0 = mergefunc(valC0, valD0, NAp);
		value_t valPC0 = mergefunc(valE0, valF0, NAp);
		value_t valRA0 = mergefunc(valPA0, valPB0, NAp);
		value_t valRB0 = mergefunc(valPC0, valF0, NAp);
		value_t valRZ0 = mergefunc(valRA0, valRB0, NAp);
		value_t valPA1 = mergefunc(valA1, valB1, NAp);
		value_t valPB1 = mergefunc(valC1, valD1, NAp);
		value_t valPC1 = mergefunc(valE1, valF1, NAp);
		value_t valRA1 = mergefunc(valPA1, valPB1, NAp);
		value_t valRB1 = mergefunc(valPC1, valF1, NAp);
		value_t valRZ1 = mergefunc(valRA1, valRB1, NAp);
		value_t valPA2 = mergefunc(valA2, valB2, NAp);
		value_t valPB2 = mergefunc(valC2, valD2, NAp);
		value_t valPC2 = mergefunc(valE2, valF2, NAp);
		value_t valRA2 = mergefunc(valPA2, valPB2, NAp);
		value_t valRB2 = mergefunc(valPC2, valF2, NAp);
		value_t valRZ2 = mergefunc(valRA2, valRB2, NAp);
		value_t valPA3 = mergefunc(valA3, valB3, NAp);
		value_t valPB3 = mergefunc(valC3, valD3, NAp);
		value_t valPC3 = mergefunc(valE3, valF3, NAp);
		value_t valRA3 = mergefunc(valPA3, valPB3, NAp);
		value_t valRB3 = mergefunc(valPC3, valF3, NAp);
		value_t valRZ3 = mergefunc(valRA3, valRB3, NAp);
		value_t valPA4 = mergefunc(valA4, valB4, NAp);
		value_t valPB4 = mergefunc(valC4, valD4, NAp);
		value_t valPC4 = mergefunc(valE4, valF4, NAp);
		value_t valRA4 = mergefunc(valPA4, valPB4, NAp);
		value_t valRB4 = mergefunc(valPC4, valF4, NAp);
		value_t valRZ4 = mergefunc(valRA4, valRB4, NAp);
		value_t valPA5 = mergefunc(valA5, valB5, NAp);
		value_t valPB5 = mergefunc(valC5, valD5, NAp);
		value_t valPC5 = mergefunc(valE5, valF5, NAp);
		value_t valRA5 = mergefunc(valPA5, valPB5, NAp);
		value_t valRB5 = mergefunc(valPC5, valF5, NAp);
		value_t valRZ5 = mergefunc(valRA5, valRB5, NAp);
		value_t valPA6 = mergefunc(valA6, valB6, NAp);
		value_t valPB6 = mergefunc(valC6, valD6, NAp);
		value_t valPC6 = mergefunc(valE6, valF6, NAp);
		value_t valRA6 = mergefunc(valPA6, valPB6, NAp);
		value_t valRB6 = mergefunc(valPC6, valF6, NAp);
		value_t valRZ6 = mergefunc(valRA6, valRB6, NAp);
		value_t valPA7 = mergefunc(valA7, valB7, NAp);
		value_t valPB7 = mergefunc(valC7, valD7, NAp);
		value_t valPC7 = mergefunc(valE7, valF7, NAp);
		value_t valRA7 = mergefunc(valPA7, valPB7, NAp);
		value_t valRB7 = mergefunc(valPC7, valF7, NAp);
		value_t valRZ7 = mergefunc(valRA7, valRB7, NAp);
		
		#ifdef _WIDEWORD
		vdram[dramoffset_kvs + j].range(31, 0) = keyRZ0;
		vdram[dramoffset_kvs + j].range(63, 32) = valRZ0;
		vdram[dramoffset_kvs + j].range(95, 64) = keyRZ1;
		vdram[dramoffset_kvs + j].range(127, 96) = valRZ1;
		vdram[dramoffset_kvs + j].range(159, 128) = keyRZ2;
		vdram[dramoffset_kvs + j].range(191, 160) = valRZ2;
		vdram[dramoffset_kvs + j].range(223, 192) = keyRZ3;
		vdram[dramoffset_kvs + j].range(255, 224) = valRZ3;
		vdram[dramoffset_kvs + j].range(287, 256) = keyRZ4;
		vdram[dramoffset_kvs + j].range(319, 288) = valRZ4;
		vdram[dramoffset_kvs + j].range(351, 320) = keyRZ5;
		vdram[dramoffset_kvs + j].range(383, 352) = valRZ5;
		vdram[dramoffset_kvs + j].range(415, 384) = keyRZ6;
		vdram[dramoffset_kvs + j].range(447, 416) = valRZ6;
		vdram[dramoffset_kvs + j].range(479, 448) = keyRZ7;
		vdram[dramoffset_kvs + j].range(511, 480) = valRZ7;
		#else
		vdram[dramoffset_kvs + j].data[0].key = keyRZ0;
		vdram[dramoffset_kvs + j].data[0].value = valRZ0;
		vdram[dramoffset_kvs + j].data[1].key = keyRZ1;
		vdram[dramoffset_kvs + j].data[1].value = valRZ1;
		vdram[dramoffset_kvs + j].data[2].key = keyRZ2;
		vdram[dramoffset_kvs + j].data[2].value = valRZ2;
		vdram[dramoffset_kvs + j].data[3].key = keyRZ3;
		vdram[dramoffset_kvs + j].data[3].value = valRZ3;
		vdram[dramoffset_kvs + j].data[4].key = keyRZ4;
		vdram[dramoffset_kvs + j].data[4].value = valRZ4;
		vdram[dramoffset_kvs + j].data[5].key = keyRZ5;
		vdram[dramoffset_kvs + j].data[5].value = valRZ5;
		vdram[dramoffset_kvs + j].data[6].key = keyRZ6;
		vdram[dramoffset_kvs + j].data[6].value = valRZ6;
		vdram[dramoffset_kvs + j].data[7].key = keyRZ7;
		vdram[dramoffset_kvs + j].data[7].value = valRZ7;
		#endif
	}
	return;
}
void
	#if defined(SW)
	actsproc::
	#endif
merge10andsavevdata(bool_type enable, uint512_dt * vdram, keyvalue_vbuffer_t vbuffer0[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t vbuffer1[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t vbuffer2[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t vbuffer3[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t vbuffer4[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t vbuffer5[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t vbuffer6[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t vbuffer7[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t vbuffer8[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t vbuffer9[VDATA_PACKINGSIZE][BLOCKRAM_SIZE], unsigned int begincol, batch_type bufferoffset_kvs, unsigned int dramoffset_kvs){
	if(enable == OFF){ return; }
	keyvalue_t dummykv;
	dummykv.key = 0xFFFFFFFF; dummykv.value = 0xFFFFFFFF;
	
	keyy_t keyA0 = dummykv.key;
	value_t valA0 = dummykv.key;
	keyy_t keyB0 = dummykv.key;
	value_t valB0 = dummykv.key;
	keyy_t keyC0 = dummykv.key;
	value_t valC0 = dummykv.key;
	keyy_t keyD0 = dummykv.key;
	value_t valD0 = dummykv.key;
	keyy_t keyE0 = dummykv.key;
	value_t valE0 = dummykv.key;
	keyy_t keyF0 = dummykv.key;
	value_t valF0 = dummykv.key;
	keyy_t keyG0 = dummykv.key;
	value_t valG0 = dummykv.key;
	keyy_t keyH0 = dummykv.key;
	value_t valH0 = dummykv.key;
	keyy_t keyI0 = dummykv.key;
	value_t valI0 = dummykv.key;
	keyy_t keyJ0 = dummykv.key;
	value_t valJ0 = dummykv.key;
	keyy_t keyK0 = dummykv.key;
	value_t valK0 = dummykv.key;
	keyy_t keyL0 = dummykv.key;
	value_t valL0 = dummykv.key;
	keyy_t keyM0 = dummykv.key;
	value_t valM0 = dummykv.key;
	keyy_t keyA1 = dummykv.key;
	value_t valA1 = dummykv.key;
	keyy_t keyB1 = dummykv.key;
	value_t valB1 = dummykv.key;
	keyy_t keyC1 = dummykv.key;
	value_t valC1 = dummykv.key;
	keyy_t keyD1 = dummykv.key;
	value_t valD1 = dummykv.key;
	keyy_t keyE1 = dummykv.key;
	value_t valE1 = dummykv.key;
	keyy_t keyF1 = dummykv.key;
	value_t valF1 = dummykv.key;
	keyy_t keyG1 = dummykv.key;
	value_t valG1 = dummykv.key;
	keyy_t keyH1 = dummykv.key;
	value_t valH1 = dummykv.key;
	keyy_t keyI1 = dummykv.key;
	value_t valI1 = dummykv.key;
	keyy_t keyJ1 = dummykv.key;
	value_t valJ1 = dummykv.key;
	keyy_t keyK1 = dummykv.key;
	value_t valK1 = dummykv.key;
	keyy_t keyL1 = dummykv.key;
	value_t valL1 = dummykv.key;
	keyy_t keyM1 = dummykv.key;
	value_t valM1 = dummykv.key;
	keyy_t keyA2 = dummykv.key;
	value_t valA2 = dummykv.key;
	keyy_t keyB2 = dummykv.key;
	value_t valB2 = dummykv.key;
	keyy_t keyC2 = dummykv.key;
	value_t valC2 = dummykv.key;
	keyy_t keyD2 = dummykv.key;
	value_t valD2 = dummykv.key;
	keyy_t keyE2 = dummykv.key;
	value_t valE2 = dummykv.key;
	keyy_t keyF2 = dummykv.key;
	value_t valF2 = dummykv.key;
	keyy_t keyG2 = dummykv.key;
	value_t valG2 = dummykv.key;
	keyy_t keyH2 = dummykv.key;
	value_t valH2 = dummykv.key;
	keyy_t keyI2 = dummykv.key;
	value_t valI2 = dummykv.key;
	keyy_t keyJ2 = dummykv.key;
	value_t valJ2 = dummykv.key;
	keyy_t keyK2 = dummykv.key;
	value_t valK2 = dummykv.key;
	keyy_t keyL2 = dummykv.key;
	value_t valL2 = dummykv.key;
	keyy_t keyM2 = dummykv.key;
	value_t valM2 = dummykv.key;
	keyy_t keyA3 = dummykv.key;
	value_t valA3 = dummykv.key;
	keyy_t keyB3 = dummykv.key;
	value_t valB3 = dummykv.key;
	keyy_t keyC3 = dummykv.key;
	value_t valC3 = dummykv.key;
	keyy_t keyD3 = dummykv.key;
	value_t valD3 = dummykv.key;
	keyy_t keyE3 = dummykv.key;
	value_t valE3 = dummykv.key;
	keyy_t keyF3 = dummykv.key;
	value_t valF3 = dummykv.key;
	keyy_t keyG3 = dummykv.key;
	value_t valG3 = dummykv.key;
	keyy_t keyH3 = dummykv.key;
	value_t valH3 = dummykv.key;
	keyy_t keyI3 = dummykv.key;
	value_t valI3 = dummykv.key;
	keyy_t keyJ3 = dummykv.key;
	value_t valJ3 = dummykv.key;
	keyy_t keyK3 = dummykv.key;
	value_t valK3 = dummykv.key;
	keyy_t keyL3 = dummykv.key;
	value_t valL3 = dummykv.key;
	keyy_t keyM3 = dummykv.key;
	value_t valM3 = dummykv.key;
	keyy_t keyA4 = dummykv.key;
	value_t valA4 = dummykv.key;
	keyy_t keyB4 = dummykv.key;
	value_t valB4 = dummykv.key;
	keyy_t keyC4 = dummykv.key;
	value_t valC4 = dummykv.key;
	keyy_t keyD4 = dummykv.key;
	value_t valD4 = dummykv.key;
	keyy_t keyE4 = dummykv.key;
	value_t valE4 = dummykv.key;
	keyy_t keyF4 = dummykv.key;
	value_t valF4 = dummykv.key;
	keyy_t keyG4 = dummykv.key;
	value_t valG4 = dummykv.key;
	keyy_t keyH4 = dummykv.key;
	value_t valH4 = dummykv.key;
	keyy_t keyI4 = dummykv.key;
	value_t valI4 = dummykv.key;
	keyy_t keyJ4 = dummykv.key;
	value_t valJ4 = dummykv.key;
	keyy_t keyK4 = dummykv.key;
	value_t valK4 = dummykv.key;
	keyy_t keyL4 = dummykv.key;
	value_t valL4 = dummykv.key;
	keyy_t keyM4 = dummykv.key;
	value_t valM4 = dummykv.key;
	keyy_t keyA5 = dummykv.key;
	value_t valA5 = dummykv.key;
	keyy_t keyB5 = dummykv.key;
	value_t valB5 = dummykv.key;
	keyy_t keyC5 = dummykv.key;
	value_t valC5 = dummykv.key;
	keyy_t keyD5 = dummykv.key;
	value_t valD5 = dummykv.key;
	keyy_t keyE5 = dummykv.key;
	value_t valE5 = dummykv.key;
	keyy_t keyF5 = dummykv.key;
	value_t valF5 = dummykv.key;
	keyy_t keyG5 = dummykv.key;
	value_t valG5 = dummykv.key;
	keyy_t keyH5 = dummykv.key;
	value_t valH5 = dummykv.key;
	keyy_t keyI5 = dummykv.key;
	value_t valI5 = dummykv.key;
	keyy_t keyJ5 = dummykv.key;
	value_t valJ5 = dummykv.key;
	keyy_t keyK5 = dummykv.key;
	value_t valK5 = dummykv.key;
	keyy_t keyL5 = dummykv.key;
	value_t valL5 = dummykv.key;
	keyy_t keyM5 = dummykv.key;
	value_t valM5 = dummykv.key;
	keyy_t keyA6 = dummykv.key;
	value_t valA6 = dummykv.key;
	keyy_t keyB6 = dummykv.key;
	value_t valB6 = dummykv.key;
	keyy_t keyC6 = dummykv.key;
	value_t valC6 = dummykv.key;
	keyy_t keyD6 = dummykv.key;
	value_t valD6 = dummykv.key;
	keyy_t keyE6 = dummykv.key;
	value_t valE6 = dummykv.key;
	keyy_t keyF6 = dummykv.key;
	value_t valF6 = dummykv.key;
	keyy_t keyG6 = dummykv.key;
	value_t valG6 = dummykv.key;
	keyy_t keyH6 = dummykv.key;
	value_t valH6 = dummykv.key;
	keyy_t keyI6 = dummykv.key;
	value_t valI6 = dummykv.key;
	keyy_t keyJ6 = dummykv.key;
	value_t valJ6 = dummykv.key;
	keyy_t keyK6 = dummykv.key;
	value_t valK6 = dummykv.key;
	keyy_t keyL6 = dummykv.key;
	value_t valL6 = dummykv.key;
	keyy_t keyM6 = dummykv.key;
	value_t valM6 = dummykv.key;
	keyy_t keyA7 = dummykv.key;
	value_t valA7 = dummykv.key;
	keyy_t keyB7 = dummykv.key;
	value_t valB7 = dummykv.key;
	keyy_t keyC7 = dummykv.key;
	value_t valC7 = dummykv.key;
	keyy_t keyD7 = dummykv.key;
	value_t valD7 = dummykv.key;
	keyy_t keyE7 = dummykv.key;
	value_t valE7 = dummykv.key;
	keyy_t keyF7 = dummykv.key;
	value_t valF7 = dummykv.key;
	keyy_t keyG7 = dummykv.key;
	value_t valG7 = dummykv.key;
	keyy_t keyH7 = dummykv.key;
	value_t valH7 = dummykv.key;
	keyy_t keyI7 = dummykv.key;
	value_t valI7 = dummykv.key;
	keyy_t keyJ7 = dummykv.key;
	value_t valJ7 = dummykv.key;
	keyy_t keyK7 = dummykv.key;
	value_t valK7 = dummykv.key;
	keyy_t keyL7 = dummykv.key;
	value_t valL7 = dummykv.key;
	keyy_t keyM7 = dummykv.key;
	value_t valM7 = dummykv.key;
	
	MERGE10_LOOP1: for (buffer_type j=0; j<BLOCKRAM_SIZE; j++){
	#pragma HLS PIPELINE II=1
		keyvalue_t mykeyvalue00 = GETKV2(vbuffer0[begincol + 0][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue01 = GETKV2(vbuffer0[begincol + 1][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue02 = GETKV2(vbuffer0[begincol + 2][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue03 = GETKV2(vbuffer0[begincol + 3][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue04 = GETKV2(vbuffer0[begincol + 4][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue05 = GETKV2(vbuffer0[begincol + 5][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue06 = GETKV2(vbuffer0[begincol + 6][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue07 = GETKV2(vbuffer0[begincol + 7][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue10 = GETKV2(vbuffer1[begincol + 0][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue11 = GETKV2(vbuffer1[begincol + 1][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue12 = GETKV2(vbuffer1[begincol + 2][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue13 = GETKV2(vbuffer1[begincol + 3][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue14 = GETKV2(vbuffer1[begincol + 4][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue15 = GETKV2(vbuffer1[begincol + 5][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue16 = GETKV2(vbuffer1[begincol + 6][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue17 = GETKV2(vbuffer1[begincol + 7][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue20 = GETKV2(vbuffer2[begincol + 0][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue21 = GETKV2(vbuffer2[begincol + 1][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue22 = GETKV2(vbuffer2[begincol + 2][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue23 = GETKV2(vbuffer2[begincol + 3][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue24 = GETKV2(vbuffer2[begincol + 4][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue25 = GETKV2(vbuffer2[begincol + 5][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue26 = GETKV2(vbuffer2[begincol + 6][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue27 = GETKV2(vbuffer2[begincol + 7][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue30 = GETKV2(vbuffer3[begincol + 0][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue31 = GETKV2(vbuffer3[begincol + 1][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue32 = GETKV2(vbuffer3[begincol + 2][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue33 = GETKV2(vbuffer3[begincol + 3][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue34 = GETKV2(vbuffer3[begincol + 4][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue35 = GETKV2(vbuffer3[begincol + 5][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue36 = GETKV2(vbuffer3[begincol + 6][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue37 = GETKV2(vbuffer3[begincol + 7][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue40 = GETKV2(vbuffer4[begincol + 0][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue41 = GETKV2(vbuffer4[begincol + 1][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue42 = GETKV2(vbuffer4[begincol + 2][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue43 = GETKV2(vbuffer4[begincol + 3][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue44 = GETKV2(vbuffer4[begincol + 4][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue45 = GETKV2(vbuffer4[begincol + 5][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue46 = GETKV2(vbuffer4[begincol + 6][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue47 = GETKV2(vbuffer4[begincol + 7][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue50 = GETKV2(vbuffer5[begincol + 0][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue51 = GETKV2(vbuffer5[begincol + 1][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue52 = GETKV2(vbuffer5[begincol + 2][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue53 = GETKV2(vbuffer5[begincol + 3][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue54 = GETKV2(vbuffer5[begincol + 4][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue55 = GETKV2(vbuffer5[begincol + 5][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue56 = GETKV2(vbuffer5[begincol + 6][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue57 = GETKV2(vbuffer5[begincol + 7][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue60 = GETKV2(vbuffer6[begincol + 0][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue61 = GETKV2(vbuffer6[begincol + 1][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue62 = GETKV2(vbuffer6[begincol + 2][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue63 = GETKV2(vbuffer6[begincol + 3][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue64 = GETKV2(vbuffer6[begincol + 4][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue65 = GETKV2(vbuffer6[begincol + 5][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue66 = GETKV2(vbuffer6[begincol + 6][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue67 = GETKV2(vbuffer6[begincol + 7][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue70 = GETKV2(vbuffer7[begincol + 0][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue71 = GETKV2(vbuffer7[begincol + 1][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue72 = GETKV2(vbuffer7[begincol + 2][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue73 = GETKV2(vbuffer7[begincol + 3][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue74 = GETKV2(vbuffer7[begincol + 4][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue75 = GETKV2(vbuffer7[begincol + 5][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue76 = GETKV2(vbuffer7[begincol + 6][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue77 = GETKV2(vbuffer7[begincol + 7][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue80 = GETKV2(vbuffer8[begincol + 0][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue81 = GETKV2(vbuffer8[begincol + 1][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue82 = GETKV2(vbuffer8[begincol + 2][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue83 = GETKV2(vbuffer8[begincol + 3][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue84 = GETKV2(vbuffer8[begincol + 4][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue85 = GETKV2(vbuffer8[begincol + 5][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue86 = GETKV2(vbuffer8[begincol + 6][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue87 = GETKV2(vbuffer8[begincol + 7][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue90 = GETKV2(vbuffer9[begincol + 0][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue91 = GETKV2(vbuffer9[begincol + 1][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue92 = GETKV2(vbuffer9[begincol + 2][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue93 = GETKV2(vbuffer9[begincol + 3][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue94 = GETKV2(vbuffer9[begincol + 4][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue95 = GETKV2(vbuffer9[begincol + 5][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue96 = GETKV2(vbuffer9[begincol + 6][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue97 = GETKV2(vbuffer9[begincol + 7][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue100 = dummykv;
		keyvalue_t mykeyvalue101 = dummykv;
		keyvalue_t mykeyvalue102 = dummykv;
		keyvalue_t mykeyvalue103 = dummykv;
		keyvalue_t mykeyvalue104 = dummykv;
		keyvalue_t mykeyvalue105 = dummykv;
		keyvalue_t mykeyvalue106 = dummykv;
		keyvalue_t mykeyvalue107 = dummykv;
		keyvalue_t mykeyvalue110 = dummykv;
		keyvalue_t mykeyvalue111 = dummykv;
		keyvalue_t mykeyvalue112 = dummykv;
		keyvalue_t mykeyvalue113 = dummykv;
		keyvalue_t mykeyvalue114 = dummykv;
		keyvalue_t mykeyvalue115 = dummykv;
		keyvalue_t mykeyvalue116 = dummykv;
		keyvalue_t mykeyvalue117 = dummykv;
		keyvalue_t mykeyvalue120 = dummykv;
		keyvalue_t mykeyvalue121 = dummykv;
		keyvalue_t mykeyvalue122 = dummykv;
		keyvalue_t mykeyvalue123 = dummykv;
		keyvalue_t mykeyvalue124 = dummykv;
		keyvalue_t mykeyvalue125 = dummykv;
		keyvalue_t mykeyvalue126 = dummykv;
		keyvalue_t mykeyvalue127 = dummykv;
		keyvalue_t mykeyvalue130 = dummykv;
		keyvalue_t mykeyvalue131 = dummykv;
		keyvalue_t mykeyvalue132 = dummykv;
		keyvalue_t mykeyvalue133 = dummykv;
		keyvalue_t mykeyvalue134 = dummykv;
		keyvalue_t mykeyvalue135 = dummykv;
		keyvalue_t mykeyvalue136 = dummykv;
		keyvalue_t mykeyvalue137 = dummykv;
		keyvalue_t mykeyvalue140 = dummykv;
		keyvalue_t mykeyvalue141 = dummykv;
		keyvalue_t mykeyvalue142 = dummykv;
		keyvalue_t mykeyvalue143 = dummykv;
		keyvalue_t mykeyvalue144 = dummykv;
		keyvalue_t mykeyvalue145 = dummykv;
		keyvalue_t mykeyvalue146 = dummykv;
		keyvalue_t mykeyvalue147 = dummykv;
		
		//((n)/2)
		keyA0 = mergefunc(mykeyvalue00.key, mykeyvalue10.key, NAp);
		keyB0 = mergefunc(mykeyvalue20.key, mykeyvalue30.key, NAp);
		keyC0 = mergefunc(mykeyvalue40.key, mykeyvalue50.key, NAp);
		keyD0 = mergefunc(mykeyvalue60.key, mykeyvalue70.key, NAp);
		keyE0 = mergefunc(mykeyvalue80.key, mykeyvalue90.key, NAp);
		keyF0 = mergefunc(mykeyvalue100.key, mykeyvalue110.key, NAp);
		keyA1 = mergefunc(mykeyvalue01.key, mykeyvalue11.key, NAp);
		keyB1 = mergefunc(mykeyvalue21.key, mykeyvalue31.key, NAp);
		keyC1 = mergefunc(mykeyvalue41.key, mykeyvalue51.key, NAp);
		keyD1 = mergefunc(mykeyvalue61.key, mykeyvalue71.key, NAp);
		keyE1 = mergefunc(mykeyvalue81.key, mykeyvalue91.key, NAp);
		keyF1 = mergefunc(mykeyvalue101.key, mykeyvalue111.key, NAp);
		keyA2 = mergefunc(mykeyvalue02.key, mykeyvalue12.key, NAp);
		keyB2 = mergefunc(mykeyvalue22.key, mykeyvalue32.key, NAp);
		keyC2 = mergefunc(mykeyvalue42.key, mykeyvalue52.key, NAp);
		keyD2 = mergefunc(mykeyvalue62.key, mykeyvalue72.key, NAp);
		keyE2 = mergefunc(mykeyvalue82.key, mykeyvalue92.key, NAp);
		keyF2 = mergefunc(mykeyvalue102.key, mykeyvalue112.key, NAp);
		keyA3 = mergefunc(mykeyvalue03.key, mykeyvalue13.key, NAp);
		keyB3 = mergefunc(mykeyvalue23.key, mykeyvalue33.key, NAp);
		keyC3 = mergefunc(mykeyvalue43.key, mykeyvalue53.key, NAp);
		keyD3 = mergefunc(mykeyvalue63.key, mykeyvalue73.key, NAp);
		keyE3 = mergefunc(mykeyvalue83.key, mykeyvalue93.key, NAp);
		keyF3 = mergefunc(mykeyvalue103.key, mykeyvalue113.key, NAp);
		keyA4 = mergefunc(mykeyvalue04.key, mykeyvalue14.key, NAp);
		keyB4 = mergefunc(mykeyvalue24.key, mykeyvalue34.key, NAp);
		keyC4 = mergefunc(mykeyvalue44.key, mykeyvalue54.key, NAp);
		keyD4 = mergefunc(mykeyvalue64.key, mykeyvalue74.key, NAp);
		keyE4 = mergefunc(mykeyvalue84.key, mykeyvalue94.key, NAp);
		keyF4 = mergefunc(mykeyvalue104.key, mykeyvalue114.key, NAp);
		keyA5 = mergefunc(mykeyvalue05.key, mykeyvalue15.key, NAp);
		keyB5 = mergefunc(mykeyvalue25.key, mykeyvalue35.key, NAp);
		keyC5 = mergefunc(mykeyvalue45.key, mykeyvalue55.key, NAp);
		keyD5 = mergefunc(mykeyvalue65.key, mykeyvalue75.key, NAp);
		keyE5 = mergefunc(mykeyvalue85.key, mykeyvalue95.key, NAp);
		keyF5 = mergefunc(mykeyvalue105.key, mykeyvalue115.key, NAp);
		keyA6 = mergefunc(mykeyvalue06.key, mykeyvalue16.key, NAp);
		keyB6 = mergefunc(mykeyvalue26.key, mykeyvalue36.key, NAp);
		keyC6 = mergefunc(mykeyvalue46.key, mykeyvalue56.key, NAp);
		keyD6 = mergefunc(mykeyvalue66.key, mykeyvalue76.key, NAp);
		keyE6 = mergefunc(mykeyvalue86.key, mykeyvalue96.key, NAp);
		keyF6 = mergefunc(mykeyvalue106.key, mykeyvalue116.key, NAp);
		keyA7 = mergefunc(mykeyvalue07.key, mykeyvalue17.key, NAp);
		keyB7 = mergefunc(mykeyvalue27.key, mykeyvalue37.key, NAp);
		keyC7 = mergefunc(mykeyvalue47.key, mykeyvalue57.key, NAp);
		keyD7 = mergefunc(mykeyvalue67.key, mykeyvalue77.key, NAp);
		keyE7 = mergefunc(mykeyvalue87.key, mykeyvalue97.key, NAp);
		keyF7 = mergefunc(mykeyvalue107.key, mykeyvalue117.key, NAp);
		keyy_t keyPA0 = mergefunc(keyA0, keyB0, NAp);
		keyy_t keyPB0 = mergefunc(keyC0, keyD0, NAp);
		keyy_t keyPC0 = mergefunc(keyE0, keyF0, NAp);
		keyy_t keyRA0 = mergefunc(keyPA0, keyPB0, NAp);
		keyy_t keyRB0 = mergefunc(keyPC0, keyF0, NAp);
		keyy_t keyRZ0 = mergefunc(keyRA0, keyRB0, NAp);
		keyy_t keyPA1 = mergefunc(keyA1, keyB1, NAp);
		keyy_t keyPB1 = mergefunc(keyC1, keyD1, NAp);
		keyy_t keyPC1 = mergefunc(keyE1, keyF1, NAp);
		keyy_t keyRA1 = mergefunc(keyPA1, keyPB1, NAp);
		keyy_t keyRB1 = mergefunc(keyPC1, keyF1, NAp);
		keyy_t keyRZ1 = mergefunc(keyRA1, keyRB1, NAp);
		keyy_t keyPA2 = mergefunc(keyA2, keyB2, NAp);
		keyy_t keyPB2 = mergefunc(keyC2, keyD2, NAp);
		keyy_t keyPC2 = mergefunc(keyE2, keyF2, NAp);
		keyy_t keyRA2 = mergefunc(keyPA2, keyPB2, NAp);
		keyy_t keyRB2 = mergefunc(keyPC2, keyF2, NAp);
		keyy_t keyRZ2 = mergefunc(keyRA2, keyRB2, NAp);
		keyy_t keyPA3 = mergefunc(keyA3, keyB3, NAp);
		keyy_t keyPB3 = mergefunc(keyC3, keyD3, NAp);
		keyy_t keyPC3 = mergefunc(keyE3, keyF3, NAp);
		keyy_t keyRA3 = mergefunc(keyPA3, keyPB3, NAp);
		keyy_t keyRB3 = mergefunc(keyPC3, keyF3, NAp);
		keyy_t keyRZ3 = mergefunc(keyRA3, keyRB3, NAp);
		keyy_t keyPA4 = mergefunc(keyA4, keyB4, NAp);
		keyy_t keyPB4 = mergefunc(keyC4, keyD4, NAp);
		keyy_t keyPC4 = mergefunc(keyE4, keyF4, NAp);
		keyy_t keyRA4 = mergefunc(keyPA4, keyPB4, NAp);
		keyy_t keyRB4 = mergefunc(keyPC4, keyF4, NAp);
		keyy_t keyRZ4 = mergefunc(keyRA4, keyRB4, NAp);
		keyy_t keyPA5 = mergefunc(keyA5, keyB5, NAp);
		keyy_t keyPB5 = mergefunc(keyC5, keyD5, NAp);
		keyy_t keyPC5 = mergefunc(keyE5, keyF5, NAp);
		keyy_t keyRA5 = mergefunc(keyPA5, keyPB5, NAp);
		keyy_t keyRB5 = mergefunc(keyPC5, keyF5, NAp);
		keyy_t keyRZ5 = mergefunc(keyRA5, keyRB5, NAp);
		keyy_t keyPA6 = mergefunc(keyA6, keyB6, NAp);
		keyy_t keyPB6 = mergefunc(keyC6, keyD6, NAp);
		keyy_t keyPC6 = mergefunc(keyE6, keyF6, NAp);
		keyy_t keyRA6 = mergefunc(keyPA6, keyPB6, NAp);
		keyy_t keyRB6 = mergefunc(keyPC6, keyF6, NAp);
		keyy_t keyRZ6 = mergefunc(keyRA6, keyRB6, NAp);
		keyy_t keyPA7 = mergefunc(keyA7, keyB7, NAp);
		keyy_t keyPB7 = mergefunc(keyC7, keyD7, NAp);
		keyy_t keyPC7 = mergefunc(keyE7, keyF7, NAp);
		keyy_t keyRA7 = mergefunc(keyPA7, keyPB7, NAp);
		keyy_t keyRB7 = mergefunc(keyPC7, keyF7, NAp);
		keyy_t keyRZ7 = mergefunc(keyRA7, keyRB7, NAp);
		
		//((n)/2)
		valA0 = mergefunc(mykeyvalue00.value, mykeyvalue10.value, NAp);
		valB0 = mergefunc(mykeyvalue20.value, mykeyvalue30.value, NAp);
		valC0 = mergefunc(mykeyvalue40.value, mykeyvalue50.value, NAp);
		valD0 = mergefunc(mykeyvalue60.value, mykeyvalue70.value, NAp);
		valE0 = mergefunc(mykeyvalue80.value, mykeyvalue90.value, NAp);
		valF0 = mergefunc(mykeyvalue100.value, mykeyvalue110.value, NAp);
		valA1 = mergefunc(mykeyvalue01.value, mykeyvalue11.value, NAp);
		valB1 = mergefunc(mykeyvalue21.value, mykeyvalue31.value, NAp);
		valC1 = mergefunc(mykeyvalue41.value, mykeyvalue51.value, NAp);
		valD1 = mergefunc(mykeyvalue61.value, mykeyvalue71.value, NAp);
		valE1 = mergefunc(mykeyvalue81.value, mykeyvalue91.value, NAp);
		valF1 = mergefunc(mykeyvalue101.value, mykeyvalue111.value, NAp);
		valA2 = mergefunc(mykeyvalue02.value, mykeyvalue12.value, NAp);
		valB2 = mergefunc(mykeyvalue22.value, mykeyvalue32.value, NAp);
		valC2 = mergefunc(mykeyvalue42.value, mykeyvalue52.value, NAp);
		valD2 = mergefunc(mykeyvalue62.value, mykeyvalue72.value, NAp);
		valE2 = mergefunc(mykeyvalue82.value, mykeyvalue92.value, NAp);
		valF2 = mergefunc(mykeyvalue102.value, mykeyvalue112.value, NAp);
		valA3 = mergefunc(mykeyvalue03.value, mykeyvalue13.value, NAp);
		valB3 = mergefunc(mykeyvalue23.value, mykeyvalue33.value, NAp);
		valC3 = mergefunc(mykeyvalue43.value, mykeyvalue53.value, NAp);
		valD3 = mergefunc(mykeyvalue63.value, mykeyvalue73.value, NAp);
		valE3 = mergefunc(mykeyvalue83.value, mykeyvalue93.value, NAp);
		valF3 = mergefunc(mykeyvalue103.value, mykeyvalue113.value, NAp);
		valA4 = mergefunc(mykeyvalue04.value, mykeyvalue14.value, NAp);
		valB4 = mergefunc(mykeyvalue24.value, mykeyvalue34.value, NAp);
		valC4 = mergefunc(mykeyvalue44.value, mykeyvalue54.value, NAp);
		valD4 = mergefunc(mykeyvalue64.value, mykeyvalue74.value, NAp);
		valE4 = mergefunc(mykeyvalue84.value, mykeyvalue94.value, NAp);
		valF4 = mergefunc(mykeyvalue104.value, mykeyvalue114.value, NAp);
		valA5 = mergefunc(mykeyvalue05.value, mykeyvalue15.value, NAp);
		valB5 = mergefunc(mykeyvalue25.value, mykeyvalue35.value, NAp);
		valC5 = mergefunc(mykeyvalue45.value, mykeyvalue55.value, NAp);
		valD5 = mergefunc(mykeyvalue65.value, mykeyvalue75.value, NAp);
		valE5 = mergefunc(mykeyvalue85.value, mykeyvalue95.value, NAp);
		valF5 = mergefunc(mykeyvalue105.value, mykeyvalue115.value, NAp);
		valA6 = mergefunc(mykeyvalue06.value, mykeyvalue16.value, NAp);
		valB6 = mergefunc(mykeyvalue26.value, mykeyvalue36.value, NAp);
		valC6 = mergefunc(mykeyvalue46.value, mykeyvalue56.value, NAp);
		valD6 = mergefunc(mykeyvalue66.value, mykeyvalue76.value, NAp);
		valE6 = mergefunc(mykeyvalue86.value, mykeyvalue96.value, NAp);
		valF6 = mergefunc(mykeyvalue106.value, mykeyvalue116.value, NAp);
		valA7 = mergefunc(mykeyvalue07.value, mykeyvalue17.value, NAp);
		valB7 = mergefunc(mykeyvalue27.value, mykeyvalue37.value, NAp);
		valC7 = mergefunc(mykeyvalue47.value, mykeyvalue57.value, NAp);
		valD7 = mergefunc(mykeyvalue67.value, mykeyvalue77.value, NAp);
		valE7 = mergefunc(mykeyvalue87.value, mykeyvalue97.value, NAp);
		valF7 = mergefunc(mykeyvalue107.value, mykeyvalue117.value, NAp);
		value_t valPA0 = mergefunc(valA0, valB0, NAp);
		value_t valPB0 = mergefunc(valC0, valD0, NAp);
		value_t valPC0 = mergefunc(valE0, valF0, NAp);
		value_t valRA0 = mergefunc(valPA0, valPB0, NAp);
		value_t valRB0 = mergefunc(valPC0, valF0, NAp);
		value_t valRZ0 = mergefunc(valRA0, valRB0, NAp);
		value_t valPA1 = mergefunc(valA1, valB1, NAp);
		value_t valPB1 = mergefunc(valC1, valD1, NAp);
		value_t valPC1 = mergefunc(valE1, valF1, NAp);
		value_t valRA1 = mergefunc(valPA1, valPB1, NAp);
		value_t valRB1 = mergefunc(valPC1, valF1, NAp);
		value_t valRZ1 = mergefunc(valRA1, valRB1, NAp);
		value_t valPA2 = mergefunc(valA2, valB2, NAp);
		value_t valPB2 = mergefunc(valC2, valD2, NAp);
		value_t valPC2 = mergefunc(valE2, valF2, NAp);
		value_t valRA2 = mergefunc(valPA2, valPB2, NAp);
		value_t valRB2 = mergefunc(valPC2, valF2, NAp);
		value_t valRZ2 = mergefunc(valRA2, valRB2, NAp);
		value_t valPA3 = mergefunc(valA3, valB3, NAp);
		value_t valPB3 = mergefunc(valC3, valD3, NAp);
		value_t valPC3 = mergefunc(valE3, valF3, NAp);
		value_t valRA3 = mergefunc(valPA3, valPB3, NAp);
		value_t valRB3 = mergefunc(valPC3, valF3, NAp);
		value_t valRZ3 = mergefunc(valRA3, valRB3, NAp);
		value_t valPA4 = mergefunc(valA4, valB4, NAp);
		value_t valPB4 = mergefunc(valC4, valD4, NAp);
		value_t valPC4 = mergefunc(valE4, valF4, NAp);
		value_t valRA4 = mergefunc(valPA4, valPB4, NAp);
		value_t valRB4 = mergefunc(valPC4, valF4, NAp);
		value_t valRZ4 = mergefunc(valRA4, valRB4, NAp);
		value_t valPA5 = mergefunc(valA5, valB5, NAp);
		value_t valPB5 = mergefunc(valC5, valD5, NAp);
		value_t valPC5 = mergefunc(valE5, valF5, NAp);
		value_t valRA5 = mergefunc(valPA5, valPB5, NAp);
		value_t valRB5 = mergefunc(valPC5, valF5, NAp);
		value_t valRZ5 = mergefunc(valRA5, valRB5, NAp);
		value_t valPA6 = mergefunc(valA6, valB6, NAp);
		value_t valPB6 = mergefunc(valC6, valD6, NAp);
		value_t valPC6 = mergefunc(valE6, valF6, NAp);
		value_t valRA6 = mergefunc(valPA6, valPB6, NAp);
		value_t valRB6 = mergefunc(valPC6, valF6, NAp);
		value_t valRZ6 = mergefunc(valRA6, valRB6, NAp);
		value_t valPA7 = mergefunc(valA7, valB7, NAp);
		value_t valPB7 = mergefunc(valC7, valD7, NAp);
		value_t valPC7 = mergefunc(valE7, valF7, NAp);
		value_t valRA7 = mergefunc(valPA7, valPB7, NAp);
		value_t valRB7 = mergefunc(valPC7, valF7, NAp);
		value_t valRZ7 = mergefunc(valRA7, valRB7, NAp);
		
		#ifdef _WIDEWORD
		vdram[dramoffset_kvs + j].range(31, 0) = keyRZ0;
		vdram[dramoffset_kvs + j].range(63, 32) = valRZ0;
		vdram[dramoffset_kvs + j].range(95, 64) = keyRZ1;
		vdram[dramoffset_kvs + j].range(127, 96) = valRZ1;
		vdram[dramoffset_kvs + j].range(159, 128) = keyRZ2;
		vdram[dramoffset_kvs + j].range(191, 160) = valRZ2;
		vdram[dramoffset_kvs + j].range(223, 192) = keyRZ3;
		vdram[dramoffset_kvs + j].range(255, 224) = valRZ3;
		vdram[dramoffset_kvs + j].range(287, 256) = keyRZ4;
		vdram[dramoffset_kvs + j].range(319, 288) = valRZ4;
		vdram[dramoffset_kvs + j].range(351, 320) = keyRZ5;
		vdram[dramoffset_kvs + j].range(383, 352) = valRZ5;
		vdram[dramoffset_kvs + j].range(415, 384) = keyRZ6;
		vdram[dramoffset_kvs + j].range(447, 416) = valRZ6;
		vdram[dramoffset_kvs + j].range(479, 448) = keyRZ7;
		vdram[dramoffset_kvs + j].range(511, 480) = valRZ7;
		#else
		vdram[dramoffset_kvs + j].data[0].key = keyRZ0;
		vdram[dramoffset_kvs + j].data[0].value = valRZ0;
		vdram[dramoffset_kvs + j].data[1].key = keyRZ1;
		vdram[dramoffset_kvs + j].data[1].value = valRZ1;
		vdram[dramoffset_kvs + j].data[2].key = keyRZ2;
		vdram[dramoffset_kvs + j].data[2].value = valRZ2;
		vdram[dramoffset_kvs + j].data[3].key = keyRZ3;
		vdram[dramoffset_kvs + j].data[3].value = valRZ3;
		vdram[dramoffset_kvs + j].data[4].key = keyRZ4;
		vdram[dramoffset_kvs + j].data[4].value = valRZ4;
		vdram[dramoffset_kvs + j].data[5].key = keyRZ5;
		vdram[dramoffset_kvs + j].data[5].value = valRZ5;
		vdram[dramoffset_kvs + j].data[6].key = keyRZ6;
		vdram[dramoffset_kvs + j].data[6].value = valRZ6;
		vdram[dramoffset_kvs + j].data[7].key = keyRZ7;
		vdram[dramoffset_kvs + j].data[7].value = valRZ7;
		#endif
	}
	return;
}
void
	#if defined(SW)
	actsproc::
	#endif
merge11andsavevdata(bool_type enable, uint512_dt * vdram, keyvalue_vbuffer_t vbuffer0[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t vbuffer1[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t vbuffer2[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t vbuffer3[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t vbuffer4[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t vbuffer5[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t vbuffer6[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t vbuffer7[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t vbuffer8[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t vbuffer9[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t vbuffer10[VDATA_PACKINGSIZE][BLOCKRAM_SIZE], unsigned int begincol, batch_type bufferoffset_kvs, unsigned int dramoffset_kvs){
	if(enable == OFF){ return; }
	keyvalue_t dummykv;
	dummykv.key = 0xFFFFFFFF; dummykv.value = 0xFFFFFFFF;
	
	keyy_t keyA0 = dummykv.key;
	value_t valA0 = dummykv.key;
	keyy_t keyB0 = dummykv.key;
	value_t valB0 = dummykv.key;
	keyy_t keyC0 = dummykv.key;
	value_t valC0 = dummykv.key;
	keyy_t keyD0 = dummykv.key;
	value_t valD0 = dummykv.key;
	keyy_t keyE0 = dummykv.key;
	value_t valE0 = dummykv.key;
	keyy_t keyF0 = dummykv.key;
	value_t valF0 = dummykv.key;
	keyy_t keyG0 = dummykv.key;
	value_t valG0 = dummykv.key;
	keyy_t keyH0 = dummykv.key;
	value_t valH0 = dummykv.key;
	keyy_t keyI0 = dummykv.key;
	value_t valI0 = dummykv.key;
	keyy_t keyJ0 = dummykv.key;
	value_t valJ0 = dummykv.key;
	keyy_t keyK0 = dummykv.key;
	value_t valK0 = dummykv.key;
	keyy_t keyL0 = dummykv.key;
	value_t valL0 = dummykv.key;
	keyy_t keyM0 = dummykv.key;
	value_t valM0 = dummykv.key;
	keyy_t keyA1 = dummykv.key;
	value_t valA1 = dummykv.key;
	keyy_t keyB1 = dummykv.key;
	value_t valB1 = dummykv.key;
	keyy_t keyC1 = dummykv.key;
	value_t valC1 = dummykv.key;
	keyy_t keyD1 = dummykv.key;
	value_t valD1 = dummykv.key;
	keyy_t keyE1 = dummykv.key;
	value_t valE1 = dummykv.key;
	keyy_t keyF1 = dummykv.key;
	value_t valF1 = dummykv.key;
	keyy_t keyG1 = dummykv.key;
	value_t valG1 = dummykv.key;
	keyy_t keyH1 = dummykv.key;
	value_t valH1 = dummykv.key;
	keyy_t keyI1 = dummykv.key;
	value_t valI1 = dummykv.key;
	keyy_t keyJ1 = dummykv.key;
	value_t valJ1 = dummykv.key;
	keyy_t keyK1 = dummykv.key;
	value_t valK1 = dummykv.key;
	keyy_t keyL1 = dummykv.key;
	value_t valL1 = dummykv.key;
	keyy_t keyM1 = dummykv.key;
	value_t valM1 = dummykv.key;
	keyy_t keyA2 = dummykv.key;
	value_t valA2 = dummykv.key;
	keyy_t keyB2 = dummykv.key;
	value_t valB2 = dummykv.key;
	keyy_t keyC2 = dummykv.key;
	value_t valC2 = dummykv.key;
	keyy_t keyD2 = dummykv.key;
	value_t valD2 = dummykv.key;
	keyy_t keyE2 = dummykv.key;
	value_t valE2 = dummykv.key;
	keyy_t keyF2 = dummykv.key;
	value_t valF2 = dummykv.key;
	keyy_t keyG2 = dummykv.key;
	value_t valG2 = dummykv.key;
	keyy_t keyH2 = dummykv.key;
	value_t valH2 = dummykv.key;
	keyy_t keyI2 = dummykv.key;
	value_t valI2 = dummykv.key;
	keyy_t keyJ2 = dummykv.key;
	value_t valJ2 = dummykv.key;
	keyy_t keyK2 = dummykv.key;
	value_t valK2 = dummykv.key;
	keyy_t keyL2 = dummykv.key;
	value_t valL2 = dummykv.key;
	keyy_t keyM2 = dummykv.key;
	value_t valM2 = dummykv.key;
	keyy_t keyA3 = dummykv.key;
	value_t valA3 = dummykv.key;
	keyy_t keyB3 = dummykv.key;
	value_t valB3 = dummykv.key;
	keyy_t keyC3 = dummykv.key;
	value_t valC3 = dummykv.key;
	keyy_t keyD3 = dummykv.key;
	value_t valD3 = dummykv.key;
	keyy_t keyE3 = dummykv.key;
	value_t valE3 = dummykv.key;
	keyy_t keyF3 = dummykv.key;
	value_t valF3 = dummykv.key;
	keyy_t keyG3 = dummykv.key;
	value_t valG3 = dummykv.key;
	keyy_t keyH3 = dummykv.key;
	value_t valH3 = dummykv.key;
	keyy_t keyI3 = dummykv.key;
	value_t valI3 = dummykv.key;
	keyy_t keyJ3 = dummykv.key;
	value_t valJ3 = dummykv.key;
	keyy_t keyK3 = dummykv.key;
	value_t valK3 = dummykv.key;
	keyy_t keyL3 = dummykv.key;
	value_t valL3 = dummykv.key;
	keyy_t keyM3 = dummykv.key;
	value_t valM3 = dummykv.key;
	keyy_t keyA4 = dummykv.key;
	value_t valA4 = dummykv.key;
	keyy_t keyB4 = dummykv.key;
	value_t valB4 = dummykv.key;
	keyy_t keyC4 = dummykv.key;
	value_t valC4 = dummykv.key;
	keyy_t keyD4 = dummykv.key;
	value_t valD4 = dummykv.key;
	keyy_t keyE4 = dummykv.key;
	value_t valE4 = dummykv.key;
	keyy_t keyF4 = dummykv.key;
	value_t valF4 = dummykv.key;
	keyy_t keyG4 = dummykv.key;
	value_t valG4 = dummykv.key;
	keyy_t keyH4 = dummykv.key;
	value_t valH4 = dummykv.key;
	keyy_t keyI4 = dummykv.key;
	value_t valI4 = dummykv.key;
	keyy_t keyJ4 = dummykv.key;
	value_t valJ4 = dummykv.key;
	keyy_t keyK4 = dummykv.key;
	value_t valK4 = dummykv.key;
	keyy_t keyL4 = dummykv.key;
	value_t valL4 = dummykv.key;
	keyy_t keyM4 = dummykv.key;
	value_t valM4 = dummykv.key;
	keyy_t keyA5 = dummykv.key;
	value_t valA5 = dummykv.key;
	keyy_t keyB5 = dummykv.key;
	value_t valB5 = dummykv.key;
	keyy_t keyC5 = dummykv.key;
	value_t valC5 = dummykv.key;
	keyy_t keyD5 = dummykv.key;
	value_t valD5 = dummykv.key;
	keyy_t keyE5 = dummykv.key;
	value_t valE5 = dummykv.key;
	keyy_t keyF5 = dummykv.key;
	value_t valF5 = dummykv.key;
	keyy_t keyG5 = dummykv.key;
	value_t valG5 = dummykv.key;
	keyy_t keyH5 = dummykv.key;
	value_t valH5 = dummykv.key;
	keyy_t keyI5 = dummykv.key;
	value_t valI5 = dummykv.key;
	keyy_t keyJ5 = dummykv.key;
	value_t valJ5 = dummykv.key;
	keyy_t keyK5 = dummykv.key;
	value_t valK5 = dummykv.key;
	keyy_t keyL5 = dummykv.key;
	value_t valL5 = dummykv.key;
	keyy_t keyM5 = dummykv.key;
	value_t valM5 = dummykv.key;
	keyy_t keyA6 = dummykv.key;
	value_t valA6 = dummykv.key;
	keyy_t keyB6 = dummykv.key;
	value_t valB6 = dummykv.key;
	keyy_t keyC6 = dummykv.key;
	value_t valC6 = dummykv.key;
	keyy_t keyD6 = dummykv.key;
	value_t valD6 = dummykv.key;
	keyy_t keyE6 = dummykv.key;
	value_t valE6 = dummykv.key;
	keyy_t keyF6 = dummykv.key;
	value_t valF6 = dummykv.key;
	keyy_t keyG6 = dummykv.key;
	value_t valG6 = dummykv.key;
	keyy_t keyH6 = dummykv.key;
	value_t valH6 = dummykv.key;
	keyy_t keyI6 = dummykv.key;
	value_t valI6 = dummykv.key;
	keyy_t keyJ6 = dummykv.key;
	value_t valJ6 = dummykv.key;
	keyy_t keyK6 = dummykv.key;
	value_t valK6 = dummykv.key;
	keyy_t keyL6 = dummykv.key;
	value_t valL6 = dummykv.key;
	keyy_t keyM6 = dummykv.key;
	value_t valM6 = dummykv.key;
	keyy_t keyA7 = dummykv.key;
	value_t valA7 = dummykv.key;
	keyy_t keyB7 = dummykv.key;
	value_t valB7 = dummykv.key;
	keyy_t keyC7 = dummykv.key;
	value_t valC7 = dummykv.key;
	keyy_t keyD7 = dummykv.key;
	value_t valD7 = dummykv.key;
	keyy_t keyE7 = dummykv.key;
	value_t valE7 = dummykv.key;
	keyy_t keyF7 = dummykv.key;
	value_t valF7 = dummykv.key;
	keyy_t keyG7 = dummykv.key;
	value_t valG7 = dummykv.key;
	keyy_t keyH7 = dummykv.key;
	value_t valH7 = dummykv.key;
	keyy_t keyI7 = dummykv.key;
	value_t valI7 = dummykv.key;
	keyy_t keyJ7 = dummykv.key;
	value_t valJ7 = dummykv.key;
	keyy_t keyK7 = dummykv.key;
	value_t valK7 = dummykv.key;
	keyy_t keyL7 = dummykv.key;
	value_t valL7 = dummykv.key;
	keyy_t keyM7 = dummykv.key;
	value_t valM7 = dummykv.key;
	
	MERGE11_LOOP1: for (buffer_type j=0; j<BLOCKRAM_SIZE; j++){
	#pragma HLS PIPELINE II=1
		keyvalue_t mykeyvalue00 = GETKV2(vbuffer0[begincol + 0][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue01 = GETKV2(vbuffer0[begincol + 1][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue02 = GETKV2(vbuffer0[begincol + 2][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue03 = GETKV2(vbuffer0[begincol + 3][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue04 = GETKV2(vbuffer0[begincol + 4][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue05 = GETKV2(vbuffer0[begincol + 5][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue06 = GETKV2(vbuffer0[begincol + 6][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue07 = GETKV2(vbuffer0[begincol + 7][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue10 = GETKV2(vbuffer1[begincol + 0][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue11 = GETKV2(vbuffer1[begincol + 1][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue12 = GETKV2(vbuffer1[begincol + 2][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue13 = GETKV2(vbuffer1[begincol + 3][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue14 = GETKV2(vbuffer1[begincol + 4][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue15 = GETKV2(vbuffer1[begincol + 5][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue16 = GETKV2(vbuffer1[begincol + 6][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue17 = GETKV2(vbuffer1[begincol + 7][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue20 = GETKV2(vbuffer2[begincol + 0][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue21 = GETKV2(vbuffer2[begincol + 1][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue22 = GETKV2(vbuffer2[begincol + 2][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue23 = GETKV2(vbuffer2[begincol + 3][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue24 = GETKV2(vbuffer2[begincol + 4][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue25 = GETKV2(vbuffer2[begincol + 5][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue26 = GETKV2(vbuffer2[begincol + 6][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue27 = GETKV2(vbuffer2[begincol + 7][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue30 = GETKV2(vbuffer3[begincol + 0][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue31 = GETKV2(vbuffer3[begincol + 1][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue32 = GETKV2(vbuffer3[begincol + 2][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue33 = GETKV2(vbuffer3[begincol + 3][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue34 = GETKV2(vbuffer3[begincol + 4][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue35 = GETKV2(vbuffer3[begincol + 5][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue36 = GETKV2(vbuffer3[begincol + 6][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue37 = GETKV2(vbuffer3[begincol + 7][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue40 = GETKV2(vbuffer4[begincol + 0][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue41 = GETKV2(vbuffer4[begincol + 1][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue42 = GETKV2(vbuffer4[begincol + 2][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue43 = GETKV2(vbuffer4[begincol + 3][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue44 = GETKV2(vbuffer4[begincol + 4][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue45 = GETKV2(vbuffer4[begincol + 5][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue46 = GETKV2(vbuffer4[begincol + 6][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue47 = GETKV2(vbuffer4[begincol + 7][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue50 = GETKV2(vbuffer5[begincol + 0][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue51 = GETKV2(vbuffer5[begincol + 1][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue52 = GETKV2(vbuffer5[begincol + 2][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue53 = GETKV2(vbuffer5[begincol + 3][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue54 = GETKV2(vbuffer5[begincol + 4][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue55 = GETKV2(vbuffer5[begincol + 5][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue56 = GETKV2(vbuffer5[begincol + 6][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue57 = GETKV2(vbuffer5[begincol + 7][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue60 = GETKV2(vbuffer6[begincol + 0][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue61 = GETKV2(vbuffer6[begincol + 1][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue62 = GETKV2(vbuffer6[begincol + 2][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue63 = GETKV2(vbuffer6[begincol + 3][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue64 = GETKV2(vbuffer6[begincol + 4][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue65 = GETKV2(vbuffer6[begincol + 5][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue66 = GETKV2(vbuffer6[begincol + 6][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue67 = GETKV2(vbuffer6[begincol + 7][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue70 = GETKV2(vbuffer7[begincol + 0][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue71 = GETKV2(vbuffer7[begincol + 1][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue72 = GETKV2(vbuffer7[begincol + 2][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue73 = GETKV2(vbuffer7[begincol + 3][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue74 = GETKV2(vbuffer7[begincol + 4][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue75 = GETKV2(vbuffer7[begincol + 5][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue76 = GETKV2(vbuffer7[begincol + 6][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue77 = GETKV2(vbuffer7[begincol + 7][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue80 = GETKV2(vbuffer8[begincol + 0][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue81 = GETKV2(vbuffer8[begincol + 1][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue82 = GETKV2(vbuffer8[begincol + 2][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue83 = GETKV2(vbuffer8[begincol + 3][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue84 = GETKV2(vbuffer8[begincol + 4][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue85 = GETKV2(vbuffer8[begincol + 5][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue86 = GETKV2(vbuffer8[begincol + 6][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue87 = GETKV2(vbuffer8[begincol + 7][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue90 = GETKV2(vbuffer9[begincol + 0][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue91 = GETKV2(vbuffer9[begincol + 1][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue92 = GETKV2(vbuffer9[begincol + 2][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue93 = GETKV2(vbuffer9[begincol + 3][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue94 = GETKV2(vbuffer9[begincol + 4][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue95 = GETKV2(vbuffer9[begincol + 5][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue96 = GETKV2(vbuffer9[begincol + 6][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue97 = GETKV2(vbuffer9[begincol + 7][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue100 = GETKV2(vbuffer10[begincol + 0][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue101 = GETKV2(vbuffer10[begincol + 1][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue102 = GETKV2(vbuffer10[begincol + 2][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue103 = GETKV2(vbuffer10[begincol + 3][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue104 = GETKV2(vbuffer10[begincol + 4][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue105 = GETKV2(vbuffer10[begincol + 5][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue106 = GETKV2(vbuffer10[begincol + 6][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue107 = GETKV2(vbuffer10[begincol + 7][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue110 = dummykv;
		keyvalue_t mykeyvalue111 = dummykv;
		keyvalue_t mykeyvalue112 = dummykv;
		keyvalue_t mykeyvalue113 = dummykv;
		keyvalue_t mykeyvalue114 = dummykv;
		keyvalue_t mykeyvalue115 = dummykv;
		keyvalue_t mykeyvalue116 = dummykv;
		keyvalue_t mykeyvalue117 = dummykv;
		keyvalue_t mykeyvalue120 = dummykv;
		keyvalue_t mykeyvalue121 = dummykv;
		keyvalue_t mykeyvalue122 = dummykv;
		keyvalue_t mykeyvalue123 = dummykv;
		keyvalue_t mykeyvalue124 = dummykv;
		keyvalue_t mykeyvalue125 = dummykv;
		keyvalue_t mykeyvalue126 = dummykv;
		keyvalue_t mykeyvalue127 = dummykv;
		keyvalue_t mykeyvalue130 = dummykv;
		keyvalue_t mykeyvalue131 = dummykv;
		keyvalue_t mykeyvalue132 = dummykv;
		keyvalue_t mykeyvalue133 = dummykv;
		keyvalue_t mykeyvalue134 = dummykv;
		keyvalue_t mykeyvalue135 = dummykv;
		keyvalue_t mykeyvalue136 = dummykv;
		keyvalue_t mykeyvalue137 = dummykv;
		keyvalue_t mykeyvalue140 = dummykv;
		keyvalue_t mykeyvalue141 = dummykv;
		keyvalue_t mykeyvalue142 = dummykv;
		keyvalue_t mykeyvalue143 = dummykv;
		keyvalue_t mykeyvalue144 = dummykv;
		keyvalue_t mykeyvalue145 = dummykv;
		keyvalue_t mykeyvalue146 = dummykv;
		keyvalue_t mykeyvalue147 = dummykv;
		
		//((n)/2)
		keyA0 = mergefunc(mykeyvalue00.key, mykeyvalue10.key, NAp);
		keyB0 = mergefunc(mykeyvalue20.key, mykeyvalue30.key, NAp);
		keyC0 = mergefunc(mykeyvalue40.key, mykeyvalue50.key, NAp);
		keyD0 = mergefunc(mykeyvalue60.key, mykeyvalue70.key, NAp);
		keyE0 = mergefunc(mykeyvalue80.key, mykeyvalue90.key, NAp);
		keyF0 = mergefunc(mykeyvalue100.key, mykeyvalue110.key, NAp);
		keyA1 = mergefunc(mykeyvalue01.key, mykeyvalue11.key, NAp);
		keyB1 = mergefunc(mykeyvalue21.key, mykeyvalue31.key, NAp);
		keyC1 = mergefunc(mykeyvalue41.key, mykeyvalue51.key, NAp);
		keyD1 = mergefunc(mykeyvalue61.key, mykeyvalue71.key, NAp);
		keyE1 = mergefunc(mykeyvalue81.key, mykeyvalue91.key, NAp);
		keyF1 = mergefunc(mykeyvalue101.key, mykeyvalue111.key, NAp);
		keyA2 = mergefunc(mykeyvalue02.key, mykeyvalue12.key, NAp);
		keyB2 = mergefunc(mykeyvalue22.key, mykeyvalue32.key, NAp);
		keyC2 = mergefunc(mykeyvalue42.key, mykeyvalue52.key, NAp);
		keyD2 = mergefunc(mykeyvalue62.key, mykeyvalue72.key, NAp);
		keyE2 = mergefunc(mykeyvalue82.key, mykeyvalue92.key, NAp);
		keyF2 = mergefunc(mykeyvalue102.key, mykeyvalue112.key, NAp);
		keyA3 = mergefunc(mykeyvalue03.key, mykeyvalue13.key, NAp);
		keyB3 = mergefunc(mykeyvalue23.key, mykeyvalue33.key, NAp);
		keyC3 = mergefunc(mykeyvalue43.key, mykeyvalue53.key, NAp);
		keyD3 = mergefunc(mykeyvalue63.key, mykeyvalue73.key, NAp);
		keyE3 = mergefunc(mykeyvalue83.key, mykeyvalue93.key, NAp);
		keyF3 = mergefunc(mykeyvalue103.key, mykeyvalue113.key, NAp);
		keyA4 = mergefunc(mykeyvalue04.key, mykeyvalue14.key, NAp);
		keyB4 = mergefunc(mykeyvalue24.key, mykeyvalue34.key, NAp);
		keyC4 = mergefunc(mykeyvalue44.key, mykeyvalue54.key, NAp);
		keyD4 = mergefunc(mykeyvalue64.key, mykeyvalue74.key, NAp);
		keyE4 = mergefunc(mykeyvalue84.key, mykeyvalue94.key, NAp);
		keyF4 = mergefunc(mykeyvalue104.key, mykeyvalue114.key, NAp);
		keyA5 = mergefunc(mykeyvalue05.key, mykeyvalue15.key, NAp);
		keyB5 = mergefunc(mykeyvalue25.key, mykeyvalue35.key, NAp);
		keyC5 = mergefunc(mykeyvalue45.key, mykeyvalue55.key, NAp);
		keyD5 = mergefunc(mykeyvalue65.key, mykeyvalue75.key, NAp);
		keyE5 = mergefunc(mykeyvalue85.key, mykeyvalue95.key, NAp);
		keyF5 = mergefunc(mykeyvalue105.key, mykeyvalue115.key, NAp);
		keyA6 = mergefunc(mykeyvalue06.key, mykeyvalue16.key, NAp);
		keyB6 = mergefunc(mykeyvalue26.key, mykeyvalue36.key, NAp);
		keyC6 = mergefunc(mykeyvalue46.key, mykeyvalue56.key, NAp);
		keyD6 = mergefunc(mykeyvalue66.key, mykeyvalue76.key, NAp);
		keyE6 = mergefunc(mykeyvalue86.key, mykeyvalue96.key, NAp);
		keyF6 = mergefunc(mykeyvalue106.key, mykeyvalue116.key, NAp);
		keyA7 = mergefunc(mykeyvalue07.key, mykeyvalue17.key, NAp);
		keyB7 = mergefunc(mykeyvalue27.key, mykeyvalue37.key, NAp);
		keyC7 = mergefunc(mykeyvalue47.key, mykeyvalue57.key, NAp);
		keyD7 = mergefunc(mykeyvalue67.key, mykeyvalue77.key, NAp);
		keyE7 = mergefunc(mykeyvalue87.key, mykeyvalue97.key, NAp);
		keyF7 = mergefunc(mykeyvalue107.key, mykeyvalue117.key, NAp);
		keyy_t keyPA0 = mergefunc(keyA0, keyB0, NAp);
		keyy_t keyPB0 = mergefunc(keyC0, keyD0, NAp);
		keyy_t keyPC0 = mergefunc(keyE0, keyF0, NAp);
		keyy_t keyRA0 = mergefunc(keyPA0, keyPB0, NAp);
		keyy_t keyRB0 = mergefunc(keyPC0, keyF0, NAp);
		keyy_t keyRZ0 = mergefunc(keyRA0, keyRB0, NAp);
		keyy_t keyPA1 = mergefunc(keyA1, keyB1, NAp);
		keyy_t keyPB1 = mergefunc(keyC1, keyD1, NAp);
		keyy_t keyPC1 = mergefunc(keyE1, keyF1, NAp);
		keyy_t keyRA1 = mergefunc(keyPA1, keyPB1, NAp);
		keyy_t keyRB1 = mergefunc(keyPC1, keyF1, NAp);
		keyy_t keyRZ1 = mergefunc(keyRA1, keyRB1, NAp);
		keyy_t keyPA2 = mergefunc(keyA2, keyB2, NAp);
		keyy_t keyPB2 = mergefunc(keyC2, keyD2, NAp);
		keyy_t keyPC2 = mergefunc(keyE2, keyF2, NAp);
		keyy_t keyRA2 = mergefunc(keyPA2, keyPB2, NAp);
		keyy_t keyRB2 = mergefunc(keyPC2, keyF2, NAp);
		keyy_t keyRZ2 = mergefunc(keyRA2, keyRB2, NAp);
		keyy_t keyPA3 = mergefunc(keyA3, keyB3, NAp);
		keyy_t keyPB3 = mergefunc(keyC3, keyD3, NAp);
		keyy_t keyPC3 = mergefunc(keyE3, keyF3, NAp);
		keyy_t keyRA3 = mergefunc(keyPA3, keyPB3, NAp);
		keyy_t keyRB3 = mergefunc(keyPC3, keyF3, NAp);
		keyy_t keyRZ3 = mergefunc(keyRA3, keyRB3, NAp);
		keyy_t keyPA4 = mergefunc(keyA4, keyB4, NAp);
		keyy_t keyPB4 = mergefunc(keyC4, keyD4, NAp);
		keyy_t keyPC4 = mergefunc(keyE4, keyF4, NAp);
		keyy_t keyRA4 = mergefunc(keyPA4, keyPB4, NAp);
		keyy_t keyRB4 = mergefunc(keyPC4, keyF4, NAp);
		keyy_t keyRZ4 = mergefunc(keyRA4, keyRB4, NAp);
		keyy_t keyPA5 = mergefunc(keyA5, keyB5, NAp);
		keyy_t keyPB5 = mergefunc(keyC5, keyD5, NAp);
		keyy_t keyPC5 = mergefunc(keyE5, keyF5, NAp);
		keyy_t keyRA5 = mergefunc(keyPA5, keyPB5, NAp);
		keyy_t keyRB5 = mergefunc(keyPC5, keyF5, NAp);
		keyy_t keyRZ5 = mergefunc(keyRA5, keyRB5, NAp);
		keyy_t keyPA6 = mergefunc(keyA6, keyB6, NAp);
		keyy_t keyPB6 = mergefunc(keyC6, keyD6, NAp);
		keyy_t keyPC6 = mergefunc(keyE6, keyF6, NAp);
		keyy_t keyRA6 = mergefunc(keyPA6, keyPB6, NAp);
		keyy_t keyRB6 = mergefunc(keyPC6, keyF6, NAp);
		keyy_t keyRZ6 = mergefunc(keyRA6, keyRB6, NAp);
		keyy_t keyPA7 = mergefunc(keyA7, keyB7, NAp);
		keyy_t keyPB7 = mergefunc(keyC7, keyD7, NAp);
		keyy_t keyPC7 = mergefunc(keyE7, keyF7, NAp);
		keyy_t keyRA7 = mergefunc(keyPA7, keyPB7, NAp);
		keyy_t keyRB7 = mergefunc(keyPC7, keyF7, NAp);
		keyy_t keyRZ7 = mergefunc(keyRA7, keyRB7, NAp);
		
		//((n)/2)
		valA0 = mergefunc(mykeyvalue00.value, mykeyvalue10.value, NAp);
		valB0 = mergefunc(mykeyvalue20.value, mykeyvalue30.value, NAp);
		valC0 = mergefunc(mykeyvalue40.value, mykeyvalue50.value, NAp);
		valD0 = mergefunc(mykeyvalue60.value, mykeyvalue70.value, NAp);
		valE0 = mergefunc(mykeyvalue80.value, mykeyvalue90.value, NAp);
		valF0 = mergefunc(mykeyvalue100.value, mykeyvalue110.value, NAp);
		valA1 = mergefunc(mykeyvalue01.value, mykeyvalue11.value, NAp);
		valB1 = mergefunc(mykeyvalue21.value, mykeyvalue31.value, NAp);
		valC1 = mergefunc(mykeyvalue41.value, mykeyvalue51.value, NAp);
		valD1 = mergefunc(mykeyvalue61.value, mykeyvalue71.value, NAp);
		valE1 = mergefunc(mykeyvalue81.value, mykeyvalue91.value, NAp);
		valF1 = mergefunc(mykeyvalue101.value, mykeyvalue111.value, NAp);
		valA2 = mergefunc(mykeyvalue02.value, mykeyvalue12.value, NAp);
		valB2 = mergefunc(mykeyvalue22.value, mykeyvalue32.value, NAp);
		valC2 = mergefunc(mykeyvalue42.value, mykeyvalue52.value, NAp);
		valD2 = mergefunc(mykeyvalue62.value, mykeyvalue72.value, NAp);
		valE2 = mergefunc(mykeyvalue82.value, mykeyvalue92.value, NAp);
		valF2 = mergefunc(mykeyvalue102.value, mykeyvalue112.value, NAp);
		valA3 = mergefunc(mykeyvalue03.value, mykeyvalue13.value, NAp);
		valB3 = mergefunc(mykeyvalue23.value, mykeyvalue33.value, NAp);
		valC3 = mergefunc(mykeyvalue43.value, mykeyvalue53.value, NAp);
		valD3 = mergefunc(mykeyvalue63.value, mykeyvalue73.value, NAp);
		valE3 = mergefunc(mykeyvalue83.value, mykeyvalue93.value, NAp);
		valF3 = mergefunc(mykeyvalue103.value, mykeyvalue113.value, NAp);
		valA4 = mergefunc(mykeyvalue04.value, mykeyvalue14.value, NAp);
		valB4 = mergefunc(mykeyvalue24.value, mykeyvalue34.value, NAp);
		valC4 = mergefunc(mykeyvalue44.value, mykeyvalue54.value, NAp);
		valD4 = mergefunc(mykeyvalue64.value, mykeyvalue74.value, NAp);
		valE4 = mergefunc(mykeyvalue84.value, mykeyvalue94.value, NAp);
		valF4 = mergefunc(mykeyvalue104.value, mykeyvalue114.value, NAp);
		valA5 = mergefunc(mykeyvalue05.value, mykeyvalue15.value, NAp);
		valB5 = mergefunc(mykeyvalue25.value, mykeyvalue35.value, NAp);
		valC5 = mergefunc(mykeyvalue45.value, mykeyvalue55.value, NAp);
		valD5 = mergefunc(mykeyvalue65.value, mykeyvalue75.value, NAp);
		valE5 = mergefunc(mykeyvalue85.value, mykeyvalue95.value, NAp);
		valF5 = mergefunc(mykeyvalue105.value, mykeyvalue115.value, NAp);
		valA6 = mergefunc(mykeyvalue06.value, mykeyvalue16.value, NAp);
		valB6 = mergefunc(mykeyvalue26.value, mykeyvalue36.value, NAp);
		valC6 = mergefunc(mykeyvalue46.value, mykeyvalue56.value, NAp);
		valD6 = mergefunc(mykeyvalue66.value, mykeyvalue76.value, NAp);
		valE6 = mergefunc(mykeyvalue86.value, mykeyvalue96.value, NAp);
		valF6 = mergefunc(mykeyvalue106.value, mykeyvalue116.value, NAp);
		valA7 = mergefunc(mykeyvalue07.value, mykeyvalue17.value, NAp);
		valB7 = mergefunc(mykeyvalue27.value, mykeyvalue37.value, NAp);
		valC7 = mergefunc(mykeyvalue47.value, mykeyvalue57.value, NAp);
		valD7 = mergefunc(mykeyvalue67.value, mykeyvalue77.value, NAp);
		valE7 = mergefunc(mykeyvalue87.value, mykeyvalue97.value, NAp);
		valF7 = mergefunc(mykeyvalue107.value, mykeyvalue117.value, NAp);
		value_t valPA0 = mergefunc(valA0, valB0, NAp);
		value_t valPB0 = mergefunc(valC0, valD0, NAp);
		value_t valPC0 = mergefunc(valE0, valF0, NAp);
		value_t valRA0 = mergefunc(valPA0, valPB0, NAp);
		value_t valRB0 = mergefunc(valPC0, valF0, NAp);
		value_t valRZ0 = mergefunc(valRA0, valRB0, NAp);
		value_t valPA1 = mergefunc(valA1, valB1, NAp);
		value_t valPB1 = mergefunc(valC1, valD1, NAp);
		value_t valPC1 = mergefunc(valE1, valF1, NAp);
		value_t valRA1 = mergefunc(valPA1, valPB1, NAp);
		value_t valRB1 = mergefunc(valPC1, valF1, NAp);
		value_t valRZ1 = mergefunc(valRA1, valRB1, NAp);
		value_t valPA2 = mergefunc(valA2, valB2, NAp);
		value_t valPB2 = mergefunc(valC2, valD2, NAp);
		value_t valPC2 = mergefunc(valE2, valF2, NAp);
		value_t valRA2 = mergefunc(valPA2, valPB2, NAp);
		value_t valRB2 = mergefunc(valPC2, valF2, NAp);
		value_t valRZ2 = mergefunc(valRA2, valRB2, NAp);
		value_t valPA3 = mergefunc(valA3, valB3, NAp);
		value_t valPB3 = mergefunc(valC3, valD3, NAp);
		value_t valPC3 = mergefunc(valE3, valF3, NAp);
		value_t valRA3 = mergefunc(valPA3, valPB3, NAp);
		value_t valRB3 = mergefunc(valPC3, valF3, NAp);
		value_t valRZ3 = mergefunc(valRA3, valRB3, NAp);
		value_t valPA4 = mergefunc(valA4, valB4, NAp);
		value_t valPB4 = mergefunc(valC4, valD4, NAp);
		value_t valPC4 = mergefunc(valE4, valF4, NAp);
		value_t valRA4 = mergefunc(valPA4, valPB4, NAp);
		value_t valRB4 = mergefunc(valPC4, valF4, NAp);
		value_t valRZ4 = mergefunc(valRA4, valRB4, NAp);
		value_t valPA5 = mergefunc(valA5, valB5, NAp);
		value_t valPB5 = mergefunc(valC5, valD5, NAp);
		value_t valPC5 = mergefunc(valE5, valF5, NAp);
		value_t valRA5 = mergefunc(valPA5, valPB5, NAp);
		value_t valRB5 = mergefunc(valPC5, valF5, NAp);
		value_t valRZ5 = mergefunc(valRA5, valRB5, NAp);
		value_t valPA6 = mergefunc(valA6, valB6, NAp);
		value_t valPB6 = mergefunc(valC6, valD6, NAp);
		value_t valPC6 = mergefunc(valE6, valF6, NAp);
		value_t valRA6 = mergefunc(valPA6, valPB6, NAp);
		value_t valRB6 = mergefunc(valPC6, valF6, NAp);
		value_t valRZ6 = mergefunc(valRA6, valRB6, NAp);
		value_t valPA7 = mergefunc(valA7, valB7, NAp);
		value_t valPB7 = mergefunc(valC7, valD7, NAp);
		value_t valPC7 = mergefunc(valE7, valF7, NAp);
		value_t valRA7 = mergefunc(valPA7, valPB7, NAp);
		value_t valRB7 = mergefunc(valPC7, valF7, NAp);
		value_t valRZ7 = mergefunc(valRA7, valRB7, NAp);
		
		#ifdef _WIDEWORD
		vdram[dramoffset_kvs + j].range(31, 0) = keyRZ0;
		vdram[dramoffset_kvs + j].range(63, 32) = valRZ0;
		vdram[dramoffset_kvs + j].range(95, 64) = keyRZ1;
		vdram[dramoffset_kvs + j].range(127, 96) = valRZ1;
		vdram[dramoffset_kvs + j].range(159, 128) = keyRZ2;
		vdram[dramoffset_kvs + j].range(191, 160) = valRZ2;
		vdram[dramoffset_kvs + j].range(223, 192) = keyRZ3;
		vdram[dramoffset_kvs + j].range(255, 224) = valRZ3;
		vdram[dramoffset_kvs + j].range(287, 256) = keyRZ4;
		vdram[dramoffset_kvs + j].range(319, 288) = valRZ4;
		vdram[dramoffset_kvs + j].range(351, 320) = keyRZ5;
		vdram[dramoffset_kvs + j].range(383, 352) = valRZ5;
		vdram[dramoffset_kvs + j].range(415, 384) = keyRZ6;
		vdram[dramoffset_kvs + j].range(447, 416) = valRZ6;
		vdram[dramoffset_kvs + j].range(479, 448) = keyRZ7;
		vdram[dramoffset_kvs + j].range(511, 480) = valRZ7;
		#else
		vdram[dramoffset_kvs + j].data[0].key = keyRZ0;
		vdram[dramoffset_kvs + j].data[0].value = valRZ0;
		vdram[dramoffset_kvs + j].data[1].key = keyRZ1;
		vdram[dramoffset_kvs + j].data[1].value = valRZ1;
		vdram[dramoffset_kvs + j].data[2].key = keyRZ2;
		vdram[dramoffset_kvs + j].data[2].value = valRZ2;
		vdram[dramoffset_kvs + j].data[3].key = keyRZ3;
		vdram[dramoffset_kvs + j].data[3].value = valRZ3;
		vdram[dramoffset_kvs + j].data[4].key = keyRZ4;
		vdram[dramoffset_kvs + j].data[4].value = valRZ4;
		vdram[dramoffset_kvs + j].data[5].key = keyRZ5;
		vdram[dramoffset_kvs + j].data[5].value = valRZ5;
		vdram[dramoffset_kvs + j].data[6].key = keyRZ6;
		vdram[dramoffset_kvs + j].data[6].value = valRZ6;
		vdram[dramoffset_kvs + j].data[7].key = keyRZ7;
		vdram[dramoffset_kvs + j].data[7].value = valRZ7;
		#endif
	}
	return;
}
void
	#if defined(SW)
	actsproc::
	#endif
merge12andsavevdata(bool_type enable, uint512_dt * vdram, keyvalue_vbuffer_t vbuffer0[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t vbuffer1[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t vbuffer2[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t vbuffer3[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t vbuffer4[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t vbuffer5[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t vbuffer6[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t vbuffer7[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t vbuffer8[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t vbuffer9[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t vbuffer10[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t vbuffer11[VDATA_PACKINGSIZE][BLOCKRAM_SIZE], unsigned int begincol, batch_type bufferoffset_kvs, unsigned int dramoffset_kvs){
	if(enable == OFF){ return; }
	keyvalue_t dummykv;
	dummykv.key = 0xFFFFFFFF; dummykv.value = 0xFFFFFFFF;
	
	keyy_t keyA0 = dummykv.key;
	value_t valA0 = dummykv.key;
	keyy_t keyB0 = dummykv.key;
	value_t valB0 = dummykv.key;
	keyy_t keyC0 = dummykv.key;
	value_t valC0 = dummykv.key;
	keyy_t keyD0 = dummykv.key;
	value_t valD0 = dummykv.key;
	keyy_t keyE0 = dummykv.key;
	value_t valE0 = dummykv.key;
	keyy_t keyF0 = dummykv.key;
	value_t valF0 = dummykv.key;
	keyy_t keyG0 = dummykv.key;
	value_t valG0 = dummykv.key;
	keyy_t keyH0 = dummykv.key;
	value_t valH0 = dummykv.key;
	keyy_t keyI0 = dummykv.key;
	value_t valI0 = dummykv.key;
	keyy_t keyJ0 = dummykv.key;
	value_t valJ0 = dummykv.key;
	keyy_t keyK0 = dummykv.key;
	value_t valK0 = dummykv.key;
	keyy_t keyL0 = dummykv.key;
	value_t valL0 = dummykv.key;
	keyy_t keyM0 = dummykv.key;
	value_t valM0 = dummykv.key;
	keyy_t keyA1 = dummykv.key;
	value_t valA1 = dummykv.key;
	keyy_t keyB1 = dummykv.key;
	value_t valB1 = dummykv.key;
	keyy_t keyC1 = dummykv.key;
	value_t valC1 = dummykv.key;
	keyy_t keyD1 = dummykv.key;
	value_t valD1 = dummykv.key;
	keyy_t keyE1 = dummykv.key;
	value_t valE1 = dummykv.key;
	keyy_t keyF1 = dummykv.key;
	value_t valF1 = dummykv.key;
	keyy_t keyG1 = dummykv.key;
	value_t valG1 = dummykv.key;
	keyy_t keyH1 = dummykv.key;
	value_t valH1 = dummykv.key;
	keyy_t keyI1 = dummykv.key;
	value_t valI1 = dummykv.key;
	keyy_t keyJ1 = dummykv.key;
	value_t valJ1 = dummykv.key;
	keyy_t keyK1 = dummykv.key;
	value_t valK1 = dummykv.key;
	keyy_t keyL1 = dummykv.key;
	value_t valL1 = dummykv.key;
	keyy_t keyM1 = dummykv.key;
	value_t valM1 = dummykv.key;
	keyy_t keyA2 = dummykv.key;
	value_t valA2 = dummykv.key;
	keyy_t keyB2 = dummykv.key;
	value_t valB2 = dummykv.key;
	keyy_t keyC2 = dummykv.key;
	value_t valC2 = dummykv.key;
	keyy_t keyD2 = dummykv.key;
	value_t valD2 = dummykv.key;
	keyy_t keyE2 = dummykv.key;
	value_t valE2 = dummykv.key;
	keyy_t keyF2 = dummykv.key;
	value_t valF2 = dummykv.key;
	keyy_t keyG2 = dummykv.key;
	value_t valG2 = dummykv.key;
	keyy_t keyH2 = dummykv.key;
	value_t valH2 = dummykv.key;
	keyy_t keyI2 = dummykv.key;
	value_t valI2 = dummykv.key;
	keyy_t keyJ2 = dummykv.key;
	value_t valJ2 = dummykv.key;
	keyy_t keyK2 = dummykv.key;
	value_t valK2 = dummykv.key;
	keyy_t keyL2 = dummykv.key;
	value_t valL2 = dummykv.key;
	keyy_t keyM2 = dummykv.key;
	value_t valM2 = dummykv.key;
	keyy_t keyA3 = dummykv.key;
	value_t valA3 = dummykv.key;
	keyy_t keyB3 = dummykv.key;
	value_t valB3 = dummykv.key;
	keyy_t keyC3 = dummykv.key;
	value_t valC3 = dummykv.key;
	keyy_t keyD3 = dummykv.key;
	value_t valD3 = dummykv.key;
	keyy_t keyE3 = dummykv.key;
	value_t valE3 = dummykv.key;
	keyy_t keyF3 = dummykv.key;
	value_t valF3 = dummykv.key;
	keyy_t keyG3 = dummykv.key;
	value_t valG3 = dummykv.key;
	keyy_t keyH3 = dummykv.key;
	value_t valH3 = dummykv.key;
	keyy_t keyI3 = dummykv.key;
	value_t valI3 = dummykv.key;
	keyy_t keyJ3 = dummykv.key;
	value_t valJ3 = dummykv.key;
	keyy_t keyK3 = dummykv.key;
	value_t valK3 = dummykv.key;
	keyy_t keyL3 = dummykv.key;
	value_t valL3 = dummykv.key;
	keyy_t keyM3 = dummykv.key;
	value_t valM3 = dummykv.key;
	keyy_t keyA4 = dummykv.key;
	value_t valA4 = dummykv.key;
	keyy_t keyB4 = dummykv.key;
	value_t valB4 = dummykv.key;
	keyy_t keyC4 = dummykv.key;
	value_t valC4 = dummykv.key;
	keyy_t keyD4 = dummykv.key;
	value_t valD4 = dummykv.key;
	keyy_t keyE4 = dummykv.key;
	value_t valE4 = dummykv.key;
	keyy_t keyF4 = dummykv.key;
	value_t valF4 = dummykv.key;
	keyy_t keyG4 = dummykv.key;
	value_t valG4 = dummykv.key;
	keyy_t keyH4 = dummykv.key;
	value_t valH4 = dummykv.key;
	keyy_t keyI4 = dummykv.key;
	value_t valI4 = dummykv.key;
	keyy_t keyJ4 = dummykv.key;
	value_t valJ4 = dummykv.key;
	keyy_t keyK4 = dummykv.key;
	value_t valK4 = dummykv.key;
	keyy_t keyL4 = dummykv.key;
	value_t valL4 = dummykv.key;
	keyy_t keyM4 = dummykv.key;
	value_t valM4 = dummykv.key;
	keyy_t keyA5 = dummykv.key;
	value_t valA5 = dummykv.key;
	keyy_t keyB5 = dummykv.key;
	value_t valB5 = dummykv.key;
	keyy_t keyC5 = dummykv.key;
	value_t valC5 = dummykv.key;
	keyy_t keyD5 = dummykv.key;
	value_t valD5 = dummykv.key;
	keyy_t keyE5 = dummykv.key;
	value_t valE5 = dummykv.key;
	keyy_t keyF5 = dummykv.key;
	value_t valF5 = dummykv.key;
	keyy_t keyG5 = dummykv.key;
	value_t valG5 = dummykv.key;
	keyy_t keyH5 = dummykv.key;
	value_t valH5 = dummykv.key;
	keyy_t keyI5 = dummykv.key;
	value_t valI5 = dummykv.key;
	keyy_t keyJ5 = dummykv.key;
	value_t valJ5 = dummykv.key;
	keyy_t keyK5 = dummykv.key;
	value_t valK5 = dummykv.key;
	keyy_t keyL5 = dummykv.key;
	value_t valL5 = dummykv.key;
	keyy_t keyM5 = dummykv.key;
	value_t valM5 = dummykv.key;
	keyy_t keyA6 = dummykv.key;
	value_t valA6 = dummykv.key;
	keyy_t keyB6 = dummykv.key;
	value_t valB6 = dummykv.key;
	keyy_t keyC6 = dummykv.key;
	value_t valC6 = dummykv.key;
	keyy_t keyD6 = dummykv.key;
	value_t valD6 = dummykv.key;
	keyy_t keyE6 = dummykv.key;
	value_t valE6 = dummykv.key;
	keyy_t keyF6 = dummykv.key;
	value_t valF6 = dummykv.key;
	keyy_t keyG6 = dummykv.key;
	value_t valG6 = dummykv.key;
	keyy_t keyH6 = dummykv.key;
	value_t valH6 = dummykv.key;
	keyy_t keyI6 = dummykv.key;
	value_t valI6 = dummykv.key;
	keyy_t keyJ6 = dummykv.key;
	value_t valJ6 = dummykv.key;
	keyy_t keyK6 = dummykv.key;
	value_t valK6 = dummykv.key;
	keyy_t keyL6 = dummykv.key;
	value_t valL6 = dummykv.key;
	keyy_t keyM6 = dummykv.key;
	value_t valM6 = dummykv.key;
	keyy_t keyA7 = dummykv.key;
	value_t valA7 = dummykv.key;
	keyy_t keyB7 = dummykv.key;
	value_t valB7 = dummykv.key;
	keyy_t keyC7 = dummykv.key;
	value_t valC7 = dummykv.key;
	keyy_t keyD7 = dummykv.key;
	value_t valD7 = dummykv.key;
	keyy_t keyE7 = dummykv.key;
	value_t valE7 = dummykv.key;
	keyy_t keyF7 = dummykv.key;
	value_t valF7 = dummykv.key;
	keyy_t keyG7 = dummykv.key;
	value_t valG7 = dummykv.key;
	keyy_t keyH7 = dummykv.key;
	value_t valH7 = dummykv.key;
	keyy_t keyI7 = dummykv.key;
	value_t valI7 = dummykv.key;
	keyy_t keyJ7 = dummykv.key;
	value_t valJ7 = dummykv.key;
	keyy_t keyK7 = dummykv.key;
	value_t valK7 = dummykv.key;
	keyy_t keyL7 = dummykv.key;
	value_t valL7 = dummykv.key;
	keyy_t keyM7 = dummykv.key;
	value_t valM7 = dummykv.key;
	
	MERGE12_LOOP1: for (buffer_type j=0; j<BLOCKRAM_SIZE; j++){
	#pragma HLS PIPELINE II=1
		keyvalue_t mykeyvalue00 = GETKV2(vbuffer0[begincol + 0][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue01 = GETKV2(vbuffer0[begincol + 1][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue02 = GETKV2(vbuffer0[begincol + 2][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue03 = GETKV2(vbuffer0[begincol + 3][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue04 = GETKV2(vbuffer0[begincol + 4][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue05 = GETKV2(vbuffer0[begincol + 5][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue06 = GETKV2(vbuffer0[begincol + 6][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue07 = GETKV2(vbuffer0[begincol + 7][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue10 = GETKV2(vbuffer1[begincol + 0][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue11 = GETKV2(vbuffer1[begincol + 1][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue12 = GETKV2(vbuffer1[begincol + 2][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue13 = GETKV2(vbuffer1[begincol + 3][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue14 = GETKV2(vbuffer1[begincol + 4][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue15 = GETKV2(vbuffer1[begincol + 5][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue16 = GETKV2(vbuffer1[begincol + 6][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue17 = GETKV2(vbuffer1[begincol + 7][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue20 = GETKV2(vbuffer2[begincol + 0][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue21 = GETKV2(vbuffer2[begincol + 1][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue22 = GETKV2(vbuffer2[begincol + 2][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue23 = GETKV2(vbuffer2[begincol + 3][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue24 = GETKV2(vbuffer2[begincol + 4][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue25 = GETKV2(vbuffer2[begincol + 5][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue26 = GETKV2(vbuffer2[begincol + 6][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue27 = GETKV2(vbuffer2[begincol + 7][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue30 = GETKV2(vbuffer3[begincol + 0][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue31 = GETKV2(vbuffer3[begincol + 1][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue32 = GETKV2(vbuffer3[begincol + 2][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue33 = GETKV2(vbuffer3[begincol + 3][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue34 = GETKV2(vbuffer3[begincol + 4][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue35 = GETKV2(vbuffer3[begincol + 5][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue36 = GETKV2(vbuffer3[begincol + 6][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue37 = GETKV2(vbuffer3[begincol + 7][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue40 = GETKV2(vbuffer4[begincol + 0][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue41 = GETKV2(vbuffer4[begincol + 1][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue42 = GETKV2(vbuffer4[begincol + 2][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue43 = GETKV2(vbuffer4[begincol + 3][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue44 = GETKV2(vbuffer4[begincol + 4][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue45 = GETKV2(vbuffer4[begincol + 5][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue46 = GETKV2(vbuffer4[begincol + 6][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue47 = GETKV2(vbuffer4[begincol + 7][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue50 = GETKV2(vbuffer5[begincol + 0][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue51 = GETKV2(vbuffer5[begincol + 1][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue52 = GETKV2(vbuffer5[begincol + 2][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue53 = GETKV2(vbuffer5[begincol + 3][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue54 = GETKV2(vbuffer5[begincol + 4][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue55 = GETKV2(vbuffer5[begincol + 5][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue56 = GETKV2(vbuffer5[begincol + 6][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue57 = GETKV2(vbuffer5[begincol + 7][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue60 = GETKV2(vbuffer6[begincol + 0][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue61 = GETKV2(vbuffer6[begincol + 1][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue62 = GETKV2(vbuffer6[begincol + 2][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue63 = GETKV2(vbuffer6[begincol + 3][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue64 = GETKV2(vbuffer6[begincol + 4][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue65 = GETKV2(vbuffer6[begincol + 5][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue66 = GETKV2(vbuffer6[begincol + 6][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue67 = GETKV2(vbuffer6[begincol + 7][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue70 = GETKV2(vbuffer7[begincol + 0][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue71 = GETKV2(vbuffer7[begincol + 1][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue72 = GETKV2(vbuffer7[begincol + 2][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue73 = GETKV2(vbuffer7[begincol + 3][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue74 = GETKV2(vbuffer7[begincol + 4][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue75 = GETKV2(vbuffer7[begincol + 5][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue76 = GETKV2(vbuffer7[begincol + 6][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue77 = GETKV2(vbuffer7[begincol + 7][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue80 = GETKV2(vbuffer8[begincol + 0][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue81 = GETKV2(vbuffer8[begincol + 1][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue82 = GETKV2(vbuffer8[begincol + 2][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue83 = GETKV2(vbuffer8[begincol + 3][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue84 = GETKV2(vbuffer8[begincol + 4][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue85 = GETKV2(vbuffer8[begincol + 5][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue86 = GETKV2(vbuffer8[begincol + 6][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue87 = GETKV2(vbuffer8[begincol + 7][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue90 = GETKV2(vbuffer9[begincol + 0][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue91 = GETKV2(vbuffer9[begincol + 1][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue92 = GETKV2(vbuffer9[begincol + 2][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue93 = GETKV2(vbuffer9[begincol + 3][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue94 = GETKV2(vbuffer9[begincol + 4][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue95 = GETKV2(vbuffer9[begincol + 5][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue96 = GETKV2(vbuffer9[begincol + 6][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue97 = GETKV2(vbuffer9[begincol + 7][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue100 = GETKV2(vbuffer10[begincol + 0][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue101 = GETKV2(vbuffer10[begincol + 1][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue102 = GETKV2(vbuffer10[begincol + 2][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue103 = GETKV2(vbuffer10[begincol + 3][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue104 = GETKV2(vbuffer10[begincol + 4][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue105 = GETKV2(vbuffer10[begincol + 5][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue106 = GETKV2(vbuffer10[begincol + 6][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue107 = GETKV2(vbuffer10[begincol + 7][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue110 = GETKV2(vbuffer11[begincol + 0][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue111 = GETKV2(vbuffer11[begincol + 1][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue112 = GETKV2(vbuffer11[begincol + 2][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue113 = GETKV2(vbuffer11[begincol + 3][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue114 = GETKV2(vbuffer11[begincol + 4][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue115 = GETKV2(vbuffer11[begincol + 5][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue116 = GETKV2(vbuffer11[begincol + 6][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue117 = GETKV2(vbuffer11[begincol + 7][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue120 = dummykv;
		keyvalue_t mykeyvalue121 = dummykv;
		keyvalue_t mykeyvalue122 = dummykv;
		keyvalue_t mykeyvalue123 = dummykv;
		keyvalue_t mykeyvalue124 = dummykv;
		keyvalue_t mykeyvalue125 = dummykv;
		keyvalue_t mykeyvalue126 = dummykv;
		keyvalue_t mykeyvalue127 = dummykv;
		keyvalue_t mykeyvalue130 = dummykv;
		keyvalue_t mykeyvalue131 = dummykv;
		keyvalue_t mykeyvalue132 = dummykv;
		keyvalue_t mykeyvalue133 = dummykv;
		keyvalue_t mykeyvalue134 = dummykv;
		keyvalue_t mykeyvalue135 = dummykv;
		keyvalue_t mykeyvalue136 = dummykv;
		keyvalue_t mykeyvalue137 = dummykv;
		keyvalue_t mykeyvalue140 = dummykv;
		keyvalue_t mykeyvalue141 = dummykv;
		keyvalue_t mykeyvalue142 = dummykv;
		keyvalue_t mykeyvalue143 = dummykv;
		keyvalue_t mykeyvalue144 = dummykv;
		keyvalue_t mykeyvalue145 = dummykv;
		keyvalue_t mykeyvalue146 = dummykv;
		keyvalue_t mykeyvalue147 = dummykv;
		
		//((n)/2)
		keyA0 = mergefunc(mykeyvalue00.key, mykeyvalue10.key, NAp);
		keyB0 = mergefunc(mykeyvalue20.key, mykeyvalue30.key, NAp);
		keyC0 = mergefunc(mykeyvalue40.key, mykeyvalue50.key, NAp);
		keyD0 = mergefunc(mykeyvalue60.key, mykeyvalue70.key, NAp);
		keyE0 = mergefunc(mykeyvalue80.key, mykeyvalue90.key, NAp);
		keyF0 = mergefunc(mykeyvalue100.key, mykeyvalue110.key, NAp);
		keyG0 = mergefunc(mykeyvalue120.key, mykeyvalue130.key, NAp);
		keyA1 = mergefunc(mykeyvalue01.key, mykeyvalue11.key, NAp);
		keyB1 = mergefunc(mykeyvalue21.key, mykeyvalue31.key, NAp);
		keyC1 = mergefunc(mykeyvalue41.key, mykeyvalue51.key, NAp);
		keyD1 = mergefunc(mykeyvalue61.key, mykeyvalue71.key, NAp);
		keyE1 = mergefunc(mykeyvalue81.key, mykeyvalue91.key, NAp);
		keyF1 = mergefunc(mykeyvalue101.key, mykeyvalue111.key, NAp);
		keyG1 = mergefunc(mykeyvalue121.key, mykeyvalue131.key, NAp);
		keyA2 = mergefunc(mykeyvalue02.key, mykeyvalue12.key, NAp);
		keyB2 = mergefunc(mykeyvalue22.key, mykeyvalue32.key, NAp);
		keyC2 = mergefunc(mykeyvalue42.key, mykeyvalue52.key, NAp);
		keyD2 = mergefunc(mykeyvalue62.key, mykeyvalue72.key, NAp);
		keyE2 = mergefunc(mykeyvalue82.key, mykeyvalue92.key, NAp);
		keyF2 = mergefunc(mykeyvalue102.key, mykeyvalue112.key, NAp);
		keyG2 = mergefunc(mykeyvalue122.key, mykeyvalue132.key, NAp);
		keyA3 = mergefunc(mykeyvalue03.key, mykeyvalue13.key, NAp);
		keyB3 = mergefunc(mykeyvalue23.key, mykeyvalue33.key, NAp);
		keyC3 = mergefunc(mykeyvalue43.key, mykeyvalue53.key, NAp);
		keyD3 = mergefunc(mykeyvalue63.key, mykeyvalue73.key, NAp);
		keyE3 = mergefunc(mykeyvalue83.key, mykeyvalue93.key, NAp);
		keyF3 = mergefunc(mykeyvalue103.key, mykeyvalue113.key, NAp);
		keyG3 = mergefunc(mykeyvalue123.key, mykeyvalue133.key, NAp);
		keyA4 = mergefunc(mykeyvalue04.key, mykeyvalue14.key, NAp);
		keyB4 = mergefunc(mykeyvalue24.key, mykeyvalue34.key, NAp);
		keyC4 = mergefunc(mykeyvalue44.key, mykeyvalue54.key, NAp);
		keyD4 = mergefunc(mykeyvalue64.key, mykeyvalue74.key, NAp);
		keyE4 = mergefunc(mykeyvalue84.key, mykeyvalue94.key, NAp);
		keyF4 = mergefunc(mykeyvalue104.key, mykeyvalue114.key, NAp);
		keyG4 = mergefunc(mykeyvalue124.key, mykeyvalue134.key, NAp);
		keyA5 = mergefunc(mykeyvalue05.key, mykeyvalue15.key, NAp);
		keyB5 = mergefunc(mykeyvalue25.key, mykeyvalue35.key, NAp);
		keyC5 = mergefunc(mykeyvalue45.key, mykeyvalue55.key, NAp);
		keyD5 = mergefunc(mykeyvalue65.key, mykeyvalue75.key, NAp);
		keyE5 = mergefunc(mykeyvalue85.key, mykeyvalue95.key, NAp);
		keyF5 = mergefunc(mykeyvalue105.key, mykeyvalue115.key, NAp);
		keyG5 = mergefunc(mykeyvalue125.key, mykeyvalue135.key, NAp);
		keyA6 = mergefunc(mykeyvalue06.key, mykeyvalue16.key, NAp);
		keyB6 = mergefunc(mykeyvalue26.key, mykeyvalue36.key, NAp);
		keyC6 = mergefunc(mykeyvalue46.key, mykeyvalue56.key, NAp);
		keyD6 = mergefunc(mykeyvalue66.key, mykeyvalue76.key, NAp);
		keyE6 = mergefunc(mykeyvalue86.key, mykeyvalue96.key, NAp);
		keyF6 = mergefunc(mykeyvalue106.key, mykeyvalue116.key, NAp);
		keyG6 = mergefunc(mykeyvalue126.key, mykeyvalue136.key, NAp);
		keyA7 = mergefunc(mykeyvalue07.key, mykeyvalue17.key, NAp);
		keyB7 = mergefunc(mykeyvalue27.key, mykeyvalue37.key, NAp);
		keyC7 = mergefunc(mykeyvalue47.key, mykeyvalue57.key, NAp);
		keyD7 = mergefunc(mykeyvalue67.key, mykeyvalue77.key, NAp);
		keyE7 = mergefunc(mykeyvalue87.key, mykeyvalue97.key, NAp);
		keyF7 = mergefunc(mykeyvalue107.key, mykeyvalue117.key, NAp);
		keyG7 = mergefunc(mykeyvalue127.key, mykeyvalue137.key, NAp);
		keyy_t keyPA0 = mergefunc(keyA0, keyB0, NAp);
		keyy_t keyPB0 = mergefunc(keyC0, keyD0, NAp);
		keyy_t keyPC0 = mergefunc(keyE0, keyF0, NAp);
		keyy_t keyRA0 = mergefunc(keyPA0, keyPB0, NAp);
		keyy_t keyRB0 = mergefunc(keyPC0, keyF0, NAp);
		keyy_t keyRZ0 = mergefunc(keyRA0, keyRB0, NAp);
		keyy_t keyPA1 = mergefunc(keyA1, keyB1, NAp);
		keyy_t keyPB1 = mergefunc(keyC1, keyD1, NAp);
		keyy_t keyPC1 = mergefunc(keyE1, keyF1, NAp);
		keyy_t keyRA1 = mergefunc(keyPA1, keyPB1, NAp);
		keyy_t keyRB1 = mergefunc(keyPC1, keyF1, NAp);
		keyy_t keyRZ1 = mergefunc(keyRA1, keyRB1, NAp);
		keyy_t keyPA2 = mergefunc(keyA2, keyB2, NAp);
		keyy_t keyPB2 = mergefunc(keyC2, keyD2, NAp);
		keyy_t keyPC2 = mergefunc(keyE2, keyF2, NAp);
		keyy_t keyRA2 = mergefunc(keyPA2, keyPB2, NAp);
		keyy_t keyRB2 = mergefunc(keyPC2, keyF2, NAp);
		keyy_t keyRZ2 = mergefunc(keyRA2, keyRB2, NAp);
		keyy_t keyPA3 = mergefunc(keyA3, keyB3, NAp);
		keyy_t keyPB3 = mergefunc(keyC3, keyD3, NAp);
		keyy_t keyPC3 = mergefunc(keyE3, keyF3, NAp);
		keyy_t keyRA3 = mergefunc(keyPA3, keyPB3, NAp);
		keyy_t keyRB3 = mergefunc(keyPC3, keyF3, NAp);
		keyy_t keyRZ3 = mergefunc(keyRA3, keyRB3, NAp);
		keyy_t keyPA4 = mergefunc(keyA4, keyB4, NAp);
		keyy_t keyPB4 = mergefunc(keyC4, keyD4, NAp);
		keyy_t keyPC4 = mergefunc(keyE4, keyF4, NAp);
		keyy_t keyRA4 = mergefunc(keyPA4, keyPB4, NAp);
		keyy_t keyRB4 = mergefunc(keyPC4, keyF4, NAp);
		keyy_t keyRZ4 = mergefunc(keyRA4, keyRB4, NAp);
		keyy_t keyPA5 = mergefunc(keyA5, keyB5, NAp);
		keyy_t keyPB5 = mergefunc(keyC5, keyD5, NAp);
		keyy_t keyPC5 = mergefunc(keyE5, keyF5, NAp);
		keyy_t keyRA5 = mergefunc(keyPA5, keyPB5, NAp);
		keyy_t keyRB5 = mergefunc(keyPC5, keyF5, NAp);
		keyy_t keyRZ5 = mergefunc(keyRA5, keyRB5, NAp);
		keyy_t keyPA6 = mergefunc(keyA6, keyB6, NAp);
		keyy_t keyPB6 = mergefunc(keyC6, keyD6, NAp);
		keyy_t keyPC6 = mergefunc(keyE6, keyF6, NAp);
		keyy_t keyRA6 = mergefunc(keyPA6, keyPB6, NAp);
		keyy_t keyRB6 = mergefunc(keyPC6, keyF6, NAp);
		keyy_t keyRZ6 = mergefunc(keyRA6, keyRB6, NAp);
		keyy_t keyPA7 = mergefunc(keyA7, keyB7, NAp);
		keyy_t keyPB7 = mergefunc(keyC7, keyD7, NAp);
		keyy_t keyPC7 = mergefunc(keyE7, keyF7, NAp);
		keyy_t keyRA7 = mergefunc(keyPA7, keyPB7, NAp);
		keyy_t keyRB7 = mergefunc(keyPC7, keyF7, NAp);
		keyy_t keyRZ7 = mergefunc(keyRA7, keyRB7, NAp);
		
		//((n)/2)
		valA0 = mergefunc(mykeyvalue00.value, mykeyvalue10.value, NAp);
		valB0 = mergefunc(mykeyvalue20.value, mykeyvalue30.value, NAp);
		valC0 = mergefunc(mykeyvalue40.value, mykeyvalue50.value, NAp);
		valD0 = mergefunc(mykeyvalue60.value, mykeyvalue70.value, NAp);
		valE0 = mergefunc(mykeyvalue80.value, mykeyvalue90.value, NAp);
		valF0 = mergefunc(mykeyvalue100.value, mykeyvalue110.value, NAp);
		valG0 = mergefunc(mykeyvalue120.value, mykeyvalue130.value, NAp);
		valA1 = mergefunc(mykeyvalue01.value, mykeyvalue11.value, NAp);
		valB1 = mergefunc(mykeyvalue21.value, mykeyvalue31.value, NAp);
		valC1 = mergefunc(mykeyvalue41.value, mykeyvalue51.value, NAp);
		valD1 = mergefunc(mykeyvalue61.value, mykeyvalue71.value, NAp);
		valE1 = mergefunc(mykeyvalue81.value, mykeyvalue91.value, NAp);
		valF1 = mergefunc(mykeyvalue101.value, mykeyvalue111.value, NAp);
		valG1 = mergefunc(mykeyvalue121.value, mykeyvalue131.value, NAp);
		valA2 = mergefunc(mykeyvalue02.value, mykeyvalue12.value, NAp);
		valB2 = mergefunc(mykeyvalue22.value, mykeyvalue32.value, NAp);
		valC2 = mergefunc(mykeyvalue42.value, mykeyvalue52.value, NAp);
		valD2 = mergefunc(mykeyvalue62.value, mykeyvalue72.value, NAp);
		valE2 = mergefunc(mykeyvalue82.value, mykeyvalue92.value, NAp);
		valF2 = mergefunc(mykeyvalue102.value, mykeyvalue112.value, NAp);
		valG2 = mergefunc(mykeyvalue122.value, mykeyvalue132.value, NAp);
		valA3 = mergefunc(mykeyvalue03.value, mykeyvalue13.value, NAp);
		valB3 = mergefunc(mykeyvalue23.value, mykeyvalue33.value, NAp);
		valC3 = mergefunc(mykeyvalue43.value, mykeyvalue53.value, NAp);
		valD3 = mergefunc(mykeyvalue63.value, mykeyvalue73.value, NAp);
		valE3 = mergefunc(mykeyvalue83.value, mykeyvalue93.value, NAp);
		valF3 = mergefunc(mykeyvalue103.value, mykeyvalue113.value, NAp);
		valG3 = mergefunc(mykeyvalue123.value, mykeyvalue133.value, NAp);
		valA4 = mergefunc(mykeyvalue04.value, mykeyvalue14.value, NAp);
		valB4 = mergefunc(mykeyvalue24.value, mykeyvalue34.value, NAp);
		valC4 = mergefunc(mykeyvalue44.value, mykeyvalue54.value, NAp);
		valD4 = mergefunc(mykeyvalue64.value, mykeyvalue74.value, NAp);
		valE4 = mergefunc(mykeyvalue84.value, mykeyvalue94.value, NAp);
		valF4 = mergefunc(mykeyvalue104.value, mykeyvalue114.value, NAp);
		valG4 = mergefunc(mykeyvalue124.value, mykeyvalue134.value, NAp);
		valA5 = mergefunc(mykeyvalue05.value, mykeyvalue15.value, NAp);
		valB5 = mergefunc(mykeyvalue25.value, mykeyvalue35.value, NAp);
		valC5 = mergefunc(mykeyvalue45.value, mykeyvalue55.value, NAp);
		valD5 = mergefunc(mykeyvalue65.value, mykeyvalue75.value, NAp);
		valE5 = mergefunc(mykeyvalue85.value, mykeyvalue95.value, NAp);
		valF5 = mergefunc(mykeyvalue105.value, mykeyvalue115.value, NAp);
		valG5 = mergefunc(mykeyvalue125.value, mykeyvalue135.value, NAp);
		valA6 = mergefunc(mykeyvalue06.value, mykeyvalue16.value, NAp);
		valB6 = mergefunc(mykeyvalue26.value, mykeyvalue36.value, NAp);
		valC6 = mergefunc(mykeyvalue46.value, mykeyvalue56.value, NAp);
		valD6 = mergefunc(mykeyvalue66.value, mykeyvalue76.value, NAp);
		valE6 = mergefunc(mykeyvalue86.value, mykeyvalue96.value, NAp);
		valF6 = mergefunc(mykeyvalue106.value, mykeyvalue116.value, NAp);
		valG6 = mergefunc(mykeyvalue126.value, mykeyvalue136.value, NAp);
		valA7 = mergefunc(mykeyvalue07.value, mykeyvalue17.value, NAp);
		valB7 = mergefunc(mykeyvalue27.value, mykeyvalue37.value, NAp);
		valC7 = mergefunc(mykeyvalue47.value, mykeyvalue57.value, NAp);
		valD7 = mergefunc(mykeyvalue67.value, mykeyvalue77.value, NAp);
		valE7 = mergefunc(mykeyvalue87.value, mykeyvalue97.value, NAp);
		valF7 = mergefunc(mykeyvalue107.value, mykeyvalue117.value, NAp);
		valG7 = mergefunc(mykeyvalue127.value, mykeyvalue137.value, NAp);
		value_t valPA0 = mergefunc(valA0, valB0, NAp);
		value_t valPB0 = mergefunc(valC0, valD0, NAp);
		value_t valPC0 = mergefunc(valE0, valF0, NAp);
		value_t valRA0 = mergefunc(valPA0, valPB0, NAp);
		value_t valRB0 = mergefunc(valPC0, valF0, NAp);
		value_t valRZ0 = mergefunc(valRA0, valRB0, NAp);
		value_t valPA1 = mergefunc(valA1, valB1, NAp);
		value_t valPB1 = mergefunc(valC1, valD1, NAp);
		value_t valPC1 = mergefunc(valE1, valF1, NAp);
		value_t valRA1 = mergefunc(valPA1, valPB1, NAp);
		value_t valRB1 = mergefunc(valPC1, valF1, NAp);
		value_t valRZ1 = mergefunc(valRA1, valRB1, NAp);
		value_t valPA2 = mergefunc(valA2, valB2, NAp);
		value_t valPB2 = mergefunc(valC2, valD2, NAp);
		value_t valPC2 = mergefunc(valE2, valF2, NAp);
		value_t valRA2 = mergefunc(valPA2, valPB2, NAp);
		value_t valRB2 = mergefunc(valPC2, valF2, NAp);
		value_t valRZ2 = mergefunc(valRA2, valRB2, NAp);
		value_t valPA3 = mergefunc(valA3, valB3, NAp);
		value_t valPB3 = mergefunc(valC3, valD3, NAp);
		value_t valPC3 = mergefunc(valE3, valF3, NAp);
		value_t valRA3 = mergefunc(valPA3, valPB3, NAp);
		value_t valRB3 = mergefunc(valPC3, valF3, NAp);
		value_t valRZ3 = mergefunc(valRA3, valRB3, NAp);
		value_t valPA4 = mergefunc(valA4, valB4, NAp);
		value_t valPB4 = mergefunc(valC4, valD4, NAp);
		value_t valPC4 = mergefunc(valE4, valF4, NAp);
		value_t valRA4 = mergefunc(valPA4, valPB4, NAp);
		value_t valRB4 = mergefunc(valPC4, valF4, NAp);
		value_t valRZ4 = mergefunc(valRA4, valRB4, NAp);
		value_t valPA5 = mergefunc(valA5, valB5, NAp);
		value_t valPB5 = mergefunc(valC5, valD5, NAp);
		value_t valPC5 = mergefunc(valE5, valF5, NAp);
		value_t valRA5 = mergefunc(valPA5, valPB5, NAp);
		value_t valRB5 = mergefunc(valPC5, valF5, NAp);
		value_t valRZ5 = mergefunc(valRA5, valRB5, NAp);
		value_t valPA6 = mergefunc(valA6, valB6, NAp);
		value_t valPB6 = mergefunc(valC6, valD6, NAp);
		value_t valPC6 = mergefunc(valE6, valF6, NAp);
		value_t valRA6 = mergefunc(valPA6, valPB6, NAp);
		value_t valRB6 = mergefunc(valPC6, valF6, NAp);
		value_t valRZ6 = mergefunc(valRA6, valRB6, NAp);
		value_t valPA7 = mergefunc(valA7, valB7, NAp);
		value_t valPB7 = mergefunc(valC7, valD7, NAp);
		value_t valPC7 = mergefunc(valE7, valF7, NAp);
		value_t valRA7 = mergefunc(valPA7, valPB7, NAp);
		value_t valRB7 = mergefunc(valPC7, valF7, NAp);
		value_t valRZ7 = mergefunc(valRA7, valRB7, NAp);
		
		#ifdef _WIDEWORD
		vdram[dramoffset_kvs + j].range(31, 0) = keyRZ0;
		vdram[dramoffset_kvs + j].range(63, 32) = valRZ0;
		vdram[dramoffset_kvs + j].range(95, 64) = keyRZ1;
		vdram[dramoffset_kvs + j].range(127, 96) = valRZ1;
		vdram[dramoffset_kvs + j].range(159, 128) = keyRZ2;
		vdram[dramoffset_kvs + j].range(191, 160) = valRZ2;
		vdram[dramoffset_kvs + j].range(223, 192) = keyRZ3;
		vdram[dramoffset_kvs + j].range(255, 224) = valRZ3;
		vdram[dramoffset_kvs + j].range(287, 256) = keyRZ4;
		vdram[dramoffset_kvs + j].range(319, 288) = valRZ4;
		vdram[dramoffset_kvs + j].range(351, 320) = keyRZ5;
		vdram[dramoffset_kvs + j].range(383, 352) = valRZ5;
		vdram[dramoffset_kvs + j].range(415, 384) = keyRZ6;
		vdram[dramoffset_kvs + j].range(447, 416) = valRZ6;
		vdram[dramoffset_kvs + j].range(479, 448) = keyRZ7;
		vdram[dramoffset_kvs + j].range(511, 480) = valRZ7;
		#else
		vdram[dramoffset_kvs + j].data[0].key = keyRZ0;
		vdram[dramoffset_kvs + j].data[0].value = valRZ0;
		vdram[dramoffset_kvs + j].data[1].key = keyRZ1;
		vdram[dramoffset_kvs + j].data[1].value = valRZ1;
		vdram[dramoffset_kvs + j].data[2].key = keyRZ2;
		vdram[dramoffset_kvs + j].data[2].value = valRZ2;
		vdram[dramoffset_kvs + j].data[3].key = keyRZ3;
		vdram[dramoffset_kvs + j].data[3].value = valRZ3;
		vdram[dramoffset_kvs + j].data[4].key = keyRZ4;
		vdram[dramoffset_kvs + j].data[4].value = valRZ4;
		vdram[dramoffset_kvs + j].data[5].key = keyRZ5;
		vdram[dramoffset_kvs + j].data[5].value = valRZ5;
		vdram[dramoffset_kvs + j].data[6].key = keyRZ6;
		vdram[dramoffset_kvs + j].data[6].value = valRZ6;
		vdram[dramoffset_kvs + j].data[7].key = keyRZ7;
		vdram[dramoffset_kvs + j].data[7].value = valRZ7;
		#endif
	}
	return;
}

// actsproc 
void 
	#ifdef SW 
	actsproc::
	#endif 
resetenvbuffers(keyvalue_capsule_t capsule_so1[VECTOR_SIZE][MAX_NUM_PARTITIONS], keyvalue_capsule_t capsule_so8[MAX_NUM_PARTITIONS]){
	for(partition_type p=0; p<NUM_PARTITIONS; p++){
	#pragma HLS PIPELINE II=1
		capsule_so1[0][p].key = 0;
		capsule_so1[0][p].value = 0;
		capsule_so1[1][p].key = 0;
		capsule_so1[1][p].value = 0;
		capsule_so1[2][p].key = 0;
		capsule_so1[2][p].value = 0;
		capsule_so1[3][p].key = 0;
		capsule_so1[3][p].value = 0;
		capsule_so1[4][p].key = 0;
		capsule_so1[4][p].value = 0;
		capsule_so1[5][p].key = 0;
		capsule_so1[5][p].value = 0;
		capsule_so1[6][p].key = 0;
		capsule_so1[6][p].value = 0;
		capsule_so1[7][p].key = 0;
		capsule_so1[7][p].value = 0;
		capsule_so8[p].key = 0;
		capsule_so8[p].value = 0;
	}
	return;
}

void 
	#ifdef SW 
	actsproc::
	#endif 
resetenvbuffer(keyvalue_capsule_t capsule_so8[MAX_NUM_PARTITIONS]){
	for(partition_type p=0; p<NUM_PARTITIONS; p++){
	#pragma HLS PIPELINE II=1
		capsule_so8[p].key = 0;
		capsule_so8[p].value = 0;
	}
	return;
}

fetchmessage_t 
	#ifdef SW 
	actsproc::
	#endif 
fetchkeyvalues(bool_type enable, unsigned int mode,  uint512_dt * kvdram, keyvalue_vbuffer_t vbuffer[VDATA_PACKINGSIZE][BLOCKRAM_SIZE], unitBRAMwidth_type vmask[BLOCKRAM_SIZE], unitBRAMwidth_type vmask_subp[BLOCKRAM_SIZE], keyvalue_buffer_t buffer[VECTOR_SIZE][SOURCEBLOCKRAM_SIZE], 
		batch_type goffset_kvs, batch_type loffset_kvs, batch_type size_kvs, travstate_t travstate, sweepparams_t sweepparams, globalparams_t globalparams,
		unsigned int edgebankID){
	fetchmessage_t fetchmessage;
	if(mode == PROCESSMODE){ // CRITICAL REMOVEME.
		#if NUM_EDGE_BANKS>0
			if(edgebankID == 0){ // AUTOMATEME.
				fetchmessage = readandprocess(enable, edges0, kvdram, vbuffer, vmask, vmask_subp, buffer, goffset_kvs, loffset_kvs, size_kvs, travstate, sweepparams, globalparams);
			} 
			#if NUM_EDGE_BANKS>1
			else if(edgebankID == 1){
				fetchmessage = readandprocess(enable, edges1, kvdram, vbuffer, vmask, vmask_subp, buffer, goffset_kvs, loffset_kvs, size_kvs, travstate, sweepparams, globalparams);
			} 
			#if NUM_EDGE_BANKS>2
			else if(edgebankID == 2){
				fetchmessage = readandprocess(enable, edges2, kvdram, vbuffer, vmask, vmask_subp, buffer, goffset_kvs, loffset_kvs, size_kvs, travstate, sweepparams, globalparams);
			} 
			#if NUM_EDGE_BANKS>3
			else if(edgebankID == 3){
				fetchmessage = readandprocess(enable, edges3, kvdram, vbuffer, vmask, vmask_subp, buffer, goffset_kvs, loffset_kvs, size_kvs, travstate, sweepparams, globalparams);
			} 
			#if NUM_EDGE_BANKS>4
			else if(edgebankID == 4){
				fetchmessage = readandprocess(enable, edges4, kvdram, vbuffer, vmask, vmask_subp, buffer, goffset_kvs, loffset_kvs, size_kvs, travstate, sweepparams, globalparams);
			} 
			#if NUM_EDGE_BANKS>5
			else if(edgebankID == 5){
				fetchmessage = readandprocess(enable, edges5, kvdram, vbuffer, vmask, vmask_subp, buffer, goffset_kvs, loffset_kvs, size_kvs, travstate, sweepparams, globalparams);
			} 
			#if NUM_EDGE_BANKS>6
			else if(edgebankID == 6){
				fetchmessage = readandprocess(enable, edges6, kvdram, vbuffer, vmask, vmask_subp, buffer, goffset_kvs, loffset_kvs, size_kvs, travstate, sweepparams, globalparams);
			} 
			#if NUM_EDGE_BANKS>7
			else {
				fetchmessage = readandprocess(enable, edges7, kvdram, vbuffer, vmask, vmask_subp, buffer, goffset_kvs, loffset_kvs, size_kvs, travstate, sweepparams, globalparams);
			}
			#endif 
			#endif 
			#endif 
			#endif 
			#endif 
			#endif 
			#endif 
			else {
				fetchmessage = readandprocess(enable, kvdram, kvdram, vbuffer, vmask, vmask_subp, buffer, goffset_kvs, loffset_kvs, size_kvs, travstate, sweepparams, globalparams);
			}
		#else 
		fetchmessage = readandprocess(enable, kvdram, kvdram, vbuffer, vmask, vmask_subp, buffer, goffset_kvs, loffset_kvs, size_kvs, travstate, sweepparams, globalparams);
		#endif
	} else {
		fetchmessage = readkeyvalues(enable, kvdram, buffer, goffset_kvs + loffset_kvs, size_kvs, travstate, globalparams); 
	}
	return fetchmessage; 
}

void 
	#ifdef SW 
	actsproc::
	#endif 
commitkeyvalues(bool_type enable1, bool_type enable2, unsigned int mode, uint512_dt * kvdram, keyvalue_vbuffer_t vbuffer[VDATA_PACKINGSIZE][BLOCKRAM_SIZE], 
		keyvalue_buffer_t destbuffer[VECTOR_SIZE][DESTBLOCKRAM_SIZE], keyvalue_t globalcapsule[MAX_NUM_PARTITIONS], keyvalue_capsule_t localcapsule[MAX_NUM_PARTITIONS], 
			batch_type destbaseaddr_kvs, buffer_type chunk_size, sweepparams_t sweepparams, globalparams_t globalparams){
	if(mode == REDUCEMODE){
		reduceandbuffer(enable1, destbuffer, localcapsule, vbuffer, sweepparams, globalparams);
	} else {
		savekeyvalues(enable1, kvdram, destbuffer, globalcapsule, localcapsule, destbaseaddr_kvs, globalparams); 
	}
	return;
}

void 
	#ifdef SW 
	actsproc::
	#endif 
priorcommitkeyvalues(bool_type enable1, bool_type enable2, unsigned int mode, uint512_dt * kvdram, keyvalue_vbuffer_t vbuffer[VDATA_PACKINGSIZE][BLOCKRAM_SIZE], 
		keyvalue_buffer_t sourcebuffer[VECTOR_SIZE][SOURCEBLOCKRAM_SIZE], keyvalue_buffer_t destbuffer[VECTOR_SIZE][DESTBLOCKRAM_SIZE], keyvalue_t globalcapsule[MAX_NUM_PARTITIONS], keyvalue_capsule_t localcapsule[MAX_NUM_PARTITIONS], 
				batch_type destbaseaddr_kvs, buffer_type chunk_size, sweepparams_t sweepparams, globalparams_t globalparams){
	if(mode == REDUCEMODE){
		priorreduceandbuffer(enable1, sourcebuffer, localcapsule, vbuffer, chunk_size, sweepparams, globalparams); // REMOVEME.
	} else {
		// actsutilityobj->printkeyvalues("**************************************************priorcommitkeyvalues: localcapsule", (keyvalue_t *)localcapsule, 8); // REMOVEME. // NUM_PARTITIONS
		savekeyvalues(enable1, kvdram, destbuffer, globalcapsule, localcapsule, destbaseaddr_kvs, globalparams); 
		// actsutilityobj->printkeyvalues("++++++++++++++++++++++++++++++++++++++++++++++++++priorcommitkeyvalues: globalcapsule", (keyvalue_t *)globalcapsule, 8); // REMOVEME. // NUM_PARTITIONS
	}
	return;
}

void 
	#ifdef SW 
	actsproc::
	#endif
actspipeline(bool_type enable1, bool_type enable2, keyvalue_buffer_t buffer_setof1[VECTOR_SIZE][BLOCKRAM_SIZE], keyvalue_capsule_t capsule_so1[VECTOR_SIZE][MAX_NUM_PARTITIONS], 
						keyvalue_buffer_t buffer_setof8[VECTOR_SIZE][DESTBLOCKRAM_SIZE], keyvalue_capsule_t capsule_so8[MAX_NUM_PARTITIONS],
							unsigned int currentLOP, sweepparams_t sweepparams, buffer_type cutoffs[VECTOR_SIZE], batch_type shiftcount, globalparams_t globalparams){		
	analysis_type analysis_loop1 = SRCBUFFER_SIZE / 4;
	if(enable1 == OFF){ return; }
	
	unsigned int upperlimit = sweepparams.upperlimit;
	unsigned int upperpartition = sweepparams.upperpartition;
	
	keyvalue_buffer_t kvA0[4];
	keyvalue_buffer_t kvA2[4];
	keyvalue_buffer_t kvA4[4];
	keyvalue_buffer_t kvA6[4];
	#pragma HLS ARRAY_PARTITION variable=kvA0 complete
	#pragma HLS ARRAY_PARTITION variable=kvA2 complete
	#pragma HLS ARRAY_PARTITION variable=kvA4 complete
	#pragma HLS ARRAY_PARTITION variable=kvA6 complete

	buffer_type tempcutoffs[VECTOR_SIZE];
	#pragma HLS ARRAY_PARTITION variable=tempcutoffs complete

	for(partition_type p=0; p<MAX_NUM_PARTITIONS; p++){
	#pragma HLS PIPELINE II=1
		capsule_so8[p].key = 0;
		capsule_so8[p].value = capsule_so1[0][p].value + capsule_so1[1][p].value 
									+ capsule_so1[2][p].value + capsule_so1[3][p].value 
									+ capsule_so1[4][p].value + capsule_so1[5][p].value 
									+ capsule_so1[6][p].value + capsule_so1[7][p].value;
	}
	calculateoffsets(capsule_so8, MAX_NUM_PARTITIONS);
	resetvalues(capsule_so8, MAX_NUM_PARTITIONS, 0);
	
	buffer_type maxcutoff = 0;
	for(vector_type v=0; v<VECTOR_SIZE; v++){ 
	#pragma HLS PIPELINE II=1
		if(cutoffs[v] > maxcutoff){ maxcutoff = cutoffs[v]; }
	}
	#ifdef _DEBUGMODE_CHECKS2
	actsutilityobj->checkfordivisibleby(ON, "actspipeline:maxcutoff", maxcutoff, 4);
	#endif
	
	keyvalue_t mydummykv;
	mydummykv.key = 0;
	mydummykv.value = GETV(INVALIDDATA);
	keyvalue_buffer_t dummykv = GETKV(mydummykv);
	
	value_t tempbufferDcapsule[MAX_NUM_PARTITIONS];
	#pragma HLS ARRAY_PARTITION variable=tempbufferDcapsule complete

	for(partition_type p=0; p<MAX_NUM_PARTITIONS; p++){ 
	#pragma HLS PIPELINE II=1
		tempbufferDcapsule[p] = capsule_so8[p].value; 
	}
	for(vector_type v=0; v<VECTOR_SIZE; v++){ 
	#pragma HLS PIPELINE II=1
		tempcutoffs[v] = cutoffs[v]; 
	}
	
	unsigned int n=0;
	RUNPIPELINE_LOOP1: for(n=0; n<2; n++){
		RUNPIPELINE_LOOP1B: for(buffer_type k=0; k<maxcutoff; k+=4){
		#pragma HLS LOOP_TRIPCOUNT min=0 max=analysis_loop1 avg=analysis_loop1
		#pragma HLS PIPELINE II=4
		
			#ifdef _DEBUGMODE_KERNELPRINTS
			if(k % 16 == 0){ cout<<"k: "<<k<<endl; }
			#endif
			
			/// LOADING FROM A
			if(k < tempcutoffs[0+n]){ kvA0[0] = buffer_setof1[0+n][k]; kvA0[1] = buffer_setof1[0+n][k+1]; kvA0[2] = buffer_setof1[0+n][k+2]; kvA0[3] = buffer_setof1[0+n][k+3]; } 
			else { kvA0[0] = dummykv; kvA0[1] = dummykv; kvA0[2] = dummykv; kvA0[3] = dummykv; }
			if(k < tempcutoffs[2+n]){ kvA2[0] = buffer_setof1[2+n][k]; kvA2[1] = buffer_setof1[2+n][k+1]; kvA2[2] = buffer_setof1[2+n][k+2]; kvA2[3] = buffer_setof1[2+n][k+3]; } 
			else { kvA2[0] = dummykv; kvA2[1] = dummykv; kvA2[2] = dummykv; kvA2[3] = dummykv; }
			if(k < tempcutoffs[4+n]){ kvA4[0] = buffer_setof1[4+n][k]; kvA4[1] = buffer_setof1[4+n][k+1]; kvA4[2] = buffer_setof1[4+n][k+2]; kvA4[3] = buffer_setof1[4+n][k+3]; } 
			else { kvA4[0] = dummykv; kvA4[1] = dummykv; kvA4[2] = dummykv; kvA4[3] = dummykv; }
			if(k < tempcutoffs[6+n]){ kvA6[0] = buffer_setof1[6+n][k]; kvA6[1] = buffer_setof1[6+n][k+1]; kvA6[2] = buffer_setof1[6+n][k+2]; kvA6[3] = buffer_setof1[6+n][k+3]; } 
			else { kvA6[0] = dummykv; kvA6[1] = dummykv; kvA6[2] = dummykv; kvA6[3] = dummykv; }
		
			#ifdef _DEBUGMODE_KERNELPRINTS 
			for(unsigned int m=0; m<4; m++){ cout<<"kvA0["<<m<<"].key: "<<GETKV(kvA0[m]).key<<", kvA0["<<m<<"].value: "<<GETKV(kvA0[m]).value<<endl; }
			for(unsigned int m=0; m<4; m++){ cout<<"kvA2["<<m<<"].key: "<<GETKV(kvA2[m]).key<<", kvA2["<<m<<"].value: "<<GETKV(kvA2[m]).value<<endl; }
			for(unsigned int m=0; m<4; m++){ cout<<"kvA4["<<m<<"].key: "<<GETKV(kvA4[m]).key<<", kvA4["<<m<<"].value: "<<GETKV(kvA4[m]).value<<endl; }
			for(unsigned int m=0; m<4; m++){ cout<<"kvA6["<<m<<"].key: "<<GETKV(kvA6[m]).key<<", kvA6["<<m<<"].value: "<<GETKV(kvA6[m]).value<<endl; }
			#endif
			
			#if defined(_DEBUGMODE_CHECKS2) && defined(_DEBUGMODE_PARTITIONCHECKS)
			actsutilityobj->checkn(enablebufferA, "kvA0", kvA0, currentLOP, upperlimit, globalparams.POW_BATCHRANGE, 4);
			actsutilityobj->checkn(enablebufferA, "kvA2", kvA2, currentLOP, upperlimit, globalparams.POW_BATCHRANGE, 4);
			actsutilityobj->checkn(enablebufferA, "kvA4", kvA4, currentLOP, upperlimit, globalparams.POW_BATCHRANGE, 4);
			actsutilityobj->checkn(enablebufferA, "kvA6", kvA6, currentLOP, upperlimit, globalparams.POW_BATCHRANGE, 4);
			#endif
			
			partition_type pA0 = getpartition(ON, kvA0[0], currentLOP, upperlimit, upperpartition, globalparams.POW_BATCHRANGE);
			partition_type pA2 = getpartition(ON, kvA2[0], currentLOP, upperlimit, upperpartition, globalparams.POW_BATCHRANGE);
			partition_type pA4 = getpartition(ON, kvA4[0], currentLOP, upperlimit, upperpartition, globalparams.POW_BATCHRANGE);
			partition_type pA6 = getpartition(ON, kvA6[0], currentLOP, upperlimit, upperpartition, globalparams.POW_BATCHRANGE);
			
			/// LOADING FROM AND INTO D
			buffer_type posD0 = capsule_so8[pA0].key + tempbufferDcapsule[pA0];
			unsigned int yoffset0 = posD0 / 8;
			unsigned int xoffset0 = posD0 % 8;
			#if defined(_DEBUGMODE_CHECKS2) && defined(_DEBUGMODE_PARTITIONCHECKS)
			actsutilityobj->checkfordivisibleby(enablebufferD, "posD0", posD0, 4);
			actsutilityobj->checkoutofbounds(enablebufferD, "posD0", posD0, DESTBLOCKRAM_SIZE * VECTOR_SIZE, NAp, NAp, NAp);
			actsutilityobj->checkoutofbounds(enablebufferD, "yoffset0", yoffset0, DESTBLOCKRAM_SIZE, NAp, NAp, NAp);
			actsutilityobj->checkoutofbounds(enablebufferD, "xoffset0+4", xoffset0+4, VECTOR_SIZE+1, NAp, NAp, NAp);
			#endif 
			if(xoffset0 == 0){
				buffer_setof8[0][yoffset0] = kvA0[0]; buffer_setof8[1][yoffset0] = kvA0[1]; buffer_setof8[2][yoffset0] = kvA0[2]; buffer_setof8[3][yoffset0] = kvA0[3]; 
			} else {
				buffer_setof8[4][yoffset0] = kvA0[0]; buffer_setof8[5][yoffset0] = kvA0[1]; buffer_setof8[6][yoffset0] = kvA0[2]; buffer_setof8[7][yoffset0] = kvA0[3]; 
			}
			if(GETKV(kvA0[0]).value != GETV(INVALIDDATA)){ tempbufferDcapsule[pA0] += 4; }
			
			buffer_type _posD0 = capsule_so8[pA2].key + tempbufferDcapsule[pA2];
			unsigned int yoffset1 = _posD0 / 8;
			unsigned int xoffset1 = _posD0 % 8;
			#if defined(_DEBUGMODE_CHECKS2) && defined(_DEBUGMODE_PARTITIONCHECKS)
			actsutilityobj->checkfordivisibleby(enablebufferD, "_posD0", _posD0, 4);
			actsutilityobj->checkoutofbounds(enablebufferD, "_posD0", _posD0, DESTBLOCKRAM_SIZE * VECTOR_SIZE, NAp, NAp, NAp);
			actsutilityobj->checkoutofbounds(enablebufferD, "yoffset1", yoffset1, DESTBLOCKRAM_SIZE, NAp, NAp, NAp);
			actsutilityobj->checkoutofbounds(enablebufferD, "xoffset1+4", xoffset1+4, VECTOR_SIZE+1, NAp, NAp, NAp);
			#endif 
			if(xoffset1 == 0){
				buffer_setof8[0][yoffset1] = kvA2[0]; buffer_setof8[1][yoffset1] = kvA2[1]; buffer_setof8[2][yoffset1] = kvA2[2]; buffer_setof8[3][yoffset1] = kvA2[3]; 
			} else {
				buffer_setof8[4][yoffset1] = kvA2[0]; buffer_setof8[5][yoffset1] = kvA2[1]; buffer_setof8[6][yoffset1] = kvA2[2]; buffer_setof8[7][yoffset1] = kvA2[3]; 
			}
			if(GETKV(kvA2[0]).value != GETV(INVALIDDATA)){ tempbufferDcapsule[pA2] += 4; }
			
			buffer_type __posD0 = capsule_so8[pA4].key + tempbufferDcapsule[pA4];
			unsigned int yoffset2 = __posD0 / 8;
			unsigned int xoffset2 = __posD0 % 8;
			#if defined(_DEBUGMODE_CHECKS2) && defined(_DEBUGMODE_PARTITIONCHECKS)
			actsutilityobj->checkfordivisibleby(enablebufferD, "__posD0", __posD0, 4);
			actsutilityobj->checkoutofbounds(enablebufferD, "__posD0", __posD0, DESTBLOCKRAM_SIZE * VECTOR_SIZE, NAp, NAp, NAp);
			actsutilityobj->checkoutofbounds(enablebufferD, "yoffset2", yoffset2, DESTBLOCKRAM_SIZE, NAp, NAp, NAp);
			actsutilityobj->checkoutofbounds(enablebufferD, "xoffset2+4", xoffset2+4, VECTOR_SIZE+1, NAp, NAp, NAp);
			#endif 
			if(xoffset2 == 0){
				buffer_setof8[0][yoffset2] = kvA4[0]; buffer_setof8[1][yoffset2] = kvA4[1]; buffer_setof8[2][yoffset2] = kvA4[2]; buffer_setof8[3][yoffset2] = kvA4[3]; 
			} else {
				buffer_setof8[4][yoffset2] = kvA4[0]; buffer_setof8[5][yoffset2] = kvA4[1]; buffer_setof8[6][yoffset2] = kvA4[2]; buffer_setof8[7][yoffset2] = kvA4[3]; 
			}
			if(GETKV(kvA4[0]).value != GETV(INVALIDDATA)){ tempbufferDcapsule[pA4] += 4; }
			
			buffer_type ___posD0 = capsule_so8[pA6].key + tempbufferDcapsule[pA6];
			unsigned int yoffset3 = ___posD0 / 8;
			unsigned int xoffset3 = ___posD0 % 8;
			#if defined(_DEBUGMODE_CHECKS2) && defined(_DEBUGMODE_PARTITIONCHECKS)
			actsutilityobj->checkfordivisibleby(enablebufferD, "___posD0", ___posD0, 4);
			actsutilityobj->checkoutofbounds(enablebufferD, "___posD0", ___posD0, DESTBLOCKRAM_SIZE * VECTOR_SIZE, NAp, NAp, NAp);
			actsutilityobj->checkoutofbounds(enablebufferD, "yoffset3", yoffset3, DESTBLOCKRAM_SIZE, NAp, NAp, NAp);
			actsutilityobj->checkoutofbounds(enablebufferD, "xoffset3+4", xoffset3+4, VECTOR_SIZE+1, NAp, NAp, NAp);
			#endif 
			if(xoffset3 == 0){
				buffer_setof8[0][yoffset3] = kvA6[0]; buffer_setof8[1][yoffset3] = kvA6[1]; buffer_setof8[2][yoffset3] = kvA6[2]; buffer_setof8[3][yoffset3] = kvA6[3]; 
			} else {
				buffer_setof8[4][yoffset3] = kvA6[0]; buffer_setof8[5][yoffset3] = kvA6[1]; buffer_setof8[6][yoffset3] = kvA6[2]; buffer_setof8[7][yoffset3] = kvA6[3]; 
			}
			if(GETKV(kvA6[0]).value != GETV(INVALIDDATA)){ tempbufferDcapsule[pA6] += 4; }
		}
	}
	
	for(partition_type p=0; p<MAX_NUM_PARTITIONS; p++){ 
	#pragma HLS PIPELINE II=1
		capsule_so8[p].value = tempbufferDcapsule[p]; 
	}
	
	for(partition_type p=0; p<MAX_NUM_PARTITIONS; p++){
	#pragma HLS PIPELINE II=1
		keyvalue_t mydummykv;
		mydummykv.key = p;
		mydummykv.value = GETV(INVALIDDATA);
		keyvalue_buffer_t dummykv = GETKV(mydummykv);
		if(capsule_so8[p].value % 8 == 4){
			unsigned int yoffset = (capsule_so8[p].key + capsule_so8[p].value) / VECTOR_SIZE;
			buffer_setof8[4][yoffset] = dummykv; buffer_setof8[5][yoffset] = dummykv; buffer_setof8[6][yoffset] = dummykv; buffer_setof8[7][yoffset] = dummykv; 
			capsule_so8[p].value += 4;
		}
		#if defined(_DEBUGMODE_CHECKS2) && defined(_DEBUGMODE_PARTITIONCHECKS)
		actsutilityobj->checkfordivisibleby(enablebufferD, "capsule_so8[p].value", capsule_so8[p].value, 8);
		#endif
	}
	return;
}

#ifdef ORIGINAL_XXXXXXXXXXXXXXXX
void 
	#ifdef SW 
	actsproc::
	#endif
actit(bool_type enable, unsigned int mode,
 uint512_dt * kvdram, keyvalue_buffer_t sourcebuffer[VECTOR_SIZE][SOURCEBLOCKRAM_SIZE], keyvalue_vbuffer_t vbuffer[VDATA_PACKINGSIZE][BLOCKRAM_SIZE], unitBRAMwidth_type vmask[BLOCKRAM_SIZE], unitBRAMwidth_type vmask_subp[BLOCKRAM_SIZE], keyvalue_t globalstatsbuffer[MAX_NUM_PARTITIONS], 
		globalparams_t globalparams, sweepparams_t sweepparams, travstate_t ptravstate, batch_type sourcebaseaddr_kvs, batch_type destbaseaddr_kvs,
		bool_type resetenv, bool_type flush, unsigned int edgebankID){
	analysis_type analysis_partitionloop = MODEL_BATCHSIZE_KVS / (NUMPIPELINES_PARTITIONUPDATES * WORKBUFFER_SIZE);
	if(enable == OFF){ return; }
	
static keyvalue_buffer_t buffer_setof1[VECTOR_SIZE][BLOCKRAM_SIZE]; // REMOVEME.-SWX
	#pragma HLS array_partition variable = buffer_setof1
static keyvalue_buffer_t buffer_setof8[VECTOR_SIZE][DESTBLOCKRAM_SIZE];
	#pragma HLS array_partition variable = buffer_setof8
	
static keyvalue_capsule_t capsule_so1[VECTOR_SIZE][MAX_NUM_PARTITIONS];
	#pragma HLS array_partition variable = capsule_so1

static keyvalue_capsule_t capsule_so8[MAX_NUM_PARTITIONS];
	
	travstate_t ptravstatepp0 = ptravstate;
	travstate_t ptravstatepp1 = ptravstate;
	
	bool_type pp0readen = ON;
	bool_type pp1readen = ON;
	bool_type pp0runpipelineen = ON;
	bool_type pp1runpipelineen = ON;
	bool_type pp0partitionen = ON;
	bool_type pp1partitionen = ON;
	bool_type pp0writeen = ON;
	bool_type pp1writeen = ON;
static buffer_type pp0cutoffs[VECTOR_SIZE];
static buffer_type pp1cutoffs[VECTOR_SIZE];
	batch_type itercount = 0;
	batch_type flushsz = 0;
	
	fetchmessage_t fetchmessagepp0;
	fetchmessage_t fetchmessagepp1;
	fetchmessagepp0.chunksize_kvs = -1; fetchmessagepp0.nextoffset_kvs = -1;
	fetchmessagepp1.chunksize_kvs = -1; fetchmessagepp1.nextoffset_kvs = -1;
	
	if(resetenv == ON){ resetenvbuffers(capsule_so1, capsule_so8); } else { itercount = 64; } // FIXME. '64' is just some number greater than 2
	if(flush == ON){ flushsz = 1*SRCBUFFER_SIZE; } else { flushsz = 0; }
	#ifdef _DEBUGMODE_KERNELPRINTS2
	if(resetenv == ON){ cout<<"actit: reset is ON"<<endl; } else { cout<<"actit: reset is OFF"<<endl;  }
	if(flush == ON){ cout<<"actit: flush is ON"<<endl; } else { cout<<"actit: flush is OFF"<<endl;  }
	#endif 
	
	batch_type offset_kvs = ptravstate.begin_kvs;

	ACTIT_MAINLOOP: while(offset_kvs < ptravstate.end_kvs + flushsz){
	#pragma HLS LOOP_TRIPCOUNT min=0 max=analysis_partitionloop avg=analysis_partitionloop
		#ifdef PUP1
		if(itercount >= 0){ pp0writeen = ON; } else { pp0writeen = OFF; }
		if(itercount >= 1){ pp1writeen = ON; } else { pp1writeen = OFF; }
		if(itercount >= 1){ pp1runpipelineen = ON; } else { pp1runpipelineen = OFF; }
		#else 
		if(itercount >= 0){ pp0writeen = ON; } else { pp0writeen = OFF; }
		#endif
		
		ptravstatepp0.i_kvs = offset_kvs;
		fetchmessagepp0 = fetchkeyvalues(ON, mode,  kvdram, vbuffer, vmask, vmask_subp, sourcebuffer, sourcebaseaddr_kvs, ptravstatepp0.i_kvs, WORKBUFFER_SIZE, ptravstatepp0, sweepparams, globalparams, edgebankID);
		if(mode == PROCESSMODE && fetchmessagepp0.nextoffset_kvs != -1){ offset_kvs = fetchmessagepp0.nextoffset_kvs; } else { offset_kvs+=WORKBUFFER_SIZE; } 
		#ifdef PUP1
		actspipeline(pp1runpipelineen, ON, buffer_setof1, capsule_so1, buffer_setof8, capsule_so8, sweepparams.currentLOP, sweepparams, pp1cutoffs, (itercount-2)+1, globalparams);
		#endif 
		
		preparekeyvalues(ON, ON, sourcebuffer, buffer_setof1, capsule_so1, sweepparams.currentLOP, sweepparams, fetchmessagepp0.chunksize_kvs, pp0cutoffs, globalparams);
		#ifdef PUP1
		commitkeyvalues(pp1writeen, ON, mode, kvdram, vbuffer, buffer_setof8, globalstatsbuffer, capsule_so8, destbaseaddr_kvs, fetchmessagepp1.chunksize_kvs, sweepparams, globalparams); 
		#endif 
		
		actspipeline(ON, ON, buffer_setof1, capsule_so1, buffer_setof8, capsule_so8, sweepparams.currentLOP, sweepparams, pp0cutoffs, itercount, globalparams);
		#ifdef PUP1
		ptravstatepp1.i_kvs = offset_kvs;
		fetchmessagepp1 = fetchkeyvalues(ON, mode,  kvdram, vbuffer, vmask, vmask_subp, sourcebuffer, sourcebaseaddr_kvs, ptravstatepp1.i_kvs, WORKBUFFER_SIZE, ptravstatepp1, sweepparams, globalparams, edgebankID);
		if(mode == PROCESSMODE && fetchmessagepp1.nextoffset_kvs != -1){ offset_kvs = fetchmessagepp1.nextoffset_kvs; } else { offset_kvs+=WORKBUFFER_SIZE; } 
		#endif
		
		commitkeyvalues(pp0writeen, ON, mode, kvdram, vbuffer, buffer_setof8, globalstatsbuffer, capsule_so8, destbaseaddr_kvs, fetchmessagepp0.chunksize_kvs, sweepparams, globalparams); 
		#ifdef PUP1
		preparekeyvalues(pp1partitionen, ON, sourcebuffer, buffer_setof1, capsule_so1, sweepparams.currentLOP, sweepparams, fetchmessagepp1.chunksize_kvs, pp1cutoffs, globalparams);
		#endif
		
		itercount += NUMPIPELINES_PARTITIONUPDATES;
	}
	return;
}
#endif 
void 
	#ifdef SW 
	actsproc::
	#endif
actit(bool_type enable, unsigned int mode,
 uint512_dt * kvdram, keyvalue_buffer_t sourcebuffer[VECTOR_SIZE][SOURCEBLOCKRAM_SIZE], keyvalue_vbuffer_t vbuffer[VDATA_PACKINGSIZE][BLOCKRAM_SIZE], unitBRAMwidth_type vmask[BLOCKRAM_SIZE], unitBRAMwidth_type vmask_subp[BLOCKRAM_SIZE], keyvalue_t globalstatsbuffer[MAX_NUM_PARTITIONS], 
		globalparams_t globalparams, sweepparams_t sweepparams, travstate_t ptravstate, batch_type sourcebaseaddr_kvs, batch_type destbaseaddr_kvs,
		bool_type resetenv, bool_type flush, unsigned int edgebankID){
	analysis_type analysis_partitionloop = MODEL_BATCHSIZE_KVS / (NUMPIPELINES_PARTITIONUPDATES * WORKBUFFER_SIZE);
	if(enable == OFF){ return; }
	
	//////
	// edgebankID = includeme_func(mode, edgebankID); // CRITICAL REMOVEME.
	
static keyvalue_buffer_t buffer_setof1[VECTOR_SIZE][BLOCKRAM_SIZE]; // REMOVEME.-SWX
	#pragma HLS array_partition variable = buffer_setof1
static keyvalue_buffer_t buffer_setof8[VECTOR_SIZE][DESTBLOCKRAM_SIZE];
	#pragma HLS array_partition variable = buffer_setof8
	
static keyvalue_capsule_t capsule_so1[VECTOR_SIZE][MAX_NUM_PARTITIONS];
	#pragma HLS array_partition variable = capsule_so1

static keyvalue_capsule_t capsule_so8[MAX_NUM_PARTITIONS];
	
	travstate_t ptravstatepp0 = ptravstate;
	travstate_t ptravstatepp1 = ptravstate;
	
	bool_type pp0readen = ON;
	bool_type pp1readen = ON;
	bool_type pp0runpipelineen = ON;
	bool_type pp1runpipelineen = ON;
	bool_type pp0partitionen = ON;
	bool_type pp1partitionen = ON;
	bool_type pp0writeen = ON;
	bool_type pp1writeen = ON;
static buffer_type pp0cutoffs[VECTOR_SIZE];
static buffer_type pp1cutoffs[VECTOR_SIZE];
	batch_type itercount = 0;
	batch_type flushsz = 0;
	
	fetchmessage_t fetchmessagepp0;
	fetchmessage_t fetchmessagepp1;
	fetchmessagepp0.chunksize_kvs = -1; fetchmessagepp0.nextoffset_kvs = -1;
	fetchmessagepp1.chunksize_kvs = -1; fetchmessagepp1.nextoffset_kvs = -1;
	
	if(resetenv == ON){ resetenvbuffers(capsule_so1, capsule_so8); } else { itercount = 64; } // FIXME. '64' is just some number greater than 2
	if(flush == ON){ flushsz = 1*SRCBUFFER_SIZE; } else { flushsz = 0; }
	#ifdef _DEBUGMODE_KERNELPRINTS2
	if(resetenv == ON){ cout<<"actit: reset is ON"<<endl; } else { cout<<"actit: reset is OFF"<<endl;  }
	if(flush == ON){ cout<<"actit: flush is ON"<<endl; } else { cout<<"actit: flush is OFF"<<endl;  }
	#endif 
	
	batch_type offset_kvs = ptravstate.begin_kvs;

	ACTIT_MAINLOOP: for(batch_type offset_kvs=ptravstate.begin_kvs; offset_kvs<ptravstate.end_kvs + flushsz; offset_kvs+=WORKBUFFER_SIZE * NUMPIPELINES_PARTITIONUPDATES){
	#pragma HLS LOOP_TRIPCOUNT min=0 max=analysis_partitionloop avg=analysis_partitionloop
		#ifdef PUP1
		if(itercount >= 0){ pp0writeen = ON; } else { pp0writeen = OFF; }
		if(itercount >= 1){ pp1writeen = ON; } else { pp1writeen = OFF; }
		if(itercount >= 1){ pp1runpipelineen = ON; } else { pp1runpipelineen = OFF; }
		#else 
		if(itercount >= 0){ pp0writeen = ON; } else { pp0writeen = OFF; }
		#endif
		
		ptravstatepp0.i_kvs = offset_kvs;
		fetchmessagepp0 = fetchkeyvalues(ON, mode,  kvdram, vbuffer, vmask, vmask_subp, sourcebuffer, sourcebaseaddr_kvs, ptravstatepp0.i_kvs, WORKBUFFER_SIZE, ptravstatepp0, sweepparams, globalparams, edgebankID);
		#ifdef PUP1 // CRITICAL REMOVEME.
		actspipeline(pp1runpipelineen, ON, buffer_setof1, capsule_so1, buffer_setof8, capsule_so8, sweepparams.currentLOP, sweepparams, pp1cutoffs, (itercount-2)+1, globalparams);
		#endif 
		
		preparekeyvalues(ON, ON, sourcebuffer, buffer_setof1, capsule_so1, sweepparams.currentLOP, sweepparams, fetchmessagepp0.chunksize_kvs, pp0cutoffs, globalparams);
		#ifdef PUP1
		commitkeyvalues(pp1writeen, ON, mode, kvdram, vbuffer, buffer_setof8, globalstatsbuffer, capsule_so8, destbaseaddr_kvs, fetchmessagepp1.chunksize_kvs, sweepparams, globalparams); 
		#endif 
		
		actspipeline(ON, ON, buffer_setof1, capsule_so1, buffer_setof8, capsule_so8, sweepparams.currentLOP, sweepparams, pp0cutoffs, itercount, globalparams);
		#ifdef PUP1
		ptravstatepp1.i_kvs = offset_kvs + WORKBUFFER_SIZE;
		fetchmessagepp1 = fetchkeyvalues(ON, mode,  kvdram, vbuffer, vmask, vmask_subp, sourcebuffer, sourcebaseaddr_kvs, ptravstatepp1.i_kvs, WORKBUFFER_SIZE, ptravstatepp1, sweepparams, globalparams, edgebankID);
		#endif
		
		commitkeyvalues(pp0writeen, ON, mode, kvdram, vbuffer, buffer_setof8, globalstatsbuffer, capsule_so8, destbaseaddr_kvs, fetchmessagepp0.chunksize_kvs, sweepparams, globalparams); 
		#ifdef PUP1
		preparekeyvalues(pp1partitionen, ON, sourcebuffer, buffer_setof1, capsule_so1, sweepparams.currentLOP, sweepparams, fetchmessagepp1.chunksize_kvs, pp1cutoffs, globalparams);
		#endif
		
		itercount += NUMPIPELINES_PARTITIONUPDATES;
	}
	return;
}

void 
	#ifdef SW 
	actsproc::
	#endif
priorit(bool_type enable, unsigned int mode,
 uint512_dt * kvdram, keyvalue_buffer_t sourcebuffer[VECTOR_SIZE][SOURCEBLOCKRAM_SIZE], keyvalue_vbuffer_t vbuffer[VDATA_PACKINGSIZE][BLOCKRAM_SIZE], unitBRAMwidth_type vmask[BLOCKRAM_SIZE], unitBRAMwidth_type vmask_subp[BLOCKRAM_SIZE], keyvalue_t globalstatsbuffer[MAX_NUM_PARTITIONS], 
		globalparams_t globalparams, sweepparams_t sweepparams, travstate_t ptravstate, batch_type sourcebaseaddr_kvs, batch_type destbaseaddr_kvs,
		bool_type resetenv, bool_type flush, unsigned int edgebankID){
	analysis_type analysis_partitionloop = MODEL_BATCHSIZE_KVS / (NUMPIPELINES_PARTITIONUPDATES * WORKBUFFER_SIZE);
	if(enable == OFF){ return; }
	
	#ifdef PUP1
	keyvalue_buffer_t sourcebufferpp1[VECTOR_SIZE][SOURCEBLOCKRAM_SIZE];
	#pragma HLS array_partition variable = sourcebufferpp1
	#endif 
	
static keyvalue_buffer_t buffer_setof8[VECTOR_SIZE][DESTBLOCKRAM_SIZE];
	#pragma HLS array_partition variable = buffer_setof8
	#ifdef PUP1
static keyvalue_buffer_t bufferpp1_setof8[VECTOR_SIZE][DESTBLOCKRAM_SIZE];
	#pragma HLS array_partition variable = bufferpp1_setof8
	#endif 
	
static keyvalue_capsule_t capsule_so8[MAX_NUM_PARTITIONS];
	#ifdef PUP1
static keyvalue_capsule_t capsulepp1_so8[MAX_NUM_PARTITIONS];
	#endif 
	
	travstate_t ptravstatepp0 = ptravstate;
	travstate_t ptravstatepp1 = ptravstate;
	
	fetchmessage_t fetchmessagepp0;
	fetchmessage_t fetchmessagepp1;
	fetchmessagepp0.chunksize_kvs = -1; fetchmessagepp0.nextoffset_kvs = -1;
	fetchmessagepp1.chunksize_kvs = -1; fetchmessagepp1.nextoffset_kvs = -1;
	
	if(resetenv == ON){ resetenvbuffer(capsule_so8); }
	#ifdef PUP1
	if(resetenv == ON){ resetenvbuffer(capsulepp1_so8); }
	#endif 
	
	#ifdef _DEBUGMODE_KERNELPRINTS
	if(resetenv == ON){ cout<<"priorit: reset is ON"<<endl; } else { cout<<"priorit: reset is OFF"<<endl;  }
	#endif 
	
	batch_type offset_kvs = ptravstate.begin_kvs;

	PRIORIT_MAINLOOP: while(offset_kvs < ptravstate.end_kvs){ // NEWCHANGE.
	#pragma HLS LOOP_TRIPCOUNT min=0 max=analysis_partitionloop avg=analysis_partitionloop

		ptravstatepp0.i_kvs = offset_kvs;
		fetchmessagepp0 = fetchkeyvalues(ON, mode,  kvdram, vbuffer, vmask, vmask_subp, sourcebuffer, sourcebaseaddr_kvs, ptravstatepp0.i_kvs, WORKBUFFER_SIZE, ptravstatepp0, sweepparams, globalparams, edgebankID);
		if(mode == PROCESSMODE && fetchmessagepp0.nextoffset_kvs != -1){ offset_kvs = fetchmessagepp0.nextoffset_kvs; } else { offset_kvs+=WORKBUFFER_SIZE; } 
		
		priorpartitionkeyvalues(ON, ON, sourcebuffer, buffer_setof8, capsule_so8, sweepparams.currentLOP, sweepparams, fetchmessagepp0.chunksize_kvs, globalparams);
		#ifdef PUP1
		ptravstatepp0.i_kvs = offset_kvs;
		fetchmessagepp1 = fetchkeyvalues(ON, mode,  kvdram, vbuffer, vmask, vmask_subp, sourcebufferpp1, sourcebaseaddr_kvs, ptravstatepp0.i_kvs, WORKBUFFER_SIZE, ptravstatepp0, sweepparams, globalparams, edgebankID);
		if(mode == PROCESSMODE && fetchmessagepp1.nextoffset_kvs != -1){ offset_kvs = fetchmessagepp1.nextoffset_kvs; } else { offset_kvs+=WORKBUFFER_SIZE; } 
		#endif 
		
		priorcommitkeyvalues(ON, ON, mode, kvdram, vbuffer, sourcebuffer, buffer_setof8, globalstatsbuffer, capsule_so8, destbaseaddr_kvs, fetchmessagepp0.chunksize_kvs, sweepparams, globalparams); 
		#ifdef PUP1
		priorpartitionkeyvalues(ON, ON, sourcebufferpp1, bufferpp1_setof8, capsulepp1_so8, sweepparams.currentLOP, sweepparams, fetchmessagepp1.chunksize_kvs, globalparams);
		#endif 
		
		#ifdef PUP1
		priorcommitkeyvalues(ON, ON, mode, kvdram, vbuffer, sourcebufferpp1, bufferpp1_setof8, globalstatsbuffer, capsulepp1_so8, destbaseaddr_kvs, fetchmessagepp1.chunksize_kvs, sweepparams, globalparams); 
		#endif
	}
	return;
}

void 
	#ifdef SW 
	actsproc::
	#endif
tradit(bool_type enable, unsigned int mode,
 uint512_dt * kvdram, keyvalue_buffer_t sourcebuffer[VECTOR_SIZE][SOURCEBLOCKRAM_SIZE], keyvalue_vbuffer_t vbuffer[VDATA_PACKINGSIZE][BLOCKRAM_SIZE], unitBRAMwidth_type vmask[BLOCKRAM_SIZE], unitBRAMwidth_type vmask_subp[BLOCKRAM_SIZE], keyvalue_t globalstatsbuffer[MAX_NUM_PARTITIONS], 
		globalparams_t globalparams, sweepparams_t sweepparams, travstate_t ptravstate, batch_type sourcebaseaddr_kvs, batch_type destbaseaddr_kvs,
		bool_type resetenv, bool_type flush, unsigned int edgebankID){
	analysis_type analysis_partitionloop = MODEL_BATCHSIZE_KVS / (NUMPIPELINES_PARTITIONUPDATES * WORKBUFFER_SIZE);
	if(enable == OFF){ return; }

	travstate_t ptravstatepp0 = ptravstate;
	travstate_t ptravstatepp1 = ptravstate;
	
	fetchmessage_t fetchmessagepp0;
	fetchmessage_t fetchmessagepp1;
	fetchmessagepp0.chunksize_kvs = -1; fetchmessagepp0.nextoffset_kvs = -1;
	fetchmessagepp1.chunksize_kvs = -1; fetchmessagepp1.nextoffset_kvs = -1;
	
	#ifdef _DEBUGMODE_KERNELPRINTS
	if(resetenv == ON){ cout<<"tradit: reset is ON"<<endl; } else { cout<<"tradit: reset is OFF"<<endl;  }
	#endif 
	
	batch_type offset_kvs = ptravstate.begin_kvs;

	PRIORIT_MAINLOOP: while(offset_kvs < ptravstate.end_kvs){ // NEWCHANGE.
	#pragma HLS LOOP_TRIPCOUNT min=0 max=analysis_partitionloop avg=analysis_partitionloop

		ptravstatepp0.i_kvs = offset_kvs;
		fetchmessagepp0 = fetchkeyvalues(ON, mode,  kvdram, vbuffer, vmask, vmask_subp, sourcebuffer, sourcebaseaddr_kvs, ptravstatepp0.i_kvs, WORKBUFFER_SIZE, ptravstatepp0, sweepparams, globalparams, edgebankID);
		if(mode == PROCESSMODE && fetchmessagepp0.nextoffset_kvs != -1){ offset_kvs = fetchmessagepp0.nextoffset_kvs; } else { offset_kvs+=WORKBUFFER_SIZE; } 
		
		tradreduceandbuffer(ON, kvdram, sourcebuffer, fetchmessagepp0.chunksize_kvs, globalstatsbuffer, sweepparams, globalparams);
	}
	return;
}

#ifndef CONFIG_UNIFIED_VDRAM
// dispatch
void
	#ifdef SW
	actsproc::
	#endif 
processit( uint512_dt * kvdram, keyvalue_buffer_t sourcebuffer[VECTOR_SIZE][SOURCEBLOCKRAM_SIZE], keyvalue_vbuffer_t vbuffer[VDATA_PACKINGSIZE][BLOCKRAM_SIZE], unitBRAMwidth_type vmask[BLOCKRAM_SIZE], unitBRAMwidth_type vmask_subp[BLOCKRAM_SIZE], uint32_type vmask_p[BLOCKRAM_SIZE], globalparams_t globalparamsE, globalparams_t globalparamsK,								
			unsigned int v_chunkids[EDGESSTATSDRAMSZ], unsigned int v_chunkid, unsigned int edgebankID){
	#pragma HLS INLINE 
	analysis_type analysis_loop1 = 1;
	#if defined(_DEBUGMODE_KERNELPRINTS2) || defined(_DEBUGMODE_CHECKS2)
	actsutilityobj->clearglobalvars();
	#endif
	
	keyvalue_t globalstatsbuffer[NUM_PARTITIONS]; 
	
	batch_type sourcestatsmarker = 0;
	batch_type deststatsmarker = 1;
	sweepparams_t sweepparams;
	
	buffer_type reducebuffersz = globalparamsK.SIZE_REDUCE / 2;
	buffer_type vmaskbuffersz_kvs = (globalparamsK.SIZE_REDUCE * VDATA_PACKINGSIZE) / 512;
	
	step_type currentLOP=globalparamsK.ACTSPARAMS_BEGINLOP;
	resetkeysandvalues(globalstatsbuffer, NUM_PARTITIONS, 0);
	sweepparams = getsweepparams(globalparamsK, currentLOP, 0);
	travstate_t avtravstate;
	batch_type vmaskoffset_kvs = v_chunkids[v_chunkid] * (vmaskbuffersz_kvs); 
	
	#ifdef ENABLERECURSIVEPARTITIONING
	batch_type tempnum_source_partitions = get_num_source_partitions(globalparamsK.ACTSPARAMS_TREEDEPTH);
	#else 
	batch_type tempnum_source_partitions = NUM_PARTITIONS;	
	#endif 
	
	globalparams_t globalparamsVPTRS = globalparamsE;
	globalparams_t globalparamsVDATA = globalparamsK;
	
	avtravstate.begin_kvs = 0;
	avtravstate.end_kvs = avtravstate.begin_kvs + (globalparamsK.ACTSPARAMS_SRCVSIZE / VECTOR2_SIZE); avtravstate.size_kvs = globalparamsK.ACTSPARAMS_SRCVSIZE / VECTOR2_SIZE;
	readglobalstats(ON, kvdram, globalstatsbuffer, globalparamsK.BASEOFFSETKVS_STATSDRAM + deststatsmarker, globalparamsK); 
	resetvalues(globalstatsbuffer, NUM_PARTITIONS, 0);
	
	batch_type vptrbaseoffset_kvs = globalparamsVPTRS.BASEOFFSETKVS_VERTEXPTR + (globalparamsVPTRS.ACTSPARAMS_SRCVOFFSET / VECTOR_SIZE); // NEWCHANGE. NOTE: no need to include v_chunkids[32] because source_partition handles it
	batch_type vdatabaseoffset_kvs = globalparamsVDATA.BASEOFFSETKVS_SRCVERTICESDATA + (globalparamsVDATA.ACTSPARAMS_SRCVOFFSET / VECTOR_SIZE); // NEWCHANGE.
	
	unsigned int GraphAlgo = globalparamsK.ALGORITHMINFO_GRAPHALGORITHMID;
	unsigned int SKIP_KVS = reducebuffersz * FETFACTOR;
	
	#ifdef _DEBUGMODE_KERNELPRINTS2
	actsutilityobj->print7("### processit:: source_p", "upperlimit", "begin", "end", "size", "dest range", "currentLOP", sweepparams.source_partition, sweepparams.upperlimit, avtravstate.begin_kvs * VECTOR_SIZE, avtravstate.end_kvs * VECTOR_SIZE, (avtravstate.end_kvs - avtravstate.begin_kvs) * VECTOR_SIZE, BATCH_RANGE / (1 << (NUM_PARTITIONS_POW * sweepparams.currentLOP)), sweepparams.currentLOP); 							
	#endif
	PROCESSIT_MAINLOOP: for(batch_type source_partition=v_chunkids[v_chunkid]; source_partition<v_chunkids[v_chunkid+1]; source_partition+=1){
	#pragma HLS LOOP_TRIPCOUNT min=0 max=analysis_loop1 avg=analysis_loop1
		// cout<<"--- source_partition "<<source_partition<<" ... "<<endl; // REMOVEME.

		batch_type voffset_kvs = source_partition * reducebuffersz * FETFACTOR;
		if(voffset_kvs >= avtravstate.end_kvs){ continue; }
		if(GraphAlgo != PAGERANK) { if(vmask_p[source_partition] == 0){ vmaskoffset_kvs += vmaskbuffersz_kvs; continue; }}
		
		sweepparams.source_partition = source_partition;
		avtravstate.i_kvs = voffset_kvs;
		
		#ifdef _DEBUGMODE_KERNELPRINTS2
		actsutilityobj->print5("### processit:: source_partition", "voffset", "vbegin", "vend", "vskip", source_partition, voffset_kvs * VECTOR_SIZE, avtravstate.begin_kvs * VECTOR_SIZE, avtravstate.size_kvs * VECTOR_SIZE, SRCBUFFER_SIZE * VECTOR_SIZE);
		#endif
		
		loadvmasks(ON, kvdram, vmask, vbuffer, globalparamsK.BASEOFFSETKVS_VERTICESDATAMASK + vmaskoffset_kvs, vmaskbuffersz_kvs, globalparamsK); // NOTE: this should come before loadvdata because vbuffer is used as a temp buffer
		readvdata(ON, kvdram, vdatabaseoffset_kvs + voffset_kvs, vbuffer, 0, 0, reducebuffersz, globalparamsK);
		readvdata(ON, kvdram, vdatabaseoffset_kvs + voffset_kvs + reducebuffersz, vbuffer, 8, 0, reducebuffersz, globalparamsK);
		vmaskoffset_kvs += vmaskbuffersz_kvs;
	
		vertex_t srcvlocaloffset = (voffset_kvs * VECTOR2_SIZE);
		vertex_t beginsrcvid = globalparamsK.ACTSPARAMS_SRCVOFFSET + (voffset_kvs * VECTOR2_SIZE);
		vertex_t endsrcvid = beginsrcvid + ((reducebuffersz * VECTOR2_SIZE) * FETFACTOR);
		if(srcvlocaloffset >= globalparamsK.ACTSPARAMS_SRCVSIZE){ endsrcvid = beginsrcvid; }
		if((srcvlocaloffset < globalparamsK.ACTSPARAMS_SRCVSIZE) && (srcvlocaloffset + ((reducebuffersz * VECTOR2_SIZE) * FETFACTOR) >= globalparamsK.ACTSPARAMS_SRCVSIZE)){ endsrcvid = beginsrcvid + globalparamsK.ACTSPARAMS_SRCVSIZE - srcvlocaloffset; }
		
		tuple_t tup = getvptrs_opt( kvdram, vptrbaseoffset_kvs, voffset_kvs * VECTOR2_SIZE, (voffset_kvs + SKIP_KVS) * VECTOR2_SIZE, edgebankID); // CRITICAL NEWCHANGE.
		keyy_t beginvptr = tup.A;
		keyy_t endvptr = tup.B; 
	
		if(srcvlocaloffset >= globalparamsK.ACTSPARAMS_SRCVSIZE){ endvptr = beginvptr; }
		
		keyy_t localbeginvptr = beginvptr;
		keyy_t localendvptr = endvptr;
		keyy_t numedges = localendvptr - localbeginvptr + 2*VECTOR_SIZE;
		if(localbeginvptr == localendvptr){ numedges = 0; }
		keyy_t localbeginvptr_kvs = localbeginvptr / VECTOR_SIZE; // NOTE: this should be in KVS(8) terms
		keyy_t numedges_kvs = numedges / VECTOR_SIZE; // NB: this is correct.
		#ifdef _DEBUGMODE_CHECKS2
		if(localendvptr < localbeginvptr){ cout<<"processit::ERROR: localendvptr < localbeginvptr. localbeginvptr: "<<localbeginvptr<<", localendvptr: "<<localendvptr<<endl; exit(EXIT_FAILURE); }
		if(localendvptr < globalparamsE.SIZE_EDGES){ actsutilityobj->checkptr("processit", beginsrcvid, endsrcvid, localbeginvptr, localendvptr, (keyvalue_t *)&kvdram[globalparamsE.BASEOFFSETKVS_EDGESDATA]); }
		#endif
		
		#ifdef _DEBUGMODE_KERNELPRINTS2
		cout<<"[index: "<<source_partition<<"][beginsrcvid: "<<beginsrcvid<<", endsrcvid: "<<endsrcvid<<"][beginvptr: "<<localbeginvptr<<", endvptr: "<<localendvptr<<", edges size: "<<numedges<<"][voffset: "<<voffset_kvs * VECTOR_SIZE<<"]"<<endl;
		#endif
		#ifdef _DEBUGMODE_CHECKS2
		if(localendvptr < localbeginvptr){ cout<<"ERROR: localendvptr < localbeginvptr. EXITING..."<<endl; exit(EXIT_FAILURE); }
		actsutilityobj->clearallstats();
		#endif
		
		travstate_t etravstate;
		etravstate.begin_kvs = localbeginvptr_kvs;
		etravstate.size_kvs = numedges_kvs;
		etravstate.end_kvs = etravstate.begin_kvs + etravstate.size_kvs;
		etravstate.skip_kvs = SRCBUFFER_SIZE;
		etravstate.i_kvs = etravstate.begin_kvs;
		etravstate.i2 = voffset_kvs * VECTOR2_SIZE;
		etravstate.i2_kvs = voffset_kvs;
		bool_type resetenv = ON;
		bool_type flush = ON;
		if(voffset_kvs == avtravstate.begin_kvs){ resetenv = ON; } else { resetenv = OFF; }
		if((voffset_kvs + (reducebuffersz * FETFACTOR)) >= avtravstate.end_kvs){ flush = ON; } else { flush = OFF; }
		if(GraphAlgo != PAGERANK){ resetenv = ON; flush = ON; } // CRITICAL NEWCHANGE.
	
		#if defined(ACTS_PARTITION_AND_REDUCE_STRETEGY)
		actit
		#elif defined(BASIC_PARTITION_AND_REDUCE_STRETEGY)
		priorit	
		#elif defined(TRAD_PARTITION_AND_REDUCE_STRETEGY)
		tradit
		#else 
		tradit
		#endif 
		(
			ON, PROCESSMODE,
 kvdram, sourcebuffer, vbuffer, vmask, vmask_subp, globalstatsbuffer, 
			globalparamsK, sweepparams, etravstate, globalparamsE.BASEOFFSETKVS_EDGESDATA, globalparamsK.BASEOFFSETKVS_KVDRAMWORKSPACE,
			resetenv, flush, edgebankID);
		
		#ifdef _DEBUGMODE_KERNELPRINTS
		actsutilityobj->printglobalvars();
		actsutilityobj->clearglobalvars();
		#endif
	}
		
	saveglobalstats(ON, kvdram, globalstatsbuffer, globalparamsK.BASEOFFSETKVS_STATSDRAM + deststatsmarker, globalparamsK);
	
	#ifdef _DEBUGMODE_KERNELPRINTS2
	actsutilityobj->printglobalvars();
	#endif 
	#if defined(_DEBUGMODE_KERNELPRINTS2) || defined(_DEBUGMODE_CHECKS2)
	actsutilityobj->clearglobalvars();
	#endif
	// exit(EXIT_SUCCESS);
	return;
}

void
	#ifdef SW 
	actsproc::
	#endif 
partitionit( uint512_dt * kvdram, keyvalue_buffer_t sourcebuffer[VECTOR_SIZE][SOURCEBLOCKRAM_SIZE], keyvalue_vbuffer_t vbuffer[VDATA_PACKINGSIZE][BLOCKRAM_SIZE], unitBRAMwidth_type vmask[BLOCKRAM_SIZE], unitBRAMwidth_type vmask_subp[BLOCKRAM_SIZE], globalparams_t globalparams, unsigned int edgebankID){
	#pragma HLS INLINE
	analysis_type analysis_numllops = 1;
	analysis_type analysis_numsourcepartitions = 1;
	#ifdef TRAD_PARTITION_AND_REDUCE_STRETEGY
	return; // no partitionit for TRAD_PARTITION_AND_REDUCE_STRETEGY
	#endif 
	#ifdef _DEBUGMODE_KERNELPRINTS
	actsutilityobj->printparameters();
	actsutilityobj->printglobalvars();
	actsutilityobj->printglobalparameters("actsproc::getglobalparams:: printing global parameters", globalparams);
	#endif 
	#if defined(_DEBUGMODE_KERNELPRINTS2) || defined(_DEBUGMODE_CHECKS2)
	actsutilityobj->clearglobalvars();
	#endif
	#ifdef _DEBUGMODE_STATS
	unsigned int edges_count = 0;
	unsigned int edgesdstv_sum = 0;
	#endif
	
	keyvalue_t globalstatsbuffer[NUM_PARTITIONS]; 
	
	batch_type sourcestatsmarker = 1;
	batch_type deststatsmarker = 1 + NUM_PARTITIONS;
	config_t config;
	sweepparams_t sweepparams;
	travstate_t actvvstravstate; actvvstravstate.i=0; actvvstravstate.i_kvs=0;
	
	PARTITIONIT_MAINLOOP1: for(step_type currentLOP=globalparams.ACTSPARAMS_BEGINLOP + 1; currentLOP<globalparams.ACTSPARAMS_BEGINLOP + 1 + (globalparams.ACTSPARAMS_NUMLOPS-2); currentLOP++){ // REMOVEME.
	#pragma HLS LOOP_TRIPCOUNT min=0 max=analysis_numllops avg=analysis_numllops	
	
		batch_type num_source_partitions = get_num_source_partitions(currentLOP);
		bool_type enreduce = ON;
		
		PARTITIONIT_LOOP1B: for(batch_type source_partition=0; source_partition<num_source_partitions; source_partition+=1){
		#pragma HLS LOOP_TRIPCOUNT min=0 max=analysis_numsourcepartitions avg=analysis_numsourcepartitions

			resetkeysandvalues(globalstatsbuffer, NUM_PARTITIONS, 0);
		
			sweepparams = getsweepparams(globalparams, currentLOP, source_partition);
			travstate_t ptravstate = gettravstate(ON, kvdram, globalparams, currentLOP, sourcestatsmarker);
			
			// collect stats
			readglobalstats(ON, kvdram, globalstatsbuffer, globalparams.BASEOFFSETKVS_STATSDRAM + deststatsmarker, globalparams);
			resetvalues(globalstatsbuffer, NUM_PARTITIONS, 0);
			
			// partition
			if(ptravstate.size_kvs > 0){ config.enablepartition = ON; } 
			else { ptravstate.begin_kvs = 0; ptravstate.end_kvs = 0; config.enablepartition = OFF; }
			if(ptravstate.size_kvs == 0){ ptravstate.begin_kvs = 0; ptravstate.end_kvs = 0; config.enablepartition = OFF; }
			#ifdef _DEBUGMODE_KERNELPRINTS2
			if((config.enablepartition == ON) && (currentLOP >= 1) && (currentLOP <= globalparams.ACTSPARAMS_TREEDEPTH)){ actsutilityobj->print7("### partitionit:: source_p", "upperlimit", "begin", "end", "size", "dest range", "currentLOP", sweepparams.source_partition, sweepparams.upperlimit, ptravstate.begin_kvs * VECTOR_SIZE, ptravstate.end_kvs * VECTOR_SIZE, ptravstate.size_kvs * VECTOR_SIZE, BATCH_RANGE / (1 << (NUM_PARTITIONS_POW * sweepparams.currentLOP)), sweepparams.currentLOP); }	
			#endif
			resetvalues(globalstatsbuffer, NUM_PARTITIONS, 0);
			bool_type resetenv; if(source_partition==0){ resetenv = ON; } else { resetenv = OFF; }
			
			#if defined(ACTS_PARTITION_AND_REDUCE_STRETEGY)
			actit
			#elif defined(BASIC_PARTITION_AND_REDUCE_STRETEGY)
			priorit	
			#elif defined(TRAD_PARTITION_AND_REDUCE_STRETEGY)
			tradit
			#else 
			tradit
			#endif
			(config.enablepartition, PARTITIONMODE,
 kvdram, sourcebuffer, vbuffer, vmask, vmask_subp, globalstatsbuffer, // CRITICAL FIXME.
					globalparams, sweepparams, ptravstate, sweepparams.worksourcebaseaddress_kvs, sweepparams.workdestbaseaddress_kvs,
					ON, ON, NAp);
					
			saveglobalstats(config.enablepartition, kvdram, globalstatsbuffer, globalparams.BASEOFFSETKVS_STATSDRAM + deststatsmarker, globalparams); 
			
			if(currentLOP > 0){
				sourcestatsmarker += 1;
				deststatsmarker += NUM_PARTITIONS;
			}
			
			#ifdef _DEBUGMODE_CHECKS
			if(config.enablereduce == ON){ actsutilityobj->printpartitionresult2(ON, kvdram, globalstatsbuffer, sweepparams); }
			#endif
			#ifdef _DEBUGMODE_STATS
			if(config.enablereduce == ON){ edges_count = actsutilityobj->globalstats_getcountvalidkvsreduced(); edgesdstv_sum = actsutilityobj->globalstats_getreducevar1(); }
			#endif
			#ifdef _DEBUGMODE_KERNELPRINTS
			actsutilityobj->printglobalvars();
			actsutilityobj->clearglobalvars();
			#endif
		}
		#ifdef _DEBUGMODE_KERNELPRINTS2
		actsutilityobj->printglobalvars();
		#endif 
		#if defined(_DEBUGMODE_KERNELPRINTS2) || defined(_DEBUGMODE_CHECKS2)
		actsutilityobj->clearglobalvars();
		#endif
	}
	return;
}

void
	#ifdef SW 
	actsproc::
	#endif 
reduceit( uint512_dt * kvdram, keyvalue_buffer_t sourcebuffer[VECTOR_SIZE][SOURCEBLOCKRAM_SIZE], keyvalue_vbuffer_t vbuffer[VDATA_PACKINGSIZE][BLOCKRAM_SIZE], unitBRAMwidth_type vmask[BLOCKRAM_SIZE], unitBRAMwidth_type vmask_subp[BLOCKRAM_SIZE], batch_type sourcestatsmarker, batch_type source_partition, globalparams_t globalparams, unsigned int edgebankID){	
	#pragma HLS INLINE
	analysis_type analysis_numllops = 1;
	analysis_type analysis_numsourcepartitions = 1;
	analysis_type analysis_treedepth = TREE_DEPTH;
	
	keyvalue_t globalstatsbuffer[NUM_PARTITIONS]; 
	
	config_t config;
	sweepparams_t sweepparams;
	
	#ifdef ENABLERECURSIVEPARTITIONING
	step_type currentLOP = globalparams.ACTSPARAMS_TREEDEPTH;
	#else 
	step_type currentLOP = globalparams.ACTSPARAMS_TREEDEPTH + 1;
	#endif 
	
	sweepparams = getsweepparams(globalparams, currentLOP, source_partition);
	travstate_t ptravstate = gettravstate(ON, kvdram, globalparams, currentLOP, sourcestatsmarker);

	if(ptravstate.size_kvs == 0){ ptravstate.begin_kvs = 0; ptravstate.end_kvs = 0; config.enablereduce = OFF; }
	else { config.enablereduce = ON; }
	#ifdef _DEBUGMODE_KERNELPRINTS2
	if(ptravstate.size_kvs > 0){ actsutilityobj->print7("### reduceit:: source_p", "upperlimit", "begin", "end", "size", "dest range", "currentLOP", sweepparams.source_partition, sweepparams.upperlimit, ptravstate.begin_kvs * VECTOR_SIZE, ptravstate.end_kvs * VECTOR_SIZE, ptravstate.size_kvs * VECTOR_SIZE, BATCH_RANGE / (1 << (NUM_PARTITIONS_POW * sweepparams.currentLOP)), sweepparams.currentLOP); }	
	#endif
	bool_type resetenv; if(source_partition==0){ resetenv = ON; } else { resetenv = OFF; }
	
	#if defined(ACTS_PARTITION_AND_REDUCE_STRETEGY)
	actit
	#elif defined(BASIC_PARTITION_AND_REDUCE_STRETEGY)
	priorit	
	#elif defined(TRAD_PARTITION_AND_REDUCE_STRETEGY)
	tradit
	#else 
	tradit
	#endif
	(config.enablereduce, REDUCEMODE,
 kvdram, sourcebuffer, vbuffer, vmask, vmask_subp, globalstatsbuffer, // CRITICAL FIXME.
			globalparams, sweepparams, ptravstate, sweepparams.worksourcebaseaddress_kvs, sweepparams.workdestbaseaddress_kvs,
			ON, ON, NAp); // REMOVEME.
	return;
}

void
	#ifdef SW 
	actsproc::
	#endif 
dispatch(bool_type en_process, bool_type en_partition, bool_type en_reduce,  uint512_dt * kvdram, keyvalue_buffer_t sourcebuffer[VECTOR_SIZE][SOURCEBLOCKRAM_SIZE], keyvalue_vbuffer_t vbuffer[VDATA_PACKINGSIZE][BLOCKRAM_SIZE], unitBRAMwidth_type vmask[BLOCKRAM_SIZE], unitBRAMwidth_type vmask_subp[BLOCKRAM_SIZE], uint32_type vmask_p[BLOCKRAM_SIZE],
			batch_type sourcestatsmarker, batch_type source_partition, globalparams_t globalparamsE, globalparams_t globalparamsK,
				unsigned int v_chunkids[EDGESSTATSDRAMSZ], unsigned int v_chunkid, unsigned int edgebankID){
	if(en_process == ON){ processit( kvdram, sourcebuffer, vbuffer, vmask, vmask_subp, vmask_p, globalparamsE, globalparamsK, v_chunkids, v_chunkid, edgebankID); } 
	if(en_partition == ON){ partitionit( kvdram, sourcebuffer, vbuffer, vmask, vmask_subp, globalparamsK, NAp); } 
	if(en_reduce == ON){ reduceit( kvdram, sourcebuffer, vbuffer, vmask, vmask_subp, sourcestatsmarker, source_partition, globalparamsK, NAp); } 
	return;
}

void
	#ifdef SW 
	actsproc::
	#endif 
dispatch_reduce( uint512_dt * kvdram, keyvalue_buffer_t sourcebuffer[VECTOR_SIZE][SOURCEBLOCKRAM_SIZE], keyvalue_vbuffer_t vbuffer[VDATA_PACKINGSIZE][BLOCKRAM_SIZE], unitBRAMwidth_type vmask[BLOCKRAM_SIZE], unitBRAMwidth_type vmask_subp[BLOCKRAM_SIZE], uint32_type vmask_p[BLOCKRAM_SIZE], globalparams_t globalparamsE, globalparams_t globalparamsK,	
					unsigned int v_chunkids[EDGESSTATSDRAMSZ], unsigned int v_chunkid, unsigned int edgebankID){
	#pragma HLS INLINE
	analysis_type analysis_loop1 = 1;
	analysis_type analysis_treedepth = TREE_DEPTH;
	#ifdef TRAD_PARTITION_AND_REDUCE_STRETEGY
	return; // no dispatch_reduce for TRAD_PARTITION_AND_REDUCE_STRETEGY
	#endif 
	#ifdef _DEBUGMODE_STATS
	actsutilityobj->clearglobalvars();
	#endif
	
	unsigned int sourcestatsmarker = 0;
	#ifdef ENABLERECURSIVEPARTITIONING
	for(unsigned int k=0; k<globalparamsK.ACTSPARAMS_TREEDEPTH-1; k++)
	#else 
	for(unsigned int k=0; k<globalparamsK.ACTSPARAMS_TREEDEPTH; k++)
	#endif 
	{
	#pragma HLS LOOP_TRIPCOUNT min=0 max=analysis_treedepth avg=analysis_treedepth
		sourcestatsmarker += (1 << (NUM_PARTITIONS_POW * k)); 
	}
	
	unsigned int vreadoffset_kvs = 0;
	buffer_type reducebuffersz = globalparamsK.SIZE_REDUCE / 2;
	
	#ifdef ENABLERECURSIVEPARTITIONING
	step_type currentLOP = globalparamsK.ACTSPARAMS_TREEDEPTH;
	#else 
	step_type currentLOP = globalparamsK.ACTSPARAMS_TREEDEPTH + 1; // NEWCHANGE.	
	#endif 
	
	#ifdef ENABLERECURSIVEPARTITIONING
	batch_type num_source_partitions = get_num_source_partitions(currentLOP); // NEWCHANGE.
	#else 
	batch_type num_source_partitions = NUM_PARTITIONS;	
	#endif

	// for(unsigned int k=0; k<num_source_partitions; k++){ vmask_p[k] = 0; } // vmask_subp[k] = 0; // CRITICAL NEWCHANGE.
	bool_type enablereduce = ON;
	
	DISPATCHREDUCE_MAINLOOP: for(batch_type source_partition=0; source_partition<num_source_partitions; source_partition+=1){
	#pragma HLS LOOP_TRIPCOUNT min=0 max=analysis_loop1 avg=analysis_loop1
		#ifdef _DEBUGMODE_KERNELPRINTS
		actsutilityobj->print3("### dispatch_reduce:: source_partition", "currentLOP", "NAp", source_partition, currentLOP, NAp); 							
		#endif
		
		enablereduce = ON;
		travstate_t rtravstate = gettravstate(ON, kvdram, globalparamsK, currentLOP, sourcestatsmarker);
		if(rtravstate.size_kvs > 0){ enablereduce = ON; } else { enablereduce = OFF; }
		batch_type voffset_kvs = source_partition * reducebuffersz * FETFACTOR;
		
		// read vertices
		readvdata(enablereduce, kvdram, globalparamsK.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs, vbuffer, 0, 0, reducebuffersz, globalparamsK);
		readvdata(enablereduce, kvdram, globalparamsK.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs + reducebuffersz, vbuffer, 8, 0, reducebuffersz, globalparamsK);
		
		// reduce
		dispatch(OFF, OFF, enablereduce,  kvdram, sourcebuffer, vbuffer, vmask, vmask_subp, vmask_p, sourcestatsmarker, source_partition, globalparamsE, globalparamsK, v_chunkids, v_chunkid, NAp);
		
		// writeback vertices
		savevdata(enablereduce, kvdram, globalparamsK.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs, vbuffer, 0, 0, reducebuffersz, globalparamsK);
		savevdata(enablereduce, kvdram, globalparamsK.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs + reducebuffersz, vbuffer, 8, 0, reducebuffersz, globalparamsK);
		
		sourcestatsmarker += 1;
		vreadoffset_kvs += reducebuffersz * 2;
	}
	return;
} 

// top
void 
	#ifdef SW 
	actsproc:: 
	#endif
topkernelproc_embedded(
	
	uint512_dt * kvdram){
	#ifdef _DEBUGMODE_KERNELPRINTS
	actsutilityobj->printparameters();
	#endif
	#if defined(_DEBUGMODE_KERNELPRINTS) & defined(ALLVERTEXISACTIVE_ALGORITHM)
	cout<<">>> Light weight ACTS (PR: 1 ACTS IN 1 COMPUTEUNITS) Launched... size: "<<GETKEYENTRY(kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_SIZE_RUN], 0)<<endl; 
	#endif
	
	keyvalue_buffer_t sourcebuffer[VECTOR_SIZE][SOURCEBLOCKRAM_SIZE];
	#pragma HLS array_partition variable = sourcebuffer
	keyvalue_vbuffer_t vbuffer[VDATA_PACKINGSIZE][BLOCKRAM_SIZE];
	#pragma HLS array_partition variable = vbuffer
	unitBRAMwidth_type vmask[BLOCKRAM_SIZE];
	#pragma HLS DATA_PACK variable = vmask
	unitBRAMwidth_type vmask_subp[BLOCKRAM_SIZE];
	#pragma HLS DATA_PACK variable = vmask_subp
	uint32_type vmask_p[BLOCKRAM_SIZE];
	
	globalparams_t globalparamsK = getglobalparams(kvdram);
	globalparams_t globalparamsE[MAX_NUM_EDGE_BANKS];
	#ifdef EDGES_IN_SEPERATE_BUFFER_FROM_KVDRAM
	
	#else 
	globalparamsE[0] = globalparamsK;
	#endif 
	unsigned int GraphAlgo = globalparamsK.ALGORITHMINFO_GRAPHALGORITHMID;
	
	if(GraphAlgo != PAGERANK){ loadvmask_p(kvdram, vmask_p, globalparamsK.BASEOFFSETKVS_VERTICESPARTITIONMASK, BLOCKRAM_SIZE); }
	if(GraphAlgo != PAGERANK){ resetkvstatvalues(kvdram, globalparamsK); }	
	
	#ifdef EDGES_IN_SEPERATE_BUFFER_FROM_KVDRAM
	value_t buffer[DOUBLE_BLOCKRAM_SIZE]; // CRITICAL AUTOMATEME.
	for(unsigned int i=0; i<DOUBLE_BLOCKRAM_SIZE; i++){ buffer[i] = 0; } 
	#endif 
	
	#ifdef ENABLERECURSIVEPARTITIONING
	batch_type num_vchunks = get_num_source_partitions(globalparamsK.ACTSPARAMS_TREEDEPTH);
	#else 
	batch_type num_vchunks = NUM_PARTITIONS;	
	#endif 
	
	unsigned int PARTITION_CHKPT[MAX_NUM_EDGE_BANKS][EDGESSTATSDRAMSZ];
	for(unsigned int u=0; u<EDGESSTATSDRAMSZ; u++){
		#ifdef EDGES_IN_SEPERATE_BUFFER_FROM_KVDRAM
			#ifdef _WIDEWORD
	
			#else
	
			#endif
		#else 
			#ifdef _WIDEWORD
			PARTITION_CHKPT[0][u] = kvdram[globalparamsK.BASEOFFSETKVS_EDGESSTATSDRAM + u].range(31, 0); 
			#else
			PARTITION_CHKPT[0][u] = kvdram[globalparamsK.BASEOFFSETKVS_EDGESSTATSDRAM + u].data[0].key; 
			#endif
		#endif 
	}
	
	#ifdef _DEBUGMODE_HOSTPRINTS
	for(unsigned int u=0; u<globalparamsK.ACTSPARAMS_NUMEDGECHUNKSINABUFFER+1; u++){ cout<<">>> globalparamsK.ACTSPARAMS_NUMEDGECHUNKSINABUFFER: "<<globalparamsK.ACTSPARAMS_NUMEDGECHUNKSINABUFFER<<", PARTITION_CHKPT["<<u<<"]: "<<PARTITION_CHKPT[u]<<endl; }			
	#endif
	#ifdef EDGES_IN_SEPERATE_BUFFER_FROM_KVDRAM
	copyvs(kvdram, vbuffer, globalparamsK);
	#endif
	unsigned int FIRST_BASEOFFSETKVS_STATSDRAM = globalparamsK.BASEOFFSETKVS_STATSDRAM;
	
	unsigned int it_size = 0;
	#ifdef EDGES_IN_SEPERATE_BUFFER_FROM_KVDRAM
	it_size = NUM_EDGE_BANKS;
	#else 
	it_size = 1;	
	#endif 
	
	for(unsigned int edgebankID=0; edgebankID<it_size; edgebankID++){
		globalparamsK.VARS_WORKBATCH = 0;
		globalparams_t _globalparamsE = globalparamsE[edgebankID];

		for(unsigned int v_chunkid=0; v_chunkid<globalparamsK.ACTSPARAMS_NUMEDGECHUNKSINABUFFER; v_chunkid++){
			// process & partition
			#ifdef PROCESSMODULE
			if(globalparamsK.ENABLE_PROCESSCOMMAND == ON){
				#if defined(_DEBUGMODE_KERNELPRINTS2) & defined(ALLVERTEXISACTIVE_ALGORITHM)
				cout<<"topkernelproc: processing instance ... "<<endl;
				#endif
				dispatch(ON, OFF, OFF,  kvdram, sourcebuffer, vbuffer, vmask, vmask_subp, vmask_p, NAp, NAp, _globalparamsE, globalparamsK, PARTITION_CHKPT[edgebankID], v_chunkid, edgebankID);
			}
			#endif
			
			// partition
			#ifdef PARTITIONMODULE
			if(globalparamsK.ENABLE_PARTITIONCOMMAND == ON){
				#if defined(_DEBUGMODE_KERNELPRINTS2) & defined(ALLVERTEXISACTIVE_ALGORITHM)
				cout<<"topkernelproc: partitioning instance ... "<<endl;
				#endif
				dispatch(OFF, ON, OFF,  kvdram, sourcebuffer, vbuffer, vmask, vmask_subp, vmask_p, NAp, NAp, _globalparamsE, globalparamsK, PARTITION_CHKPT[edgebankID], v_chunkid, NAp);
			}
			#endif
			
			// reduce & partition
			#if defined(REDUCEMODULE)
			if(globalparamsK.ENABLE_APPLYUPDATESCOMMAND == ON){ 
				#if defined(_DEBUGMODE_KERNELPRINTS2) & defined(ALLVERTEXISACTIVE_ALGORITHM)
				cout<<"topkernelproc: reducing instance ... "<<endl;
				#endif
				dispatch_reduce( kvdram, sourcebuffer, vbuffer, vmask, vmask_subp, vmask_p, _globalparamsE, globalparamsK, PARTITION_CHKPT[edgebankID], v_chunkid, NAp);
			}
			#endif
			
			#ifdef EDGES_IN_SEPERATE_BUFFER_FROM_KVDRAM
			accumkvstats(kvdram, buffer, globalparamsK);
			globalparamsK.VARS_WORKBATCH += 1;
			#endif 
			#if defined(_DEBUGMODE_KERNELPRINTS2) || defined(_DEBUGMODE_CHECKS2)
			actsutilityobj->clearglobalvars();
			#endif
		}
		
		#ifdef EDGES_IN_SEPERATE_BUFFER_FROM_KVDRAM
		globalparamsK.BASEOFFSETKVS_STATSDRAM += (globalparamsK.SIZE_KVSTATSDRAM / VECTOR_SIZE) / NUM_EDGE_BANKS; 
		#endif
	}
	
	#ifdef EDGES_IN_SEPERATE_BUFFER_FROM_KVDRAM
	globalparamsK.BASEOFFSETKVS_STATSDRAM = FIRST_BASEOFFSETKVS_STATSDRAM;
	commitkvstats(kvdram, buffer, globalparamsK);
	#endif
	increment_graphiteration(kvdram, globalparamsK);
	
	#ifdef _DEBUGMODE_KERNELPRINTS2
	actsutilityobj->printglobalvars();
	#endif 
	#if defined(_DEBUGMODE_KERNELPRINTS3) || defined(_DEBUGMODE_CHECKS2)
	actsutilityobj->clearglobalvars();
	#endif
	return;
}

extern "C" {
void 
	#ifdef SW 
	actsproc:: 
	#endif
topkernelP1(
	uint512_dt * kvdram0,
	uint512_dt * vdram
	){
#ifdef EDGES_IN_SEPERATE_BUFFER_FROM_KVDRAM
#pragma HLS INTERFACE m_axi port = edges0 offset = slave bundle = gmem0
#pragma HLS INTERFACE m_axi port = kvdram0 offset = slave bundle = gmem1
#pragma HLS INTERFACE m_axi port = vdram offset = slave bundle = gmem2
#else 
#pragma HLS INTERFACE m_axi port = kvdram0 offset = slave bundle = gmem0
#pragma HLS INTERFACE m_axi port = vdram offset = slave bundle = gmem1
#endif 

#ifdef EDGES_IN_SEPERATE_BUFFER_FROM_KVDRAM
#pragma HLS INTERFACE s_axilite port = edges0 bundle = control
#endif 
#pragma HLS INTERFACE s_axilite port = kvdram0 bundle = control

#pragma HLS INTERFACE s_axilite port = vdram bundle = control

#pragma HLS INTERFACE s_axilite port=return bundle=control

#ifdef EDGES_IN_SEPERATE_BUFFER_FROM_KVDRAM
#pragma HLS DATA_PACK variable = edges0
#endif 
#pragma HLS DATA_PACK variable = kvdram0
#pragma HLS DATA_PACK variable = vdram

	#if defined(_DEBUGMODE_KERNELPRINTS2) & defined(ALLVERTEXISACTIVE_ALGORITHM)
	cout<<">>> ====================== Light weight ACTS (PR & SYNC) Launched... ====================== "<<endl; 
	#endif
	
	unsigned int GraphIter = GETKEYENTRY(kvdram0[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_ALGORITHMINFO_GRAPHITERATIONID], 0);
	#ifdef _DEBUGMODE_KERNELPRINTS2
	cout<<">>> swkernel::runapp: Iteration: "<<GraphIter<<endl;
	#endif 
	
	/* // run acts
	cout<<"--------------***************------------------------------------ topkernelP1: processing instance 0"<<endl;
	// topkernelproc_embedded(kvdram0);
	topkernelproc_embedded(kvdram2);// CRITICAL REMOVEME.
	exit(EXIT_SUCCESS); // 	
 */
	
	// run acts
	cout<<"--------------***************------------------------------------ topkernelP1: processing instance 0"<<endl;
	topkernelproc_embedded(kvdram0);	
	//  // // CRITICAL REMOVEME.	
	
	/** TOPKERNEL1_BASELOOP1: for(batch_type source_partition=0; source_partition<256; source_partition+=1){ // AUTOMATEME.
		#ifdef _DEBUGMODE_KERNELPRINTS2
		actsutilityobj->print3("### TOPKERNEL1_BASELOOP1:: source_partition", "currentLOP", "NAp", source_partition, currentLOP, NAp); 							
		#endif
		
		bool_type enablereduce = OFF; 
		unsigned int ntravszs = 0;
		rtravstates[0] = gettravstate(ON, kvdram0, globalparamsK, currentLOP, sourcestatsmarker);
		for(unsigned int i = 0; i < 1; i++){ ntravszs += rtravstates[i].size_kvs; }
		if(ntravszs > 0){ enablereduce = ON; } else { enablereduce = OFF; }
		
		// read vertices
		readvdata(enablereduce, vdram, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs, vbuffer0, 0, 0, reducebuffersz, globalparamsV); 
		readvdata(enablereduce, vdram, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs + reducebuffersz, vbuffer0, 8, 0, reducebuffersz, globalparamsV); 
		
		// merge 
		merge1andsavevdata(enablereduce, vdram, vbuffer0, 0, 0, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs); 
		merge1andsavevdata(enablereduce, vdram, vbuffer0, 8, 0, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs + reducebuffersz); 
		
		// update stats
		if(enablereduce == ON){ buffer[source_partition] += 64; } 
		else { buffer[source_partition] += 0; }
	}	 */		
	return;
}
}
extern "C" {
void 
	#ifdef SW 
	actsproc:: 
	#endif
topkernelP2(
	uint512_dt * kvdram0,
	uint512_dt * kvdram1,
	uint512_dt * vdram
	){
#ifdef EDGES_IN_SEPERATE_BUFFER_FROM_KVDRAM
#pragma HLS INTERFACE m_axi port = edges0 offset = slave bundle = gmem0
#pragma HLS INTERFACE m_axi port = kvdram0 offset = slave bundle = gmem1
#pragma HLS INTERFACE m_axi port = edges1 offset = slave bundle = gmem2
#pragma HLS INTERFACE m_axi port = kvdram1 offset = slave bundle = gmem3
#pragma HLS INTERFACE m_axi port = vdram offset = slave bundle = gmem4
#else 
#pragma HLS INTERFACE m_axi port = kvdram0 offset = slave bundle = gmem0
#pragma HLS INTERFACE m_axi port = kvdram1 offset = slave bundle = gmem1
#pragma HLS INTERFACE m_axi port = vdram offset = slave bundle = gmem2
#endif 

#ifdef EDGES_IN_SEPERATE_BUFFER_FROM_KVDRAM
#pragma HLS INTERFACE s_axilite port = edges0 bundle = control
#pragma HLS INTERFACE s_axilite port = edges1 bundle = control
#endif 
#pragma HLS INTERFACE s_axilite port = kvdram0 bundle = control
#pragma HLS INTERFACE s_axilite port = kvdram1 bundle = control

#pragma HLS INTERFACE s_axilite port = vdram bundle = control

#pragma HLS INTERFACE s_axilite port=return bundle=control

#ifdef EDGES_IN_SEPERATE_BUFFER_FROM_KVDRAM
#pragma HLS DATA_PACK variable = edges0
#pragma HLS DATA_PACK variable = edges1
#endif 
#pragma HLS DATA_PACK variable = kvdram0
#pragma HLS DATA_PACK variable = kvdram1
#pragma HLS DATA_PACK variable = vdram

	#if defined(_DEBUGMODE_KERNELPRINTS2) & defined(ALLVERTEXISACTIVE_ALGORITHM)
	cout<<">>> ====================== Light weight ACTS (PR & SYNC) Launched... ====================== "<<endl; 
	#endif
	
	unsigned int GraphIter = GETKEYENTRY(kvdram0[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_ALGORITHMINFO_GRAPHITERATIONID], 0);
	#ifdef _DEBUGMODE_KERNELPRINTS2
	cout<<">>> swkernel::runapp: Iteration: "<<GraphIter<<endl;
	#endif 
	
	/* // run acts
	cout<<"--------------***************------------------------------------ topkernelP2: processing instance 0"<<endl;
	// topkernelproc_embedded(kvdram0);
	topkernelproc_embedded(kvdram2);// CRITICAL REMOVEME.
	exit(EXIT_SUCCESS); // 	
	cout<<"--------------***************------------------------------------ topkernelP2: processing instance 1"<<endl;
	// topkernelproc_embedded(kvdram1);
	topkernelproc_embedded(kvdram2);// CRITICAL REMOVEME.
	exit(EXIT_SUCCESS); // 	
 */
	
	// run acts
	cout<<"--------------***************------------------------------------ topkernelP2: processing instance 0"<<endl;
	topkernelproc_embedded(kvdram0);	
	//  // // CRITICAL REMOVEME.	
	cout<<"--------------***************------------------------------------ topkernelP2: processing instance 1"<<endl;
	topkernelproc_embedded(kvdram1);	
	//  // // CRITICAL REMOVEME.	
	
	/** TOPKERNEL2_BASELOOP1: for(batch_type source_partition=0; source_partition<256; source_partition+=1){ // AUTOMATEME.
		#ifdef _DEBUGMODE_KERNELPRINTS2
		actsutilityobj->print3("### TOPKERNEL2_BASELOOP1:: source_partition", "currentLOP", "NAp", source_partition, currentLOP, NAp); 							
		#endif
		
		bool_type enablereduce = OFF; 
		unsigned int ntravszs = 0;
		rtravstates[0] = gettravstate(ON, kvdram0, globalparamsK, currentLOP, sourcestatsmarker);
		rtravstates[1] = gettravstate(ON, kvdram1, globalparamsK, currentLOP, sourcestatsmarker);
		for(unsigned int i = 0; i < 2; i++){ ntravszs += rtravstates[i].size_kvs; }
		if(ntravszs > 0){ enablereduce = ON; } else { enablereduce = OFF; }
		
		// read vertices
		readvdata(enablereduce, vdram, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs, vbuffer0, 0, 0, reducebuffersz, globalparamsV); 
		readvdata(enablereduce, vdram, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs + reducebuffersz, vbuffer0, 8, 0, reducebuffersz, globalparamsV); 
		readvdata(enablereduce, vdram, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs, vbuffer1, 0, 0, reducebuffersz, globalparamsV); 
		readvdata(enablereduce, vdram, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs + reducebuffersz, vbuffer1, 8, 0, reducebuffersz, globalparamsV); 
		
		// merge 
		merge2andsavevdata(enablereduce, vdram, vbuffer0,vbuffer1, 0, 0, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs); 
		merge2andsavevdata(enablereduce, vdram, vbuffer0,vbuffer1, 8, 0, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs + reducebuffersz); 
		
		// update stats
		if(enablereduce == ON){ buffer[source_partition] += 64; } 
		else { buffer[source_partition] += 0; }
	}	 */		
	return;
}
}
extern "C" {
void 
	#ifdef SW 
	actsproc:: 
	#endif
topkernelP3(
	uint512_dt * kvdram0,
	uint512_dt * kvdram1,
	uint512_dt * kvdram2,
	uint512_dt * vdram
	){
#ifdef EDGES_IN_SEPERATE_BUFFER_FROM_KVDRAM
#pragma HLS INTERFACE m_axi port = edges0 offset = slave bundle = gmem0
#pragma HLS INTERFACE m_axi port = kvdram0 offset = slave bundle = gmem1
#pragma HLS INTERFACE m_axi port = edges1 offset = slave bundle = gmem2
#pragma HLS INTERFACE m_axi port = kvdram1 offset = slave bundle = gmem3
#pragma HLS INTERFACE m_axi port = edges2 offset = slave bundle = gmem4
#pragma HLS INTERFACE m_axi port = kvdram2 offset = slave bundle = gmem5
#pragma HLS INTERFACE m_axi port = vdram offset = slave bundle = gmem6
#else 
#pragma HLS INTERFACE m_axi port = kvdram0 offset = slave bundle = gmem0
#pragma HLS INTERFACE m_axi port = kvdram1 offset = slave bundle = gmem1
#pragma HLS INTERFACE m_axi port = kvdram2 offset = slave bundle = gmem2
#pragma HLS INTERFACE m_axi port = vdram offset = slave bundle = gmem3
#endif 

#ifdef EDGES_IN_SEPERATE_BUFFER_FROM_KVDRAM
#pragma HLS INTERFACE s_axilite port = edges0 bundle = control
#pragma HLS INTERFACE s_axilite port = edges1 bundle = control
#pragma HLS INTERFACE s_axilite port = edges2 bundle = control
#endif 
#pragma HLS INTERFACE s_axilite port = kvdram0 bundle = control
#pragma HLS INTERFACE s_axilite port = kvdram1 bundle = control
#pragma HLS INTERFACE s_axilite port = kvdram2 bundle = control

#pragma HLS INTERFACE s_axilite port = vdram bundle = control

#pragma HLS INTERFACE s_axilite port=return bundle=control

#ifdef EDGES_IN_SEPERATE_BUFFER_FROM_KVDRAM
#pragma HLS DATA_PACK variable = edges0
#pragma HLS DATA_PACK variable = edges1
#pragma HLS DATA_PACK variable = edges2
#endif 
#pragma HLS DATA_PACK variable = kvdram0
#pragma HLS DATA_PACK variable = kvdram1
#pragma HLS DATA_PACK variable = kvdram2
#pragma HLS DATA_PACK variable = vdram

	#if defined(_DEBUGMODE_KERNELPRINTS2) & defined(ALLVERTEXISACTIVE_ALGORITHM)
	cout<<">>> ====================== Light weight ACTS (PR & SYNC) Launched... ====================== "<<endl; 
	#endif
	
	unsigned int GraphIter = GETKEYENTRY(kvdram0[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_ALGORITHMINFO_GRAPHITERATIONID], 0);
	#ifdef _DEBUGMODE_KERNELPRINTS2
	cout<<">>> swkernel::runapp: Iteration: "<<GraphIter<<endl;
	#endif 
	
	/* // run acts
	cout<<"--------------***************------------------------------------ topkernelP3: processing instance 0"<<endl;
	// topkernelproc_embedded(kvdram0);
	topkernelproc_embedded(kvdram2);// CRITICAL REMOVEME.
	exit(EXIT_SUCCESS); // 	
	cout<<"--------------***************------------------------------------ topkernelP3: processing instance 1"<<endl;
	// topkernelproc_embedded(kvdram1);
	topkernelproc_embedded(kvdram2);// CRITICAL REMOVEME.
	exit(EXIT_SUCCESS); // 	
	cout<<"--------------***************------------------------------------ topkernelP3: processing instance 2"<<endl;
	// topkernelproc_embedded(kvdram2);
	topkernelproc_embedded(kvdram2);// CRITICAL REMOVEME.
	exit(EXIT_SUCCESS); // 	
 */
	
	// run acts
	cout<<"--------------***************------------------------------------ topkernelP3: processing instance 0"<<endl;
	topkernelproc_embedded(kvdram0);	
	//  // // CRITICAL REMOVEME.	
	cout<<"--------------***************------------------------------------ topkernelP3: processing instance 1"<<endl;
	topkernelproc_embedded(kvdram1);	
	//  // // CRITICAL REMOVEME.	
	cout<<"--------------***************------------------------------------ topkernelP3: processing instance 2"<<endl;
	topkernelproc_embedded(kvdram2);	
	// topkernelproc_embedded(kvdram2);exit(EXIT_SUCCESS); // // CRITICAL REMOVEME.	
	
	/** TOPKERNEL3_BASELOOP1: for(batch_type source_partition=0; source_partition<256; source_partition+=1){ // AUTOMATEME.
		#ifdef _DEBUGMODE_KERNELPRINTS2
		actsutilityobj->print3("### TOPKERNEL3_BASELOOP1:: source_partition", "currentLOP", "NAp", source_partition, currentLOP, NAp); 							
		#endif
		
		bool_type enablereduce = OFF; 
		unsigned int ntravszs = 0;
		rtravstates[0] = gettravstate(ON, kvdram0, globalparamsK, currentLOP, sourcestatsmarker);
		rtravstates[1] = gettravstate(ON, kvdram1, globalparamsK, currentLOP, sourcestatsmarker);
		rtravstates[2] = gettravstate(ON, kvdram2, globalparamsK, currentLOP, sourcestatsmarker);
		for(unsigned int i = 0; i < 3; i++){ ntravszs += rtravstates[i].size_kvs; }
		if(ntravszs > 0){ enablereduce = ON; } else { enablereduce = OFF; }
		
		// read vertices
		readvdata(enablereduce, vdram, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs, vbuffer0, 0, 0, reducebuffersz, globalparamsV); 
		readvdata(enablereduce, vdram, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs + reducebuffersz, vbuffer0, 8, 0, reducebuffersz, globalparamsV); 
		readvdata(enablereduce, vdram, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs, vbuffer1, 0, 0, reducebuffersz, globalparamsV); 
		readvdata(enablereduce, vdram, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs + reducebuffersz, vbuffer1, 8, 0, reducebuffersz, globalparamsV); 
		readvdata(enablereduce, vdram, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs, vbuffer2, 0, 0, reducebuffersz, globalparamsV); 
		readvdata(enablereduce, vdram, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs + reducebuffersz, vbuffer2, 8, 0, reducebuffersz, globalparamsV); 
		
		// merge 
		merge3andsavevdata(enablereduce, vdram, vbuffer0,vbuffer1,vbuffer2, 0, 0, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs); 
		merge3andsavevdata(enablereduce, vdram, vbuffer0,vbuffer1,vbuffer2, 8, 0, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs + reducebuffersz); 
		
		// update stats
		if(enablereduce == ON){ buffer[source_partition] += 64; } 
		else { buffer[source_partition] += 0; }
	}	 */		
	return;
}
}
extern "C" {
void 
	#ifdef SW 
	actsproc:: 
	#endif
topkernelP4(
	uint512_dt * kvdram0,
	uint512_dt * kvdram1,
	uint512_dt * kvdram2,
	uint512_dt * kvdram3,
	uint512_dt * vdram
	){
#ifdef EDGES_IN_SEPERATE_BUFFER_FROM_KVDRAM
#pragma HLS INTERFACE m_axi port = edges0 offset = slave bundle = gmem0
#pragma HLS INTERFACE m_axi port = kvdram0 offset = slave bundle = gmem1
#pragma HLS INTERFACE m_axi port = edges1 offset = slave bundle = gmem2
#pragma HLS INTERFACE m_axi port = kvdram1 offset = slave bundle = gmem3
#pragma HLS INTERFACE m_axi port = edges2 offset = slave bundle = gmem4
#pragma HLS INTERFACE m_axi port = kvdram2 offset = slave bundle = gmem5
#pragma HLS INTERFACE m_axi port = edges3 offset = slave bundle = gmem6
#pragma HLS INTERFACE m_axi port = kvdram3 offset = slave bundle = gmem7
#pragma HLS INTERFACE m_axi port = vdram offset = slave bundle = gmem8
#else 
#pragma HLS INTERFACE m_axi port = kvdram0 offset = slave bundle = gmem0
#pragma HLS INTERFACE m_axi port = kvdram1 offset = slave bundle = gmem1
#pragma HLS INTERFACE m_axi port = kvdram2 offset = slave bundle = gmem2
#pragma HLS INTERFACE m_axi port = kvdram3 offset = slave bundle = gmem3
#pragma HLS INTERFACE m_axi port = vdram offset = slave bundle = gmem4
#endif 

#ifdef EDGES_IN_SEPERATE_BUFFER_FROM_KVDRAM
#pragma HLS INTERFACE s_axilite port = edges0 bundle = control
#pragma HLS INTERFACE s_axilite port = edges1 bundle = control
#pragma HLS INTERFACE s_axilite port = edges2 bundle = control
#pragma HLS INTERFACE s_axilite port = edges3 bundle = control
#endif 
#pragma HLS INTERFACE s_axilite port = kvdram0 bundle = control
#pragma HLS INTERFACE s_axilite port = kvdram1 bundle = control
#pragma HLS INTERFACE s_axilite port = kvdram2 bundle = control
#pragma HLS INTERFACE s_axilite port = kvdram3 bundle = control

#pragma HLS INTERFACE s_axilite port = vdram bundle = control

#pragma HLS INTERFACE s_axilite port=return bundle=control

#ifdef EDGES_IN_SEPERATE_BUFFER_FROM_KVDRAM
#pragma HLS DATA_PACK variable = edges0
#pragma HLS DATA_PACK variable = edges1
#pragma HLS DATA_PACK variable = edges2
#pragma HLS DATA_PACK variable = edges3
#endif 
#pragma HLS DATA_PACK variable = kvdram0
#pragma HLS DATA_PACK variable = kvdram1
#pragma HLS DATA_PACK variable = kvdram2
#pragma HLS DATA_PACK variable = kvdram3
#pragma HLS DATA_PACK variable = vdram

	#if defined(_DEBUGMODE_KERNELPRINTS2) & defined(ALLVERTEXISACTIVE_ALGORITHM)
	cout<<">>> ====================== Light weight ACTS (PR & SYNC) Launched... ====================== "<<endl; 
	#endif
	
	unsigned int GraphIter = GETKEYENTRY(kvdram0[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_ALGORITHMINFO_GRAPHITERATIONID], 0);
	#ifdef _DEBUGMODE_KERNELPRINTS2
	cout<<">>> swkernel::runapp: Iteration: "<<GraphIter<<endl;
	#endif 
	
	/* // run acts
	cout<<"--------------***************------------------------------------ topkernelP4: processing instance 0"<<endl;
	// topkernelproc_embedded(kvdram0);
	topkernelproc_embedded(kvdram2);// CRITICAL REMOVEME.
	exit(EXIT_SUCCESS); // 	
	cout<<"--------------***************------------------------------------ topkernelP4: processing instance 1"<<endl;
	// topkernelproc_embedded(kvdram1);
	topkernelproc_embedded(kvdram2);// CRITICAL REMOVEME.
	exit(EXIT_SUCCESS); // 	
	cout<<"--------------***************------------------------------------ topkernelP4: processing instance 2"<<endl;
	// topkernelproc_embedded(kvdram2);
	topkernelproc_embedded(kvdram2);// CRITICAL REMOVEME.
	exit(EXIT_SUCCESS); // 	
	cout<<"--------------***************------------------------------------ topkernelP4: processing instance 3"<<endl;
	// topkernelproc_embedded(kvdram3);
	topkernelproc_embedded(kvdram2);// CRITICAL REMOVEME.
	exit(EXIT_SUCCESS); // 	
 */
	
	// run acts
	cout<<"--------------***************------------------------------------ topkernelP4: processing instance 0"<<endl;
	topkernelproc_embedded(kvdram0);	
	//  // // CRITICAL REMOVEME.	
	cout<<"--------------***************------------------------------------ topkernelP4: processing instance 1"<<endl;
	topkernelproc_embedded(kvdram1);	
	//  // // CRITICAL REMOVEME.	
	cout<<"--------------***************------------------------------------ topkernelP4: processing instance 2"<<endl;
	topkernelproc_embedded(kvdram2);	
	// topkernelproc_embedded(kvdram2);exit(EXIT_SUCCESS); // // CRITICAL REMOVEME.	
	cout<<"--------------***************------------------------------------ topkernelP4: processing instance 3"<<endl;
	topkernelproc_embedded(kvdram3);	
	//  // // CRITICAL REMOVEME.	
	
	/** TOPKERNEL4_BASELOOP1: for(batch_type source_partition=0; source_partition<256; source_partition+=1){ // AUTOMATEME.
		#ifdef _DEBUGMODE_KERNELPRINTS2
		actsutilityobj->print3("### TOPKERNEL4_BASELOOP1:: source_partition", "currentLOP", "NAp", source_partition, currentLOP, NAp); 							
		#endif
		
		bool_type enablereduce = OFF; 
		unsigned int ntravszs = 0;
		rtravstates[0] = gettravstate(ON, kvdram0, globalparamsK, currentLOP, sourcestatsmarker);
		rtravstates[1] = gettravstate(ON, kvdram1, globalparamsK, currentLOP, sourcestatsmarker);
		rtravstates[2] = gettravstate(ON, kvdram2, globalparamsK, currentLOP, sourcestatsmarker);
		rtravstates[3] = gettravstate(ON, kvdram3, globalparamsK, currentLOP, sourcestatsmarker);
		for(unsigned int i = 0; i < 4; i++){ ntravszs += rtravstates[i].size_kvs; }
		if(ntravszs > 0){ enablereduce = ON; } else { enablereduce = OFF; }
		
		// read vertices
		readvdata(enablereduce, vdram, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs, vbuffer0, 0, 0, reducebuffersz, globalparamsV); 
		readvdata(enablereduce, vdram, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs + reducebuffersz, vbuffer0, 8, 0, reducebuffersz, globalparamsV); 
		readvdata(enablereduce, vdram, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs, vbuffer1, 0, 0, reducebuffersz, globalparamsV); 
		readvdata(enablereduce, vdram, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs + reducebuffersz, vbuffer1, 8, 0, reducebuffersz, globalparamsV); 
		readvdata(enablereduce, vdram, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs, vbuffer2, 0, 0, reducebuffersz, globalparamsV); 
		readvdata(enablereduce, vdram, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs + reducebuffersz, vbuffer2, 8, 0, reducebuffersz, globalparamsV); 
		readvdata(enablereduce, vdram, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs, vbuffer3, 0, 0, reducebuffersz, globalparamsV); 
		readvdata(enablereduce, vdram, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs + reducebuffersz, vbuffer3, 8, 0, reducebuffersz, globalparamsV); 
		
		// merge 
		merge4andsavevdata(enablereduce, vdram, vbuffer0,vbuffer1,vbuffer2,vbuffer3, 0, 0, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs); 
		merge4andsavevdata(enablereduce, vdram, vbuffer0,vbuffer1,vbuffer2,vbuffer3, 8, 0, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs + reducebuffersz); 
		
		// update stats
		if(enablereduce == ON){ buffer[source_partition] += 64; } 
		else { buffer[source_partition] += 0; }
	}	 */		
	return;
}
}
extern "C" {
void 
	#ifdef SW 
	actsproc:: 
	#endif
topkernelP5(
	uint512_dt * kvdram0,
	uint512_dt * kvdram1,
	uint512_dt * kvdram2,
	uint512_dt * kvdram3,
	uint512_dt * kvdram4,
	uint512_dt * vdram
	){
#ifdef EDGES_IN_SEPERATE_BUFFER_FROM_KVDRAM
#pragma HLS INTERFACE m_axi port = edges0 offset = slave bundle = gmem0
#pragma HLS INTERFACE m_axi port = kvdram0 offset = slave bundle = gmem1
#pragma HLS INTERFACE m_axi port = edges1 offset = slave bundle = gmem2
#pragma HLS INTERFACE m_axi port = kvdram1 offset = slave bundle = gmem3
#pragma HLS INTERFACE m_axi port = edges2 offset = slave bundle = gmem4
#pragma HLS INTERFACE m_axi port = kvdram2 offset = slave bundle = gmem5
#pragma HLS INTERFACE m_axi port = edges3 offset = slave bundle = gmem6
#pragma HLS INTERFACE m_axi port = kvdram3 offset = slave bundle = gmem7
#pragma HLS INTERFACE m_axi port = edges4 offset = slave bundle = gmem8
#pragma HLS INTERFACE m_axi port = kvdram4 offset = slave bundle = gmem9
#pragma HLS INTERFACE m_axi port = vdram offset = slave bundle = gmem10
#else 
#pragma HLS INTERFACE m_axi port = kvdram0 offset = slave bundle = gmem0
#pragma HLS INTERFACE m_axi port = kvdram1 offset = slave bundle = gmem1
#pragma HLS INTERFACE m_axi port = kvdram2 offset = slave bundle = gmem2
#pragma HLS INTERFACE m_axi port = kvdram3 offset = slave bundle = gmem3
#pragma HLS INTERFACE m_axi port = kvdram4 offset = slave bundle = gmem4
#pragma HLS INTERFACE m_axi port = vdram offset = slave bundle = gmem5
#endif 

#ifdef EDGES_IN_SEPERATE_BUFFER_FROM_KVDRAM
#pragma HLS INTERFACE s_axilite port = edges0 bundle = control
#pragma HLS INTERFACE s_axilite port = edges1 bundle = control
#pragma HLS INTERFACE s_axilite port = edges2 bundle = control
#pragma HLS INTERFACE s_axilite port = edges3 bundle = control
#pragma HLS INTERFACE s_axilite port = edges4 bundle = control
#endif 
#pragma HLS INTERFACE s_axilite port = kvdram0 bundle = control
#pragma HLS INTERFACE s_axilite port = kvdram1 bundle = control
#pragma HLS INTERFACE s_axilite port = kvdram2 bundle = control
#pragma HLS INTERFACE s_axilite port = kvdram3 bundle = control
#pragma HLS INTERFACE s_axilite port = kvdram4 bundle = control

#pragma HLS INTERFACE s_axilite port = vdram bundle = control

#pragma HLS INTERFACE s_axilite port=return bundle=control

#ifdef EDGES_IN_SEPERATE_BUFFER_FROM_KVDRAM
#pragma HLS DATA_PACK variable = edges0
#pragma HLS DATA_PACK variable = edges1
#pragma HLS DATA_PACK variable = edges2
#pragma HLS DATA_PACK variable = edges3
#pragma HLS DATA_PACK variable = edges4
#endif 
#pragma HLS DATA_PACK variable = kvdram0
#pragma HLS DATA_PACK variable = kvdram1
#pragma HLS DATA_PACK variable = kvdram2
#pragma HLS DATA_PACK variable = kvdram3
#pragma HLS DATA_PACK variable = kvdram4
#pragma HLS DATA_PACK variable = vdram

	#if defined(_DEBUGMODE_KERNELPRINTS2) & defined(ALLVERTEXISACTIVE_ALGORITHM)
	cout<<">>> ====================== Light weight ACTS (PR & SYNC) Launched... ====================== "<<endl; 
	#endif
	
	unsigned int GraphIter = GETKEYENTRY(kvdram0[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_ALGORITHMINFO_GRAPHITERATIONID], 0);
	#ifdef _DEBUGMODE_KERNELPRINTS2
	cout<<">>> swkernel::runapp: Iteration: "<<GraphIter<<endl;
	#endif 
	
	/* // run acts
	cout<<"--------------***************------------------------------------ topkernelP5: processing instance 0"<<endl;
	// topkernelproc_embedded(kvdram0);
	topkernelproc_embedded(kvdram2);// CRITICAL REMOVEME.
	exit(EXIT_SUCCESS); // 	
	cout<<"--------------***************------------------------------------ topkernelP5: processing instance 1"<<endl;
	// topkernelproc_embedded(kvdram1);
	topkernelproc_embedded(kvdram2);// CRITICAL REMOVEME.
	exit(EXIT_SUCCESS); // 	
	cout<<"--------------***************------------------------------------ topkernelP5: processing instance 2"<<endl;
	// topkernelproc_embedded(kvdram2);
	topkernelproc_embedded(kvdram2);// CRITICAL REMOVEME.
	exit(EXIT_SUCCESS); // 	
	cout<<"--------------***************------------------------------------ topkernelP5: processing instance 3"<<endl;
	// topkernelproc_embedded(kvdram3);
	topkernelproc_embedded(kvdram2);// CRITICAL REMOVEME.
	exit(EXIT_SUCCESS); // 	
	cout<<"--------------***************------------------------------------ topkernelP5: processing instance 4"<<endl;
	// topkernelproc_embedded(kvdram4);
	topkernelproc_embedded(kvdram2);// CRITICAL REMOVEME.
	exit(EXIT_SUCCESS); // 	
 */
	
	// run acts
	cout<<"--------------***************------------------------------------ topkernelP5: processing instance 0"<<endl;
	topkernelproc_embedded(kvdram0);	
	//  // // CRITICAL REMOVEME.	
	cout<<"--------------***************------------------------------------ topkernelP5: processing instance 1"<<endl;
	topkernelproc_embedded(kvdram1);	
	//  // // CRITICAL REMOVEME.	
	cout<<"--------------***************------------------------------------ topkernelP5: processing instance 2"<<endl;
	topkernelproc_embedded(kvdram2);	
	// topkernelproc_embedded(kvdram2);exit(EXIT_SUCCESS); // // CRITICAL REMOVEME.	
	cout<<"--------------***************------------------------------------ topkernelP5: processing instance 3"<<endl;
	topkernelproc_embedded(kvdram3);	
	//  // // CRITICAL REMOVEME.	
	cout<<"--------------***************------------------------------------ topkernelP5: processing instance 4"<<endl;
	topkernelproc_embedded(kvdram4);	
	//  // // CRITICAL REMOVEME.	
	
	/** TOPKERNEL5_BASELOOP1: for(batch_type source_partition=0; source_partition<256; source_partition+=1){ // AUTOMATEME.
		#ifdef _DEBUGMODE_KERNELPRINTS2
		actsutilityobj->print3("### TOPKERNEL5_BASELOOP1:: source_partition", "currentLOP", "NAp", source_partition, currentLOP, NAp); 							
		#endif
		
		bool_type enablereduce = OFF; 
		unsigned int ntravszs = 0;
		rtravstates[0] = gettravstate(ON, kvdram0, globalparamsK, currentLOP, sourcestatsmarker);
		rtravstates[1] = gettravstate(ON, kvdram1, globalparamsK, currentLOP, sourcestatsmarker);
		rtravstates[2] = gettravstate(ON, kvdram2, globalparamsK, currentLOP, sourcestatsmarker);
		rtravstates[3] = gettravstate(ON, kvdram3, globalparamsK, currentLOP, sourcestatsmarker);
		rtravstates[4] = gettravstate(ON, kvdram4, globalparamsK, currentLOP, sourcestatsmarker);
		for(unsigned int i = 0; i < 5; i++){ ntravszs += rtravstates[i].size_kvs; }
		if(ntravszs > 0){ enablereduce = ON; } else { enablereduce = OFF; }
		
		// read vertices
		readvdata(enablereduce, vdram, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs, vbuffer0, 0, 0, reducebuffersz, globalparamsV); 
		readvdata(enablereduce, vdram, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs + reducebuffersz, vbuffer0, 8, 0, reducebuffersz, globalparamsV); 
		readvdata(enablereduce, vdram, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs, vbuffer1, 0, 0, reducebuffersz, globalparamsV); 
		readvdata(enablereduce, vdram, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs + reducebuffersz, vbuffer1, 8, 0, reducebuffersz, globalparamsV); 
		readvdata(enablereduce, vdram, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs, vbuffer2, 0, 0, reducebuffersz, globalparamsV); 
		readvdata(enablereduce, vdram, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs + reducebuffersz, vbuffer2, 8, 0, reducebuffersz, globalparamsV); 
		readvdata(enablereduce, vdram, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs, vbuffer3, 0, 0, reducebuffersz, globalparamsV); 
		readvdata(enablereduce, vdram, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs + reducebuffersz, vbuffer3, 8, 0, reducebuffersz, globalparamsV); 
		readvdata(enablereduce, vdram, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs, vbuffer4, 0, 0, reducebuffersz, globalparamsV); 
		readvdata(enablereduce, vdram, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs + reducebuffersz, vbuffer4, 8, 0, reducebuffersz, globalparamsV); 
		
		// merge 
		merge5andsavevdata(enablereduce, vdram, vbuffer0,vbuffer1,vbuffer2,vbuffer3,vbuffer4, 0, 0, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs); 
		merge5andsavevdata(enablereduce, vdram, vbuffer0,vbuffer1,vbuffer2,vbuffer3,vbuffer4, 8, 0, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs + reducebuffersz); 
		
		// update stats
		if(enablereduce == ON){ buffer[source_partition] += 64; } 
		else { buffer[source_partition] += 0; }
	}	 */		
	return;
}
}
extern "C" {
void 
	#ifdef SW 
	actsproc:: 
	#endif
topkernelP6(
	uint512_dt * kvdram0,
	uint512_dt * kvdram1,
	uint512_dt * kvdram2,
	uint512_dt * kvdram3,
	uint512_dt * kvdram4,
	uint512_dt * kvdram5,
	uint512_dt * vdram
	){
#ifdef EDGES_IN_SEPERATE_BUFFER_FROM_KVDRAM
#pragma HLS INTERFACE m_axi port = edges0 offset = slave bundle = gmem0
#pragma HLS INTERFACE m_axi port = kvdram0 offset = slave bundle = gmem1
#pragma HLS INTERFACE m_axi port = edges1 offset = slave bundle = gmem2
#pragma HLS INTERFACE m_axi port = kvdram1 offset = slave bundle = gmem3
#pragma HLS INTERFACE m_axi port = edges2 offset = slave bundle = gmem4
#pragma HLS INTERFACE m_axi port = kvdram2 offset = slave bundle = gmem5
#pragma HLS INTERFACE m_axi port = edges3 offset = slave bundle = gmem6
#pragma HLS INTERFACE m_axi port = kvdram3 offset = slave bundle = gmem7
#pragma HLS INTERFACE m_axi port = edges4 offset = slave bundle = gmem8
#pragma HLS INTERFACE m_axi port = kvdram4 offset = slave bundle = gmem9
#pragma HLS INTERFACE m_axi port = edges5 offset = slave bundle = gmem10
#pragma HLS INTERFACE m_axi port = kvdram5 offset = slave bundle = gmem11
#pragma HLS INTERFACE m_axi port = vdram offset = slave bundle = gmem12
#else 
#pragma HLS INTERFACE m_axi port = kvdram0 offset = slave bundle = gmem0
#pragma HLS INTERFACE m_axi port = kvdram1 offset = slave bundle = gmem1
#pragma HLS INTERFACE m_axi port = kvdram2 offset = slave bundle = gmem2
#pragma HLS INTERFACE m_axi port = kvdram3 offset = slave bundle = gmem3
#pragma HLS INTERFACE m_axi port = kvdram4 offset = slave bundle = gmem4
#pragma HLS INTERFACE m_axi port = kvdram5 offset = slave bundle = gmem5
#pragma HLS INTERFACE m_axi port = vdram offset = slave bundle = gmem6
#endif 

#ifdef EDGES_IN_SEPERATE_BUFFER_FROM_KVDRAM
#pragma HLS INTERFACE s_axilite port = edges0 bundle = control
#pragma HLS INTERFACE s_axilite port = edges1 bundle = control
#pragma HLS INTERFACE s_axilite port = edges2 bundle = control
#pragma HLS INTERFACE s_axilite port = edges3 bundle = control
#pragma HLS INTERFACE s_axilite port = edges4 bundle = control
#pragma HLS INTERFACE s_axilite port = edges5 bundle = control
#endif 
#pragma HLS INTERFACE s_axilite port = kvdram0 bundle = control
#pragma HLS INTERFACE s_axilite port = kvdram1 bundle = control
#pragma HLS INTERFACE s_axilite port = kvdram2 bundle = control
#pragma HLS INTERFACE s_axilite port = kvdram3 bundle = control
#pragma HLS INTERFACE s_axilite port = kvdram4 bundle = control
#pragma HLS INTERFACE s_axilite port = kvdram5 bundle = control

#pragma HLS INTERFACE s_axilite port = vdram bundle = control

#pragma HLS INTERFACE s_axilite port=return bundle=control

#ifdef EDGES_IN_SEPERATE_BUFFER_FROM_KVDRAM
#pragma HLS DATA_PACK variable = edges0
#pragma HLS DATA_PACK variable = edges1
#pragma HLS DATA_PACK variable = edges2
#pragma HLS DATA_PACK variable = edges3
#pragma HLS DATA_PACK variable = edges4
#pragma HLS DATA_PACK variable = edges5
#endif 
#pragma HLS DATA_PACK variable = kvdram0
#pragma HLS DATA_PACK variable = kvdram1
#pragma HLS DATA_PACK variable = kvdram2
#pragma HLS DATA_PACK variable = kvdram3
#pragma HLS DATA_PACK variable = kvdram4
#pragma HLS DATA_PACK variable = kvdram5
#pragma HLS DATA_PACK variable = vdram

	#if defined(_DEBUGMODE_KERNELPRINTS2) & defined(ALLVERTEXISACTIVE_ALGORITHM)
	cout<<">>> ====================== Light weight ACTS (PR & SYNC) Launched... ====================== "<<endl; 
	#endif
	
	unsigned int GraphIter = GETKEYENTRY(kvdram0[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_ALGORITHMINFO_GRAPHITERATIONID], 0);
	#ifdef _DEBUGMODE_KERNELPRINTS2
	cout<<">>> swkernel::runapp: Iteration: "<<GraphIter<<endl;
	#endif 
	
	/* // run acts
	cout<<"--------------***************------------------------------------ topkernelP6: processing instance 0"<<endl;
	// topkernelproc_embedded(kvdram0);
	topkernelproc_embedded(kvdram2);// CRITICAL REMOVEME.
	exit(EXIT_SUCCESS); // 	
	cout<<"--------------***************------------------------------------ topkernelP6: processing instance 1"<<endl;
	// topkernelproc_embedded(kvdram1);
	topkernelproc_embedded(kvdram2);// CRITICAL REMOVEME.
	exit(EXIT_SUCCESS); // 	
	cout<<"--------------***************------------------------------------ topkernelP6: processing instance 2"<<endl;
	// topkernelproc_embedded(kvdram2);
	topkernelproc_embedded(kvdram2);// CRITICAL REMOVEME.
	exit(EXIT_SUCCESS); // 	
	cout<<"--------------***************------------------------------------ topkernelP6: processing instance 3"<<endl;
	// topkernelproc_embedded(kvdram3);
	topkernelproc_embedded(kvdram2);// CRITICAL REMOVEME.
	exit(EXIT_SUCCESS); // 	
	cout<<"--------------***************------------------------------------ topkernelP6: processing instance 4"<<endl;
	// topkernelproc_embedded(kvdram4);
	topkernelproc_embedded(kvdram2);// CRITICAL REMOVEME.
	exit(EXIT_SUCCESS); // 	
	cout<<"--------------***************------------------------------------ topkernelP6: processing instance 5"<<endl;
	// topkernelproc_embedded(kvdram5);
	topkernelproc_embedded(kvdram2);// CRITICAL REMOVEME.
	exit(EXIT_SUCCESS); // 	
 */
	
	// run acts
	cout<<"--------------***************------------------------------------ topkernelP6: processing instance 0"<<endl;
	topkernelproc_embedded(kvdram0);	
	//  // // CRITICAL REMOVEME.	
	cout<<"--------------***************------------------------------------ topkernelP6: processing instance 1"<<endl;
	topkernelproc_embedded(kvdram1);	
	//  // // CRITICAL REMOVEME.	
	cout<<"--------------***************------------------------------------ topkernelP6: processing instance 2"<<endl;
	topkernelproc_embedded(kvdram2);	
	// topkernelproc_embedded(kvdram2);exit(EXIT_SUCCESS); // // CRITICAL REMOVEME.	
	cout<<"--------------***************------------------------------------ topkernelP6: processing instance 3"<<endl;
	topkernelproc_embedded(kvdram3);	
	//  // // CRITICAL REMOVEME.	
	cout<<"--------------***************------------------------------------ topkernelP6: processing instance 4"<<endl;
	topkernelproc_embedded(kvdram4);	
	//  // // CRITICAL REMOVEME.	
	cout<<"--------------***************------------------------------------ topkernelP6: processing instance 5"<<endl;
	topkernelproc_embedded(kvdram5);	
	//  // // CRITICAL REMOVEME.	
	
	/** TOPKERNEL6_BASELOOP1: for(batch_type source_partition=0; source_partition<256; source_partition+=1){ // AUTOMATEME.
		#ifdef _DEBUGMODE_KERNELPRINTS2
		actsutilityobj->print3("### TOPKERNEL6_BASELOOP1:: source_partition", "currentLOP", "NAp", source_partition, currentLOP, NAp); 							
		#endif
		
		bool_type enablereduce = OFF; 
		unsigned int ntravszs = 0;
		rtravstates[0] = gettravstate(ON, kvdram0, globalparamsK, currentLOP, sourcestatsmarker);
		rtravstates[1] = gettravstate(ON, kvdram1, globalparamsK, currentLOP, sourcestatsmarker);
		rtravstates[2] = gettravstate(ON, kvdram2, globalparamsK, currentLOP, sourcestatsmarker);
		rtravstates[3] = gettravstate(ON, kvdram3, globalparamsK, currentLOP, sourcestatsmarker);
		rtravstates[4] = gettravstate(ON, kvdram4, globalparamsK, currentLOP, sourcestatsmarker);
		rtravstates[5] = gettravstate(ON, kvdram5, globalparamsK, currentLOP, sourcestatsmarker);
		for(unsigned int i = 0; i < 6; i++){ ntravszs += rtravstates[i].size_kvs; }
		if(ntravszs > 0){ enablereduce = ON; } else { enablereduce = OFF; }
		
		// read vertices
		readvdata(enablereduce, vdram, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs, vbuffer0, 0, 0, reducebuffersz, globalparamsV); 
		readvdata(enablereduce, vdram, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs + reducebuffersz, vbuffer0, 8, 0, reducebuffersz, globalparamsV); 
		readvdata(enablereduce, vdram, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs, vbuffer1, 0, 0, reducebuffersz, globalparamsV); 
		readvdata(enablereduce, vdram, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs + reducebuffersz, vbuffer1, 8, 0, reducebuffersz, globalparamsV); 
		readvdata(enablereduce, vdram, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs, vbuffer2, 0, 0, reducebuffersz, globalparamsV); 
		readvdata(enablereduce, vdram, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs + reducebuffersz, vbuffer2, 8, 0, reducebuffersz, globalparamsV); 
		readvdata(enablereduce, vdram, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs, vbuffer3, 0, 0, reducebuffersz, globalparamsV); 
		readvdata(enablereduce, vdram, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs + reducebuffersz, vbuffer3, 8, 0, reducebuffersz, globalparamsV); 
		readvdata(enablereduce, vdram, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs, vbuffer4, 0, 0, reducebuffersz, globalparamsV); 
		readvdata(enablereduce, vdram, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs + reducebuffersz, vbuffer4, 8, 0, reducebuffersz, globalparamsV); 
		readvdata(enablereduce, vdram, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs, vbuffer5, 0, 0, reducebuffersz, globalparamsV); 
		readvdata(enablereduce, vdram, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs + reducebuffersz, vbuffer5, 8, 0, reducebuffersz, globalparamsV); 
		
		// merge 
		merge6andsavevdata(enablereduce, vdram, vbuffer0,vbuffer1,vbuffer2,vbuffer3,vbuffer4,vbuffer5, 0, 0, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs); 
		merge6andsavevdata(enablereduce, vdram, vbuffer0,vbuffer1,vbuffer2,vbuffer3,vbuffer4,vbuffer5, 8, 0, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs + reducebuffersz); 
		
		// update stats
		if(enablereduce == ON){ buffer[source_partition] += 64; } 
		else { buffer[source_partition] += 0; }
	}	 */		
	return;
}
}
extern "C" {
void 
	#ifdef SW 
	actsproc:: 
	#endif
topkernelP7(
	uint512_dt * kvdram0,
	uint512_dt * kvdram1,
	uint512_dt * kvdram2,
	uint512_dt * kvdram3,
	uint512_dt * kvdram4,
	uint512_dt * kvdram5,
	uint512_dt * kvdram6,
	uint512_dt * vdram
	){
#ifdef EDGES_IN_SEPERATE_BUFFER_FROM_KVDRAM
#pragma HLS INTERFACE m_axi port = edges0 offset = slave bundle = gmem0
#pragma HLS INTERFACE m_axi port = kvdram0 offset = slave bundle = gmem1
#pragma HLS INTERFACE m_axi port = edges1 offset = slave bundle = gmem2
#pragma HLS INTERFACE m_axi port = kvdram1 offset = slave bundle = gmem3
#pragma HLS INTERFACE m_axi port = edges2 offset = slave bundle = gmem4
#pragma HLS INTERFACE m_axi port = kvdram2 offset = slave bundle = gmem5
#pragma HLS INTERFACE m_axi port = edges3 offset = slave bundle = gmem6
#pragma HLS INTERFACE m_axi port = kvdram3 offset = slave bundle = gmem7
#pragma HLS INTERFACE m_axi port = edges4 offset = slave bundle = gmem8
#pragma HLS INTERFACE m_axi port = kvdram4 offset = slave bundle = gmem9
#pragma HLS INTERFACE m_axi port = edges5 offset = slave bundle = gmem10
#pragma HLS INTERFACE m_axi port = kvdram5 offset = slave bundle = gmem11
#pragma HLS INTERFACE m_axi port = edges6 offset = slave bundle = gmem12
#pragma HLS INTERFACE m_axi port = kvdram6 offset = slave bundle = gmem13
#pragma HLS INTERFACE m_axi port = vdram offset = slave bundle = gmem14
#else 
#pragma HLS INTERFACE m_axi port = kvdram0 offset = slave bundle = gmem0
#pragma HLS INTERFACE m_axi port = kvdram1 offset = slave bundle = gmem1
#pragma HLS INTERFACE m_axi port = kvdram2 offset = slave bundle = gmem2
#pragma HLS INTERFACE m_axi port = kvdram3 offset = slave bundle = gmem3
#pragma HLS INTERFACE m_axi port = kvdram4 offset = slave bundle = gmem4
#pragma HLS INTERFACE m_axi port = kvdram5 offset = slave bundle = gmem5
#pragma HLS INTERFACE m_axi port = kvdram6 offset = slave bundle = gmem6
#pragma HLS INTERFACE m_axi port = vdram offset = slave bundle = gmem7
#endif 

#ifdef EDGES_IN_SEPERATE_BUFFER_FROM_KVDRAM
#pragma HLS INTERFACE s_axilite port = edges0 bundle = control
#pragma HLS INTERFACE s_axilite port = edges1 bundle = control
#pragma HLS INTERFACE s_axilite port = edges2 bundle = control
#pragma HLS INTERFACE s_axilite port = edges3 bundle = control
#pragma HLS INTERFACE s_axilite port = edges4 bundle = control
#pragma HLS INTERFACE s_axilite port = edges5 bundle = control
#pragma HLS INTERFACE s_axilite port = edges6 bundle = control
#endif 
#pragma HLS INTERFACE s_axilite port = kvdram0 bundle = control
#pragma HLS INTERFACE s_axilite port = kvdram1 bundle = control
#pragma HLS INTERFACE s_axilite port = kvdram2 bundle = control
#pragma HLS INTERFACE s_axilite port = kvdram3 bundle = control
#pragma HLS INTERFACE s_axilite port = kvdram4 bundle = control
#pragma HLS INTERFACE s_axilite port = kvdram5 bundle = control
#pragma HLS INTERFACE s_axilite port = kvdram6 bundle = control

#pragma HLS INTERFACE s_axilite port = vdram bundle = control

#pragma HLS INTERFACE s_axilite port=return bundle=control

#ifdef EDGES_IN_SEPERATE_BUFFER_FROM_KVDRAM
#pragma HLS DATA_PACK variable = edges0
#pragma HLS DATA_PACK variable = edges1
#pragma HLS DATA_PACK variable = edges2
#pragma HLS DATA_PACK variable = edges3
#pragma HLS DATA_PACK variable = edges4
#pragma HLS DATA_PACK variable = edges5
#pragma HLS DATA_PACK variable = edges6
#endif 
#pragma HLS DATA_PACK variable = kvdram0
#pragma HLS DATA_PACK variable = kvdram1
#pragma HLS DATA_PACK variable = kvdram2
#pragma HLS DATA_PACK variable = kvdram3
#pragma HLS DATA_PACK variable = kvdram4
#pragma HLS DATA_PACK variable = kvdram5
#pragma HLS DATA_PACK variable = kvdram6
#pragma HLS DATA_PACK variable = vdram

	#if defined(_DEBUGMODE_KERNELPRINTS2) & defined(ALLVERTEXISACTIVE_ALGORITHM)
	cout<<">>> ====================== Light weight ACTS (PR & SYNC) Launched... ====================== "<<endl; 
	#endif
	
	unsigned int GraphIter = GETKEYENTRY(kvdram0[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_ALGORITHMINFO_GRAPHITERATIONID], 0);
	#ifdef _DEBUGMODE_KERNELPRINTS2
	cout<<">>> swkernel::runapp: Iteration: "<<GraphIter<<endl;
	#endif 
	
	/* // run acts
	cout<<"--------------***************------------------------------------ topkernelP7: processing instance 0"<<endl;
	// topkernelproc_embedded(kvdram0);
	topkernelproc_embedded(kvdram2);// CRITICAL REMOVEME.
	exit(EXIT_SUCCESS); // 	
	cout<<"--------------***************------------------------------------ topkernelP7: processing instance 1"<<endl;
	// topkernelproc_embedded(kvdram1);
	topkernelproc_embedded(kvdram2);// CRITICAL REMOVEME.
	exit(EXIT_SUCCESS); // 	
	cout<<"--------------***************------------------------------------ topkernelP7: processing instance 2"<<endl;
	// topkernelproc_embedded(kvdram2);
	topkernelproc_embedded(kvdram2);// CRITICAL REMOVEME.
	exit(EXIT_SUCCESS); // 	
	cout<<"--------------***************------------------------------------ topkernelP7: processing instance 3"<<endl;
	// topkernelproc_embedded(kvdram3);
	topkernelproc_embedded(kvdram2);// CRITICAL REMOVEME.
	exit(EXIT_SUCCESS); // 	
	cout<<"--------------***************------------------------------------ topkernelP7: processing instance 4"<<endl;
	// topkernelproc_embedded(kvdram4);
	topkernelproc_embedded(kvdram2);// CRITICAL REMOVEME.
	exit(EXIT_SUCCESS); // 	
	cout<<"--------------***************------------------------------------ topkernelP7: processing instance 5"<<endl;
	// topkernelproc_embedded(kvdram5);
	topkernelproc_embedded(kvdram2);// CRITICAL REMOVEME.
	exit(EXIT_SUCCESS); // 	
	cout<<"--------------***************------------------------------------ topkernelP7: processing instance 6"<<endl;
	// topkernelproc_embedded(kvdram6);
	topkernelproc_embedded(kvdram2);// CRITICAL REMOVEME.
	exit(EXIT_SUCCESS); // 	
 */
	
	// run acts
	cout<<"--------------***************------------------------------------ topkernelP7: processing instance 0"<<endl;
	topkernelproc_embedded(kvdram0);	
	//  // // CRITICAL REMOVEME.	
	cout<<"--------------***************------------------------------------ topkernelP7: processing instance 1"<<endl;
	topkernelproc_embedded(kvdram1);	
	//  // // CRITICAL REMOVEME.	
	cout<<"--------------***************------------------------------------ topkernelP7: processing instance 2"<<endl;
	topkernelproc_embedded(kvdram2);	
	// topkernelproc_embedded(kvdram2);exit(EXIT_SUCCESS); // // CRITICAL REMOVEME.	
	cout<<"--------------***************------------------------------------ topkernelP7: processing instance 3"<<endl;
	topkernelproc_embedded(kvdram3);	
	//  // // CRITICAL REMOVEME.	
	cout<<"--------------***************------------------------------------ topkernelP7: processing instance 4"<<endl;
	topkernelproc_embedded(kvdram4);	
	//  // // CRITICAL REMOVEME.	
	cout<<"--------------***************------------------------------------ topkernelP7: processing instance 5"<<endl;
	topkernelproc_embedded(kvdram5);	
	//  // // CRITICAL REMOVEME.	
	cout<<"--------------***************------------------------------------ topkernelP7: processing instance 6"<<endl;
	topkernelproc_embedded(kvdram6);	
	//  // // CRITICAL REMOVEME.	
	
	/** TOPKERNEL7_BASELOOP1: for(batch_type source_partition=0; source_partition<256; source_partition+=1){ // AUTOMATEME.
		#ifdef _DEBUGMODE_KERNELPRINTS2
		actsutilityobj->print3("### TOPKERNEL7_BASELOOP1:: source_partition", "currentLOP", "NAp", source_partition, currentLOP, NAp); 							
		#endif
		
		bool_type enablereduce = OFF; 
		unsigned int ntravszs = 0;
		rtravstates[0] = gettravstate(ON, kvdram0, globalparamsK, currentLOP, sourcestatsmarker);
		rtravstates[1] = gettravstate(ON, kvdram1, globalparamsK, currentLOP, sourcestatsmarker);
		rtravstates[2] = gettravstate(ON, kvdram2, globalparamsK, currentLOP, sourcestatsmarker);
		rtravstates[3] = gettravstate(ON, kvdram3, globalparamsK, currentLOP, sourcestatsmarker);
		rtravstates[4] = gettravstate(ON, kvdram4, globalparamsK, currentLOP, sourcestatsmarker);
		rtravstates[5] = gettravstate(ON, kvdram5, globalparamsK, currentLOP, sourcestatsmarker);
		rtravstates[6] = gettravstate(ON, kvdram6, globalparamsK, currentLOP, sourcestatsmarker);
		for(unsigned int i = 0; i < 7; i++){ ntravszs += rtravstates[i].size_kvs; }
		if(ntravszs > 0){ enablereduce = ON; } else { enablereduce = OFF; }
		
		// read vertices
		readvdata(enablereduce, vdram, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs, vbuffer0, 0, 0, reducebuffersz, globalparamsV); 
		readvdata(enablereduce, vdram, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs + reducebuffersz, vbuffer0, 8, 0, reducebuffersz, globalparamsV); 
		readvdata(enablereduce, vdram, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs, vbuffer1, 0, 0, reducebuffersz, globalparamsV); 
		readvdata(enablereduce, vdram, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs + reducebuffersz, vbuffer1, 8, 0, reducebuffersz, globalparamsV); 
		readvdata(enablereduce, vdram, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs, vbuffer2, 0, 0, reducebuffersz, globalparamsV); 
		readvdata(enablereduce, vdram, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs + reducebuffersz, vbuffer2, 8, 0, reducebuffersz, globalparamsV); 
		readvdata(enablereduce, vdram, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs, vbuffer3, 0, 0, reducebuffersz, globalparamsV); 
		readvdata(enablereduce, vdram, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs + reducebuffersz, vbuffer3, 8, 0, reducebuffersz, globalparamsV); 
		readvdata(enablereduce, vdram, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs, vbuffer4, 0, 0, reducebuffersz, globalparamsV); 
		readvdata(enablereduce, vdram, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs + reducebuffersz, vbuffer4, 8, 0, reducebuffersz, globalparamsV); 
		readvdata(enablereduce, vdram, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs, vbuffer5, 0, 0, reducebuffersz, globalparamsV); 
		readvdata(enablereduce, vdram, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs + reducebuffersz, vbuffer5, 8, 0, reducebuffersz, globalparamsV); 
		readvdata(enablereduce, vdram, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs, vbuffer6, 0, 0, reducebuffersz, globalparamsV); 
		readvdata(enablereduce, vdram, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs + reducebuffersz, vbuffer6, 8, 0, reducebuffersz, globalparamsV); 
		
		// merge 
		merge7andsavevdata(enablereduce, vdram, vbuffer0,vbuffer1,vbuffer2,vbuffer3,vbuffer4,vbuffer5,vbuffer6, 0, 0, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs); 
		merge7andsavevdata(enablereduce, vdram, vbuffer0,vbuffer1,vbuffer2,vbuffer3,vbuffer4,vbuffer5,vbuffer6, 8, 0, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs + reducebuffersz); 
		
		// update stats
		if(enablereduce == ON){ buffer[source_partition] += 64; } 
		else { buffer[source_partition] += 0; }
	}	 */		
	return;
}
}
extern "C" {
void 
	#ifdef SW 
	actsproc:: 
	#endif
topkernelP8(
	uint512_dt * kvdram0,
	uint512_dt * kvdram1,
	uint512_dt * kvdram2,
	uint512_dt * kvdram3,
	uint512_dt * kvdram4,
	uint512_dt * kvdram5,
	uint512_dt * kvdram6,
	uint512_dt * kvdram7,
	uint512_dt * vdram
	){
#ifdef EDGES_IN_SEPERATE_BUFFER_FROM_KVDRAM
#pragma HLS INTERFACE m_axi port = edges0 offset = slave bundle = gmem0
#pragma HLS INTERFACE m_axi port = kvdram0 offset = slave bundle = gmem1
#pragma HLS INTERFACE m_axi port = edges1 offset = slave bundle = gmem2
#pragma HLS INTERFACE m_axi port = kvdram1 offset = slave bundle = gmem3
#pragma HLS INTERFACE m_axi port = edges2 offset = slave bundle = gmem4
#pragma HLS INTERFACE m_axi port = kvdram2 offset = slave bundle = gmem5
#pragma HLS INTERFACE m_axi port = edges3 offset = slave bundle = gmem6
#pragma HLS INTERFACE m_axi port = kvdram3 offset = slave bundle = gmem7
#pragma HLS INTERFACE m_axi port = edges4 offset = slave bundle = gmem8
#pragma HLS INTERFACE m_axi port = kvdram4 offset = slave bundle = gmem9
#pragma HLS INTERFACE m_axi port = edges5 offset = slave bundle = gmem10
#pragma HLS INTERFACE m_axi port = kvdram5 offset = slave bundle = gmem11
#pragma HLS INTERFACE m_axi port = edges6 offset = slave bundle = gmem12
#pragma HLS INTERFACE m_axi port = kvdram6 offset = slave bundle = gmem13
#pragma HLS INTERFACE m_axi port = edges7 offset = slave bundle = gmem14
#pragma HLS INTERFACE m_axi port = kvdram7 offset = slave bundle = gmem15
#pragma HLS INTERFACE m_axi port = vdram offset = slave bundle = gmem16
#else 
#pragma HLS INTERFACE m_axi port = kvdram0 offset = slave bundle = gmem0
#pragma HLS INTERFACE m_axi port = kvdram1 offset = slave bundle = gmem1
#pragma HLS INTERFACE m_axi port = kvdram2 offset = slave bundle = gmem2
#pragma HLS INTERFACE m_axi port = kvdram3 offset = slave bundle = gmem3
#pragma HLS INTERFACE m_axi port = kvdram4 offset = slave bundle = gmem4
#pragma HLS INTERFACE m_axi port = kvdram5 offset = slave bundle = gmem5
#pragma HLS INTERFACE m_axi port = kvdram6 offset = slave bundle = gmem6
#pragma HLS INTERFACE m_axi port = kvdram7 offset = slave bundle = gmem7
#pragma HLS INTERFACE m_axi port = vdram offset = slave bundle = gmem8
#endif 

#ifdef EDGES_IN_SEPERATE_BUFFER_FROM_KVDRAM
#pragma HLS INTERFACE s_axilite port = edges0 bundle = control
#pragma HLS INTERFACE s_axilite port = edges1 bundle = control
#pragma HLS INTERFACE s_axilite port = edges2 bundle = control
#pragma HLS INTERFACE s_axilite port = edges3 bundle = control
#pragma HLS INTERFACE s_axilite port = edges4 bundle = control
#pragma HLS INTERFACE s_axilite port = edges5 bundle = control
#pragma HLS INTERFACE s_axilite port = edges6 bundle = control
#pragma HLS INTERFACE s_axilite port = edges7 bundle = control
#endif 
#pragma HLS INTERFACE s_axilite port = kvdram0 bundle = control
#pragma HLS INTERFACE s_axilite port = kvdram1 bundle = control
#pragma HLS INTERFACE s_axilite port = kvdram2 bundle = control
#pragma HLS INTERFACE s_axilite port = kvdram3 bundle = control
#pragma HLS INTERFACE s_axilite port = kvdram4 bundle = control
#pragma HLS INTERFACE s_axilite port = kvdram5 bundle = control
#pragma HLS INTERFACE s_axilite port = kvdram6 bundle = control
#pragma HLS INTERFACE s_axilite port = kvdram7 bundle = control

#pragma HLS INTERFACE s_axilite port = vdram bundle = control

#pragma HLS INTERFACE s_axilite port=return bundle=control

#ifdef EDGES_IN_SEPERATE_BUFFER_FROM_KVDRAM
#pragma HLS DATA_PACK variable = edges0
#pragma HLS DATA_PACK variable = edges1
#pragma HLS DATA_PACK variable = edges2
#pragma HLS DATA_PACK variable = edges3
#pragma HLS DATA_PACK variable = edges4
#pragma HLS DATA_PACK variable = edges5
#pragma HLS DATA_PACK variable = edges6
#pragma HLS DATA_PACK variable = edges7
#endif 
#pragma HLS DATA_PACK variable = kvdram0
#pragma HLS DATA_PACK variable = kvdram1
#pragma HLS DATA_PACK variable = kvdram2
#pragma HLS DATA_PACK variable = kvdram3
#pragma HLS DATA_PACK variable = kvdram4
#pragma HLS DATA_PACK variable = kvdram5
#pragma HLS DATA_PACK variable = kvdram6
#pragma HLS DATA_PACK variable = kvdram7
#pragma HLS DATA_PACK variable = vdram

	#if defined(_DEBUGMODE_KERNELPRINTS2) & defined(ALLVERTEXISACTIVE_ALGORITHM)
	cout<<">>> ====================== Light weight ACTS (PR & SYNC) Launched... ====================== "<<endl; 
	#endif
	
	unsigned int GraphIter = GETKEYENTRY(kvdram0[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_ALGORITHMINFO_GRAPHITERATIONID], 0);
	#ifdef _DEBUGMODE_KERNELPRINTS2
	cout<<">>> swkernel::runapp: Iteration: "<<GraphIter<<endl;
	#endif 
	
	/* // run acts
	cout<<"--------------***************------------------------------------ topkernelP8: processing instance 0"<<endl;
	// topkernelproc_embedded(kvdram0);
	topkernelproc_embedded(kvdram2);// CRITICAL REMOVEME.
	exit(EXIT_SUCCESS); // 	
	cout<<"--------------***************------------------------------------ topkernelP8: processing instance 1"<<endl;
	// topkernelproc_embedded(kvdram1);
	topkernelproc_embedded(kvdram2);// CRITICAL REMOVEME.
	exit(EXIT_SUCCESS); // 	
	cout<<"--------------***************------------------------------------ topkernelP8: processing instance 2"<<endl;
	// topkernelproc_embedded(kvdram2);
	topkernelproc_embedded(kvdram2);// CRITICAL REMOVEME.
	exit(EXIT_SUCCESS); // 	
	cout<<"--------------***************------------------------------------ topkernelP8: processing instance 3"<<endl;
	// topkernelproc_embedded(kvdram3);
	topkernelproc_embedded(kvdram2);// CRITICAL REMOVEME.
	exit(EXIT_SUCCESS); // 	
	cout<<"--------------***************------------------------------------ topkernelP8: processing instance 4"<<endl;
	// topkernelproc_embedded(kvdram4);
	topkernelproc_embedded(kvdram2);// CRITICAL REMOVEME.
	exit(EXIT_SUCCESS); // 	
	cout<<"--------------***************------------------------------------ topkernelP8: processing instance 5"<<endl;
	// topkernelproc_embedded(kvdram5);
	topkernelproc_embedded(kvdram2);// CRITICAL REMOVEME.
	exit(EXIT_SUCCESS); // 	
	cout<<"--------------***************------------------------------------ topkernelP8: processing instance 6"<<endl;
	// topkernelproc_embedded(kvdram6);
	topkernelproc_embedded(kvdram2);// CRITICAL REMOVEME.
	exit(EXIT_SUCCESS); // 	
	cout<<"--------------***************------------------------------------ topkernelP8: processing instance 7"<<endl;
	// topkernelproc_embedded(kvdram7);
	topkernelproc_embedded(kvdram2);// CRITICAL REMOVEME.
	exit(EXIT_SUCCESS); // 	
 */
	
	// run acts
	cout<<"--------------***************------------------------------------ topkernelP8: processing instance 0"<<endl;
	topkernelproc_embedded(kvdram0);	
	//  // // CRITICAL REMOVEME.	
	cout<<"--------------***************------------------------------------ topkernelP8: processing instance 1"<<endl;
	topkernelproc_embedded(kvdram1);	
	//  // // CRITICAL REMOVEME.	
	cout<<"--------------***************------------------------------------ topkernelP8: processing instance 2"<<endl;
	topkernelproc_embedded(kvdram2);	
	// topkernelproc_embedded(kvdram2);exit(EXIT_SUCCESS); // // CRITICAL REMOVEME.	
	cout<<"--------------***************------------------------------------ topkernelP8: processing instance 3"<<endl;
	topkernelproc_embedded(kvdram3);	
	//  // // CRITICAL REMOVEME.	
	cout<<"--------------***************------------------------------------ topkernelP8: processing instance 4"<<endl;
	topkernelproc_embedded(kvdram4);	
	//  // // CRITICAL REMOVEME.	
	cout<<"--------------***************------------------------------------ topkernelP8: processing instance 5"<<endl;
	topkernelproc_embedded(kvdram5);	
	//  // // CRITICAL REMOVEME.	
	cout<<"--------------***************------------------------------------ topkernelP8: processing instance 6"<<endl;
	topkernelproc_embedded(kvdram6);	
	//  // // CRITICAL REMOVEME.	
	cout<<"--------------***************------------------------------------ topkernelP8: processing instance 7"<<endl;
	topkernelproc_embedded(kvdram7);	
	//  // // CRITICAL REMOVEME.	
	
	/** TOPKERNEL8_BASELOOP1: for(batch_type source_partition=0; source_partition<256; source_partition+=1){ // AUTOMATEME.
		#ifdef _DEBUGMODE_KERNELPRINTS2
		actsutilityobj->print3("### TOPKERNEL8_BASELOOP1:: source_partition", "currentLOP", "NAp", source_partition, currentLOP, NAp); 							
		#endif
		
		bool_type enablereduce = OFF; 
		unsigned int ntravszs = 0;
		rtravstates[0] = gettravstate(ON, kvdram0, globalparamsK, currentLOP, sourcestatsmarker);
		rtravstates[1] = gettravstate(ON, kvdram1, globalparamsK, currentLOP, sourcestatsmarker);
		rtravstates[2] = gettravstate(ON, kvdram2, globalparamsK, currentLOP, sourcestatsmarker);
		rtravstates[3] = gettravstate(ON, kvdram3, globalparamsK, currentLOP, sourcestatsmarker);
		rtravstates[4] = gettravstate(ON, kvdram4, globalparamsK, currentLOP, sourcestatsmarker);
		rtravstates[5] = gettravstate(ON, kvdram5, globalparamsK, currentLOP, sourcestatsmarker);
		rtravstates[6] = gettravstate(ON, kvdram6, globalparamsK, currentLOP, sourcestatsmarker);
		rtravstates[7] = gettravstate(ON, kvdram7, globalparamsK, currentLOP, sourcestatsmarker);
		for(unsigned int i = 0; i < 8; i++){ ntravszs += rtravstates[i].size_kvs; }
		if(ntravszs > 0){ enablereduce = ON; } else { enablereduce = OFF; }
		
		// read vertices
		readvdata(enablereduce, vdram, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs, vbuffer0, 0, 0, reducebuffersz, globalparamsV); 
		readvdata(enablereduce, vdram, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs + reducebuffersz, vbuffer0, 8, 0, reducebuffersz, globalparamsV); 
		readvdata(enablereduce, vdram, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs, vbuffer1, 0, 0, reducebuffersz, globalparamsV); 
		readvdata(enablereduce, vdram, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs + reducebuffersz, vbuffer1, 8, 0, reducebuffersz, globalparamsV); 
		readvdata(enablereduce, vdram, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs, vbuffer2, 0, 0, reducebuffersz, globalparamsV); 
		readvdata(enablereduce, vdram, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs + reducebuffersz, vbuffer2, 8, 0, reducebuffersz, globalparamsV); 
		readvdata(enablereduce, vdram, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs, vbuffer3, 0, 0, reducebuffersz, globalparamsV); 
		readvdata(enablereduce, vdram, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs + reducebuffersz, vbuffer3, 8, 0, reducebuffersz, globalparamsV); 
		readvdata(enablereduce, vdram, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs, vbuffer4, 0, 0, reducebuffersz, globalparamsV); 
		readvdata(enablereduce, vdram, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs + reducebuffersz, vbuffer4, 8, 0, reducebuffersz, globalparamsV); 
		readvdata(enablereduce, vdram, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs, vbuffer5, 0, 0, reducebuffersz, globalparamsV); 
		readvdata(enablereduce, vdram, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs + reducebuffersz, vbuffer5, 8, 0, reducebuffersz, globalparamsV); 
		readvdata(enablereduce, vdram, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs, vbuffer6, 0, 0, reducebuffersz, globalparamsV); 
		readvdata(enablereduce, vdram, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs + reducebuffersz, vbuffer6, 8, 0, reducebuffersz, globalparamsV); 
		readvdata(enablereduce, vdram, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs, vbuffer7, 0, 0, reducebuffersz, globalparamsV); 
		readvdata(enablereduce, vdram, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs + reducebuffersz, vbuffer7, 8, 0, reducebuffersz, globalparamsV); 
		
		// merge 
		merge8andsavevdata(enablereduce, vdram, vbuffer0,vbuffer1,vbuffer2,vbuffer3,vbuffer4,vbuffer5,vbuffer6,vbuffer7, 0, 0, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs); 
		merge8andsavevdata(enablereduce, vdram, vbuffer0,vbuffer1,vbuffer2,vbuffer3,vbuffer4,vbuffer5,vbuffer6,vbuffer7, 8, 0, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs + reducebuffersz); 
		
		// update stats
		if(enablereduce == ON){ buffer[source_partition] += 64; } 
		else { buffer[source_partition] += 0; }
	}	 */		
	return;
}
}
extern "C" {
void 
	#ifdef SW 
	actsproc:: 
	#endif
topkernelP9(
	uint512_dt * kvdram0,
	uint512_dt * kvdram1,
	uint512_dt * kvdram2,
	uint512_dt * kvdram3,
	uint512_dt * kvdram4,
	uint512_dt * kvdram5,
	uint512_dt * kvdram6,
	uint512_dt * kvdram7,
	uint512_dt * kvdram8,
	uint512_dt * vdram
	){
#ifdef EDGES_IN_SEPERATE_BUFFER_FROM_KVDRAM
#pragma HLS INTERFACE m_axi port = edges0 offset = slave bundle = gmem0
#pragma HLS INTERFACE m_axi port = kvdram0 offset = slave bundle = gmem1
#pragma HLS INTERFACE m_axi port = edges1 offset = slave bundle = gmem2
#pragma HLS INTERFACE m_axi port = kvdram1 offset = slave bundle = gmem3
#pragma HLS INTERFACE m_axi port = edges2 offset = slave bundle = gmem4
#pragma HLS INTERFACE m_axi port = kvdram2 offset = slave bundle = gmem5
#pragma HLS INTERFACE m_axi port = edges3 offset = slave bundle = gmem6
#pragma HLS INTERFACE m_axi port = kvdram3 offset = slave bundle = gmem7
#pragma HLS INTERFACE m_axi port = edges4 offset = slave bundle = gmem8
#pragma HLS INTERFACE m_axi port = kvdram4 offset = slave bundle = gmem9
#pragma HLS INTERFACE m_axi port = edges5 offset = slave bundle = gmem10
#pragma HLS INTERFACE m_axi port = kvdram5 offset = slave bundle = gmem11
#pragma HLS INTERFACE m_axi port = edges6 offset = slave bundle = gmem12
#pragma HLS INTERFACE m_axi port = kvdram6 offset = slave bundle = gmem13
#pragma HLS INTERFACE m_axi port = edges7 offset = slave bundle = gmem14
#pragma HLS INTERFACE m_axi port = kvdram7 offset = slave bundle = gmem15
#pragma HLS INTERFACE m_axi port = edges8 offset = slave bundle = gmem16
#pragma HLS INTERFACE m_axi port = kvdram8 offset = slave bundle = gmem17
#pragma HLS INTERFACE m_axi port = vdram offset = slave bundle = gmem18
#else 
#pragma HLS INTERFACE m_axi port = kvdram0 offset = slave bundle = gmem0
#pragma HLS INTERFACE m_axi port = kvdram1 offset = slave bundle = gmem1
#pragma HLS INTERFACE m_axi port = kvdram2 offset = slave bundle = gmem2
#pragma HLS INTERFACE m_axi port = kvdram3 offset = slave bundle = gmem3
#pragma HLS INTERFACE m_axi port = kvdram4 offset = slave bundle = gmem4
#pragma HLS INTERFACE m_axi port = kvdram5 offset = slave bundle = gmem5
#pragma HLS INTERFACE m_axi port = kvdram6 offset = slave bundle = gmem6
#pragma HLS INTERFACE m_axi port = kvdram7 offset = slave bundle = gmem7
#pragma HLS INTERFACE m_axi port = kvdram8 offset = slave bundle = gmem8
#pragma HLS INTERFACE m_axi port = vdram offset = slave bundle = gmem9
#endif 

#ifdef EDGES_IN_SEPERATE_BUFFER_FROM_KVDRAM
#pragma HLS INTERFACE s_axilite port = edges0 bundle = control
#pragma HLS INTERFACE s_axilite port = edges1 bundle = control
#pragma HLS INTERFACE s_axilite port = edges2 bundle = control
#pragma HLS INTERFACE s_axilite port = edges3 bundle = control
#pragma HLS INTERFACE s_axilite port = edges4 bundle = control
#pragma HLS INTERFACE s_axilite port = edges5 bundle = control
#pragma HLS INTERFACE s_axilite port = edges6 bundle = control
#pragma HLS INTERFACE s_axilite port = edges7 bundle = control
#pragma HLS INTERFACE s_axilite port = edges8 bundle = control
#endif 
#pragma HLS INTERFACE s_axilite port = kvdram0 bundle = control
#pragma HLS INTERFACE s_axilite port = kvdram1 bundle = control
#pragma HLS INTERFACE s_axilite port = kvdram2 bundle = control
#pragma HLS INTERFACE s_axilite port = kvdram3 bundle = control
#pragma HLS INTERFACE s_axilite port = kvdram4 bundle = control
#pragma HLS INTERFACE s_axilite port = kvdram5 bundle = control
#pragma HLS INTERFACE s_axilite port = kvdram6 bundle = control
#pragma HLS INTERFACE s_axilite port = kvdram7 bundle = control
#pragma HLS INTERFACE s_axilite port = kvdram8 bundle = control

#pragma HLS INTERFACE s_axilite port = vdram bundle = control

#pragma HLS INTERFACE s_axilite port=return bundle=control

#ifdef EDGES_IN_SEPERATE_BUFFER_FROM_KVDRAM
#pragma HLS DATA_PACK variable = edges0
#pragma HLS DATA_PACK variable = edges1
#pragma HLS DATA_PACK variable = edges2
#pragma HLS DATA_PACK variable = edges3
#pragma HLS DATA_PACK variable = edges4
#pragma HLS DATA_PACK variable = edges5
#pragma HLS DATA_PACK variable = edges6
#pragma HLS DATA_PACK variable = edges7
#pragma HLS DATA_PACK variable = edges8
#endif 
#pragma HLS DATA_PACK variable = kvdram0
#pragma HLS DATA_PACK variable = kvdram1
#pragma HLS DATA_PACK variable = kvdram2
#pragma HLS DATA_PACK variable = kvdram3
#pragma HLS DATA_PACK variable = kvdram4
#pragma HLS DATA_PACK variable = kvdram5
#pragma HLS DATA_PACK variable = kvdram6
#pragma HLS DATA_PACK variable = kvdram7
#pragma HLS DATA_PACK variable = kvdram8
#pragma HLS DATA_PACK variable = vdram

	#if defined(_DEBUGMODE_KERNELPRINTS2) & defined(ALLVERTEXISACTIVE_ALGORITHM)
	cout<<">>> ====================== Light weight ACTS (PR & SYNC) Launched... ====================== "<<endl; 
	#endif
	
	unsigned int GraphIter = GETKEYENTRY(kvdram0[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_ALGORITHMINFO_GRAPHITERATIONID], 0);
	#ifdef _DEBUGMODE_KERNELPRINTS2
	cout<<">>> swkernel::runapp: Iteration: "<<GraphIter<<endl;
	#endif 
	
	/* // run acts
	cout<<"--------------***************------------------------------------ topkernelP9: processing instance 0"<<endl;
	// topkernelproc_embedded(kvdram0);
	topkernelproc_embedded(kvdram2);// CRITICAL REMOVEME.
	exit(EXIT_SUCCESS); // 	
	cout<<"--------------***************------------------------------------ topkernelP9: processing instance 1"<<endl;
	// topkernelproc_embedded(kvdram1);
	topkernelproc_embedded(kvdram2);// CRITICAL REMOVEME.
	exit(EXIT_SUCCESS); // 	
	cout<<"--------------***************------------------------------------ topkernelP9: processing instance 2"<<endl;
	// topkernelproc_embedded(kvdram2);
	topkernelproc_embedded(kvdram2);// CRITICAL REMOVEME.
	exit(EXIT_SUCCESS); // 	
	cout<<"--------------***************------------------------------------ topkernelP9: processing instance 3"<<endl;
	// topkernelproc_embedded(kvdram3);
	topkernelproc_embedded(kvdram2);// CRITICAL REMOVEME.
	exit(EXIT_SUCCESS); // 	
	cout<<"--------------***************------------------------------------ topkernelP9: processing instance 4"<<endl;
	// topkernelproc_embedded(kvdram4);
	topkernelproc_embedded(kvdram2);// CRITICAL REMOVEME.
	exit(EXIT_SUCCESS); // 	
	cout<<"--------------***************------------------------------------ topkernelP9: processing instance 5"<<endl;
	// topkernelproc_embedded(kvdram5);
	topkernelproc_embedded(kvdram2);// CRITICAL REMOVEME.
	exit(EXIT_SUCCESS); // 	
	cout<<"--------------***************------------------------------------ topkernelP9: processing instance 6"<<endl;
	// topkernelproc_embedded(kvdram6);
	topkernelproc_embedded(kvdram2);// CRITICAL REMOVEME.
	exit(EXIT_SUCCESS); // 	
	cout<<"--------------***************------------------------------------ topkernelP9: processing instance 7"<<endl;
	// topkernelproc_embedded(kvdram7);
	topkernelproc_embedded(kvdram2);// CRITICAL REMOVEME.
	exit(EXIT_SUCCESS); // 	
	cout<<"--------------***************------------------------------------ topkernelP9: processing instance 8"<<endl;
	// topkernelproc_embedded(kvdram8);
	topkernelproc_embedded(kvdram2);// CRITICAL REMOVEME.
	exit(EXIT_SUCCESS); // 	
 */
	
	// run acts
	cout<<"--------------***************------------------------------------ topkernelP9: processing instance 0"<<endl;
	topkernelproc_embedded(kvdram0);	
	//  // // CRITICAL REMOVEME.	
	cout<<"--------------***************------------------------------------ topkernelP9: processing instance 1"<<endl;
	topkernelproc_embedded(kvdram1);	
	//  // // CRITICAL REMOVEME.	
	cout<<"--------------***************------------------------------------ topkernelP9: processing instance 2"<<endl;
	topkernelproc_embedded(kvdram2);	
	// topkernelproc_embedded(kvdram2);exit(EXIT_SUCCESS); // // CRITICAL REMOVEME.	
	cout<<"--------------***************------------------------------------ topkernelP9: processing instance 3"<<endl;
	topkernelproc_embedded(kvdram3);	
	//  // // CRITICAL REMOVEME.	
	cout<<"--------------***************------------------------------------ topkernelP9: processing instance 4"<<endl;
	topkernelproc_embedded(kvdram4);	
	//  // // CRITICAL REMOVEME.	
	cout<<"--------------***************------------------------------------ topkernelP9: processing instance 5"<<endl;
	topkernelproc_embedded(kvdram5);	
	//  // // CRITICAL REMOVEME.	
	cout<<"--------------***************------------------------------------ topkernelP9: processing instance 6"<<endl;
	topkernelproc_embedded(kvdram6);	
	//  // // CRITICAL REMOVEME.	
	cout<<"--------------***************------------------------------------ topkernelP9: processing instance 7"<<endl;
	topkernelproc_embedded(kvdram7);	
	//  // // CRITICAL REMOVEME.	
	cout<<"--------------***************------------------------------------ topkernelP9: processing instance 8"<<endl;
	topkernelproc_embedded(kvdram8);	
	//  // // CRITICAL REMOVEME.	
	
	/** TOPKERNEL9_BASELOOP1: for(batch_type source_partition=0; source_partition<256; source_partition+=1){ // AUTOMATEME.
		#ifdef _DEBUGMODE_KERNELPRINTS2
		actsutilityobj->print3("### TOPKERNEL9_BASELOOP1:: source_partition", "currentLOP", "NAp", source_partition, currentLOP, NAp); 							
		#endif
		
		bool_type enablereduce = OFF; 
		unsigned int ntravszs = 0;
		rtravstates[0] = gettravstate(ON, kvdram0, globalparamsK, currentLOP, sourcestatsmarker);
		rtravstates[1] = gettravstate(ON, kvdram1, globalparamsK, currentLOP, sourcestatsmarker);
		rtravstates[2] = gettravstate(ON, kvdram2, globalparamsK, currentLOP, sourcestatsmarker);
		rtravstates[3] = gettravstate(ON, kvdram3, globalparamsK, currentLOP, sourcestatsmarker);
		rtravstates[4] = gettravstate(ON, kvdram4, globalparamsK, currentLOP, sourcestatsmarker);
		rtravstates[5] = gettravstate(ON, kvdram5, globalparamsK, currentLOP, sourcestatsmarker);
		rtravstates[6] = gettravstate(ON, kvdram6, globalparamsK, currentLOP, sourcestatsmarker);
		rtravstates[7] = gettravstate(ON, kvdram7, globalparamsK, currentLOP, sourcestatsmarker);
		rtravstates[8] = gettravstate(ON, kvdram8, globalparamsK, currentLOP, sourcestatsmarker);
		for(unsigned int i = 0; i < 9; i++){ ntravszs += rtravstates[i].size_kvs; }
		if(ntravszs > 0){ enablereduce = ON; } else { enablereduce = OFF; }
		
		// read vertices
		readvdata(enablereduce, vdram, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs, vbuffer0, 0, 0, reducebuffersz, globalparamsV); 
		readvdata(enablereduce, vdram, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs + reducebuffersz, vbuffer0, 8, 0, reducebuffersz, globalparamsV); 
		readvdata(enablereduce, vdram, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs, vbuffer1, 0, 0, reducebuffersz, globalparamsV); 
		readvdata(enablereduce, vdram, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs + reducebuffersz, vbuffer1, 8, 0, reducebuffersz, globalparamsV); 
		readvdata(enablereduce, vdram, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs, vbuffer2, 0, 0, reducebuffersz, globalparamsV); 
		readvdata(enablereduce, vdram, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs + reducebuffersz, vbuffer2, 8, 0, reducebuffersz, globalparamsV); 
		readvdata(enablereduce, vdram, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs, vbuffer3, 0, 0, reducebuffersz, globalparamsV); 
		readvdata(enablereduce, vdram, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs + reducebuffersz, vbuffer3, 8, 0, reducebuffersz, globalparamsV); 
		readvdata(enablereduce, vdram, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs, vbuffer4, 0, 0, reducebuffersz, globalparamsV); 
		readvdata(enablereduce, vdram, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs + reducebuffersz, vbuffer4, 8, 0, reducebuffersz, globalparamsV); 
		readvdata(enablereduce, vdram, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs, vbuffer5, 0, 0, reducebuffersz, globalparamsV); 
		readvdata(enablereduce, vdram, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs + reducebuffersz, vbuffer5, 8, 0, reducebuffersz, globalparamsV); 
		readvdata(enablereduce, vdram, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs, vbuffer6, 0, 0, reducebuffersz, globalparamsV); 
		readvdata(enablereduce, vdram, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs + reducebuffersz, vbuffer6, 8, 0, reducebuffersz, globalparamsV); 
		readvdata(enablereduce, vdram, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs, vbuffer7, 0, 0, reducebuffersz, globalparamsV); 
		readvdata(enablereduce, vdram, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs + reducebuffersz, vbuffer7, 8, 0, reducebuffersz, globalparamsV); 
		readvdata(enablereduce, vdram, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs, vbuffer8, 0, 0, reducebuffersz, globalparamsV); 
		readvdata(enablereduce, vdram, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs + reducebuffersz, vbuffer8, 8, 0, reducebuffersz, globalparamsV); 
		
		// merge 
		merge9andsavevdata(enablereduce, vdram, vbuffer0,vbuffer1,vbuffer2,vbuffer3,vbuffer4,vbuffer5,vbuffer6,vbuffer7,vbuffer8, 0, 0, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs); 
		merge9andsavevdata(enablereduce, vdram, vbuffer0,vbuffer1,vbuffer2,vbuffer3,vbuffer4,vbuffer5,vbuffer6,vbuffer7,vbuffer8, 8, 0, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs + reducebuffersz); 
		
		// update stats
		if(enablereduce == ON){ buffer[source_partition] += 64; } 
		else { buffer[source_partition] += 0; }
	}	 */		
	return;
}
}
extern "C" {
void 
	#ifdef SW 
	actsproc:: 
	#endif
topkernelP10(
	uint512_dt * kvdram0,
	uint512_dt * kvdram1,
	uint512_dt * kvdram2,
	uint512_dt * kvdram3,
	uint512_dt * kvdram4,
	uint512_dt * kvdram5,
	uint512_dt * kvdram6,
	uint512_dt * kvdram7,
	uint512_dt * kvdram8,
	uint512_dt * kvdram9,
	uint512_dt * vdram
	){
#ifdef EDGES_IN_SEPERATE_BUFFER_FROM_KVDRAM
#pragma HLS INTERFACE m_axi port = edges0 offset = slave bundle = gmem0
#pragma HLS INTERFACE m_axi port = kvdram0 offset = slave bundle = gmem1
#pragma HLS INTERFACE m_axi port = edges1 offset = slave bundle = gmem2
#pragma HLS INTERFACE m_axi port = kvdram1 offset = slave bundle = gmem3
#pragma HLS INTERFACE m_axi port = edges2 offset = slave bundle = gmem4
#pragma HLS INTERFACE m_axi port = kvdram2 offset = slave bundle = gmem5
#pragma HLS INTERFACE m_axi port = edges3 offset = slave bundle = gmem6
#pragma HLS INTERFACE m_axi port = kvdram3 offset = slave bundle = gmem7
#pragma HLS INTERFACE m_axi port = edges4 offset = slave bundle = gmem8
#pragma HLS INTERFACE m_axi port = kvdram4 offset = slave bundle = gmem9
#pragma HLS INTERFACE m_axi port = edges5 offset = slave bundle = gmem10
#pragma HLS INTERFACE m_axi port = kvdram5 offset = slave bundle = gmem11
#pragma HLS INTERFACE m_axi port = edges6 offset = slave bundle = gmem12
#pragma HLS INTERFACE m_axi port = kvdram6 offset = slave bundle = gmem13
#pragma HLS INTERFACE m_axi port = edges7 offset = slave bundle = gmem14
#pragma HLS INTERFACE m_axi port = kvdram7 offset = slave bundle = gmem15
#pragma HLS INTERFACE m_axi port = edges8 offset = slave bundle = gmem16
#pragma HLS INTERFACE m_axi port = kvdram8 offset = slave bundle = gmem17
#pragma HLS INTERFACE m_axi port = edges9 offset = slave bundle = gmem18
#pragma HLS INTERFACE m_axi port = kvdram9 offset = slave bundle = gmem19
#pragma HLS INTERFACE m_axi port = vdram offset = slave bundle = gmem20
#else 
#pragma HLS INTERFACE m_axi port = kvdram0 offset = slave bundle = gmem0
#pragma HLS INTERFACE m_axi port = kvdram1 offset = slave bundle = gmem1
#pragma HLS INTERFACE m_axi port = kvdram2 offset = slave bundle = gmem2
#pragma HLS INTERFACE m_axi port = kvdram3 offset = slave bundle = gmem3
#pragma HLS INTERFACE m_axi port = kvdram4 offset = slave bundle = gmem4
#pragma HLS INTERFACE m_axi port = kvdram5 offset = slave bundle = gmem5
#pragma HLS INTERFACE m_axi port = kvdram6 offset = slave bundle = gmem6
#pragma HLS INTERFACE m_axi port = kvdram7 offset = slave bundle = gmem7
#pragma HLS INTERFACE m_axi port = kvdram8 offset = slave bundle = gmem8
#pragma HLS INTERFACE m_axi port = kvdram9 offset = slave bundle = gmem9
#pragma HLS INTERFACE m_axi port = vdram offset = slave bundle = gmem10
#endif 

#ifdef EDGES_IN_SEPERATE_BUFFER_FROM_KVDRAM
#pragma HLS INTERFACE s_axilite port = edges0 bundle = control
#pragma HLS INTERFACE s_axilite port = edges1 bundle = control
#pragma HLS INTERFACE s_axilite port = edges2 bundle = control
#pragma HLS INTERFACE s_axilite port = edges3 bundle = control
#pragma HLS INTERFACE s_axilite port = edges4 bundle = control
#pragma HLS INTERFACE s_axilite port = edges5 bundle = control
#pragma HLS INTERFACE s_axilite port = edges6 bundle = control
#pragma HLS INTERFACE s_axilite port = edges7 bundle = control
#pragma HLS INTERFACE s_axilite port = edges8 bundle = control
#pragma HLS INTERFACE s_axilite port = edges9 bundle = control
#endif 
#pragma HLS INTERFACE s_axilite port = kvdram0 bundle = control
#pragma HLS INTERFACE s_axilite port = kvdram1 bundle = control
#pragma HLS INTERFACE s_axilite port = kvdram2 bundle = control
#pragma HLS INTERFACE s_axilite port = kvdram3 bundle = control
#pragma HLS INTERFACE s_axilite port = kvdram4 bundle = control
#pragma HLS INTERFACE s_axilite port = kvdram5 bundle = control
#pragma HLS INTERFACE s_axilite port = kvdram6 bundle = control
#pragma HLS INTERFACE s_axilite port = kvdram7 bundle = control
#pragma HLS INTERFACE s_axilite port = kvdram8 bundle = control
#pragma HLS INTERFACE s_axilite port = kvdram9 bundle = control

#pragma HLS INTERFACE s_axilite port = vdram bundle = control

#pragma HLS INTERFACE s_axilite port=return bundle=control

#ifdef EDGES_IN_SEPERATE_BUFFER_FROM_KVDRAM
#pragma HLS DATA_PACK variable = edges0
#pragma HLS DATA_PACK variable = edges1
#pragma HLS DATA_PACK variable = edges2
#pragma HLS DATA_PACK variable = edges3
#pragma HLS DATA_PACK variable = edges4
#pragma HLS DATA_PACK variable = edges5
#pragma HLS DATA_PACK variable = edges6
#pragma HLS DATA_PACK variable = edges7
#pragma HLS DATA_PACK variable = edges8
#pragma HLS DATA_PACK variable = edges9
#endif 
#pragma HLS DATA_PACK variable = kvdram0
#pragma HLS DATA_PACK variable = kvdram1
#pragma HLS DATA_PACK variable = kvdram2
#pragma HLS DATA_PACK variable = kvdram3
#pragma HLS DATA_PACK variable = kvdram4
#pragma HLS DATA_PACK variable = kvdram5
#pragma HLS DATA_PACK variable = kvdram6
#pragma HLS DATA_PACK variable = kvdram7
#pragma HLS DATA_PACK variable = kvdram8
#pragma HLS DATA_PACK variable = kvdram9
#pragma HLS DATA_PACK variable = vdram

	#if defined(_DEBUGMODE_KERNELPRINTS2) & defined(ALLVERTEXISACTIVE_ALGORITHM)
	cout<<">>> ====================== Light weight ACTS (PR & SYNC) Launched... ====================== "<<endl; 
	#endif
	
	unsigned int GraphIter = GETKEYENTRY(kvdram0[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_ALGORITHMINFO_GRAPHITERATIONID], 0);
	#ifdef _DEBUGMODE_KERNELPRINTS2
	cout<<">>> swkernel::runapp: Iteration: "<<GraphIter<<endl;
	#endif 
	
	/* // run acts
	cout<<"--------------***************------------------------------------ topkernelP10: processing instance 0"<<endl;
	// topkernelproc_embedded(kvdram0);
	topkernelproc_embedded(kvdram2);// CRITICAL REMOVEME.
	exit(EXIT_SUCCESS); // 	
	cout<<"--------------***************------------------------------------ topkernelP10: processing instance 1"<<endl;
	// topkernelproc_embedded(kvdram1);
	topkernelproc_embedded(kvdram2);// CRITICAL REMOVEME.
	exit(EXIT_SUCCESS); // 	
	cout<<"--------------***************------------------------------------ topkernelP10: processing instance 2"<<endl;
	// topkernelproc_embedded(kvdram2);
	topkernelproc_embedded(kvdram2);// CRITICAL REMOVEME.
	exit(EXIT_SUCCESS); // 	
	cout<<"--------------***************------------------------------------ topkernelP10: processing instance 3"<<endl;
	// topkernelproc_embedded(kvdram3);
	topkernelproc_embedded(kvdram2);// CRITICAL REMOVEME.
	exit(EXIT_SUCCESS); // 	
	cout<<"--------------***************------------------------------------ topkernelP10: processing instance 4"<<endl;
	// topkernelproc_embedded(kvdram4);
	topkernelproc_embedded(kvdram2);// CRITICAL REMOVEME.
	exit(EXIT_SUCCESS); // 	
	cout<<"--------------***************------------------------------------ topkernelP10: processing instance 5"<<endl;
	// topkernelproc_embedded(kvdram5);
	topkernelproc_embedded(kvdram2);// CRITICAL REMOVEME.
	exit(EXIT_SUCCESS); // 	
	cout<<"--------------***************------------------------------------ topkernelP10: processing instance 6"<<endl;
	// topkernelproc_embedded(kvdram6);
	topkernelproc_embedded(kvdram2);// CRITICAL REMOVEME.
	exit(EXIT_SUCCESS); // 	
	cout<<"--------------***************------------------------------------ topkernelP10: processing instance 7"<<endl;
	// topkernelproc_embedded(kvdram7);
	topkernelproc_embedded(kvdram2);// CRITICAL REMOVEME.
	exit(EXIT_SUCCESS); // 	
	cout<<"--------------***************------------------------------------ topkernelP10: processing instance 8"<<endl;
	// topkernelproc_embedded(kvdram8);
	topkernelproc_embedded(kvdram2);// CRITICAL REMOVEME.
	exit(EXIT_SUCCESS); // 	
	cout<<"--------------***************------------------------------------ topkernelP10: processing instance 9"<<endl;
	// topkernelproc_embedded(kvdram9);
	topkernelproc_embedded(kvdram2);// CRITICAL REMOVEME.
	exit(EXIT_SUCCESS); // 	
 */
	
	// run acts
	cout<<"--------------***************------------------------------------ topkernelP10: processing instance 0"<<endl;
	topkernelproc_embedded(kvdram0);	
	//  // // CRITICAL REMOVEME.	
	cout<<"--------------***************------------------------------------ topkernelP10: processing instance 1"<<endl;
	topkernelproc_embedded(kvdram1);	
	//  // // CRITICAL REMOVEME.	
	cout<<"--------------***************------------------------------------ topkernelP10: processing instance 2"<<endl;
	topkernelproc_embedded(kvdram2);	
	// topkernelproc_embedded(kvdram2);exit(EXIT_SUCCESS); // // CRITICAL REMOVEME.	
	cout<<"--------------***************------------------------------------ topkernelP10: processing instance 3"<<endl;
	topkernelproc_embedded(kvdram3);	
	//  // // CRITICAL REMOVEME.	
	cout<<"--------------***************------------------------------------ topkernelP10: processing instance 4"<<endl;
	topkernelproc_embedded(kvdram4);	
	//  // // CRITICAL REMOVEME.	
	cout<<"--------------***************------------------------------------ topkernelP10: processing instance 5"<<endl;
	topkernelproc_embedded(kvdram5);	
	//  // // CRITICAL REMOVEME.	
	cout<<"--------------***************------------------------------------ topkernelP10: processing instance 6"<<endl;
	topkernelproc_embedded(kvdram6);	
	//  // // CRITICAL REMOVEME.	
	cout<<"--------------***************------------------------------------ topkernelP10: processing instance 7"<<endl;
	topkernelproc_embedded(kvdram7);	
	//  // // CRITICAL REMOVEME.	
	cout<<"--------------***************------------------------------------ topkernelP10: processing instance 8"<<endl;
	topkernelproc_embedded(kvdram8);	
	//  // // CRITICAL REMOVEME.	
	cout<<"--------------***************------------------------------------ topkernelP10: processing instance 9"<<endl;
	topkernelproc_embedded(kvdram9);	
	//  // // CRITICAL REMOVEME.	
	
	/** TOPKERNEL10_BASELOOP1: for(batch_type source_partition=0; source_partition<256; source_partition+=1){ // AUTOMATEME.
		#ifdef _DEBUGMODE_KERNELPRINTS2
		actsutilityobj->print3("### TOPKERNEL10_BASELOOP1:: source_partition", "currentLOP", "NAp", source_partition, currentLOP, NAp); 							
		#endif
		
		bool_type enablereduce = OFF; 
		unsigned int ntravszs = 0;
		rtravstates[0] = gettravstate(ON, kvdram0, globalparamsK, currentLOP, sourcestatsmarker);
		rtravstates[1] = gettravstate(ON, kvdram1, globalparamsK, currentLOP, sourcestatsmarker);
		rtravstates[2] = gettravstate(ON, kvdram2, globalparamsK, currentLOP, sourcestatsmarker);
		rtravstates[3] = gettravstate(ON, kvdram3, globalparamsK, currentLOP, sourcestatsmarker);
		rtravstates[4] = gettravstate(ON, kvdram4, globalparamsK, currentLOP, sourcestatsmarker);
		rtravstates[5] = gettravstate(ON, kvdram5, globalparamsK, currentLOP, sourcestatsmarker);
		rtravstates[6] = gettravstate(ON, kvdram6, globalparamsK, currentLOP, sourcestatsmarker);
		rtravstates[7] = gettravstate(ON, kvdram7, globalparamsK, currentLOP, sourcestatsmarker);
		rtravstates[8] = gettravstate(ON, kvdram8, globalparamsK, currentLOP, sourcestatsmarker);
		rtravstates[9] = gettravstate(ON, kvdram9, globalparamsK, currentLOP, sourcestatsmarker);
		for(unsigned int i = 0; i < 10; i++){ ntravszs += rtravstates[i].size_kvs; }
		if(ntravszs > 0){ enablereduce = ON; } else { enablereduce = OFF; }
		
		// read vertices
		readvdata(enablereduce, vdram, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs, vbuffer0, 0, 0, reducebuffersz, globalparamsV); 
		readvdata(enablereduce, vdram, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs + reducebuffersz, vbuffer0, 8, 0, reducebuffersz, globalparamsV); 
		readvdata(enablereduce, vdram, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs, vbuffer1, 0, 0, reducebuffersz, globalparamsV); 
		readvdata(enablereduce, vdram, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs + reducebuffersz, vbuffer1, 8, 0, reducebuffersz, globalparamsV); 
		readvdata(enablereduce, vdram, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs, vbuffer2, 0, 0, reducebuffersz, globalparamsV); 
		readvdata(enablereduce, vdram, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs + reducebuffersz, vbuffer2, 8, 0, reducebuffersz, globalparamsV); 
		readvdata(enablereduce, vdram, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs, vbuffer3, 0, 0, reducebuffersz, globalparamsV); 
		readvdata(enablereduce, vdram, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs + reducebuffersz, vbuffer3, 8, 0, reducebuffersz, globalparamsV); 
		readvdata(enablereduce, vdram, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs, vbuffer4, 0, 0, reducebuffersz, globalparamsV); 
		readvdata(enablereduce, vdram, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs + reducebuffersz, vbuffer4, 8, 0, reducebuffersz, globalparamsV); 
		readvdata(enablereduce, vdram, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs, vbuffer5, 0, 0, reducebuffersz, globalparamsV); 
		readvdata(enablereduce, vdram, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs + reducebuffersz, vbuffer5, 8, 0, reducebuffersz, globalparamsV); 
		readvdata(enablereduce, vdram, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs, vbuffer6, 0, 0, reducebuffersz, globalparamsV); 
		readvdata(enablereduce, vdram, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs + reducebuffersz, vbuffer6, 8, 0, reducebuffersz, globalparamsV); 
		readvdata(enablereduce, vdram, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs, vbuffer7, 0, 0, reducebuffersz, globalparamsV); 
		readvdata(enablereduce, vdram, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs + reducebuffersz, vbuffer7, 8, 0, reducebuffersz, globalparamsV); 
		readvdata(enablereduce, vdram, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs, vbuffer8, 0, 0, reducebuffersz, globalparamsV); 
		readvdata(enablereduce, vdram, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs + reducebuffersz, vbuffer8, 8, 0, reducebuffersz, globalparamsV); 
		readvdata(enablereduce, vdram, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs, vbuffer9, 0, 0, reducebuffersz, globalparamsV); 
		readvdata(enablereduce, vdram, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs + reducebuffersz, vbuffer9, 8, 0, reducebuffersz, globalparamsV); 
		
		// merge 
		merge10andsavevdata(enablereduce, vdram, vbuffer0,vbuffer1,vbuffer2,vbuffer3,vbuffer4,vbuffer5,vbuffer6,vbuffer7,vbuffer8,vbuffer9, 0, 0, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs); 
		merge10andsavevdata(enablereduce, vdram, vbuffer0,vbuffer1,vbuffer2,vbuffer3,vbuffer4,vbuffer5,vbuffer6,vbuffer7,vbuffer8,vbuffer9, 8, 0, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs + reducebuffersz); 
		
		// update stats
		if(enablereduce == ON){ buffer[source_partition] += 64; } 
		else { buffer[source_partition] += 0; }
	}	 */		
	return;
}
}
extern "C" {
void 
	#ifdef SW 
	actsproc:: 
	#endif
topkernelP11(
	uint512_dt * kvdram0,
	uint512_dt * kvdram1,
	uint512_dt * kvdram2,
	uint512_dt * kvdram3,
	uint512_dt * kvdram4,
	uint512_dt * kvdram5,
	uint512_dt * kvdram6,
	uint512_dt * kvdram7,
	uint512_dt * kvdram8,
	uint512_dt * kvdram9,
	uint512_dt * kvdram10,
	uint512_dt * vdram
	){
#ifdef EDGES_IN_SEPERATE_BUFFER_FROM_KVDRAM
#pragma HLS INTERFACE m_axi port = edges0 offset = slave bundle = gmem0
#pragma HLS INTERFACE m_axi port = kvdram0 offset = slave bundle = gmem1
#pragma HLS INTERFACE m_axi port = edges1 offset = slave bundle = gmem2
#pragma HLS INTERFACE m_axi port = kvdram1 offset = slave bundle = gmem3
#pragma HLS INTERFACE m_axi port = edges2 offset = slave bundle = gmem4
#pragma HLS INTERFACE m_axi port = kvdram2 offset = slave bundle = gmem5
#pragma HLS INTERFACE m_axi port = edges3 offset = slave bundle = gmem6
#pragma HLS INTERFACE m_axi port = kvdram3 offset = slave bundle = gmem7
#pragma HLS INTERFACE m_axi port = edges4 offset = slave bundle = gmem8
#pragma HLS INTERFACE m_axi port = kvdram4 offset = slave bundle = gmem9
#pragma HLS INTERFACE m_axi port = edges5 offset = slave bundle = gmem10
#pragma HLS INTERFACE m_axi port = kvdram5 offset = slave bundle = gmem11
#pragma HLS INTERFACE m_axi port = edges6 offset = slave bundle = gmem12
#pragma HLS INTERFACE m_axi port = kvdram6 offset = slave bundle = gmem13
#pragma HLS INTERFACE m_axi port = edges7 offset = slave bundle = gmem14
#pragma HLS INTERFACE m_axi port = kvdram7 offset = slave bundle = gmem15
#pragma HLS INTERFACE m_axi port = edges8 offset = slave bundle = gmem16
#pragma HLS INTERFACE m_axi port = kvdram8 offset = slave bundle = gmem17
#pragma HLS INTERFACE m_axi port = edges9 offset = slave bundle = gmem18
#pragma HLS INTERFACE m_axi port = kvdram9 offset = slave bundle = gmem19
#pragma HLS INTERFACE m_axi port = edges10 offset = slave bundle = gmem20
#pragma HLS INTERFACE m_axi port = kvdram10 offset = slave bundle = gmem21
#pragma HLS INTERFACE m_axi port = vdram offset = slave bundle = gmem22
#else 
#pragma HLS INTERFACE m_axi port = kvdram0 offset = slave bundle = gmem0
#pragma HLS INTERFACE m_axi port = kvdram1 offset = slave bundle = gmem1
#pragma HLS INTERFACE m_axi port = kvdram2 offset = slave bundle = gmem2
#pragma HLS INTERFACE m_axi port = kvdram3 offset = slave bundle = gmem3
#pragma HLS INTERFACE m_axi port = kvdram4 offset = slave bundle = gmem4
#pragma HLS INTERFACE m_axi port = kvdram5 offset = slave bundle = gmem5
#pragma HLS INTERFACE m_axi port = kvdram6 offset = slave bundle = gmem6
#pragma HLS INTERFACE m_axi port = kvdram7 offset = slave bundle = gmem7
#pragma HLS INTERFACE m_axi port = kvdram8 offset = slave bundle = gmem8
#pragma HLS INTERFACE m_axi port = kvdram9 offset = slave bundle = gmem9
#pragma HLS INTERFACE m_axi port = kvdram10 offset = slave bundle = gmem10
#pragma HLS INTERFACE m_axi port = vdram offset = slave bundle = gmem11
#endif 

#ifdef EDGES_IN_SEPERATE_BUFFER_FROM_KVDRAM
#pragma HLS INTERFACE s_axilite port = edges0 bundle = control
#pragma HLS INTERFACE s_axilite port = edges1 bundle = control
#pragma HLS INTERFACE s_axilite port = edges2 bundle = control
#pragma HLS INTERFACE s_axilite port = edges3 bundle = control
#pragma HLS INTERFACE s_axilite port = edges4 bundle = control
#pragma HLS INTERFACE s_axilite port = edges5 bundle = control
#pragma HLS INTERFACE s_axilite port = edges6 bundle = control
#pragma HLS INTERFACE s_axilite port = edges7 bundle = control
#pragma HLS INTERFACE s_axilite port = edges8 bundle = control
#pragma HLS INTERFACE s_axilite port = edges9 bundle = control
#pragma HLS INTERFACE s_axilite port = edges10 bundle = control
#endif 
#pragma HLS INTERFACE s_axilite port = kvdram0 bundle = control
#pragma HLS INTERFACE s_axilite port = kvdram1 bundle = control
#pragma HLS INTERFACE s_axilite port = kvdram2 bundle = control
#pragma HLS INTERFACE s_axilite port = kvdram3 bundle = control
#pragma HLS INTERFACE s_axilite port = kvdram4 bundle = control
#pragma HLS INTERFACE s_axilite port = kvdram5 bundle = control
#pragma HLS INTERFACE s_axilite port = kvdram6 bundle = control
#pragma HLS INTERFACE s_axilite port = kvdram7 bundle = control
#pragma HLS INTERFACE s_axilite port = kvdram8 bundle = control
#pragma HLS INTERFACE s_axilite port = kvdram9 bundle = control
#pragma HLS INTERFACE s_axilite port = kvdram10 bundle = control

#pragma HLS INTERFACE s_axilite port = vdram bundle = control

#pragma HLS INTERFACE s_axilite port=return bundle=control

#ifdef EDGES_IN_SEPERATE_BUFFER_FROM_KVDRAM
#pragma HLS DATA_PACK variable = edges0
#pragma HLS DATA_PACK variable = edges1
#pragma HLS DATA_PACK variable = edges2
#pragma HLS DATA_PACK variable = edges3
#pragma HLS DATA_PACK variable = edges4
#pragma HLS DATA_PACK variable = edges5
#pragma HLS DATA_PACK variable = edges6
#pragma HLS DATA_PACK variable = edges7
#pragma HLS DATA_PACK variable = edges8
#pragma HLS DATA_PACK variable = edges9
#pragma HLS DATA_PACK variable = edges10
#endif 
#pragma HLS DATA_PACK variable = kvdram0
#pragma HLS DATA_PACK variable = kvdram1
#pragma HLS DATA_PACK variable = kvdram2
#pragma HLS DATA_PACK variable = kvdram3
#pragma HLS DATA_PACK variable = kvdram4
#pragma HLS DATA_PACK variable = kvdram5
#pragma HLS DATA_PACK variable = kvdram6
#pragma HLS DATA_PACK variable = kvdram7
#pragma HLS DATA_PACK variable = kvdram8
#pragma HLS DATA_PACK variable = kvdram9
#pragma HLS DATA_PACK variable = kvdram10
#pragma HLS DATA_PACK variable = vdram

	#if defined(_DEBUGMODE_KERNELPRINTS2) & defined(ALLVERTEXISACTIVE_ALGORITHM)
	cout<<">>> ====================== Light weight ACTS (PR & SYNC) Launched... ====================== "<<endl; 
	#endif
	
	unsigned int GraphIter = GETKEYENTRY(kvdram0[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_ALGORITHMINFO_GRAPHITERATIONID], 0);
	#ifdef _DEBUGMODE_KERNELPRINTS2
	cout<<">>> swkernel::runapp: Iteration: "<<GraphIter<<endl;
	#endif 
	
	/* // run acts
	cout<<"--------------***************------------------------------------ topkernelP11: processing instance 0"<<endl;
	// topkernelproc_embedded(kvdram0);
	topkernelproc_embedded(kvdram2);// CRITICAL REMOVEME.
	exit(EXIT_SUCCESS); // 	
	cout<<"--------------***************------------------------------------ topkernelP11: processing instance 1"<<endl;
	// topkernelproc_embedded(kvdram1);
	topkernelproc_embedded(kvdram2);// CRITICAL REMOVEME.
	exit(EXIT_SUCCESS); // 	
	cout<<"--------------***************------------------------------------ topkernelP11: processing instance 2"<<endl;
	// topkernelproc_embedded(kvdram2);
	topkernelproc_embedded(kvdram2);// CRITICAL REMOVEME.
	exit(EXIT_SUCCESS); // 	
	cout<<"--------------***************------------------------------------ topkernelP11: processing instance 3"<<endl;
	// topkernelproc_embedded(kvdram3);
	topkernelproc_embedded(kvdram2);// CRITICAL REMOVEME.
	exit(EXIT_SUCCESS); // 	
	cout<<"--------------***************------------------------------------ topkernelP11: processing instance 4"<<endl;
	// topkernelproc_embedded(kvdram4);
	topkernelproc_embedded(kvdram2);// CRITICAL REMOVEME.
	exit(EXIT_SUCCESS); // 	
	cout<<"--------------***************------------------------------------ topkernelP11: processing instance 5"<<endl;
	// topkernelproc_embedded(kvdram5);
	topkernelproc_embedded(kvdram2);// CRITICAL REMOVEME.
	exit(EXIT_SUCCESS); // 	
	cout<<"--------------***************------------------------------------ topkernelP11: processing instance 6"<<endl;
	// topkernelproc_embedded(kvdram6);
	topkernelproc_embedded(kvdram2);// CRITICAL REMOVEME.
	exit(EXIT_SUCCESS); // 	
	cout<<"--------------***************------------------------------------ topkernelP11: processing instance 7"<<endl;
	// topkernelproc_embedded(kvdram7);
	topkernelproc_embedded(kvdram2);// CRITICAL REMOVEME.
	exit(EXIT_SUCCESS); // 	
	cout<<"--------------***************------------------------------------ topkernelP11: processing instance 8"<<endl;
	// topkernelproc_embedded(kvdram8);
	topkernelproc_embedded(kvdram2);// CRITICAL REMOVEME.
	exit(EXIT_SUCCESS); // 	
	cout<<"--------------***************------------------------------------ topkernelP11: processing instance 9"<<endl;
	// topkernelproc_embedded(kvdram9);
	topkernelproc_embedded(kvdram2);// CRITICAL REMOVEME.
	exit(EXIT_SUCCESS); // 	
	cout<<"--------------***************------------------------------------ topkernelP11: processing instance 10"<<endl;
	// topkernelproc_embedded(kvdram10);
	topkernelproc_embedded(kvdram2);// CRITICAL REMOVEME.
	exit(EXIT_SUCCESS); // 	
 */
	
	// run acts
	cout<<"--------------***************------------------------------------ topkernelP11: processing instance 0"<<endl;
	topkernelproc_embedded(kvdram0);	
	//  // // CRITICAL REMOVEME.	
	cout<<"--------------***************------------------------------------ topkernelP11: processing instance 1"<<endl;
	topkernelproc_embedded(kvdram1);	
	//  // // CRITICAL REMOVEME.	
	cout<<"--------------***************------------------------------------ topkernelP11: processing instance 2"<<endl;
	topkernelproc_embedded(kvdram2);	
	// topkernelproc_embedded(kvdram2);exit(EXIT_SUCCESS); // // CRITICAL REMOVEME.	
	cout<<"--------------***************------------------------------------ topkernelP11: processing instance 3"<<endl;
	topkernelproc_embedded(kvdram3);	
	//  // // CRITICAL REMOVEME.	
	cout<<"--------------***************------------------------------------ topkernelP11: processing instance 4"<<endl;
	topkernelproc_embedded(kvdram4);	
	//  // // CRITICAL REMOVEME.	
	cout<<"--------------***************------------------------------------ topkernelP11: processing instance 5"<<endl;
	topkernelproc_embedded(kvdram5);	
	//  // // CRITICAL REMOVEME.	
	cout<<"--------------***************------------------------------------ topkernelP11: processing instance 6"<<endl;
	topkernelproc_embedded(kvdram6);	
	//  // // CRITICAL REMOVEME.	
	cout<<"--------------***************------------------------------------ topkernelP11: processing instance 7"<<endl;
	topkernelproc_embedded(kvdram7);	
	//  // // CRITICAL REMOVEME.	
	cout<<"--------------***************------------------------------------ topkernelP11: processing instance 8"<<endl;
	topkernelproc_embedded(kvdram8);	
	//  // // CRITICAL REMOVEME.	
	cout<<"--------------***************------------------------------------ topkernelP11: processing instance 9"<<endl;
	topkernelproc_embedded(kvdram9);	
	//  // // CRITICAL REMOVEME.	
	cout<<"--------------***************------------------------------------ topkernelP11: processing instance 10"<<endl;
	topkernelproc_embedded(kvdram10);	
	//  // // CRITICAL REMOVEME.	
	
	/** TOPKERNEL11_BASELOOP1: for(batch_type source_partition=0; source_partition<256; source_partition+=1){ // AUTOMATEME.
		#ifdef _DEBUGMODE_KERNELPRINTS2
		actsutilityobj->print3("### TOPKERNEL11_BASELOOP1:: source_partition", "currentLOP", "NAp", source_partition, currentLOP, NAp); 							
		#endif
		
		bool_type enablereduce = OFF; 
		unsigned int ntravszs = 0;
		rtravstates[0] = gettravstate(ON, kvdram0, globalparamsK, currentLOP, sourcestatsmarker);
		rtravstates[1] = gettravstate(ON, kvdram1, globalparamsK, currentLOP, sourcestatsmarker);
		rtravstates[2] = gettravstate(ON, kvdram2, globalparamsK, currentLOP, sourcestatsmarker);
		rtravstates[3] = gettravstate(ON, kvdram3, globalparamsK, currentLOP, sourcestatsmarker);
		rtravstates[4] = gettravstate(ON, kvdram4, globalparamsK, currentLOP, sourcestatsmarker);
		rtravstates[5] = gettravstate(ON, kvdram5, globalparamsK, currentLOP, sourcestatsmarker);
		rtravstates[6] = gettravstate(ON, kvdram6, globalparamsK, currentLOP, sourcestatsmarker);
		rtravstates[7] = gettravstate(ON, kvdram7, globalparamsK, currentLOP, sourcestatsmarker);
		rtravstates[8] = gettravstate(ON, kvdram8, globalparamsK, currentLOP, sourcestatsmarker);
		rtravstates[9] = gettravstate(ON, kvdram9, globalparamsK, currentLOP, sourcestatsmarker);
		rtravstates[10] = gettravstate(ON, kvdram10, globalparamsK, currentLOP, sourcestatsmarker);
		for(unsigned int i = 0; i < 11; i++){ ntravszs += rtravstates[i].size_kvs; }
		if(ntravszs > 0){ enablereduce = ON; } else { enablereduce = OFF; }
		
		// read vertices
		readvdata(enablereduce, vdram, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs, vbuffer0, 0, 0, reducebuffersz, globalparamsV); 
		readvdata(enablereduce, vdram, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs + reducebuffersz, vbuffer0, 8, 0, reducebuffersz, globalparamsV); 
		readvdata(enablereduce, vdram, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs, vbuffer1, 0, 0, reducebuffersz, globalparamsV); 
		readvdata(enablereduce, vdram, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs + reducebuffersz, vbuffer1, 8, 0, reducebuffersz, globalparamsV); 
		readvdata(enablereduce, vdram, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs, vbuffer2, 0, 0, reducebuffersz, globalparamsV); 
		readvdata(enablereduce, vdram, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs + reducebuffersz, vbuffer2, 8, 0, reducebuffersz, globalparamsV); 
		readvdata(enablereduce, vdram, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs, vbuffer3, 0, 0, reducebuffersz, globalparamsV); 
		readvdata(enablereduce, vdram, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs + reducebuffersz, vbuffer3, 8, 0, reducebuffersz, globalparamsV); 
		readvdata(enablereduce, vdram, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs, vbuffer4, 0, 0, reducebuffersz, globalparamsV); 
		readvdata(enablereduce, vdram, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs + reducebuffersz, vbuffer4, 8, 0, reducebuffersz, globalparamsV); 
		readvdata(enablereduce, vdram, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs, vbuffer5, 0, 0, reducebuffersz, globalparamsV); 
		readvdata(enablereduce, vdram, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs + reducebuffersz, vbuffer5, 8, 0, reducebuffersz, globalparamsV); 
		readvdata(enablereduce, vdram, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs, vbuffer6, 0, 0, reducebuffersz, globalparamsV); 
		readvdata(enablereduce, vdram, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs + reducebuffersz, vbuffer6, 8, 0, reducebuffersz, globalparamsV); 
		readvdata(enablereduce, vdram, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs, vbuffer7, 0, 0, reducebuffersz, globalparamsV); 
		readvdata(enablereduce, vdram, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs + reducebuffersz, vbuffer7, 8, 0, reducebuffersz, globalparamsV); 
		readvdata(enablereduce, vdram, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs, vbuffer8, 0, 0, reducebuffersz, globalparamsV); 
		readvdata(enablereduce, vdram, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs + reducebuffersz, vbuffer8, 8, 0, reducebuffersz, globalparamsV); 
		readvdata(enablereduce, vdram, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs, vbuffer9, 0, 0, reducebuffersz, globalparamsV); 
		readvdata(enablereduce, vdram, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs + reducebuffersz, vbuffer9, 8, 0, reducebuffersz, globalparamsV); 
		readvdata(enablereduce, vdram, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs, vbuffer10, 0, 0, reducebuffersz, globalparamsV); 
		readvdata(enablereduce, vdram, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs + reducebuffersz, vbuffer10, 8, 0, reducebuffersz, globalparamsV); 
		
		// merge 
		merge11andsavevdata(enablereduce, vdram, vbuffer0,vbuffer1,vbuffer2,vbuffer3,vbuffer4,vbuffer5,vbuffer6,vbuffer7,vbuffer8,vbuffer9,vbuffer10, 0, 0, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs); 
		merge11andsavevdata(enablereduce, vdram, vbuffer0,vbuffer1,vbuffer2,vbuffer3,vbuffer4,vbuffer5,vbuffer6,vbuffer7,vbuffer8,vbuffer9,vbuffer10, 8, 0, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs + reducebuffersz); 
		
		// update stats
		if(enablereduce == ON){ buffer[source_partition] += 64; } 
		else { buffer[source_partition] += 0; }
	}	 */		
	return;
}
}
extern "C" {
void 
	#ifdef SW 
	actsproc:: 
	#endif
topkernelP12(
	uint512_dt * kvdram0,
	uint512_dt * kvdram1,
	uint512_dt * kvdram2,
	uint512_dt * kvdram3,
	uint512_dt * kvdram4,
	uint512_dt * kvdram5,
	uint512_dt * kvdram6,
	uint512_dt * kvdram7,
	uint512_dt * kvdram8,
	uint512_dt * kvdram9,
	uint512_dt * kvdram10,
	uint512_dt * kvdram11,
	uint512_dt * vdram
	){
#ifdef EDGES_IN_SEPERATE_BUFFER_FROM_KVDRAM
#pragma HLS INTERFACE m_axi port = edges0 offset = slave bundle = gmem0
#pragma HLS INTERFACE m_axi port = kvdram0 offset = slave bundle = gmem1
#pragma HLS INTERFACE m_axi port = edges1 offset = slave bundle = gmem2
#pragma HLS INTERFACE m_axi port = kvdram1 offset = slave bundle = gmem3
#pragma HLS INTERFACE m_axi port = edges2 offset = slave bundle = gmem4
#pragma HLS INTERFACE m_axi port = kvdram2 offset = slave bundle = gmem5
#pragma HLS INTERFACE m_axi port = edges3 offset = slave bundle = gmem6
#pragma HLS INTERFACE m_axi port = kvdram3 offset = slave bundle = gmem7
#pragma HLS INTERFACE m_axi port = edges4 offset = slave bundle = gmem8
#pragma HLS INTERFACE m_axi port = kvdram4 offset = slave bundle = gmem9
#pragma HLS INTERFACE m_axi port = edges5 offset = slave bundle = gmem10
#pragma HLS INTERFACE m_axi port = kvdram5 offset = slave bundle = gmem11
#pragma HLS INTERFACE m_axi port = edges6 offset = slave bundle = gmem12
#pragma HLS INTERFACE m_axi port = kvdram6 offset = slave bundle = gmem13
#pragma HLS INTERFACE m_axi port = edges7 offset = slave bundle = gmem14
#pragma HLS INTERFACE m_axi port = kvdram7 offset = slave bundle = gmem15
#pragma HLS INTERFACE m_axi port = edges8 offset = slave bundle = gmem16
#pragma HLS INTERFACE m_axi port = kvdram8 offset = slave bundle = gmem17
#pragma HLS INTERFACE m_axi port = edges9 offset = slave bundle = gmem18
#pragma HLS INTERFACE m_axi port = kvdram9 offset = slave bundle = gmem19
#pragma HLS INTERFACE m_axi port = edges10 offset = slave bundle = gmem20
#pragma HLS INTERFACE m_axi port = kvdram10 offset = slave bundle = gmem21
#pragma HLS INTERFACE m_axi port = edges11 offset = slave bundle = gmem22
#pragma HLS INTERFACE m_axi port = kvdram11 offset = slave bundle = gmem23
#pragma HLS INTERFACE m_axi port = vdram offset = slave bundle = gmem24
#else 
#pragma HLS INTERFACE m_axi port = kvdram0 offset = slave bundle = gmem0
#pragma HLS INTERFACE m_axi port = kvdram1 offset = slave bundle = gmem1
#pragma HLS INTERFACE m_axi port = kvdram2 offset = slave bundle = gmem2
#pragma HLS INTERFACE m_axi port = kvdram3 offset = slave bundle = gmem3
#pragma HLS INTERFACE m_axi port = kvdram4 offset = slave bundle = gmem4
#pragma HLS INTERFACE m_axi port = kvdram5 offset = slave bundle = gmem5
#pragma HLS INTERFACE m_axi port = kvdram6 offset = slave bundle = gmem6
#pragma HLS INTERFACE m_axi port = kvdram7 offset = slave bundle = gmem7
#pragma HLS INTERFACE m_axi port = kvdram8 offset = slave bundle = gmem8
#pragma HLS INTERFACE m_axi port = kvdram9 offset = slave bundle = gmem9
#pragma HLS INTERFACE m_axi port = kvdram10 offset = slave bundle = gmem10
#pragma HLS INTERFACE m_axi port = kvdram11 offset = slave bundle = gmem11
#pragma HLS INTERFACE m_axi port = vdram offset = slave bundle = gmem12
#endif 

#ifdef EDGES_IN_SEPERATE_BUFFER_FROM_KVDRAM
#pragma HLS INTERFACE s_axilite port = edges0 bundle = control
#pragma HLS INTERFACE s_axilite port = edges1 bundle = control
#pragma HLS INTERFACE s_axilite port = edges2 bundle = control
#pragma HLS INTERFACE s_axilite port = edges3 bundle = control
#pragma HLS INTERFACE s_axilite port = edges4 bundle = control
#pragma HLS INTERFACE s_axilite port = edges5 bundle = control
#pragma HLS INTERFACE s_axilite port = edges6 bundle = control
#pragma HLS INTERFACE s_axilite port = edges7 bundle = control
#pragma HLS INTERFACE s_axilite port = edges8 bundle = control
#pragma HLS INTERFACE s_axilite port = edges9 bundle = control
#pragma HLS INTERFACE s_axilite port = edges10 bundle = control
#pragma HLS INTERFACE s_axilite port = edges11 bundle = control
#endif 
#pragma HLS INTERFACE s_axilite port = kvdram0 bundle = control
#pragma HLS INTERFACE s_axilite port = kvdram1 bundle = control
#pragma HLS INTERFACE s_axilite port = kvdram2 bundle = control
#pragma HLS INTERFACE s_axilite port = kvdram3 bundle = control
#pragma HLS INTERFACE s_axilite port = kvdram4 bundle = control
#pragma HLS INTERFACE s_axilite port = kvdram5 bundle = control
#pragma HLS INTERFACE s_axilite port = kvdram6 bundle = control
#pragma HLS INTERFACE s_axilite port = kvdram7 bundle = control
#pragma HLS INTERFACE s_axilite port = kvdram8 bundle = control
#pragma HLS INTERFACE s_axilite port = kvdram9 bundle = control
#pragma HLS INTERFACE s_axilite port = kvdram10 bundle = control
#pragma HLS INTERFACE s_axilite port = kvdram11 bundle = control

#pragma HLS INTERFACE s_axilite port = vdram bundle = control

#pragma HLS INTERFACE s_axilite port=return bundle=control

#ifdef EDGES_IN_SEPERATE_BUFFER_FROM_KVDRAM
#pragma HLS DATA_PACK variable = edges0
#pragma HLS DATA_PACK variable = edges1
#pragma HLS DATA_PACK variable = edges2
#pragma HLS DATA_PACK variable = edges3
#pragma HLS DATA_PACK variable = edges4
#pragma HLS DATA_PACK variable = edges5
#pragma HLS DATA_PACK variable = edges6
#pragma HLS DATA_PACK variable = edges7
#pragma HLS DATA_PACK variable = edges8
#pragma HLS DATA_PACK variable = edges9
#pragma HLS DATA_PACK variable = edges10
#pragma HLS DATA_PACK variable = edges11
#endif 
#pragma HLS DATA_PACK variable = kvdram0
#pragma HLS DATA_PACK variable = kvdram1
#pragma HLS DATA_PACK variable = kvdram2
#pragma HLS DATA_PACK variable = kvdram3
#pragma HLS DATA_PACK variable = kvdram4
#pragma HLS DATA_PACK variable = kvdram5
#pragma HLS DATA_PACK variable = kvdram6
#pragma HLS DATA_PACK variable = kvdram7
#pragma HLS DATA_PACK variable = kvdram8
#pragma HLS DATA_PACK variable = kvdram9
#pragma HLS DATA_PACK variable = kvdram10
#pragma HLS DATA_PACK variable = kvdram11
#pragma HLS DATA_PACK variable = vdram

	#if defined(_DEBUGMODE_KERNELPRINTS2) & defined(ALLVERTEXISACTIVE_ALGORITHM)
	cout<<">>> ====================== Light weight ACTS (PR & SYNC) Launched... ====================== "<<endl; 
	#endif
	
	unsigned int GraphIter = GETKEYENTRY(kvdram0[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_ALGORITHMINFO_GRAPHITERATIONID], 0);
	#ifdef _DEBUGMODE_KERNELPRINTS2
	cout<<">>> swkernel::runapp: Iteration: "<<GraphIter<<endl;
	#endif 
	
	/* // run acts
	cout<<"--------------***************------------------------------------ topkernelP12: processing instance 0"<<endl;
	// topkernelproc_embedded(kvdram0);
	topkernelproc_embedded(kvdram2);// CRITICAL REMOVEME.
	exit(EXIT_SUCCESS); // 	
	cout<<"--------------***************------------------------------------ topkernelP12: processing instance 1"<<endl;
	// topkernelproc_embedded(kvdram1);
	topkernelproc_embedded(kvdram2);// CRITICAL REMOVEME.
	exit(EXIT_SUCCESS); // 	
	cout<<"--------------***************------------------------------------ topkernelP12: processing instance 2"<<endl;
	// topkernelproc_embedded(kvdram2);
	topkernelproc_embedded(kvdram2);// CRITICAL REMOVEME.
	exit(EXIT_SUCCESS); // 	
	cout<<"--------------***************------------------------------------ topkernelP12: processing instance 3"<<endl;
	// topkernelproc_embedded(kvdram3);
	topkernelproc_embedded(kvdram2);// CRITICAL REMOVEME.
	exit(EXIT_SUCCESS); // 	
	cout<<"--------------***************------------------------------------ topkernelP12: processing instance 4"<<endl;
	// topkernelproc_embedded(kvdram4);
	topkernelproc_embedded(kvdram2);// CRITICAL REMOVEME.
	exit(EXIT_SUCCESS); // 	
	cout<<"--------------***************------------------------------------ topkernelP12: processing instance 5"<<endl;
	// topkernelproc_embedded(kvdram5);
	topkernelproc_embedded(kvdram2);// CRITICAL REMOVEME.
	exit(EXIT_SUCCESS); // 	
	cout<<"--------------***************------------------------------------ topkernelP12: processing instance 6"<<endl;
	// topkernelproc_embedded(kvdram6);
	topkernelproc_embedded(kvdram2);// CRITICAL REMOVEME.
	exit(EXIT_SUCCESS); // 	
	cout<<"--------------***************------------------------------------ topkernelP12: processing instance 7"<<endl;
	// topkernelproc_embedded(kvdram7);
	topkernelproc_embedded(kvdram2);// CRITICAL REMOVEME.
	exit(EXIT_SUCCESS); // 	
	cout<<"--------------***************------------------------------------ topkernelP12: processing instance 8"<<endl;
	// topkernelproc_embedded(kvdram8);
	topkernelproc_embedded(kvdram2);// CRITICAL REMOVEME.
	exit(EXIT_SUCCESS); // 	
	cout<<"--------------***************------------------------------------ topkernelP12: processing instance 9"<<endl;
	// topkernelproc_embedded(kvdram9);
	topkernelproc_embedded(kvdram2);// CRITICAL REMOVEME.
	exit(EXIT_SUCCESS); // 	
	cout<<"--------------***************------------------------------------ topkernelP12: processing instance 10"<<endl;
	// topkernelproc_embedded(kvdram10);
	topkernelproc_embedded(kvdram2);// CRITICAL REMOVEME.
	exit(EXIT_SUCCESS); // 	
	cout<<"--------------***************------------------------------------ topkernelP12: processing instance 11"<<endl;
	// topkernelproc_embedded(kvdram11);
	topkernelproc_embedded(kvdram2);// CRITICAL REMOVEME.
	exit(EXIT_SUCCESS); // 	
 */
	
	// run acts
	cout<<"--------------***************------------------------------------ topkernelP12: processing instance 0"<<endl;
	topkernelproc_embedded(kvdram0);	
	//  // // CRITICAL REMOVEME.	
	cout<<"--------------***************------------------------------------ topkernelP12: processing instance 1"<<endl;
	topkernelproc_embedded(kvdram1);	
	//  // // CRITICAL REMOVEME.	
	cout<<"--------------***************------------------------------------ topkernelP12: processing instance 2"<<endl;
	topkernelproc_embedded(kvdram2);	
	// topkernelproc_embedded(kvdram2);exit(EXIT_SUCCESS); // // CRITICAL REMOVEME.	
	cout<<"--------------***************------------------------------------ topkernelP12: processing instance 3"<<endl;
	topkernelproc_embedded(kvdram3);	
	//  // // CRITICAL REMOVEME.	
	cout<<"--------------***************------------------------------------ topkernelP12: processing instance 4"<<endl;
	topkernelproc_embedded(kvdram4);	
	//  // // CRITICAL REMOVEME.	
	cout<<"--------------***************------------------------------------ topkernelP12: processing instance 5"<<endl;
	topkernelproc_embedded(kvdram5);	
	//  // // CRITICAL REMOVEME.	
	cout<<"--------------***************------------------------------------ topkernelP12: processing instance 6"<<endl;
	topkernelproc_embedded(kvdram6);	
	//  // // CRITICAL REMOVEME.	
	cout<<"--------------***************------------------------------------ topkernelP12: processing instance 7"<<endl;
	topkernelproc_embedded(kvdram7);	
	//  // // CRITICAL REMOVEME.	
	cout<<"--------------***************------------------------------------ topkernelP12: processing instance 8"<<endl;
	topkernelproc_embedded(kvdram8);	
	//  // // CRITICAL REMOVEME.	
	cout<<"--------------***************------------------------------------ topkernelP12: processing instance 9"<<endl;
	topkernelproc_embedded(kvdram9);	
	//  // // CRITICAL REMOVEME.	
	cout<<"--------------***************------------------------------------ topkernelP12: processing instance 10"<<endl;
	topkernelproc_embedded(kvdram10);	
	//  // // CRITICAL REMOVEME.	
	cout<<"--------------***************------------------------------------ topkernelP12: processing instance 11"<<endl;
	topkernelproc_embedded(kvdram11);	
	//  // // CRITICAL REMOVEME.	
	
	/** TOPKERNEL12_BASELOOP1: for(batch_type source_partition=0; source_partition<256; source_partition+=1){ // AUTOMATEME.
		#ifdef _DEBUGMODE_KERNELPRINTS2
		actsutilityobj->print3("### TOPKERNEL12_BASELOOP1:: source_partition", "currentLOP", "NAp", source_partition, currentLOP, NAp); 							
		#endif
		
		bool_type enablereduce = OFF; 
		unsigned int ntravszs = 0;
		rtravstates[0] = gettravstate(ON, kvdram0, globalparamsK, currentLOP, sourcestatsmarker);
		rtravstates[1] = gettravstate(ON, kvdram1, globalparamsK, currentLOP, sourcestatsmarker);
		rtravstates[2] = gettravstate(ON, kvdram2, globalparamsK, currentLOP, sourcestatsmarker);
		rtravstates[3] = gettravstate(ON, kvdram3, globalparamsK, currentLOP, sourcestatsmarker);
		rtravstates[4] = gettravstate(ON, kvdram4, globalparamsK, currentLOP, sourcestatsmarker);
		rtravstates[5] = gettravstate(ON, kvdram5, globalparamsK, currentLOP, sourcestatsmarker);
		rtravstates[6] = gettravstate(ON, kvdram6, globalparamsK, currentLOP, sourcestatsmarker);
		rtravstates[7] = gettravstate(ON, kvdram7, globalparamsK, currentLOP, sourcestatsmarker);
		rtravstates[8] = gettravstate(ON, kvdram8, globalparamsK, currentLOP, sourcestatsmarker);
		rtravstates[9] = gettravstate(ON, kvdram9, globalparamsK, currentLOP, sourcestatsmarker);
		rtravstates[10] = gettravstate(ON, kvdram10, globalparamsK, currentLOP, sourcestatsmarker);
		rtravstates[11] = gettravstate(ON, kvdram11, globalparamsK, currentLOP, sourcestatsmarker);
		for(unsigned int i = 0; i < 12; i++){ ntravszs += rtravstates[i].size_kvs; }
		if(ntravszs > 0){ enablereduce = ON; } else { enablereduce = OFF; }
		
		// read vertices
		readvdata(enablereduce, vdram, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs, vbuffer0, 0, 0, reducebuffersz, globalparamsV); 
		readvdata(enablereduce, vdram, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs + reducebuffersz, vbuffer0, 8, 0, reducebuffersz, globalparamsV); 
		readvdata(enablereduce, vdram, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs, vbuffer1, 0, 0, reducebuffersz, globalparamsV); 
		readvdata(enablereduce, vdram, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs + reducebuffersz, vbuffer1, 8, 0, reducebuffersz, globalparamsV); 
		readvdata(enablereduce, vdram, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs, vbuffer2, 0, 0, reducebuffersz, globalparamsV); 
		readvdata(enablereduce, vdram, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs + reducebuffersz, vbuffer2, 8, 0, reducebuffersz, globalparamsV); 
		readvdata(enablereduce, vdram, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs, vbuffer3, 0, 0, reducebuffersz, globalparamsV); 
		readvdata(enablereduce, vdram, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs + reducebuffersz, vbuffer3, 8, 0, reducebuffersz, globalparamsV); 
		readvdata(enablereduce, vdram, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs, vbuffer4, 0, 0, reducebuffersz, globalparamsV); 
		readvdata(enablereduce, vdram, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs + reducebuffersz, vbuffer4, 8, 0, reducebuffersz, globalparamsV); 
		readvdata(enablereduce, vdram, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs, vbuffer5, 0, 0, reducebuffersz, globalparamsV); 
		readvdata(enablereduce, vdram, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs + reducebuffersz, vbuffer5, 8, 0, reducebuffersz, globalparamsV); 
		readvdata(enablereduce, vdram, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs, vbuffer6, 0, 0, reducebuffersz, globalparamsV); 
		readvdata(enablereduce, vdram, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs + reducebuffersz, vbuffer6, 8, 0, reducebuffersz, globalparamsV); 
		readvdata(enablereduce, vdram, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs, vbuffer7, 0, 0, reducebuffersz, globalparamsV); 
		readvdata(enablereduce, vdram, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs + reducebuffersz, vbuffer7, 8, 0, reducebuffersz, globalparamsV); 
		readvdata(enablereduce, vdram, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs, vbuffer8, 0, 0, reducebuffersz, globalparamsV); 
		readvdata(enablereduce, vdram, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs + reducebuffersz, vbuffer8, 8, 0, reducebuffersz, globalparamsV); 
		readvdata(enablereduce, vdram, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs, vbuffer9, 0, 0, reducebuffersz, globalparamsV); 
		readvdata(enablereduce, vdram, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs + reducebuffersz, vbuffer9, 8, 0, reducebuffersz, globalparamsV); 
		readvdata(enablereduce, vdram, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs, vbuffer10, 0, 0, reducebuffersz, globalparamsV); 
		readvdata(enablereduce, vdram, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs + reducebuffersz, vbuffer10, 8, 0, reducebuffersz, globalparamsV); 
		readvdata(enablereduce, vdram, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs, vbuffer11, 0, 0, reducebuffersz, globalparamsV); 
		readvdata(enablereduce, vdram, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs + reducebuffersz, vbuffer11, 8, 0, reducebuffersz, globalparamsV); 
		
		// merge 
		merge12andsavevdata(enablereduce, vdram, vbuffer0,vbuffer1,vbuffer2,vbuffer3,vbuffer4,vbuffer5,vbuffer6,vbuffer7,vbuffer8,vbuffer9,vbuffer10,vbuffer11, 0, 0, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs); 
		merge12andsavevdata(enablereduce, vdram, vbuffer0,vbuffer1,vbuffer2,vbuffer3,vbuffer4,vbuffer5,vbuffer6,vbuffer7,vbuffer8,vbuffer9,vbuffer10,vbuffer11, 8, 0, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs + reducebuffersz); 
		
		// update stats
		if(enablereduce == ON){ buffer[source_partition] += 64; } 
		else { buffer[source_partition] += 0; }
	}	 */		
	return;
}
}
#endif

#ifdef CONFIG_UNIFIED_VDRAM
// dispatch
void
	#ifdef SW
	actsproc::
	#endif 
processit( uint512_dt * kvdram, keyvalue_buffer_t sourcebuffer[VECTOR_SIZE][SOURCEBLOCKRAM_SIZE], keyvalue_vbuffer_t vbuffer[VDATA_PACKINGSIZE][BLOCKRAM_SIZE], unitBRAMwidth_type vmask[BLOCKRAM_SIZE], unitBRAMwidth_type vmask_subp[BLOCKRAM_SIZE], uint32_type vmask_p[BLOCKRAM_SIZE], keyvalue_t globalstatsbuffer[MAX_NUM_PARTITIONS], globalparams_t globalparamsE, globalparams_t globalparamsK, globalposition_t globalposition,							
			unsigned int v_chunkids[EDGESSTATSDRAMSZ], unsigned int v_chunkid, unsigned int edgebankID, unsigned int hybridmode){
	#pragma HLS INLINE 
	analysis_type analysis_loop1 = 1;
	#if defined(_DEBUGMODE_KERNELPRINTS2) || defined(_DEBUGMODE_CHECKS2)
	actsutilityobj->clearglobalvars();
	#endif
	#ifdef _DEBUGMODE_CHECKS3
	_stages[0] = 0;
	#endif 
	
	bool_type enable_hybridmode = OFF;
	#ifdef ENABLE_SUBVMASKING
	if(globalparamsK.ALGORITHMINFO_GRAPHALGORITHMID == PAGERANK){ enable_hybridmode=OFF; }
	else { if(hybridmode==ON){ enable_hybridmode=ON; } else { enable_hybridmode=OFF; }}
	#endif 

	sweepparams_t sweepparams;
	
	buffer_type reducebuffersz = globalparamsK.SIZE_REDUCE / 2;
	buffer_type vmaskbuffersz_kvs = (globalparamsK.SIZE_REDUCE * VDATA_PACKINGSIZE) / 512;
	
	if(globalposition.source_partition == globalposition.first_source_partition){ resetkeysandvalues(globalstatsbuffer, NUM_PARTITIONS, 0); } // CRITICAL NEWCHANGE.
	sweepparams = getsweepparams(globalparamsK, globalposition.currentLOP, 0);
	travstate_t avtravstate;
	
	globalparams_t globalparamsVPTRS = globalparamsE;
	globalparams_t globalparamsVDATA = globalparamsK;
	
	avtravstate.begin_kvs = 0;
	avtravstate.end_kvs = avtravstate.begin_kvs + (globalparamsK.ACTSPARAMS_SRCVSIZE / VECTOR2_SIZE); avtravstate.size_kvs = globalparamsK.ACTSPARAMS_SRCVSIZE / VECTOR2_SIZE;
	if(globalposition.source_partition == globalposition.first_source_partition){ readglobalstats(ON, kvdram, globalstatsbuffer, globalparamsK.BASEOFFSETKVS_STATSDRAM + globalposition.deststatsmarker, globalparamsK); } // CRITICAL NEWCHANGE.
	if(globalposition.source_partition == globalposition.first_source_partition){ resetvalues(globalstatsbuffer, NUM_PARTITIONS, 0); } // CRITICAL NEWCHANGE.

	batch_type vptrbaseoffset_kvs = globalparamsVPTRS.BASEOFFSETKVS_VERTEXPTR + (globalparamsVPTRS.ACTSPARAMS_SRCVOFFSET / VECTOR_SIZE); // NEWCHANGE. NOTE: no need to include v_chunkids[32] because source_partition handles it
	batch_type vdatabaseoffset_kvs = globalparamsVDATA.BASEOFFSETKVS_SRCVERTICESDATA + (globalparamsVDATA.ACTSPARAMS_SRCVOFFSET / VECTOR_SIZE); // NEWCHANGE.
	
	unsigned int GraphAlgo = globalparamsK.ALGORITHMINFO_GRAPHALGORITHMID;
	
	#ifdef _DEBUGMODE_KERNELPRINTS2
	actsutilityobj->print7("### processit:: source_p", "upperlimit", "begin", "end", "size", "dest range", "currentLOP", sweepparams.source_partition, sweepparams.upperlimit, avtravstate.begin_kvs * VECTOR_SIZE, avtravstate.end_kvs * VECTOR_SIZE, (avtravstate.end_kvs - avtravstate.begin_kvs) * VECTOR_SIZE, BATCH_RANGE / (1 << (NUM_PARTITIONS_POW * sweepparams.currentLOP)), sweepparams.currentLOP); 							
	#endif
	
	batch_type voffset_kvs = globalposition.source_partition * reducebuffersz * FETFACTOR;
	if(voffset_kvs >= avtravstate.end_kvs){ return; } // continue; }
	if(GraphAlgo != PAGERANK) { if(vmask_p[globalposition.source_partition] == 0){ return; }} // vmaskoffset_kvs += vmaskbuffersz_kvs; continue; }} // CRITICAL CHECKME.
	
	sweepparams.source_partition = globalposition.source_partition;
	avtravstate.i_kvs = voffset_kvs;
	
	#ifdef _DEBUGMODE_KERNELPRINTS2
	actsutilityobj->print5("### processit:: source_partition", "voffset", "vbegin", "vend", "vskip", globalposition.source_partition, voffset_kvs * VECTOR_SIZE, avtravstate.begin_kvs * VECTOR_SIZE, avtravstate.size_kvs * VECTOR_SIZE, SRCBUFFER_SIZE * VECTOR_SIZE);
	#endif
	
	vertex_t srcvlocaloffset = (voffset_kvs * VECTOR2_SIZE);
	vertex_t beginsrcvid = globalparamsK.ACTSPARAMS_SRCVOFFSET + (voffset_kvs * VECTOR2_SIZE);
	vertex_t endsrcvid = beginsrcvid + ((reducebuffersz * VECTOR2_SIZE) * FETFACTOR);
	if(srcvlocaloffset >= globalparamsK.ACTSPARAMS_SRCVSIZE){ endsrcvid = beginsrcvid; }
	if((srcvlocaloffset < globalparamsK.ACTSPARAMS_SRCVSIZE) && (srcvlocaloffset + ((reducebuffersz * VECTOR2_SIZE) * FETFACTOR) >= globalparamsK.ACTSPARAMS_SRCVSIZE)){ endsrcvid = beginsrcvid + globalparamsK.ACTSPARAMS_SRCVSIZE - srcvlocaloffset; }
	
	unsigned int SZ_KVS = reducebuffersz * FETFACTOR;
	unsigned int SKIP_KVS;
	if(enable_hybridmode == ON){ SKIP_KVS = 1; } else { SKIP_KVS = SZ_KVS; }
	for(unsigned int lvid_kvs=0; lvid_kvs<SZ_KVS; lvid_kvs+=SKIP_KVS){
		
		if(enable_hybridmode == ON && lvid_kvs + SKIP_KVS < (reducebuffersz * FETFACTOR)){
			unsigned int mask_subp = GETVTXMASK_SUBP(vmask_subp, lvid_kvs * VECTOR2_SIZE, globalparamsK);
			#ifdef _DEBUGMODE_KERNELPRINTS3
			if(mask_subp == 0){ mask_subp_is_zero += 1; } else { mask_subp_is_not_zero += 1; }
			#endif 
			if(mask_subp == 0){ continue; }
		}
		
		tuple_t tup = getvptrs_opt( kvdram, vptrbaseoffset_kvs, (voffset_kvs + lvid_kvs) * VECTOR2_SIZE, (voffset_kvs + lvid_kvs + SKIP_KVS) * VECTOR2_SIZE, edgebankID); // CRITICAL NEWCHANGE.
		keyy_t beginvptr = tup.A;
		keyy_t endvptr = tup.B; 
		
		if(srcvlocaloffset >= globalparamsK.ACTSPARAMS_SRCVSIZE){ endvptr = beginvptr; }
		
		keyy_t localbeginvptr = beginvptr;
		keyy_t localendvptr = endvptr;
		keyy_t numedges = localendvptr - localbeginvptr + 1*VECTOR_SIZE; // CRITICAL NEWCHANGE.
		if(localbeginvptr == localendvptr){ numedges = 0; }
		keyy_t localbeginvptr_kvs = localbeginvptr / VECTOR_SIZE; // NOTE: this should be in KVS(8) terms
		keyy_t numedges_kvs = numedges / VECTOR_SIZE; // NB: this is correct.
		
		#ifdef _DEBUGMODE_CHECKS2
		if(localendvptr < localbeginvptr){ cout<<"processit::ERROR: localendvptr < localbeginvptr. localbeginvptr: "<<localbeginvptr<<", localendvptr: "<<localendvptr<<", voffset_kvs: "<<voffset_kvs<<", lvid_kvs: "<<lvid_kvs<<endl; exit(EXIT_FAILURE); }
		if(localendvptr < globalparamsE.SIZE_EDGES){ actsutilityobj->checkptr("processit", beginsrcvid, endsrcvid, localbeginvptr, localendvptr, (keyvalue_t *)&kvdram[globalparamsE.BASEOFFSETKVS_EDGESDATA]); }
		#endif
		#ifdef _DEBUGMODE_KERNELPRINTS
		cout<<"[index: "<<globalposition.source_partition<<"][beginsrcvid: "<<beginsrcvid<<", endsrcvid: "<<endsrcvid<<"][beginvptr: "<<localbeginvptr<<", endvptr: "<<localendvptr<<", edges size: "<<numedges<<"][voffset: "<<voffset_kvs * VECTOR_SIZE<<"]"<<endl;
		#endif
		#ifdef _DEBUGMODE_CHECKS2
		if(localendvptr < localbeginvptr){ cout<<"ERROR: localendvptr < localbeginvptr. EXITING..."<<endl; exit(EXIT_FAILURE); }
		actsutilityobj->clearallstats();
		#endif
		
		travstate_t etravstate;
		etravstate.begin_kvs = localbeginvptr_kvs;
		etravstate.size_kvs = numedges_kvs;
		etravstate.end_kvs = etravstate.begin_kvs + etravstate.size_kvs;
		etravstate.skip_kvs = SRCBUFFER_SIZE;
		etravstate.i_kvs = etravstate.begin_kvs;
		etravstate.i2 = voffset_kvs * VECTOR2_SIZE;
		etravstate.i2_kvs = voffset_kvs;
		bool_type resetenv = ON;
		bool_type flush = ON;
		if(voffset_kvs + lvid_kvs == avtravstate.begin_kvs){ resetenv = ON; } else { resetenv = OFF; }
		if((voffset_kvs + lvid_kvs + (reducebuffersz * FETFACTOR)) >= avtravstate.end_kvs){ flush = ON; } else { flush = OFF; }
		if(GraphAlgo != PAGERANK){ resetenv = ON; flush = ON; } // CRITICAL NEWCHANGE.

		#if defined(ACTS_PARTITION_AND_REDUCE_STRETEGY)
		actit
		#elif defined(BASIC_PARTITION_AND_REDUCE_STRETEGY)
		priorit	
		#elif defined(TRAD_PARTITION_AND_REDUCE_STRETEGY)
		tradit
		#else 
		tradit
		#endif 
		(
			ON, PROCESSMODE,
 kvdram, sourcebuffer, vbuffer, vmask, vmask_subp, globalstatsbuffer, 
			globalparamsK, sweepparams, etravstate, globalparamsE.BASEOFFSETKVS_EDGESDATA, globalparamsK.BASEOFFSETKVS_KVDRAMWORKSPACE,
			resetenv, flush, edgebankID);
	}
	
	saveglobalstats(ON, kvdram, globalstatsbuffer, globalparamsK.BASEOFFSETKVS_STATSDRAM + globalposition.deststatsmarker, globalparamsK); // CRITICAL OPTIMIZEME. should be called only once
	
	#ifdef _DEBUGMODE_KERNELPRINTS
	actsutilityobj->printglobalvars();
	actsutilityobj->clearglobalvars();
	#endif
	
	#ifdef _DEBUGMODE_KERNELPRINTS2
	actsutilityobj->printglobalvars();
	#endif 
	#if defined(_DEBUGMODE_KERNELPRINTS2) || defined(_DEBUGMODE_CHECKS2)
	actsutilityobj->clearglobalvars();
	#endif
	return;
}

void
	#ifdef SW 
	actsproc::
	#endif 
partitionit( uint512_dt * kvdram, keyvalue_buffer_t sourcebuffer[VECTOR_SIZE][SOURCEBLOCKRAM_SIZE], keyvalue_vbuffer_t vbuffer[VDATA_PACKINGSIZE][BLOCKRAM_SIZE], unitBRAMwidth_type vmask[BLOCKRAM_SIZE], unitBRAMwidth_type vmask_subp[BLOCKRAM_SIZE], keyvalue_t globalstatsbufferUNUSED[MAX_NUM_PARTITIONS], globalparams_t globalparams, globalposition_t globalposition, unsigned int edgebankID){
	#pragma HLS INLINE
	analysis_type analysis_numllops = 1;
	analysis_type analysis_numsourcepartitions = 1;
	#ifdef TRAD_PARTITION_AND_REDUCE_STRETEGY
	return; // no partitionit for TRAD_PARTITION_AND_REDUCE_STRETEGY
	#endif 
	#ifdef _DEBUGMODE_KERNELPRINTS
	actsutilityobj->printparameters();
	actsutilityobj->printglobalvars();
	actsutilityobj->printglobalparameters("actsproc::getglobalparams:: printing global parameters", globalparams);
	#endif 
	#if defined(_DEBUGMODE_KERNELPRINTS2) || defined(_DEBUGMODE_CHECKS2)
	actsutilityobj->clearglobalvars();
	#endif
	#ifdef _DEBUGMODE_STATS
	unsigned int edges_count = 0;
	unsigned int edgesdstv_sum = 0;
	#endif
	#ifdef _DEBUGMODE_CHECKS3
	_stages[0] = 1;
	#endif 
	
	keyvalue_t globalstatsbuffer[MAX_NUM_PARTITIONS]; 
	
	config_t config;
	
	resetkeysandvalues(globalstatsbuffer, NUM_PARTITIONS, 0);
	sweepparams_t sweepparams = getsweepparams(globalparams, globalposition.currentLOP, globalposition.source_partition);
	travstate_t ptravstate = gettravstate(ON, kvdram, globalparams, globalposition.currentLOP, globalposition.sourcestatsmarker);
	
	// collect stats
	readglobalstats(ON, kvdram, globalstatsbuffer, globalparams.BASEOFFSETKVS_STATSDRAM + globalposition.deststatsmarker, globalparams);
	resetvalues(globalstatsbuffer, NUM_PARTITIONS, 0);
	
	// partition
	if(ptravstate.size_kvs > 0){ config.enablepartition = ON; } 
	else { ptravstate.begin_kvs = 0; ptravstate.end_kvs = 0; config.enablepartition = OFF; }
	if(ptravstate.size_kvs == 0){ ptravstate.begin_kvs = 0; ptravstate.end_kvs = 0; config.enablepartition = OFF; }
	#ifdef _DEBUGMODE_KERNELPRINTS2
	if((config.enablepartition == ON) && (globalposition.currentLOP >= 1) && (globalposition.currentLOP <= globalparams.ACTSPARAMS_TREEDEPTH)){ actsutilityobj->print7("### partitionit:: source_p", "upperlimit", "begin", "end", "size", "dest range", "currentLOP", sweepparams.source_partition, sweepparams.upperlimit, ptravstate.begin_kvs * VECTOR_SIZE, ptravstate.end_kvs * VECTOR_SIZE, ptravstate.size_kvs * VECTOR_SIZE, BATCH_RANGE / (1 << (NUM_PARTITIONS_POW * sweepparams.currentLOP)), sweepparams.currentLOP); }	
	#endif
	resetvalues(globalstatsbuffer, NUM_PARTITIONS, 0);
	bool_type resetenv; if(globalposition.source_partition==0){ resetenv = ON; } else { resetenv = OFF; }
	
	#if defined(ACTS_PARTITION_AND_REDUCE_STRETEGY)
	actit
	#elif defined(BASIC_PARTITION_AND_REDUCE_STRETEGY)
	priorit	
	#elif defined(TRAD_PARTITION_AND_REDUCE_STRETEGY)
	tradit
	#else 
	tradit
	#endif
	(config.enablepartition, PARTITIONMODE,
 kvdram, sourcebuffer, vbuffer, vmask, vmask_subp, globalstatsbuffer, // CRITICAL FIXME.
			globalparams, sweepparams, ptravstate, sweepparams.worksourcebaseaddress_kvs, sweepparams.workdestbaseaddress_kvs,
			ON, ON, NAp);
			
	saveglobalstats(config.enablepartition, kvdram, globalstatsbuffer, globalparams.BASEOFFSETKVS_STATSDRAM + globalposition.deststatsmarker, globalparams); 
	
	#ifdef _DEBUGMODE_CHECKS
	if(config.enablereduce == ON){ actsutilityobj->printpartitionresult2(ON, kvdram, globalstatsbuffer, sweepparams); }
	#endif
	#ifdef _DEBUGMODE_STATS
	if(config.enablereduce == ON){ edges_count = actsutilityobj->globalstats_getcountvalidkvsreduced(); edgesdstv_sum = actsutilityobj->globalstats_getreducevar1(); }
	#endif
	#ifdef _DEBUGMODE_KERNELPRINTS
	actsutilityobj->printglobalvars();
	actsutilityobj->clearglobalvars();
	#endif
			
	#ifdef _DEBUGMODE_KERNELPRINTS2
	actsutilityobj->printglobalvars();
	#endif 
	#if defined(_DEBUGMODE_KERNELPRINTS2) || defined(_DEBUGMODE_CHECKS2)
	actsutilityobj->clearglobalvars();
	#endif
	return;
}

void
	#ifdef SW 
	actsproc::
	#endif 
reduceit( uint512_dt * kvdram, keyvalue_buffer_t sourcebuffer[VECTOR_SIZE][SOURCEBLOCKRAM_SIZE], keyvalue_vbuffer_t vbuffer[VDATA_PACKINGSIZE][BLOCKRAM_SIZE], unitBRAMwidth_type vmask[BLOCKRAM_SIZE], unitBRAMwidth_type vmask_subp[BLOCKRAM_SIZE], keyvalue_t globalstatsbufferUNUSED[MAX_NUM_PARTITIONS], globalparams_t globalparams, globalposition_t globalposition, unsigned int edgebankID){	
	#pragma HLS INLINE
	analysis_type analysis_numllops = 1;
	analysis_type analysis_numsourcepartitions = 1;
	analysis_type analysis_treedepth = TREE_DEPTH;
	#ifdef _DEBUGMODE_CHECKS3
	_stages[0] = 2;
	#endif 
	
	keyvalue_t globalstatsbuffer[MAX_NUM_PARTITIONS]; 
	
	config_t config;
	sweepparams_t sweepparams;
	
	sweepparams = getsweepparams(globalparams, globalposition.currentLOP, globalposition.source_partition);
	travstate_t ptravstate = gettravstate(ON, kvdram, globalparams, globalposition.currentLOP, globalposition.sourcestatsmarker);

	if(ptravstate.size_kvs == 0){ ptravstate.begin_kvs = 0; ptravstate.end_kvs = 0; config.enablereduce = OFF; }
	else { config.enablereduce = ON; }
	#ifdef _DEBUGMODE_KERNELPRINTS2
	if(ptravstate.size_kvs > 0){ actsutilityobj->print7("### reduceit:: source_p", "upperlimit", "begin", "end", "size", "dest range", "currentLOP", sweepparams.source_partition, sweepparams.upperlimit, ptravstate.begin_kvs * VECTOR_SIZE, ptravstate.end_kvs * VECTOR_SIZE, ptravstate.size_kvs * VECTOR_SIZE, BATCH_RANGE / (1 << (NUM_PARTITIONS_POW * sweepparams.currentLOP)), sweepparams.currentLOP); }	
	#endif
	bool_type resetenv; if(globalposition.source_partition==0){ resetenv = ON; } else { resetenv = OFF; }
	
	#if defined(ACTS_PARTITION_AND_REDUCE_STRETEGY)
	actit
	#elif defined(BASIC_PARTITION_AND_REDUCE_STRETEGY)
	priorit	
	#elif defined(TRAD_PARTITION_AND_REDUCE_STRETEGY)
	tradit
	#else 
	tradit
	#endif
	(config.enablereduce, REDUCEMODE,
 kvdram, sourcebuffer, vbuffer, vmask, vmask_subp, globalstatsbuffer, // CRITICAL FIXME.
			globalparams, sweepparams, ptravstate, sweepparams.worksourcebaseaddress_kvs, sweepparams.workdestbaseaddress_kvs,
			ON, ON, NAp); // REMOVEME.
	return;
}

void
	#ifdef SW 
	actsproc::
	#endif 
dispatch(bool_type en_process, bool_type en_partition, bool_type en_reduce,  uint512_dt * kvdram, keyvalue_buffer_t sourcebuffer[VECTOR_SIZE][SOURCEBLOCKRAM_SIZE], keyvalue_vbuffer_t vbuffer[VDATA_PACKINGSIZE][BLOCKRAM_SIZE], unitBRAMwidth_type vmask[BLOCKRAM_SIZE], unitBRAMwidth_type vmask_subp[BLOCKRAM_SIZE], uint32_type vmask_p[BLOCKRAM_SIZE], keyvalue_t globalstatsbuffer[MAX_NUM_PARTITIONS],
			globalparams_t globalparamsE, globalparams_t globalparamsK, globalposition_t globalposition,
				unsigned int v_chunkids[EDGESSTATSDRAMSZ], unsigned int v_chunkid, unsigned int edgebankID, unsigned int hybridmode){
	if(en_process == ON){ processit( kvdram, sourcebuffer, vbuffer, vmask, vmask_subp, vmask_p, globalstatsbuffer, globalparamsE, globalparamsK, globalposition, v_chunkids, v_chunkid, edgebankID, hybridmode); } 
	if(en_partition == ON){ partitionit( kvdram, sourcebuffer, vbuffer, vmask, vmask_subp, globalstatsbuffer, globalparamsK, globalposition, NAp); } 
	if(en_reduce == ON){ reduceit( kvdram, sourcebuffer, vbuffer, vmask, vmask_subp, globalstatsbuffer, globalparamsK, globalposition, NAp); } 
	return;
}

void
	#ifdef SW 
	actsproc::
	#endif 
dispatch_reduce(bool_type en_reduce,  uint512_dt * kvdram, keyvalue_buffer_t sourcebuffer[VECTOR_SIZE][SOURCEBLOCKRAM_SIZE], keyvalue_vbuffer_t vbuffer[VDATA_PACKINGSIZE][BLOCKRAM_SIZE], unitBRAMwidth_type vmask[BLOCKRAM_SIZE], unitBRAMwidth_type vmask_subp[BLOCKRAM_SIZE], uint32_type vmask_p[BLOCKRAM_SIZE], keyvalue_t globalstatsbuffer[MAX_NUM_PARTITIONS], globalparams_t globalparamsE, globalparams_t globalparamsK, globalposition_t globalposition,	
					unsigned int v_chunkids[EDGESSTATSDRAMSZ], unsigned int v_chunkid, unsigned int edgebankID, unsigned int hybridmode){
	#pragma HLS INLINE
	analysis_type analysis_loop1 = 1;
	analysis_type analysis_treedepth = TREE_DEPTH;
	#ifdef TRAD_PARTITION_AND_REDUCE_STRETEGY
	return; // no dispatch_reduce for TRAD_PARTITION_AND_REDUCE_STRETEGY
	#endif 
	#ifdef _DEBUGMODE_STATS
	actsutilityobj->clearglobalvars();
	#endif
	#ifdef _DEBUGMODE_KERNELPRINTS
	actsutilityobj->print3("### dispatch_reduce:: source_partition", "currentLOP", "NAp", globalposition.source_partition, globalposition.currentLOP, NAp); 							
	#endif
	
	// CRITICAL NEWCHANGE.
	travstate_t rtravstate = gettravstate(ON, kvdram, globalparamsK, globalposition.currentLOP, globalposition.sourcestatsmarker);
	if(rtravstate.size_kvs == 0){ return; }
	
	dispatch(OFF, OFF, en_reduce,  kvdram, sourcebuffer, vbuffer, vmask, vmask_subp, vmask_p, globalstatsbuffer, globalparamsE, globalparamsK, globalposition, v_chunkids, v_chunkid, NAp, hybridmode);
	return;
} 

// top
void 
	#ifdef SW 
	actsproc:: 
	#endif
topkernelproc_embedded(unsigned int en_process, unsigned int en_partition, unsigned int en_reduce,  uint512_dt * kvdram, keyvalue_vbuffer_t vbuffer[VDATA_PACKINGSIZE][BLOCKRAM_SIZE], uint32_type vmask_p[BLOCKRAM_SIZE], unitBRAMwidth_type vmask_subp[BLOCKRAM_SIZE], unitBRAMwidth_type vmask[BLOCKRAM_SIZE], keyvalue_t globalstatsbuffer[MAX_NUM_PARTITIONS], globalposition_t globalposition, unsigned int hybridmode){

	#ifdef _DEBUGMODE_KERNELPRINTS
	actsutilityobj->printparameters();
	#endif
	#if defined(_DEBUGMODE_KERNELPRINTS) & defined(ALLVERTEXISACTIVE_ALGORITHM)
	cout<<">>> ====================== Light weight ACTS (PR: 1 ACTS IN 1 COMPUTEUNITS) Launched... size: "<<GETKEYENTRY(kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_SIZE_RUN], 0)<<endl; 
	#endif
	
	keyvalue_buffer_t sourcebuffer[VECTOR_SIZE][SOURCEBLOCKRAM_SIZE];
	#pragma HLS array_partition variable = sourcebuffer
	unsigned int PARTITION_CHKPT[MAX_NUM_EDGE_BANKS][EDGESSTATSDRAMSZ]; // NOT USED. CALLED IN UPPER-FUNCTION
	globalparams_t globalparamsK;
	globalparams_t globalparamsEs[MAX_NUM_EDGE_BANKS];
	globalparams_t _globalparamsE;
	
	globalparamsK = getglobalparams(kvdram); // CRITICAL OPTIMIZEME. MOVETOBASE?
	#ifdef EDGES_IN_SEPERATE_BUFFER_FROM_KVDRAM
	
	#else 
	globalparamsEs[0] = globalparamsK;
	#endif 
	_globalparamsE = globalparamsEs[globalposition.edgebankID];
	#ifdef EDGES_IN_SEPERATE_BUFFER_FROM_KVDRAM
	globalparamsK.VARS_WORKBATCH = globalposition.v_chunkid;
	for(unsigned int i=0; i<globalposition.edgebankID; i++){ globalparamsK.BASEOFFSETKVS_STATSDRAM += ((globalparamsK.SIZE_KVSTATSDRAM / VECTOR_SIZE) / NUM_EDGE_BANKS); } // OPTIMIZEME? IS THIS OPTIMIZED
	#endif 
	
	unsigned int GraphAlgo = globalparamsK.ALGORITHMINFO_GRAPHALGORITHMID;
	if(GraphAlgo != PAGERANK){ if(globalposition.stage==0 && globalposition.currentLOP==1 && globalposition.source_partition==globalposition.first_source_partition){ resetkvstatvalues(kvdram, globalparamsK); }}	// CRITICAL FIXME. NEWCHANGE. DO FOR ALL.
	
	// process & partition
	#ifdef PROCESSMODULE
	if(globalparamsK.ENABLE_PROCESSCOMMAND == ON && en_process == ON){
		#if defined(_DEBUGMODE_KERNELPRINTS2) & defined(ALLVERTEXISACTIVE_ALGORITHM)
		cout<<"topkernelproc: processing instance ... "<<endl;
		#endif
		dispatch(globalposition.EN_PROCESS, OFF, OFF,  kvdram, sourcebuffer, vbuffer, vmask, vmask_subp, vmask_p, globalstatsbuffer, _globalparamsE, globalparamsK, globalposition, PARTITION_CHKPT[globalposition.edgebankID], globalposition.v_chunkid, globalposition.edgebankID, hybridmode); // PARTITION_CHKPT[0], 0, 0);
	}
	#endif
	
	// partition
	#ifdef PARTITIONMODULE
	if(globalparamsK.ENABLE_PARTITIONCOMMAND == ON && en_partition == ON){
		#if defined(_DEBUGMODE_KERNELPRINTS2) & defined(ALLVERTEXISACTIVE_ALGORITHM)
		cout<<"topkernelproc: partitioning instance ... "<<endl;
		#endif
		dispatch(OFF, globalposition.EN_PARTITION, OFF,  kvdram, sourcebuffer, vbuffer, vmask, vmask_subp, vmask_p, globalstatsbuffer, _globalparamsE, globalparamsK, globalposition, PARTITION_CHKPT[globalposition.edgebankID], globalposition.v_chunkid, NAp, hybridmode); // PARTITION_CHKPT[0], 0, NAp);
	}
	#endif
	
	// reduce & partition
	#if defined(REDUCEMODULE)
	if(globalparamsK.ENABLE_APPLYUPDATESCOMMAND == ON && en_reduce == ON){ 
		#if defined(_DEBUGMODE_KERNELPRINTS2) & defined(ALLVERTEXISACTIVE_ALGORITHM)
		cout<<"topkernelproc: reducing instance ... "<<endl;
		#endif
		dispatch_reduce(globalposition.EN_REDUCE,  kvdram, sourcebuffer, vbuffer, vmask, vmask_subp, vmask_p, globalstatsbuffer, _globalparamsE, globalparamsK, globalposition, PARTITION_CHKPT[globalposition.edgebankID], globalposition.v_chunkid, NAp, hybridmode); // PARTITION_CHKPT[0], 0, NAp);
	}
	#endif
	
	if(globalposition.v_chunkid==globalparamsK.ACTSPARAMS_NUMEDGECHUNKSINABUFFER-1 && globalposition.stage==globalposition.laststage && globalposition.currentLOP==globalposition.lastLOP && globalposition.source_partition==globalposition.last_source_partition){
		#ifdef _WIDEWORD
		kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_ALGORITHMINFO_GRAPHITERATIONID].range(31, 0) = globalparamsK.ALGORITHMINFO_GRAPHITERATIONID + 1; // CRITICAL NOTEME: Graph Iteration is incremented here
		#else
		kvdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_ALGORITHMINFO_GRAPHITERATIONID].data[0].key = globalparamsK.ALGORITHMINFO_GRAPHITERATIONID + 1;
		#endif 
	}
	
	#if defined(_DEBUGMODE_KERNELPRINTS2) || defined(_DEBUGMODE_CHECKS2)
	actsutilityobj->clearglobalvars();
	#endif	
	#ifdef _DEBUGMODE_KERNELPRINTS2
	actsutilityobj->printglobalvars();
	#endif 
	#if defined(_DEBUGMODE_KERNELPRINTS2) || defined(_DEBUGMODE_CHECKS2)
	actsutilityobj->clearglobalvars();
	#endif
	return;
}

extern "C" { // #ifdef ACTS_1by1by1byN (means everything packed in 1 compute unit)
void 
	#ifdef SW 
	actsproc:: 
	#endif
topkernelP1(
	uint512_dt * kvdram0,
	uint512_dt * vdram
	){
#ifdef EDGES_IN_SEPERATE_BUFFER_FROM_KVDRAM
	#pragma HLS INTERFACE m_axi port = edges00 offset = slave bundle = gmem0
	#pragma HLS INTERFACE m_axi port = kvdram0 offset = slave bundle = gmem1
	#pragma HLS INTERFACE m_axi port = vdram offset = slave bundle = gmem2
#else 
	#pragma HLS INTERFACE m_axi port = kvdram0 offset = slave bundle = gmem0
	#pragma HLS INTERFACE m_axi port = vdram offset = slave bundle = gmem1
#endif 
//

#ifdef EDGES_IN_SEPERATE_BUFFER_FROM_KVDRAM
#pragma HLS INTERFACE s_axilite port = edges00 bundle = control
	
#endif 
#pragma HLS INTERFACE s_axilite port = kvdram0 bundle = control
	

#pragma HLS INTERFACE s_axilite port = vdram bundle = control

#pragma HLS INTERFACE s_axilite port=return bundle=control

#ifdef EDGES_IN_SEPERATE_BUFFER_FROM_KVDRAM
#pragma HLS DATA_PACK variable = edges00
#endif 
#pragma HLS DATA_PACK variable = kvdram0
#pragma HLS DATA_PACK variable = vdram

	#if defined(_DEBUGMODE_KERNELPRINTS2) & defined(ALLVERTEXISACTIVE_ALGORITHM)
	cout<<">>> ====================== Light weight ACTS (PR & SYNC) Launched... ====================== "<<endl; 
	#endif
	
	keyvalue_vbuffer_t vbuffer0[VDATA_PACKINGSIZE][BLOCKRAM_SIZE];
	#pragma HLS array_partition variable = vbuffer0
	uint32_type vmask0_p[BLOCKRAM_SIZE];
	unitBRAMwidth_type vmask0_subp[BLOCKRAM_SIZE];
	#pragma HLS DATA_PACK variable = vmask0_subp
	unitBRAMwidth_type vmask0[BLOCKRAM_SIZE];
	#pragma HLS DATA_PACK variable = vmask0
	keyvalue_t globalstatsbuffer0[MAX_NUM_PARTITIONS];
	travstate_t rtravstates[1];
	#pragma HLS ARRAY_PARTITION variable=rtravstates complete
	value_t buffer[DOUBLE_BLOCKRAM_SIZE]; // CRITICAL AUTOMATEME.
	globalparams_t globalparamsKs[1];
	globalparams_t globalparamsEs[MAX_NUM_EDGE_BANKS];
	
	unsigned int sourcestatsmarker = 0;
	unsigned int deststatsmarker = 0;
	unsigned int reducesourcestatsmarker = 0;
	unsigned int EN_PROCESS = OFF; unsigned int EN_PARTITION = OFF; unsigned int EN_REDUCE = OFF; unsigned int EN_PROCESSANDREDUCE = OFF; unsigned int EN_PROCESSANDPARTITION = OFF;
	globalposition_t globalposition;
	
	#ifdef _DEBUGMODE_CHECKS3
	mask_subp_is_zero = 0;
	mask_subp_is_not_zero = 0;
	for(unsigned int i=0; i<8; i++){ _stages[i] = 0; }
	for(unsigned int i=0; i<MAX_NUM_PARTITIONS; i++){ _chkpartitions[i] = 0; }
	#endif 
	
globalparamsKs[0] = getglobalparams(kvdram0); // CRITICAL NOTEME. POSSIBLE SOURCE OF ROUTING CONSTRAINTS?
	globalparams_t globalparamsK = globalparamsKs[0]; // getglobalparams(kvdram0); // CRITICAL NOTEME. POSSIBLE SOURCE OF ROUTING CONSTRAINTS?
	#ifdef EDGES_IN_SEPERATE_BUFFER_FROM_KVDRAM
	
	#else 
	globalparamsEs[0] = globalparamsK;
	#endif 
	globalparams_t globalparamsV = getglobalparams(vdram);
	
	unsigned int PARTITION_CHKPT[MAX_NUM_EDGE_BANKS][EDGESSTATSDRAMSZ];
	for(unsigned int u=0; u<EDGESSTATSDRAMSZ; u++){ // CRITICAL NEWCHANGE.
		#ifdef EDGES_IN_SEPERATE_BUFFER_FROM_KVDRAM
			#ifdef _WIDEWORD
	
			#else
	
			#endif
		#else 
			#ifdef _WIDEWORD
			PARTITION_CHKPT[0][u] = kvdram0[globalparamsK.BASEOFFSETKVS_EDGESSTATSDRAM + u].range(31, 0); 
			#else
			PARTITION_CHKPT[0][u] = kvdram0[globalparamsK.BASEOFFSETKVS_EDGESSTATSDRAM + u].data[0].key; 
			#endif
		#endif 
	}
	
	buffer_type vmaskbuffersz_kvs = (globalparamsK.SIZE_REDUCE * VDATA_PACKINGSIZE) / 512;
	batch_type vmaskoffset_kvs = 0; 
	unsigned int vreadoffset_kvs = 0;
	buffer_type reducebuffersz = globalparamsK.SIZE_REDUCE / 2;
	unsigned int GraphAlgo = globalparamsK.ALGORITHMINFO_GRAPHALGORITHMID;
	#ifdef ENABLERECURSIVEPARTITIONING
	for(unsigned int k=0; k<globalparamsK.ACTSPARAMS_TREEDEPTH-1; k++)
	#else 
	for(unsigned int k=0; k<globalparamsK.ACTSPARAMS_TREEDEPTH; k++)
	#endif 
	{
		reducesourcestatsmarker += (1 << (NUM_PARTITIONS_POW * k)); 
	}
	unsigned int FIRSTLOP = 0;
	unsigned int NUMLOPs = 0;
	unsigned int FIRSTSOURCEPARTITION = 0;
	unsigned int LASTSOURCEPARTITIONS = 0;
	batch_type num_source_partitions = 0; 

	for(unsigned int i=0; i<DOUBLE_BLOCKRAM_SIZE; i++){ buffer[i] = 0; } 
	if(GraphAlgo != PAGERANK){ loadmany1vmask_p(vdram, vmask0_p, globalparamsV.BASEOFFSETKVS_VERTICESPARTITIONMASK, BLOCKRAM_SIZE); }
	if(GraphAlgo != PAGERANK){ resetkvstatvalues(vdram, globalparamsV); }
	unsigned int num_edge_banks = NUM_EDGE_BANKS;
	unsigned int it_size; if(num_edge_banks==0){ it_size = 1; } else { it_size = NUM_EDGE_BANKS; }
	unsigned int FIRST_BASEOFFSETKVS_STATSDRAM = globalparamsK.BASEOFFSETKVS_STATSDRAM;
	
	#ifdef EDGES_IN_SEPERATE_BUFFER_FROM_KVDRAM
	copyvs(vdram, vbuffer0, globalparamsV);
	#endif
	#ifdef _WIDEWORD
	unsigned int hybridmode = vdram[globalparamsV.BASEOFFSETKVS_OTHERINFOS + globalparamsV.ALGORITHMINFO_GRAPHITERATIONID].range(31, 0);
	#else 
	unsigned int hybridmode = vdram[globalparamsV.BASEOFFSETKVS_OTHERINFOS + globalparamsV.ALGORITHMINFO_GRAPHITERATIONID].data[0].key;
	#endif 
	
	unsigned int num_stages = 3;
	if(globalparamsV.ENABLE_PROCESSCOMMAND == ON){ num_stages = 1; }
	if(globalparamsV.ENABLE_PARTITIONCOMMAND == ON){ num_stages = 2; }
	if(globalparamsV.ENABLE_APPLYUPDATESCOMMAND == ON){ num_stages = 3; }
	
	TOPKERNEL1_BASELOOP1: for(unsigned int edgebankID=0; edgebankID<it_size; edgebankID++){
		globalposition.edgebankID = edgebankID;
		#ifdef EDGES_IN_SEPERATE_BUFFER_FROM_KVDRAM
		for(unsigned int i=0; i<globalposition.edgebankID; i++){ globalparamsK.BASEOFFSETKVS_STATSDRAM += ((globalparamsK.SIZE_KVSTATSDRAM / VECTOR_SIZE) / NUM_EDGE_BANKS); } // SHIFT.
		#endif 
		TOPKERNEL1_BASELOOP1B: for(unsigned int v_chunkid=0; v_chunkid<globalparamsK.ACTSPARAMS_NUMEDGECHUNKSINABUFFER; v_chunkid++){
			globalposition.v_chunkid = v_chunkid;
			#ifdef EDGES_IN_SEPERATE_BUFFER_FROM_KVDRAM
			globalparamsK.VARS_WORKBATCH = globalposition.v_chunkid; // SHIFT.
			#endif 
			TOPKERNEL1_BASELOOP1C: for(step_type stage=0; stage<num_stages; stage++){
			
				EN_PROCESS = OFF; EN_PARTITION = OFF; EN_REDUCE = OFF; EN_PROCESSANDREDUCE = OFF; EN_PROCESSANDPARTITION = OFF;
				if(stage==0){ EN_PROCESS = ON; EN_PROCESSANDREDUCE = ON; EN_PROCESSANDPARTITION = ON;  } 
				else if(stage==1){ EN_PARTITION = ON; EN_PROCESSANDPARTITION = ON;  } 
				else { EN_REDUCE = ON; EN_PROCESSANDREDUCE = ON; }
				globalposition.EN_PROCESS = EN_PROCESS; globalposition.EN_PARTITION = EN_PARTITION; globalposition.EN_REDUCE = EN_REDUCE; globalposition.EN_PROCESSANDPARTITION = EN_PROCESSANDPARTITION; globalposition.EN_PROCESSANDREDUCE = EN_PROCESSANDREDUCE;
				
				if(stage==0){ sourcestatsmarker = 0; deststatsmarker = 1; } 
				else if(stage==1){ sourcestatsmarker = 1; deststatsmarker = 1 + NUM_PARTITIONS; } 
				else { sourcestatsmarker = reducesourcestatsmarker; deststatsmarker = NAp; }
				
				if(stage==0){ FIRSTLOP = 1; NUMLOPs = 1; } // FIXME. CHANGE FOR ~ENABLERECURSIVEPARTITIONING
				else if(stage==1){ FIRSTLOP = globalparamsK.ACTSPARAMS_BEGINLOP + 1; NUMLOPs = globalparamsK.ACTSPARAMS_NUMLOPS-2;  } 
				else{ FIRSTLOP = globalparamsK.ACTSPARAMS_TREEDEPTH; NUMLOPs = 1; }
				
				vmaskoffset_kvs = 0; 
				vreadoffset_kvs = 0;
				
				TOPKERNEL1_BASELOOP1D: for(step_type currentLOP=FIRSTLOP; currentLOP<(FIRSTLOP + NUMLOPs); currentLOP+=1){
					#ifdef ENABLERECURSIVEPARTITIONING
					if(stage==0){ num_source_partitions = get_num_source_partitions(globalparamsK.ACTSPARAMS_TREEDEPTH); }
					else if(stage==1){ num_source_partitions = get_num_source_partitions(currentLOP);  }
					else { num_source_partitions = get_num_source_partitions(globalparamsK.ACTSPARAMS_TREEDEPTH);  }
					#else
					NOT IMPLEMENTED.
					#endif
					
					if(stage==0){ FIRSTSOURCEPARTITION = PARTITION_CHKPT[edgebankID][v_chunkid]; LASTSOURCEPARTITIONS = PARTITION_CHKPT[edgebankID][v_chunkid+1]; } 
					else if(stage==1){ FIRSTSOURCEPARTITION = 0; LASTSOURCEPARTITIONS = num_source_partitions;  } 
					else{ FIRSTSOURCEPARTITION = 0; LASTSOURCEPARTITIONS = num_source_partitions; }
					
					if(globalposition.EN_PROCESS == ON){ vmaskoffset_kvs = PARTITION_CHKPT[edgebankID][v_chunkid] * (vmaskbuffersz_kvs); } // NEWCHANGE.
					batch_type vreadoffset_kvs = 0;
					
					TOPKERNEL1_BASELOOP1E: for(batch_type source_partition=FIRSTSOURCEPARTITION; source_partition<LASTSOURCEPARTITIONS; source_partition+=1){
						#ifdef _DEBUGMODE_KERNELPRINTS2
						actsutilityobj->print3("### TOPKERNEL1_BASELOOP1C:: source_partition", "currentLOP", "NAp", source_partition, currentLOP, NAp); 							
						#endif
						
						globalposition.stage = stage; 
						globalposition.laststage = 2; 
						globalposition.currentLOP = currentLOP; 
						globalposition.lastLOP = FIRSTLOP + NUMLOPs - 1; 
						globalposition.source_partition = source_partition;
						globalposition.first_source_partition = FIRSTSOURCEPARTITION;
						globalposition.last_source_partition = LASTSOURCEPARTITIONS - 1;
						globalposition.num_source_partitions = LASTSOURCEPARTITIONS - FIRSTSOURCEPARTITION; // FIXME.
						globalposition.sourcestatsmarker = sourcestatsmarker; 
						globalposition.deststatsmarker = deststatsmarker; 
						if(globalposition.v_chunkid==0 && globalposition.stage==0 && globalposition.currentLOP==1 && globalposition.source_partition==0){ globalposition.first=ON; } else { globalposition.first=OFF; }
						if(globalposition.v_chunkid==globalparamsK.ACTSPARAMS_NUMEDGECHUNKSINABUFFER-1 && globalposition.stage==globalposition.laststage && globalposition.currentLOP==globalposition.lastLOP && globalposition.source_partition==globalposition.last_source_partition){ globalposition.last=ON; } else { globalposition.last=OFF; }
						
						bool_type enableprocess = ON;
						if(globalposition.EN_PROCESS == ON){
							if(GraphAlgo != PAGERANK){ if(vmask0_p[source_partition] > 0){ enableprocess = ON; } else { enableprocess = OFF; }}
						}
						
						bool_type enablereduce = OFF; 
						unsigned int ntravszs = 0;
						if(globalposition.EN_REDUCE == ON){
							rtravstates[0] = gettravstate(globalposition.EN_REDUCE, kvdram0, globalparamsK, currentLOP, sourcestatsmarker); // CRITICAL NOTEME. POSSIBLE SOURCE OF ROUTING CONSTRAINTS?
							for(unsigned int i = 0; i < 1; i++){ ntravszs += rtravstates[i].size_kvs; }
							if(ntravszs > 0){ enablereduce = ON; } else { enablereduce = OFF; }
						}
						
						bool_type enable_loadmasks = OFF; 
						if(globalposition.EN_PROCESS == ON && enableprocess == ON){ enable_loadmasks = ON; } else { enable_loadmasks = OFF; }
						
						bool_type enable_readandreplicatevdata = OFF; 
						if((globalposition.EN_PROCESS == ON && enableprocess == ON) || (globalposition.EN_REDUCE == ON && enablereduce == ON)){ enable_readandreplicatevdata = ON; } else { enable_readandreplicatevdata = OFF; }
		
						// read vertices
						loadmany1vmasks(enable_loadmasks, vdram, vmask0, vbuffer0, globalparamsV.BASEOFFSETKVS_VERTICESDATAMASK + vmaskoffset_kvs, vmaskbuffersz_kvs, globalparamsV); 
						#ifdef ENABLE_SUBVMASKING
						loadmany1vmasks_subp(enable_loadmasks, vmask0, vmask0_subp, vmaskbuffersz_kvs); 
						#endif
						readandreplicate1vdata(enable_readandreplicatevdata, vdram, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs, vbuffer0, 0, 0, reducebuffersz, globalparamsV); 
						readandreplicate1vdata(enable_readandreplicatevdata, vdram, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs + reducebuffersz, vbuffer0, 8, 0, reducebuffersz, globalparamsV); 
						
						// proc 
						topkernelproc_embedded(enableprocess, ON, enablereduce,  kvdram0, vbuffer0, vmask0_p, vmask0_subp, vmask0, globalstatsbuffer0, globalposition, hybridmode);	
						
						// merge 
						if(globalposition.EN_REDUCE == ON && enablereduce == ON){ merge1andsavevdata(ON, vdram, vbuffer0, 0, 0, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs); }
						if(globalposition.EN_REDUCE == ON && enablereduce == ON){ merge1andsavevdata(ON, vdram, vbuffer0, 8, 0, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs + reducebuffersz); }
						
						// update stats
						if(globalposition.EN_REDUCE == ON){ 
							if(enablereduce == ON){ buffer[source_partition] += 64; } 
							else { buffer[source_partition] += 0; }
						}
						
						// increments
						if(globalposition.EN_PARTITION == ON || globalposition.EN_REDUCE == ON){ sourcestatsmarker += 1; }
						if(globalposition.EN_PARTITION == ON){ deststatsmarker += NUM_PARTITIONS; }
						if(globalposition.EN_PROCESS == ON){ vmaskoffset_kvs += vmaskbuffersz_kvs; }
						if(globalposition.EN_PROCESS == ON || globalposition.EN_REDUCE == ON){ vreadoffset_kvs += reducebuffersz * 2; }
					}
				}
			} // stage
		} // v_chunkid
	} // edgebankID
	
	commitkvstats(vdram, buffer, globalparamsV, reducesourcestatsmarker);
	
	#ifdef _WIDEWORD
	vdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_ALGORITHMINFO_GRAPHITERATIONID].range(31, 0) = globalparamsV.ALGORITHMINFO_GRAPHITERATIONID + 1; // CRITICAL NOTEME: Graph Iteration is incremented here
	#else
	vdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_ALGORITHMINFO_GRAPHITERATIONID].data[0].key = globalparamsV.ALGORITHMINFO_GRAPHITERATIONID + 1;
	#endif 
	
	#if defined(_DEBUGMODE_KERNELPRINTS2) & defined(ENABLE_SUBVMASKING)
	cout<<"topkernelP1:: subpmask status: mask_subp_is_zero: "<<mask_subp_is_zero<<", mask_subp_is_not_zero: "<<mask_subp_is_not_zero<<endl;
	#endif 
	#if defined(_DEBUGMODE_KERNELPRINTS2) & defined(DATA_SENSITIVE_ACTS)
	for(unsigned int i=0; i<MAX_NUM_PARTITIONS; i++){ cout<<"topkernelP1:: subpmask status: _chkpartitions["<<i<<"]: "<<_chkpartitions[i]<<endl;; }
	#endif 
	return;
}
}
extern "C" { // #ifdef ACTS_1by1by1byN (means everything packed in 1 compute unit)
void 
	#ifdef SW 
	actsproc:: 
	#endif
topkernelP2(
	uint512_dt * kvdram0,
	uint512_dt * kvdram1,
	uint512_dt * vdram
	){
#ifdef EDGES_IN_SEPERATE_BUFFER_FROM_KVDRAM
	#pragma HLS INTERFACE m_axi port = edges00 offset = slave bundle = gmem0
	#pragma HLS INTERFACE m_axi port = kvdram0 offset = slave bundle = gmem1
	#pragma HLS INTERFACE m_axi port = edges10 offset = slave bundle = gmem2
	#pragma HLS INTERFACE m_axi port = kvdram1 offset = slave bundle = gmem3
	#pragma HLS INTERFACE m_axi port = vdram offset = slave bundle = gmem4
#else 
	#pragma HLS INTERFACE m_axi port = kvdram0 offset = slave bundle = gmem0
	#pragma HLS INTERFACE m_axi port = kvdram1 offset = slave bundle = gmem1
	#pragma HLS INTERFACE m_axi port = vdram offset = slave bundle = gmem2
#endif 
//

#ifdef EDGES_IN_SEPERATE_BUFFER_FROM_KVDRAM
#pragma HLS INTERFACE s_axilite port = edges00 bundle = control
#pragma HLS INTERFACE s_axilite port = edges10 bundle = control
	
#endif 
#pragma HLS INTERFACE s_axilite port = kvdram0 bundle = control
#pragma HLS INTERFACE s_axilite port = kvdram1 bundle = control
	

#pragma HLS INTERFACE s_axilite port = vdram bundle = control

#pragma HLS INTERFACE s_axilite port=return bundle=control

#ifdef EDGES_IN_SEPERATE_BUFFER_FROM_KVDRAM
#pragma HLS DATA_PACK variable = edges00
#pragma HLS DATA_PACK variable = edges10
#endif 
#pragma HLS DATA_PACK variable = kvdram0
#pragma HLS DATA_PACK variable = kvdram1
#pragma HLS DATA_PACK variable = vdram

	#if defined(_DEBUGMODE_KERNELPRINTS2) & defined(ALLVERTEXISACTIVE_ALGORITHM)
	cout<<">>> ====================== Light weight ACTS (PR & SYNC) Launched... ====================== "<<endl; 
	#endif
	
	keyvalue_vbuffer_t vbuffer0[VDATA_PACKINGSIZE][BLOCKRAM_SIZE];
	#pragma HLS array_partition variable = vbuffer0
	uint32_type vmask0_p[BLOCKRAM_SIZE];
	unitBRAMwidth_type vmask0_subp[BLOCKRAM_SIZE];
	#pragma HLS DATA_PACK variable = vmask0_subp
	unitBRAMwidth_type vmask0[BLOCKRAM_SIZE];
	#pragma HLS DATA_PACK variable = vmask0
	keyvalue_t globalstatsbuffer0[MAX_NUM_PARTITIONS];
	keyvalue_vbuffer_t vbuffer1[VDATA_PACKINGSIZE][BLOCKRAM_SIZE];
	#pragma HLS array_partition variable = vbuffer1
	uint32_type vmask1_p[BLOCKRAM_SIZE];
	unitBRAMwidth_type vmask1_subp[BLOCKRAM_SIZE];
	#pragma HLS DATA_PACK variable = vmask1_subp
	unitBRAMwidth_type vmask1[BLOCKRAM_SIZE];
	#pragma HLS DATA_PACK variable = vmask1
	keyvalue_t globalstatsbuffer1[MAX_NUM_PARTITIONS];
	travstate_t rtravstates[2];
	#pragma HLS ARRAY_PARTITION variable=rtravstates complete
	value_t buffer[DOUBLE_BLOCKRAM_SIZE]; // CRITICAL AUTOMATEME.
	globalparams_t globalparamsKs[2];
	globalparams_t globalparamsEs[MAX_NUM_EDGE_BANKS];
	
	unsigned int sourcestatsmarker = 0;
	unsigned int deststatsmarker = 0;
	unsigned int reducesourcestatsmarker = 0;
	unsigned int EN_PROCESS = OFF; unsigned int EN_PARTITION = OFF; unsigned int EN_REDUCE = OFF; unsigned int EN_PROCESSANDREDUCE = OFF; unsigned int EN_PROCESSANDPARTITION = OFF;
	globalposition_t globalposition;
	
	#ifdef _DEBUGMODE_CHECKS3
	mask_subp_is_zero = 0;
	mask_subp_is_not_zero = 0;
	for(unsigned int i=0; i<8; i++){ _stages[i] = 0; }
	for(unsigned int i=0; i<MAX_NUM_PARTITIONS; i++){ _chkpartitions[i] = 0; }
	#endif 
	
globalparamsKs[0] = getglobalparams(kvdram0);globalparamsKs[1] = getglobalparams(kvdram1); // CRITICAL NOTEME. POSSIBLE SOURCE OF ROUTING CONSTRAINTS?
	globalparams_t globalparamsK = globalparamsKs[0]; // getglobalparams(kvdram0); // CRITICAL NOTEME. POSSIBLE SOURCE OF ROUTING CONSTRAINTS?
	#ifdef EDGES_IN_SEPERATE_BUFFER_FROM_KVDRAM
	
	#else 
	globalparamsEs[0] = globalparamsK;
	#endif 
	globalparams_t globalparamsV = getglobalparams(vdram);
	
	unsigned int PARTITION_CHKPT[MAX_NUM_EDGE_BANKS][EDGESSTATSDRAMSZ];
	for(unsigned int u=0; u<EDGESSTATSDRAMSZ; u++){ // CRITICAL NEWCHANGE.
		#ifdef EDGES_IN_SEPERATE_BUFFER_FROM_KVDRAM
			#ifdef _WIDEWORD
	
			#else
	
			#endif
		#else 
			#ifdef _WIDEWORD
			PARTITION_CHKPT[0][u] = kvdram0[globalparamsK.BASEOFFSETKVS_EDGESSTATSDRAM + u].range(31, 0); 
			#else
			PARTITION_CHKPT[0][u] = kvdram0[globalparamsK.BASEOFFSETKVS_EDGESSTATSDRAM + u].data[0].key; 
			#endif
		#endif 
	}
	
	buffer_type vmaskbuffersz_kvs = (globalparamsK.SIZE_REDUCE * VDATA_PACKINGSIZE) / 512;
	batch_type vmaskoffset_kvs = 0; 
	unsigned int vreadoffset_kvs = 0;
	buffer_type reducebuffersz = globalparamsK.SIZE_REDUCE / 2;
	unsigned int GraphAlgo = globalparamsK.ALGORITHMINFO_GRAPHALGORITHMID;
	#ifdef ENABLERECURSIVEPARTITIONING
	for(unsigned int k=0; k<globalparamsK.ACTSPARAMS_TREEDEPTH-1; k++)
	#else 
	for(unsigned int k=0; k<globalparamsK.ACTSPARAMS_TREEDEPTH; k++)
	#endif 
	{
		reducesourcestatsmarker += (1 << (NUM_PARTITIONS_POW * k)); 
	}
	unsigned int FIRSTLOP = 0;
	unsigned int NUMLOPs = 0;
	unsigned int FIRSTSOURCEPARTITION = 0;
	unsigned int LASTSOURCEPARTITIONS = 0;
	batch_type num_source_partitions = 0; 

	for(unsigned int i=0; i<DOUBLE_BLOCKRAM_SIZE; i++){ buffer[i] = 0; } 
	if(GraphAlgo != PAGERANK){ loadmany2vmask_p(vdram, vmask0_p,vmask1_p, globalparamsV.BASEOFFSETKVS_VERTICESPARTITIONMASK, BLOCKRAM_SIZE); }
	if(GraphAlgo != PAGERANK){ resetkvstatvalues(vdram, globalparamsV); }
	unsigned int num_edge_banks = NUM_EDGE_BANKS;
	unsigned int it_size; if(num_edge_banks==0){ it_size = 1; } else { it_size = NUM_EDGE_BANKS; }
	unsigned int FIRST_BASEOFFSETKVS_STATSDRAM = globalparamsK.BASEOFFSETKVS_STATSDRAM;
	
	#ifdef EDGES_IN_SEPERATE_BUFFER_FROM_KVDRAM
	copyvs(vdram, vbuffer0, globalparamsV);
	#endif
	#ifdef _WIDEWORD
	unsigned int hybridmode = vdram[globalparamsV.BASEOFFSETKVS_OTHERINFOS + globalparamsV.ALGORITHMINFO_GRAPHITERATIONID].range(31, 0);
	#else 
	unsigned int hybridmode = vdram[globalparamsV.BASEOFFSETKVS_OTHERINFOS + globalparamsV.ALGORITHMINFO_GRAPHITERATIONID].data[0].key;
	#endif 
	
	unsigned int num_stages = 3;
	if(globalparamsV.ENABLE_PROCESSCOMMAND == ON){ num_stages = 1; }
	if(globalparamsV.ENABLE_PARTITIONCOMMAND == ON){ num_stages = 2; }
	if(globalparamsV.ENABLE_APPLYUPDATESCOMMAND == ON){ num_stages = 3; }
	
	TOPKERNEL2_BASELOOP1: for(unsigned int edgebankID=0; edgebankID<it_size; edgebankID++){
		globalposition.edgebankID = edgebankID;
		#ifdef EDGES_IN_SEPERATE_BUFFER_FROM_KVDRAM
		for(unsigned int i=0; i<globalposition.edgebankID; i++){ globalparamsK.BASEOFFSETKVS_STATSDRAM += ((globalparamsK.SIZE_KVSTATSDRAM / VECTOR_SIZE) / NUM_EDGE_BANKS); } // SHIFT.
		#endif 
		TOPKERNEL2_BASELOOP1B: for(unsigned int v_chunkid=0; v_chunkid<globalparamsK.ACTSPARAMS_NUMEDGECHUNKSINABUFFER; v_chunkid++){
			globalposition.v_chunkid = v_chunkid;
			#ifdef EDGES_IN_SEPERATE_BUFFER_FROM_KVDRAM
			globalparamsK.VARS_WORKBATCH = globalposition.v_chunkid; // SHIFT.
			#endif 
			TOPKERNEL2_BASELOOP1C: for(step_type stage=0; stage<num_stages; stage++){
			
				EN_PROCESS = OFF; EN_PARTITION = OFF; EN_REDUCE = OFF; EN_PROCESSANDREDUCE = OFF; EN_PROCESSANDPARTITION = OFF;
				if(stage==0){ EN_PROCESS = ON; EN_PROCESSANDREDUCE = ON; EN_PROCESSANDPARTITION = ON;  } 
				else if(stage==1){ EN_PARTITION = ON; EN_PROCESSANDPARTITION = ON;  } 
				else { EN_REDUCE = ON; EN_PROCESSANDREDUCE = ON; }
				globalposition.EN_PROCESS = EN_PROCESS; globalposition.EN_PARTITION = EN_PARTITION; globalposition.EN_REDUCE = EN_REDUCE; globalposition.EN_PROCESSANDPARTITION = EN_PROCESSANDPARTITION; globalposition.EN_PROCESSANDREDUCE = EN_PROCESSANDREDUCE;
				
				if(stage==0){ sourcestatsmarker = 0; deststatsmarker = 1; } 
				else if(stage==1){ sourcestatsmarker = 1; deststatsmarker = 1 + NUM_PARTITIONS; } 
				else { sourcestatsmarker = reducesourcestatsmarker; deststatsmarker = NAp; }
				
				if(stage==0){ FIRSTLOP = 1; NUMLOPs = 1; } // FIXME. CHANGE FOR ~ENABLERECURSIVEPARTITIONING
				else if(stage==1){ FIRSTLOP = globalparamsK.ACTSPARAMS_BEGINLOP + 1; NUMLOPs = globalparamsK.ACTSPARAMS_NUMLOPS-2;  } 
				else{ FIRSTLOP = globalparamsK.ACTSPARAMS_TREEDEPTH; NUMLOPs = 1; }
				
				vmaskoffset_kvs = 0; 
				vreadoffset_kvs = 0;
				
				TOPKERNEL2_BASELOOP1D: for(step_type currentLOP=FIRSTLOP; currentLOP<(FIRSTLOP + NUMLOPs); currentLOP+=1){
					#ifdef ENABLERECURSIVEPARTITIONING
					if(stage==0){ num_source_partitions = get_num_source_partitions(globalparamsK.ACTSPARAMS_TREEDEPTH); }
					else if(stage==1){ num_source_partitions = get_num_source_partitions(currentLOP);  }
					else { num_source_partitions = get_num_source_partitions(globalparamsK.ACTSPARAMS_TREEDEPTH);  }
					#else
					NOT IMPLEMENTED.
					#endif
					
					if(stage==0){ FIRSTSOURCEPARTITION = PARTITION_CHKPT[edgebankID][v_chunkid]; LASTSOURCEPARTITIONS = PARTITION_CHKPT[edgebankID][v_chunkid+1]; } 
					else if(stage==1){ FIRSTSOURCEPARTITION = 0; LASTSOURCEPARTITIONS = num_source_partitions;  } 
					else{ FIRSTSOURCEPARTITION = 0; LASTSOURCEPARTITIONS = num_source_partitions; }
					
					if(globalposition.EN_PROCESS == ON){ vmaskoffset_kvs = PARTITION_CHKPT[edgebankID][v_chunkid] * (vmaskbuffersz_kvs); } // NEWCHANGE.
					batch_type vreadoffset_kvs = 0;
					
					TOPKERNEL2_BASELOOP1E: for(batch_type source_partition=FIRSTSOURCEPARTITION; source_partition<LASTSOURCEPARTITIONS; source_partition+=1){
						#ifdef _DEBUGMODE_KERNELPRINTS2
						actsutilityobj->print3("### TOPKERNEL2_BASELOOP1C:: source_partition", "currentLOP", "NAp", source_partition, currentLOP, NAp); 							
						#endif
						
						globalposition.stage = stage; 
						globalposition.laststage = 2; 
						globalposition.currentLOP = currentLOP; 
						globalposition.lastLOP = FIRSTLOP + NUMLOPs - 1; 
						globalposition.source_partition = source_partition;
						globalposition.first_source_partition = FIRSTSOURCEPARTITION;
						globalposition.last_source_partition = LASTSOURCEPARTITIONS - 1;
						globalposition.num_source_partitions = LASTSOURCEPARTITIONS - FIRSTSOURCEPARTITION; // FIXME.
						globalposition.sourcestatsmarker = sourcestatsmarker; 
						globalposition.deststatsmarker = deststatsmarker; 
						if(globalposition.v_chunkid==0 && globalposition.stage==0 && globalposition.currentLOP==1 && globalposition.source_partition==0){ globalposition.first=ON; } else { globalposition.first=OFF; }
						if(globalposition.v_chunkid==globalparamsK.ACTSPARAMS_NUMEDGECHUNKSINABUFFER-1 && globalposition.stage==globalposition.laststage && globalposition.currentLOP==globalposition.lastLOP && globalposition.source_partition==globalposition.last_source_partition){ globalposition.last=ON; } else { globalposition.last=OFF; }
						
						bool_type enableprocess = ON;
						if(globalposition.EN_PROCESS == ON){
							if(GraphAlgo != PAGERANK){ if(vmask0_p[source_partition] > 0){ enableprocess = ON; } else { enableprocess = OFF; }}
						}
						
						bool_type enablereduce = OFF; 
						unsigned int ntravszs = 0;
						if(globalposition.EN_REDUCE == ON){
							rtravstates[0] = gettravstate(globalposition.EN_REDUCE, kvdram0, globalparamsK, currentLOP, sourcestatsmarker); // CRITICAL NOTEME. POSSIBLE SOURCE OF ROUTING CONSTRAINTS?
							rtravstates[1] = gettravstate(globalposition.EN_REDUCE, kvdram1, globalparamsK, currentLOP, sourcestatsmarker); // CRITICAL NOTEME. POSSIBLE SOURCE OF ROUTING CONSTRAINTS?
							for(unsigned int i = 0; i < 2; i++){ ntravszs += rtravstates[i].size_kvs; }
							if(ntravszs > 0){ enablereduce = ON; } else { enablereduce = OFF; }
						}
						
						bool_type enable_loadmasks = OFF; 
						if(globalposition.EN_PROCESS == ON && enableprocess == ON){ enable_loadmasks = ON; } else { enable_loadmasks = OFF; }
						
						bool_type enable_readandreplicatevdata = OFF; 
						if((globalposition.EN_PROCESS == ON && enableprocess == ON) || (globalposition.EN_REDUCE == ON && enablereduce == ON)){ enable_readandreplicatevdata = ON; } else { enable_readandreplicatevdata = OFF; }
		
						// read vertices
						loadmany2vmasks(enable_loadmasks, vdram, vmask0,vmask1, vbuffer0, globalparamsV.BASEOFFSETKVS_VERTICESDATAMASK + vmaskoffset_kvs, vmaskbuffersz_kvs, globalparamsV); 
						#ifdef ENABLE_SUBVMASKING
						loadmany2vmasks_subp(enable_loadmasks, vmask0, vmask0_subp,vmask1_subp, vmaskbuffersz_kvs); 
						#endif
						readandreplicate2vdata(enable_readandreplicatevdata, vdram, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs, vbuffer0,vbuffer1, 0, 0, reducebuffersz, globalparamsV); 
						readandreplicate2vdata(enable_readandreplicatevdata, vdram, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs + reducebuffersz, vbuffer0,vbuffer1, 8, 0, reducebuffersz, globalparamsV); 
						
						// proc 
						topkernelproc_embedded(enableprocess, ON, enablereduce,  kvdram0, vbuffer0, vmask0_p, vmask0_subp, vmask0, globalstatsbuffer0, globalposition, hybridmode);	
						topkernelproc_embedded(enableprocess, ON, enablereduce,  kvdram1, vbuffer1, vmask1_p, vmask1_subp, vmask1, globalstatsbuffer1, globalposition, hybridmode);	
						
						// merge 
						if(globalposition.EN_REDUCE == ON && enablereduce == ON){ merge2andsavevdata(ON, vdram, vbuffer0,vbuffer1, 0, 0, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs); }
						if(globalposition.EN_REDUCE == ON && enablereduce == ON){ merge2andsavevdata(ON, vdram, vbuffer0,vbuffer1, 8, 0, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs + reducebuffersz); }
						
						// update stats
						if(globalposition.EN_REDUCE == ON){ 
							if(enablereduce == ON){ buffer[source_partition] += 64; } 
							else { buffer[source_partition] += 0; }
						}
						
						// increments
						if(globalposition.EN_PARTITION == ON || globalposition.EN_REDUCE == ON){ sourcestatsmarker += 1; }
						if(globalposition.EN_PARTITION == ON){ deststatsmarker += NUM_PARTITIONS; }
						if(globalposition.EN_PROCESS == ON){ vmaskoffset_kvs += vmaskbuffersz_kvs; }
						if(globalposition.EN_PROCESS == ON || globalposition.EN_REDUCE == ON){ vreadoffset_kvs += reducebuffersz * 2; }
					}
				}
			} // stage
		} // v_chunkid
	} // edgebankID
	
	commitkvstats(vdram, buffer, globalparamsV, reducesourcestatsmarker);
	
	#ifdef _WIDEWORD
	vdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_ALGORITHMINFO_GRAPHITERATIONID].range(31, 0) = globalparamsV.ALGORITHMINFO_GRAPHITERATIONID + 1; // CRITICAL NOTEME: Graph Iteration is incremented here
	#else
	vdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_ALGORITHMINFO_GRAPHITERATIONID].data[0].key = globalparamsV.ALGORITHMINFO_GRAPHITERATIONID + 1;
	#endif 
	
	#if defined(_DEBUGMODE_KERNELPRINTS2) & defined(ENABLE_SUBVMASKING)
	cout<<"topkernelP2:: subpmask status: mask_subp_is_zero: "<<mask_subp_is_zero<<", mask_subp_is_not_zero: "<<mask_subp_is_not_zero<<endl;
	#endif 
	#if defined(_DEBUGMODE_KERNELPRINTS2) & defined(DATA_SENSITIVE_ACTS)
	for(unsigned int i=0; i<MAX_NUM_PARTITIONS; i++){ cout<<"topkernelP2:: subpmask status: _chkpartitions["<<i<<"]: "<<_chkpartitions[i]<<endl;; }
	#endif 
	return;
}
}
extern "C" { // #ifdef ACTS_1by1by1byN (means everything packed in 1 compute unit)
void 
	#ifdef SW 
	actsproc:: 
	#endif
topkernelP3(
	uint512_dt * kvdram0,
	uint512_dt * kvdram1,
	uint512_dt * kvdram2,
	uint512_dt * vdram
	){
#ifdef EDGES_IN_SEPERATE_BUFFER_FROM_KVDRAM
	#pragma HLS INTERFACE m_axi port = edges00 offset = slave bundle = gmem0
	#pragma HLS INTERFACE m_axi port = kvdram0 offset = slave bundle = gmem1
	#pragma HLS INTERFACE m_axi port = edges10 offset = slave bundle = gmem2
	#pragma HLS INTERFACE m_axi port = kvdram1 offset = slave bundle = gmem3
	#pragma HLS INTERFACE m_axi port = edges20 offset = slave bundle = gmem4
	#pragma HLS INTERFACE m_axi port = kvdram2 offset = slave bundle = gmem5
	#pragma HLS INTERFACE m_axi port = vdram offset = slave bundle = gmem6
#else 
	#pragma HLS INTERFACE m_axi port = kvdram0 offset = slave bundle = gmem0
	#pragma HLS INTERFACE m_axi port = kvdram1 offset = slave bundle = gmem1
	#pragma HLS INTERFACE m_axi port = kvdram2 offset = slave bundle = gmem2
	#pragma HLS INTERFACE m_axi port = vdram offset = slave bundle = gmem3
#endif 
//

#ifdef EDGES_IN_SEPERATE_BUFFER_FROM_KVDRAM
#pragma HLS INTERFACE s_axilite port = edges00 bundle = control
#pragma HLS INTERFACE s_axilite port = edges10 bundle = control
#pragma HLS INTERFACE s_axilite port = edges20 bundle = control
	
#endif 
#pragma HLS INTERFACE s_axilite port = kvdram0 bundle = control
#pragma HLS INTERFACE s_axilite port = kvdram1 bundle = control
#pragma HLS INTERFACE s_axilite port = kvdram2 bundle = control
	

#pragma HLS INTERFACE s_axilite port = vdram bundle = control

#pragma HLS INTERFACE s_axilite port=return bundle=control

#ifdef EDGES_IN_SEPERATE_BUFFER_FROM_KVDRAM
#pragma HLS DATA_PACK variable = edges00
#pragma HLS DATA_PACK variable = edges10
#pragma HLS DATA_PACK variable = edges20
#endif 
#pragma HLS DATA_PACK variable = kvdram0
#pragma HLS DATA_PACK variable = kvdram1
#pragma HLS DATA_PACK variable = kvdram2
#pragma HLS DATA_PACK variable = vdram

	#if defined(_DEBUGMODE_KERNELPRINTS2) & defined(ALLVERTEXISACTIVE_ALGORITHM)
	cout<<">>> ====================== Light weight ACTS (PR & SYNC) Launched... ====================== "<<endl; 
	#endif
	
	keyvalue_vbuffer_t vbuffer0[VDATA_PACKINGSIZE][BLOCKRAM_SIZE];
	#pragma HLS array_partition variable = vbuffer0
	uint32_type vmask0_p[BLOCKRAM_SIZE];
	unitBRAMwidth_type vmask0_subp[BLOCKRAM_SIZE];
	#pragma HLS DATA_PACK variable = vmask0_subp
	unitBRAMwidth_type vmask0[BLOCKRAM_SIZE];
	#pragma HLS DATA_PACK variable = vmask0
	keyvalue_t globalstatsbuffer0[MAX_NUM_PARTITIONS];
	keyvalue_vbuffer_t vbuffer1[VDATA_PACKINGSIZE][BLOCKRAM_SIZE];
	#pragma HLS array_partition variable = vbuffer1
	uint32_type vmask1_p[BLOCKRAM_SIZE];
	unitBRAMwidth_type vmask1_subp[BLOCKRAM_SIZE];
	#pragma HLS DATA_PACK variable = vmask1_subp
	unitBRAMwidth_type vmask1[BLOCKRAM_SIZE];
	#pragma HLS DATA_PACK variable = vmask1
	keyvalue_t globalstatsbuffer1[MAX_NUM_PARTITIONS];
	keyvalue_vbuffer_t vbuffer2[VDATA_PACKINGSIZE][BLOCKRAM_SIZE];
	#pragma HLS array_partition variable = vbuffer2
	uint32_type vmask2_p[BLOCKRAM_SIZE];
	unitBRAMwidth_type vmask2_subp[BLOCKRAM_SIZE];
	#pragma HLS DATA_PACK variable = vmask2_subp
	unitBRAMwidth_type vmask2[BLOCKRAM_SIZE];
	#pragma HLS DATA_PACK variable = vmask2
	keyvalue_t globalstatsbuffer2[MAX_NUM_PARTITIONS];
	travstate_t rtravstates[3];
	#pragma HLS ARRAY_PARTITION variable=rtravstates complete
	value_t buffer[DOUBLE_BLOCKRAM_SIZE]; // CRITICAL AUTOMATEME.
	globalparams_t globalparamsKs[3];
	globalparams_t globalparamsEs[MAX_NUM_EDGE_BANKS];
	
	unsigned int sourcestatsmarker = 0;
	unsigned int deststatsmarker = 0;
	unsigned int reducesourcestatsmarker = 0;
	unsigned int EN_PROCESS = OFF; unsigned int EN_PARTITION = OFF; unsigned int EN_REDUCE = OFF; unsigned int EN_PROCESSANDREDUCE = OFF; unsigned int EN_PROCESSANDPARTITION = OFF;
	globalposition_t globalposition;
	
	#ifdef _DEBUGMODE_CHECKS3
	mask_subp_is_zero = 0;
	mask_subp_is_not_zero = 0;
	for(unsigned int i=0; i<8; i++){ _stages[i] = 0; }
	for(unsigned int i=0; i<MAX_NUM_PARTITIONS; i++){ _chkpartitions[i] = 0; }
	#endif 
	
globalparamsKs[0] = getglobalparams(kvdram0);globalparamsKs[1] = getglobalparams(kvdram1);globalparamsKs[2] = getglobalparams(kvdram2); // CRITICAL NOTEME. POSSIBLE SOURCE OF ROUTING CONSTRAINTS?
	globalparams_t globalparamsK = globalparamsKs[0]; // getglobalparams(kvdram0); // CRITICAL NOTEME. POSSIBLE SOURCE OF ROUTING CONSTRAINTS?
	#ifdef EDGES_IN_SEPERATE_BUFFER_FROM_KVDRAM
	
	#else 
	globalparamsEs[0] = globalparamsK;
	#endif 
	globalparams_t globalparamsV = getglobalparams(vdram);
	
	unsigned int PARTITION_CHKPT[MAX_NUM_EDGE_BANKS][EDGESSTATSDRAMSZ];
	for(unsigned int u=0; u<EDGESSTATSDRAMSZ; u++){ // CRITICAL NEWCHANGE.
		#ifdef EDGES_IN_SEPERATE_BUFFER_FROM_KVDRAM
			#ifdef _WIDEWORD
	
			#else
	
			#endif
		#else 
			#ifdef _WIDEWORD
			PARTITION_CHKPT[0][u] = kvdram0[globalparamsK.BASEOFFSETKVS_EDGESSTATSDRAM + u].range(31, 0); 
			#else
			PARTITION_CHKPT[0][u] = kvdram0[globalparamsK.BASEOFFSETKVS_EDGESSTATSDRAM + u].data[0].key; 
			#endif
		#endif 
	}
	
	buffer_type vmaskbuffersz_kvs = (globalparamsK.SIZE_REDUCE * VDATA_PACKINGSIZE) / 512;
	batch_type vmaskoffset_kvs = 0; 
	unsigned int vreadoffset_kvs = 0;
	buffer_type reducebuffersz = globalparamsK.SIZE_REDUCE / 2;
	unsigned int GraphAlgo = globalparamsK.ALGORITHMINFO_GRAPHALGORITHMID;
	#ifdef ENABLERECURSIVEPARTITIONING
	for(unsigned int k=0; k<globalparamsK.ACTSPARAMS_TREEDEPTH-1; k++)
	#else 
	for(unsigned int k=0; k<globalparamsK.ACTSPARAMS_TREEDEPTH; k++)
	#endif 
	{
		reducesourcestatsmarker += (1 << (NUM_PARTITIONS_POW * k)); 
	}
	unsigned int FIRSTLOP = 0;
	unsigned int NUMLOPs = 0;
	unsigned int FIRSTSOURCEPARTITION = 0;
	unsigned int LASTSOURCEPARTITIONS = 0;
	batch_type num_source_partitions = 0; 

	for(unsigned int i=0; i<DOUBLE_BLOCKRAM_SIZE; i++){ buffer[i] = 0; } 
	if(GraphAlgo != PAGERANK){ loadmany3vmask_p(vdram, vmask0_p,vmask1_p,vmask2_p, globalparamsV.BASEOFFSETKVS_VERTICESPARTITIONMASK, BLOCKRAM_SIZE); }
	if(GraphAlgo != PAGERANK){ resetkvstatvalues(vdram, globalparamsV); }
	unsigned int num_edge_banks = NUM_EDGE_BANKS;
	unsigned int it_size; if(num_edge_banks==0){ it_size = 1; } else { it_size = NUM_EDGE_BANKS; }
	unsigned int FIRST_BASEOFFSETKVS_STATSDRAM = globalparamsK.BASEOFFSETKVS_STATSDRAM;
	
	#ifdef EDGES_IN_SEPERATE_BUFFER_FROM_KVDRAM
	copyvs(vdram, vbuffer0, globalparamsV);
	#endif
	#ifdef _WIDEWORD
	unsigned int hybridmode = vdram[globalparamsV.BASEOFFSETKVS_OTHERINFOS + globalparamsV.ALGORITHMINFO_GRAPHITERATIONID].range(31, 0);
	#else 
	unsigned int hybridmode = vdram[globalparamsV.BASEOFFSETKVS_OTHERINFOS + globalparamsV.ALGORITHMINFO_GRAPHITERATIONID].data[0].key;
	#endif 
	
	unsigned int num_stages = 3;
	if(globalparamsV.ENABLE_PROCESSCOMMAND == ON){ num_stages = 1; }
	if(globalparamsV.ENABLE_PARTITIONCOMMAND == ON){ num_stages = 2; }
	if(globalparamsV.ENABLE_APPLYUPDATESCOMMAND == ON){ num_stages = 3; }
	
	TOPKERNEL3_BASELOOP1: for(unsigned int edgebankID=0; edgebankID<it_size; edgebankID++){
		globalposition.edgebankID = edgebankID;
		#ifdef EDGES_IN_SEPERATE_BUFFER_FROM_KVDRAM
		for(unsigned int i=0; i<globalposition.edgebankID; i++){ globalparamsK.BASEOFFSETKVS_STATSDRAM += ((globalparamsK.SIZE_KVSTATSDRAM / VECTOR_SIZE) / NUM_EDGE_BANKS); } // SHIFT.
		#endif 
		TOPKERNEL3_BASELOOP1B: for(unsigned int v_chunkid=0; v_chunkid<globalparamsK.ACTSPARAMS_NUMEDGECHUNKSINABUFFER; v_chunkid++){
			globalposition.v_chunkid = v_chunkid;
			#ifdef EDGES_IN_SEPERATE_BUFFER_FROM_KVDRAM
			globalparamsK.VARS_WORKBATCH = globalposition.v_chunkid; // SHIFT.
			#endif 
			TOPKERNEL3_BASELOOP1C: for(step_type stage=0; stage<num_stages; stage++){
			
				EN_PROCESS = OFF; EN_PARTITION = OFF; EN_REDUCE = OFF; EN_PROCESSANDREDUCE = OFF; EN_PROCESSANDPARTITION = OFF;
				if(stage==0){ EN_PROCESS = ON; EN_PROCESSANDREDUCE = ON; EN_PROCESSANDPARTITION = ON;  } 
				else if(stage==1){ EN_PARTITION = ON; EN_PROCESSANDPARTITION = ON;  } 
				else { EN_REDUCE = ON; EN_PROCESSANDREDUCE = ON; }
				globalposition.EN_PROCESS = EN_PROCESS; globalposition.EN_PARTITION = EN_PARTITION; globalposition.EN_REDUCE = EN_REDUCE; globalposition.EN_PROCESSANDPARTITION = EN_PROCESSANDPARTITION; globalposition.EN_PROCESSANDREDUCE = EN_PROCESSANDREDUCE;
				
				if(stage==0){ sourcestatsmarker = 0; deststatsmarker = 1; } 
				else if(stage==1){ sourcestatsmarker = 1; deststatsmarker = 1 + NUM_PARTITIONS; } 
				else { sourcestatsmarker = reducesourcestatsmarker; deststatsmarker = NAp; }
				
				if(stage==0){ FIRSTLOP = 1; NUMLOPs = 1; } // FIXME. CHANGE FOR ~ENABLERECURSIVEPARTITIONING
				else if(stage==1){ FIRSTLOP = globalparamsK.ACTSPARAMS_BEGINLOP + 1; NUMLOPs = globalparamsK.ACTSPARAMS_NUMLOPS-2;  } 
				else{ FIRSTLOP = globalparamsK.ACTSPARAMS_TREEDEPTH; NUMLOPs = 1; }
				
				vmaskoffset_kvs = 0; 
				vreadoffset_kvs = 0;
				
				TOPKERNEL3_BASELOOP1D: for(step_type currentLOP=FIRSTLOP; currentLOP<(FIRSTLOP + NUMLOPs); currentLOP+=1){
					#ifdef ENABLERECURSIVEPARTITIONING
					if(stage==0){ num_source_partitions = get_num_source_partitions(globalparamsK.ACTSPARAMS_TREEDEPTH); }
					else if(stage==1){ num_source_partitions = get_num_source_partitions(currentLOP);  }
					else { num_source_partitions = get_num_source_partitions(globalparamsK.ACTSPARAMS_TREEDEPTH);  }
					#else
					NOT IMPLEMENTED.
					#endif
					
					if(stage==0){ FIRSTSOURCEPARTITION = PARTITION_CHKPT[edgebankID][v_chunkid]; LASTSOURCEPARTITIONS = PARTITION_CHKPT[edgebankID][v_chunkid+1]; } 
					else if(stage==1){ FIRSTSOURCEPARTITION = 0; LASTSOURCEPARTITIONS = num_source_partitions;  } 
					else{ FIRSTSOURCEPARTITION = 0; LASTSOURCEPARTITIONS = num_source_partitions; }
					
					if(globalposition.EN_PROCESS == ON){ vmaskoffset_kvs = PARTITION_CHKPT[edgebankID][v_chunkid] * (vmaskbuffersz_kvs); } // NEWCHANGE.
					batch_type vreadoffset_kvs = 0;
					
					TOPKERNEL3_BASELOOP1E: for(batch_type source_partition=FIRSTSOURCEPARTITION; source_partition<LASTSOURCEPARTITIONS; source_partition+=1){
						#ifdef _DEBUGMODE_KERNELPRINTS2
						actsutilityobj->print3("### TOPKERNEL3_BASELOOP1C:: source_partition", "currentLOP", "NAp", source_partition, currentLOP, NAp); 							
						#endif
						
						globalposition.stage = stage; 
						globalposition.laststage = 2; 
						globalposition.currentLOP = currentLOP; 
						globalposition.lastLOP = FIRSTLOP + NUMLOPs - 1; 
						globalposition.source_partition = source_partition;
						globalposition.first_source_partition = FIRSTSOURCEPARTITION;
						globalposition.last_source_partition = LASTSOURCEPARTITIONS - 1;
						globalposition.num_source_partitions = LASTSOURCEPARTITIONS - FIRSTSOURCEPARTITION; // FIXME.
						globalposition.sourcestatsmarker = sourcestatsmarker; 
						globalposition.deststatsmarker = deststatsmarker; 
						if(globalposition.v_chunkid==0 && globalposition.stage==0 && globalposition.currentLOP==1 && globalposition.source_partition==0){ globalposition.first=ON; } else { globalposition.first=OFF; }
						if(globalposition.v_chunkid==globalparamsK.ACTSPARAMS_NUMEDGECHUNKSINABUFFER-1 && globalposition.stage==globalposition.laststage && globalposition.currentLOP==globalposition.lastLOP && globalposition.source_partition==globalposition.last_source_partition){ globalposition.last=ON; } else { globalposition.last=OFF; }
						
						bool_type enableprocess = ON;
						if(globalposition.EN_PROCESS == ON){
							if(GraphAlgo != PAGERANK){ if(vmask0_p[source_partition] > 0){ enableprocess = ON; } else { enableprocess = OFF; }}
						}
						
						bool_type enablereduce = OFF; 
						unsigned int ntravszs = 0;
						if(globalposition.EN_REDUCE == ON){
							rtravstates[0] = gettravstate(globalposition.EN_REDUCE, kvdram0, globalparamsK, currentLOP, sourcestatsmarker); // CRITICAL NOTEME. POSSIBLE SOURCE OF ROUTING CONSTRAINTS?
							rtravstates[1] = gettravstate(globalposition.EN_REDUCE, kvdram1, globalparamsK, currentLOP, sourcestatsmarker); // CRITICAL NOTEME. POSSIBLE SOURCE OF ROUTING CONSTRAINTS?
							rtravstates[2] = gettravstate(globalposition.EN_REDUCE, kvdram2, globalparamsK, currentLOP, sourcestatsmarker); // CRITICAL NOTEME. POSSIBLE SOURCE OF ROUTING CONSTRAINTS?
							for(unsigned int i = 0; i < 3; i++){ ntravszs += rtravstates[i].size_kvs; }
							if(ntravszs > 0){ enablereduce = ON; } else { enablereduce = OFF; }
						}
						
						bool_type enable_loadmasks = OFF; 
						if(globalposition.EN_PROCESS == ON && enableprocess == ON){ enable_loadmasks = ON; } else { enable_loadmasks = OFF; }
						
						bool_type enable_readandreplicatevdata = OFF; 
						if((globalposition.EN_PROCESS == ON && enableprocess == ON) || (globalposition.EN_REDUCE == ON && enablereduce == ON)){ enable_readandreplicatevdata = ON; } else { enable_readandreplicatevdata = OFF; }
		
						// read vertices
						loadmany3vmasks(enable_loadmasks, vdram, vmask0,vmask1,vmask2, vbuffer0, globalparamsV.BASEOFFSETKVS_VERTICESDATAMASK + vmaskoffset_kvs, vmaskbuffersz_kvs, globalparamsV); 
						#ifdef ENABLE_SUBVMASKING
						loadmany3vmasks_subp(enable_loadmasks, vmask0, vmask0_subp,vmask1_subp,vmask2_subp, vmaskbuffersz_kvs); 
						#endif
						readandreplicate3vdata(enable_readandreplicatevdata, vdram, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs, vbuffer0,vbuffer1,vbuffer2, 0, 0, reducebuffersz, globalparamsV); 
						readandreplicate3vdata(enable_readandreplicatevdata, vdram, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs + reducebuffersz, vbuffer0,vbuffer1,vbuffer2, 8, 0, reducebuffersz, globalparamsV); 
						
						// proc 
						topkernelproc_embedded(enableprocess, ON, enablereduce,  kvdram0, vbuffer0, vmask0_p, vmask0_subp, vmask0, globalstatsbuffer0, globalposition, hybridmode);	
						topkernelproc_embedded(enableprocess, ON, enablereduce,  kvdram1, vbuffer1, vmask1_p, vmask1_subp, vmask1, globalstatsbuffer1, globalposition, hybridmode);	
						topkernelproc_embedded(enableprocess, ON, enablereduce,  kvdram2, vbuffer2, vmask2_p, vmask2_subp, vmask2, globalstatsbuffer2, globalposition, hybridmode);	
						
						// merge 
						if(globalposition.EN_REDUCE == ON && enablereduce == ON){ merge3andsavevdata(ON, vdram, vbuffer0,vbuffer1,vbuffer2, 0, 0, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs); }
						if(globalposition.EN_REDUCE == ON && enablereduce == ON){ merge3andsavevdata(ON, vdram, vbuffer0,vbuffer1,vbuffer2, 8, 0, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs + reducebuffersz); }
						
						// update stats
						if(globalposition.EN_REDUCE == ON){ 
							if(enablereduce == ON){ buffer[source_partition] += 64; } 
							else { buffer[source_partition] += 0; }
						}
						
						// increments
						if(globalposition.EN_PARTITION == ON || globalposition.EN_REDUCE == ON){ sourcestatsmarker += 1; }
						if(globalposition.EN_PARTITION == ON){ deststatsmarker += NUM_PARTITIONS; }
						if(globalposition.EN_PROCESS == ON){ vmaskoffset_kvs += vmaskbuffersz_kvs; }
						if(globalposition.EN_PROCESS == ON || globalposition.EN_REDUCE == ON){ vreadoffset_kvs += reducebuffersz * 2; }
					}
				}
			} // stage
		} // v_chunkid
	} // edgebankID
	
	commitkvstats(vdram, buffer, globalparamsV, reducesourcestatsmarker);
	
	#ifdef _WIDEWORD
	vdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_ALGORITHMINFO_GRAPHITERATIONID].range(31, 0) = globalparamsV.ALGORITHMINFO_GRAPHITERATIONID + 1; // CRITICAL NOTEME: Graph Iteration is incremented here
	#else
	vdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_ALGORITHMINFO_GRAPHITERATIONID].data[0].key = globalparamsV.ALGORITHMINFO_GRAPHITERATIONID + 1;
	#endif 
	
	#if defined(_DEBUGMODE_KERNELPRINTS2) & defined(ENABLE_SUBVMASKING)
	cout<<"topkernelP3:: subpmask status: mask_subp_is_zero: "<<mask_subp_is_zero<<", mask_subp_is_not_zero: "<<mask_subp_is_not_zero<<endl;
	#endif 
	#if defined(_DEBUGMODE_KERNELPRINTS2) & defined(DATA_SENSITIVE_ACTS)
	for(unsigned int i=0; i<MAX_NUM_PARTITIONS; i++){ cout<<"topkernelP3:: subpmask status: _chkpartitions["<<i<<"]: "<<_chkpartitions[i]<<endl;; }
	#endif 
	return;
}
}
extern "C" { // #ifdef ACTS_1by1by1byN (means everything packed in 1 compute unit)
void 
	#ifdef SW 
	actsproc:: 
	#endif
topkernelP4(
	uint512_dt * kvdram0,
	uint512_dt * kvdram1,
	uint512_dt * kvdram2,
	uint512_dt * kvdram3,
	uint512_dt * vdram
	){
#ifdef EDGES_IN_SEPERATE_BUFFER_FROM_KVDRAM
	#pragma HLS INTERFACE m_axi port = edges00 offset = slave bundle = gmem0
	#pragma HLS INTERFACE m_axi port = kvdram0 offset = slave bundle = gmem1
	#pragma HLS INTERFACE m_axi port = edges10 offset = slave bundle = gmem2
	#pragma HLS INTERFACE m_axi port = kvdram1 offset = slave bundle = gmem3
	#pragma HLS INTERFACE m_axi port = edges20 offset = slave bundle = gmem4
	#pragma HLS INTERFACE m_axi port = kvdram2 offset = slave bundle = gmem5
	#pragma HLS INTERFACE m_axi port = edges30 offset = slave bundle = gmem6
	#pragma HLS INTERFACE m_axi port = kvdram3 offset = slave bundle = gmem7
	#pragma HLS INTERFACE m_axi port = vdram offset = slave bundle = gmem8
#else 
	#pragma HLS INTERFACE m_axi port = kvdram0 offset = slave bundle = gmem0
	#pragma HLS INTERFACE m_axi port = kvdram1 offset = slave bundle = gmem1
	#pragma HLS INTERFACE m_axi port = kvdram2 offset = slave bundle = gmem2
	#pragma HLS INTERFACE m_axi port = kvdram3 offset = slave bundle = gmem3
	#pragma HLS INTERFACE m_axi port = vdram offset = slave bundle = gmem4
#endif 
//

#ifdef EDGES_IN_SEPERATE_BUFFER_FROM_KVDRAM
#pragma HLS INTERFACE s_axilite port = edges00 bundle = control
#pragma HLS INTERFACE s_axilite port = edges10 bundle = control
#pragma HLS INTERFACE s_axilite port = edges20 bundle = control
#pragma HLS INTERFACE s_axilite port = edges30 bundle = control
	
#endif 
#pragma HLS INTERFACE s_axilite port = kvdram0 bundle = control
#pragma HLS INTERFACE s_axilite port = kvdram1 bundle = control
#pragma HLS INTERFACE s_axilite port = kvdram2 bundle = control
#pragma HLS INTERFACE s_axilite port = kvdram3 bundle = control
	

#pragma HLS INTERFACE s_axilite port = vdram bundle = control

#pragma HLS INTERFACE s_axilite port=return bundle=control

#ifdef EDGES_IN_SEPERATE_BUFFER_FROM_KVDRAM
#pragma HLS DATA_PACK variable = edges00
#pragma HLS DATA_PACK variable = edges10
#pragma HLS DATA_PACK variable = edges20
#pragma HLS DATA_PACK variable = edges30
#endif 
#pragma HLS DATA_PACK variable = kvdram0
#pragma HLS DATA_PACK variable = kvdram1
#pragma HLS DATA_PACK variable = kvdram2
#pragma HLS DATA_PACK variable = kvdram3
#pragma HLS DATA_PACK variable = vdram

	#if defined(_DEBUGMODE_KERNELPRINTS2) & defined(ALLVERTEXISACTIVE_ALGORITHM)
	cout<<">>> ====================== Light weight ACTS (PR & SYNC) Launched... ====================== "<<endl; 
	#endif
	
	keyvalue_vbuffer_t vbuffer0[VDATA_PACKINGSIZE][BLOCKRAM_SIZE];
	#pragma HLS array_partition variable = vbuffer0
	uint32_type vmask0_p[BLOCKRAM_SIZE];
	unitBRAMwidth_type vmask0_subp[BLOCKRAM_SIZE];
	#pragma HLS DATA_PACK variable = vmask0_subp
	unitBRAMwidth_type vmask0[BLOCKRAM_SIZE];
	#pragma HLS DATA_PACK variable = vmask0
	keyvalue_t globalstatsbuffer0[MAX_NUM_PARTITIONS];
	keyvalue_vbuffer_t vbuffer1[VDATA_PACKINGSIZE][BLOCKRAM_SIZE];
	#pragma HLS array_partition variable = vbuffer1
	uint32_type vmask1_p[BLOCKRAM_SIZE];
	unitBRAMwidth_type vmask1_subp[BLOCKRAM_SIZE];
	#pragma HLS DATA_PACK variable = vmask1_subp
	unitBRAMwidth_type vmask1[BLOCKRAM_SIZE];
	#pragma HLS DATA_PACK variable = vmask1
	keyvalue_t globalstatsbuffer1[MAX_NUM_PARTITIONS];
	keyvalue_vbuffer_t vbuffer2[VDATA_PACKINGSIZE][BLOCKRAM_SIZE];
	#pragma HLS array_partition variable = vbuffer2
	uint32_type vmask2_p[BLOCKRAM_SIZE];
	unitBRAMwidth_type vmask2_subp[BLOCKRAM_SIZE];
	#pragma HLS DATA_PACK variable = vmask2_subp
	unitBRAMwidth_type vmask2[BLOCKRAM_SIZE];
	#pragma HLS DATA_PACK variable = vmask2
	keyvalue_t globalstatsbuffer2[MAX_NUM_PARTITIONS];
	keyvalue_vbuffer_t vbuffer3[VDATA_PACKINGSIZE][BLOCKRAM_SIZE];
	#pragma HLS array_partition variable = vbuffer3
	uint32_type vmask3_p[BLOCKRAM_SIZE];
	unitBRAMwidth_type vmask3_subp[BLOCKRAM_SIZE];
	#pragma HLS DATA_PACK variable = vmask3_subp
	unitBRAMwidth_type vmask3[BLOCKRAM_SIZE];
	#pragma HLS DATA_PACK variable = vmask3
	keyvalue_t globalstatsbuffer3[MAX_NUM_PARTITIONS];
	travstate_t rtravstates[4];
	#pragma HLS ARRAY_PARTITION variable=rtravstates complete
	value_t buffer[DOUBLE_BLOCKRAM_SIZE]; // CRITICAL AUTOMATEME.
	globalparams_t globalparamsKs[4];
	globalparams_t globalparamsEs[MAX_NUM_EDGE_BANKS];
	
	unsigned int sourcestatsmarker = 0;
	unsigned int deststatsmarker = 0;
	unsigned int reducesourcestatsmarker = 0;
	unsigned int EN_PROCESS = OFF; unsigned int EN_PARTITION = OFF; unsigned int EN_REDUCE = OFF; unsigned int EN_PROCESSANDREDUCE = OFF; unsigned int EN_PROCESSANDPARTITION = OFF;
	globalposition_t globalposition;
	
	#ifdef _DEBUGMODE_CHECKS3
	mask_subp_is_zero = 0;
	mask_subp_is_not_zero = 0;
	for(unsigned int i=0; i<8; i++){ _stages[i] = 0; }
	for(unsigned int i=0; i<MAX_NUM_PARTITIONS; i++){ _chkpartitions[i] = 0; }
	#endif 
	
globalparamsKs[0] = getglobalparams(kvdram0);globalparamsKs[1] = getglobalparams(kvdram1);globalparamsKs[2] = getglobalparams(kvdram2);globalparamsKs[3] = getglobalparams(kvdram3); // CRITICAL NOTEME. POSSIBLE SOURCE OF ROUTING CONSTRAINTS?
	globalparams_t globalparamsK = globalparamsKs[0]; // getglobalparams(kvdram0); // CRITICAL NOTEME. POSSIBLE SOURCE OF ROUTING CONSTRAINTS?
	#ifdef EDGES_IN_SEPERATE_BUFFER_FROM_KVDRAM
	
	#else 
	globalparamsEs[0] = globalparamsK;
	#endif 
	globalparams_t globalparamsV = getglobalparams(vdram);
	
	unsigned int PARTITION_CHKPT[MAX_NUM_EDGE_BANKS][EDGESSTATSDRAMSZ];
	for(unsigned int u=0; u<EDGESSTATSDRAMSZ; u++){ // CRITICAL NEWCHANGE.
		#ifdef EDGES_IN_SEPERATE_BUFFER_FROM_KVDRAM
			#ifdef _WIDEWORD
	
			#else
	
			#endif
		#else 
			#ifdef _WIDEWORD
			PARTITION_CHKPT[0][u] = kvdram0[globalparamsK.BASEOFFSETKVS_EDGESSTATSDRAM + u].range(31, 0); 
			#else
			PARTITION_CHKPT[0][u] = kvdram0[globalparamsK.BASEOFFSETKVS_EDGESSTATSDRAM + u].data[0].key; 
			#endif
		#endif 
	}
	
	buffer_type vmaskbuffersz_kvs = (globalparamsK.SIZE_REDUCE * VDATA_PACKINGSIZE) / 512;
	batch_type vmaskoffset_kvs = 0; 
	unsigned int vreadoffset_kvs = 0;
	buffer_type reducebuffersz = globalparamsK.SIZE_REDUCE / 2;
	unsigned int GraphAlgo = globalparamsK.ALGORITHMINFO_GRAPHALGORITHMID;
	#ifdef ENABLERECURSIVEPARTITIONING
	for(unsigned int k=0; k<globalparamsK.ACTSPARAMS_TREEDEPTH-1; k++)
	#else 
	for(unsigned int k=0; k<globalparamsK.ACTSPARAMS_TREEDEPTH; k++)
	#endif 
	{
		reducesourcestatsmarker += (1 << (NUM_PARTITIONS_POW * k)); 
	}
	unsigned int FIRSTLOP = 0;
	unsigned int NUMLOPs = 0;
	unsigned int FIRSTSOURCEPARTITION = 0;
	unsigned int LASTSOURCEPARTITIONS = 0;
	batch_type num_source_partitions = 0; 

	for(unsigned int i=0; i<DOUBLE_BLOCKRAM_SIZE; i++){ buffer[i] = 0; } 
	if(GraphAlgo != PAGERANK){ loadmany4vmask_p(vdram, vmask0_p,vmask1_p,vmask2_p,vmask3_p, globalparamsV.BASEOFFSETKVS_VERTICESPARTITIONMASK, BLOCKRAM_SIZE); }
	if(GraphAlgo != PAGERANK){ resetkvstatvalues(vdram, globalparamsV); }
	unsigned int num_edge_banks = NUM_EDGE_BANKS;
	unsigned int it_size; if(num_edge_banks==0){ it_size = 1; } else { it_size = NUM_EDGE_BANKS; }
	unsigned int FIRST_BASEOFFSETKVS_STATSDRAM = globalparamsK.BASEOFFSETKVS_STATSDRAM;
	
	#ifdef EDGES_IN_SEPERATE_BUFFER_FROM_KVDRAM
	copyvs(vdram, vbuffer0, globalparamsV);
	#endif
	#ifdef _WIDEWORD
	unsigned int hybridmode = vdram[globalparamsV.BASEOFFSETKVS_OTHERINFOS + globalparamsV.ALGORITHMINFO_GRAPHITERATIONID].range(31, 0);
	#else 
	unsigned int hybridmode = vdram[globalparamsV.BASEOFFSETKVS_OTHERINFOS + globalparamsV.ALGORITHMINFO_GRAPHITERATIONID].data[0].key;
	#endif 
	
	unsigned int num_stages = 3;
	if(globalparamsV.ENABLE_PROCESSCOMMAND == ON){ num_stages = 1; }
	if(globalparamsV.ENABLE_PARTITIONCOMMAND == ON){ num_stages = 2; }
	if(globalparamsV.ENABLE_APPLYUPDATESCOMMAND == ON){ num_stages = 3; }
	
	TOPKERNEL4_BASELOOP1: for(unsigned int edgebankID=0; edgebankID<it_size; edgebankID++){
		globalposition.edgebankID = edgebankID;
		#ifdef EDGES_IN_SEPERATE_BUFFER_FROM_KVDRAM
		for(unsigned int i=0; i<globalposition.edgebankID; i++){ globalparamsK.BASEOFFSETKVS_STATSDRAM += ((globalparamsK.SIZE_KVSTATSDRAM / VECTOR_SIZE) / NUM_EDGE_BANKS); } // SHIFT.
		#endif 
		TOPKERNEL4_BASELOOP1B: for(unsigned int v_chunkid=0; v_chunkid<globalparamsK.ACTSPARAMS_NUMEDGECHUNKSINABUFFER; v_chunkid++){
			globalposition.v_chunkid = v_chunkid;
			#ifdef EDGES_IN_SEPERATE_BUFFER_FROM_KVDRAM
			globalparamsK.VARS_WORKBATCH = globalposition.v_chunkid; // SHIFT.
			#endif 
			TOPKERNEL4_BASELOOP1C: for(step_type stage=0; stage<num_stages; stage++){
			
				EN_PROCESS = OFF; EN_PARTITION = OFF; EN_REDUCE = OFF; EN_PROCESSANDREDUCE = OFF; EN_PROCESSANDPARTITION = OFF;
				if(stage==0){ EN_PROCESS = ON; EN_PROCESSANDREDUCE = ON; EN_PROCESSANDPARTITION = ON;  } 
				else if(stage==1){ EN_PARTITION = ON; EN_PROCESSANDPARTITION = ON;  } 
				else { EN_REDUCE = ON; EN_PROCESSANDREDUCE = ON; }
				globalposition.EN_PROCESS = EN_PROCESS; globalposition.EN_PARTITION = EN_PARTITION; globalposition.EN_REDUCE = EN_REDUCE; globalposition.EN_PROCESSANDPARTITION = EN_PROCESSANDPARTITION; globalposition.EN_PROCESSANDREDUCE = EN_PROCESSANDREDUCE;
				
				if(stage==0){ sourcestatsmarker = 0; deststatsmarker = 1; } 
				else if(stage==1){ sourcestatsmarker = 1; deststatsmarker = 1 + NUM_PARTITIONS; } 
				else { sourcestatsmarker = reducesourcestatsmarker; deststatsmarker = NAp; }
				
				if(stage==0){ FIRSTLOP = 1; NUMLOPs = 1; } // FIXME. CHANGE FOR ~ENABLERECURSIVEPARTITIONING
				else if(stage==1){ FIRSTLOP = globalparamsK.ACTSPARAMS_BEGINLOP + 1; NUMLOPs = globalparamsK.ACTSPARAMS_NUMLOPS-2;  } 
				else{ FIRSTLOP = globalparamsK.ACTSPARAMS_TREEDEPTH; NUMLOPs = 1; }
				
				vmaskoffset_kvs = 0; 
				vreadoffset_kvs = 0;
				
				TOPKERNEL4_BASELOOP1D: for(step_type currentLOP=FIRSTLOP; currentLOP<(FIRSTLOP + NUMLOPs); currentLOP+=1){
					#ifdef ENABLERECURSIVEPARTITIONING
					if(stage==0){ num_source_partitions = get_num_source_partitions(globalparamsK.ACTSPARAMS_TREEDEPTH); }
					else if(stage==1){ num_source_partitions = get_num_source_partitions(currentLOP);  }
					else { num_source_partitions = get_num_source_partitions(globalparamsK.ACTSPARAMS_TREEDEPTH);  }
					#else
					NOT IMPLEMENTED.
					#endif
					
					if(stage==0){ FIRSTSOURCEPARTITION = PARTITION_CHKPT[edgebankID][v_chunkid]; LASTSOURCEPARTITIONS = PARTITION_CHKPT[edgebankID][v_chunkid+1]; } 
					else if(stage==1){ FIRSTSOURCEPARTITION = 0; LASTSOURCEPARTITIONS = num_source_partitions;  } 
					else{ FIRSTSOURCEPARTITION = 0; LASTSOURCEPARTITIONS = num_source_partitions; }
					
					if(globalposition.EN_PROCESS == ON){ vmaskoffset_kvs = PARTITION_CHKPT[edgebankID][v_chunkid] * (vmaskbuffersz_kvs); } // NEWCHANGE.
					batch_type vreadoffset_kvs = 0;
					
					TOPKERNEL4_BASELOOP1E: for(batch_type source_partition=FIRSTSOURCEPARTITION; source_partition<LASTSOURCEPARTITIONS; source_partition+=1){
						#ifdef _DEBUGMODE_KERNELPRINTS2
						actsutilityobj->print3("### TOPKERNEL4_BASELOOP1C:: source_partition", "currentLOP", "NAp", source_partition, currentLOP, NAp); 							
						#endif
						
						globalposition.stage = stage; 
						globalposition.laststage = 2; 
						globalposition.currentLOP = currentLOP; 
						globalposition.lastLOP = FIRSTLOP + NUMLOPs - 1; 
						globalposition.source_partition = source_partition;
						globalposition.first_source_partition = FIRSTSOURCEPARTITION;
						globalposition.last_source_partition = LASTSOURCEPARTITIONS - 1;
						globalposition.num_source_partitions = LASTSOURCEPARTITIONS - FIRSTSOURCEPARTITION; // FIXME.
						globalposition.sourcestatsmarker = sourcestatsmarker; 
						globalposition.deststatsmarker = deststatsmarker; 
						if(globalposition.v_chunkid==0 && globalposition.stage==0 && globalposition.currentLOP==1 && globalposition.source_partition==0){ globalposition.first=ON; } else { globalposition.first=OFF; }
						if(globalposition.v_chunkid==globalparamsK.ACTSPARAMS_NUMEDGECHUNKSINABUFFER-1 && globalposition.stage==globalposition.laststage && globalposition.currentLOP==globalposition.lastLOP && globalposition.source_partition==globalposition.last_source_partition){ globalposition.last=ON; } else { globalposition.last=OFF; }
						
						bool_type enableprocess = ON;
						if(globalposition.EN_PROCESS == ON){
							if(GraphAlgo != PAGERANK){ if(vmask0_p[source_partition] > 0){ enableprocess = ON; } else { enableprocess = OFF; }}
						}
						
						bool_type enablereduce = OFF; 
						unsigned int ntravszs = 0;
						if(globalposition.EN_REDUCE == ON){
							rtravstates[0] = gettravstate(globalposition.EN_REDUCE, kvdram0, globalparamsK, currentLOP, sourcestatsmarker); // CRITICAL NOTEME. POSSIBLE SOURCE OF ROUTING CONSTRAINTS?
							rtravstates[1] = gettravstate(globalposition.EN_REDUCE, kvdram1, globalparamsK, currentLOP, sourcestatsmarker); // CRITICAL NOTEME. POSSIBLE SOURCE OF ROUTING CONSTRAINTS?
							rtravstates[2] = gettravstate(globalposition.EN_REDUCE, kvdram2, globalparamsK, currentLOP, sourcestatsmarker); // CRITICAL NOTEME. POSSIBLE SOURCE OF ROUTING CONSTRAINTS?
							rtravstates[3] = gettravstate(globalposition.EN_REDUCE, kvdram3, globalparamsK, currentLOP, sourcestatsmarker); // CRITICAL NOTEME. POSSIBLE SOURCE OF ROUTING CONSTRAINTS?
							for(unsigned int i = 0; i < 4; i++){ ntravszs += rtravstates[i].size_kvs; }
							if(ntravszs > 0){ enablereduce = ON; } else { enablereduce = OFF; }
						}
						
						bool_type enable_loadmasks = OFF; 
						if(globalposition.EN_PROCESS == ON && enableprocess == ON){ enable_loadmasks = ON; } else { enable_loadmasks = OFF; }
						
						bool_type enable_readandreplicatevdata = OFF; 
						if((globalposition.EN_PROCESS == ON && enableprocess == ON) || (globalposition.EN_REDUCE == ON && enablereduce == ON)){ enable_readandreplicatevdata = ON; } else { enable_readandreplicatevdata = OFF; }
		
						// read vertices
						loadmany4vmasks(enable_loadmasks, vdram, vmask0,vmask1,vmask2,vmask3, vbuffer0, globalparamsV.BASEOFFSETKVS_VERTICESDATAMASK + vmaskoffset_kvs, vmaskbuffersz_kvs, globalparamsV); 
						#ifdef ENABLE_SUBVMASKING
						loadmany4vmasks_subp(enable_loadmasks, vmask0, vmask0_subp,vmask1_subp,vmask2_subp,vmask3_subp, vmaskbuffersz_kvs); 
						#endif
						readandreplicate4vdata(enable_readandreplicatevdata, vdram, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs, vbuffer0,vbuffer1,vbuffer2,vbuffer3, 0, 0, reducebuffersz, globalparamsV); 
						readandreplicate4vdata(enable_readandreplicatevdata, vdram, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs + reducebuffersz, vbuffer0,vbuffer1,vbuffer2,vbuffer3, 8, 0, reducebuffersz, globalparamsV); 
						
						// proc 
						topkernelproc_embedded(enableprocess, ON, enablereduce,  kvdram0, vbuffer0, vmask0_p, vmask0_subp, vmask0, globalstatsbuffer0, globalposition, hybridmode);	
						topkernelproc_embedded(enableprocess, ON, enablereduce,  kvdram1, vbuffer1, vmask1_p, vmask1_subp, vmask1, globalstatsbuffer1, globalposition, hybridmode);	
						topkernelproc_embedded(enableprocess, ON, enablereduce,  kvdram2, vbuffer2, vmask2_p, vmask2_subp, vmask2, globalstatsbuffer2, globalposition, hybridmode);	
						topkernelproc_embedded(enableprocess, ON, enablereduce,  kvdram3, vbuffer3, vmask3_p, vmask3_subp, vmask3, globalstatsbuffer3, globalposition, hybridmode);	
						
						// merge 
						if(globalposition.EN_REDUCE == ON && enablereduce == ON){ merge4andsavevdata(ON, vdram, vbuffer0,vbuffer1,vbuffer2,vbuffer3, 0, 0, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs); }
						if(globalposition.EN_REDUCE == ON && enablereduce == ON){ merge4andsavevdata(ON, vdram, vbuffer0,vbuffer1,vbuffer2,vbuffer3, 8, 0, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs + reducebuffersz); }
						
						// update stats
						if(globalposition.EN_REDUCE == ON){ 
							if(enablereduce == ON){ buffer[source_partition] += 64; } 
							else { buffer[source_partition] += 0; }
						}
						
						// increments
						if(globalposition.EN_PARTITION == ON || globalposition.EN_REDUCE == ON){ sourcestatsmarker += 1; }
						if(globalposition.EN_PARTITION == ON){ deststatsmarker += NUM_PARTITIONS; }
						if(globalposition.EN_PROCESS == ON){ vmaskoffset_kvs += vmaskbuffersz_kvs; }
						if(globalposition.EN_PROCESS == ON || globalposition.EN_REDUCE == ON){ vreadoffset_kvs += reducebuffersz * 2; }
					}
				}
			} // stage
		} // v_chunkid
	} // edgebankID
	
	commitkvstats(vdram, buffer, globalparamsV, reducesourcestatsmarker);
	
	#ifdef _WIDEWORD
	vdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_ALGORITHMINFO_GRAPHITERATIONID].range(31, 0) = globalparamsV.ALGORITHMINFO_GRAPHITERATIONID + 1; // CRITICAL NOTEME: Graph Iteration is incremented here
	#else
	vdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_ALGORITHMINFO_GRAPHITERATIONID].data[0].key = globalparamsV.ALGORITHMINFO_GRAPHITERATIONID + 1;
	#endif 
	
	#if defined(_DEBUGMODE_KERNELPRINTS2) & defined(ENABLE_SUBVMASKING)
	cout<<"topkernelP4:: subpmask status: mask_subp_is_zero: "<<mask_subp_is_zero<<", mask_subp_is_not_zero: "<<mask_subp_is_not_zero<<endl;
	#endif 
	#if defined(_DEBUGMODE_KERNELPRINTS2) & defined(DATA_SENSITIVE_ACTS)
	for(unsigned int i=0; i<MAX_NUM_PARTITIONS; i++){ cout<<"topkernelP4:: subpmask status: _chkpartitions["<<i<<"]: "<<_chkpartitions[i]<<endl;; }
	#endif 
	return;
}
}
extern "C" { // #ifdef ACTS_1by1by1byN (means everything packed in 1 compute unit)
void 
	#ifdef SW 
	actsproc:: 
	#endif
topkernelP5(
	uint512_dt * kvdram0,
	uint512_dt * kvdram1,
	uint512_dt * kvdram2,
	uint512_dt * kvdram3,
	uint512_dt * kvdram4,
	uint512_dt * vdram
	){
#ifdef EDGES_IN_SEPERATE_BUFFER_FROM_KVDRAM
	#pragma HLS INTERFACE m_axi port = edges00 offset = slave bundle = gmem0
	#pragma HLS INTERFACE m_axi port = kvdram0 offset = slave bundle = gmem1
	#pragma HLS INTERFACE m_axi port = edges10 offset = slave bundle = gmem2
	#pragma HLS INTERFACE m_axi port = kvdram1 offset = slave bundle = gmem3
	#pragma HLS INTERFACE m_axi port = edges20 offset = slave bundle = gmem4
	#pragma HLS INTERFACE m_axi port = kvdram2 offset = slave bundle = gmem5
	#pragma HLS INTERFACE m_axi port = edges30 offset = slave bundle = gmem6
	#pragma HLS INTERFACE m_axi port = kvdram3 offset = slave bundle = gmem7
	#pragma HLS INTERFACE m_axi port = edges40 offset = slave bundle = gmem8
	#pragma HLS INTERFACE m_axi port = kvdram4 offset = slave bundle = gmem9
	#pragma HLS INTERFACE m_axi port = vdram offset = slave bundle = gmem10
#else 
	#pragma HLS INTERFACE m_axi port = kvdram0 offset = slave bundle = gmem0
	#pragma HLS INTERFACE m_axi port = kvdram1 offset = slave bundle = gmem1
	#pragma HLS INTERFACE m_axi port = kvdram2 offset = slave bundle = gmem2
	#pragma HLS INTERFACE m_axi port = kvdram3 offset = slave bundle = gmem3
	#pragma HLS INTERFACE m_axi port = kvdram4 offset = slave bundle = gmem4
	#pragma HLS INTERFACE m_axi port = vdram offset = slave bundle = gmem5
#endif 
//

#ifdef EDGES_IN_SEPERATE_BUFFER_FROM_KVDRAM
#pragma HLS INTERFACE s_axilite port = edges00 bundle = control
#pragma HLS INTERFACE s_axilite port = edges10 bundle = control
#pragma HLS INTERFACE s_axilite port = edges20 bundle = control
#pragma HLS INTERFACE s_axilite port = edges30 bundle = control
#pragma HLS INTERFACE s_axilite port = edges40 bundle = control
	
#endif 
#pragma HLS INTERFACE s_axilite port = kvdram0 bundle = control
#pragma HLS INTERFACE s_axilite port = kvdram1 bundle = control
#pragma HLS INTERFACE s_axilite port = kvdram2 bundle = control
#pragma HLS INTERFACE s_axilite port = kvdram3 bundle = control
#pragma HLS INTERFACE s_axilite port = kvdram4 bundle = control
	

#pragma HLS INTERFACE s_axilite port = vdram bundle = control

#pragma HLS INTERFACE s_axilite port=return bundle=control

#ifdef EDGES_IN_SEPERATE_BUFFER_FROM_KVDRAM
#pragma HLS DATA_PACK variable = edges00
#pragma HLS DATA_PACK variable = edges10
#pragma HLS DATA_PACK variable = edges20
#pragma HLS DATA_PACK variable = edges30
#pragma HLS DATA_PACK variable = edges40
#endif 
#pragma HLS DATA_PACK variable = kvdram0
#pragma HLS DATA_PACK variable = kvdram1
#pragma HLS DATA_PACK variable = kvdram2
#pragma HLS DATA_PACK variable = kvdram3
#pragma HLS DATA_PACK variable = kvdram4
#pragma HLS DATA_PACK variable = vdram

	#if defined(_DEBUGMODE_KERNELPRINTS2) & defined(ALLVERTEXISACTIVE_ALGORITHM)
	cout<<">>> ====================== Light weight ACTS (PR & SYNC) Launched... ====================== "<<endl; 
	#endif
	
	keyvalue_vbuffer_t vbuffer0[VDATA_PACKINGSIZE][BLOCKRAM_SIZE];
	#pragma HLS array_partition variable = vbuffer0
	uint32_type vmask0_p[BLOCKRAM_SIZE];
	unitBRAMwidth_type vmask0_subp[BLOCKRAM_SIZE];
	#pragma HLS DATA_PACK variable = vmask0_subp
	unitBRAMwidth_type vmask0[BLOCKRAM_SIZE];
	#pragma HLS DATA_PACK variable = vmask0
	keyvalue_t globalstatsbuffer0[MAX_NUM_PARTITIONS];
	keyvalue_vbuffer_t vbuffer1[VDATA_PACKINGSIZE][BLOCKRAM_SIZE];
	#pragma HLS array_partition variable = vbuffer1
	uint32_type vmask1_p[BLOCKRAM_SIZE];
	unitBRAMwidth_type vmask1_subp[BLOCKRAM_SIZE];
	#pragma HLS DATA_PACK variable = vmask1_subp
	unitBRAMwidth_type vmask1[BLOCKRAM_SIZE];
	#pragma HLS DATA_PACK variable = vmask1
	keyvalue_t globalstatsbuffer1[MAX_NUM_PARTITIONS];
	keyvalue_vbuffer_t vbuffer2[VDATA_PACKINGSIZE][BLOCKRAM_SIZE];
	#pragma HLS array_partition variable = vbuffer2
	uint32_type vmask2_p[BLOCKRAM_SIZE];
	unitBRAMwidth_type vmask2_subp[BLOCKRAM_SIZE];
	#pragma HLS DATA_PACK variable = vmask2_subp
	unitBRAMwidth_type vmask2[BLOCKRAM_SIZE];
	#pragma HLS DATA_PACK variable = vmask2
	keyvalue_t globalstatsbuffer2[MAX_NUM_PARTITIONS];
	keyvalue_vbuffer_t vbuffer3[VDATA_PACKINGSIZE][BLOCKRAM_SIZE];
	#pragma HLS array_partition variable = vbuffer3
	uint32_type vmask3_p[BLOCKRAM_SIZE];
	unitBRAMwidth_type vmask3_subp[BLOCKRAM_SIZE];
	#pragma HLS DATA_PACK variable = vmask3_subp
	unitBRAMwidth_type vmask3[BLOCKRAM_SIZE];
	#pragma HLS DATA_PACK variable = vmask3
	keyvalue_t globalstatsbuffer3[MAX_NUM_PARTITIONS];
	keyvalue_vbuffer_t vbuffer4[VDATA_PACKINGSIZE][BLOCKRAM_SIZE];
	#pragma HLS array_partition variable = vbuffer4
	uint32_type vmask4_p[BLOCKRAM_SIZE];
	unitBRAMwidth_type vmask4_subp[BLOCKRAM_SIZE];
	#pragma HLS DATA_PACK variable = vmask4_subp
	unitBRAMwidth_type vmask4[BLOCKRAM_SIZE];
	#pragma HLS DATA_PACK variable = vmask4
	keyvalue_t globalstatsbuffer4[MAX_NUM_PARTITIONS];
	travstate_t rtravstates[5];
	#pragma HLS ARRAY_PARTITION variable=rtravstates complete
	value_t buffer[DOUBLE_BLOCKRAM_SIZE]; // CRITICAL AUTOMATEME.
	globalparams_t globalparamsKs[5];
	globalparams_t globalparamsEs[MAX_NUM_EDGE_BANKS];
	
	unsigned int sourcestatsmarker = 0;
	unsigned int deststatsmarker = 0;
	unsigned int reducesourcestatsmarker = 0;
	unsigned int EN_PROCESS = OFF; unsigned int EN_PARTITION = OFF; unsigned int EN_REDUCE = OFF; unsigned int EN_PROCESSANDREDUCE = OFF; unsigned int EN_PROCESSANDPARTITION = OFF;
	globalposition_t globalposition;
	
	#ifdef _DEBUGMODE_CHECKS3
	mask_subp_is_zero = 0;
	mask_subp_is_not_zero = 0;
	for(unsigned int i=0; i<8; i++){ _stages[i] = 0; }
	for(unsigned int i=0; i<MAX_NUM_PARTITIONS; i++){ _chkpartitions[i] = 0; }
	#endif 
	
globalparamsKs[0] = getglobalparams(kvdram0);globalparamsKs[1] = getglobalparams(kvdram1);globalparamsKs[2] = getglobalparams(kvdram2);globalparamsKs[3] = getglobalparams(kvdram3);globalparamsKs[4] = getglobalparams(kvdram4); // CRITICAL NOTEME. POSSIBLE SOURCE OF ROUTING CONSTRAINTS?
	globalparams_t globalparamsK = globalparamsKs[0]; // getglobalparams(kvdram0); // CRITICAL NOTEME. POSSIBLE SOURCE OF ROUTING CONSTRAINTS?
	#ifdef EDGES_IN_SEPERATE_BUFFER_FROM_KVDRAM
	
	#else 
	globalparamsEs[0] = globalparamsK;
	#endif 
	globalparams_t globalparamsV = getglobalparams(vdram);
	
	unsigned int PARTITION_CHKPT[MAX_NUM_EDGE_BANKS][EDGESSTATSDRAMSZ];
	for(unsigned int u=0; u<EDGESSTATSDRAMSZ; u++){ // CRITICAL NEWCHANGE.
		#ifdef EDGES_IN_SEPERATE_BUFFER_FROM_KVDRAM
			#ifdef _WIDEWORD
	
			#else
	
			#endif
		#else 
			#ifdef _WIDEWORD
			PARTITION_CHKPT[0][u] = kvdram0[globalparamsK.BASEOFFSETKVS_EDGESSTATSDRAM + u].range(31, 0); 
			#else
			PARTITION_CHKPT[0][u] = kvdram0[globalparamsK.BASEOFFSETKVS_EDGESSTATSDRAM + u].data[0].key; 
			#endif
		#endif 
	}
	
	buffer_type vmaskbuffersz_kvs = (globalparamsK.SIZE_REDUCE * VDATA_PACKINGSIZE) / 512;
	batch_type vmaskoffset_kvs = 0; 
	unsigned int vreadoffset_kvs = 0;
	buffer_type reducebuffersz = globalparamsK.SIZE_REDUCE / 2;
	unsigned int GraphAlgo = globalparamsK.ALGORITHMINFO_GRAPHALGORITHMID;
	#ifdef ENABLERECURSIVEPARTITIONING
	for(unsigned int k=0; k<globalparamsK.ACTSPARAMS_TREEDEPTH-1; k++)
	#else 
	for(unsigned int k=0; k<globalparamsK.ACTSPARAMS_TREEDEPTH; k++)
	#endif 
	{
		reducesourcestatsmarker += (1 << (NUM_PARTITIONS_POW * k)); 
	}
	unsigned int FIRSTLOP = 0;
	unsigned int NUMLOPs = 0;
	unsigned int FIRSTSOURCEPARTITION = 0;
	unsigned int LASTSOURCEPARTITIONS = 0;
	batch_type num_source_partitions = 0; 

	for(unsigned int i=0; i<DOUBLE_BLOCKRAM_SIZE; i++){ buffer[i] = 0; } 
	if(GraphAlgo != PAGERANK){ loadmany5vmask_p(vdram, vmask0_p,vmask1_p,vmask2_p,vmask3_p,vmask4_p, globalparamsV.BASEOFFSETKVS_VERTICESPARTITIONMASK, BLOCKRAM_SIZE); }
	if(GraphAlgo != PAGERANK){ resetkvstatvalues(vdram, globalparamsV); }
	unsigned int num_edge_banks = NUM_EDGE_BANKS;
	unsigned int it_size; if(num_edge_banks==0){ it_size = 1; } else { it_size = NUM_EDGE_BANKS; }
	unsigned int FIRST_BASEOFFSETKVS_STATSDRAM = globalparamsK.BASEOFFSETKVS_STATSDRAM;
	
	#ifdef EDGES_IN_SEPERATE_BUFFER_FROM_KVDRAM
	copyvs(vdram, vbuffer0, globalparamsV);
	#endif
	#ifdef _WIDEWORD
	unsigned int hybridmode = vdram[globalparamsV.BASEOFFSETKVS_OTHERINFOS + globalparamsV.ALGORITHMINFO_GRAPHITERATIONID].range(31, 0);
	#else 
	unsigned int hybridmode = vdram[globalparamsV.BASEOFFSETKVS_OTHERINFOS + globalparamsV.ALGORITHMINFO_GRAPHITERATIONID].data[0].key;
	#endif 
	
	unsigned int num_stages = 3;
	if(globalparamsV.ENABLE_PROCESSCOMMAND == ON){ num_stages = 1; }
	if(globalparamsV.ENABLE_PARTITIONCOMMAND == ON){ num_stages = 2; }
	if(globalparamsV.ENABLE_APPLYUPDATESCOMMAND == ON){ num_stages = 3; }
	
	TOPKERNEL5_BASELOOP1: for(unsigned int edgebankID=0; edgebankID<it_size; edgebankID++){
		globalposition.edgebankID = edgebankID;
		#ifdef EDGES_IN_SEPERATE_BUFFER_FROM_KVDRAM
		for(unsigned int i=0; i<globalposition.edgebankID; i++){ globalparamsK.BASEOFFSETKVS_STATSDRAM += ((globalparamsK.SIZE_KVSTATSDRAM / VECTOR_SIZE) / NUM_EDGE_BANKS); } // SHIFT.
		#endif 
		TOPKERNEL5_BASELOOP1B: for(unsigned int v_chunkid=0; v_chunkid<globalparamsK.ACTSPARAMS_NUMEDGECHUNKSINABUFFER; v_chunkid++){
			globalposition.v_chunkid = v_chunkid;
			#ifdef EDGES_IN_SEPERATE_BUFFER_FROM_KVDRAM
			globalparamsK.VARS_WORKBATCH = globalposition.v_chunkid; // SHIFT.
			#endif 
			TOPKERNEL5_BASELOOP1C: for(step_type stage=0; stage<num_stages; stage++){
			
				EN_PROCESS = OFF; EN_PARTITION = OFF; EN_REDUCE = OFF; EN_PROCESSANDREDUCE = OFF; EN_PROCESSANDPARTITION = OFF;
				if(stage==0){ EN_PROCESS = ON; EN_PROCESSANDREDUCE = ON; EN_PROCESSANDPARTITION = ON;  } 
				else if(stage==1){ EN_PARTITION = ON; EN_PROCESSANDPARTITION = ON;  } 
				else { EN_REDUCE = ON; EN_PROCESSANDREDUCE = ON; }
				globalposition.EN_PROCESS = EN_PROCESS; globalposition.EN_PARTITION = EN_PARTITION; globalposition.EN_REDUCE = EN_REDUCE; globalposition.EN_PROCESSANDPARTITION = EN_PROCESSANDPARTITION; globalposition.EN_PROCESSANDREDUCE = EN_PROCESSANDREDUCE;
				
				if(stage==0){ sourcestatsmarker = 0; deststatsmarker = 1; } 
				else if(stage==1){ sourcestatsmarker = 1; deststatsmarker = 1 + NUM_PARTITIONS; } 
				else { sourcestatsmarker = reducesourcestatsmarker; deststatsmarker = NAp; }
				
				if(stage==0){ FIRSTLOP = 1; NUMLOPs = 1; } // FIXME. CHANGE FOR ~ENABLERECURSIVEPARTITIONING
				else if(stage==1){ FIRSTLOP = globalparamsK.ACTSPARAMS_BEGINLOP + 1; NUMLOPs = globalparamsK.ACTSPARAMS_NUMLOPS-2;  } 
				else{ FIRSTLOP = globalparamsK.ACTSPARAMS_TREEDEPTH; NUMLOPs = 1; }
				
				vmaskoffset_kvs = 0; 
				vreadoffset_kvs = 0;
				
				TOPKERNEL5_BASELOOP1D: for(step_type currentLOP=FIRSTLOP; currentLOP<(FIRSTLOP + NUMLOPs); currentLOP+=1){
					#ifdef ENABLERECURSIVEPARTITIONING
					if(stage==0){ num_source_partitions = get_num_source_partitions(globalparamsK.ACTSPARAMS_TREEDEPTH); }
					else if(stage==1){ num_source_partitions = get_num_source_partitions(currentLOP);  }
					else { num_source_partitions = get_num_source_partitions(globalparamsK.ACTSPARAMS_TREEDEPTH);  }
					#else
					NOT IMPLEMENTED.
					#endif
					
					if(stage==0){ FIRSTSOURCEPARTITION = PARTITION_CHKPT[edgebankID][v_chunkid]; LASTSOURCEPARTITIONS = PARTITION_CHKPT[edgebankID][v_chunkid+1]; } 
					else if(stage==1){ FIRSTSOURCEPARTITION = 0; LASTSOURCEPARTITIONS = num_source_partitions;  } 
					else{ FIRSTSOURCEPARTITION = 0; LASTSOURCEPARTITIONS = num_source_partitions; }
					
					if(globalposition.EN_PROCESS == ON){ vmaskoffset_kvs = PARTITION_CHKPT[edgebankID][v_chunkid] * (vmaskbuffersz_kvs); } // NEWCHANGE.
					batch_type vreadoffset_kvs = 0;
					
					TOPKERNEL5_BASELOOP1E: for(batch_type source_partition=FIRSTSOURCEPARTITION; source_partition<LASTSOURCEPARTITIONS; source_partition+=1){
						#ifdef _DEBUGMODE_KERNELPRINTS2
						actsutilityobj->print3("### TOPKERNEL5_BASELOOP1C:: source_partition", "currentLOP", "NAp", source_partition, currentLOP, NAp); 							
						#endif
						
						globalposition.stage = stage; 
						globalposition.laststage = 2; 
						globalposition.currentLOP = currentLOP; 
						globalposition.lastLOP = FIRSTLOP + NUMLOPs - 1; 
						globalposition.source_partition = source_partition;
						globalposition.first_source_partition = FIRSTSOURCEPARTITION;
						globalposition.last_source_partition = LASTSOURCEPARTITIONS - 1;
						globalposition.num_source_partitions = LASTSOURCEPARTITIONS - FIRSTSOURCEPARTITION; // FIXME.
						globalposition.sourcestatsmarker = sourcestatsmarker; 
						globalposition.deststatsmarker = deststatsmarker; 
						if(globalposition.v_chunkid==0 && globalposition.stage==0 && globalposition.currentLOP==1 && globalposition.source_partition==0){ globalposition.first=ON; } else { globalposition.first=OFF; }
						if(globalposition.v_chunkid==globalparamsK.ACTSPARAMS_NUMEDGECHUNKSINABUFFER-1 && globalposition.stage==globalposition.laststage && globalposition.currentLOP==globalposition.lastLOP && globalposition.source_partition==globalposition.last_source_partition){ globalposition.last=ON; } else { globalposition.last=OFF; }
						
						bool_type enableprocess = ON;
						if(globalposition.EN_PROCESS == ON){
							if(GraphAlgo != PAGERANK){ if(vmask0_p[source_partition] > 0){ enableprocess = ON; } else { enableprocess = OFF; }}
						}
						
						bool_type enablereduce = OFF; 
						unsigned int ntravszs = 0;
						if(globalposition.EN_REDUCE == ON){
							rtravstates[0] = gettravstate(globalposition.EN_REDUCE, kvdram0, globalparamsK, currentLOP, sourcestatsmarker); // CRITICAL NOTEME. POSSIBLE SOURCE OF ROUTING CONSTRAINTS?
							rtravstates[1] = gettravstate(globalposition.EN_REDUCE, kvdram1, globalparamsK, currentLOP, sourcestatsmarker); // CRITICAL NOTEME. POSSIBLE SOURCE OF ROUTING CONSTRAINTS?
							rtravstates[2] = gettravstate(globalposition.EN_REDUCE, kvdram2, globalparamsK, currentLOP, sourcestatsmarker); // CRITICAL NOTEME. POSSIBLE SOURCE OF ROUTING CONSTRAINTS?
							rtravstates[3] = gettravstate(globalposition.EN_REDUCE, kvdram3, globalparamsK, currentLOP, sourcestatsmarker); // CRITICAL NOTEME. POSSIBLE SOURCE OF ROUTING CONSTRAINTS?
							rtravstates[4] = gettravstate(globalposition.EN_REDUCE, kvdram4, globalparamsK, currentLOP, sourcestatsmarker); // CRITICAL NOTEME. POSSIBLE SOURCE OF ROUTING CONSTRAINTS?
							for(unsigned int i = 0; i < 5; i++){ ntravszs += rtravstates[i].size_kvs; }
							if(ntravszs > 0){ enablereduce = ON; } else { enablereduce = OFF; }
						}
						
						bool_type enable_loadmasks = OFF; 
						if(globalposition.EN_PROCESS == ON && enableprocess == ON){ enable_loadmasks = ON; } else { enable_loadmasks = OFF; }
						
						bool_type enable_readandreplicatevdata = OFF; 
						if((globalposition.EN_PROCESS == ON && enableprocess == ON) || (globalposition.EN_REDUCE == ON && enablereduce == ON)){ enable_readandreplicatevdata = ON; } else { enable_readandreplicatevdata = OFF; }
		
						// read vertices
						loadmany5vmasks(enable_loadmasks, vdram, vmask0,vmask1,vmask2,vmask3,vmask4, vbuffer0, globalparamsV.BASEOFFSETKVS_VERTICESDATAMASK + vmaskoffset_kvs, vmaskbuffersz_kvs, globalparamsV); 
						#ifdef ENABLE_SUBVMASKING
						loadmany5vmasks_subp(enable_loadmasks, vmask0, vmask0_subp,vmask1_subp,vmask2_subp,vmask3_subp,vmask4_subp, vmaskbuffersz_kvs); 
						#endif
						readandreplicate5vdata(enable_readandreplicatevdata, vdram, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs, vbuffer0,vbuffer1,vbuffer2,vbuffer3,vbuffer4, 0, 0, reducebuffersz, globalparamsV); 
						readandreplicate5vdata(enable_readandreplicatevdata, vdram, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs + reducebuffersz, vbuffer0,vbuffer1,vbuffer2,vbuffer3,vbuffer4, 8, 0, reducebuffersz, globalparamsV); 
						
						// proc 
						topkernelproc_embedded(enableprocess, ON, enablereduce,  kvdram0, vbuffer0, vmask0_p, vmask0_subp, vmask0, globalstatsbuffer0, globalposition, hybridmode);	
						topkernelproc_embedded(enableprocess, ON, enablereduce,  kvdram1, vbuffer1, vmask1_p, vmask1_subp, vmask1, globalstatsbuffer1, globalposition, hybridmode);	
						topkernelproc_embedded(enableprocess, ON, enablereduce,  kvdram2, vbuffer2, vmask2_p, vmask2_subp, vmask2, globalstatsbuffer2, globalposition, hybridmode);	
						topkernelproc_embedded(enableprocess, ON, enablereduce,  kvdram3, vbuffer3, vmask3_p, vmask3_subp, vmask3, globalstatsbuffer3, globalposition, hybridmode);	
						topkernelproc_embedded(enableprocess, ON, enablereduce,  kvdram4, vbuffer4, vmask4_p, vmask4_subp, vmask4, globalstatsbuffer4, globalposition, hybridmode);	
						
						// merge 
						if(globalposition.EN_REDUCE == ON && enablereduce == ON){ merge5andsavevdata(ON, vdram, vbuffer0,vbuffer1,vbuffer2,vbuffer3,vbuffer4, 0, 0, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs); }
						if(globalposition.EN_REDUCE == ON && enablereduce == ON){ merge5andsavevdata(ON, vdram, vbuffer0,vbuffer1,vbuffer2,vbuffer3,vbuffer4, 8, 0, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs + reducebuffersz); }
						
						// update stats
						if(globalposition.EN_REDUCE == ON){ 
							if(enablereduce == ON){ buffer[source_partition] += 64; } 
							else { buffer[source_partition] += 0; }
						}
						
						// increments
						if(globalposition.EN_PARTITION == ON || globalposition.EN_REDUCE == ON){ sourcestatsmarker += 1; }
						if(globalposition.EN_PARTITION == ON){ deststatsmarker += NUM_PARTITIONS; }
						if(globalposition.EN_PROCESS == ON){ vmaskoffset_kvs += vmaskbuffersz_kvs; }
						if(globalposition.EN_PROCESS == ON || globalposition.EN_REDUCE == ON){ vreadoffset_kvs += reducebuffersz * 2; }
					}
				}
			} // stage
		} // v_chunkid
	} // edgebankID
	
	commitkvstats(vdram, buffer, globalparamsV, reducesourcestatsmarker);
	
	#ifdef _WIDEWORD
	vdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_ALGORITHMINFO_GRAPHITERATIONID].range(31, 0) = globalparamsV.ALGORITHMINFO_GRAPHITERATIONID + 1; // CRITICAL NOTEME: Graph Iteration is incremented here
	#else
	vdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_ALGORITHMINFO_GRAPHITERATIONID].data[0].key = globalparamsV.ALGORITHMINFO_GRAPHITERATIONID + 1;
	#endif 
	
	#if defined(_DEBUGMODE_KERNELPRINTS2) & defined(ENABLE_SUBVMASKING)
	cout<<"topkernelP5:: subpmask status: mask_subp_is_zero: "<<mask_subp_is_zero<<", mask_subp_is_not_zero: "<<mask_subp_is_not_zero<<endl;
	#endif 
	#if defined(_DEBUGMODE_KERNELPRINTS2) & defined(DATA_SENSITIVE_ACTS)
	for(unsigned int i=0; i<MAX_NUM_PARTITIONS; i++){ cout<<"topkernelP5:: subpmask status: _chkpartitions["<<i<<"]: "<<_chkpartitions[i]<<endl;; }
	#endif 
	return;
}
}
extern "C" { // #ifdef ACTS_1by1by1byN (means everything packed in 1 compute unit)
void 
	#ifdef SW 
	actsproc:: 
	#endif
topkernelP6(
	uint512_dt * kvdram0,
	uint512_dt * kvdram1,
	uint512_dt * kvdram2,
	uint512_dt * kvdram3,
	uint512_dt * kvdram4,
	uint512_dt * kvdram5,
	uint512_dt * vdram
	){
#ifdef EDGES_IN_SEPERATE_BUFFER_FROM_KVDRAM
	#pragma HLS INTERFACE m_axi port = edges00 offset = slave bundle = gmem0
	#pragma HLS INTERFACE m_axi port = kvdram0 offset = slave bundle = gmem1
	#pragma HLS INTERFACE m_axi port = edges10 offset = slave bundle = gmem2
	#pragma HLS INTERFACE m_axi port = kvdram1 offset = slave bundle = gmem3
	#pragma HLS INTERFACE m_axi port = edges20 offset = slave bundle = gmem4
	#pragma HLS INTERFACE m_axi port = kvdram2 offset = slave bundle = gmem5
	#pragma HLS INTERFACE m_axi port = edges30 offset = slave bundle = gmem6
	#pragma HLS INTERFACE m_axi port = kvdram3 offset = slave bundle = gmem7
	#pragma HLS INTERFACE m_axi port = edges40 offset = slave bundle = gmem8
	#pragma HLS INTERFACE m_axi port = kvdram4 offset = slave bundle = gmem9
	#pragma HLS INTERFACE m_axi port = edges50 offset = slave bundle = gmem10
	#pragma HLS INTERFACE m_axi port = kvdram5 offset = slave bundle = gmem11
	#pragma HLS INTERFACE m_axi port = vdram offset = slave bundle = gmem12
#else 
	#pragma HLS INTERFACE m_axi port = kvdram0 offset = slave bundle = gmem0
	#pragma HLS INTERFACE m_axi port = kvdram1 offset = slave bundle = gmem1
	#pragma HLS INTERFACE m_axi port = kvdram2 offset = slave bundle = gmem2
	#pragma HLS INTERFACE m_axi port = kvdram3 offset = slave bundle = gmem3
	#pragma HLS INTERFACE m_axi port = kvdram4 offset = slave bundle = gmem4
	#pragma HLS INTERFACE m_axi port = kvdram5 offset = slave bundle = gmem5
	#pragma HLS INTERFACE m_axi port = vdram offset = slave bundle = gmem6
#endif 
//

#ifdef EDGES_IN_SEPERATE_BUFFER_FROM_KVDRAM
#pragma HLS INTERFACE s_axilite port = edges00 bundle = control
#pragma HLS INTERFACE s_axilite port = edges10 bundle = control
#pragma HLS INTERFACE s_axilite port = edges20 bundle = control
#pragma HLS INTERFACE s_axilite port = edges30 bundle = control
#pragma HLS INTERFACE s_axilite port = edges40 bundle = control
#pragma HLS INTERFACE s_axilite port = edges50 bundle = control
	
#endif 
#pragma HLS INTERFACE s_axilite port = kvdram0 bundle = control
#pragma HLS INTERFACE s_axilite port = kvdram1 bundle = control
#pragma HLS INTERFACE s_axilite port = kvdram2 bundle = control
#pragma HLS INTERFACE s_axilite port = kvdram3 bundle = control
#pragma HLS INTERFACE s_axilite port = kvdram4 bundle = control
#pragma HLS INTERFACE s_axilite port = kvdram5 bundle = control
	

#pragma HLS INTERFACE s_axilite port = vdram bundle = control

#pragma HLS INTERFACE s_axilite port=return bundle=control

#ifdef EDGES_IN_SEPERATE_BUFFER_FROM_KVDRAM
#pragma HLS DATA_PACK variable = edges00
#pragma HLS DATA_PACK variable = edges10
#pragma HLS DATA_PACK variable = edges20
#pragma HLS DATA_PACK variable = edges30
#pragma HLS DATA_PACK variable = edges40
#pragma HLS DATA_PACK variable = edges50
#endif 
#pragma HLS DATA_PACK variable = kvdram0
#pragma HLS DATA_PACK variable = kvdram1
#pragma HLS DATA_PACK variable = kvdram2
#pragma HLS DATA_PACK variable = kvdram3
#pragma HLS DATA_PACK variable = kvdram4
#pragma HLS DATA_PACK variable = kvdram5
#pragma HLS DATA_PACK variable = vdram

	#if defined(_DEBUGMODE_KERNELPRINTS2) & defined(ALLVERTEXISACTIVE_ALGORITHM)
	cout<<">>> ====================== Light weight ACTS (PR & SYNC) Launched... ====================== "<<endl; 
	#endif
	
	keyvalue_vbuffer_t vbuffer0[VDATA_PACKINGSIZE][BLOCKRAM_SIZE];
	#pragma HLS array_partition variable = vbuffer0
	uint32_type vmask0_p[BLOCKRAM_SIZE];
	unitBRAMwidth_type vmask0_subp[BLOCKRAM_SIZE];
	#pragma HLS DATA_PACK variable = vmask0_subp
	unitBRAMwidth_type vmask0[BLOCKRAM_SIZE];
	#pragma HLS DATA_PACK variable = vmask0
	keyvalue_t globalstatsbuffer0[MAX_NUM_PARTITIONS];
	keyvalue_vbuffer_t vbuffer1[VDATA_PACKINGSIZE][BLOCKRAM_SIZE];
	#pragma HLS array_partition variable = vbuffer1
	uint32_type vmask1_p[BLOCKRAM_SIZE];
	unitBRAMwidth_type vmask1_subp[BLOCKRAM_SIZE];
	#pragma HLS DATA_PACK variable = vmask1_subp
	unitBRAMwidth_type vmask1[BLOCKRAM_SIZE];
	#pragma HLS DATA_PACK variable = vmask1
	keyvalue_t globalstatsbuffer1[MAX_NUM_PARTITIONS];
	keyvalue_vbuffer_t vbuffer2[VDATA_PACKINGSIZE][BLOCKRAM_SIZE];
	#pragma HLS array_partition variable = vbuffer2
	uint32_type vmask2_p[BLOCKRAM_SIZE];
	unitBRAMwidth_type vmask2_subp[BLOCKRAM_SIZE];
	#pragma HLS DATA_PACK variable = vmask2_subp
	unitBRAMwidth_type vmask2[BLOCKRAM_SIZE];
	#pragma HLS DATA_PACK variable = vmask2
	keyvalue_t globalstatsbuffer2[MAX_NUM_PARTITIONS];
	keyvalue_vbuffer_t vbuffer3[VDATA_PACKINGSIZE][BLOCKRAM_SIZE];
	#pragma HLS array_partition variable = vbuffer3
	uint32_type vmask3_p[BLOCKRAM_SIZE];
	unitBRAMwidth_type vmask3_subp[BLOCKRAM_SIZE];
	#pragma HLS DATA_PACK variable = vmask3_subp
	unitBRAMwidth_type vmask3[BLOCKRAM_SIZE];
	#pragma HLS DATA_PACK variable = vmask3
	keyvalue_t globalstatsbuffer3[MAX_NUM_PARTITIONS];
	keyvalue_vbuffer_t vbuffer4[VDATA_PACKINGSIZE][BLOCKRAM_SIZE];
	#pragma HLS array_partition variable = vbuffer4
	uint32_type vmask4_p[BLOCKRAM_SIZE];
	unitBRAMwidth_type vmask4_subp[BLOCKRAM_SIZE];
	#pragma HLS DATA_PACK variable = vmask4_subp
	unitBRAMwidth_type vmask4[BLOCKRAM_SIZE];
	#pragma HLS DATA_PACK variable = vmask4
	keyvalue_t globalstatsbuffer4[MAX_NUM_PARTITIONS];
	keyvalue_vbuffer_t vbuffer5[VDATA_PACKINGSIZE][BLOCKRAM_SIZE];
	#pragma HLS array_partition variable = vbuffer5
	uint32_type vmask5_p[BLOCKRAM_SIZE];
	unitBRAMwidth_type vmask5_subp[BLOCKRAM_SIZE];
	#pragma HLS DATA_PACK variable = vmask5_subp
	unitBRAMwidth_type vmask5[BLOCKRAM_SIZE];
	#pragma HLS DATA_PACK variable = vmask5
	keyvalue_t globalstatsbuffer5[MAX_NUM_PARTITIONS];
	travstate_t rtravstates[6];
	#pragma HLS ARRAY_PARTITION variable=rtravstates complete
	value_t buffer[DOUBLE_BLOCKRAM_SIZE]; // CRITICAL AUTOMATEME.
	globalparams_t globalparamsKs[6];
	globalparams_t globalparamsEs[MAX_NUM_EDGE_BANKS];
	
	unsigned int sourcestatsmarker = 0;
	unsigned int deststatsmarker = 0;
	unsigned int reducesourcestatsmarker = 0;
	unsigned int EN_PROCESS = OFF; unsigned int EN_PARTITION = OFF; unsigned int EN_REDUCE = OFF; unsigned int EN_PROCESSANDREDUCE = OFF; unsigned int EN_PROCESSANDPARTITION = OFF;
	globalposition_t globalposition;
	
	#ifdef _DEBUGMODE_CHECKS3
	mask_subp_is_zero = 0;
	mask_subp_is_not_zero = 0;
	for(unsigned int i=0; i<8; i++){ _stages[i] = 0; }
	for(unsigned int i=0; i<MAX_NUM_PARTITIONS; i++){ _chkpartitions[i] = 0; }
	#endif 
	
globalparamsKs[0] = getglobalparams(kvdram0);globalparamsKs[1] = getglobalparams(kvdram1);globalparamsKs[2] = getglobalparams(kvdram2);globalparamsKs[3] = getglobalparams(kvdram3);globalparamsKs[4] = getglobalparams(kvdram4);globalparamsKs[5] = getglobalparams(kvdram5); // CRITICAL NOTEME. POSSIBLE SOURCE OF ROUTING CONSTRAINTS?
	globalparams_t globalparamsK = globalparamsKs[0]; // getglobalparams(kvdram0); // CRITICAL NOTEME. POSSIBLE SOURCE OF ROUTING CONSTRAINTS?
	#ifdef EDGES_IN_SEPERATE_BUFFER_FROM_KVDRAM
	
	#else 
	globalparamsEs[0] = globalparamsK;
	#endif 
	globalparams_t globalparamsV = getglobalparams(vdram);
	
	unsigned int PARTITION_CHKPT[MAX_NUM_EDGE_BANKS][EDGESSTATSDRAMSZ];
	for(unsigned int u=0; u<EDGESSTATSDRAMSZ; u++){ // CRITICAL NEWCHANGE.
		#ifdef EDGES_IN_SEPERATE_BUFFER_FROM_KVDRAM
			#ifdef _WIDEWORD
	
			#else
	
			#endif
		#else 
			#ifdef _WIDEWORD
			PARTITION_CHKPT[0][u] = kvdram0[globalparamsK.BASEOFFSETKVS_EDGESSTATSDRAM + u].range(31, 0); 
			#else
			PARTITION_CHKPT[0][u] = kvdram0[globalparamsK.BASEOFFSETKVS_EDGESSTATSDRAM + u].data[0].key; 
			#endif
		#endif 
	}
	
	buffer_type vmaskbuffersz_kvs = (globalparamsK.SIZE_REDUCE * VDATA_PACKINGSIZE) / 512;
	batch_type vmaskoffset_kvs = 0; 
	unsigned int vreadoffset_kvs = 0;
	buffer_type reducebuffersz = globalparamsK.SIZE_REDUCE / 2;
	unsigned int GraphAlgo = globalparamsK.ALGORITHMINFO_GRAPHALGORITHMID;
	#ifdef ENABLERECURSIVEPARTITIONING
	for(unsigned int k=0; k<globalparamsK.ACTSPARAMS_TREEDEPTH-1; k++)
	#else 
	for(unsigned int k=0; k<globalparamsK.ACTSPARAMS_TREEDEPTH; k++)
	#endif 
	{
		reducesourcestatsmarker += (1 << (NUM_PARTITIONS_POW * k)); 
	}
	unsigned int FIRSTLOP = 0;
	unsigned int NUMLOPs = 0;
	unsigned int FIRSTSOURCEPARTITION = 0;
	unsigned int LASTSOURCEPARTITIONS = 0;
	batch_type num_source_partitions = 0; 

	for(unsigned int i=0; i<DOUBLE_BLOCKRAM_SIZE; i++){ buffer[i] = 0; } 
	if(GraphAlgo != PAGERANK){ loadmany6vmask_p(vdram, vmask0_p,vmask1_p,vmask2_p,vmask3_p,vmask4_p,vmask5_p, globalparamsV.BASEOFFSETKVS_VERTICESPARTITIONMASK, BLOCKRAM_SIZE); }
	if(GraphAlgo != PAGERANK){ resetkvstatvalues(vdram, globalparamsV); }
	unsigned int num_edge_banks = NUM_EDGE_BANKS;
	unsigned int it_size; if(num_edge_banks==0){ it_size = 1; } else { it_size = NUM_EDGE_BANKS; }
	unsigned int FIRST_BASEOFFSETKVS_STATSDRAM = globalparamsK.BASEOFFSETKVS_STATSDRAM;
	
	#ifdef EDGES_IN_SEPERATE_BUFFER_FROM_KVDRAM
	copyvs(vdram, vbuffer0, globalparamsV);
	#endif
	#ifdef _WIDEWORD
	unsigned int hybridmode = vdram[globalparamsV.BASEOFFSETKVS_OTHERINFOS + globalparamsV.ALGORITHMINFO_GRAPHITERATIONID].range(31, 0);
	#else 
	unsigned int hybridmode = vdram[globalparamsV.BASEOFFSETKVS_OTHERINFOS + globalparamsV.ALGORITHMINFO_GRAPHITERATIONID].data[0].key;
	#endif 
	
	unsigned int num_stages = 3;
	if(globalparamsV.ENABLE_PROCESSCOMMAND == ON){ num_stages = 1; }
	if(globalparamsV.ENABLE_PARTITIONCOMMAND == ON){ num_stages = 2; }
	if(globalparamsV.ENABLE_APPLYUPDATESCOMMAND == ON){ num_stages = 3; }
	
	TOPKERNEL6_BASELOOP1: for(unsigned int edgebankID=0; edgebankID<it_size; edgebankID++){
		globalposition.edgebankID = edgebankID;
		#ifdef EDGES_IN_SEPERATE_BUFFER_FROM_KVDRAM
		for(unsigned int i=0; i<globalposition.edgebankID; i++){ globalparamsK.BASEOFFSETKVS_STATSDRAM += ((globalparamsK.SIZE_KVSTATSDRAM / VECTOR_SIZE) / NUM_EDGE_BANKS); } // SHIFT.
		#endif 
		TOPKERNEL6_BASELOOP1B: for(unsigned int v_chunkid=0; v_chunkid<globalparamsK.ACTSPARAMS_NUMEDGECHUNKSINABUFFER; v_chunkid++){
			globalposition.v_chunkid = v_chunkid;
			#ifdef EDGES_IN_SEPERATE_BUFFER_FROM_KVDRAM
			globalparamsK.VARS_WORKBATCH = globalposition.v_chunkid; // SHIFT.
			#endif 
			TOPKERNEL6_BASELOOP1C: for(step_type stage=0; stage<num_stages; stage++){
			
				EN_PROCESS = OFF; EN_PARTITION = OFF; EN_REDUCE = OFF; EN_PROCESSANDREDUCE = OFF; EN_PROCESSANDPARTITION = OFF;
				if(stage==0){ EN_PROCESS = ON; EN_PROCESSANDREDUCE = ON; EN_PROCESSANDPARTITION = ON;  } 
				else if(stage==1){ EN_PARTITION = ON; EN_PROCESSANDPARTITION = ON;  } 
				else { EN_REDUCE = ON; EN_PROCESSANDREDUCE = ON; }
				globalposition.EN_PROCESS = EN_PROCESS; globalposition.EN_PARTITION = EN_PARTITION; globalposition.EN_REDUCE = EN_REDUCE; globalposition.EN_PROCESSANDPARTITION = EN_PROCESSANDPARTITION; globalposition.EN_PROCESSANDREDUCE = EN_PROCESSANDREDUCE;
				
				if(stage==0){ sourcestatsmarker = 0; deststatsmarker = 1; } 
				else if(stage==1){ sourcestatsmarker = 1; deststatsmarker = 1 + NUM_PARTITIONS; } 
				else { sourcestatsmarker = reducesourcestatsmarker; deststatsmarker = NAp; }
				
				if(stage==0){ FIRSTLOP = 1; NUMLOPs = 1; } // FIXME. CHANGE FOR ~ENABLERECURSIVEPARTITIONING
				else if(stage==1){ FIRSTLOP = globalparamsK.ACTSPARAMS_BEGINLOP + 1; NUMLOPs = globalparamsK.ACTSPARAMS_NUMLOPS-2;  } 
				else{ FIRSTLOP = globalparamsK.ACTSPARAMS_TREEDEPTH; NUMLOPs = 1; }
				
				vmaskoffset_kvs = 0; 
				vreadoffset_kvs = 0;
				
				TOPKERNEL6_BASELOOP1D: for(step_type currentLOP=FIRSTLOP; currentLOP<(FIRSTLOP + NUMLOPs); currentLOP+=1){
					#ifdef ENABLERECURSIVEPARTITIONING
					if(stage==0){ num_source_partitions = get_num_source_partitions(globalparamsK.ACTSPARAMS_TREEDEPTH); }
					else if(stage==1){ num_source_partitions = get_num_source_partitions(currentLOP);  }
					else { num_source_partitions = get_num_source_partitions(globalparamsK.ACTSPARAMS_TREEDEPTH);  }
					#else
					NOT IMPLEMENTED.
					#endif
					
					if(stage==0){ FIRSTSOURCEPARTITION = PARTITION_CHKPT[edgebankID][v_chunkid]; LASTSOURCEPARTITIONS = PARTITION_CHKPT[edgebankID][v_chunkid+1]; } 
					else if(stage==1){ FIRSTSOURCEPARTITION = 0; LASTSOURCEPARTITIONS = num_source_partitions;  } 
					else{ FIRSTSOURCEPARTITION = 0; LASTSOURCEPARTITIONS = num_source_partitions; }
					
					if(globalposition.EN_PROCESS == ON){ vmaskoffset_kvs = PARTITION_CHKPT[edgebankID][v_chunkid] * (vmaskbuffersz_kvs); } // NEWCHANGE.
					batch_type vreadoffset_kvs = 0;
					
					TOPKERNEL6_BASELOOP1E: for(batch_type source_partition=FIRSTSOURCEPARTITION; source_partition<LASTSOURCEPARTITIONS; source_partition+=1){
						#ifdef _DEBUGMODE_KERNELPRINTS2
						actsutilityobj->print3("### TOPKERNEL6_BASELOOP1C:: source_partition", "currentLOP", "NAp", source_partition, currentLOP, NAp); 							
						#endif
						
						globalposition.stage = stage; 
						globalposition.laststage = 2; 
						globalposition.currentLOP = currentLOP; 
						globalposition.lastLOP = FIRSTLOP + NUMLOPs - 1; 
						globalposition.source_partition = source_partition;
						globalposition.first_source_partition = FIRSTSOURCEPARTITION;
						globalposition.last_source_partition = LASTSOURCEPARTITIONS - 1;
						globalposition.num_source_partitions = LASTSOURCEPARTITIONS - FIRSTSOURCEPARTITION; // FIXME.
						globalposition.sourcestatsmarker = sourcestatsmarker; 
						globalposition.deststatsmarker = deststatsmarker; 
						if(globalposition.v_chunkid==0 && globalposition.stage==0 && globalposition.currentLOP==1 && globalposition.source_partition==0){ globalposition.first=ON; } else { globalposition.first=OFF; }
						if(globalposition.v_chunkid==globalparamsK.ACTSPARAMS_NUMEDGECHUNKSINABUFFER-1 && globalposition.stage==globalposition.laststage && globalposition.currentLOP==globalposition.lastLOP && globalposition.source_partition==globalposition.last_source_partition){ globalposition.last=ON; } else { globalposition.last=OFF; }
						
						bool_type enableprocess = ON;
						if(globalposition.EN_PROCESS == ON){
							if(GraphAlgo != PAGERANK){ if(vmask0_p[source_partition] > 0){ enableprocess = ON; } else { enableprocess = OFF; }}
						}
						
						bool_type enablereduce = OFF; 
						unsigned int ntravszs = 0;
						if(globalposition.EN_REDUCE == ON){
							rtravstates[0] = gettravstate(globalposition.EN_REDUCE, kvdram0, globalparamsK, currentLOP, sourcestatsmarker); // CRITICAL NOTEME. POSSIBLE SOURCE OF ROUTING CONSTRAINTS?
							rtravstates[1] = gettravstate(globalposition.EN_REDUCE, kvdram1, globalparamsK, currentLOP, sourcestatsmarker); // CRITICAL NOTEME. POSSIBLE SOURCE OF ROUTING CONSTRAINTS?
							rtravstates[2] = gettravstate(globalposition.EN_REDUCE, kvdram2, globalparamsK, currentLOP, sourcestatsmarker); // CRITICAL NOTEME. POSSIBLE SOURCE OF ROUTING CONSTRAINTS?
							rtravstates[3] = gettravstate(globalposition.EN_REDUCE, kvdram3, globalparamsK, currentLOP, sourcestatsmarker); // CRITICAL NOTEME. POSSIBLE SOURCE OF ROUTING CONSTRAINTS?
							rtravstates[4] = gettravstate(globalposition.EN_REDUCE, kvdram4, globalparamsK, currentLOP, sourcestatsmarker); // CRITICAL NOTEME. POSSIBLE SOURCE OF ROUTING CONSTRAINTS?
							rtravstates[5] = gettravstate(globalposition.EN_REDUCE, kvdram5, globalparamsK, currentLOP, sourcestatsmarker); // CRITICAL NOTEME. POSSIBLE SOURCE OF ROUTING CONSTRAINTS?
							for(unsigned int i = 0; i < 6; i++){ ntravszs += rtravstates[i].size_kvs; }
							if(ntravszs > 0){ enablereduce = ON; } else { enablereduce = OFF; }
						}
						
						bool_type enable_loadmasks = OFF; 
						if(globalposition.EN_PROCESS == ON && enableprocess == ON){ enable_loadmasks = ON; } else { enable_loadmasks = OFF; }
						
						bool_type enable_readandreplicatevdata = OFF; 
						if((globalposition.EN_PROCESS == ON && enableprocess == ON) || (globalposition.EN_REDUCE == ON && enablereduce == ON)){ enable_readandreplicatevdata = ON; } else { enable_readandreplicatevdata = OFF; }
		
						// read vertices
						loadmany6vmasks(enable_loadmasks, vdram, vmask0,vmask1,vmask2,vmask3,vmask4,vmask5, vbuffer0, globalparamsV.BASEOFFSETKVS_VERTICESDATAMASK + vmaskoffset_kvs, vmaskbuffersz_kvs, globalparamsV); 
						#ifdef ENABLE_SUBVMASKING
						loadmany6vmasks_subp(enable_loadmasks, vmask0, vmask0_subp,vmask1_subp,vmask2_subp,vmask3_subp,vmask4_subp,vmask5_subp, vmaskbuffersz_kvs); 
						#endif
						readandreplicate6vdata(enable_readandreplicatevdata, vdram, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs, vbuffer0,vbuffer1,vbuffer2,vbuffer3,vbuffer4,vbuffer5, 0, 0, reducebuffersz, globalparamsV); 
						readandreplicate6vdata(enable_readandreplicatevdata, vdram, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs + reducebuffersz, vbuffer0,vbuffer1,vbuffer2,vbuffer3,vbuffer4,vbuffer5, 8, 0, reducebuffersz, globalparamsV); 
						
						// proc 
						topkernelproc_embedded(enableprocess, ON, enablereduce,  kvdram0, vbuffer0, vmask0_p, vmask0_subp, vmask0, globalstatsbuffer0, globalposition, hybridmode);	
						topkernelproc_embedded(enableprocess, ON, enablereduce,  kvdram1, vbuffer1, vmask1_p, vmask1_subp, vmask1, globalstatsbuffer1, globalposition, hybridmode);	
						topkernelproc_embedded(enableprocess, ON, enablereduce,  kvdram2, vbuffer2, vmask2_p, vmask2_subp, vmask2, globalstatsbuffer2, globalposition, hybridmode);	
						topkernelproc_embedded(enableprocess, ON, enablereduce,  kvdram3, vbuffer3, vmask3_p, vmask3_subp, vmask3, globalstatsbuffer3, globalposition, hybridmode);	
						topkernelproc_embedded(enableprocess, ON, enablereduce,  kvdram4, vbuffer4, vmask4_p, vmask4_subp, vmask4, globalstatsbuffer4, globalposition, hybridmode);	
						topkernelproc_embedded(enableprocess, ON, enablereduce,  kvdram5, vbuffer5, vmask5_p, vmask5_subp, vmask5, globalstatsbuffer5, globalposition, hybridmode);	
						
						// merge 
						if(globalposition.EN_REDUCE == ON && enablereduce == ON){ merge6andsavevdata(ON, vdram, vbuffer0,vbuffer1,vbuffer2,vbuffer3,vbuffer4,vbuffer5, 0, 0, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs); }
						if(globalposition.EN_REDUCE == ON && enablereduce == ON){ merge6andsavevdata(ON, vdram, vbuffer0,vbuffer1,vbuffer2,vbuffer3,vbuffer4,vbuffer5, 8, 0, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs + reducebuffersz); }
						
						// update stats
						if(globalposition.EN_REDUCE == ON){ 
							if(enablereduce == ON){ buffer[source_partition] += 64; } 
							else { buffer[source_partition] += 0; }
						}
						
						// increments
						if(globalposition.EN_PARTITION == ON || globalposition.EN_REDUCE == ON){ sourcestatsmarker += 1; }
						if(globalposition.EN_PARTITION == ON){ deststatsmarker += NUM_PARTITIONS; }
						if(globalposition.EN_PROCESS == ON){ vmaskoffset_kvs += vmaskbuffersz_kvs; }
						if(globalposition.EN_PROCESS == ON || globalposition.EN_REDUCE == ON){ vreadoffset_kvs += reducebuffersz * 2; }
					}
				}
			} // stage
		} // v_chunkid
	} // edgebankID
	
	commitkvstats(vdram, buffer, globalparamsV, reducesourcestatsmarker);
	
	#ifdef _WIDEWORD
	vdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_ALGORITHMINFO_GRAPHITERATIONID].range(31, 0) = globalparamsV.ALGORITHMINFO_GRAPHITERATIONID + 1; // CRITICAL NOTEME: Graph Iteration is incremented here
	#else
	vdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_ALGORITHMINFO_GRAPHITERATIONID].data[0].key = globalparamsV.ALGORITHMINFO_GRAPHITERATIONID + 1;
	#endif 
	
	#if defined(_DEBUGMODE_KERNELPRINTS2) & defined(ENABLE_SUBVMASKING)
	cout<<"topkernelP6:: subpmask status: mask_subp_is_zero: "<<mask_subp_is_zero<<", mask_subp_is_not_zero: "<<mask_subp_is_not_zero<<endl;
	#endif 
	#if defined(_DEBUGMODE_KERNELPRINTS2) & defined(DATA_SENSITIVE_ACTS)
	for(unsigned int i=0; i<MAX_NUM_PARTITIONS; i++){ cout<<"topkernelP6:: subpmask status: _chkpartitions["<<i<<"]: "<<_chkpartitions[i]<<endl;; }
	#endif 
	return;
}
}
extern "C" { // #ifdef ACTS_1by1by1byN (means everything packed in 1 compute unit)
void 
	#ifdef SW 
	actsproc:: 
	#endif
topkernelP7(
	uint512_dt * kvdram0,
	uint512_dt * kvdram1,
	uint512_dt * kvdram2,
	uint512_dt * kvdram3,
	uint512_dt * kvdram4,
	uint512_dt * kvdram5,
	uint512_dt * kvdram6,
	uint512_dt * vdram
	){
#ifdef EDGES_IN_SEPERATE_BUFFER_FROM_KVDRAM
	#pragma HLS INTERFACE m_axi port = edges00 offset = slave bundle = gmem0
	#pragma HLS INTERFACE m_axi port = kvdram0 offset = slave bundle = gmem1
	#pragma HLS INTERFACE m_axi port = edges10 offset = slave bundle = gmem2
	#pragma HLS INTERFACE m_axi port = kvdram1 offset = slave bundle = gmem3
	#pragma HLS INTERFACE m_axi port = edges20 offset = slave bundle = gmem4
	#pragma HLS INTERFACE m_axi port = kvdram2 offset = slave bundle = gmem5
	#pragma HLS INTERFACE m_axi port = edges30 offset = slave bundle = gmem6
	#pragma HLS INTERFACE m_axi port = kvdram3 offset = slave bundle = gmem7
	#pragma HLS INTERFACE m_axi port = edges40 offset = slave bundle = gmem8
	#pragma HLS INTERFACE m_axi port = kvdram4 offset = slave bundle = gmem9
	#pragma HLS INTERFACE m_axi port = edges50 offset = slave bundle = gmem10
	#pragma HLS INTERFACE m_axi port = kvdram5 offset = slave bundle = gmem11
	#pragma HLS INTERFACE m_axi port = edges60 offset = slave bundle = gmem12
	#pragma HLS INTERFACE m_axi port = kvdram6 offset = slave bundle = gmem13
	#pragma HLS INTERFACE m_axi port = vdram offset = slave bundle = gmem14
#else 
	#pragma HLS INTERFACE m_axi port = kvdram0 offset = slave bundle = gmem0
	#pragma HLS INTERFACE m_axi port = kvdram1 offset = slave bundle = gmem1
	#pragma HLS INTERFACE m_axi port = kvdram2 offset = slave bundle = gmem2
	#pragma HLS INTERFACE m_axi port = kvdram3 offset = slave bundle = gmem3
	#pragma HLS INTERFACE m_axi port = kvdram4 offset = slave bundle = gmem4
	#pragma HLS INTERFACE m_axi port = kvdram5 offset = slave bundle = gmem5
	#pragma HLS INTERFACE m_axi port = kvdram6 offset = slave bundle = gmem6
	#pragma HLS INTERFACE m_axi port = vdram offset = slave bundle = gmem7
#endif 
//

#ifdef EDGES_IN_SEPERATE_BUFFER_FROM_KVDRAM
#pragma HLS INTERFACE s_axilite port = edges00 bundle = control
#pragma HLS INTERFACE s_axilite port = edges10 bundle = control
#pragma HLS INTERFACE s_axilite port = edges20 bundle = control
#pragma HLS INTERFACE s_axilite port = edges30 bundle = control
#pragma HLS INTERFACE s_axilite port = edges40 bundle = control
#pragma HLS INTERFACE s_axilite port = edges50 bundle = control
#pragma HLS INTERFACE s_axilite port = edges60 bundle = control
	
#endif 
#pragma HLS INTERFACE s_axilite port = kvdram0 bundle = control
#pragma HLS INTERFACE s_axilite port = kvdram1 bundle = control
#pragma HLS INTERFACE s_axilite port = kvdram2 bundle = control
#pragma HLS INTERFACE s_axilite port = kvdram3 bundle = control
#pragma HLS INTERFACE s_axilite port = kvdram4 bundle = control
#pragma HLS INTERFACE s_axilite port = kvdram5 bundle = control
#pragma HLS INTERFACE s_axilite port = kvdram6 bundle = control
	

#pragma HLS INTERFACE s_axilite port = vdram bundle = control

#pragma HLS INTERFACE s_axilite port=return bundle=control

#ifdef EDGES_IN_SEPERATE_BUFFER_FROM_KVDRAM
#pragma HLS DATA_PACK variable = edges00
#pragma HLS DATA_PACK variable = edges10
#pragma HLS DATA_PACK variable = edges20
#pragma HLS DATA_PACK variable = edges30
#pragma HLS DATA_PACK variable = edges40
#pragma HLS DATA_PACK variable = edges50
#pragma HLS DATA_PACK variable = edges60
#endif 
#pragma HLS DATA_PACK variable = kvdram0
#pragma HLS DATA_PACK variable = kvdram1
#pragma HLS DATA_PACK variable = kvdram2
#pragma HLS DATA_PACK variable = kvdram3
#pragma HLS DATA_PACK variable = kvdram4
#pragma HLS DATA_PACK variable = kvdram5
#pragma HLS DATA_PACK variable = kvdram6
#pragma HLS DATA_PACK variable = vdram

	#if defined(_DEBUGMODE_KERNELPRINTS2) & defined(ALLVERTEXISACTIVE_ALGORITHM)
	cout<<">>> ====================== Light weight ACTS (PR & SYNC) Launched... ====================== "<<endl; 
	#endif
	
	keyvalue_vbuffer_t vbuffer0[VDATA_PACKINGSIZE][BLOCKRAM_SIZE];
	#pragma HLS array_partition variable = vbuffer0
	uint32_type vmask0_p[BLOCKRAM_SIZE];
	unitBRAMwidth_type vmask0_subp[BLOCKRAM_SIZE];
	#pragma HLS DATA_PACK variable = vmask0_subp
	unitBRAMwidth_type vmask0[BLOCKRAM_SIZE];
	#pragma HLS DATA_PACK variable = vmask0
	keyvalue_t globalstatsbuffer0[MAX_NUM_PARTITIONS];
	keyvalue_vbuffer_t vbuffer1[VDATA_PACKINGSIZE][BLOCKRAM_SIZE];
	#pragma HLS array_partition variable = vbuffer1
	uint32_type vmask1_p[BLOCKRAM_SIZE];
	unitBRAMwidth_type vmask1_subp[BLOCKRAM_SIZE];
	#pragma HLS DATA_PACK variable = vmask1_subp
	unitBRAMwidth_type vmask1[BLOCKRAM_SIZE];
	#pragma HLS DATA_PACK variable = vmask1
	keyvalue_t globalstatsbuffer1[MAX_NUM_PARTITIONS];
	keyvalue_vbuffer_t vbuffer2[VDATA_PACKINGSIZE][BLOCKRAM_SIZE];
	#pragma HLS array_partition variable = vbuffer2
	uint32_type vmask2_p[BLOCKRAM_SIZE];
	unitBRAMwidth_type vmask2_subp[BLOCKRAM_SIZE];
	#pragma HLS DATA_PACK variable = vmask2_subp
	unitBRAMwidth_type vmask2[BLOCKRAM_SIZE];
	#pragma HLS DATA_PACK variable = vmask2
	keyvalue_t globalstatsbuffer2[MAX_NUM_PARTITIONS];
	keyvalue_vbuffer_t vbuffer3[VDATA_PACKINGSIZE][BLOCKRAM_SIZE];
	#pragma HLS array_partition variable = vbuffer3
	uint32_type vmask3_p[BLOCKRAM_SIZE];
	unitBRAMwidth_type vmask3_subp[BLOCKRAM_SIZE];
	#pragma HLS DATA_PACK variable = vmask3_subp
	unitBRAMwidth_type vmask3[BLOCKRAM_SIZE];
	#pragma HLS DATA_PACK variable = vmask3
	keyvalue_t globalstatsbuffer3[MAX_NUM_PARTITIONS];
	keyvalue_vbuffer_t vbuffer4[VDATA_PACKINGSIZE][BLOCKRAM_SIZE];
	#pragma HLS array_partition variable = vbuffer4
	uint32_type vmask4_p[BLOCKRAM_SIZE];
	unitBRAMwidth_type vmask4_subp[BLOCKRAM_SIZE];
	#pragma HLS DATA_PACK variable = vmask4_subp
	unitBRAMwidth_type vmask4[BLOCKRAM_SIZE];
	#pragma HLS DATA_PACK variable = vmask4
	keyvalue_t globalstatsbuffer4[MAX_NUM_PARTITIONS];
	keyvalue_vbuffer_t vbuffer5[VDATA_PACKINGSIZE][BLOCKRAM_SIZE];
	#pragma HLS array_partition variable = vbuffer5
	uint32_type vmask5_p[BLOCKRAM_SIZE];
	unitBRAMwidth_type vmask5_subp[BLOCKRAM_SIZE];
	#pragma HLS DATA_PACK variable = vmask5_subp
	unitBRAMwidth_type vmask5[BLOCKRAM_SIZE];
	#pragma HLS DATA_PACK variable = vmask5
	keyvalue_t globalstatsbuffer5[MAX_NUM_PARTITIONS];
	keyvalue_vbuffer_t vbuffer6[VDATA_PACKINGSIZE][BLOCKRAM_SIZE];
	#pragma HLS array_partition variable = vbuffer6
	uint32_type vmask6_p[BLOCKRAM_SIZE];
	unitBRAMwidth_type vmask6_subp[BLOCKRAM_SIZE];
	#pragma HLS DATA_PACK variable = vmask6_subp
	unitBRAMwidth_type vmask6[BLOCKRAM_SIZE];
	#pragma HLS DATA_PACK variable = vmask6
	keyvalue_t globalstatsbuffer6[MAX_NUM_PARTITIONS];
	travstate_t rtravstates[7];
	#pragma HLS ARRAY_PARTITION variable=rtravstates complete
	value_t buffer[DOUBLE_BLOCKRAM_SIZE]; // CRITICAL AUTOMATEME.
	globalparams_t globalparamsKs[7];
	globalparams_t globalparamsEs[MAX_NUM_EDGE_BANKS];
	
	unsigned int sourcestatsmarker = 0;
	unsigned int deststatsmarker = 0;
	unsigned int reducesourcestatsmarker = 0;
	unsigned int EN_PROCESS = OFF; unsigned int EN_PARTITION = OFF; unsigned int EN_REDUCE = OFF; unsigned int EN_PROCESSANDREDUCE = OFF; unsigned int EN_PROCESSANDPARTITION = OFF;
	globalposition_t globalposition;
	
	#ifdef _DEBUGMODE_CHECKS3
	mask_subp_is_zero = 0;
	mask_subp_is_not_zero = 0;
	for(unsigned int i=0; i<8; i++){ _stages[i] = 0; }
	for(unsigned int i=0; i<MAX_NUM_PARTITIONS; i++){ _chkpartitions[i] = 0; }
	#endif 
	
globalparamsKs[0] = getglobalparams(kvdram0);globalparamsKs[1] = getglobalparams(kvdram1);globalparamsKs[2] = getglobalparams(kvdram2);globalparamsKs[3] = getglobalparams(kvdram3);globalparamsKs[4] = getglobalparams(kvdram4);globalparamsKs[5] = getglobalparams(kvdram5);globalparamsKs[6] = getglobalparams(kvdram6); // CRITICAL NOTEME. POSSIBLE SOURCE OF ROUTING CONSTRAINTS?
	globalparams_t globalparamsK = globalparamsKs[0]; // getglobalparams(kvdram0); // CRITICAL NOTEME. POSSIBLE SOURCE OF ROUTING CONSTRAINTS?
	#ifdef EDGES_IN_SEPERATE_BUFFER_FROM_KVDRAM
	
	#else 
	globalparamsEs[0] = globalparamsK;
	#endif 
	globalparams_t globalparamsV = getglobalparams(vdram);
	
	unsigned int PARTITION_CHKPT[MAX_NUM_EDGE_BANKS][EDGESSTATSDRAMSZ];
	for(unsigned int u=0; u<EDGESSTATSDRAMSZ; u++){ // CRITICAL NEWCHANGE.
		#ifdef EDGES_IN_SEPERATE_BUFFER_FROM_KVDRAM
			#ifdef _WIDEWORD
	
			#else
	
			#endif
		#else 
			#ifdef _WIDEWORD
			PARTITION_CHKPT[0][u] = kvdram0[globalparamsK.BASEOFFSETKVS_EDGESSTATSDRAM + u].range(31, 0); 
			#else
			PARTITION_CHKPT[0][u] = kvdram0[globalparamsK.BASEOFFSETKVS_EDGESSTATSDRAM + u].data[0].key; 
			#endif
		#endif 
	}
	
	buffer_type vmaskbuffersz_kvs = (globalparamsK.SIZE_REDUCE * VDATA_PACKINGSIZE) / 512;
	batch_type vmaskoffset_kvs = 0; 
	unsigned int vreadoffset_kvs = 0;
	buffer_type reducebuffersz = globalparamsK.SIZE_REDUCE / 2;
	unsigned int GraphAlgo = globalparamsK.ALGORITHMINFO_GRAPHALGORITHMID;
	#ifdef ENABLERECURSIVEPARTITIONING
	for(unsigned int k=0; k<globalparamsK.ACTSPARAMS_TREEDEPTH-1; k++)
	#else 
	for(unsigned int k=0; k<globalparamsK.ACTSPARAMS_TREEDEPTH; k++)
	#endif 
	{
		reducesourcestatsmarker += (1 << (NUM_PARTITIONS_POW * k)); 
	}
	unsigned int FIRSTLOP = 0;
	unsigned int NUMLOPs = 0;
	unsigned int FIRSTSOURCEPARTITION = 0;
	unsigned int LASTSOURCEPARTITIONS = 0;
	batch_type num_source_partitions = 0; 

	for(unsigned int i=0; i<DOUBLE_BLOCKRAM_SIZE; i++){ buffer[i] = 0; } 
	if(GraphAlgo != PAGERANK){ loadmany7vmask_p(vdram, vmask0_p,vmask1_p,vmask2_p,vmask3_p,vmask4_p,vmask5_p,vmask6_p, globalparamsV.BASEOFFSETKVS_VERTICESPARTITIONMASK, BLOCKRAM_SIZE); }
	if(GraphAlgo != PAGERANK){ resetkvstatvalues(vdram, globalparamsV); }
	unsigned int num_edge_banks = NUM_EDGE_BANKS;
	unsigned int it_size; if(num_edge_banks==0){ it_size = 1; } else { it_size = NUM_EDGE_BANKS; }
	unsigned int FIRST_BASEOFFSETKVS_STATSDRAM = globalparamsK.BASEOFFSETKVS_STATSDRAM;
	
	#ifdef EDGES_IN_SEPERATE_BUFFER_FROM_KVDRAM
	copyvs(vdram, vbuffer0, globalparamsV);
	#endif
	#ifdef _WIDEWORD
	unsigned int hybridmode = vdram[globalparamsV.BASEOFFSETKVS_OTHERINFOS + globalparamsV.ALGORITHMINFO_GRAPHITERATIONID].range(31, 0);
	#else 
	unsigned int hybridmode = vdram[globalparamsV.BASEOFFSETKVS_OTHERINFOS + globalparamsV.ALGORITHMINFO_GRAPHITERATIONID].data[0].key;
	#endif 
	
	unsigned int num_stages = 3;
	if(globalparamsV.ENABLE_PROCESSCOMMAND == ON){ num_stages = 1; }
	if(globalparamsV.ENABLE_PARTITIONCOMMAND == ON){ num_stages = 2; }
	if(globalparamsV.ENABLE_APPLYUPDATESCOMMAND == ON){ num_stages = 3; }
	
	TOPKERNEL7_BASELOOP1: for(unsigned int edgebankID=0; edgebankID<it_size; edgebankID++){
		globalposition.edgebankID = edgebankID;
		#ifdef EDGES_IN_SEPERATE_BUFFER_FROM_KVDRAM
		for(unsigned int i=0; i<globalposition.edgebankID; i++){ globalparamsK.BASEOFFSETKVS_STATSDRAM += ((globalparamsK.SIZE_KVSTATSDRAM / VECTOR_SIZE) / NUM_EDGE_BANKS); } // SHIFT.
		#endif 
		TOPKERNEL7_BASELOOP1B: for(unsigned int v_chunkid=0; v_chunkid<globalparamsK.ACTSPARAMS_NUMEDGECHUNKSINABUFFER; v_chunkid++){
			globalposition.v_chunkid = v_chunkid;
			#ifdef EDGES_IN_SEPERATE_BUFFER_FROM_KVDRAM
			globalparamsK.VARS_WORKBATCH = globalposition.v_chunkid; // SHIFT.
			#endif 
			TOPKERNEL7_BASELOOP1C: for(step_type stage=0; stage<num_stages; stage++){
			
				EN_PROCESS = OFF; EN_PARTITION = OFF; EN_REDUCE = OFF; EN_PROCESSANDREDUCE = OFF; EN_PROCESSANDPARTITION = OFF;
				if(stage==0){ EN_PROCESS = ON; EN_PROCESSANDREDUCE = ON; EN_PROCESSANDPARTITION = ON;  } 
				else if(stage==1){ EN_PARTITION = ON; EN_PROCESSANDPARTITION = ON;  } 
				else { EN_REDUCE = ON; EN_PROCESSANDREDUCE = ON; }
				globalposition.EN_PROCESS = EN_PROCESS; globalposition.EN_PARTITION = EN_PARTITION; globalposition.EN_REDUCE = EN_REDUCE; globalposition.EN_PROCESSANDPARTITION = EN_PROCESSANDPARTITION; globalposition.EN_PROCESSANDREDUCE = EN_PROCESSANDREDUCE;
				
				if(stage==0){ sourcestatsmarker = 0; deststatsmarker = 1; } 
				else if(stage==1){ sourcestatsmarker = 1; deststatsmarker = 1 + NUM_PARTITIONS; } 
				else { sourcestatsmarker = reducesourcestatsmarker; deststatsmarker = NAp; }
				
				if(stage==0){ FIRSTLOP = 1; NUMLOPs = 1; } // FIXME. CHANGE FOR ~ENABLERECURSIVEPARTITIONING
				else if(stage==1){ FIRSTLOP = globalparamsK.ACTSPARAMS_BEGINLOP + 1; NUMLOPs = globalparamsK.ACTSPARAMS_NUMLOPS-2;  } 
				else{ FIRSTLOP = globalparamsK.ACTSPARAMS_TREEDEPTH; NUMLOPs = 1; }
				
				vmaskoffset_kvs = 0; 
				vreadoffset_kvs = 0;
				
				TOPKERNEL7_BASELOOP1D: for(step_type currentLOP=FIRSTLOP; currentLOP<(FIRSTLOP + NUMLOPs); currentLOP+=1){
					#ifdef ENABLERECURSIVEPARTITIONING
					if(stage==0){ num_source_partitions = get_num_source_partitions(globalparamsK.ACTSPARAMS_TREEDEPTH); }
					else if(stage==1){ num_source_partitions = get_num_source_partitions(currentLOP);  }
					else { num_source_partitions = get_num_source_partitions(globalparamsK.ACTSPARAMS_TREEDEPTH);  }
					#else
					NOT IMPLEMENTED.
					#endif
					
					if(stage==0){ FIRSTSOURCEPARTITION = PARTITION_CHKPT[edgebankID][v_chunkid]; LASTSOURCEPARTITIONS = PARTITION_CHKPT[edgebankID][v_chunkid+1]; } 
					else if(stage==1){ FIRSTSOURCEPARTITION = 0; LASTSOURCEPARTITIONS = num_source_partitions;  } 
					else{ FIRSTSOURCEPARTITION = 0; LASTSOURCEPARTITIONS = num_source_partitions; }
					
					if(globalposition.EN_PROCESS == ON){ vmaskoffset_kvs = PARTITION_CHKPT[edgebankID][v_chunkid] * (vmaskbuffersz_kvs); } // NEWCHANGE.
					batch_type vreadoffset_kvs = 0;
					
					TOPKERNEL7_BASELOOP1E: for(batch_type source_partition=FIRSTSOURCEPARTITION; source_partition<LASTSOURCEPARTITIONS; source_partition+=1){
						#ifdef _DEBUGMODE_KERNELPRINTS2
						actsutilityobj->print3("### TOPKERNEL7_BASELOOP1C:: source_partition", "currentLOP", "NAp", source_partition, currentLOP, NAp); 							
						#endif
						
						globalposition.stage = stage; 
						globalposition.laststage = 2; 
						globalposition.currentLOP = currentLOP; 
						globalposition.lastLOP = FIRSTLOP + NUMLOPs - 1; 
						globalposition.source_partition = source_partition;
						globalposition.first_source_partition = FIRSTSOURCEPARTITION;
						globalposition.last_source_partition = LASTSOURCEPARTITIONS - 1;
						globalposition.num_source_partitions = LASTSOURCEPARTITIONS - FIRSTSOURCEPARTITION; // FIXME.
						globalposition.sourcestatsmarker = sourcestatsmarker; 
						globalposition.deststatsmarker = deststatsmarker; 
						if(globalposition.v_chunkid==0 && globalposition.stage==0 && globalposition.currentLOP==1 && globalposition.source_partition==0){ globalposition.first=ON; } else { globalposition.first=OFF; }
						if(globalposition.v_chunkid==globalparamsK.ACTSPARAMS_NUMEDGECHUNKSINABUFFER-1 && globalposition.stage==globalposition.laststage && globalposition.currentLOP==globalposition.lastLOP && globalposition.source_partition==globalposition.last_source_partition){ globalposition.last=ON; } else { globalposition.last=OFF; }
						
						bool_type enableprocess = ON;
						if(globalposition.EN_PROCESS == ON){
							if(GraphAlgo != PAGERANK){ if(vmask0_p[source_partition] > 0){ enableprocess = ON; } else { enableprocess = OFF; }}
						}
						
						bool_type enablereduce = OFF; 
						unsigned int ntravszs = 0;
						if(globalposition.EN_REDUCE == ON){
							rtravstates[0] = gettravstate(globalposition.EN_REDUCE, kvdram0, globalparamsK, currentLOP, sourcestatsmarker); // CRITICAL NOTEME. POSSIBLE SOURCE OF ROUTING CONSTRAINTS?
							rtravstates[1] = gettravstate(globalposition.EN_REDUCE, kvdram1, globalparamsK, currentLOP, sourcestatsmarker); // CRITICAL NOTEME. POSSIBLE SOURCE OF ROUTING CONSTRAINTS?
							rtravstates[2] = gettravstate(globalposition.EN_REDUCE, kvdram2, globalparamsK, currentLOP, sourcestatsmarker); // CRITICAL NOTEME. POSSIBLE SOURCE OF ROUTING CONSTRAINTS?
							rtravstates[3] = gettravstate(globalposition.EN_REDUCE, kvdram3, globalparamsK, currentLOP, sourcestatsmarker); // CRITICAL NOTEME. POSSIBLE SOURCE OF ROUTING CONSTRAINTS?
							rtravstates[4] = gettravstate(globalposition.EN_REDUCE, kvdram4, globalparamsK, currentLOP, sourcestatsmarker); // CRITICAL NOTEME. POSSIBLE SOURCE OF ROUTING CONSTRAINTS?
							rtravstates[5] = gettravstate(globalposition.EN_REDUCE, kvdram5, globalparamsK, currentLOP, sourcestatsmarker); // CRITICAL NOTEME. POSSIBLE SOURCE OF ROUTING CONSTRAINTS?
							rtravstates[6] = gettravstate(globalposition.EN_REDUCE, kvdram6, globalparamsK, currentLOP, sourcestatsmarker); // CRITICAL NOTEME. POSSIBLE SOURCE OF ROUTING CONSTRAINTS?
							for(unsigned int i = 0; i < 7; i++){ ntravszs += rtravstates[i].size_kvs; }
							if(ntravszs > 0){ enablereduce = ON; } else { enablereduce = OFF; }
						}
						
						bool_type enable_loadmasks = OFF; 
						if(globalposition.EN_PROCESS == ON && enableprocess == ON){ enable_loadmasks = ON; } else { enable_loadmasks = OFF; }
						
						bool_type enable_readandreplicatevdata = OFF; 
						if((globalposition.EN_PROCESS == ON && enableprocess == ON) || (globalposition.EN_REDUCE == ON && enablereduce == ON)){ enable_readandreplicatevdata = ON; } else { enable_readandreplicatevdata = OFF; }
		
						// read vertices
						loadmany7vmasks(enable_loadmasks, vdram, vmask0,vmask1,vmask2,vmask3,vmask4,vmask5,vmask6, vbuffer0, globalparamsV.BASEOFFSETKVS_VERTICESDATAMASK + vmaskoffset_kvs, vmaskbuffersz_kvs, globalparamsV); 
						#ifdef ENABLE_SUBVMASKING
						loadmany7vmasks_subp(enable_loadmasks, vmask0, vmask0_subp,vmask1_subp,vmask2_subp,vmask3_subp,vmask4_subp,vmask5_subp,vmask6_subp, vmaskbuffersz_kvs); 
						#endif
						readandreplicate7vdata(enable_readandreplicatevdata, vdram, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs, vbuffer0,vbuffer1,vbuffer2,vbuffer3,vbuffer4,vbuffer5,vbuffer6, 0, 0, reducebuffersz, globalparamsV); 
						readandreplicate7vdata(enable_readandreplicatevdata, vdram, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs + reducebuffersz, vbuffer0,vbuffer1,vbuffer2,vbuffer3,vbuffer4,vbuffer5,vbuffer6, 8, 0, reducebuffersz, globalparamsV); 
						
						// proc 
						topkernelproc_embedded(enableprocess, ON, enablereduce,  kvdram0, vbuffer0, vmask0_p, vmask0_subp, vmask0, globalstatsbuffer0, globalposition, hybridmode);	
						topkernelproc_embedded(enableprocess, ON, enablereduce,  kvdram1, vbuffer1, vmask1_p, vmask1_subp, vmask1, globalstatsbuffer1, globalposition, hybridmode);	
						topkernelproc_embedded(enableprocess, ON, enablereduce,  kvdram2, vbuffer2, vmask2_p, vmask2_subp, vmask2, globalstatsbuffer2, globalposition, hybridmode);	
						topkernelproc_embedded(enableprocess, ON, enablereduce,  kvdram3, vbuffer3, vmask3_p, vmask3_subp, vmask3, globalstatsbuffer3, globalposition, hybridmode);	
						topkernelproc_embedded(enableprocess, ON, enablereduce,  kvdram4, vbuffer4, vmask4_p, vmask4_subp, vmask4, globalstatsbuffer4, globalposition, hybridmode);	
						topkernelproc_embedded(enableprocess, ON, enablereduce,  kvdram5, vbuffer5, vmask5_p, vmask5_subp, vmask5, globalstatsbuffer5, globalposition, hybridmode);	
						topkernelproc_embedded(enableprocess, ON, enablereduce,  kvdram6, vbuffer6, vmask6_p, vmask6_subp, vmask6, globalstatsbuffer6, globalposition, hybridmode);	
						
						// merge 
						if(globalposition.EN_REDUCE == ON && enablereduce == ON){ merge7andsavevdata(ON, vdram, vbuffer0,vbuffer1,vbuffer2,vbuffer3,vbuffer4,vbuffer5,vbuffer6, 0, 0, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs); }
						if(globalposition.EN_REDUCE == ON && enablereduce == ON){ merge7andsavevdata(ON, vdram, vbuffer0,vbuffer1,vbuffer2,vbuffer3,vbuffer4,vbuffer5,vbuffer6, 8, 0, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs + reducebuffersz); }
						
						// update stats
						if(globalposition.EN_REDUCE == ON){ 
							if(enablereduce == ON){ buffer[source_partition] += 64; } 
							else { buffer[source_partition] += 0; }
						}
						
						// increments
						if(globalposition.EN_PARTITION == ON || globalposition.EN_REDUCE == ON){ sourcestatsmarker += 1; }
						if(globalposition.EN_PARTITION == ON){ deststatsmarker += NUM_PARTITIONS; }
						if(globalposition.EN_PROCESS == ON){ vmaskoffset_kvs += vmaskbuffersz_kvs; }
						if(globalposition.EN_PROCESS == ON || globalposition.EN_REDUCE == ON){ vreadoffset_kvs += reducebuffersz * 2; }
					}
				}
			} // stage
		} // v_chunkid
	} // edgebankID
	
	commitkvstats(vdram, buffer, globalparamsV, reducesourcestatsmarker);
	
	#ifdef _WIDEWORD
	vdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_ALGORITHMINFO_GRAPHITERATIONID].range(31, 0) = globalparamsV.ALGORITHMINFO_GRAPHITERATIONID + 1; // CRITICAL NOTEME: Graph Iteration is incremented here
	#else
	vdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_ALGORITHMINFO_GRAPHITERATIONID].data[0].key = globalparamsV.ALGORITHMINFO_GRAPHITERATIONID + 1;
	#endif 
	
	#if defined(_DEBUGMODE_KERNELPRINTS2) & defined(ENABLE_SUBVMASKING)
	cout<<"topkernelP7:: subpmask status: mask_subp_is_zero: "<<mask_subp_is_zero<<", mask_subp_is_not_zero: "<<mask_subp_is_not_zero<<endl;
	#endif 
	#if defined(_DEBUGMODE_KERNELPRINTS2) & defined(DATA_SENSITIVE_ACTS)
	for(unsigned int i=0; i<MAX_NUM_PARTITIONS; i++){ cout<<"topkernelP7:: subpmask status: _chkpartitions["<<i<<"]: "<<_chkpartitions[i]<<endl;; }
	#endif 
	return;
}
}
extern "C" { // #ifdef ACTS_1by1by1byN (means everything packed in 1 compute unit)
void 
	#ifdef SW 
	actsproc:: 
	#endif
topkernelP8(
	uint512_dt * kvdram0,
	uint512_dt * kvdram1,
	uint512_dt * kvdram2,
	uint512_dt * kvdram3,
	uint512_dt * kvdram4,
	uint512_dt * kvdram5,
	uint512_dt * kvdram6,
	uint512_dt * kvdram7,
	uint512_dt * vdram
	){
#ifdef EDGES_IN_SEPERATE_BUFFER_FROM_KVDRAM
	#pragma HLS INTERFACE m_axi port = edges00 offset = slave bundle = gmem0
	#pragma HLS INTERFACE m_axi port = kvdram0 offset = slave bundle = gmem1
	#pragma HLS INTERFACE m_axi port = edges10 offset = slave bundle = gmem2
	#pragma HLS INTERFACE m_axi port = kvdram1 offset = slave bundle = gmem3
	#pragma HLS INTERFACE m_axi port = edges20 offset = slave bundle = gmem4
	#pragma HLS INTERFACE m_axi port = kvdram2 offset = slave bundle = gmem5
	#pragma HLS INTERFACE m_axi port = edges30 offset = slave bundle = gmem6
	#pragma HLS INTERFACE m_axi port = kvdram3 offset = slave bundle = gmem7
	#pragma HLS INTERFACE m_axi port = edges40 offset = slave bundle = gmem8
	#pragma HLS INTERFACE m_axi port = kvdram4 offset = slave bundle = gmem9
	#pragma HLS INTERFACE m_axi port = edges50 offset = slave bundle = gmem10
	#pragma HLS INTERFACE m_axi port = kvdram5 offset = slave bundle = gmem11
	#pragma HLS INTERFACE m_axi port = edges60 offset = slave bundle = gmem12
	#pragma HLS INTERFACE m_axi port = kvdram6 offset = slave bundle = gmem13
	#pragma HLS INTERFACE m_axi port = edges70 offset = slave bundle = gmem14
	#pragma HLS INTERFACE m_axi port = kvdram7 offset = slave bundle = gmem15
	#pragma HLS INTERFACE m_axi port = vdram offset = slave bundle = gmem16
#else 
	#pragma HLS INTERFACE m_axi port = kvdram0 offset = slave bundle = gmem0
	#pragma HLS INTERFACE m_axi port = kvdram1 offset = slave bundle = gmem1
	#pragma HLS INTERFACE m_axi port = kvdram2 offset = slave bundle = gmem2
	#pragma HLS INTERFACE m_axi port = kvdram3 offset = slave bundle = gmem3
	#pragma HLS INTERFACE m_axi port = kvdram4 offset = slave bundle = gmem4
	#pragma HLS INTERFACE m_axi port = kvdram5 offset = slave bundle = gmem5
	#pragma HLS INTERFACE m_axi port = kvdram6 offset = slave bundle = gmem6
	#pragma HLS INTERFACE m_axi port = kvdram7 offset = slave bundle = gmem7
	#pragma HLS INTERFACE m_axi port = vdram offset = slave bundle = gmem8
#endif 
//

#ifdef EDGES_IN_SEPERATE_BUFFER_FROM_KVDRAM
#pragma HLS INTERFACE s_axilite port = edges00 bundle = control
#pragma HLS INTERFACE s_axilite port = edges10 bundle = control
#pragma HLS INTERFACE s_axilite port = edges20 bundle = control
#pragma HLS INTERFACE s_axilite port = edges30 bundle = control
#pragma HLS INTERFACE s_axilite port = edges40 bundle = control
#pragma HLS INTERFACE s_axilite port = edges50 bundle = control
#pragma HLS INTERFACE s_axilite port = edges60 bundle = control
#pragma HLS INTERFACE s_axilite port = edges70 bundle = control
	
#endif 
#pragma HLS INTERFACE s_axilite port = kvdram0 bundle = control
#pragma HLS INTERFACE s_axilite port = kvdram1 bundle = control
#pragma HLS INTERFACE s_axilite port = kvdram2 bundle = control
#pragma HLS INTERFACE s_axilite port = kvdram3 bundle = control
#pragma HLS INTERFACE s_axilite port = kvdram4 bundle = control
#pragma HLS INTERFACE s_axilite port = kvdram5 bundle = control
#pragma HLS INTERFACE s_axilite port = kvdram6 bundle = control
#pragma HLS INTERFACE s_axilite port = kvdram7 bundle = control
	

#pragma HLS INTERFACE s_axilite port = vdram bundle = control

#pragma HLS INTERFACE s_axilite port=return bundle=control

#ifdef EDGES_IN_SEPERATE_BUFFER_FROM_KVDRAM
#pragma HLS DATA_PACK variable = edges00
#pragma HLS DATA_PACK variable = edges10
#pragma HLS DATA_PACK variable = edges20
#pragma HLS DATA_PACK variable = edges30
#pragma HLS DATA_PACK variable = edges40
#pragma HLS DATA_PACK variable = edges50
#pragma HLS DATA_PACK variable = edges60
#pragma HLS DATA_PACK variable = edges70
#endif 
#pragma HLS DATA_PACK variable = kvdram0
#pragma HLS DATA_PACK variable = kvdram1
#pragma HLS DATA_PACK variable = kvdram2
#pragma HLS DATA_PACK variable = kvdram3
#pragma HLS DATA_PACK variable = kvdram4
#pragma HLS DATA_PACK variable = kvdram5
#pragma HLS DATA_PACK variable = kvdram6
#pragma HLS DATA_PACK variable = kvdram7
#pragma HLS DATA_PACK variable = vdram

	#if defined(_DEBUGMODE_KERNELPRINTS2) & defined(ALLVERTEXISACTIVE_ALGORITHM)
	cout<<">>> ====================== Light weight ACTS (PR & SYNC) Launched... ====================== "<<endl; 
	#endif
	
	keyvalue_vbuffer_t vbuffer0[VDATA_PACKINGSIZE][BLOCKRAM_SIZE];
	#pragma HLS array_partition variable = vbuffer0
	uint32_type vmask0_p[BLOCKRAM_SIZE];
	unitBRAMwidth_type vmask0_subp[BLOCKRAM_SIZE];
	#pragma HLS DATA_PACK variable = vmask0_subp
	unitBRAMwidth_type vmask0[BLOCKRAM_SIZE];
	#pragma HLS DATA_PACK variable = vmask0
	keyvalue_t globalstatsbuffer0[MAX_NUM_PARTITIONS];
	keyvalue_vbuffer_t vbuffer1[VDATA_PACKINGSIZE][BLOCKRAM_SIZE];
	#pragma HLS array_partition variable = vbuffer1
	uint32_type vmask1_p[BLOCKRAM_SIZE];
	unitBRAMwidth_type vmask1_subp[BLOCKRAM_SIZE];
	#pragma HLS DATA_PACK variable = vmask1_subp
	unitBRAMwidth_type vmask1[BLOCKRAM_SIZE];
	#pragma HLS DATA_PACK variable = vmask1
	keyvalue_t globalstatsbuffer1[MAX_NUM_PARTITIONS];
	keyvalue_vbuffer_t vbuffer2[VDATA_PACKINGSIZE][BLOCKRAM_SIZE];
	#pragma HLS array_partition variable = vbuffer2
	uint32_type vmask2_p[BLOCKRAM_SIZE];
	unitBRAMwidth_type vmask2_subp[BLOCKRAM_SIZE];
	#pragma HLS DATA_PACK variable = vmask2_subp
	unitBRAMwidth_type vmask2[BLOCKRAM_SIZE];
	#pragma HLS DATA_PACK variable = vmask2
	keyvalue_t globalstatsbuffer2[MAX_NUM_PARTITIONS];
	keyvalue_vbuffer_t vbuffer3[VDATA_PACKINGSIZE][BLOCKRAM_SIZE];
	#pragma HLS array_partition variable = vbuffer3
	uint32_type vmask3_p[BLOCKRAM_SIZE];
	unitBRAMwidth_type vmask3_subp[BLOCKRAM_SIZE];
	#pragma HLS DATA_PACK variable = vmask3_subp
	unitBRAMwidth_type vmask3[BLOCKRAM_SIZE];
	#pragma HLS DATA_PACK variable = vmask3
	keyvalue_t globalstatsbuffer3[MAX_NUM_PARTITIONS];
	keyvalue_vbuffer_t vbuffer4[VDATA_PACKINGSIZE][BLOCKRAM_SIZE];
	#pragma HLS array_partition variable = vbuffer4
	uint32_type vmask4_p[BLOCKRAM_SIZE];
	unitBRAMwidth_type vmask4_subp[BLOCKRAM_SIZE];
	#pragma HLS DATA_PACK variable = vmask4_subp
	unitBRAMwidth_type vmask4[BLOCKRAM_SIZE];
	#pragma HLS DATA_PACK variable = vmask4
	keyvalue_t globalstatsbuffer4[MAX_NUM_PARTITIONS];
	keyvalue_vbuffer_t vbuffer5[VDATA_PACKINGSIZE][BLOCKRAM_SIZE];
	#pragma HLS array_partition variable = vbuffer5
	uint32_type vmask5_p[BLOCKRAM_SIZE];
	unitBRAMwidth_type vmask5_subp[BLOCKRAM_SIZE];
	#pragma HLS DATA_PACK variable = vmask5_subp
	unitBRAMwidth_type vmask5[BLOCKRAM_SIZE];
	#pragma HLS DATA_PACK variable = vmask5
	keyvalue_t globalstatsbuffer5[MAX_NUM_PARTITIONS];
	keyvalue_vbuffer_t vbuffer6[VDATA_PACKINGSIZE][BLOCKRAM_SIZE];
	#pragma HLS array_partition variable = vbuffer6
	uint32_type vmask6_p[BLOCKRAM_SIZE];
	unitBRAMwidth_type vmask6_subp[BLOCKRAM_SIZE];
	#pragma HLS DATA_PACK variable = vmask6_subp
	unitBRAMwidth_type vmask6[BLOCKRAM_SIZE];
	#pragma HLS DATA_PACK variable = vmask6
	keyvalue_t globalstatsbuffer6[MAX_NUM_PARTITIONS];
	keyvalue_vbuffer_t vbuffer7[VDATA_PACKINGSIZE][BLOCKRAM_SIZE];
	#pragma HLS array_partition variable = vbuffer7
	uint32_type vmask7_p[BLOCKRAM_SIZE];
	unitBRAMwidth_type vmask7_subp[BLOCKRAM_SIZE];
	#pragma HLS DATA_PACK variable = vmask7_subp
	unitBRAMwidth_type vmask7[BLOCKRAM_SIZE];
	#pragma HLS DATA_PACK variable = vmask7
	keyvalue_t globalstatsbuffer7[MAX_NUM_PARTITIONS];
	travstate_t rtravstates[8];
	#pragma HLS ARRAY_PARTITION variable=rtravstates complete
	value_t buffer[DOUBLE_BLOCKRAM_SIZE]; // CRITICAL AUTOMATEME.
	globalparams_t globalparamsKs[8];
	globalparams_t globalparamsEs[MAX_NUM_EDGE_BANKS];
	
	unsigned int sourcestatsmarker = 0;
	unsigned int deststatsmarker = 0;
	unsigned int reducesourcestatsmarker = 0;
	unsigned int EN_PROCESS = OFF; unsigned int EN_PARTITION = OFF; unsigned int EN_REDUCE = OFF; unsigned int EN_PROCESSANDREDUCE = OFF; unsigned int EN_PROCESSANDPARTITION = OFF;
	globalposition_t globalposition;
	
	#ifdef _DEBUGMODE_CHECKS3
	mask_subp_is_zero = 0;
	mask_subp_is_not_zero = 0;
	for(unsigned int i=0; i<8; i++){ _stages[i] = 0; }
	for(unsigned int i=0; i<MAX_NUM_PARTITIONS; i++){ _chkpartitions[i] = 0; }
	#endif 
	
globalparamsKs[0] = getglobalparams(kvdram0);globalparamsKs[1] = getglobalparams(kvdram1);globalparamsKs[2] = getglobalparams(kvdram2);globalparamsKs[3] = getglobalparams(kvdram3);globalparamsKs[4] = getglobalparams(kvdram4);globalparamsKs[5] = getglobalparams(kvdram5);globalparamsKs[6] = getglobalparams(kvdram6);globalparamsKs[7] = getglobalparams(kvdram7); // CRITICAL NOTEME. POSSIBLE SOURCE OF ROUTING CONSTRAINTS?
	globalparams_t globalparamsK = globalparamsKs[0]; // getglobalparams(kvdram0); // CRITICAL NOTEME. POSSIBLE SOURCE OF ROUTING CONSTRAINTS?
	#ifdef EDGES_IN_SEPERATE_BUFFER_FROM_KVDRAM
	
	#else 
	globalparamsEs[0] = globalparamsK;
	#endif 
	globalparams_t globalparamsV = getglobalparams(vdram);
	
	unsigned int PARTITION_CHKPT[MAX_NUM_EDGE_BANKS][EDGESSTATSDRAMSZ];
	for(unsigned int u=0; u<EDGESSTATSDRAMSZ; u++){ // CRITICAL NEWCHANGE.
		#ifdef EDGES_IN_SEPERATE_BUFFER_FROM_KVDRAM
			#ifdef _WIDEWORD
	
			#else
	
			#endif
		#else 
			#ifdef _WIDEWORD
			PARTITION_CHKPT[0][u] = kvdram0[globalparamsK.BASEOFFSETKVS_EDGESSTATSDRAM + u].range(31, 0); 
			#else
			PARTITION_CHKPT[0][u] = kvdram0[globalparamsK.BASEOFFSETKVS_EDGESSTATSDRAM + u].data[0].key; 
			#endif
		#endif 
	}
	
	buffer_type vmaskbuffersz_kvs = (globalparamsK.SIZE_REDUCE * VDATA_PACKINGSIZE) / 512;
	batch_type vmaskoffset_kvs = 0; 
	unsigned int vreadoffset_kvs = 0;
	buffer_type reducebuffersz = globalparamsK.SIZE_REDUCE / 2;
	unsigned int GraphAlgo = globalparamsK.ALGORITHMINFO_GRAPHALGORITHMID;
	#ifdef ENABLERECURSIVEPARTITIONING
	for(unsigned int k=0; k<globalparamsK.ACTSPARAMS_TREEDEPTH-1; k++)
	#else 
	for(unsigned int k=0; k<globalparamsK.ACTSPARAMS_TREEDEPTH; k++)
	#endif 
	{
		reducesourcestatsmarker += (1 << (NUM_PARTITIONS_POW * k)); 
	}
	unsigned int FIRSTLOP = 0;
	unsigned int NUMLOPs = 0;
	unsigned int FIRSTSOURCEPARTITION = 0;
	unsigned int LASTSOURCEPARTITIONS = 0;
	batch_type num_source_partitions = 0; 

	for(unsigned int i=0; i<DOUBLE_BLOCKRAM_SIZE; i++){ buffer[i] = 0; } 
	if(GraphAlgo != PAGERANK){ loadmany8vmask_p(vdram, vmask0_p,vmask1_p,vmask2_p,vmask3_p,vmask4_p,vmask5_p,vmask6_p,vmask7_p, globalparamsV.BASEOFFSETKVS_VERTICESPARTITIONMASK, BLOCKRAM_SIZE); }
	if(GraphAlgo != PAGERANK){ resetkvstatvalues(vdram, globalparamsV); }
	unsigned int num_edge_banks = NUM_EDGE_BANKS;
	unsigned int it_size; if(num_edge_banks==0){ it_size = 1; } else { it_size = NUM_EDGE_BANKS; }
	unsigned int FIRST_BASEOFFSETKVS_STATSDRAM = globalparamsK.BASEOFFSETKVS_STATSDRAM;
	
	#ifdef EDGES_IN_SEPERATE_BUFFER_FROM_KVDRAM
	copyvs(vdram, vbuffer0, globalparamsV);
	#endif
	#ifdef _WIDEWORD
	unsigned int hybridmode = vdram[globalparamsV.BASEOFFSETKVS_OTHERINFOS + globalparamsV.ALGORITHMINFO_GRAPHITERATIONID].range(31, 0);
	#else 
	unsigned int hybridmode = vdram[globalparamsV.BASEOFFSETKVS_OTHERINFOS + globalparamsV.ALGORITHMINFO_GRAPHITERATIONID].data[0].key;
	#endif 
	
	unsigned int num_stages = 3;
	if(globalparamsV.ENABLE_PROCESSCOMMAND == ON){ num_stages = 1; }
	if(globalparamsV.ENABLE_PARTITIONCOMMAND == ON){ num_stages = 2; }
	if(globalparamsV.ENABLE_APPLYUPDATESCOMMAND == ON){ num_stages = 3; }
	
	TOPKERNEL8_BASELOOP1: for(unsigned int edgebankID=0; edgebankID<it_size; edgebankID++){
		globalposition.edgebankID = edgebankID;
		#ifdef EDGES_IN_SEPERATE_BUFFER_FROM_KVDRAM
		for(unsigned int i=0; i<globalposition.edgebankID; i++){ globalparamsK.BASEOFFSETKVS_STATSDRAM += ((globalparamsK.SIZE_KVSTATSDRAM / VECTOR_SIZE) / NUM_EDGE_BANKS); } // SHIFT.
		#endif 
		TOPKERNEL8_BASELOOP1B: for(unsigned int v_chunkid=0; v_chunkid<globalparamsK.ACTSPARAMS_NUMEDGECHUNKSINABUFFER; v_chunkid++){
			globalposition.v_chunkid = v_chunkid;
			#ifdef EDGES_IN_SEPERATE_BUFFER_FROM_KVDRAM
			globalparamsK.VARS_WORKBATCH = globalposition.v_chunkid; // SHIFT.
			#endif 
			TOPKERNEL8_BASELOOP1C: for(step_type stage=0; stage<num_stages; stage++){
			
				EN_PROCESS = OFF; EN_PARTITION = OFF; EN_REDUCE = OFF; EN_PROCESSANDREDUCE = OFF; EN_PROCESSANDPARTITION = OFF;
				if(stage==0){ EN_PROCESS = ON; EN_PROCESSANDREDUCE = ON; EN_PROCESSANDPARTITION = ON;  } 
				else if(stage==1){ EN_PARTITION = ON; EN_PROCESSANDPARTITION = ON;  } 
				else { EN_REDUCE = ON; EN_PROCESSANDREDUCE = ON; }
				globalposition.EN_PROCESS = EN_PROCESS; globalposition.EN_PARTITION = EN_PARTITION; globalposition.EN_REDUCE = EN_REDUCE; globalposition.EN_PROCESSANDPARTITION = EN_PROCESSANDPARTITION; globalposition.EN_PROCESSANDREDUCE = EN_PROCESSANDREDUCE;
				
				if(stage==0){ sourcestatsmarker = 0; deststatsmarker = 1; } 
				else if(stage==1){ sourcestatsmarker = 1; deststatsmarker = 1 + NUM_PARTITIONS; } 
				else { sourcestatsmarker = reducesourcestatsmarker; deststatsmarker = NAp; }
				
				if(stage==0){ FIRSTLOP = 1; NUMLOPs = 1; } // FIXME. CHANGE FOR ~ENABLERECURSIVEPARTITIONING
				else if(stage==1){ FIRSTLOP = globalparamsK.ACTSPARAMS_BEGINLOP + 1; NUMLOPs = globalparamsK.ACTSPARAMS_NUMLOPS-2;  } 
				else{ FIRSTLOP = globalparamsK.ACTSPARAMS_TREEDEPTH; NUMLOPs = 1; }
				
				vmaskoffset_kvs = 0; 
				vreadoffset_kvs = 0;
				
				TOPKERNEL8_BASELOOP1D: for(step_type currentLOP=FIRSTLOP; currentLOP<(FIRSTLOP + NUMLOPs); currentLOP+=1){
					#ifdef ENABLERECURSIVEPARTITIONING
					if(stage==0){ num_source_partitions = get_num_source_partitions(globalparamsK.ACTSPARAMS_TREEDEPTH); }
					else if(stage==1){ num_source_partitions = get_num_source_partitions(currentLOP);  }
					else { num_source_partitions = get_num_source_partitions(globalparamsK.ACTSPARAMS_TREEDEPTH);  }
					#else
					NOT IMPLEMENTED.
					#endif
					
					if(stage==0){ FIRSTSOURCEPARTITION = PARTITION_CHKPT[edgebankID][v_chunkid]; LASTSOURCEPARTITIONS = PARTITION_CHKPT[edgebankID][v_chunkid+1]; } 
					else if(stage==1){ FIRSTSOURCEPARTITION = 0; LASTSOURCEPARTITIONS = num_source_partitions;  } 
					else{ FIRSTSOURCEPARTITION = 0; LASTSOURCEPARTITIONS = num_source_partitions; }
					
					if(globalposition.EN_PROCESS == ON){ vmaskoffset_kvs = PARTITION_CHKPT[edgebankID][v_chunkid] * (vmaskbuffersz_kvs); } // NEWCHANGE.
					batch_type vreadoffset_kvs = 0;
					
					TOPKERNEL8_BASELOOP1E: for(batch_type source_partition=FIRSTSOURCEPARTITION; source_partition<LASTSOURCEPARTITIONS; source_partition+=1){
						#ifdef _DEBUGMODE_KERNELPRINTS2
						actsutilityobj->print3("### TOPKERNEL8_BASELOOP1C:: source_partition", "currentLOP", "NAp", source_partition, currentLOP, NAp); 							
						#endif
						
						globalposition.stage = stage; 
						globalposition.laststage = 2; 
						globalposition.currentLOP = currentLOP; 
						globalposition.lastLOP = FIRSTLOP + NUMLOPs - 1; 
						globalposition.source_partition = source_partition;
						globalposition.first_source_partition = FIRSTSOURCEPARTITION;
						globalposition.last_source_partition = LASTSOURCEPARTITIONS - 1;
						globalposition.num_source_partitions = LASTSOURCEPARTITIONS - FIRSTSOURCEPARTITION; // FIXME.
						globalposition.sourcestatsmarker = sourcestatsmarker; 
						globalposition.deststatsmarker = deststatsmarker; 
						if(globalposition.v_chunkid==0 && globalposition.stage==0 && globalposition.currentLOP==1 && globalposition.source_partition==0){ globalposition.first=ON; } else { globalposition.first=OFF; }
						if(globalposition.v_chunkid==globalparamsK.ACTSPARAMS_NUMEDGECHUNKSINABUFFER-1 && globalposition.stage==globalposition.laststage && globalposition.currentLOP==globalposition.lastLOP && globalposition.source_partition==globalposition.last_source_partition){ globalposition.last=ON; } else { globalposition.last=OFF; }
						
						bool_type enableprocess = ON;
						if(globalposition.EN_PROCESS == ON){
							if(GraphAlgo != PAGERANK){ if(vmask0_p[source_partition] > 0){ enableprocess = ON; } else { enableprocess = OFF; }}
						}
						
						bool_type enablereduce = OFF; 
						unsigned int ntravszs = 0;
						if(globalposition.EN_REDUCE == ON){
							rtravstates[0] = gettravstate(globalposition.EN_REDUCE, kvdram0, globalparamsK, currentLOP, sourcestatsmarker); // CRITICAL NOTEME. POSSIBLE SOURCE OF ROUTING CONSTRAINTS?
							rtravstates[1] = gettravstate(globalposition.EN_REDUCE, kvdram1, globalparamsK, currentLOP, sourcestatsmarker); // CRITICAL NOTEME. POSSIBLE SOURCE OF ROUTING CONSTRAINTS?
							rtravstates[2] = gettravstate(globalposition.EN_REDUCE, kvdram2, globalparamsK, currentLOP, sourcestatsmarker); // CRITICAL NOTEME. POSSIBLE SOURCE OF ROUTING CONSTRAINTS?
							rtravstates[3] = gettravstate(globalposition.EN_REDUCE, kvdram3, globalparamsK, currentLOP, sourcestatsmarker); // CRITICAL NOTEME. POSSIBLE SOURCE OF ROUTING CONSTRAINTS?
							rtravstates[4] = gettravstate(globalposition.EN_REDUCE, kvdram4, globalparamsK, currentLOP, sourcestatsmarker); // CRITICAL NOTEME. POSSIBLE SOURCE OF ROUTING CONSTRAINTS?
							rtravstates[5] = gettravstate(globalposition.EN_REDUCE, kvdram5, globalparamsK, currentLOP, sourcestatsmarker); // CRITICAL NOTEME. POSSIBLE SOURCE OF ROUTING CONSTRAINTS?
							rtravstates[6] = gettravstate(globalposition.EN_REDUCE, kvdram6, globalparamsK, currentLOP, sourcestatsmarker); // CRITICAL NOTEME. POSSIBLE SOURCE OF ROUTING CONSTRAINTS?
							rtravstates[7] = gettravstate(globalposition.EN_REDUCE, kvdram7, globalparamsK, currentLOP, sourcestatsmarker); // CRITICAL NOTEME. POSSIBLE SOURCE OF ROUTING CONSTRAINTS?
							for(unsigned int i = 0; i < 8; i++){ ntravszs += rtravstates[i].size_kvs; }
							if(ntravszs > 0){ enablereduce = ON; } else { enablereduce = OFF; }
						}
						
						bool_type enable_loadmasks = OFF; 
						if(globalposition.EN_PROCESS == ON && enableprocess == ON){ enable_loadmasks = ON; } else { enable_loadmasks = OFF; }
						
						bool_type enable_readandreplicatevdata = OFF; 
						if((globalposition.EN_PROCESS == ON && enableprocess == ON) || (globalposition.EN_REDUCE == ON && enablereduce == ON)){ enable_readandreplicatevdata = ON; } else { enable_readandreplicatevdata = OFF; }
		
						// read vertices
						loadmany8vmasks(enable_loadmasks, vdram, vmask0,vmask1,vmask2,vmask3,vmask4,vmask5,vmask6,vmask7, vbuffer0, globalparamsV.BASEOFFSETKVS_VERTICESDATAMASK + vmaskoffset_kvs, vmaskbuffersz_kvs, globalparamsV); 
						#ifdef ENABLE_SUBVMASKING
						loadmany8vmasks_subp(enable_loadmasks, vmask0, vmask0_subp,vmask1_subp,vmask2_subp,vmask3_subp,vmask4_subp,vmask5_subp,vmask6_subp,vmask7_subp, vmaskbuffersz_kvs); 
						#endif
						readandreplicate8vdata(enable_readandreplicatevdata, vdram, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs, vbuffer0,vbuffer1,vbuffer2,vbuffer3,vbuffer4,vbuffer5,vbuffer6,vbuffer7, 0, 0, reducebuffersz, globalparamsV); 
						readandreplicate8vdata(enable_readandreplicatevdata, vdram, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs + reducebuffersz, vbuffer0,vbuffer1,vbuffer2,vbuffer3,vbuffer4,vbuffer5,vbuffer6,vbuffer7, 8, 0, reducebuffersz, globalparamsV); 
						
						// proc 
						topkernelproc_embedded(enableprocess, ON, enablereduce,  kvdram0, vbuffer0, vmask0_p, vmask0_subp, vmask0, globalstatsbuffer0, globalposition, hybridmode);	
						topkernelproc_embedded(enableprocess, ON, enablereduce,  kvdram1, vbuffer1, vmask1_p, vmask1_subp, vmask1, globalstatsbuffer1, globalposition, hybridmode);	
						topkernelproc_embedded(enableprocess, ON, enablereduce,  kvdram2, vbuffer2, vmask2_p, vmask2_subp, vmask2, globalstatsbuffer2, globalposition, hybridmode);	
						topkernelproc_embedded(enableprocess, ON, enablereduce,  kvdram3, vbuffer3, vmask3_p, vmask3_subp, vmask3, globalstatsbuffer3, globalposition, hybridmode);	
						topkernelproc_embedded(enableprocess, ON, enablereduce,  kvdram4, vbuffer4, vmask4_p, vmask4_subp, vmask4, globalstatsbuffer4, globalposition, hybridmode);	
						topkernelproc_embedded(enableprocess, ON, enablereduce,  kvdram5, vbuffer5, vmask5_p, vmask5_subp, vmask5, globalstatsbuffer5, globalposition, hybridmode);	
						topkernelproc_embedded(enableprocess, ON, enablereduce,  kvdram6, vbuffer6, vmask6_p, vmask6_subp, vmask6, globalstatsbuffer6, globalposition, hybridmode);	
						topkernelproc_embedded(enableprocess, ON, enablereduce,  kvdram7, vbuffer7, vmask7_p, vmask7_subp, vmask7, globalstatsbuffer7, globalposition, hybridmode);	
						
						// merge 
						if(globalposition.EN_REDUCE == ON && enablereduce == ON){ merge8andsavevdata(ON, vdram, vbuffer0,vbuffer1,vbuffer2,vbuffer3,vbuffer4,vbuffer5,vbuffer6,vbuffer7, 0, 0, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs); }
						if(globalposition.EN_REDUCE == ON && enablereduce == ON){ merge8andsavevdata(ON, vdram, vbuffer0,vbuffer1,vbuffer2,vbuffer3,vbuffer4,vbuffer5,vbuffer6,vbuffer7, 8, 0, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs + reducebuffersz); }
						
						// update stats
						if(globalposition.EN_REDUCE == ON){ 
							if(enablereduce == ON){ buffer[source_partition] += 64; } 
							else { buffer[source_partition] += 0; }
						}
						
						// increments
						if(globalposition.EN_PARTITION == ON || globalposition.EN_REDUCE == ON){ sourcestatsmarker += 1; }
						if(globalposition.EN_PARTITION == ON){ deststatsmarker += NUM_PARTITIONS; }
						if(globalposition.EN_PROCESS == ON){ vmaskoffset_kvs += vmaskbuffersz_kvs; }
						if(globalposition.EN_PROCESS == ON || globalposition.EN_REDUCE == ON){ vreadoffset_kvs += reducebuffersz * 2; }
					}
				}
			} // stage
		} // v_chunkid
	} // edgebankID
	
	commitkvstats(vdram, buffer, globalparamsV, reducesourcestatsmarker);
	
	#ifdef _WIDEWORD
	vdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_ALGORITHMINFO_GRAPHITERATIONID].range(31, 0) = globalparamsV.ALGORITHMINFO_GRAPHITERATIONID + 1; // CRITICAL NOTEME: Graph Iteration is incremented here
	#else
	vdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_ALGORITHMINFO_GRAPHITERATIONID].data[0].key = globalparamsV.ALGORITHMINFO_GRAPHITERATIONID + 1;
	#endif 
	
	#if defined(_DEBUGMODE_KERNELPRINTS2) & defined(ENABLE_SUBVMASKING)
	cout<<"topkernelP8:: subpmask status: mask_subp_is_zero: "<<mask_subp_is_zero<<", mask_subp_is_not_zero: "<<mask_subp_is_not_zero<<endl;
	#endif 
	#if defined(_DEBUGMODE_KERNELPRINTS2) & defined(DATA_SENSITIVE_ACTS)
	for(unsigned int i=0; i<MAX_NUM_PARTITIONS; i++){ cout<<"topkernelP8:: subpmask status: _chkpartitions["<<i<<"]: "<<_chkpartitions[i]<<endl;; }
	#endif 
	return;
}
}
extern "C" { // #ifdef ACTS_1by1by1byN (means everything packed in 1 compute unit)
void 
	#ifdef SW 
	actsproc:: 
	#endif
topkernelP9(
	uint512_dt * kvdram0,
	uint512_dt * kvdram1,
	uint512_dt * kvdram2,
	uint512_dt * kvdram3,
	uint512_dt * kvdram4,
	uint512_dt * kvdram5,
	uint512_dt * kvdram6,
	uint512_dt * kvdram7,
	uint512_dt * kvdram8,
	uint512_dt * vdram
	){
#ifdef EDGES_IN_SEPERATE_BUFFER_FROM_KVDRAM
	#pragma HLS INTERFACE m_axi port = edges00 offset = slave bundle = gmem0
	#pragma HLS INTERFACE m_axi port = kvdram0 offset = slave bundle = gmem1
	#pragma HLS INTERFACE m_axi port = edges10 offset = slave bundle = gmem2
	#pragma HLS INTERFACE m_axi port = kvdram1 offset = slave bundle = gmem3
	#pragma HLS INTERFACE m_axi port = edges20 offset = slave bundle = gmem4
	#pragma HLS INTERFACE m_axi port = kvdram2 offset = slave bundle = gmem5
	#pragma HLS INTERFACE m_axi port = edges30 offset = slave bundle = gmem6
	#pragma HLS INTERFACE m_axi port = kvdram3 offset = slave bundle = gmem7
	#pragma HLS INTERFACE m_axi port = edges40 offset = slave bundle = gmem8
	#pragma HLS INTERFACE m_axi port = kvdram4 offset = slave bundle = gmem9
	#pragma HLS INTERFACE m_axi port = edges50 offset = slave bundle = gmem10
	#pragma HLS INTERFACE m_axi port = kvdram5 offset = slave bundle = gmem11
	#pragma HLS INTERFACE m_axi port = edges60 offset = slave bundle = gmem12
	#pragma HLS INTERFACE m_axi port = kvdram6 offset = slave bundle = gmem13
	#pragma HLS INTERFACE m_axi port = edges70 offset = slave bundle = gmem14
	#pragma HLS INTERFACE m_axi port = kvdram7 offset = slave bundle = gmem15
	#pragma HLS INTERFACE m_axi port = edges80 offset = slave bundle = gmem16
	#pragma HLS INTERFACE m_axi port = kvdram8 offset = slave bundle = gmem17
	#pragma HLS INTERFACE m_axi port = vdram offset = slave bundle = gmem18
#else 
	#pragma HLS INTERFACE m_axi port = kvdram0 offset = slave bundle = gmem0
	#pragma HLS INTERFACE m_axi port = kvdram1 offset = slave bundle = gmem1
	#pragma HLS INTERFACE m_axi port = kvdram2 offset = slave bundle = gmem2
	#pragma HLS INTERFACE m_axi port = kvdram3 offset = slave bundle = gmem3
	#pragma HLS INTERFACE m_axi port = kvdram4 offset = slave bundle = gmem4
	#pragma HLS INTERFACE m_axi port = kvdram5 offset = slave bundle = gmem5
	#pragma HLS INTERFACE m_axi port = kvdram6 offset = slave bundle = gmem6
	#pragma HLS INTERFACE m_axi port = kvdram7 offset = slave bundle = gmem7
	#pragma HLS INTERFACE m_axi port = kvdram8 offset = slave bundle = gmem8
	#pragma HLS INTERFACE m_axi port = vdram offset = slave bundle = gmem9
#endif 
//

#ifdef EDGES_IN_SEPERATE_BUFFER_FROM_KVDRAM
#pragma HLS INTERFACE s_axilite port = edges00 bundle = control
#pragma HLS INTERFACE s_axilite port = edges10 bundle = control
#pragma HLS INTERFACE s_axilite port = edges20 bundle = control
#pragma HLS INTERFACE s_axilite port = edges30 bundle = control
#pragma HLS INTERFACE s_axilite port = edges40 bundle = control
#pragma HLS INTERFACE s_axilite port = edges50 bundle = control
#pragma HLS INTERFACE s_axilite port = edges60 bundle = control
#pragma HLS INTERFACE s_axilite port = edges70 bundle = control
#pragma HLS INTERFACE s_axilite port = edges80 bundle = control
	
#endif 
#pragma HLS INTERFACE s_axilite port = kvdram0 bundle = control
#pragma HLS INTERFACE s_axilite port = kvdram1 bundle = control
#pragma HLS INTERFACE s_axilite port = kvdram2 bundle = control
#pragma HLS INTERFACE s_axilite port = kvdram3 bundle = control
#pragma HLS INTERFACE s_axilite port = kvdram4 bundle = control
#pragma HLS INTERFACE s_axilite port = kvdram5 bundle = control
#pragma HLS INTERFACE s_axilite port = kvdram6 bundle = control
#pragma HLS INTERFACE s_axilite port = kvdram7 bundle = control
#pragma HLS INTERFACE s_axilite port = kvdram8 bundle = control
	

#pragma HLS INTERFACE s_axilite port = vdram bundle = control

#pragma HLS INTERFACE s_axilite port=return bundle=control

#ifdef EDGES_IN_SEPERATE_BUFFER_FROM_KVDRAM
#pragma HLS DATA_PACK variable = edges00
#pragma HLS DATA_PACK variable = edges10
#pragma HLS DATA_PACK variable = edges20
#pragma HLS DATA_PACK variable = edges30
#pragma HLS DATA_PACK variable = edges40
#pragma HLS DATA_PACK variable = edges50
#pragma HLS DATA_PACK variable = edges60
#pragma HLS DATA_PACK variable = edges70
#pragma HLS DATA_PACK variable = edges80
#endif 
#pragma HLS DATA_PACK variable = kvdram0
#pragma HLS DATA_PACK variable = kvdram1
#pragma HLS DATA_PACK variable = kvdram2
#pragma HLS DATA_PACK variable = kvdram3
#pragma HLS DATA_PACK variable = kvdram4
#pragma HLS DATA_PACK variable = kvdram5
#pragma HLS DATA_PACK variable = kvdram6
#pragma HLS DATA_PACK variable = kvdram7
#pragma HLS DATA_PACK variable = kvdram8
#pragma HLS DATA_PACK variable = vdram

	#if defined(_DEBUGMODE_KERNELPRINTS2) & defined(ALLVERTEXISACTIVE_ALGORITHM)
	cout<<">>> ====================== Light weight ACTS (PR & SYNC) Launched... ====================== "<<endl; 
	#endif
	
	keyvalue_vbuffer_t vbuffer0[VDATA_PACKINGSIZE][BLOCKRAM_SIZE];
	#pragma HLS array_partition variable = vbuffer0
	uint32_type vmask0_p[BLOCKRAM_SIZE];
	unitBRAMwidth_type vmask0_subp[BLOCKRAM_SIZE];
	#pragma HLS DATA_PACK variable = vmask0_subp
	unitBRAMwidth_type vmask0[BLOCKRAM_SIZE];
	#pragma HLS DATA_PACK variable = vmask0
	keyvalue_t globalstatsbuffer0[MAX_NUM_PARTITIONS];
	keyvalue_vbuffer_t vbuffer1[VDATA_PACKINGSIZE][BLOCKRAM_SIZE];
	#pragma HLS array_partition variable = vbuffer1
	uint32_type vmask1_p[BLOCKRAM_SIZE];
	unitBRAMwidth_type vmask1_subp[BLOCKRAM_SIZE];
	#pragma HLS DATA_PACK variable = vmask1_subp
	unitBRAMwidth_type vmask1[BLOCKRAM_SIZE];
	#pragma HLS DATA_PACK variable = vmask1
	keyvalue_t globalstatsbuffer1[MAX_NUM_PARTITIONS];
	keyvalue_vbuffer_t vbuffer2[VDATA_PACKINGSIZE][BLOCKRAM_SIZE];
	#pragma HLS array_partition variable = vbuffer2
	uint32_type vmask2_p[BLOCKRAM_SIZE];
	unitBRAMwidth_type vmask2_subp[BLOCKRAM_SIZE];
	#pragma HLS DATA_PACK variable = vmask2_subp
	unitBRAMwidth_type vmask2[BLOCKRAM_SIZE];
	#pragma HLS DATA_PACK variable = vmask2
	keyvalue_t globalstatsbuffer2[MAX_NUM_PARTITIONS];
	keyvalue_vbuffer_t vbuffer3[VDATA_PACKINGSIZE][BLOCKRAM_SIZE];
	#pragma HLS array_partition variable = vbuffer3
	uint32_type vmask3_p[BLOCKRAM_SIZE];
	unitBRAMwidth_type vmask3_subp[BLOCKRAM_SIZE];
	#pragma HLS DATA_PACK variable = vmask3_subp
	unitBRAMwidth_type vmask3[BLOCKRAM_SIZE];
	#pragma HLS DATA_PACK variable = vmask3
	keyvalue_t globalstatsbuffer3[MAX_NUM_PARTITIONS];
	keyvalue_vbuffer_t vbuffer4[VDATA_PACKINGSIZE][BLOCKRAM_SIZE];
	#pragma HLS array_partition variable = vbuffer4
	uint32_type vmask4_p[BLOCKRAM_SIZE];
	unitBRAMwidth_type vmask4_subp[BLOCKRAM_SIZE];
	#pragma HLS DATA_PACK variable = vmask4_subp
	unitBRAMwidth_type vmask4[BLOCKRAM_SIZE];
	#pragma HLS DATA_PACK variable = vmask4
	keyvalue_t globalstatsbuffer4[MAX_NUM_PARTITIONS];
	keyvalue_vbuffer_t vbuffer5[VDATA_PACKINGSIZE][BLOCKRAM_SIZE];
	#pragma HLS array_partition variable = vbuffer5
	uint32_type vmask5_p[BLOCKRAM_SIZE];
	unitBRAMwidth_type vmask5_subp[BLOCKRAM_SIZE];
	#pragma HLS DATA_PACK variable = vmask5_subp
	unitBRAMwidth_type vmask5[BLOCKRAM_SIZE];
	#pragma HLS DATA_PACK variable = vmask5
	keyvalue_t globalstatsbuffer5[MAX_NUM_PARTITIONS];
	keyvalue_vbuffer_t vbuffer6[VDATA_PACKINGSIZE][BLOCKRAM_SIZE];
	#pragma HLS array_partition variable = vbuffer6
	uint32_type vmask6_p[BLOCKRAM_SIZE];
	unitBRAMwidth_type vmask6_subp[BLOCKRAM_SIZE];
	#pragma HLS DATA_PACK variable = vmask6_subp
	unitBRAMwidth_type vmask6[BLOCKRAM_SIZE];
	#pragma HLS DATA_PACK variable = vmask6
	keyvalue_t globalstatsbuffer6[MAX_NUM_PARTITIONS];
	keyvalue_vbuffer_t vbuffer7[VDATA_PACKINGSIZE][BLOCKRAM_SIZE];
	#pragma HLS array_partition variable = vbuffer7
	uint32_type vmask7_p[BLOCKRAM_SIZE];
	unitBRAMwidth_type vmask7_subp[BLOCKRAM_SIZE];
	#pragma HLS DATA_PACK variable = vmask7_subp
	unitBRAMwidth_type vmask7[BLOCKRAM_SIZE];
	#pragma HLS DATA_PACK variable = vmask7
	keyvalue_t globalstatsbuffer7[MAX_NUM_PARTITIONS];
	keyvalue_vbuffer_t vbuffer8[VDATA_PACKINGSIZE][BLOCKRAM_SIZE];
	#pragma HLS array_partition variable = vbuffer8
	uint32_type vmask8_p[BLOCKRAM_SIZE];
	unitBRAMwidth_type vmask8_subp[BLOCKRAM_SIZE];
	#pragma HLS DATA_PACK variable = vmask8_subp
	unitBRAMwidth_type vmask8[BLOCKRAM_SIZE];
	#pragma HLS DATA_PACK variable = vmask8
	keyvalue_t globalstatsbuffer8[MAX_NUM_PARTITIONS];
	travstate_t rtravstates[9];
	#pragma HLS ARRAY_PARTITION variable=rtravstates complete
	value_t buffer[DOUBLE_BLOCKRAM_SIZE]; // CRITICAL AUTOMATEME.
	globalparams_t globalparamsKs[9];
	globalparams_t globalparamsEs[MAX_NUM_EDGE_BANKS];
	
	unsigned int sourcestatsmarker = 0;
	unsigned int deststatsmarker = 0;
	unsigned int reducesourcestatsmarker = 0;
	unsigned int EN_PROCESS = OFF; unsigned int EN_PARTITION = OFF; unsigned int EN_REDUCE = OFF; unsigned int EN_PROCESSANDREDUCE = OFF; unsigned int EN_PROCESSANDPARTITION = OFF;
	globalposition_t globalposition;
	
	#ifdef _DEBUGMODE_CHECKS3
	mask_subp_is_zero = 0;
	mask_subp_is_not_zero = 0;
	for(unsigned int i=0; i<8; i++){ _stages[i] = 0; }
	for(unsigned int i=0; i<MAX_NUM_PARTITIONS; i++){ _chkpartitions[i] = 0; }
	#endif 
	
globalparamsKs[0] = getglobalparams(kvdram0);globalparamsKs[1] = getglobalparams(kvdram1);globalparamsKs[2] = getglobalparams(kvdram2);globalparamsKs[3] = getglobalparams(kvdram3);globalparamsKs[4] = getglobalparams(kvdram4);globalparamsKs[5] = getglobalparams(kvdram5);globalparamsKs[6] = getglobalparams(kvdram6);globalparamsKs[7] = getglobalparams(kvdram7);globalparamsKs[8] = getglobalparams(kvdram8); // CRITICAL NOTEME. POSSIBLE SOURCE OF ROUTING CONSTRAINTS?
	globalparams_t globalparamsK = globalparamsKs[0]; // getglobalparams(kvdram0); // CRITICAL NOTEME. POSSIBLE SOURCE OF ROUTING CONSTRAINTS?
	#ifdef EDGES_IN_SEPERATE_BUFFER_FROM_KVDRAM
	
	#else 
	globalparamsEs[0] = globalparamsK;
	#endif 
	globalparams_t globalparamsV = getglobalparams(vdram);
	
	unsigned int PARTITION_CHKPT[MAX_NUM_EDGE_BANKS][EDGESSTATSDRAMSZ];
	for(unsigned int u=0; u<EDGESSTATSDRAMSZ; u++){ // CRITICAL NEWCHANGE.
		#ifdef EDGES_IN_SEPERATE_BUFFER_FROM_KVDRAM
			#ifdef _WIDEWORD
	
			#else
	
			#endif
		#else 
			#ifdef _WIDEWORD
			PARTITION_CHKPT[0][u] = kvdram0[globalparamsK.BASEOFFSETKVS_EDGESSTATSDRAM + u].range(31, 0); 
			#else
			PARTITION_CHKPT[0][u] = kvdram0[globalparamsK.BASEOFFSETKVS_EDGESSTATSDRAM + u].data[0].key; 
			#endif
		#endif 
	}
	
	buffer_type vmaskbuffersz_kvs = (globalparamsK.SIZE_REDUCE * VDATA_PACKINGSIZE) / 512;
	batch_type vmaskoffset_kvs = 0; 
	unsigned int vreadoffset_kvs = 0;
	buffer_type reducebuffersz = globalparamsK.SIZE_REDUCE / 2;
	unsigned int GraphAlgo = globalparamsK.ALGORITHMINFO_GRAPHALGORITHMID;
	#ifdef ENABLERECURSIVEPARTITIONING
	for(unsigned int k=0; k<globalparamsK.ACTSPARAMS_TREEDEPTH-1; k++)
	#else 
	for(unsigned int k=0; k<globalparamsK.ACTSPARAMS_TREEDEPTH; k++)
	#endif 
	{
		reducesourcestatsmarker += (1 << (NUM_PARTITIONS_POW * k)); 
	}
	unsigned int FIRSTLOP = 0;
	unsigned int NUMLOPs = 0;
	unsigned int FIRSTSOURCEPARTITION = 0;
	unsigned int LASTSOURCEPARTITIONS = 0;
	batch_type num_source_partitions = 0; 

	for(unsigned int i=0; i<DOUBLE_BLOCKRAM_SIZE; i++){ buffer[i] = 0; } 
	if(GraphAlgo != PAGERANK){ loadmany9vmask_p(vdram, vmask0_p,vmask1_p,vmask2_p,vmask3_p,vmask4_p,vmask5_p,vmask6_p,vmask7_p,vmask8_p, globalparamsV.BASEOFFSETKVS_VERTICESPARTITIONMASK, BLOCKRAM_SIZE); }
	if(GraphAlgo != PAGERANK){ resetkvstatvalues(vdram, globalparamsV); }
	unsigned int num_edge_banks = NUM_EDGE_BANKS;
	unsigned int it_size; if(num_edge_banks==0){ it_size = 1; } else { it_size = NUM_EDGE_BANKS; }
	unsigned int FIRST_BASEOFFSETKVS_STATSDRAM = globalparamsK.BASEOFFSETKVS_STATSDRAM;
	
	#ifdef EDGES_IN_SEPERATE_BUFFER_FROM_KVDRAM
	copyvs(vdram, vbuffer0, globalparamsV);
	#endif
	#ifdef _WIDEWORD
	unsigned int hybridmode = vdram[globalparamsV.BASEOFFSETKVS_OTHERINFOS + globalparamsV.ALGORITHMINFO_GRAPHITERATIONID].range(31, 0);
	#else 
	unsigned int hybridmode = vdram[globalparamsV.BASEOFFSETKVS_OTHERINFOS + globalparamsV.ALGORITHMINFO_GRAPHITERATIONID].data[0].key;
	#endif 
	
	unsigned int num_stages = 3;
	if(globalparamsV.ENABLE_PROCESSCOMMAND == ON){ num_stages = 1; }
	if(globalparamsV.ENABLE_PARTITIONCOMMAND == ON){ num_stages = 2; }
	if(globalparamsV.ENABLE_APPLYUPDATESCOMMAND == ON){ num_stages = 3; }
	
	TOPKERNEL9_BASELOOP1: for(unsigned int edgebankID=0; edgebankID<it_size; edgebankID++){
		globalposition.edgebankID = edgebankID;
		#ifdef EDGES_IN_SEPERATE_BUFFER_FROM_KVDRAM
		for(unsigned int i=0; i<globalposition.edgebankID; i++){ globalparamsK.BASEOFFSETKVS_STATSDRAM += ((globalparamsK.SIZE_KVSTATSDRAM / VECTOR_SIZE) / NUM_EDGE_BANKS); } // SHIFT.
		#endif 
		TOPKERNEL9_BASELOOP1B: for(unsigned int v_chunkid=0; v_chunkid<globalparamsK.ACTSPARAMS_NUMEDGECHUNKSINABUFFER; v_chunkid++){
			globalposition.v_chunkid = v_chunkid;
			#ifdef EDGES_IN_SEPERATE_BUFFER_FROM_KVDRAM
			globalparamsK.VARS_WORKBATCH = globalposition.v_chunkid; // SHIFT.
			#endif 
			TOPKERNEL9_BASELOOP1C: for(step_type stage=0; stage<num_stages; stage++){
			
				EN_PROCESS = OFF; EN_PARTITION = OFF; EN_REDUCE = OFF; EN_PROCESSANDREDUCE = OFF; EN_PROCESSANDPARTITION = OFF;
				if(stage==0){ EN_PROCESS = ON; EN_PROCESSANDREDUCE = ON; EN_PROCESSANDPARTITION = ON;  } 
				else if(stage==1){ EN_PARTITION = ON; EN_PROCESSANDPARTITION = ON;  } 
				else { EN_REDUCE = ON; EN_PROCESSANDREDUCE = ON; }
				globalposition.EN_PROCESS = EN_PROCESS; globalposition.EN_PARTITION = EN_PARTITION; globalposition.EN_REDUCE = EN_REDUCE; globalposition.EN_PROCESSANDPARTITION = EN_PROCESSANDPARTITION; globalposition.EN_PROCESSANDREDUCE = EN_PROCESSANDREDUCE;
				
				if(stage==0){ sourcestatsmarker = 0; deststatsmarker = 1; } 
				else if(stage==1){ sourcestatsmarker = 1; deststatsmarker = 1 + NUM_PARTITIONS; } 
				else { sourcestatsmarker = reducesourcestatsmarker; deststatsmarker = NAp; }
				
				if(stage==0){ FIRSTLOP = 1; NUMLOPs = 1; } // FIXME. CHANGE FOR ~ENABLERECURSIVEPARTITIONING
				else if(stage==1){ FIRSTLOP = globalparamsK.ACTSPARAMS_BEGINLOP + 1; NUMLOPs = globalparamsK.ACTSPARAMS_NUMLOPS-2;  } 
				else{ FIRSTLOP = globalparamsK.ACTSPARAMS_TREEDEPTH; NUMLOPs = 1; }
				
				vmaskoffset_kvs = 0; 
				vreadoffset_kvs = 0;
				
				TOPKERNEL9_BASELOOP1D: for(step_type currentLOP=FIRSTLOP; currentLOP<(FIRSTLOP + NUMLOPs); currentLOP+=1){
					#ifdef ENABLERECURSIVEPARTITIONING
					if(stage==0){ num_source_partitions = get_num_source_partitions(globalparamsK.ACTSPARAMS_TREEDEPTH); }
					else if(stage==1){ num_source_partitions = get_num_source_partitions(currentLOP);  }
					else { num_source_partitions = get_num_source_partitions(globalparamsK.ACTSPARAMS_TREEDEPTH);  }
					#else
					NOT IMPLEMENTED.
					#endif
					
					if(stage==0){ FIRSTSOURCEPARTITION = PARTITION_CHKPT[edgebankID][v_chunkid]; LASTSOURCEPARTITIONS = PARTITION_CHKPT[edgebankID][v_chunkid+1]; } 
					else if(stage==1){ FIRSTSOURCEPARTITION = 0; LASTSOURCEPARTITIONS = num_source_partitions;  } 
					else{ FIRSTSOURCEPARTITION = 0; LASTSOURCEPARTITIONS = num_source_partitions; }
					
					if(globalposition.EN_PROCESS == ON){ vmaskoffset_kvs = PARTITION_CHKPT[edgebankID][v_chunkid] * (vmaskbuffersz_kvs); } // NEWCHANGE.
					batch_type vreadoffset_kvs = 0;
					
					TOPKERNEL9_BASELOOP1E: for(batch_type source_partition=FIRSTSOURCEPARTITION; source_partition<LASTSOURCEPARTITIONS; source_partition+=1){
						#ifdef _DEBUGMODE_KERNELPRINTS2
						actsutilityobj->print3("### TOPKERNEL9_BASELOOP1C:: source_partition", "currentLOP", "NAp", source_partition, currentLOP, NAp); 							
						#endif
						
						globalposition.stage = stage; 
						globalposition.laststage = 2; 
						globalposition.currentLOP = currentLOP; 
						globalposition.lastLOP = FIRSTLOP + NUMLOPs - 1; 
						globalposition.source_partition = source_partition;
						globalposition.first_source_partition = FIRSTSOURCEPARTITION;
						globalposition.last_source_partition = LASTSOURCEPARTITIONS - 1;
						globalposition.num_source_partitions = LASTSOURCEPARTITIONS - FIRSTSOURCEPARTITION; // FIXME.
						globalposition.sourcestatsmarker = sourcestatsmarker; 
						globalposition.deststatsmarker = deststatsmarker; 
						if(globalposition.v_chunkid==0 && globalposition.stage==0 && globalposition.currentLOP==1 && globalposition.source_partition==0){ globalposition.first=ON; } else { globalposition.first=OFF; }
						if(globalposition.v_chunkid==globalparamsK.ACTSPARAMS_NUMEDGECHUNKSINABUFFER-1 && globalposition.stage==globalposition.laststage && globalposition.currentLOP==globalposition.lastLOP && globalposition.source_partition==globalposition.last_source_partition){ globalposition.last=ON; } else { globalposition.last=OFF; }
						
						bool_type enableprocess = ON;
						if(globalposition.EN_PROCESS == ON){
							if(GraphAlgo != PAGERANK){ if(vmask0_p[source_partition] > 0){ enableprocess = ON; } else { enableprocess = OFF; }}
						}
						
						bool_type enablereduce = OFF; 
						unsigned int ntravszs = 0;
						if(globalposition.EN_REDUCE == ON){
							rtravstates[0] = gettravstate(globalposition.EN_REDUCE, kvdram0, globalparamsK, currentLOP, sourcestatsmarker); // CRITICAL NOTEME. POSSIBLE SOURCE OF ROUTING CONSTRAINTS?
							rtravstates[1] = gettravstate(globalposition.EN_REDUCE, kvdram1, globalparamsK, currentLOP, sourcestatsmarker); // CRITICAL NOTEME. POSSIBLE SOURCE OF ROUTING CONSTRAINTS?
							rtravstates[2] = gettravstate(globalposition.EN_REDUCE, kvdram2, globalparamsK, currentLOP, sourcestatsmarker); // CRITICAL NOTEME. POSSIBLE SOURCE OF ROUTING CONSTRAINTS?
							rtravstates[3] = gettravstate(globalposition.EN_REDUCE, kvdram3, globalparamsK, currentLOP, sourcestatsmarker); // CRITICAL NOTEME. POSSIBLE SOURCE OF ROUTING CONSTRAINTS?
							rtravstates[4] = gettravstate(globalposition.EN_REDUCE, kvdram4, globalparamsK, currentLOP, sourcestatsmarker); // CRITICAL NOTEME. POSSIBLE SOURCE OF ROUTING CONSTRAINTS?
							rtravstates[5] = gettravstate(globalposition.EN_REDUCE, kvdram5, globalparamsK, currentLOP, sourcestatsmarker); // CRITICAL NOTEME. POSSIBLE SOURCE OF ROUTING CONSTRAINTS?
							rtravstates[6] = gettravstate(globalposition.EN_REDUCE, kvdram6, globalparamsK, currentLOP, sourcestatsmarker); // CRITICAL NOTEME. POSSIBLE SOURCE OF ROUTING CONSTRAINTS?
							rtravstates[7] = gettravstate(globalposition.EN_REDUCE, kvdram7, globalparamsK, currentLOP, sourcestatsmarker); // CRITICAL NOTEME. POSSIBLE SOURCE OF ROUTING CONSTRAINTS?
							rtravstates[8] = gettravstate(globalposition.EN_REDUCE, kvdram8, globalparamsK, currentLOP, sourcestatsmarker); // CRITICAL NOTEME. POSSIBLE SOURCE OF ROUTING CONSTRAINTS?
							for(unsigned int i = 0; i < 9; i++){ ntravszs += rtravstates[i].size_kvs; }
							if(ntravszs > 0){ enablereduce = ON; } else { enablereduce = OFF; }
						}
						
						bool_type enable_loadmasks = OFF; 
						if(globalposition.EN_PROCESS == ON && enableprocess == ON){ enable_loadmasks = ON; } else { enable_loadmasks = OFF; }
						
						bool_type enable_readandreplicatevdata = OFF; 
						if((globalposition.EN_PROCESS == ON && enableprocess == ON) || (globalposition.EN_REDUCE == ON && enablereduce == ON)){ enable_readandreplicatevdata = ON; } else { enable_readandreplicatevdata = OFF; }
		
						// read vertices
						loadmany9vmasks(enable_loadmasks, vdram, vmask0,vmask1,vmask2,vmask3,vmask4,vmask5,vmask6,vmask7,vmask8, vbuffer0, globalparamsV.BASEOFFSETKVS_VERTICESDATAMASK + vmaskoffset_kvs, vmaskbuffersz_kvs, globalparamsV); 
						#ifdef ENABLE_SUBVMASKING
						loadmany9vmasks_subp(enable_loadmasks, vmask0, vmask0_subp,vmask1_subp,vmask2_subp,vmask3_subp,vmask4_subp,vmask5_subp,vmask6_subp,vmask7_subp,vmask8_subp, vmaskbuffersz_kvs); 
						#endif
						readandreplicate9vdata(enable_readandreplicatevdata, vdram, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs, vbuffer0,vbuffer1,vbuffer2,vbuffer3,vbuffer4,vbuffer5,vbuffer6,vbuffer7,vbuffer8, 0, 0, reducebuffersz, globalparamsV); 
						readandreplicate9vdata(enable_readandreplicatevdata, vdram, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs + reducebuffersz, vbuffer0,vbuffer1,vbuffer2,vbuffer3,vbuffer4,vbuffer5,vbuffer6,vbuffer7,vbuffer8, 8, 0, reducebuffersz, globalparamsV); 
						
						// proc 
						topkernelproc_embedded(enableprocess, ON, enablereduce,  kvdram0, vbuffer0, vmask0_p, vmask0_subp, vmask0, globalstatsbuffer0, globalposition, hybridmode);	
						topkernelproc_embedded(enableprocess, ON, enablereduce,  kvdram1, vbuffer1, vmask1_p, vmask1_subp, vmask1, globalstatsbuffer1, globalposition, hybridmode);	
						topkernelproc_embedded(enableprocess, ON, enablereduce,  kvdram2, vbuffer2, vmask2_p, vmask2_subp, vmask2, globalstatsbuffer2, globalposition, hybridmode);	
						topkernelproc_embedded(enableprocess, ON, enablereduce,  kvdram3, vbuffer3, vmask3_p, vmask3_subp, vmask3, globalstatsbuffer3, globalposition, hybridmode);	
						topkernelproc_embedded(enableprocess, ON, enablereduce,  kvdram4, vbuffer4, vmask4_p, vmask4_subp, vmask4, globalstatsbuffer4, globalposition, hybridmode);	
						topkernelproc_embedded(enableprocess, ON, enablereduce,  kvdram5, vbuffer5, vmask5_p, vmask5_subp, vmask5, globalstatsbuffer5, globalposition, hybridmode);	
						topkernelproc_embedded(enableprocess, ON, enablereduce,  kvdram6, vbuffer6, vmask6_p, vmask6_subp, vmask6, globalstatsbuffer6, globalposition, hybridmode);	
						topkernelproc_embedded(enableprocess, ON, enablereduce,  kvdram7, vbuffer7, vmask7_p, vmask7_subp, vmask7, globalstatsbuffer7, globalposition, hybridmode);	
						topkernelproc_embedded(enableprocess, ON, enablereduce,  kvdram8, vbuffer8, vmask8_p, vmask8_subp, vmask8, globalstatsbuffer8, globalposition, hybridmode);	
						
						// merge 
						if(globalposition.EN_REDUCE == ON && enablereduce == ON){ merge9andsavevdata(ON, vdram, vbuffer0,vbuffer1,vbuffer2,vbuffer3,vbuffer4,vbuffer5,vbuffer6,vbuffer7,vbuffer8, 0, 0, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs); }
						if(globalposition.EN_REDUCE == ON && enablereduce == ON){ merge9andsavevdata(ON, vdram, vbuffer0,vbuffer1,vbuffer2,vbuffer3,vbuffer4,vbuffer5,vbuffer6,vbuffer7,vbuffer8, 8, 0, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs + reducebuffersz); }
						
						// update stats
						if(globalposition.EN_REDUCE == ON){ 
							if(enablereduce == ON){ buffer[source_partition] += 64; } 
							else { buffer[source_partition] += 0; }
						}
						
						// increments
						if(globalposition.EN_PARTITION == ON || globalposition.EN_REDUCE == ON){ sourcestatsmarker += 1; }
						if(globalposition.EN_PARTITION == ON){ deststatsmarker += NUM_PARTITIONS; }
						if(globalposition.EN_PROCESS == ON){ vmaskoffset_kvs += vmaskbuffersz_kvs; }
						if(globalposition.EN_PROCESS == ON || globalposition.EN_REDUCE == ON){ vreadoffset_kvs += reducebuffersz * 2; }
					}
				}
			} // stage
		} // v_chunkid
	} // edgebankID
	
	commitkvstats(vdram, buffer, globalparamsV, reducesourcestatsmarker);
	
	#ifdef _WIDEWORD
	vdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_ALGORITHMINFO_GRAPHITERATIONID].range(31, 0) = globalparamsV.ALGORITHMINFO_GRAPHITERATIONID + 1; // CRITICAL NOTEME: Graph Iteration is incremented here
	#else
	vdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_ALGORITHMINFO_GRAPHITERATIONID].data[0].key = globalparamsV.ALGORITHMINFO_GRAPHITERATIONID + 1;
	#endif 
	
	#if defined(_DEBUGMODE_KERNELPRINTS2) & defined(ENABLE_SUBVMASKING)
	cout<<"topkernelP9:: subpmask status: mask_subp_is_zero: "<<mask_subp_is_zero<<", mask_subp_is_not_zero: "<<mask_subp_is_not_zero<<endl;
	#endif 
	#if defined(_DEBUGMODE_KERNELPRINTS2) & defined(DATA_SENSITIVE_ACTS)
	for(unsigned int i=0; i<MAX_NUM_PARTITIONS; i++){ cout<<"topkernelP9:: subpmask status: _chkpartitions["<<i<<"]: "<<_chkpartitions[i]<<endl;; }
	#endif 
	return;
}
}
extern "C" { // #ifdef ACTS_1by1by1byN (means everything packed in 1 compute unit)
void 
	#ifdef SW 
	actsproc:: 
	#endif
topkernelP10(
	uint512_dt * kvdram0,
	uint512_dt * kvdram1,
	uint512_dt * kvdram2,
	uint512_dt * kvdram3,
	uint512_dt * kvdram4,
	uint512_dt * kvdram5,
	uint512_dt * kvdram6,
	uint512_dt * kvdram7,
	uint512_dt * kvdram8,
	uint512_dt * kvdram9,
	uint512_dt * vdram
	){
#ifdef EDGES_IN_SEPERATE_BUFFER_FROM_KVDRAM
	#pragma HLS INTERFACE m_axi port = edges00 offset = slave bundle = gmem0
	#pragma HLS INTERFACE m_axi port = kvdram0 offset = slave bundle = gmem1
	#pragma HLS INTERFACE m_axi port = edges10 offset = slave bundle = gmem2
	#pragma HLS INTERFACE m_axi port = kvdram1 offset = slave bundle = gmem3
	#pragma HLS INTERFACE m_axi port = edges20 offset = slave bundle = gmem4
	#pragma HLS INTERFACE m_axi port = kvdram2 offset = slave bundle = gmem5
	#pragma HLS INTERFACE m_axi port = edges30 offset = slave bundle = gmem6
	#pragma HLS INTERFACE m_axi port = kvdram3 offset = slave bundle = gmem7
	#pragma HLS INTERFACE m_axi port = edges40 offset = slave bundle = gmem8
	#pragma HLS INTERFACE m_axi port = kvdram4 offset = slave bundle = gmem9
	#pragma HLS INTERFACE m_axi port = edges50 offset = slave bundle = gmem10
	#pragma HLS INTERFACE m_axi port = kvdram5 offset = slave bundle = gmem11
	#pragma HLS INTERFACE m_axi port = edges60 offset = slave bundle = gmem12
	#pragma HLS INTERFACE m_axi port = kvdram6 offset = slave bundle = gmem13
	#pragma HLS INTERFACE m_axi port = edges70 offset = slave bundle = gmem14
	#pragma HLS INTERFACE m_axi port = kvdram7 offset = slave bundle = gmem15
	#pragma HLS INTERFACE m_axi port = edges80 offset = slave bundle = gmem16
	#pragma HLS INTERFACE m_axi port = kvdram8 offset = slave bundle = gmem17
	#pragma HLS INTERFACE m_axi port = edges90 offset = slave bundle = gmem18
	#pragma HLS INTERFACE m_axi port = kvdram9 offset = slave bundle = gmem19
	#pragma HLS INTERFACE m_axi port = vdram offset = slave bundle = gmem20
#else 
	#pragma HLS INTERFACE m_axi port = kvdram0 offset = slave bundle = gmem0
	#pragma HLS INTERFACE m_axi port = kvdram1 offset = slave bundle = gmem1
	#pragma HLS INTERFACE m_axi port = kvdram2 offset = slave bundle = gmem2
	#pragma HLS INTERFACE m_axi port = kvdram3 offset = slave bundle = gmem3
	#pragma HLS INTERFACE m_axi port = kvdram4 offset = slave bundle = gmem4
	#pragma HLS INTERFACE m_axi port = kvdram5 offset = slave bundle = gmem5
	#pragma HLS INTERFACE m_axi port = kvdram6 offset = slave bundle = gmem6
	#pragma HLS INTERFACE m_axi port = kvdram7 offset = slave bundle = gmem7
	#pragma HLS INTERFACE m_axi port = kvdram8 offset = slave bundle = gmem8
	#pragma HLS INTERFACE m_axi port = kvdram9 offset = slave bundle = gmem9
	#pragma HLS INTERFACE m_axi port = vdram offset = slave bundle = gmem10
#endif 
//

#ifdef EDGES_IN_SEPERATE_BUFFER_FROM_KVDRAM
#pragma HLS INTERFACE s_axilite port = edges00 bundle = control
#pragma HLS INTERFACE s_axilite port = edges10 bundle = control
#pragma HLS INTERFACE s_axilite port = edges20 bundle = control
#pragma HLS INTERFACE s_axilite port = edges30 bundle = control
#pragma HLS INTERFACE s_axilite port = edges40 bundle = control
#pragma HLS INTERFACE s_axilite port = edges50 bundle = control
#pragma HLS INTERFACE s_axilite port = edges60 bundle = control
#pragma HLS INTERFACE s_axilite port = edges70 bundle = control
#pragma HLS INTERFACE s_axilite port = edges80 bundle = control
#pragma HLS INTERFACE s_axilite port = edges90 bundle = control
	
#endif 
#pragma HLS INTERFACE s_axilite port = kvdram0 bundle = control
#pragma HLS INTERFACE s_axilite port = kvdram1 bundle = control
#pragma HLS INTERFACE s_axilite port = kvdram2 bundle = control
#pragma HLS INTERFACE s_axilite port = kvdram3 bundle = control
#pragma HLS INTERFACE s_axilite port = kvdram4 bundle = control
#pragma HLS INTERFACE s_axilite port = kvdram5 bundle = control
#pragma HLS INTERFACE s_axilite port = kvdram6 bundle = control
#pragma HLS INTERFACE s_axilite port = kvdram7 bundle = control
#pragma HLS INTERFACE s_axilite port = kvdram8 bundle = control
#pragma HLS INTERFACE s_axilite port = kvdram9 bundle = control
	

#pragma HLS INTERFACE s_axilite port = vdram bundle = control

#pragma HLS INTERFACE s_axilite port=return bundle=control

#ifdef EDGES_IN_SEPERATE_BUFFER_FROM_KVDRAM
#pragma HLS DATA_PACK variable = edges00
#pragma HLS DATA_PACK variable = edges10
#pragma HLS DATA_PACK variable = edges20
#pragma HLS DATA_PACK variable = edges30
#pragma HLS DATA_PACK variable = edges40
#pragma HLS DATA_PACK variable = edges50
#pragma HLS DATA_PACK variable = edges60
#pragma HLS DATA_PACK variable = edges70
#pragma HLS DATA_PACK variable = edges80
#pragma HLS DATA_PACK variable = edges90
#endif 
#pragma HLS DATA_PACK variable = kvdram0
#pragma HLS DATA_PACK variable = kvdram1
#pragma HLS DATA_PACK variable = kvdram2
#pragma HLS DATA_PACK variable = kvdram3
#pragma HLS DATA_PACK variable = kvdram4
#pragma HLS DATA_PACK variable = kvdram5
#pragma HLS DATA_PACK variable = kvdram6
#pragma HLS DATA_PACK variable = kvdram7
#pragma HLS DATA_PACK variable = kvdram8
#pragma HLS DATA_PACK variable = kvdram9
#pragma HLS DATA_PACK variable = vdram

	#if defined(_DEBUGMODE_KERNELPRINTS2) & defined(ALLVERTEXISACTIVE_ALGORITHM)
	cout<<">>> ====================== Light weight ACTS (PR & SYNC) Launched... ====================== "<<endl; 
	#endif
	
	keyvalue_vbuffer_t vbuffer0[VDATA_PACKINGSIZE][BLOCKRAM_SIZE];
	#pragma HLS array_partition variable = vbuffer0
	uint32_type vmask0_p[BLOCKRAM_SIZE];
	unitBRAMwidth_type vmask0_subp[BLOCKRAM_SIZE];
	#pragma HLS DATA_PACK variable = vmask0_subp
	unitBRAMwidth_type vmask0[BLOCKRAM_SIZE];
	#pragma HLS DATA_PACK variable = vmask0
	keyvalue_t globalstatsbuffer0[MAX_NUM_PARTITIONS];
	keyvalue_vbuffer_t vbuffer1[VDATA_PACKINGSIZE][BLOCKRAM_SIZE];
	#pragma HLS array_partition variable = vbuffer1
	uint32_type vmask1_p[BLOCKRAM_SIZE];
	unitBRAMwidth_type vmask1_subp[BLOCKRAM_SIZE];
	#pragma HLS DATA_PACK variable = vmask1_subp
	unitBRAMwidth_type vmask1[BLOCKRAM_SIZE];
	#pragma HLS DATA_PACK variable = vmask1
	keyvalue_t globalstatsbuffer1[MAX_NUM_PARTITIONS];
	keyvalue_vbuffer_t vbuffer2[VDATA_PACKINGSIZE][BLOCKRAM_SIZE];
	#pragma HLS array_partition variable = vbuffer2
	uint32_type vmask2_p[BLOCKRAM_SIZE];
	unitBRAMwidth_type vmask2_subp[BLOCKRAM_SIZE];
	#pragma HLS DATA_PACK variable = vmask2_subp
	unitBRAMwidth_type vmask2[BLOCKRAM_SIZE];
	#pragma HLS DATA_PACK variable = vmask2
	keyvalue_t globalstatsbuffer2[MAX_NUM_PARTITIONS];
	keyvalue_vbuffer_t vbuffer3[VDATA_PACKINGSIZE][BLOCKRAM_SIZE];
	#pragma HLS array_partition variable = vbuffer3
	uint32_type vmask3_p[BLOCKRAM_SIZE];
	unitBRAMwidth_type vmask3_subp[BLOCKRAM_SIZE];
	#pragma HLS DATA_PACK variable = vmask3_subp
	unitBRAMwidth_type vmask3[BLOCKRAM_SIZE];
	#pragma HLS DATA_PACK variable = vmask3
	keyvalue_t globalstatsbuffer3[MAX_NUM_PARTITIONS];
	keyvalue_vbuffer_t vbuffer4[VDATA_PACKINGSIZE][BLOCKRAM_SIZE];
	#pragma HLS array_partition variable = vbuffer4
	uint32_type vmask4_p[BLOCKRAM_SIZE];
	unitBRAMwidth_type vmask4_subp[BLOCKRAM_SIZE];
	#pragma HLS DATA_PACK variable = vmask4_subp
	unitBRAMwidth_type vmask4[BLOCKRAM_SIZE];
	#pragma HLS DATA_PACK variable = vmask4
	keyvalue_t globalstatsbuffer4[MAX_NUM_PARTITIONS];
	keyvalue_vbuffer_t vbuffer5[VDATA_PACKINGSIZE][BLOCKRAM_SIZE];
	#pragma HLS array_partition variable = vbuffer5
	uint32_type vmask5_p[BLOCKRAM_SIZE];
	unitBRAMwidth_type vmask5_subp[BLOCKRAM_SIZE];
	#pragma HLS DATA_PACK variable = vmask5_subp
	unitBRAMwidth_type vmask5[BLOCKRAM_SIZE];
	#pragma HLS DATA_PACK variable = vmask5
	keyvalue_t globalstatsbuffer5[MAX_NUM_PARTITIONS];
	keyvalue_vbuffer_t vbuffer6[VDATA_PACKINGSIZE][BLOCKRAM_SIZE];
	#pragma HLS array_partition variable = vbuffer6
	uint32_type vmask6_p[BLOCKRAM_SIZE];
	unitBRAMwidth_type vmask6_subp[BLOCKRAM_SIZE];
	#pragma HLS DATA_PACK variable = vmask6_subp
	unitBRAMwidth_type vmask6[BLOCKRAM_SIZE];
	#pragma HLS DATA_PACK variable = vmask6
	keyvalue_t globalstatsbuffer6[MAX_NUM_PARTITIONS];
	keyvalue_vbuffer_t vbuffer7[VDATA_PACKINGSIZE][BLOCKRAM_SIZE];
	#pragma HLS array_partition variable = vbuffer7
	uint32_type vmask7_p[BLOCKRAM_SIZE];
	unitBRAMwidth_type vmask7_subp[BLOCKRAM_SIZE];
	#pragma HLS DATA_PACK variable = vmask7_subp
	unitBRAMwidth_type vmask7[BLOCKRAM_SIZE];
	#pragma HLS DATA_PACK variable = vmask7
	keyvalue_t globalstatsbuffer7[MAX_NUM_PARTITIONS];
	keyvalue_vbuffer_t vbuffer8[VDATA_PACKINGSIZE][BLOCKRAM_SIZE];
	#pragma HLS array_partition variable = vbuffer8
	uint32_type vmask8_p[BLOCKRAM_SIZE];
	unitBRAMwidth_type vmask8_subp[BLOCKRAM_SIZE];
	#pragma HLS DATA_PACK variable = vmask8_subp
	unitBRAMwidth_type vmask8[BLOCKRAM_SIZE];
	#pragma HLS DATA_PACK variable = vmask8
	keyvalue_t globalstatsbuffer8[MAX_NUM_PARTITIONS];
	keyvalue_vbuffer_t vbuffer9[VDATA_PACKINGSIZE][BLOCKRAM_SIZE];
	#pragma HLS array_partition variable = vbuffer9
	uint32_type vmask9_p[BLOCKRAM_SIZE];
	unitBRAMwidth_type vmask9_subp[BLOCKRAM_SIZE];
	#pragma HLS DATA_PACK variable = vmask9_subp
	unitBRAMwidth_type vmask9[BLOCKRAM_SIZE];
	#pragma HLS DATA_PACK variable = vmask9
	keyvalue_t globalstatsbuffer9[MAX_NUM_PARTITIONS];
	travstate_t rtravstates[10];
	#pragma HLS ARRAY_PARTITION variable=rtravstates complete
	value_t buffer[DOUBLE_BLOCKRAM_SIZE]; // CRITICAL AUTOMATEME.
	globalparams_t globalparamsKs[10];
	globalparams_t globalparamsEs[MAX_NUM_EDGE_BANKS];
	
	unsigned int sourcestatsmarker = 0;
	unsigned int deststatsmarker = 0;
	unsigned int reducesourcestatsmarker = 0;
	unsigned int EN_PROCESS = OFF; unsigned int EN_PARTITION = OFF; unsigned int EN_REDUCE = OFF; unsigned int EN_PROCESSANDREDUCE = OFF; unsigned int EN_PROCESSANDPARTITION = OFF;
	globalposition_t globalposition;
	
	#ifdef _DEBUGMODE_CHECKS3
	mask_subp_is_zero = 0;
	mask_subp_is_not_zero = 0;
	for(unsigned int i=0; i<8; i++){ _stages[i] = 0; }
	for(unsigned int i=0; i<MAX_NUM_PARTITIONS; i++){ _chkpartitions[i] = 0; }
	#endif 
	
globalparamsKs[0] = getglobalparams(kvdram0);globalparamsKs[1] = getglobalparams(kvdram1);globalparamsKs[2] = getglobalparams(kvdram2);globalparamsKs[3] = getglobalparams(kvdram3);globalparamsKs[4] = getglobalparams(kvdram4);globalparamsKs[5] = getglobalparams(kvdram5);globalparamsKs[6] = getglobalparams(kvdram6);globalparamsKs[7] = getglobalparams(kvdram7);globalparamsKs[8] = getglobalparams(kvdram8);globalparamsKs[9] = getglobalparams(kvdram9); // CRITICAL NOTEME. POSSIBLE SOURCE OF ROUTING CONSTRAINTS?
	globalparams_t globalparamsK = globalparamsKs[0]; // getglobalparams(kvdram0); // CRITICAL NOTEME. POSSIBLE SOURCE OF ROUTING CONSTRAINTS?
	#ifdef EDGES_IN_SEPERATE_BUFFER_FROM_KVDRAM
	
	#else 
	globalparamsEs[0] = globalparamsK;
	#endif 
	globalparams_t globalparamsV = getglobalparams(vdram);
	
	unsigned int PARTITION_CHKPT[MAX_NUM_EDGE_BANKS][EDGESSTATSDRAMSZ];
	for(unsigned int u=0; u<EDGESSTATSDRAMSZ; u++){ // CRITICAL NEWCHANGE.
		#ifdef EDGES_IN_SEPERATE_BUFFER_FROM_KVDRAM
			#ifdef _WIDEWORD
	
			#else
	
			#endif
		#else 
			#ifdef _WIDEWORD
			PARTITION_CHKPT[0][u] = kvdram0[globalparamsK.BASEOFFSETKVS_EDGESSTATSDRAM + u].range(31, 0); 
			#else
			PARTITION_CHKPT[0][u] = kvdram0[globalparamsK.BASEOFFSETKVS_EDGESSTATSDRAM + u].data[0].key; 
			#endif
		#endif 
	}
	
	buffer_type vmaskbuffersz_kvs = (globalparamsK.SIZE_REDUCE * VDATA_PACKINGSIZE) / 512;
	batch_type vmaskoffset_kvs = 0; 
	unsigned int vreadoffset_kvs = 0;
	buffer_type reducebuffersz = globalparamsK.SIZE_REDUCE / 2;
	unsigned int GraphAlgo = globalparamsK.ALGORITHMINFO_GRAPHALGORITHMID;
	#ifdef ENABLERECURSIVEPARTITIONING
	for(unsigned int k=0; k<globalparamsK.ACTSPARAMS_TREEDEPTH-1; k++)
	#else 
	for(unsigned int k=0; k<globalparamsK.ACTSPARAMS_TREEDEPTH; k++)
	#endif 
	{
		reducesourcestatsmarker += (1 << (NUM_PARTITIONS_POW * k)); 
	}
	unsigned int FIRSTLOP = 0;
	unsigned int NUMLOPs = 0;
	unsigned int FIRSTSOURCEPARTITION = 0;
	unsigned int LASTSOURCEPARTITIONS = 0;
	batch_type num_source_partitions = 0; 

	for(unsigned int i=0; i<DOUBLE_BLOCKRAM_SIZE; i++){ buffer[i] = 0; } 
	if(GraphAlgo != PAGERANK){ loadmany10vmask_p(vdram, vmask0_p,vmask1_p,vmask2_p,vmask3_p,vmask4_p,vmask5_p,vmask6_p,vmask7_p,vmask8_p,vmask9_p, globalparamsV.BASEOFFSETKVS_VERTICESPARTITIONMASK, BLOCKRAM_SIZE); }
	if(GraphAlgo != PAGERANK){ resetkvstatvalues(vdram, globalparamsV); }
	unsigned int num_edge_banks = NUM_EDGE_BANKS;
	unsigned int it_size; if(num_edge_banks==0){ it_size = 1; } else { it_size = NUM_EDGE_BANKS; }
	unsigned int FIRST_BASEOFFSETKVS_STATSDRAM = globalparamsK.BASEOFFSETKVS_STATSDRAM;
	
	#ifdef EDGES_IN_SEPERATE_BUFFER_FROM_KVDRAM
	copyvs(vdram, vbuffer0, globalparamsV);
	#endif
	#ifdef _WIDEWORD
	unsigned int hybridmode = vdram[globalparamsV.BASEOFFSETKVS_OTHERINFOS + globalparamsV.ALGORITHMINFO_GRAPHITERATIONID].range(31, 0);
	#else 
	unsigned int hybridmode = vdram[globalparamsV.BASEOFFSETKVS_OTHERINFOS + globalparamsV.ALGORITHMINFO_GRAPHITERATIONID].data[0].key;
	#endif 
	
	unsigned int num_stages = 3;
	if(globalparamsV.ENABLE_PROCESSCOMMAND == ON){ num_stages = 1; }
	if(globalparamsV.ENABLE_PARTITIONCOMMAND == ON){ num_stages = 2; }
	if(globalparamsV.ENABLE_APPLYUPDATESCOMMAND == ON){ num_stages = 3; }
	
	TOPKERNEL10_BASELOOP1: for(unsigned int edgebankID=0; edgebankID<it_size; edgebankID++){
		globalposition.edgebankID = edgebankID;
		#ifdef EDGES_IN_SEPERATE_BUFFER_FROM_KVDRAM
		for(unsigned int i=0; i<globalposition.edgebankID; i++){ globalparamsK.BASEOFFSETKVS_STATSDRAM += ((globalparamsK.SIZE_KVSTATSDRAM / VECTOR_SIZE) / NUM_EDGE_BANKS); } // SHIFT.
		#endif 
		TOPKERNEL10_BASELOOP1B: for(unsigned int v_chunkid=0; v_chunkid<globalparamsK.ACTSPARAMS_NUMEDGECHUNKSINABUFFER; v_chunkid++){
			globalposition.v_chunkid = v_chunkid;
			#ifdef EDGES_IN_SEPERATE_BUFFER_FROM_KVDRAM
			globalparamsK.VARS_WORKBATCH = globalposition.v_chunkid; // SHIFT.
			#endif 
			TOPKERNEL10_BASELOOP1C: for(step_type stage=0; stage<num_stages; stage++){
			
				EN_PROCESS = OFF; EN_PARTITION = OFF; EN_REDUCE = OFF; EN_PROCESSANDREDUCE = OFF; EN_PROCESSANDPARTITION = OFF;
				if(stage==0){ EN_PROCESS = ON; EN_PROCESSANDREDUCE = ON; EN_PROCESSANDPARTITION = ON;  } 
				else if(stage==1){ EN_PARTITION = ON; EN_PROCESSANDPARTITION = ON;  } 
				else { EN_REDUCE = ON; EN_PROCESSANDREDUCE = ON; }
				globalposition.EN_PROCESS = EN_PROCESS; globalposition.EN_PARTITION = EN_PARTITION; globalposition.EN_REDUCE = EN_REDUCE; globalposition.EN_PROCESSANDPARTITION = EN_PROCESSANDPARTITION; globalposition.EN_PROCESSANDREDUCE = EN_PROCESSANDREDUCE;
				
				if(stage==0){ sourcestatsmarker = 0; deststatsmarker = 1; } 
				else if(stage==1){ sourcestatsmarker = 1; deststatsmarker = 1 + NUM_PARTITIONS; } 
				else { sourcestatsmarker = reducesourcestatsmarker; deststatsmarker = NAp; }
				
				if(stage==0){ FIRSTLOP = 1; NUMLOPs = 1; } // FIXME. CHANGE FOR ~ENABLERECURSIVEPARTITIONING
				else if(stage==1){ FIRSTLOP = globalparamsK.ACTSPARAMS_BEGINLOP + 1; NUMLOPs = globalparamsK.ACTSPARAMS_NUMLOPS-2;  } 
				else{ FIRSTLOP = globalparamsK.ACTSPARAMS_TREEDEPTH; NUMLOPs = 1; }
				
				vmaskoffset_kvs = 0; 
				vreadoffset_kvs = 0;
				
				TOPKERNEL10_BASELOOP1D: for(step_type currentLOP=FIRSTLOP; currentLOP<(FIRSTLOP + NUMLOPs); currentLOP+=1){
					#ifdef ENABLERECURSIVEPARTITIONING
					if(stage==0){ num_source_partitions = get_num_source_partitions(globalparamsK.ACTSPARAMS_TREEDEPTH); }
					else if(stage==1){ num_source_partitions = get_num_source_partitions(currentLOP);  }
					else { num_source_partitions = get_num_source_partitions(globalparamsK.ACTSPARAMS_TREEDEPTH);  }
					#else
					NOT IMPLEMENTED.
					#endif
					
					if(stage==0){ FIRSTSOURCEPARTITION = PARTITION_CHKPT[edgebankID][v_chunkid]; LASTSOURCEPARTITIONS = PARTITION_CHKPT[edgebankID][v_chunkid+1]; } 
					else if(stage==1){ FIRSTSOURCEPARTITION = 0; LASTSOURCEPARTITIONS = num_source_partitions;  } 
					else{ FIRSTSOURCEPARTITION = 0; LASTSOURCEPARTITIONS = num_source_partitions; }
					
					if(globalposition.EN_PROCESS == ON){ vmaskoffset_kvs = PARTITION_CHKPT[edgebankID][v_chunkid] * (vmaskbuffersz_kvs); } // NEWCHANGE.
					batch_type vreadoffset_kvs = 0;
					
					TOPKERNEL10_BASELOOP1E: for(batch_type source_partition=FIRSTSOURCEPARTITION; source_partition<LASTSOURCEPARTITIONS; source_partition+=1){
						#ifdef _DEBUGMODE_KERNELPRINTS2
						actsutilityobj->print3("### TOPKERNEL10_BASELOOP1C:: source_partition", "currentLOP", "NAp", source_partition, currentLOP, NAp); 							
						#endif
						
						globalposition.stage = stage; 
						globalposition.laststage = 2; 
						globalposition.currentLOP = currentLOP; 
						globalposition.lastLOP = FIRSTLOP + NUMLOPs - 1; 
						globalposition.source_partition = source_partition;
						globalposition.first_source_partition = FIRSTSOURCEPARTITION;
						globalposition.last_source_partition = LASTSOURCEPARTITIONS - 1;
						globalposition.num_source_partitions = LASTSOURCEPARTITIONS - FIRSTSOURCEPARTITION; // FIXME.
						globalposition.sourcestatsmarker = sourcestatsmarker; 
						globalposition.deststatsmarker = deststatsmarker; 
						if(globalposition.v_chunkid==0 && globalposition.stage==0 && globalposition.currentLOP==1 && globalposition.source_partition==0){ globalposition.first=ON; } else { globalposition.first=OFF; }
						if(globalposition.v_chunkid==globalparamsK.ACTSPARAMS_NUMEDGECHUNKSINABUFFER-1 && globalposition.stage==globalposition.laststage && globalposition.currentLOP==globalposition.lastLOP && globalposition.source_partition==globalposition.last_source_partition){ globalposition.last=ON; } else { globalposition.last=OFF; }
						
						bool_type enableprocess = ON;
						if(globalposition.EN_PROCESS == ON){
							if(GraphAlgo != PAGERANK){ if(vmask0_p[source_partition] > 0){ enableprocess = ON; } else { enableprocess = OFF; }}
						}
						
						bool_type enablereduce = OFF; 
						unsigned int ntravszs = 0;
						if(globalposition.EN_REDUCE == ON){
							rtravstates[0] = gettravstate(globalposition.EN_REDUCE, kvdram0, globalparamsK, currentLOP, sourcestatsmarker); // CRITICAL NOTEME. POSSIBLE SOURCE OF ROUTING CONSTRAINTS?
							rtravstates[1] = gettravstate(globalposition.EN_REDUCE, kvdram1, globalparamsK, currentLOP, sourcestatsmarker); // CRITICAL NOTEME. POSSIBLE SOURCE OF ROUTING CONSTRAINTS?
							rtravstates[2] = gettravstate(globalposition.EN_REDUCE, kvdram2, globalparamsK, currentLOP, sourcestatsmarker); // CRITICAL NOTEME. POSSIBLE SOURCE OF ROUTING CONSTRAINTS?
							rtravstates[3] = gettravstate(globalposition.EN_REDUCE, kvdram3, globalparamsK, currentLOP, sourcestatsmarker); // CRITICAL NOTEME. POSSIBLE SOURCE OF ROUTING CONSTRAINTS?
							rtravstates[4] = gettravstate(globalposition.EN_REDUCE, kvdram4, globalparamsK, currentLOP, sourcestatsmarker); // CRITICAL NOTEME. POSSIBLE SOURCE OF ROUTING CONSTRAINTS?
							rtravstates[5] = gettravstate(globalposition.EN_REDUCE, kvdram5, globalparamsK, currentLOP, sourcestatsmarker); // CRITICAL NOTEME. POSSIBLE SOURCE OF ROUTING CONSTRAINTS?
							rtravstates[6] = gettravstate(globalposition.EN_REDUCE, kvdram6, globalparamsK, currentLOP, sourcestatsmarker); // CRITICAL NOTEME. POSSIBLE SOURCE OF ROUTING CONSTRAINTS?
							rtravstates[7] = gettravstate(globalposition.EN_REDUCE, kvdram7, globalparamsK, currentLOP, sourcestatsmarker); // CRITICAL NOTEME. POSSIBLE SOURCE OF ROUTING CONSTRAINTS?
							rtravstates[8] = gettravstate(globalposition.EN_REDUCE, kvdram8, globalparamsK, currentLOP, sourcestatsmarker); // CRITICAL NOTEME. POSSIBLE SOURCE OF ROUTING CONSTRAINTS?
							rtravstates[9] = gettravstate(globalposition.EN_REDUCE, kvdram9, globalparamsK, currentLOP, sourcestatsmarker); // CRITICAL NOTEME. POSSIBLE SOURCE OF ROUTING CONSTRAINTS?
							for(unsigned int i = 0; i < 10; i++){ ntravszs += rtravstates[i].size_kvs; }
							if(ntravszs > 0){ enablereduce = ON; } else { enablereduce = OFF; }
						}
						
						bool_type enable_loadmasks = OFF; 
						if(globalposition.EN_PROCESS == ON && enableprocess == ON){ enable_loadmasks = ON; } else { enable_loadmasks = OFF; }
						
						bool_type enable_readandreplicatevdata = OFF; 
						if((globalposition.EN_PROCESS == ON && enableprocess == ON) || (globalposition.EN_REDUCE == ON && enablereduce == ON)){ enable_readandreplicatevdata = ON; } else { enable_readandreplicatevdata = OFF; }
		
						// read vertices
						loadmany10vmasks(enable_loadmasks, vdram, vmask0,vmask1,vmask2,vmask3,vmask4,vmask5,vmask6,vmask7,vmask8,vmask9, vbuffer0, globalparamsV.BASEOFFSETKVS_VERTICESDATAMASK + vmaskoffset_kvs, vmaskbuffersz_kvs, globalparamsV); 
						#ifdef ENABLE_SUBVMASKING
						loadmany10vmasks_subp(enable_loadmasks, vmask0, vmask0_subp,vmask1_subp,vmask2_subp,vmask3_subp,vmask4_subp,vmask5_subp,vmask6_subp,vmask7_subp,vmask8_subp,vmask9_subp, vmaskbuffersz_kvs); 
						#endif
						readandreplicate10vdata(enable_readandreplicatevdata, vdram, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs, vbuffer0,vbuffer1,vbuffer2,vbuffer3,vbuffer4,vbuffer5,vbuffer6,vbuffer7,vbuffer8,vbuffer9, 0, 0, reducebuffersz, globalparamsV); 
						readandreplicate10vdata(enable_readandreplicatevdata, vdram, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs + reducebuffersz, vbuffer0,vbuffer1,vbuffer2,vbuffer3,vbuffer4,vbuffer5,vbuffer6,vbuffer7,vbuffer8,vbuffer9, 8, 0, reducebuffersz, globalparamsV); 
						
						// proc 
						topkernelproc_embedded(enableprocess, ON, enablereduce,  kvdram0, vbuffer0, vmask0_p, vmask0_subp, vmask0, globalstatsbuffer0, globalposition, hybridmode);	
						topkernelproc_embedded(enableprocess, ON, enablereduce,  kvdram1, vbuffer1, vmask1_p, vmask1_subp, vmask1, globalstatsbuffer1, globalposition, hybridmode);	
						topkernelproc_embedded(enableprocess, ON, enablereduce,  kvdram2, vbuffer2, vmask2_p, vmask2_subp, vmask2, globalstatsbuffer2, globalposition, hybridmode);	
						topkernelproc_embedded(enableprocess, ON, enablereduce,  kvdram3, vbuffer3, vmask3_p, vmask3_subp, vmask3, globalstatsbuffer3, globalposition, hybridmode);	
						topkernelproc_embedded(enableprocess, ON, enablereduce,  kvdram4, vbuffer4, vmask4_p, vmask4_subp, vmask4, globalstatsbuffer4, globalposition, hybridmode);	
						topkernelproc_embedded(enableprocess, ON, enablereduce,  kvdram5, vbuffer5, vmask5_p, vmask5_subp, vmask5, globalstatsbuffer5, globalposition, hybridmode);	
						topkernelproc_embedded(enableprocess, ON, enablereduce,  kvdram6, vbuffer6, vmask6_p, vmask6_subp, vmask6, globalstatsbuffer6, globalposition, hybridmode);	
						topkernelproc_embedded(enableprocess, ON, enablereduce,  kvdram7, vbuffer7, vmask7_p, vmask7_subp, vmask7, globalstatsbuffer7, globalposition, hybridmode);	
						topkernelproc_embedded(enableprocess, ON, enablereduce,  kvdram8, vbuffer8, vmask8_p, vmask8_subp, vmask8, globalstatsbuffer8, globalposition, hybridmode);	
						topkernelproc_embedded(enableprocess, ON, enablereduce,  kvdram9, vbuffer9, vmask9_p, vmask9_subp, vmask9, globalstatsbuffer9, globalposition, hybridmode);	
						
						// merge 
						if(globalposition.EN_REDUCE == ON && enablereduce == ON){ merge10andsavevdata(ON, vdram, vbuffer0,vbuffer1,vbuffer2,vbuffer3,vbuffer4,vbuffer5,vbuffer6,vbuffer7,vbuffer8,vbuffer9, 0, 0, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs); }
						if(globalposition.EN_REDUCE == ON && enablereduce == ON){ merge10andsavevdata(ON, vdram, vbuffer0,vbuffer1,vbuffer2,vbuffer3,vbuffer4,vbuffer5,vbuffer6,vbuffer7,vbuffer8,vbuffer9, 8, 0, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs + reducebuffersz); }
						
						// update stats
						if(globalposition.EN_REDUCE == ON){ 
							if(enablereduce == ON){ buffer[source_partition] += 64; } 
							else { buffer[source_partition] += 0; }
						}
						
						// increments
						if(globalposition.EN_PARTITION == ON || globalposition.EN_REDUCE == ON){ sourcestatsmarker += 1; }
						if(globalposition.EN_PARTITION == ON){ deststatsmarker += NUM_PARTITIONS; }
						if(globalposition.EN_PROCESS == ON){ vmaskoffset_kvs += vmaskbuffersz_kvs; }
						if(globalposition.EN_PROCESS == ON || globalposition.EN_REDUCE == ON){ vreadoffset_kvs += reducebuffersz * 2; }
					}
				}
			} // stage
		} // v_chunkid
	} // edgebankID
	
	commitkvstats(vdram, buffer, globalparamsV, reducesourcestatsmarker);
	
	#ifdef _WIDEWORD
	vdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_ALGORITHMINFO_GRAPHITERATIONID].range(31, 0) = globalparamsV.ALGORITHMINFO_GRAPHITERATIONID + 1; // CRITICAL NOTEME: Graph Iteration is incremented here
	#else
	vdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_ALGORITHMINFO_GRAPHITERATIONID].data[0].key = globalparamsV.ALGORITHMINFO_GRAPHITERATIONID + 1;
	#endif 
	
	#if defined(_DEBUGMODE_KERNELPRINTS2) & defined(ENABLE_SUBVMASKING)
	cout<<"topkernelP10:: subpmask status: mask_subp_is_zero: "<<mask_subp_is_zero<<", mask_subp_is_not_zero: "<<mask_subp_is_not_zero<<endl;
	#endif 
	#if defined(_DEBUGMODE_KERNELPRINTS2) & defined(DATA_SENSITIVE_ACTS)
	for(unsigned int i=0; i<MAX_NUM_PARTITIONS; i++){ cout<<"topkernelP10:: subpmask status: _chkpartitions["<<i<<"]: "<<_chkpartitions[i]<<endl;; }
	#endif 
	return;
}
}
extern "C" { // #ifdef ACTS_1by1by1byN (means everything packed in 1 compute unit)
void 
	#ifdef SW 
	actsproc:: 
	#endif
topkernelP11(
	uint512_dt * kvdram0,
	uint512_dt * kvdram1,
	uint512_dt * kvdram2,
	uint512_dt * kvdram3,
	uint512_dt * kvdram4,
	uint512_dt * kvdram5,
	uint512_dt * kvdram6,
	uint512_dt * kvdram7,
	uint512_dt * kvdram8,
	uint512_dt * kvdram9,
	uint512_dt * kvdram10,
	uint512_dt * vdram
	){
#ifdef EDGES_IN_SEPERATE_BUFFER_FROM_KVDRAM
	#pragma HLS INTERFACE m_axi port = edges00 offset = slave bundle = gmem0
	#pragma HLS INTERFACE m_axi port = kvdram0 offset = slave bundle = gmem1
	#pragma HLS INTERFACE m_axi port = edges10 offset = slave bundle = gmem2
	#pragma HLS INTERFACE m_axi port = kvdram1 offset = slave bundle = gmem3
	#pragma HLS INTERFACE m_axi port = edges20 offset = slave bundle = gmem4
	#pragma HLS INTERFACE m_axi port = kvdram2 offset = slave bundle = gmem5
	#pragma HLS INTERFACE m_axi port = edges30 offset = slave bundle = gmem6
	#pragma HLS INTERFACE m_axi port = kvdram3 offset = slave bundle = gmem7
	#pragma HLS INTERFACE m_axi port = edges40 offset = slave bundle = gmem8
	#pragma HLS INTERFACE m_axi port = kvdram4 offset = slave bundle = gmem9
	#pragma HLS INTERFACE m_axi port = edges50 offset = slave bundle = gmem10
	#pragma HLS INTERFACE m_axi port = kvdram5 offset = slave bundle = gmem11
	#pragma HLS INTERFACE m_axi port = edges60 offset = slave bundle = gmem12
	#pragma HLS INTERFACE m_axi port = kvdram6 offset = slave bundle = gmem13
	#pragma HLS INTERFACE m_axi port = edges70 offset = slave bundle = gmem14
	#pragma HLS INTERFACE m_axi port = kvdram7 offset = slave bundle = gmem15
	#pragma HLS INTERFACE m_axi port = edges80 offset = slave bundle = gmem16
	#pragma HLS INTERFACE m_axi port = kvdram8 offset = slave bundle = gmem17
	#pragma HLS INTERFACE m_axi port = edges90 offset = slave bundle = gmem18
	#pragma HLS INTERFACE m_axi port = kvdram9 offset = slave bundle = gmem19
	#pragma HLS INTERFACE m_axi port = edges100 offset = slave bundle = gmem20
	#pragma HLS INTERFACE m_axi port = kvdram10 offset = slave bundle = gmem21
	#pragma HLS INTERFACE m_axi port = vdram offset = slave bundle = gmem22
#else 
	#pragma HLS INTERFACE m_axi port = kvdram0 offset = slave bundle = gmem0
	#pragma HLS INTERFACE m_axi port = kvdram1 offset = slave bundle = gmem1
	#pragma HLS INTERFACE m_axi port = kvdram2 offset = slave bundle = gmem2
	#pragma HLS INTERFACE m_axi port = kvdram3 offset = slave bundle = gmem3
	#pragma HLS INTERFACE m_axi port = kvdram4 offset = slave bundle = gmem4
	#pragma HLS INTERFACE m_axi port = kvdram5 offset = slave bundle = gmem5
	#pragma HLS INTERFACE m_axi port = kvdram6 offset = slave bundle = gmem6
	#pragma HLS INTERFACE m_axi port = kvdram7 offset = slave bundle = gmem7
	#pragma HLS INTERFACE m_axi port = kvdram8 offset = slave bundle = gmem8
	#pragma HLS INTERFACE m_axi port = kvdram9 offset = slave bundle = gmem9
	#pragma HLS INTERFACE m_axi port = kvdram10 offset = slave bundle = gmem10
	#pragma HLS INTERFACE m_axi port = vdram offset = slave bundle = gmem11
#endif 
//

#ifdef EDGES_IN_SEPERATE_BUFFER_FROM_KVDRAM
#pragma HLS INTERFACE s_axilite port = edges00 bundle = control
#pragma HLS INTERFACE s_axilite port = edges10 bundle = control
#pragma HLS INTERFACE s_axilite port = edges20 bundle = control
#pragma HLS INTERFACE s_axilite port = edges30 bundle = control
#pragma HLS INTERFACE s_axilite port = edges40 bundle = control
#pragma HLS INTERFACE s_axilite port = edges50 bundle = control
#pragma HLS INTERFACE s_axilite port = edges60 bundle = control
#pragma HLS INTERFACE s_axilite port = edges70 bundle = control
#pragma HLS INTERFACE s_axilite port = edges80 bundle = control
#pragma HLS INTERFACE s_axilite port = edges90 bundle = control
#pragma HLS INTERFACE s_axilite port = edges100 bundle = control
	
#endif 
#pragma HLS INTERFACE s_axilite port = kvdram0 bundle = control
#pragma HLS INTERFACE s_axilite port = kvdram1 bundle = control
#pragma HLS INTERFACE s_axilite port = kvdram2 bundle = control
#pragma HLS INTERFACE s_axilite port = kvdram3 bundle = control
#pragma HLS INTERFACE s_axilite port = kvdram4 bundle = control
#pragma HLS INTERFACE s_axilite port = kvdram5 bundle = control
#pragma HLS INTERFACE s_axilite port = kvdram6 bundle = control
#pragma HLS INTERFACE s_axilite port = kvdram7 bundle = control
#pragma HLS INTERFACE s_axilite port = kvdram8 bundle = control
#pragma HLS INTERFACE s_axilite port = kvdram9 bundle = control
#pragma HLS INTERFACE s_axilite port = kvdram10 bundle = control
	

#pragma HLS INTERFACE s_axilite port = vdram bundle = control

#pragma HLS INTERFACE s_axilite port=return bundle=control

#ifdef EDGES_IN_SEPERATE_BUFFER_FROM_KVDRAM
#pragma HLS DATA_PACK variable = edges00
#pragma HLS DATA_PACK variable = edges10
#pragma HLS DATA_PACK variable = edges20
#pragma HLS DATA_PACK variable = edges30
#pragma HLS DATA_PACK variable = edges40
#pragma HLS DATA_PACK variable = edges50
#pragma HLS DATA_PACK variable = edges60
#pragma HLS DATA_PACK variable = edges70
#pragma HLS DATA_PACK variable = edges80
#pragma HLS DATA_PACK variable = edges90
#pragma HLS DATA_PACK variable = edges100
#endif 
#pragma HLS DATA_PACK variable = kvdram0
#pragma HLS DATA_PACK variable = kvdram1
#pragma HLS DATA_PACK variable = kvdram2
#pragma HLS DATA_PACK variable = kvdram3
#pragma HLS DATA_PACK variable = kvdram4
#pragma HLS DATA_PACK variable = kvdram5
#pragma HLS DATA_PACK variable = kvdram6
#pragma HLS DATA_PACK variable = kvdram7
#pragma HLS DATA_PACK variable = kvdram8
#pragma HLS DATA_PACK variable = kvdram9
#pragma HLS DATA_PACK variable = kvdram10
#pragma HLS DATA_PACK variable = vdram

	#if defined(_DEBUGMODE_KERNELPRINTS2) & defined(ALLVERTEXISACTIVE_ALGORITHM)
	cout<<">>> ====================== Light weight ACTS (PR & SYNC) Launched... ====================== "<<endl; 
	#endif
	
	keyvalue_vbuffer_t vbuffer0[VDATA_PACKINGSIZE][BLOCKRAM_SIZE];
	#pragma HLS array_partition variable = vbuffer0
	uint32_type vmask0_p[BLOCKRAM_SIZE];
	unitBRAMwidth_type vmask0_subp[BLOCKRAM_SIZE];
	#pragma HLS DATA_PACK variable = vmask0_subp
	unitBRAMwidth_type vmask0[BLOCKRAM_SIZE];
	#pragma HLS DATA_PACK variable = vmask0
	keyvalue_t globalstatsbuffer0[MAX_NUM_PARTITIONS];
	keyvalue_vbuffer_t vbuffer1[VDATA_PACKINGSIZE][BLOCKRAM_SIZE];
	#pragma HLS array_partition variable = vbuffer1
	uint32_type vmask1_p[BLOCKRAM_SIZE];
	unitBRAMwidth_type vmask1_subp[BLOCKRAM_SIZE];
	#pragma HLS DATA_PACK variable = vmask1_subp
	unitBRAMwidth_type vmask1[BLOCKRAM_SIZE];
	#pragma HLS DATA_PACK variable = vmask1
	keyvalue_t globalstatsbuffer1[MAX_NUM_PARTITIONS];
	keyvalue_vbuffer_t vbuffer2[VDATA_PACKINGSIZE][BLOCKRAM_SIZE];
	#pragma HLS array_partition variable = vbuffer2
	uint32_type vmask2_p[BLOCKRAM_SIZE];
	unitBRAMwidth_type vmask2_subp[BLOCKRAM_SIZE];
	#pragma HLS DATA_PACK variable = vmask2_subp
	unitBRAMwidth_type vmask2[BLOCKRAM_SIZE];
	#pragma HLS DATA_PACK variable = vmask2
	keyvalue_t globalstatsbuffer2[MAX_NUM_PARTITIONS];
	keyvalue_vbuffer_t vbuffer3[VDATA_PACKINGSIZE][BLOCKRAM_SIZE];
	#pragma HLS array_partition variable = vbuffer3
	uint32_type vmask3_p[BLOCKRAM_SIZE];
	unitBRAMwidth_type vmask3_subp[BLOCKRAM_SIZE];
	#pragma HLS DATA_PACK variable = vmask3_subp
	unitBRAMwidth_type vmask3[BLOCKRAM_SIZE];
	#pragma HLS DATA_PACK variable = vmask3
	keyvalue_t globalstatsbuffer3[MAX_NUM_PARTITIONS];
	keyvalue_vbuffer_t vbuffer4[VDATA_PACKINGSIZE][BLOCKRAM_SIZE];
	#pragma HLS array_partition variable = vbuffer4
	uint32_type vmask4_p[BLOCKRAM_SIZE];
	unitBRAMwidth_type vmask4_subp[BLOCKRAM_SIZE];
	#pragma HLS DATA_PACK variable = vmask4_subp
	unitBRAMwidth_type vmask4[BLOCKRAM_SIZE];
	#pragma HLS DATA_PACK variable = vmask4
	keyvalue_t globalstatsbuffer4[MAX_NUM_PARTITIONS];
	keyvalue_vbuffer_t vbuffer5[VDATA_PACKINGSIZE][BLOCKRAM_SIZE];
	#pragma HLS array_partition variable = vbuffer5
	uint32_type vmask5_p[BLOCKRAM_SIZE];
	unitBRAMwidth_type vmask5_subp[BLOCKRAM_SIZE];
	#pragma HLS DATA_PACK variable = vmask5_subp
	unitBRAMwidth_type vmask5[BLOCKRAM_SIZE];
	#pragma HLS DATA_PACK variable = vmask5
	keyvalue_t globalstatsbuffer5[MAX_NUM_PARTITIONS];
	keyvalue_vbuffer_t vbuffer6[VDATA_PACKINGSIZE][BLOCKRAM_SIZE];
	#pragma HLS array_partition variable = vbuffer6
	uint32_type vmask6_p[BLOCKRAM_SIZE];
	unitBRAMwidth_type vmask6_subp[BLOCKRAM_SIZE];
	#pragma HLS DATA_PACK variable = vmask6_subp
	unitBRAMwidth_type vmask6[BLOCKRAM_SIZE];
	#pragma HLS DATA_PACK variable = vmask6
	keyvalue_t globalstatsbuffer6[MAX_NUM_PARTITIONS];
	keyvalue_vbuffer_t vbuffer7[VDATA_PACKINGSIZE][BLOCKRAM_SIZE];
	#pragma HLS array_partition variable = vbuffer7
	uint32_type vmask7_p[BLOCKRAM_SIZE];
	unitBRAMwidth_type vmask7_subp[BLOCKRAM_SIZE];
	#pragma HLS DATA_PACK variable = vmask7_subp
	unitBRAMwidth_type vmask7[BLOCKRAM_SIZE];
	#pragma HLS DATA_PACK variable = vmask7
	keyvalue_t globalstatsbuffer7[MAX_NUM_PARTITIONS];
	keyvalue_vbuffer_t vbuffer8[VDATA_PACKINGSIZE][BLOCKRAM_SIZE];
	#pragma HLS array_partition variable = vbuffer8
	uint32_type vmask8_p[BLOCKRAM_SIZE];
	unitBRAMwidth_type vmask8_subp[BLOCKRAM_SIZE];
	#pragma HLS DATA_PACK variable = vmask8_subp
	unitBRAMwidth_type vmask8[BLOCKRAM_SIZE];
	#pragma HLS DATA_PACK variable = vmask8
	keyvalue_t globalstatsbuffer8[MAX_NUM_PARTITIONS];
	keyvalue_vbuffer_t vbuffer9[VDATA_PACKINGSIZE][BLOCKRAM_SIZE];
	#pragma HLS array_partition variable = vbuffer9
	uint32_type vmask9_p[BLOCKRAM_SIZE];
	unitBRAMwidth_type vmask9_subp[BLOCKRAM_SIZE];
	#pragma HLS DATA_PACK variable = vmask9_subp
	unitBRAMwidth_type vmask9[BLOCKRAM_SIZE];
	#pragma HLS DATA_PACK variable = vmask9
	keyvalue_t globalstatsbuffer9[MAX_NUM_PARTITIONS];
	keyvalue_vbuffer_t vbuffer10[VDATA_PACKINGSIZE][BLOCKRAM_SIZE];
	#pragma HLS array_partition variable = vbuffer10
	uint32_type vmask10_p[BLOCKRAM_SIZE];
	unitBRAMwidth_type vmask10_subp[BLOCKRAM_SIZE];
	#pragma HLS DATA_PACK variable = vmask10_subp
	unitBRAMwidth_type vmask10[BLOCKRAM_SIZE];
	#pragma HLS DATA_PACK variable = vmask10
	keyvalue_t globalstatsbuffer10[MAX_NUM_PARTITIONS];
	travstate_t rtravstates[11];
	#pragma HLS ARRAY_PARTITION variable=rtravstates complete
	value_t buffer[DOUBLE_BLOCKRAM_SIZE]; // CRITICAL AUTOMATEME.
	globalparams_t globalparamsKs[11];
	globalparams_t globalparamsEs[MAX_NUM_EDGE_BANKS];
	
	unsigned int sourcestatsmarker = 0;
	unsigned int deststatsmarker = 0;
	unsigned int reducesourcestatsmarker = 0;
	unsigned int EN_PROCESS = OFF; unsigned int EN_PARTITION = OFF; unsigned int EN_REDUCE = OFF; unsigned int EN_PROCESSANDREDUCE = OFF; unsigned int EN_PROCESSANDPARTITION = OFF;
	globalposition_t globalposition;
	
	#ifdef _DEBUGMODE_CHECKS3
	mask_subp_is_zero = 0;
	mask_subp_is_not_zero = 0;
	for(unsigned int i=0; i<8; i++){ _stages[i] = 0; }
	for(unsigned int i=0; i<MAX_NUM_PARTITIONS; i++){ _chkpartitions[i] = 0; }
	#endif 
	
globalparamsKs[0] = getglobalparams(kvdram0);globalparamsKs[1] = getglobalparams(kvdram1);globalparamsKs[2] = getglobalparams(kvdram2);globalparamsKs[3] = getglobalparams(kvdram3);globalparamsKs[4] = getglobalparams(kvdram4);globalparamsKs[5] = getglobalparams(kvdram5);globalparamsKs[6] = getglobalparams(kvdram6);globalparamsKs[7] = getglobalparams(kvdram7);globalparamsKs[8] = getglobalparams(kvdram8);globalparamsKs[9] = getglobalparams(kvdram9);globalparamsKs[10] = getglobalparams(kvdram10); // CRITICAL NOTEME. POSSIBLE SOURCE OF ROUTING CONSTRAINTS?
	globalparams_t globalparamsK = globalparamsKs[0]; // getglobalparams(kvdram0); // CRITICAL NOTEME. POSSIBLE SOURCE OF ROUTING CONSTRAINTS?
	#ifdef EDGES_IN_SEPERATE_BUFFER_FROM_KVDRAM
	
	#else 
	globalparamsEs[0] = globalparamsK;
	#endif 
	globalparams_t globalparamsV = getglobalparams(vdram);
	
	unsigned int PARTITION_CHKPT[MAX_NUM_EDGE_BANKS][EDGESSTATSDRAMSZ];
	for(unsigned int u=0; u<EDGESSTATSDRAMSZ; u++){ // CRITICAL NEWCHANGE.
		#ifdef EDGES_IN_SEPERATE_BUFFER_FROM_KVDRAM
			#ifdef _WIDEWORD
	
			#else
	
			#endif
		#else 
			#ifdef _WIDEWORD
			PARTITION_CHKPT[0][u] = kvdram0[globalparamsK.BASEOFFSETKVS_EDGESSTATSDRAM + u].range(31, 0); 
			#else
			PARTITION_CHKPT[0][u] = kvdram0[globalparamsK.BASEOFFSETKVS_EDGESSTATSDRAM + u].data[0].key; 
			#endif
		#endif 
	}
	
	buffer_type vmaskbuffersz_kvs = (globalparamsK.SIZE_REDUCE * VDATA_PACKINGSIZE) / 512;
	batch_type vmaskoffset_kvs = 0; 
	unsigned int vreadoffset_kvs = 0;
	buffer_type reducebuffersz = globalparamsK.SIZE_REDUCE / 2;
	unsigned int GraphAlgo = globalparamsK.ALGORITHMINFO_GRAPHALGORITHMID;
	#ifdef ENABLERECURSIVEPARTITIONING
	for(unsigned int k=0; k<globalparamsK.ACTSPARAMS_TREEDEPTH-1; k++)
	#else 
	for(unsigned int k=0; k<globalparamsK.ACTSPARAMS_TREEDEPTH; k++)
	#endif 
	{
		reducesourcestatsmarker += (1 << (NUM_PARTITIONS_POW * k)); 
	}
	unsigned int FIRSTLOP = 0;
	unsigned int NUMLOPs = 0;
	unsigned int FIRSTSOURCEPARTITION = 0;
	unsigned int LASTSOURCEPARTITIONS = 0;
	batch_type num_source_partitions = 0; 

	for(unsigned int i=0; i<DOUBLE_BLOCKRAM_SIZE; i++){ buffer[i] = 0; } 
	if(GraphAlgo != PAGERANK){ loadmany11vmask_p(vdram, vmask0_p,vmask1_p,vmask2_p,vmask3_p,vmask4_p,vmask5_p,vmask6_p,vmask7_p,vmask8_p,vmask9_p,vmask10_p, globalparamsV.BASEOFFSETKVS_VERTICESPARTITIONMASK, BLOCKRAM_SIZE); }
	if(GraphAlgo != PAGERANK){ resetkvstatvalues(vdram, globalparamsV); }
	unsigned int num_edge_banks = NUM_EDGE_BANKS;
	unsigned int it_size; if(num_edge_banks==0){ it_size = 1; } else { it_size = NUM_EDGE_BANKS; }
	unsigned int FIRST_BASEOFFSETKVS_STATSDRAM = globalparamsK.BASEOFFSETKVS_STATSDRAM;
	
	#ifdef EDGES_IN_SEPERATE_BUFFER_FROM_KVDRAM
	copyvs(vdram, vbuffer0, globalparamsV);
	#endif
	#ifdef _WIDEWORD
	unsigned int hybridmode = vdram[globalparamsV.BASEOFFSETKVS_OTHERINFOS + globalparamsV.ALGORITHMINFO_GRAPHITERATIONID].range(31, 0);
	#else 
	unsigned int hybridmode = vdram[globalparamsV.BASEOFFSETKVS_OTHERINFOS + globalparamsV.ALGORITHMINFO_GRAPHITERATIONID].data[0].key;
	#endif 
	
	unsigned int num_stages = 3;
	if(globalparamsV.ENABLE_PROCESSCOMMAND == ON){ num_stages = 1; }
	if(globalparamsV.ENABLE_PARTITIONCOMMAND == ON){ num_stages = 2; }
	if(globalparamsV.ENABLE_APPLYUPDATESCOMMAND == ON){ num_stages = 3; }
	
	TOPKERNEL11_BASELOOP1: for(unsigned int edgebankID=0; edgebankID<it_size; edgebankID++){
		globalposition.edgebankID = edgebankID;
		#ifdef EDGES_IN_SEPERATE_BUFFER_FROM_KVDRAM
		for(unsigned int i=0; i<globalposition.edgebankID; i++){ globalparamsK.BASEOFFSETKVS_STATSDRAM += ((globalparamsK.SIZE_KVSTATSDRAM / VECTOR_SIZE) / NUM_EDGE_BANKS); } // SHIFT.
		#endif 
		TOPKERNEL11_BASELOOP1B: for(unsigned int v_chunkid=0; v_chunkid<globalparamsK.ACTSPARAMS_NUMEDGECHUNKSINABUFFER; v_chunkid++){
			globalposition.v_chunkid = v_chunkid;
			#ifdef EDGES_IN_SEPERATE_BUFFER_FROM_KVDRAM
			globalparamsK.VARS_WORKBATCH = globalposition.v_chunkid; // SHIFT.
			#endif 
			TOPKERNEL11_BASELOOP1C: for(step_type stage=0; stage<num_stages; stage++){
			
				EN_PROCESS = OFF; EN_PARTITION = OFF; EN_REDUCE = OFF; EN_PROCESSANDREDUCE = OFF; EN_PROCESSANDPARTITION = OFF;
				if(stage==0){ EN_PROCESS = ON; EN_PROCESSANDREDUCE = ON; EN_PROCESSANDPARTITION = ON;  } 
				else if(stage==1){ EN_PARTITION = ON; EN_PROCESSANDPARTITION = ON;  } 
				else { EN_REDUCE = ON; EN_PROCESSANDREDUCE = ON; }
				globalposition.EN_PROCESS = EN_PROCESS; globalposition.EN_PARTITION = EN_PARTITION; globalposition.EN_REDUCE = EN_REDUCE; globalposition.EN_PROCESSANDPARTITION = EN_PROCESSANDPARTITION; globalposition.EN_PROCESSANDREDUCE = EN_PROCESSANDREDUCE;
				
				if(stage==0){ sourcestatsmarker = 0; deststatsmarker = 1; } 
				else if(stage==1){ sourcestatsmarker = 1; deststatsmarker = 1 + NUM_PARTITIONS; } 
				else { sourcestatsmarker = reducesourcestatsmarker; deststatsmarker = NAp; }
				
				if(stage==0){ FIRSTLOP = 1; NUMLOPs = 1; } // FIXME. CHANGE FOR ~ENABLERECURSIVEPARTITIONING
				else if(stage==1){ FIRSTLOP = globalparamsK.ACTSPARAMS_BEGINLOP + 1; NUMLOPs = globalparamsK.ACTSPARAMS_NUMLOPS-2;  } 
				else{ FIRSTLOP = globalparamsK.ACTSPARAMS_TREEDEPTH; NUMLOPs = 1; }
				
				vmaskoffset_kvs = 0; 
				vreadoffset_kvs = 0;
				
				TOPKERNEL11_BASELOOP1D: for(step_type currentLOP=FIRSTLOP; currentLOP<(FIRSTLOP + NUMLOPs); currentLOP+=1){
					#ifdef ENABLERECURSIVEPARTITIONING
					if(stage==0){ num_source_partitions = get_num_source_partitions(globalparamsK.ACTSPARAMS_TREEDEPTH); }
					else if(stage==1){ num_source_partitions = get_num_source_partitions(currentLOP);  }
					else { num_source_partitions = get_num_source_partitions(globalparamsK.ACTSPARAMS_TREEDEPTH);  }
					#else
					NOT IMPLEMENTED.
					#endif
					
					if(stage==0){ FIRSTSOURCEPARTITION = PARTITION_CHKPT[edgebankID][v_chunkid]; LASTSOURCEPARTITIONS = PARTITION_CHKPT[edgebankID][v_chunkid+1]; } 
					else if(stage==1){ FIRSTSOURCEPARTITION = 0; LASTSOURCEPARTITIONS = num_source_partitions;  } 
					else{ FIRSTSOURCEPARTITION = 0; LASTSOURCEPARTITIONS = num_source_partitions; }
					
					if(globalposition.EN_PROCESS == ON){ vmaskoffset_kvs = PARTITION_CHKPT[edgebankID][v_chunkid] * (vmaskbuffersz_kvs); } // NEWCHANGE.
					batch_type vreadoffset_kvs = 0;
					
					TOPKERNEL11_BASELOOP1E: for(batch_type source_partition=FIRSTSOURCEPARTITION; source_partition<LASTSOURCEPARTITIONS; source_partition+=1){
						#ifdef _DEBUGMODE_KERNELPRINTS2
						actsutilityobj->print3("### TOPKERNEL11_BASELOOP1C:: source_partition", "currentLOP", "NAp", source_partition, currentLOP, NAp); 							
						#endif
						
						globalposition.stage = stage; 
						globalposition.laststage = 2; 
						globalposition.currentLOP = currentLOP; 
						globalposition.lastLOP = FIRSTLOP + NUMLOPs - 1; 
						globalposition.source_partition = source_partition;
						globalposition.first_source_partition = FIRSTSOURCEPARTITION;
						globalposition.last_source_partition = LASTSOURCEPARTITIONS - 1;
						globalposition.num_source_partitions = LASTSOURCEPARTITIONS - FIRSTSOURCEPARTITION; // FIXME.
						globalposition.sourcestatsmarker = sourcestatsmarker; 
						globalposition.deststatsmarker = deststatsmarker; 
						if(globalposition.v_chunkid==0 && globalposition.stage==0 && globalposition.currentLOP==1 && globalposition.source_partition==0){ globalposition.first=ON; } else { globalposition.first=OFF; }
						if(globalposition.v_chunkid==globalparamsK.ACTSPARAMS_NUMEDGECHUNKSINABUFFER-1 && globalposition.stage==globalposition.laststage && globalposition.currentLOP==globalposition.lastLOP && globalposition.source_partition==globalposition.last_source_partition){ globalposition.last=ON; } else { globalposition.last=OFF; }
						
						bool_type enableprocess = ON;
						if(globalposition.EN_PROCESS == ON){
							if(GraphAlgo != PAGERANK){ if(vmask0_p[source_partition] > 0){ enableprocess = ON; } else { enableprocess = OFF; }}
						}
						
						bool_type enablereduce = OFF; 
						unsigned int ntravszs = 0;
						if(globalposition.EN_REDUCE == ON){
							rtravstates[0] = gettravstate(globalposition.EN_REDUCE, kvdram0, globalparamsK, currentLOP, sourcestatsmarker); // CRITICAL NOTEME. POSSIBLE SOURCE OF ROUTING CONSTRAINTS?
							rtravstates[1] = gettravstate(globalposition.EN_REDUCE, kvdram1, globalparamsK, currentLOP, sourcestatsmarker); // CRITICAL NOTEME. POSSIBLE SOURCE OF ROUTING CONSTRAINTS?
							rtravstates[2] = gettravstate(globalposition.EN_REDUCE, kvdram2, globalparamsK, currentLOP, sourcestatsmarker); // CRITICAL NOTEME. POSSIBLE SOURCE OF ROUTING CONSTRAINTS?
							rtravstates[3] = gettravstate(globalposition.EN_REDUCE, kvdram3, globalparamsK, currentLOP, sourcestatsmarker); // CRITICAL NOTEME. POSSIBLE SOURCE OF ROUTING CONSTRAINTS?
							rtravstates[4] = gettravstate(globalposition.EN_REDUCE, kvdram4, globalparamsK, currentLOP, sourcestatsmarker); // CRITICAL NOTEME. POSSIBLE SOURCE OF ROUTING CONSTRAINTS?
							rtravstates[5] = gettravstate(globalposition.EN_REDUCE, kvdram5, globalparamsK, currentLOP, sourcestatsmarker); // CRITICAL NOTEME. POSSIBLE SOURCE OF ROUTING CONSTRAINTS?
							rtravstates[6] = gettravstate(globalposition.EN_REDUCE, kvdram6, globalparamsK, currentLOP, sourcestatsmarker); // CRITICAL NOTEME. POSSIBLE SOURCE OF ROUTING CONSTRAINTS?
							rtravstates[7] = gettravstate(globalposition.EN_REDUCE, kvdram7, globalparamsK, currentLOP, sourcestatsmarker); // CRITICAL NOTEME. POSSIBLE SOURCE OF ROUTING CONSTRAINTS?
							rtravstates[8] = gettravstate(globalposition.EN_REDUCE, kvdram8, globalparamsK, currentLOP, sourcestatsmarker); // CRITICAL NOTEME. POSSIBLE SOURCE OF ROUTING CONSTRAINTS?
							rtravstates[9] = gettravstate(globalposition.EN_REDUCE, kvdram9, globalparamsK, currentLOP, sourcestatsmarker); // CRITICAL NOTEME. POSSIBLE SOURCE OF ROUTING CONSTRAINTS?
							rtravstates[10] = gettravstate(globalposition.EN_REDUCE, kvdram10, globalparamsK, currentLOP, sourcestatsmarker); // CRITICAL NOTEME. POSSIBLE SOURCE OF ROUTING CONSTRAINTS?
							for(unsigned int i = 0; i < 11; i++){ ntravszs += rtravstates[i].size_kvs; }
							if(ntravszs > 0){ enablereduce = ON; } else { enablereduce = OFF; }
						}
						
						bool_type enable_loadmasks = OFF; 
						if(globalposition.EN_PROCESS == ON && enableprocess == ON){ enable_loadmasks = ON; } else { enable_loadmasks = OFF; }
						
						bool_type enable_readandreplicatevdata = OFF; 
						if((globalposition.EN_PROCESS == ON && enableprocess == ON) || (globalposition.EN_REDUCE == ON && enablereduce == ON)){ enable_readandreplicatevdata = ON; } else { enable_readandreplicatevdata = OFF; }
		
						// read vertices
						loadmany11vmasks(enable_loadmasks, vdram, vmask0,vmask1,vmask2,vmask3,vmask4,vmask5,vmask6,vmask7,vmask8,vmask9,vmask10, vbuffer0, globalparamsV.BASEOFFSETKVS_VERTICESDATAMASK + vmaskoffset_kvs, vmaskbuffersz_kvs, globalparamsV); 
						#ifdef ENABLE_SUBVMASKING
						loadmany11vmasks_subp(enable_loadmasks, vmask0, vmask0_subp,vmask1_subp,vmask2_subp,vmask3_subp,vmask4_subp,vmask5_subp,vmask6_subp,vmask7_subp,vmask8_subp,vmask9_subp,vmask10_subp, vmaskbuffersz_kvs); 
						#endif
						readandreplicate11vdata(enable_readandreplicatevdata, vdram, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs, vbuffer0,vbuffer1,vbuffer2,vbuffer3,vbuffer4,vbuffer5,vbuffer6,vbuffer7,vbuffer8,vbuffer9,vbuffer10, 0, 0, reducebuffersz, globalparamsV); 
						readandreplicate11vdata(enable_readandreplicatevdata, vdram, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs + reducebuffersz, vbuffer0,vbuffer1,vbuffer2,vbuffer3,vbuffer4,vbuffer5,vbuffer6,vbuffer7,vbuffer8,vbuffer9,vbuffer10, 8, 0, reducebuffersz, globalparamsV); 
						
						// proc 
						topkernelproc_embedded(enableprocess, ON, enablereduce,  kvdram0, vbuffer0, vmask0_p, vmask0_subp, vmask0, globalstatsbuffer0, globalposition, hybridmode);	
						topkernelproc_embedded(enableprocess, ON, enablereduce,  kvdram1, vbuffer1, vmask1_p, vmask1_subp, vmask1, globalstatsbuffer1, globalposition, hybridmode);	
						topkernelproc_embedded(enableprocess, ON, enablereduce,  kvdram2, vbuffer2, vmask2_p, vmask2_subp, vmask2, globalstatsbuffer2, globalposition, hybridmode);	
						topkernelproc_embedded(enableprocess, ON, enablereduce,  kvdram3, vbuffer3, vmask3_p, vmask3_subp, vmask3, globalstatsbuffer3, globalposition, hybridmode);	
						topkernelproc_embedded(enableprocess, ON, enablereduce,  kvdram4, vbuffer4, vmask4_p, vmask4_subp, vmask4, globalstatsbuffer4, globalposition, hybridmode);	
						topkernelproc_embedded(enableprocess, ON, enablereduce,  kvdram5, vbuffer5, vmask5_p, vmask5_subp, vmask5, globalstatsbuffer5, globalposition, hybridmode);	
						topkernelproc_embedded(enableprocess, ON, enablereduce,  kvdram6, vbuffer6, vmask6_p, vmask6_subp, vmask6, globalstatsbuffer6, globalposition, hybridmode);	
						topkernelproc_embedded(enableprocess, ON, enablereduce,  kvdram7, vbuffer7, vmask7_p, vmask7_subp, vmask7, globalstatsbuffer7, globalposition, hybridmode);	
						topkernelproc_embedded(enableprocess, ON, enablereduce,  kvdram8, vbuffer8, vmask8_p, vmask8_subp, vmask8, globalstatsbuffer8, globalposition, hybridmode);	
						topkernelproc_embedded(enableprocess, ON, enablereduce,  kvdram9, vbuffer9, vmask9_p, vmask9_subp, vmask9, globalstatsbuffer9, globalposition, hybridmode);	
						topkernelproc_embedded(enableprocess, ON, enablereduce,  kvdram10, vbuffer10, vmask10_p, vmask10_subp, vmask10, globalstatsbuffer10, globalposition, hybridmode);	
						
						// merge 
						if(globalposition.EN_REDUCE == ON && enablereduce == ON){ merge11andsavevdata(ON, vdram, vbuffer0,vbuffer1,vbuffer2,vbuffer3,vbuffer4,vbuffer5,vbuffer6,vbuffer7,vbuffer8,vbuffer9,vbuffer10, 0, 0, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs); }
						if(globalposition.EN_REDUCE == ON && enablereduce == ON){ merge11andsavevdata(ON, vdram, vbuffer0,vbuffer1,vbuffer2,vbuffer3,vbuffer4,vbuffer5,vbuffer6,vbuffer7,vbuffer8,vbuffer9,vbuffer10, 8, 0, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs + reducebuffersz); }
						
						// update stats
						if(globalposition.EN_REDUCE == ON){ 
							if(enablereduce == ON){ buffer[source_partition] += 64; } 
							else { buffer[source_partition] += 0; }
						}
						
						// increments
						if(globalposition.EN_PARTITION == ON || globalposition.EN_REDUCE == ON){ sourcestatsmarker += 1; }
						if(globalposition.EN_PARTITION == ON){ deststatsmarker += NUM_PARTITIONS; }
						if(globalposition.EN_PROCESS == ON){ vmaskoffset_kvs += vmaskbuffersz_kvs; }
						if(globalposition.EN_PROCESS == ON || globalposition.EN_REDUCE == ON){ vreadoffset_kvs += reducebuffersz * 2; }
					}
				}
			} // stage
		} // v_chunkid
	} // edgebankID
	
	commitkvstats(vdram, buffer, globalparamsV, reducesourcestatsmarker);
	
	#ifdef _WIDEWORD
	vdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_ALGORITHMINFO_GRAPHITERATIONID].range(31, 0) = globalparamsV.ALGORITHMINFO_GRAPHITERATIONID + 1; // CRITICAL NOTEME: Graph Iteration is incremented here
	#else
	vdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_ALGORITHMINFO_GRAPHITERATIONID].data[0].key = globalparamsV.ALGORITHMINFO_GRAPHITERATIONID + 1;
	#endif 
	
	#if defined(_DEBUGMODE_KERNELPRINTS2) & defined(ENABLE_SUBVMASKING)
	cout<<"topkernelP11:: subpmask status: mask_subp_is_zero: "<<mask_subp_is_zero<<", mask_subp_is_not_zero: "<<mask_subp_is_not_zero<<endl;
	#endif 
	#if defined(_DEBUGMODE_KERNELPRINTS2) & defined(DATA_SENSITIVE_ACTS)
	for(unsigned int i=0; i<MAX_NUM_PARTITIONS; i++){ cout<<"topkernelP11:: subpmask status: _chkpartitions["<<i<<"]: "<<_chkpartitions[i]<<endl;; }
	#endif 
	return;
}
}
extern "C" { // #ifdef ACTS_1by1by1byN (means everything packed in 1 compute unit)
void 
	#ifdef SW 
	actsproc:: 
	#endif
topkernelP12(
	uint512_dt * kvdram0,
	uint512_dt * kvdram1,
	uint512_dt * kvdram2,
	uint512_dt * kvdram3,
	uint512_dt * kvdram4,
	uint512_dt * kvdram5,
	uint512_dt * kvdram6,
	uint512_dt * kvdram7,
	uint512_dt * kvdram8,
	uint512_dt * kvdram9,
	uint512_dt * kvdram10,
	uint512_dt * kvdram11,
	uint512_dt * vdram
	){
#ifdef EDGES_IN_SEPERATE_BUFFER_FROM_KVDRAM
	#pragma HLS INTERFACE m_axi port = edges00 offset = slave bundle = gmem0
	#pragma HLS INTERFACE m_axi port = kvdram0 offset = slave bundle = gmem1
	#pragma HLS INTERFACE m_axi port = edges10 offset = slave bundle = gmem2
	#pragma HLS INTERFACE m_axi port = kvdram1 offset = slave bundle = gmem3
	#pragma HLS INTERFACE m_axi port = edges20 offset = slave bundle = gmem4
	#pragma HLS INTERFACE m_axi port = kvdram2 offset = slave bundle = gmem5
	#pragma HLS INTERFACE m_axi port = edges30 offset = slave bundle = gmem6
	#pragma HLS INTERFACE m_axi port = kvdram3 offset = slave bundle = gmem7
	#pragma HLS INTERFACE m_axi port = edges40 offset = slave bundle = gmem8
	#pragma HLS INTERFACE m_axi port = kvdram4 offset = slave bundle = gmem9
	#pragma HLS INTERFACE m_axi port = edges50 offset = slave bundle = gmem10
	#pragma HLS INTERFACE m_axi port = kvdram5 offset = slave bundle = gmem11
	#pragma HLS INTERFACE m_axi port = edges60 offset = slave bundle = gmem12
	#pragma HLS INTERFACE m_axi port = kvdram6 offset = slave bundle = gmem13
	#pragma HLS INTERFACE m_axi port = edges70 offset = slave bundle = gmem14
	#pragma HLS INTERFACE m_axi port = kvdram7 offset = slave bundle = gmem15
	#pragma HLS INTERFACE m_axi port = edges80 offset = slave bundle = gmem16
	#pragma HLS INTERFACE m_axi port = kvdram8 offset = slave bundle = gmem17
	#pragma HLS INTERFACE m_axi port = edges90 offset = slave bundle = gmem18
	#pragma HLS INTERFACE m_axi port = kvdram9 offset = slave bundle = gmem19
	#pragma HLS INTERFACE m_axi port = edges100 offset = slave bundle = gmem20
	#pragma HLS INTERFACE m_axi port = kvdram10 offset = slave bundle = gmem21
	#pragma HLS INTERFACE m_axi port = edges110 offset = slave bundle = gmem22
	#pragma HLS INTERFACE m_axi port = kvdram11 offset = slave bundle = gmem23
	#pragma HLS INTERFACE m_axi port = vdram offset = slave bundle = gmem24
#else 
	#pragma HLS INTERFACE m_axi port = kvdram0 offset = slave bundle = gmem0
	#pragma HLS INTERFACE m_axi port = kvdram1 offset = slave bundle = gmem1
	#pragma HLS INTERFACE m_axi port = kvdram2 offset = slave bundle = gmem2
	#pragma HLS INTERFACE m_axi port = kvdram3 offset = slave bundle = gmem3
	#pragma HLS INTERFACE m_axi port = kvdram4 offset = slave bundle = gmem4
	#pragma HLS INTERFACE m_axi port = kvdram5 offset = slave bundle = gmem5
	#pragma HLS INTERFACE m_axi port = kvdram6 offset = slave bundle = gmem6
	#pragma HLS INTERFACE m_axi port = kvdram7 offset = slave bundle = gmem7
	#pragma HLS INTERFACE m_axi port = kvdram8 offset = slave bundle = gmem8
	#pragma HLS INTERFACE m_axi port = kvdram9 offset = slave bundle = gmem9
	#pragma HLS INTERFACE m_axi port = kvdram10 offset = slave bundle = gmem10
	#pragma HLS INTERFACE m_axi port = kvdram11 offset = slave bundle = gmem11
	#pragma HLS INTERFACE m_axi port = vdram offset = slave bundle = gmem12
#endif 
//

#ifdef EDGES_IN_SEPERATE_BUFFER_FROM_KVDRAM
#pragma HLS INTERFACE s_axilite port = edges00 bundle = control
#pragma HLS INTERFACE s_axilite port = edges10 bundle = control
#pragma HLS INTERFACE s_axilite port = edges20 bundle = control
#pragma HLS INTERFACE s_axilite port = edges30 bundle = control
#pragma HLS INTERFACE s_axilite port = edges40 bundle = control
#pragma HLS INTERFACE s_axilite port = edges50 bundle = control
#pragma HLS INTERFACE s_axilite port = edges60 bundle = control
#pragma HLS INTERFACE s_axilite port = edges70 bundle = control
#pragma HLS INTERFACE s_axilite port = edges80 bundle = control
#pragma HLS INTERFACE s_axilite port = edges90 bundle = control
#pragma HLS INTERFACE s_axilite port = edges100 bundle = control
#pragma HLS INTERFACE s_axilite port = edges110 bundle = control
	
#endif 
#pragma HLS INTERFACE s_axilite port = kvdram0 bundle = control
#pragma HLS INTERFACE s_axilite port = kvdram1 bundle = control
#pragma HLS INTERFACE s_axilite port = kvdram2 bundle = control
#pragma HLS INTERFACE s_axilite port = kvdram3 bundle = control
#pragma HLS INTERFACE s_axilite port = kvdram4 bundle = control
#pragma HLS INTERFACE s_axilite port = kvdram5 bundle = control
#pragma HLS INTERFACE s_axilite port = kvdram6 bundle = control
#pragma HLS INTERFACE s_axilite port = kvdram7 bundle = control
#pragma HLS INTERFACE s_axilite port = kvdram8 bundle = control
#pragma HLS INTERFACE s_axilite port = kvdram9 bundle = control
#pragma HLS INTERFACE s_axilite port = kvdram10 bundle = control
#pragma HLS INTERFACE s_axilite port = kvdram11 bundle = control
	

#pragma HLS INTERFACE s_axilite port = vdram bundle = control

#pragma HLS INTERFACE s_axilite port=return bundle=control

#ifdef EDGES_IN_SEPERATE_BUFFER_FROM_KVDRAM
#pragma HLS DATA_PACK variable = edges00
#pragma HLS DATA_PACK variable = edges10
#pragma HLS DATA_PACK variable = edges20
#pragma HLS DATA_PACK variable = edges30
#pragma HLS DATA_PACK variable = edges40
#pragma HLS DATA_PACK variable = edges50
#pragma HLS DATA_PACK variable = edges60
#pragma HLS DATA_PACK variable = edges70
#pragma HLS DATA_PACK variable = edges80
#pragma HLS DATA_PACK variable = edges90
#pragma HLS DATA_PACK variable = edges100
#pragma HLS DATA_PACK variable = edges110
#endif 
#pragma HLS DATA_PACK variable = kvdram0
#pragma HLS DATA_PACK variable = kvdram1
#pragma HLS DATA_PACK variable = kvdram2
#pragma HLS DATA_PACK variable = kvdram3
#pragma HLS DATA_PACK variable = kvdram4
#pragma HLS DATA_PACK variable = kvdram5
#pragma HLS DATA_PACK variable = kvdram6
#pragma HLS DATA_PACK variable = kvdram7
#pragma HLS DATA_PACK variable = kvdram8
#pragma HLS DATA_PACK variable = kvdram9
#pragma HLS DATA_PACK variable = kvdram10
#pragma HLS DATA_PACK variable = kvdram11
#pragma HLS DATA_PACK variable = vdram

	#if defined(_DEBUGMODE_KERNELPRINTS2) & defined(ALLVERTEXISACTIVE_ALGORITHM)
	cout<<">>> ====================== Light weight ACTS (PR & SYNC) Launched... ====================== "<<endl; 
	#endif
	
	keyvalue_vbuffer_t vbuffer0[VDATA_PACKINGSIZE][BLOCKRAM_SIZE];
	#pragma HLS array_partition variable = vbuffer0
	uint32_type vmask0_p[BLOCKRAM_SIZE];
	unitBRAMwidth_type vmask0_subp[BLOCKRAM_SIZE];
	#pragma HLS DATA_PACK variable = vmask0_subp
	unitBRAMwidth_type vmask0[BLOCKRAM_SIZE];
	#pragma HLS DATA_PACK variable = vmask0
	keyvalue_t globalstatsbuffer0[MAX_NUM_PARTITIONS];
	keyvalue_vbuffer_t vbuffer1[VDATA_PACKINGSIZE][BLOCKRAM_SIZE];
	#pragma HLS array_partition variable = vbuffer1
	uint32_type vmask1_p[BLOCKRAM_SIZE];
	unitBRAMwidth_type vmask1_subp[BLOCKRAM_SIZE];
	#pragma HLS DATA_PACK variable = vmask1_subp
	unitBRAMwidth_type vmask1[BLOCKRAM_SIZE];
	#pragma HLS DATA_PACK variable = vmask1
	keyvalue_t globalstatsbuffer1[MAX_NUM_PARTITIONS];
	keyvalue_vbuffer_t vbuffer2[VDATA_PACKINGSIZE][BLOCKRAM_SIZE];
	#pragma HLS array_partition variable = vbuffer2
	uint32_type vmask2_p[BLOCKRAM_SIZE];
	unitBRAMwidth_type vmask2_subp[BLOCKRAM_SIZE];
	#pragma HLS DATA_PACK variable = vmask2_subp
	unitBRAMwidth_type vmask2[BLOCKRAM_SIZE];
	#pragma HLS DATA_PACK variable = vmask2
	keyvalue_t globalstatsbuffer2[MAX_NUM_PARTITIONS];
	keyvalue_vbuffer_t vbuffer3[VDATA_PACKINGSIZE][BLOCKRAM_SIZE];
	#pragma HLS array_partition variable = vbuffer3
	uint32_type vmask3_p[BLOCKRAM_SIZE];
	unitBRAMwidth_type vmask3_subp[BLOCKRAM_SIZE];
	#pragma HLS DATA_PACK variable = vmask3_subp
	unitBRAMwidth_type vmask3[BLOCKRAM_SIZE];
	#pragma HLS DATA_PACK variable = vmask3
	keyvalue_t globalstatsbuffer3[MAX_NUM_PARTITIONS];
	keyvalue_vbuffer_t vbuffer4[VDATA_PACKINGSIZE][BLOCKRAM_SIZE];
	#pragma HLS array_partition variable = vbuffer4
	uint32_type vmask4_p[BLOCKRAM_SIZE];
	unitBRAMwidth_type vmask4_subp[BLOCKRAM_SIZE];
	#pragma HLS DATA_PACK variable = vmask4_subp
	unitBRAMwidth_type vmask4[BLOCKRAM_SIZE];
	#pragma HLS DATA_PACK variable = vmask4
	keyvalue_t globalstatsbuffer4[MAX_NUM_PARTITIONS];
	keyvalue_vbuffer_t vbuffer5[VDATA_PACKINGSIZE][BLOCKRAM_SIZE];
	#pragma HLS array_partition variable = vbuffer5
	uint32_type vmask5_p[BLOCKRAM_SIZE];
	unitBRAMwidth_type vmask5_subp[BLOCKRAM_SIZE];
	#pragma HLS DATA_PACK variable = vmask5_subp
	unitBRAMwidth_type vmask5[BLOCKRAM_SIZE];
	#pragma HLS DATA_PACK variable = vmask5
	keyvalue_t globalstatsbuffer5[MAX_NUM_PARTITIONS];
	keyvalue_vbuffer_t vbuffer6[VDATA_PACKINGSIZE][BLOCKRAM_SIZE];
	#pragma HLS array_partition variable = vbuffer6
	uint32_type vmask6_p[BLOCKRAM_SIZE];
	unitBRAMwidth_type vmask6_subp[BLOCKRAM_SIZE];
	#pragma HLS DATA_PACK variable = vmask6_subp
	unitBRAMwidth_type vmask6[BLOCKRAM_SIZE];
	#pragma HLS DATA_PACK variable = vmask6
	keyvalue_t globalstatsbuffer6[MAX_NUM_PARTITIONS];
	keyvalue_vbuffer_t vbuffer7[VDATA_PACKINGSIZE][BLOCKRAM_SIZE];
	#pragma HLS array_partition variable = vbuffer7
	uint32_type vmask7_p[BLOCKRAM_SIZE];
	unitBRAMwidth_type vmask7_subp[BLOCKRAM_SIZE];
	#pragma HLS DATA_PACK variable = vmask7_subp
	unitBRAMwidth_type vmask7[BLOCKRAM_SIZE];
	#pragma HLS DATA_PACK variable = vmask7
	keyvalue_t globalstatsbuffer7[MAX_NUM_PARTITIONS];
	keyvalue_vbuffer_t vbuffer8[VDATA_PACKINGSIZE][BLOCKRAM_SIZE];
	#pragma HLS array_partition variable = vbuffer8
	uint32_type vmask8_p[BLOCKRAM_SIZE];
	unitBRAMwidth_type vmask8_subp[BLOCKRAM_SIZE];
	#pragma HLS DATA_PACK variable = vmask8_subp
	unitBRAMwidth_type vmask8[BLOCKRAM_SIZE];
	#pragma HLS DATA_PACK variable = vmask8
	keyvalue_t globalstatsbuffer8[MAX_NUM_PARTITIONS];
	keyvalue_vbuffer_t vbuffer9[VDATA_PACKINGSIZE][BLOCKRAM_SIZE];
	#pragma HLS array_partition variable = vbuffer9
	uint32_type vmask9_p[BLOCKRAM_SIZE];
	unitBRAMwidth_type vmask9_subp[BLOCKRAM_SIZE];
	#pragma HLS DATA_PACK variable = vmask9_subp
	unitBRAMwidth_type vmask9[BLOCKRAM_SIZE];
	#pragma HLS DATA_PACK variable = vmask9
	keyvalue_t globalstatsbuffer9[MAX_NUM_PARTITIONS];
	keyvalue_vbuffer_t vbuffer10[VDATA_PACKINGSIZE][BLOCKRAM_SIZE];
	#pragma HLS array_partition variable = vbuffer10
	uint32_type vmask10_p[BLOCKRAM_SIZE];
	unitBRAMwidth_type vmask10_subp[BLOCKRAM_SIZE];
	#pragma HLS DATA_PACK variable = vmask10_subp
	unitBRAMwidth_type vmask10[BLOCKRAM_SIZE];
	#pragma HLS DATA_PACK variable = vmask10
	keyvalue_t globalstatsbuffer10[MAX_NUM_PARTITIONS];
	keyvalue_vbuffer_t vbuffer11[VDATA_PACKINGSIZE][BLOCKRAM_SIZE];
	#pragma HLS array_partition variable = vbuffer11
	uint32_type vmask11_p[BLOCKRAM_SIZE];
	unitBRAMwidth_type vmask11_subp[BLOCKRAM_SIZE];
	#pragma HLS DATA_PACK variable = vmask11_subp
	unitBRAMwidth_type vmask11[BLOCKRAM_SIZE];
	#pragma HLS DATA_PACK variable = vmask11
	keyvalue_t globalstatsbuffer11[MAX_NUM_PARTITIONS];
	travstate_t rtravstates[12];
	#pragma HLS ARRAY_PARTITION variable=rtravstates complete
	value_t buffer[DOUBLE_BLOCKRAM_SIZE]; // CRITICAL AUTOMATEME.
	globalparams_t globalparamsKs[12];
	globalparams_t globalparamsEs[MAX_NUM_EDGE_BANKS];
	
	unsigned int sourcestatsmarker = 0;
	unsigned int deststatsmarker = 0;
	unsigned int reducesourcestatsmarker = 0;
	unsigned int EN_PROCESS = OFF; unsigned int EN_PARTITION = OFF; unsigned int EN_REDUCE = OFF; unsigned int EN_PROCESSANDREDUCE = OFF; unsigned int EN_PROCESSANDPARTITION = OFF;
	globalposition_t globalposition;
	
	#ifdef _DEBUGMODE_CHECKS3
	mask_subp_is_zero = 0;
	mask_subp_is_not_zero = 0;
	for(unsigned int i=0; i<8; i++){ _stages[i] = 0; }
	for(unsigned int i=0; i<MAX_NUM_PARTITIONS; i++){ _chkpartitions[i] = 0; }
	#endif 
	
globalparamsKs[0] = getglobalparams(kvdram0);globalparamsKs[1] = getglobalparams(kvdram1);globalparamsKs[2] = getglobalparams(kvdram2);globalparamsKs[3] = getglobalparams(kvdram3);globalparamsKs[4] = getglobalparams(kvdram4);globalparamsKs[5] = getglobalparams(kvdram5);globalparamsKs[6] = getglobalparams(kvdram6);globalparamsKs[7] = getglobalparams(kvdram7);globalparamsKs[8] = getglobalparams(kvdram8);globalparamsKs[9] = getglobalparams(kvdram9);globalparamsKs[10] = getglobalparams(kvdram10);globalparamsKs[11] = getglobalparams(kvdram11); // CRITICAL NOTEME. POSSIBLE SOURCE OF ROUTING CONSTRAINTS?
	globalparams_t globalparamsK = globalparamsKs[0]; // getglobalparams(kvdram0); // CRITICAL NOTEME. POSSIBLE SOURCE OF ROUTING CONSTRAINTS?
	#ifdef EDGES_IN_SEPERATE_BUFFER_FROM_KVDRAM
	
	#else 
	globalparamsEs[0] = globalparamsK;
	#endif 
	globalparams_t globalparamsV = getglobalparams(vdram);
	
	unsigned int PARTITION_CHKPT[MAX_NUM_EDGE_BANKS][EDGESSTATSDRAMSZ];
	for(unsigned int u=0; u<EDGESSTATSDRAMSZ; u++){ // CRITICAL NEWCHANGE.
		#ifdef EDGES_IN_SEPERATE_BUFFER_FROM_KVDRAM
			#ifdef _WIDEWORD
	
			#else
	
			#endif
		#else 
			#ifdef _WIDEWORD
			PARTITION_CHKPT[0][u] = kvdram0[globalparamsK.BASEOFFSETKVS_EDGESSTATSDRAM + u].range(31, 0); 
			#else
			PARTITION_CHKPT[0][u] = kvdram0[globalparamsK.BASEOFFSETKVS_EDGESSTATSDRAM + u].data[0].key; 
			#endif
		#endif 
	}
	
	buffer_type vmaskbuffersz_kvs = (globalparamsK.SIZE_REDUCE * VDATA_PACKINGSIZE) / 512;
	batch_type vmaskoffset_kvs = 0; 
	unsigned int vreadoffset_kvs = 0;
	buffer_type reducebuffersz = globalparamsK.SIZE_REDUCE / 2;
	unsigned int GraphAlgo = globalparamsK.ALGORITHMINFO_GRAPHALGORITHMID;
	#ifdef ENABLERECURSIVEPARTITIONING
	for(unsigned int k=0; k<globalparamsK.ACTSPARAMS_TREEDEPTH-1; k++)
	#else 
	for(unsigned int k=0; k<globalparamsK.ACTSPARAMS_TREEDEPTH; k++)
	#endif 
	{
		reducesourcestatsmarker += (1 << (NUM_PARTITIONS_POW * k)); 
	}
	unsigned int FIRSTLOP = 0;
	unsigned int NUMLOPs = 0;
	unsigned int FIRSTSOURCEPARTITION = 0;
	unsigned int LASTSOURCEPARTITIONS = 0;
	batch_type num_source_partitions = 0; 

	for(unsigned int i=0; i<DOUBLE_BLOCKRAM_SIZE; i++){ buffer[i] = 0; } 
	if(GraphAlgo != PAGERANK){ loadmany12vmask_p(vdram, vmask0_p,vmask1_p,vmask2_p,vmask3_p,vmask4_p,vmask5_p,vmask6_p,vmask7_p,vmask8_p,vmask9_p,vmask10_p,vmask11_p, globalparamsV.BASEOFFSETKVS_VERTICESPARTITIONMASK, BLOCKRAM_SIZE); }
	if(GraphAlgo != PAGERANK){ resetkvstatvalues(vdram, globalparamsV); }
	unsigned int num_edge_banks = NUM_EDGE_BANKS;
	unsigned int it_size; if(num_edge_banks==0){ it_size = 1; } else { it_size = NUM_EDGE_BANKS; }
	unsigned int FIRST_BASEOFFSETKVS_STATSDRAM = globalparamsK.BASEOFFSETKVS_STATSDRAM;
	
	#ifdef EDGES_IN_SEPERATE_BUFFER_FROM_KVDRAM
	copyvs(vdram, vbuffer0, globalparamsV);
	#endif
	#ifdef _WIDEWORD
	unsigned int hybridmode = vdram[globalparamsV.BASEOFFSETKVS_OTHERINFOS + globalparamsV.ALGORITHMINFO_GRAPHITERATIONID].range(31, 0);
	#else 
	unsigned int hybridmode = vdram[globalparamsV.BASEOFFSETKVS_OTHERINFOS + globalparamsV.ALGORITHMINFO_GRAPHITERATIONID].data[0].key;
	#endif 
	
	unsigned int num_stages = 3;
	if(globalparamsV.ENABLE_PROCESSCOMMAND == ON){ num_stages = 1; }
	if(globalparamsV.ENABLE_PARTITIONCOMMAND == ON){ num_stages = 2; }
	if(globalparamsV.ENABLE_APPLYUPDATESCOMMAND == ON){ num_stages = 3; }
	
	TOPKERNEL12_BASELOOP1: for(unsigned int edgebankID=0; edgebankID<it_size; edgebankID++){
		globalposition.edgebankID = edgebankID;
		#ifdef EDGES_IN_SEPERATE_BUFFER_FROM_KVDRAM
		for(unsigned int i=0; i<globalposition.edgebankID; i++){ globalparamsK.BASEOFFSETKVS_STATSDRAM += ((globalparamsK.SIZE_KVSTATSDRAM / VECTOR_SIZE) / NUM_EDGE_BANKS); } // SHIFT.
		#endif 
		TOPKERNEL12_BASELOOP1B: for(unsigned int v_chunkid=0; v_chunkid<globalparamsK.ACTSPARAMS_NUMEDGECHUNKSINABUFFER; v_chunkid++){
			globalposition.v_chunkid = v_chunkid;
			#ifdef EDGES_IN_SEPERATE_BUFFER_FROM_KVDRAM
			globalparamsK.VARS_WORKBATCH = globalposition.v_chunkid; // SHIFT.
			#endif 
			TOPKERNEL12_BASELOOP1C: for(step_type stage=0; stage<num_stages; stage++){
			
				EN_PROCESS = OFF; EN_PARTITION = OFF; EN_REDUCE = OFF; EN_PROCESSANDREDUCE = OFF; EN_PROCESSANDPARTITION = OFF;
				if(stage==0){ EN_PROCESS = ON; EN_PROCESSANDREDUCE = ON; EN_PROCESSANDPARTITION = ON;  } 
				else if(stage==1){ EN_PARTITION = ON; EN_PROCESSANDPARTITION = ON;  } 
				else { EN_REDUCE = ON; EN_PROCESSANDREDUCE = ON; }
				globalposition.EN_PROCESS = EN_PROCESS; globalposition.EN_PARTITION = EN_PARTITION; globalposition.EN_REDUCE = EN_REDUCE; globalposition.EN_PROCESSANDPARTITION = EN_PROCESSANDPARTITION; globalposition.EN_PROCESSANDREDUCE = EN_PROCESSANDREDUCE;
				
				if(stage==0){ sourcestatsmarker = 0; deststatsmarker = 1; } 
				else if(stage==1){ sourcestatsmarker = 1; deststatsmarker = 1 + NUM_PARTITIONS; } 
				else { sourcestatsmarker = reducesourcestatsmarker; deststatsmarker = NAp; }
				
				if(stage==0){ FIRSTLOP = 1; NUMLOPs = 1; } // FIXME. CHANGE FOR ~ENABLERECURSIVEPARTITIONING
				else if(stage==1){ FIRSTLOP = globalparamsK.ACTSPARAMS_BEGINLOP + 1; NUMLOPs = globalparamsK.ACTSPARAMS_NUMLOPS-2;  } 
				else{ FIRSTLOP = globalparamsK.ACTSPARAMS_TREEDEPTH; NUMLOPs = 1; }
				
				vmaskoffset_kvs = 0; 
				vreadoffset_kvs = 0;
				
				TOPKERNEL12_BASELOOP1D: for(step_type currentLOP=FIRSTLOP; currentLOP<(FIRSTLOP + NUMLOPs); currentLOP+=1){
					#ifdef ENABLERECURSIVEPARTITIONING
					if(stage==0){ num_source_partitions = get_num_source_partitions(globalparamsK.ACTSPARAMS_TREEDEPTH); }
					else if(stage==1){ num_source_partitions = get_num_source_partitions(currentLOP);  }
					else { num_source_partitions = get_num_source_partitions(globalparamsK.ACTSPARAMS_TREEDEPTH);  }
					#else
					NOT IMPLEMENTED.
					#endif
					
					if(stage==0){ FIRSTSOURCEPARTITION = PARTITION_CHKPT[edgebankID][v_chunkid]; LASTSOURCEPARTITIONS = PARTITION_CHKPT[edgebankID][v_chunkid+1]; } 
					else if(stage==1){ FIRSTSOURCEPARTITION = 0; LASTSOURCEPARTITIONS = num_source_partitions;  } 
					else{ FIRSTSOURCEPARTITION = 0; LASTSOURCEPARTITIONS = num_source_partitions; }
					
					if(globalposition.EN_PROCESS == ON){ vmaskoffset_kvs = PARTITION_CHKPT[edgebankID][v_chunkid] * (vmaskbuffersz_kvs); } // NEWCHANGE.
					batch_type vreadoffset_kvs = 0;
					
					TOPKERNEL12_BASELOOP1E: for(batch_type source_partition=FIRSTSOURCEPARTITION; source_partition<LASTSOURCEPARTITIONS; source_partition+=1){
						#ifdef _DEBUGMODE_KERNELPRINTS2
						actsutilityobj->print3("### TOPKERNEL12_BASELOOP1C:: source_partition", "currentLOP", "NAp", source_partition, currentLOP, NAp); 							
						#endif
						
						globalposition.stage = stage; 
						globalposition.laststage = 2; 
						globalposition.currentLOP = currentLOP; 
						globalposition.lastLOP = FIRSTLOP + NUMLOPs - 1; 
						globalposition.source_partition = source_partition;
						globalposition.first_source_partition = FIRSTSOURCEPARTITION;
						globalposition.last_source_partition = LASTSOURCEPARTITIONS - 1;
						globalposition.num_source_partitions = LASTSOURCEPARTITIONS - FIRSTSOURCEPARTITION; // FIXME.
						globalposition.sourcestatsmarker = sourcestatsmarker; 
						globalposition.deststatsmarker = deststatsmarker; 
						if(globalposition.v_chunkid==0 && globalposition.stage==0 && globalposition.currentLOP==1 && globalposition.source_partition==0){ globalposition.first=ON; } else { globalposition.first=OFF; }
						if(globalposition.v_chunkid==globalparamsK.ACTSPARAMS_NUMEDGECHUNKSINABUFFER-1 && globalposition.stage==globalposition.laststage && globalposition.currentLOP==globalposition.lastLOP && globalposition.source_partition==globalposition.last_source_partition){ globalposition.last=ON; } else { globalposition.last=OFF; }
						
						bool_type enableprocess = ON;
						if(globalposition.EN_PROCESS == ON){
							if(GraphAlgo != PAGERANK){ if(vmask0_p[source_partition] > 0){ enableprocess = ON; } else { enableprocess = OFF; }}
						}
						
						bool_type enablereduce = OFF; 
						unsigned int ntravszs = 0;
						if(globalposition.EN_REDUCE == ON){
							rtravstates[0] = gettravstate(globalposition.EN_REDUCE, kvdram0, globalparamsK, currentLOP, sourcestatsmarker); // CRITICAL NOTEME. POSSIBLE SOURCE OF ROUTING CONSTRAINTS?
							rtravstates[1] = gettravstate(globalposition.EN_REDUCE, kvdram1, globalparamsK, currentLOP, sourcestatsmarker); // CRITICAL NOTEME. POSSIBLE SOURCE OF ROUTING CONSTRAINTS?
							rtravstates[2] = gettravstate(globalposition.EN_REDUCE, kvdram2, globalparamsK, currentLOP, sourcestatsmarker); // CRITICAL NOTEME. POSSIBLE SOURCE OF ROUTING CONSTRAINTS?
							rtravstates[3] = gettravstate(globalposition.EN_REDUCE, kvdram3, globalparamsK, currentLOP, sourcestatsmarker); // CRITICAL NOTEME. POSSIBLE SOURCE OF ROUTING CONSTRAINTS?
							rtravstates[4] = gettravstate(globalposition.EN_REDUCE, kvdram4, globalparamsK, currentLOP, sourcestatsmarker); // CRITICAL NOTEME. POSSIBLE SOURCE OF ROUTING CONSTRAINTS?
							rtravstates[5] = gettravstate(globalposition.EN_REDUCE, kvdram5, globalparamsK, currentLOP, sourcestatsmarker); // CRITICAL NOTEME. POSSIBLE SOURCE OF ROUTING CONSTRAINTS?
							rtravstates[6] = gettravstate(globalposition.EN_REDUCE, kvdram6, globalparamsK, currentLOP, sourcestatsmarker); // CRITICAL NOTEME. POSSIBLE SOURCE OF ROUTING CONSTRAINTS?
							rtravstates[7] = gettravstate(globalposition.EN_REDUCE, kvdram7, globalparamsK, currentLOP, sourcestatsmarker); // CRITICAL NOTEME. POSSIBLE SOURCE OF ROUTING CONSTRAINTS?
							rtravstates[8] = gettravstate(globalposition.EN_REDUCE, kvdram8, globalparamsK, currentLOP, sourcestatsmarker); // CRITICAL NOTEME. POSSIBLE SOURCE OF ROUTING CONSTRAINTS?
							rtravstates[9] = gettravstate(globalposition.EN_REDUCE, kvdram9, globalparamsK, currentLOP, sourcestatsmarker); // CRITICAL NOTEME. POSSIBLE SOURCE OF ROUTING CONSTRAINTS?
							rtravstates[10] = gettravstate(globalposition.EN_REDUCE, kvdram10, globalparamsK, currentLOP, sourcestatsmarker); // CRITICAL NOTEME. POSSIBLE SOURCE OF ROUTING CONSTRAINTS?
							rtravstates[11] = gettravstate(globalposition.EN_REDUCE, kvdram11, globalparamsK, currentLOP, sourcestatsmarker); // CRITICAL NOTEME. POSSIBLE SOURCE OF ROUTING CONSTRAINTS?
							for(unsigned int i = 0; i < 12; i++){ ntravszs += rtravstates[i].size_kvs; }
							if(ntravszs > 0){ enablereduce = ON; } else { enablereduce = OFF; }
						}
						
						bool_type enable_loadmasks = OFF; 
						if(globalposition.EN_PROCESS == ON && enableprocess == ON){ enable_loadmasks = ON; } else { enable_loadmasks = OFF; }
						
						bool_type enable_readandreplicatevdata = OFF; 
						if((globalposition.EN_PROCESS == ON && enableprocess == ON) || (globalposition.EN_REDUCE == ON && enablereduce == ON)){ enable_readandreplicatevdata = ON; } else { enable_readandreplicatevdata = OFF; }
		
						// read vertices
						loadmany12vmasks(enable_loadmasks, vdram, vmask0,vmask1,vmask2,vmask3,vmask4,vmask5,vmask6,vmask7,vmask8,vmask9,vmask10,vmask11, vbuffer0, globalparamsV.BASEOFFSETKVS_VERTICESDATAMASK + vmaskoffset_kvs, vmaskbuffersz_kvs, globalparamsV); 
						#ifdef ENABLE_SUBVMASKING
						loadmany12vmasks_subp(enable_loadmasks, vmask0, vmask0_subp,vmask1_subp,vmask2_subp,vmask3_subp,vmask4_subp,vmask5_subp,vmask6_subp,vmask7_subp,vmask8_subp,vmask9_subp,vmask10_subp,vmask11_subp, vmaskbuffersz_kvs); 
						#endif
						readandreplicate12vdata(enable_readandreplicatevdata, vdram, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs, vbuffer0,vbuffer1,vbuffer2,vbuffer3,vbuffer4,vbuffer5,vbuffer6,vbuffer7,vbuffer8,vbuffer9,vbuffer10,vbuffer11, 0, 0, reducebuffersz, globalparamsV); 
						readandreplicate12vdata(enable_readandreplicatevdata, vdram, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs + reducebuffersz, vbuffer0,vbuffer1,vbuffer2,vbuffer3,vbuffer4,vbuffer5,vbuffer6,vbuffer7,vbuffer8,vbuffer9,vbuffer10,vbuffer11, 8, 0, reducebuffersz, globalparamsV); 
						
						// proc 
						topkernelproc_embedded(enableprocess, ON, enablereduce,  kvdram0, vbuffer0, vmask0_p, vmask0_subp, vmask0, globalstatsbuffer0, globalposition, hybridmode);	
						topkernelproc_embedded(enableprocess, ON, enablereduce,  kvdram1, vbuffer1, vmask1_p, vmask1_subp, vmask1, globalstatsbuffer1, globalposition, hybridmode);	
						topkernelproc_embedded(enableprocess, ON, enablereduce,  kvdram2, vbuffer2, vmask2_p, vmask2_subp, vmask2, globalstatsbuffer2, globalposition, hybridmode);	
						topkernelproc_embedded(enableprocess, ON, enablereduce,  kvdram3, vbuffer3, vmask3_p, vmask3_subp, vmask3, globalstatsbuffer3, globalposition, hybridmode);	
						topkernelproc_embedded(enableprocess, ON, enablereduce,  kvdram4, vbuffer4, vmask4_p, vmask4_subp, vmask4, globalstatsbuffer4, globalposition, hybridmode);	
						topkernelproc_embedded(enableprocess, ON, enablereduce,  kvdram5, vbuffer5, vmask5_p, vmask5_subp, vmask5, globalstatsbuffer5, globalposition, hybridmode);	
						topkernelproc_embedded(enableprocess, ON, enablereduce,  kvdram6, vbuffer6, vmask6_p, vmask6_subp, vmask6, globalstatsbuffer6, globalposition, hybridmode);	
						topkernelproc_embedded(enableprocess, ON, enablereduce,  kvdram7, vbuffer7, vmask7_p, vmask7_subp, vmask7, globalstatsbuffer7, globalposition, hybridmode);	
						topkernelproc_embedded(enableprocess, ON, enablereduce,  kvdram8, vbuffer8, vmask8_p, vmask8_subp, vmask8, globalstatsbuffer8, globalposition, hybridmode);	
						topkernelproc_embedded(enableprocess, ON, enablereduce,  kvdram9, vbuffer9, vmask9_p, vmask9_subp, vmask9, globalstatsbuffer9, globalposition, hybridmode);	
						topkernelproc_embedded(enableprocess, ON, enablereduce,  kvdram10, vbuffer10, vmask10_p, vmask10_subp, vmask10, globalstatsbuffer10, globalposition, hybridmode);	
						topkernelproc_embedded(enableprocess, ON, enablereduce,  kvdram11, vbuffer11, vmask11_p, vmask11_subp, vmask11, globalstatsbuffer11, globalposition, hybridmode);	
						
						// merge 
						if(globalposition.EN_REDUCE == ON && enablereduce == ON){ merge12andsavevdata(ON, vdram, vbuffer0,vbuffer1,vbuffer2,vbuffer3,vbuffer4,vbuffer5,vbuffer6,vbuffer7,vbuffer8,vbuffer9,vbuffer10,vbuffer11, 0, 0, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs); }
						if(globalposition.EN_REDUCE == ON && enablereduce == ON){ merge12andsavevdata(ON, vdram, vbuffer0,vbuffer1,vbuffer2,vbuffer3,vbuffer4,vbuffer5,vbuffer6,vbuffer7,vbuffer8,vbuffer9,vbuffer10,vbuffer11, 8, 0, globalparamsV.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffset_kvs + reducebuffersz); }
						
						// update stats
						if(globalposition.EN_REDUCE == ON){ 
							if(enablereduce == ON){ buffer[source_partition] += 64; } 
							else { buffer[source_partition] += 0; }
						}
						
						// increments
						if(globalposition.EN_PARTITION == ON || globalposition.EN_REDUCE == ON){ sourcestatsmarker += 1; }
						if(globalposition.EN_PARTITION == ON){ deststatsmarker += NUM_PARTITIONS; }
						if(globalposition.EN_PROCESS == ON){ vmaskoffset_kvs += vmaskbuffersz_kvs; }
						if(globalposition.EN_PROCESS == ON || globalposition.EN_REDUCE == ON){ vreadoffset_kvs += reducebuffersz * 2; }
					}
				}
			} // stage
		} // v_chunkid
	} // edgebankID
	
	commitkvstats(vdram, buffer, globalparamsV, reducesourcestatsmarker);
	
	#ifdef _WIDEWORD
	vdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_ALGORITHMINFO_GRAPHITERATIONID].range(31, 0) = globalparamsV.ALGORITHMINFO_GRAPHITERATIONID + 1; // CRITICAL NOTEME: Graph Iteration is incremented here
	#else
	vdram[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_ALGORITHMINFO_GRAPHITERATIONID].data[0].key = globalparamsV.ALGORITHMINFO_GRAPHITERATIONID + 1;
	#endif 
	
	#if defined(_DEBUGMODE_KERNELPRINTS2) & defined(ENABLE_SUBVMASKING)
	cout<<"topkernelP12:: subpmask status: mask_subp_is_zero: "<<mask_subp_is_zero<<", mask_subp_is_not_zero: "<<mask_subp_is_not_zero<<endl;
	#endif 
	#if defined(_DEBUGMODE_KERNELPRINTS2) & defined(DATA_SENSITIVE_ACTS)
	for(unsigned int i=0; i<MAX_NUM_PARTITIONS; i++){ cout<<"topkernelP12:: subpmask status: _chkpartitions["<<i<<"]: "<<_chkpartitions[i]<<endl;; }
	#endif 
	return;
}
}
#endif 




