#include "acts_merge.h"
using namespace std;

#ifdef SW
acts_merge::acts_merge(mydebug * _mydebugobj){ 
	actsutilityobj = new actsutility(); 
	acts_utilobj = new acts_util(_mydebugobj);
	processedges_splitdstvxsobj = new processedges_splitdstvxs(_mydebugobj);
	partitionupdatesobj = new partitionupdates(_mydebugobj);
	reduceupdatesobj = new reduceupdates(_mydebugobj);
	actsobj = new acts(_mydebugobj);
	mydebugobj = _mydebugobj;
}
acts_merge::~acts_merge(){}
#endif

// for usrcv udstv 
unsigned int acts_all::MERGE_amin(unsigned int val1, unsigned int val2){
	if(val1 < val2){ return val1; }
	else { return val2; }
}

value_t acts_all::MERGE_mergefunc(value_t value1, value_t value2, unsigned int GraphAlgo){
	return MERGE_amin(value1, value2);
}

void acts_all::MERGE_readandreplicate1vdata(bool_type enable, uint512_dt * vdram, batch_type dramoffset_kvs, keyvalue_vbuffer_t buffer0[VDATA_PACKINGSIZE][BLOCKRAM_SIZE], unsigned int begincol, batch_type bufferoffset_kvs, buffer_type size_kvs, globalparams_t globalparams){
	if(enable == OFF){ return; }
	analysis_type analysis_loopcount = BLOCKRAM_SIZE;
		
	READVDATA_LOOP: for (buffer_type i=0; i<size_kvs; i++){
	#pragma HLS LOOP_TRIPCOUNT min=0 max=analysis_loopcount avg=analysis_loopcount
	#pragma HLS PIPELINE II=1
		keyvalue_t mykeyvalue0;
		keyvalue_t mykeyvalue1;
		keyvalue_t mykeyvalue2;
		keyvalue_t mykeyvalue3;
		keyvalue_t mykeyvalue4;
		keyvalue_t mykeyvalue5;
		keyvalue_t mykeyvalue6;
		keyvalue_t mykeyvalue7;
		
		#ifdef _WIDEWORD
		mykeyvalue0.key = vdram[dramoffset_kvs + i].range(31, 0); 
		mykeyvalue0.value = vdram[dramoffset_kvs + i].range(63, 32); 
		mykeyvalue1.key = vdram[dramoffset_kvs + i].range(95, 64); 
		mykeyvalue1.value = vdram[dramoffset_kvs + i].range(127, 96); 
		mykeyvalue2.key = vdram[dramoffset_kvs + i].range(159, 128); 
		mykeyvalue2.value = vdram[dramoffset_kvs + i].range(191, 160); 
		mykeyvalue3.key = vdram[dramoffset_kvs + i].range(223, 192); 
		mykeyvalue3.value = vdram[dramoffset_kvs + i].range(255, 224); 
		mykeyvalue4.key = vdram[dramoffset_kvs + i].range(287, 256); 
		mykeyvalue4.value = vdram[dramoffset_kvs + i].range(319, 288); 
		mykeyvalue5.key = vdram[dramoffset_kvs + i].range(351, 320); 
		mykeyvalue5.value = vdram[dramoffset_kvs + i].range(383, 352); 
		mykeyvalue6.key = vdram[dramoffset_kvs + i].range(415, 384); 
		mykeyvalue6.value = vdram[dramoffset_kvs + i].range(447, 416); 
		mykeyvalue7.key = vdram[dramoffset_kvs + i].range(479, 448); 
		mykeyvalue7.value = vdram[dramoffset_kvs + i].range(511, 480); 
		#else 
		mykeyvalue0.key = vdram[dramoffset_kvs + i].data[0].key; 
		mykeyvalue0.value = vdram[dramoffset_kvs + i].data[0].value; 
		mykeyvalue1.key = vdram[dramoffset_kvs + i].data[1].key; 
		mykeyvalue1.value = vdram[dramoffset_kvs + i].data[1].value; 
		mykeyvalue2.key = vdram[dramoffset_kvs + i].data[2].key; 
		mykeyvalue2.value = vdram[dramoffset_kvs + i].data[2].value; 
		mykeyvalue3.key = vdram[dramoffset_kvs + i].data[3].key; 
		mykeyvalue3.value = vdram[dramoffset_kvs + i].data[3].value; 
		mykeyvalue4.key = vdram[dramoffset_kvs + i].data[4].key; 
		mykeyvalue4.value = vdram[dramoffset_kvs + i].data[4].value; 
		mykeyvalue5.key = vdram[dramoffset_kvs + i].data[5].key; 
		mykeyvalue5.value = vdram[dramoffset_kvs + i].data[5].value; 
		mykeyvalue6.key = vdram[dramoffset_kvs + i].data[6].key; 
		mykeyvalue6.value = vdram[dramoffset_kvs + i].data[6].value; 
		mykeyvalue7.key = vdram[dramoffset_kvs + i].data[7].key; 
		mykeyvalue7.value = vdram[dramoffset_kvs + i].data[7].value; 
		#endif 
		
		buffer0[begincol + 0][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue0);
		buffer0[begincol + 1][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue1);
		buffer0[begincol + 2][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue2);
		buffer0[begincol + 3][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue3);
		buffer0[begincol + 4][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue4);
		buffer0[begincol + 5][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue5);
		buffer0[begincol + 6][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue6);
		buffer0[begincol + 7][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue7);
		
		#ifdef _DEBUGMODE_STATS
		actsutilityobj->globalstats_countkvsread(VECTOR_SIZE);
		#endif
	}
	#ifdef _DEBUGMODE_KERNELPRINTS
	cout<< TIMINGRESULTSCOLOR<<"readvdata:: vertices read: offset: "<<dramoffset_kvs * VECTOR_SIZE<<"-"<<(dramoffset_kvs + size_kvs) * VECTOR_SIZE<<", number of vertex datas read: "<<(size_kvs * VECTOR_SIZE * 2)<<" ("<<size_kvs * VECTOR_SIZE<<" keyvalues written)"<< RESET<<endl;
	#endif
	#ifdef _DEBUGMODE_KERNELPRINTS
	if(dramoffset_kvs >= globalparams.BASEOFFSETKVS_VERTEXPTR_ && dramoffset_kvs < globalparams.BASEOFFSETKVS_VERTEXPTR + VERTEXPTRSSZ_KVS){ cout<< TIMINGRESULTSCOLOR<<"readvdata:: vertices read: offset: "<<(dramoffset_kvs - globalparams.BASEOFFSETKVS_VERTEXPTR) * VECTOR_SIZE<<"-"<<(dramoffset_kvs + size_kvs - globalparams.BASEOFFSETKVS_VERTEXPTR) * VECTOR_SIZE<<", number of vertex datas read: "<<(size_kvs * VECTOR_SIZE * 2)<<" ("<<size_kvs * VECTOR_SIZE<<" keyvalues written)"<< RESET<<endl; }
	if(dramoffset_kvs >= globalparams.BASEOFFSETKVS_VERTICESDATA_ && dramoffset_kvs < globalparams.BASEOFFSETKVS_DESTVERTICESDATA + VERTICESDATASZ_KVS){ cout<< TIMINGRESULTSCOLOR<<"readvdata:: vertices read: offset: "<<(dramoffset_kvs - globalparams.BASEOFFSETKVS_DESTVERTICESDATA) * VECTOR_SIZE<<"-"<<(dramoffset_kvs + size_kvs - globalparams.BASEOFFSETKVS_DESTVERTICESDATA) * VECTOR_SIZE<<", number of vertex datas read: "<<(size_kvs * VECTOR_SIZE * 2)<<" ("<<size_kvs * VECTOR_SIZE<<" keyvalues written)"<< RESET<<endl; }				
	#endif
	return;
}
void acts_all::MERGE_readandreplicate2vdata(bool_type enable, uint512_dt * vdram, batch_type dramoffset_kvs, keyvalue_vbuffer_t buffer0[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t buffer1[VDATA_PACKINGSIZE][BLOCKRAM_SIZE], unsigned int begincol, batch_type bufferoffset_kvs, buffer_type size_kvs, globalparams_t globalparams){
	if(enable == OFF){ return; }
	analysis_type analysis_loopcount = BLOCKRAM_SIZE;
		
	READVDATA_LOOP: for (buffer_type i=0; i<size_kvs; i++){
	#pragma HLS LOOP_TRIPCOUNT min=0 max=analysis_loopcount avg=analysis_loopcount
	#pragma HLS PIPELINE II=1
		keyvalue_t mykeyvalue0;
		keyvalue_t mykeyvalue1;
		keyvalue_t mykeyvalue2;
		keyvalue_t mykeyvalue3;
		keyvalue_t mykeyvalue4;
		keyvalue_t mykeyvalue5;
		keyvalue_t mykeyvalue6;
		keyvalue_t mykeyvalue7;
		
		#ifdef _WIDEWORD
		mykeyvalue0.key = vdram[dramoffset_kvs + i].range(31, 0); 
		mykeyvalue0.value = vdram[dramoffset_kvs + i].range(63, 32); 
		mykeyvalue1.key = vdram[dramoffset_kvs + i].range(95, 64); 
		mykeyvalue1.value = vdram[dramoffset_kvs + i].range(127, 96); 
		mykeyvalue2.key = vdram[dramoffset_kvs + i].range(159, 128); 
		mykeyvalue2.value = vdram[dramoffset_kvs + i].range(191, 160); 
		mykeyvalue3.key = vdram[dramoffset_kvs + i].range(223, 192); 
		mykeyvalue3.value = vdram[dramoffset_kvs + i].range(255, 224); 
		mykeyvalue4.key = vdram[dramoffset_kvs + i].range(287, 256); 
		mykeyvalue4.value = vdram[dramoffset_kvs + i].range(319, 288); 
		mykeyvalue5.key = vdram[dramoffset_kvs + i].range(351, 320); 
		mykeyvalue5.value = vdram[dramoffset_kvs + i].range(383, 352); 
		mykeyvalue6.key = vdram[dramoffset_kvs + i].range(415, 384); 
		mykeyvalue6.value = vdram[dramoffset_kvs + i].range(447, 416); 
		mykeyvalue7.key = vdram[dramoffset_kvs + i].range(479, 448); 
		mykeyvalue7.value = vdram[dramoffset_kvs + i].range(511, 480); 
		#else 
		mykeyvalue0.key = vdram[dramoffset_kvs + i].data[0].key; 
		mykeyvalue0.value = vdram[dramoffset_kvs + i].data[0].value; 
		mykeyvalue1.key = vdram[dramoffset_kvs + i].data[1].key; 
		mykeyvalue1.value = vdram[dramoffset_kvs + i].data[1].value; 
		mykeyvalue2.key = vdram[dramoffset_kvs + i].data[2].key; 
		mykeyvalue2.value = vdram[dramoffset_kvs + i].data[2].value; 
		mykeyvalue3.key = vdram[dramoffset_kvs + i].data[3].key; 
		mykeyvalue3.value = vdram[dramoffset_kvs + i].data[3].value; 
		mykeyvalue4.key = vdram[dramoffset_kvs + i].data[4].key; 
		mykeyvalue4.value = vdram[dramoffset_kvs + i].data[4].value; 
		mykeyvalue5.key = vdram[dramoffset_kvs + i].data[5].key; 
		mykeyvalue5.value = vdram[dramoffset_kvs + i].data[5].value; 
		mykeyvalue6.key = vdram[dramoffset_kvs + i].data[6].key; 
		mykeyvalue6.value = vdram[dramoffset_kvs + i].data[6].value; 
		mykeyvalue7.key = vdram[dramoffset_kvs + i].data[7].key; 
		mykeyvalue7.value = vdram[dramoffset_kvs + i].data[7].value; 
		#endif 
		
		buffer0[begincol + 0][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue0);
		buffer0[begincol + 1][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue1);
		buffer0[begincol + 2][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue2);
		buffer0[begincol + 3][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue3);
		buffer0[begincol + 4][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue4);
		buffer0[begincol + 5][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue5);
		buffer0[begincol + 6][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue6);
		buffer0[begincol + 7][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue7);
		buffer1[begincol + 0][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue0);
		buffer1[begincol + 1][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue1);
		buffer1[begincol + 2][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue2);
		buffer1[begincol + 3][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue3);
		buffer1[begincol + 4][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue4);
		buffer1[begincol + 5][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue5);
		buffer1[begincol + 6][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue6);
		buffer1[begincol + 7][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue7);
		
		#ifdef _DEBUGMODE_STATS
		actsutilityobj->globalstats_countkvsread(VECTOR_SIZE);
		#endif
	}
	#ifdef _DEBUGMODE_KERNELPRINTS
	cout<< TIMINGRESULTSCOLOR<<"readvdata:: vertices read: offset: "<<dramoffset_kvs * VECTOR_SIZE<<"-"<<(dramoffset_kvs + size_kvs) * VECTOR_SIZE<<", number of vertex datas read: "<<(size_kvs * VECTOR_SIZE * 2)<<" ("<<size_kvs * VECTOR_SIZE<<" keyvalues written)"<< RESET<<endl;
	#endif
	#ifdef _DEBUGMODE_KERNELPRINTS
	if(dramoffset_kvs >= globalparams.BASEOFFSETKVS_VERTEXPTR_ && dramoffset_kvs < globalparams.BASEOFFSETKVS_VERTEXPTR + VERTEXPTRSSZ_KVS){ cout<< TIMINGRESULTSCOLOR<<"readvdata:: vertices read: offset: "<<(dramoffset_kvs - globalparams.BASEOFFSETKVS_VERTEXPTR) * VECTOR_SIZE<<"-"<<(dramoffset_kvs + size_kvs - globalparams.BASEOFFSETKVS_VERTEXPTR) * VECTOR_SIZE<<", number of vertex datas read: "<<(size_kvs * VECTOR_SIZE * 2)<<" ("<<size_kvs * VECTOR_SIZE<<" keyvalues written)"<< RESET<<endl; }
	if(dramoffset_kvs >= globalparams.BASEOFFSETKVS_VERTICESDATA_ && dramoffset_kvs < globalparams.BASEOFFSETKVS_DESTVERTICESDATA + VERTICESDATASZ_KVS){ cout<< TIMINGRESULTSCOLOR<<"readvdata:: vertices read: offset: "<<(dramoffset_kvs - globalparams.BASEOFFSETKVS_DESTVERTICESDATA) * VECTOR_SIZE<<"-"<<(dramoffset_kvs + size_kvs - globalparams.BASEOFFSETKVS_DESTVERTICESDATA) * VECTOR_SIZE<<", number of vertex datas read: "<<(size_kvs * VECTOR_SIZE * 2)<<" ("<<size_kvs * VECTOR_SIZE<<" keyvalues written)"<< RESET<<endl; }				
	#endif
	return;
}
void acts_all::MERGE_readandreplicate3vdata(bool_type enable, uint512_dt * vdram, batch_type dramoffset_kvs, keyvalue_vbuffer_t buffer0[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t buffer1[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t buffer2[VDATA_PACKINGSIZE][BLOCKRAM_SIZE], unsigned int begincol, batch_type bufferoffset_kvs, buffer_type size_kvs, globalparams_t globalparams){
	if(enable == OFF){ return; }
	analysis_type analysis_loopcount = BLOCKRAM_SIZE;
		
	READVDATA_LOOP: for (buffer_type i=0; i<size_kvs; i++){
	#pragma HLS LOOP_TRIPCOUNT min=0 max=analysis_loopcount avg=analysis_loopcount
	#pragma HLS PIPELINE II=1
		keyvalue_t mykeyvalue0;
		keyvalue_t mykeyvalue1;
		keyvalue_t mykeyvalue2;
		keyvalue_t mykeyvalue3;
		keyvalue_t mykeyvalue4;
		keyvalue_t mykeyvalue5;
		keyvalue_t mykeyvalue6;
		keyvalue_t mykeyvalue7;
		
		#ifdef _WIDEWORD
		mykeyvalue0.key = vdram[dramoffset_kvs + i].range(31, 0); 
		mykeyvalue0.value = vdram[dramoffset_kvs + i].range(63, 32); 
		mykeyvalue1.key = vdram[dramoffset_kvs + i].range(95, 64); 
		mykeyvalue1.value = vdram[dramoffset_kvs + i].range(127, 96); 
		mykeyvalue2.key = vdram[dramoffset_kvs + i].range(159, 128); 
		mykeyvalue2.value = vdram[dramoffset_kvs + i].range(191, 160); 
		mykeyvalue3.key = vdram[dramoffset_kvs + i].range(223, 192); 
		mykeyvalue3.value = vdram[dramoffset_kvs + i].range(255, 224); 
		mykeyvalue4.key = vdram[dramoffset_kvs + i].range(287, 256); 
		mykeyvalue4.value = vdram[dramoffset_kvs + i].range(319, 288); 
		mykeyvalue5.key = vdram[dramoffset_kvs + i].range(351, 320); 
		mykeyvalue5.value = vdram[dramoffset_kvs + i].range(383, 352); 
		mykeyvalue6.key = vdram[dramoffset_kvs + i].range(415, 384); 
		mykeyvalue6.value = vdram[dramoffset_kvs + i].range(447, 416); 
		mykeyvalue7.key = vdram[dramoffset_kvs + i].range(479, 448); 
		mykeyvalue7.value = vdram[dramoffset_kvs + i].range(511, 480); 
		#else 
		mykeyvalue0.key = vdram[dramoffset_kvs + i].data[0].key; 
		mykeyvalue0.value = vdram[dramoffset_kvs + i].data[0].value; 
		mykeyvalue1.key = vdram[dramoffset_kvs + i].data[1].key; 
		mykeyvalue1.value = vdram[dramoffset_kvs + i].data[1].value; 
		mykeyvalue2.key = vdram[dramoffset_kvs + i].data[2].key; 
		mykeyvalue2.value = vdram[dramoffset_kvs + i].data[2].value; 
		mykeyvalue3.key = vdram[dramoffset_kvs + i].data[3].key; 
		mykeyvalue3.value = vdram[dramoffset_kvs + i].data[3].value; 
		mykeyvalue4.key = vdram[dramoffset_kvs + i].data[4].key; 
		mykeyvalue4.value = vdram[dramoffset_kvs + i].data[4].value; 
		mykeyvalue5.key = vdram[dramoffset_kvs + i].data[5].key; 
		mykeyvalue5.value = vdram[dramoffset_kvs + i].data[5].value; 
		mykeyvalue6.key = vdram[dramoffset_kvs + i].data[6].key; 
		mykeyvalue6.value = vdram[dramoffset_kvs + i].data[6].value; 
		mykeyvalue7.key = vdram[dramoffset_kvs + i].data[7].key; 
		mykeyvalue7.value = vdram[dramoffset_kvs + i].data[7].value; 
		#endif 
		
		buffer0[begincol + 0][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue0);
		buffer0[begincol + 1][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue1);
		buffer0[begincol + 2][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue2);
		buffer0[begincol + 3][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue3);
		buffer0[begincol + 4][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue4);
		buffer0[begincol + 5][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue5);
		buffer0[begincol + 6][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue6);
		buffer0[begincol + 7][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue7);
		buffer1[begincol + 0][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue0);
		buffer1[begincol + 1][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue1);
		buffer1[begincol + 2][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue2);
		buffer1[begincol + 3][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue3);
		buffer1[begincol + 4][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue4);
		buffer1[begincol + 5][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue5);
		buffer1[begincol + 6][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue6);
		buffer1[begincol + 7][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue7);
		buffer2[begincol + 0][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue0);
		buffer2[begincol + 1][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue1);
		buffer2[begincol + 2][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue2);
		buffer2[begincol + 3][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue3);
		buffer2[begincol + 4][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue4);
		buffer2[begincol + 5][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue5);
		buffer2[begincol + 6][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue6);
		buffer2[begincol + 7][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue7);
		
		#ifdef _DEBUGMODE_STATS
		actsutilityobj->globalstats_countkvsread(VECTOR_SIZE);
		#endif
	}
	#ifdef _DEBUGMODE_KERNELPRINTS
	cout<< TIMINGRESULTSCOLOR<<"readvdata:: vertices read: offset: "<<dramoffset_kvs * VECTOR_SIZE<<"-"<<(dramoffset_kvs + size_kvs) * VECTOR_SIZE<<", number of vertex datas read: "<<(size_kvs * VECTOR_SIZE * 2)<<" ("<<size_kvs * VECTOR_SIZE<<" keyvalues written)"<< RESET<<endl;
	#endif
	#ifdef _DEBUGMODE_KERNELPRINTS
	if(dramoffset_kvs >= globalparams.BASEOFFSETKVS_VERTEXPTR_ && dramoffset_kvs < globalparams.BASEOFFSETKVS_VERTEXPTR + VERTEXPTRSSZ_KVS){ cout<< TIMINGRESULTSCOLOR<<"readvdata:: vertices read: offset: "<<(dramoffset_kvs - globalparams.BASEOFFSETKVS_VERTEXPTR) * VECTOR_SIZE<<"-"<<(dramoffset_kvs + size_kvs - globalparams.BASEOFFSETKVS_VERTEXPTR) * VECTOR_SIZE<<", number of vertex datas read: "<<(size_kvs * VECTOR_SIZE * 2)<<" ("<<size_kvs * VECTOR_SIZE<<" keyvalues written)"<< RESET<<endl; }
	if(dramoffset_kvs >= globalparams.BASEOFFSETKVS_VERTICESDATA_ && dramoffset_kvs < globalparams.BASEOFFSETKVS_DESTVERTICESDATA + VERTICESDATASZ_KVS){ cout<< TIMINGRESULTSCOLOR<<"readvdata:: vertices read: offset: "<<(dramoffset_kvs - globalparams.BASEOFFSETKVS_DESTVERTICESDATA) * VECTOR_SIZE<<"-"<<(dramoffset_kvs + size_kvs - globalparams.BASEOFFSETKVS_DESTVERTICESDATA) * VECTOR_SIZE<<", number of vertex datas read: "<<(size_kvs * VECTOR_SIZE * 2)<<" ("<<size_kvs * VECTOR_SIZE<<" keyvalues written)"<< RESET<<endl; }				
	#endif
	return;
}
void acts_all::MERGE_readandreplicate4vdata(bool_type enable, uint512_dt * vdram, batch_type dramoffset_kvs, keyvalue_vbuffer_t buffer0[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t buffer1[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t buffer2[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t buffer3[VDATA_PACKINGSIZE][BLOCKRAM_SIZE], unsigned int begincol, batch_type bufferoffset_kvs, buffer_type size_kvs, globalparams_t globalparams){
	if(enable == OFF){ return; }
	analysis_type analysis_loopcount = BLOCKRAM_SIZE;
		
	READVDATA_LOOP: for (buffer_type i=0; i<size_kvs; i++){
	#pragma HLS LOOP_TRIPCOUNT min=0 max=analysis_loopcount avg=analysis_loopcount
	#pragma HLS PIPELINE II=1
		keyvalue_t mykeyvalue0;
		keyvalue_t mykeyvalue1;
		keyvalue_t mykeyvalue2;
		keyvalue_t mykeyvalue3;
		keyvalue_t mykeyvalue4;
		keyvalue_t mykeyvalue5;
		keyvalue_t mykeyvalue6;
		keyvalue_t mykeyvalue7;
		
		#ifdef _WIDEWORD
		mykeyvalue0.key = vdram[dramoffset_kvs + i].range(31, 0); 
		mykeyvalue0.value = vdram[dramoffset_kvs + i].range(63, 32); 
		mykeyvalue1.key = vdram[dramoffset_kvs + i].range(95, 64); 
		mykeyvalue1.value = vdram[dramoffset_kvs + i].range(127, 96); 
		mykeyvalue2.key = vdram[dramoffset_kvs + i].range(159, 128); 
		mykeyvalue2.value = vdram[dramoffset_kvs + i].range(191, 160); 
		mykeyvalue3.key = vdram[dramoffset_kvs + i].range(223, 192); 
		mykeyvalue3.value = vdram[dramoffset_kvs + i].range(255, 224); 
		mykeyvalue4.key = vdram[dramoffset_kvs + i].range(287, 256); 
		mykeyvalue4.value = vdram[dramoffset_kvs + i].range(319, 288); 
		mykeyvalue5.key = vdram[dramoffset_kvs + i].range(351, 320); 
		mykeyvalue5.value = vdram[dramoffset_kvs + i].range(383, 352); 
		mykeyvalue6.key = vdram[dramoffset_kvs + i].range(415, 384); 
		mykeyvalue6.value = vdram[dramoffset_kvs + i].range(447, 416); 
		mykeyvalue7.key = vdram[dramoffset_kvs + i].range(479, 448); 
		mykeyvalue7.value = vdram[dramoffset_kvs + i].range(511, 480); 
		#else 
		mykeyvalue0.key = vdram[dramoffset_kvs + i].data[0].key; 
		mykeyvalue0.value = vdram[dramoffset_kvs + i].data[0].value; 
		mykeyvalue1.key = vdram[dramoffset_kvs + i].data[1].key; 
		mykeyvalue1.value = vdram[dramoffset_kvs + i].data[1].value; 
		mykeyvalue2.key = vdram[dramoffset_kvs + i].data[2].key; 
		mykeyvalue2.value = vdram[dramoffset_kvs + i].data[2].value; 
		mykeyvalue3.key = vdram[dramoffset_kvs + i].data[3].key; 
		mykeyvalue3.value = vdram[dramoffset_kvs + i].data[3].value; 
		mykeyvalue4.key = vdram[dramoffset_kvs + i].data[4].key; 
		mykeyvalue4.value = vdram[dramoffset_kvs + i].data[4].value; 
		mykeyvalue5.key = vdram[dramoffset_kvs + i].data[5].key; 
		mykeyvalue5.value = vdram[dramoffset_kvs + i].data[5].value; 
		mykeyvalue6.key = vdram[dramoffset_kvs + i].data[6].key; 
		mykeyvalue6.value = vdram[dramoffset_kvs + i].data[6].value; 
		mykeyvalue7.key = vdram[dramoffset_kvs + i].data[7].key; 
		mykeyvalue7.value = vdram[dramoffset_kvs + i].data[7].value; 
		#endif 
		
		buffer0[begincol + 0][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue0);
		buffer0[begincol + 1][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue1);
		buffer0[begincol + 2][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue2);
		buffer0[begincol + 3][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue3);
		buffer0[begincol + 4][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue4);
		buffer0[begincol + 5][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue5);
		buffer0[begincol + 6][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue6);
		buffer0[begincol + 7][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue7);
		buffer1[begincol + 0][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue0);
		buffer1[begincol + 1][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue1);
		buffer1[begincol + 2][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue2);
		buffer1[begincol + 3][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue3);
		buffer1[begincol + 4][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue4);
		buffer1[begincol + 5][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue5);
		buffer1[begincol + 6][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue6);
		buffer1[begincol + 7][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue7);
		buffer2[begincol + 0][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue0);
		buffer2[begincol + 1][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue1);
		buffer2[begincol + 2][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue2);
		buffer2[begincol + 3][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue3);
		buffer2[begincol + 4][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue4);
		buffer2[begincol + 5][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue5);
		buffer2[begincol + 6][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue6);
		buffer2[begincol + 7][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue7);
		buffer3[begincol + 0][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue0);
		buffer3[begincol + 1][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue1);
		buffer3[begincol + 2][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue2);
		buffer3[begincol + 3][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue3);
		buffer3[begincol + 4][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue4);
		buffer3[begincol + 5][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue5);
		buffer3[begincol + 6][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue6);
		buffer3[begincol + 7][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue7);
		
		#ifdef _DEBUGMODE_STATS
		actsutilityobj->globalstats_countkvsread(VECTOR_SIZE);
		#endif
	}
	#ifdef _DEBUGMODE_KERNELPRINTS
	cout<< TIMINGRESULTSCOLOR<<"readvdata:: vertices read: offset: "<<dramoffset_kvs * VECTOR_SIZE<<"-"<<(dramoffset_kvs + size_kvs) * VECTOR_SIZE<<", number of vertex datas read: "<<(size_kvs * VECTOR_SIZE * 2)<<" ("<<size_kvs * VECTOR_SIZE<<" keyvalues written)"<< RESET<<endl;
	#endif
	#ifdef _DEBUGMODE_KERNELPRINTS
	if(dramoffset_kvs >= globalparams.BASEOFFSETKVS_VERTEXPTR_ && dramoffset_kvs < globalparams.BASEOFFSETKVS_VERTEXPTR + VERTEXPTRSSZ_KVS){ cout<< TIMINGRESULTSCOLOR<<"readvdata:: vertices read: offset: "<<(dramoffset_kvs - globalparams.BASEOFFSETKVS_VERTEXPTR) * VECTOR_SIZE<<"-"<<(dramoffset_kvs + size_kvs - globalparams.BASEOFFSETKVS_VERTEXPTR) * VECTOR_SIZE<<", number of vertex datas read: "<<(size_kvs * VECTOR_SIZE * 2)<<" ("<<size_kvs * VECTOR_SIZE<<" keyvalues written)"<< RESET<<endl; }
	if(dramoffset_kvs >= globalparams.BASEOFFSETKVS_VERTICESDATA_ && dramoffset_kvs < globalparams.BASEOFFSETKVS_DESTVERTICESDATA + VERTICESDATASZ_KVS){ cout<< TIMINGRESULTSCOLOR<<"readvdata:: vertices read: offset: "<<(dramoffset_kvs - globalparams.BASEOFFSETKVS_DESTVERTICESDATA) * VECTOR_SIZE<<"-"<<(dramoffset_kvs + size_kvs - globalparams.BASEOFFSETKVS_DESTVERTICESDATA) * VECTOR_SIZE<<", number of vertex datas read: "<<(size_kvs * VECTOR_SIZE * 2)<<" ("<<size_kvs * VECTOR_SIZE<<" keyvalues written)"<< RESET<<endl; }				
	#endif
	return;
}
void acts_all::MERGE_readandreplicate5vdata(bool_type enable, uint512_dt * vdram, batch_type dramoffset_kvs, keyvalue_vbuffer_t buffer0[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t buffer1[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t buffer2[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t buffer3[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t buffer4[VDATA_PACKINGSIZE][BLOCKRAM_SIZE], unsigned int begincol, batch_type bufferoffset_kvs, buffer_type size_kvs, globalparams_t globalparams){
	if(enable == OFF){ return; }
	analysis_type analysis_loopcount = BLOCKRAM_SIZE;
		
	READVDATA_LOOP: for (buffer_type i=0; i<size_kvs; i++){
	#pragma HLS LOOP_TRIPCOUNT min=0 max=analysis_loopcount avg=analysis_loopcount
	#pragma HLS PIPELINE II=1
		keyvalue_t mykeyvalue0;
		keyvalue_t mykeyvalue1;
		keyvalue_t mykeyvalue2;
		keyvalue_t mykeyvalue3;
		keyvalue_t mykeyvalue4;
		keyvalue_t mykeyvalue5;
		keyvalue_t mykeyvalue6;
		keyvalue_t mykeyvalue7;
		
		#ifdef _WIDEWORD
		mykeyvalue0.key = vdram[dramoffset_kvs + i].range(31, 0); 
		mykeyvalue0.value = vdram[dramoffset_kvs + i].range(63, 32); 
		mykeyvalue1.key = vdram[dramoffset_kvs + i].range(95, 64); 
		mykeyvalue1.value = vdram[dramoffset_kvs + i].range(127, 96); 
		mykeyvalue2.key = vdram[dramoffset_kvs + i].range(159, 128); 
		mykeyvalue2.value = vdram[dramoffset_kvs + i].range(191, 160); 
		mykeyvalue3.key = vdram[dramoffset_kvs + i].range(223, 192); 
		mykeyvalue3.value = vdram[dramoffset_kvs + i].range(255, 224); 
		mykeyvalue4.key = vdram[dramoffset_kvs + i].range(287, 256); 
		mykeyvalue4.value = vdram[dramoffset_kvs + i].range(319, 288); 
		mykeyvalue5.key = vdram[dramoffset_kvs + i].range(351, 320); 
		mykeyvalue5.value = vdram[dramoffset_kvs + i].range(383, 352); 
		mykeyvalue6.key = vdram[dramoffset_kvs + i].range(415, 384); 
		mykeyvalue6.value = vdram[dramoffset_kvs + i].range(447, 416); 
		mykeyvalue7.key = vdram[dramoffset_kvs + i].range(479, 448); 
		mykeyvalue7.value = vdram[dramoffset_kvs + i].range(511, 480); 
		#else 
		mykeyvalue0.key = vdram[dramoffset_kvs + i].data[0].key; 
		mykeyvalue0.value = vdram[dramoffset_kvs + i].data[0].value; 
		mykeyvalue1.key = vdram[dramoffset_kvs + i].data[1].key; 
		mykeyvalue1.value = vdram[dramoffset_kvs + i].data[1].value; 
		mykeyvalue2.key = vdram[dramoffset_kvs + i].data[2].key; 
		mykeyvalue2.value = vdram[dramoffset_kvs + i].data[2].value; 
		mykeyvalue3.key = vdram[dramoffset_kvs + i].data[3].key; 
		mykeyvalue3.value = vdram[dramoffset_kvs + i].data[3].value; 
		mykeyvalue4.key = vdram[dramoffset_kvs + i].data[4].key; 
		mykeyvalue4.value = vdram[dramoffset_kvs + i].data[4].value; 
		mykeyvalue5.key = vdram[dramoffset_kvs + i].data[5].key; 
		mykeyvalue5.value = vdram[dramoffset_kvs + i].data[5].value; 
		mykeyvalue6.key = vdram[dramoffset_kvs + i].data[6].key; 
		mykeyvalue6.value = vdram[dramoffset_kvs + i].data[6].value; 
		mykeyvalue7.key = vdram[dramoffset_kvs + i].data[7].key; 
		mykeyvalue7.value = vdram[dramoffset_kvs + i].data[7].value; 
		#endif 
		
		buffer0[begincol + 0][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue0);
		buffer0[begincol + 1][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue1);
		buffer0[begincol + 2][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue2);
		buffer0[begincol + 3][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue3);
		buffer0[begincol + 4][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue4);
		buffer0[begincol + 5][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue5);
		buffer0[begincol + 6][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue6);
		buffer0[begincol + 7][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue7);
		buffer1[begincol + 0][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue0);
		buffer1[begincol + 1][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue1);
		buffer1[begincol + 2][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue2);
		buffer1[begincol + 3][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue3);
		buffer1[begincol + 4][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue4);
		buffer1[begincol + 5][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue5);
		buffer1[begincol + 6][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue6);
		buffer1[begincol + 7][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue7);
		buffer2[begincol + 0][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue0);
		buffer2[begincol + 1][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue1);
		buffer2[begincol + 2][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue2);
		buffer2[begincol + 3][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue3);
		buffer2[begincol + 4][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue4);
		buffer2[begincol + 5][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue5);
		buffer2[begincol + 6][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue6);
		buffer2[begincol + 7][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue7);
		buffer3[begincol + 0][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue0);
		buffer3[begincol + 1][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue1);
		buffer3[begincol + 2][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue2);
		buffer3[begincol + 3][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue3);
		buffer3[begincol + 4][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue4);
		buffer3[begincol + 5][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue5);
		buffer3[begincol + 6][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue6);
		buffer3[begincol + 7][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue7);
		buffer4[begincol + 0][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue0);
		buffer4[begincol + 1][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue1);
		buffer4[begincol + 2][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue2);
		buffer4[begincol + 3][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue3);
		buffer4[begincol + 4][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue4);
		buffer4[begincol + 5][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue5);
		buffer4[begincol + 6][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue6);
		buffer4[begincol + 7][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue7);
		
		#ifdef _DEBUGMODE_STATS
		actsutilityobj->globalstats_countkvsread(VECTOR_SIZE);
		#endif
	}
	#ifdef _DEBUGMODE_KERNELPRINTS
	cout<< TIMINGRESULTSCOLOR<<"readvdata:: vertices read: offset: "<<dramoffset_kvs * VECTOR_SIZE<<"-"<<(dramoffset_kvs + size_kvs) * VECTOR_SIZE<<", number of vertex datas read: "<<(size_kvs * VECTOR_SIZE * 2)<<" ("<<size_kvs * VECTOR_SIZE<<" keyvalues written)"<< RESET<<endl;
	#endif
	#ifdef _DEBUGMODE_KERNELPRINTS
	if(dramoffset_kvs >= globalparams.BASEOFFSETKVS_VERTEXPTR_ && dramoffset_kvs < globalparams.BASEOFFSETKVS_VERTEXPTR + VERTEXPTRSSZ_KVS){ cout<< TIMINGRESULTSCOLOR<<"readvdata:: vertices read: offset: "<<(dramoffset_kvs - globalparams.BASEOFFSETKVS_VERTEXPTR) * VECTOR_SIZE<<"-"<<(dramoffset_kvs + size_kvs - globalparams.BASEOFFSETKVS_VERTEXPTR) * VECTOR_SIZE<<", number of vertex datas read: "<<(size_kvs * VECTOR_SIZE * 2)<<" ("<<size_kvs * VECTOR_SIZE<<" keyvalues written)"<< RESET<<endl; }
	if(dramoffset_kvs >= globalparams.BASEOFFSETKVS_VERTICESDATA_ && dramoffset_kvs < globalparams.BASEOFFSETKVS_DESTVERTICESDATA + VERTICESDATASZ_KVS){ cout<< TIMINGRESULTSCOLOR<<"readvdata:: vertices read: offset: "<<(dramoffset_kvs - globalparams.BASEOFFSETKVS_DESTVERTICESDATA) * VECTOR_SIZE<<"-"<<(dramoffset_kvs + size_kvs - globalparams.BASEOFFSETKVS_DESTVERTICESDATA) * VECTOR_SIZE<<", number of vertex datas read: "<<(size_kvs * VECTOR_SIZE * 2)<<" ("<<size_kvs * VECTOR_SIZE<<" keyvalues written)"<< RESET<<endl; }				
	#endif
	return;
}
void acts_all::MERGE_readandreplicate6vdata(bool_type enable, uint512_dt * vdram, batch_type dramoffset_kvs, keyvalue_vbuffer_t buffer0[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t buffer1[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t buffer2[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t buffer3[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t buffer4[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t buffer5[VDATA_PACKINGSIZE][BLOCKRAM_SIZE], unsigned int begincol, batch_type bufferoffset_kvs, buffer_type size_kvs, globalparams_t globalparams){
	if(enable == OFF){ return; }
	analysis_type analysis_loopcount = BLOCKRAM_SIZE;
		
	READVDATA_LOOP: for (buffer_type i=0; i<size_kvs; i++){
	#pragma HLS LOOP_TRIPCOUNT min=0 max=analysis_loopcount avg=analysis_loopcount
	#pragma HLS PIPELINE II=1
		keyvalue_t mykeyvalue0;
		keyvalue_t mykeyvalue1;
		keyvalue_t mykeyvalue2;
		keyvalue_t mykeyvalue3;
		keyvalue_t mykeyvalue4;
		keyvalue_t mykeyvalue5;
		keyvalue_t mykeyvalue6;
		keyvalue_t mykeyvalue7;
		
		#ifdef _WIDEWORD
		mykeyvalue0.key = vdram[dramoffset_kvs + i].range(31, 0); 
		mykeyvalue0.value = vdram[dramoffset_kvs + i].range(63, 32); 
		mykeyvalue1.key = vdram[dramoffset_kvs + i].range(95, 64); 
		mykeyvalue1.value = vdram[dramoffset_kvs + i].range(127, 96); 
		mykeyvalue2.key = vdram[dramoffset_kvs + i].range(159, 128); 
		mykeyvalue2.value = vdram[dramoffset_kvs + i].range(191, 160); 
		mykeyvalue3.key = vdram[dramoffset_kvs + i].range(223, 192); 
		mykeyvalue3.value = vdram[dramoffset_kvs + i].range(255, 224); 
		mykeyvalue4.key = vdram[dramoffset_kvs + i].range(287, 256); 
		mykeyvalue4.value = vdram[dramoffset_kvs + i].range(319, 288); 
		mykeyvalue5.key = vdram[dramoffset_kvs + i].range(351, 320); 
		mykeyvalue5.value = vdram[dramoffset_kvs + i].range(383, 352); 
		mykeyvalue6.key = vdram[dramoffset_kvs + i].range(415, 384); 
		mykeyvalue6.value = vdram[dramoffset_kvs + i].range(447, 416); 
		mykeyvalue7.key = vdram[dramoffset_kvs + i].range(479, 448); 
		mykeyvalue7.value = vdram[dramoffset_kvs + i].range(511, 480); 
		#else 
		mykeyvalue0.key = vdram[dramoffset_kvs + i].data[0].key; 
		mykeyvalue0.value = vdram[dramoffset_kvs + i].data[0].value; 
		mykeyvalue1.key = vdram[dramoffset_kvs + i].data[1].key; 
		mykeyvalue1.value = vdram[dramoffset_kvs + i].data[1].value; 
		mykeyvalue2.key = vdram[dramoffset_kvs + i].data[2].key; 
		mykeyvalue2.value = vdram[dramoffset_kvs + i].data[2].value; 
		mykeyvalue3.key = vdram[dramoffset_kvs + i].data[3].key; 
		mykeyvalue3.value = vdram[dramoffset_kvs + i].data[3].value; 
		mykeyvalue4.key = vdram[dramoffset_kvs + i].data[4].key; 
		mykeyvalue4.value = vdram[dramoffset_kvs + i].data[4].value; 
		mykeyvalue5.key = vdram[dramoffset_kvs + i].data[5].key; 
		mykeyvalue5.value = vdram[dramoffset_kvs + i].data[5].value; 
		mykeyvalue6.key = vdram[dramoffset_kvs + i].data[6].key; 
		mykeyvalue6.value = vdram[dramoffset_kvs + i].data[6].value; 
		mykeyvalue7.key = vdram[dramoffset_kvs + i].data[7].key; 
		mykeyvalue7.value = vdram[dramoffset_kvs + i].data[7].value; 
		#endif 
		
		buffer0[begincol + 0][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue0);
		buffer0[begincol + 1][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue1);
		buffer0[begincol + 2][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue2);
		buffer0[begincol + 3][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue3);
		buffer0[begincol + 4][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue4);
		buffer0[begincol + 5][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue5);
		buffer0[begincol + 6][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue6);
		buffer0[begincol + 7][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue7);
		buffer1[begincol + 0][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue0);
		buffer1[begincol + 1][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue1);
		buffer1[begincol + 2][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue2);
		buffer1[begincol + 3][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue3);
		buffer1[begincol + 4][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue4);
		buffer1[begincol + 5][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue5);
		buffer1[begincol + 6][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue6);
		buffer1[begincol + 7][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue7);
		buffer2[begincol + 0][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue0);
		buffer2[begincol + 1][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue1);
		buffer2[begincol + 2][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue2);
		buffer2[begincol + 3][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue3);
		buffer2[begincol + 4][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue4);
		buffer2[begincol + 5][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue5);
		buffer2[begincol + 6][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue6);
		buffer2[begincol + 7][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue7);
		buffer3[begincol + 0][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue0);
		buffer3[begincol + 1][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue1);
		buffer3[begincol + 2][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue2);
		buffer3[begincol + 3][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue3);
		buffer3[begincol + 4][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue4);
		buffer3[begincol + 5][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue5);
		buffer3[begincol + 6][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue6);
		buffer3[begincol + 7][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue7);
		buffer4[begincol + 0][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue0);
		buffer4[begincol + 1][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue1);
		buffer4[begincol + 2][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue2);
		buffer4[begincol + 3][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue3);
		buffer4[begincol + 4][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue4);
		buffer4[begincol + 5][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue5);
		buffer4[begincol + 6][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue6);
		buffer4[begincol + 7][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue7);
		buffer5[begincol + 0][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue0);
		buffer5[begincol + 1][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue1);
		buffer5[begincol + 2][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue2);
		buffer5[begincol + 3][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue3);
		buffer5[begincol + 4][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue4);
		buffer5[begincol + 5][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue5);
		buffer5[begincol + 6][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue6);
		buffer5[begincol + 7][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue7);
		
		#ifdef _DEBUGMODE_STATS
		actsutilityobj->globalstats_countkvsread(VECTOR_SIZE);
		#endif
	}
	#ifdef _DEBUGMODE_KERNELPRINTS
	cout<< TIMINGRESULTSCOLOR<<"readvdata:: vertices read: offset: "<<dramoffset_kvs * VECTOR_SIZE<<"-"<<(dramoffset_kvs + size_kvs) * VECTOR_SIZE<<", number of vertex datas read: "<<(size_kvs * VECTOR_SIZE * 2)<<" ("<<size_kvs * VECTOR_SIZE<<" keyvalues written)"<< RESET<<endl;
	#endif
	#ifdef _DEBUGMODE_KERNELPRINTS
	if(dramoffset_kvs >= globalparams.BASEOFFSETKVS_VERTEXPTR_ && dramoffset_kvs < globalparams.BASEOFFSETKVS_VERTEXPTR + VERTEXPTRSSZ_KVS){ cout<< TIMINGRESULTSCOLOR<<"readvdata:: vertices read: offset: "<<(dramoffset_kvs - globalparams.BASEOFFSETKVS_VERTEXPTR) * VECTOR_SIZE<<"-"<<(dramoffset_kvs + size_kvs - globalparams.BASEOFFSETKVS_VERTEXPTR) * VECTOR_SIZE<<", number of vertex datas read: "<<(size_kvs * VECTOR_SIZE * 2)<<" ("<<size_kvs * VECTOR_SIZE<<" keyvalues written)"<< RESET<<endl; }
	if(dramoffset_kvs >= globalparams.BASEOFFSETKVS_VERTICESDATA_ && dramoffset_kvs < globalparams.BASEOFFSETKVS_DESTVERTICESDATA + VERTICESDATASZ_KVS){ cout<< TIMINGRESULTSCOLOR<<"readvdata:: vertices read: offset: "<<(dramoffset_kvs - globalparams.BASEOFFSETKVS_DESTVERTICESDATA) * VECTOR_SIZE<<"-"<<(dramoffset_kvs + size_kvs - globalparams.BASEOFFSETKVS_DESTVERTICESDATA) * VECTOR_SIZE<<", number of vertex datas read: "<<(size_kvs * VECTOR_SIZE * 2)<<" ("<<size_kvs * VECTOR_SIZE<<" keyvalues written)"<< RESET<<endl; }				
	#endif
	return;
}
void acts_all::MERGE_readandreplicate7vdata(bool_type enable, uint512_dt * vdram, batch_type dramoffset_kvs, keyvalue_vbuffer_t buffer0[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t buffer1[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t buffer2[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t buffer3[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t buffer4[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t buffer5[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t buffer6[VDATA_PACKINGSIZE][BLOCKRAM_SIZE], unsigned int begincol, batch_type bufferoffset_kvs, buffer_type size_kvs, globalparams_t globalparams){
	if(enable == OFF){ return; }
	analysis_type analysis_loopcount = BLOCKRAM_SIZE;
		
	READVDATA_LOOP: for (buffer_type i=0; i<size_kvs; i++){
	#pragma HLS LOOP_TRIPCOUNT min=0 max=analysis_loopcount avg=analysis_loopcount
	#pragma HLS PIPELINE II=1
		keyvalue_t mykeyvalue0;
		keyvalue_t mykeyvalue1;
		keyvalue_t mykeyvalue2;
		keyvalue_t mykeyvalue3;
		keyvalue_t mykeyvalue4;
		keyvalue_t mykeyvalue5;
		keyvalue_t mykeyvalue6;
		keyvalue_t mykeyvalue7;
		
		#ifdef _WIDEWORD
		mykeyvalue0.key = vdram[dramoffset_kvs + i].range(31, 0); 
		mykeyvalue0.value = vdram[dramoffset_kvs + i].range(63, 32); 
		mykeyvalue1.key = vdram[dramoffset_kvs + i].range(95, 64); 
		mykeyvalue1.value = vdram[dramoffset_kvs + i].range(127, 96); 
		mykeyvalue2.key = vdram[dramoffset_kvs + i].range(159, 128); 
		mykeyvalue2.value = vdram[dramoffset_kvs + i].range(191, 160); 
		mykeyvalue3.key = vdram[dramoffset_kvs + i].range(223, 192); 
		mykeyvalue3.value = vdram[dramoffset_kvs + i].range(255, 224); 
		mykeyvalue4.key = vdram[dramoffset_kvs + i].range(287, 256); 
		mykeyvalue4.value = vdram[dramoffset_kvs + i].range(319, 288); 
		mykeyvalue5.key = vdram[dramoffset_kvs + i].range(351, 320); 
		mykeyvalue5.value = vdram[dramoffset_kvs + i].range(383, 352); 
		mykeyvalue6.key = vdram[dramoffset_kvs + i].range(415, 384); 
		mykeyvalue6.value = vdram[dramoffset_kvs + i].range(447, 416); 
		mykeyvalue7.key = vdram[dramoffset_kvs + i].range(479, 448); 
		mykeyvalue7.value = vdram[dramoffset_kvs + i].range(511, 480); 
		#else 
		mykeyvalue0.key = vdram[dramoffset_kvs + i].data[0].key; 
		mykeyvalue0.value = vdram[dramoffset_kvs + i].data[0].value; 
		mykeyvalue1.key = vdram[dramoffset_kvs + i].data[1].key; 
		mykeyvalue1.value = vdram[dramoffset_kvs + i].data[1].value; 
		mykeyvalue2.key = vdram[dramoffset_kvs + i].data[2].key; 
		mykeyvalue2.value = vdram[dramoffset_kvs + i].data[2].value; 
		mykeyvalue3.key = vdram[dramoffset_kvs + i].data[3].key; 
		mykeyvalue3.value = vdram[dramoffset_kvs + i].data[3].value; 
		mykeyvalue4.key = vdram[dramoffset_kvs + i].data[4].key; 
		mykeyvalue4.value = vdram[dramoffset_kvs + i].data[4].value; 
		mykeyvalue5.key = vdram[dramoffset_kvs + i].data[5].key; 
		mykeyvalue5.value = vdram[dramoffset_kvs + i].data[5].value; 
		mykeyvalue6.key = vdram[dramoffset_kvs + i].data[6].key; 
		mykeyvalue6.value = vdram[dramoffset_kvs + i].data[6].value; 
		mykeyvalue7.key = vdram[dramoffset_kvs + i].data[7].key; 
		mykeyvalue7.value = vdram[dramoffset_kvs + i].data[7].value; 
		#endif 
		
		buffer0[begincol + 0][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue0);
		buffer0[begincol + 1][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue1);
		buffer0[begincol + 2][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue2);
		buffer0[begincol + 3][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue3);
		buffer0[begincol + 4][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue4);
		buffer0[begincol + 5][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue5);
		buffer0[begincol + 6][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue6);
		buffer0[begincol + 7][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue7);
		buffer1[begincol + 0][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue0);
		buffer1[begincol + 1][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue1);
		buffer1[begincol + 2][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue2);
		buffer1[begincol + 3][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue3);
		buffer1[begincol + 4][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue4);
		buffer1[begincol + 5][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue5);
		buffer1[begincol + 6][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue6);
		buffer1[begincol + 7][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue7);
		buffer2[begincol + 0][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue0);
		buffer2[begincol + 1][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue1);
		buffer2[begincol + 2][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue2);
		buffer2[begincol + 3][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue3);
		buffer2[begincol + 4][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue4);
		buffer2[begincol + 5][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue5);
		buffer2[begincol + 6][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue6);
		buffer2[begincol + 7][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue7);
		buffer3[begincol + 0][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue0);
		buffer3[begincol + 1][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue1);
		buffer3[begincol + 2][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue2);
		buffer3[begincol + 3][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue3);
		buffer3[begincol + 4][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue4);
		buffer3[begincol + 5][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue5);
		buffer3[begincol + 6][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue6);
		buffer3[begincol + 7][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue7);
		buffer4[begincol + 0][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue0);
		buffer4[begincol + 1][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue1);
		buffer4[begincol + 2][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue2);
		buffer4[begincol + 3][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue3);
		buffer4[begincol + 4][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue4);
		buffer4[begincol + 5][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue5);
		buffer4[begincol + 6][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue6);
		buffer4[begincol + 7][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue7);
		buffer5[begincol + 0][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue0);
		buffer5[begincol + 1][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue1);
		buffer5[begincol + 2][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue2);
		buffer5[begincol + 3][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue3);
		buffer5[begincol + 4][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue4);
		buffer5[begincol + 5][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue5);
		buffer5[begincol + 6][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue6);
		buffer5[begincol + 7][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue7);
		buffer6[begincol + 0][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue0);
		buffer6[begincol + 1][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue1);
		buffer6[begincol + 2][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue2);
		buffer6[begincol + 3][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue3);
		buffer6[begincol + 4][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue4);
		buffer6[begincol + 5][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue5);
		buffer6[begincol + 6][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue6);
		buffer6[begincol + 7][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue7);
		
		#ifdef _DEBUGMODE_STATS
		actsutilityobj->globalstats_countkvsread(VECTOR_SIZE);
		#endif
	}
	#ifdef _DEBUGMODE_KERNELPRINTS
	cout<< TIMINGRESULTSCOLOR<<"readvdata:: vertices read: offset: "<<dramoffset_kvs * VECTOR_SIZE<<"-"<<(dramoffset_kvs + size_kvs) * VECTOR_SIZE<<", number of vertex datas read: "<<(size_kvs * VECTOR_SIZE * 2)<<" ("<<size_kvs * VECTOR_SIZE<<" keyvalues written)"<< RESET<<endl;
	#endif
	#ifdef _DEBUGMODE_KERNELPRINTS
	if(dramoffset_kvs >= globalparams.BASEOFFSETKVS_VERTEXPTR_ && dramoffset_kvs < globalparams.BASEOFFSETKVS_VERTEXPTR + VERTEXPTRSSZ_KVS){ cout<< TIMINGRESULTSCOLOR<<"readvdata:: vertices read: offset: "<<(dramoffset_kvs - globalparams.BASEOFFSETKVS_VERTEXPTR) * VECTOR_SIZE<<"-"<<(dramoffset_kvs + size_kvs - globalparams.BASEOFFSETKVS_VERTEXPTR) * VECTOR_SIZE<<", number of vertex datas read: "<<(size_kvs * VECTOR_SIZE * 2)<<" ("<<size_kvs * VECTOR_SIZE<<" keyvalues written)"<< RESET<<endl; }
	if(dramoffset_kvs >= globalparams.BASEOFFSETKVS_VERTICESDATA_ && dramoffset_kvs < globalparams.BASEOFFSETKVS_DESTVERTICESDATA + VERTICESDATASZ_KVS){ cout<< TIMINGRESULTSCOLOR<<"readvdata:: vertices read: offset: "<<(dramoffset_kvs - globalparams.BASEOFFSETKVS_DESTVERTICESDATA) * VECTOR_SIZE<<"-"<<(dramoffset_kvs + size_kvs - globalparams.BASEOFFSETKVS_DESTVERTICESDATA) * VECTOR_SIZE<<", number of vertex datas read: "<<(size_kvs * VECTOR_SIZE * 2)<<" ("<<size_kvs * VECTOR_SIZE<<" keyvalues written)"<< RESET<<endl; }				
	#endif
	return;
}
void acts_all::MERGE_readandreplicate8vdata(bool_type enable, uint512_dt * vdram, batch_type dramoffset_kvs, keyvalue_vbuffer_t buffer0[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t buffer1[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t buffer2[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t buffer3[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t buffer4[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t buffer5[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t buffer6[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t buffer7[VDATA_PACKINGSIZE][BLOCKRAM_SIZE], unsigned int begincol, batch_type bufferoffset_kvs, buffer_type size_kvs, globalparams_t globalparams){
	if(enable == OFF){ return; }
	analysis_type analysis_loopcount = BLOCKRAM_SIZE;
		
	READVDATA_LOOP: for (buffer_type i=0; i<size_kvs; i++){
	#pragma HLS LOOP_TRIPCOUNT min=0 max=analysis_loopcount avg=analysis_loopcount
	#pragma HLS PIPELINE II=1
		keyvalue_t mykeyvalue0;
		keyvalue_t mykeyvalue1;
		keyvalue_t mykeyvalue2;
		keyvalue_t mykeyvalue3;
		keyvalue_t mykeyvalue4;
		keyvalue_t mykeyvalue5;
		keyvalue_t mykeyvalue6;
		keyvalue_t mykeyvalue7;
		
		#ifdef _WIDEWORD
		mykeyvalue0.key = vdram[dramoffset_kvs + i].range(31, 0); 
		mykeyvalue0.value = vdram[dramoffset_kvs + i].range(63, 32); 
		mykeyvalue1.key = vdram[dramoffset_kvs + i].range(95, 64); 
		mykeyvalue1.value = vdram[dramoffset_kvs + i].range(127, 96); 
		mykeyvalue2.key = vdram[dramoffset_kvs + i].range(159, 128); 
		mykeyvalue2.value = vdram[dramoffset_kvs + i].range(191, 160); 
		mykeyvalue3.key = vdram[dramoffset_kvs + i].range(223, 192); 
		mykeyvalue3.value = vdram[dramoffset_kvs + i].range(255, 224); 
		mykeyvalue4.key = vdram[dramoffset_kvs + i].range(287, 256); 
		mykeyvalue4.value = vdram[dramoffset_kvs + i].range(319, 288); 
		mykeyvalue5.key = vdram[dramoffset_kvs + i].range(351, 320); 
		mykeyvalue5.value = vdram[dramoffset_kvs + i].range(383, 352); 
		mykeyvalue6.key = vdram[dramoffset_kvs + i].range(415, 384); 
		mykeyvalue6.value = vdram[dramoffset_kvs + i].range(447, 416); 
		mykeyvalue7.key = vdram[dramoffset_kvs + i].range(479, 448); 
		mykeyvalue7.value = vdram[dramoffset_kvs + i].range(511, 480); 
		#else 
		mykeyvalue0.key = vdram[dramoffset_kvs + i].data[0].key; 
		mykeyvalue0.value = vdram[dramoffset_kvs + i].data[0].value; 
		mykeyvalue1.key = vdram[dramoffset_kvs + i].data[1].key; 
		mykeyvalue1.value = vdram[dramoffset_kvs + i].data[1].value; 
		mykeyvalue2.key = vdram[dramoffset_kvs + i].data[2].key; 
		mykeyvalue2.value = vdram[dramoffset_kvs + i].data[2].value; 
		mykeyvalue3.key = vdram[dramoffset_kvs + i].data[3].key; 
		mykeyvalue3.value = vdram[dramoffset_kvs + i].data[3].value; 
		mykeyvalue4.key = vdram[dramoffset_kvs + i].data[4].key; 
		mykeyvalue4.value = vdram[dramoffset_kvs + i].data[4].value; 
		mykeyvalue5.key = vdram[dramoffset_kvs + i].data[5].key; 
		mykeyvalue5.value = vdram[dramoffset_kvs + i].data[5].value; 
		mykeyvalue6.key = vdram[dramoffset_kvs + i].data[6].key; 
		mykeyvalue6.value = vdram[dramoffset_kvs + i].data[6].value; 
		mykeyvalue7.key = vdram[dramoffset_kvs + i].data[7].key; 
		mykeyvalue7.value = vdram[dramoffset_kvs + i].data[7].value; 
		#endif 
		
		buffer0[begincol + 0][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue0);
		buffer0[begincol + 1][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue1);
		buffer0[begincol + 2][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue2);
		buffer0[begincol + 3][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue3);
		buffer0[begincol + 4][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue4);
		buffer0[begincol + 5][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue5);
		buffer0[begincol + 6][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue6);
		buffer0[begincol + 7][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue7);
		buffer1[begincol + 0][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue0);
		buffer1[begincol + 1][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue1);
		buffer1[begincol + 2][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue2);
		buffer1[begincol + 3][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue3);
		buffer1[begincol + 4][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue4);
		buffer1[begincol + 5][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue5);
		buffer1[begincol + 6][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue6);
		buffer1[begincol + 7][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue7);
		buffer2[begincol + 0][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue0);
		buffer2[begincol + 1][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue1);
		buffer2[begincol + 2][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue2);
		buffer2[begincol + 3][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue3);
		buffer2[begincol + 4][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue4);
		buffer2[begincol + 5][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue5);
		buffer2[begincol + 6][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue6);
		buffer2[begincol + 7][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue7);
		buffer3[begincol + 0][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue0);
		buffer3[begincol + 1][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue1);
		buffer3[begincol + 2][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue2);
		buffer3[begincol + 3][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue3);
		buffer3[begincol + 4][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue4);
		buffer3[begincol + 5][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue5);
		buffer3[begincol + 6][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue6);
		buffer3[begincol + 7][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue7);
		buffer4[begincol + 0][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue0);
		buffer4[begincol + 1][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue1);
		buffer4[begincol + 2][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue2);
		buffer4[begincol + 3][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue3);
		buffer4[begincol + 4][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue4);
		buffer4[begincol + 5][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue5);
		buffer4[begincol + 6][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue6);
		buffer4[begincol + 7][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue7);
		buffer5[begincol + 0][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue0);
		buffer5[begincol + 1][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue1);
		buffer5[begincol + 2][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue2);
		buffer5[begincol + 3][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue3);
		buffer5[begincol + 4][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue4);
		buffer5[begincol + 5][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue5);
		buffer5[begincol + 6][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue6);
		buffer5[begincol + 7][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue7);
		buffer6[begincol + 0][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue0);
		buffer6[begincol + 1][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue1);
		buffer6[begincol + 2][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue2);
		buffer6[begincol + 3][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue3);
		buffer6[begincol + 4][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue4);
		buffer6[begincol + 5][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue5);
		buffer6[begincol + 6][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue6);
		buffer6[begincol + 7][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue7);
		buffer7[begincol + 0][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue0);
		buffer7[begincol + 1][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue1);
		buffer7[begincol + 2][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue2);
		buffer7[begincol + 3][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue3);
		buffer7[begincol + 4][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue4);
		buffer7[begincol + 5][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue5);
		buffer7[begincol + 6][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue6);
		buffer7[begincol + 7][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue7);
		
		#ifdef _DEBUGMODE_STATS
		actsutilityobj->globalstats_countkvsread(VECTOR_SIZE);
		#endif
	}
	#ifdef _DEBUGMODE_KERNELPRINTS
	cout<< TIMINGRESULTSCOLOR<<"readvdata:: vertices read: offset: "<<dramoffset_kvs * VECTOR_SIZE<<"-"<<(dramoffset_kvs + size_kvs) * VECTOR_SIZE<<", number of vertex datas read: "<<(size_kvs * VECTOR_SIZE * 2)<<" ("<<size_kvs * VECTOR_SIZE<<" keyvalues written)"<< RESET<<endl;
	#endif
	#ifdef _DEBUGMODE_KERNELPRINTS
	if(dramoffset_kvs >= globalparams.BASEOFFSETKVS_VERTEXPTR_ && dramoffset_kvs < globalparams.BASEOFFSETKVS_VERTEXPTR + VERTEXPTRSSZ_KVS){ cout<< TIMINGRESULTSCOLOR<<"readvdata:: vertices read: offset: "<<(dramoffset_kvs - globalparams.BASEOFFSETKVS_VERTEXPTR) * VECTOR_SIZE<<"-"<<(dramoffset_kvs + size_kvs - globalparams.BASEOFFSETKVS_VERTEXPTR) * VECTOR_SIZE<<", number of vertex datas read: "<<(size_kvs * VECTOR_SIZE * 2)<<" ("<<size_kvs * VECTOR_SIZE<<" keyvalues written)"<< RESET<<endl; }
	if(dramoffset_kvs >= globalparams.BASEOFFSETKVS_VERTICESDATA_ && dramoffset_kvs < globalparams.BASEOFFSETKVS_DESTVERTICESDATA + VERTICESDATASZ_KVS){ cout<< TIMINGRESULTSCOLOR<<"readvdata:: vertices read: offset: "<<(dramoffset_kvs - globalparams.BASEOFFSETKVS_DESTVERTICESDATA) * VECTOR_SIZE<<"-"<<(dramoffset_kvs + size_kvs - globalparams.BASEOFFSETKVS_DESTVERTICESDATA) * VECTOR_SIZE<<", number of vertex datas read: "<<(size_kvs * VECTOR_SIZE * 2)<<" ("<<size_kvs * VECTOR_SIZE<<" keyvalues written)"<< RESET<<endl; }				
	#endif
	return;
}
void acts_all::MERGE_readandreplicate9vdata(bool_type enable, uint512_dt * vdram, batch_type dramoffset_kvs, keyvalue_vbuffer_t buffer0[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t buffer1[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t buffer2[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t buffer3[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t buffer4[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t buffer5[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t buffer6[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t buffer7[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t buffer8[VDATA_PACKINGSIZE][BLOCKRAM_SIZE], unsigned int begincol, batch_type bufferoffset_kvs, buffer_type size_kvs, globalparams_t globalparams){
	if(enable == OFF){ return; }
	analysis_type analysis_loopcount = BLOCKRAM_SIZE;
		
	READVDATA_LOOP: for (buffer_type i=0; i<size_kvs; i++){
	#pragma HLS LOOP_TRIPCOUNT min=0 max=analysis_loopcount avg=analysis_loopcount
	#pragma HLS PIPELINE II=1
		keyvalue_t mykeyvalue0;
		keyvalue_t mykeyvalue1;
		keyvalue_t mykeyvalue2;
		keyvalue_t mykeyvalue3;
		keyvalue_t mykeyvalue4;
		keyvalue_t mykeyvalue5;
		keyvalue_t mykeyvalue6;
		keyvalue_t mykeyvalue7;
		
		#ifdef _WIDEWORD
		mykeyvalue0.key = vdram[dramoffset_kvs + i].range(31, 0); 
		mykeyvalue0.value = vdram[dramoffset_kvs + i].range(63, 32); 
		mykeyvalue1.key = vdram[dramoffset_kvs + i].range(95, 64); 
		mykeyvalue1.value = vdram[dramoffset_kvs + i].range(127, 96); 
		mykeyvalue2.key = vdram[dramoffset_kvs + i].range(159, 128); 
		mykeyvalue2.value = vdram[dramoffset_kvs + i].range(191, 160); 
		mykeyvalue3.key = vdram[dramoffset_kvs + i].range(223, 192); 
		mykeyvalue3.value = vdram[dramoffset_kvs + i].range(255, 224); 
		mykeyvalue4.key = vdram[dramoffset_kvs + i].range(287, 256); 
		mykeyvalue4.value = vdram[dramoffset_kvs + i].range(319, 288); 
		mykeyvalue5.key = vdram[dramoffset_kvs + i].range(351, 320); 
		mykeyvalue5.value = vdram[dramoffset_kvs + i].range(383, 352); 
		mykeyvalue6.key = vdram[dramoffset_kvs + i].range(415, 384); 
		mykeyvalue6.value = vdram[dramoffset_kvs + i].range(447, 416); 
		mykeyvalue7.key = vdram[dramoffset_kvs + i].range(479, 448); 
		mykeyvalue7.value = vdram[dramoffset_kvs + i].range(511, 480); 
		#else 
		mykeyvalue0.key = vdram[dramoffset_kvs + i].data[0].key; 
		mykeyvalue0.value = vdram[dramoffset_kvs + i].data[0].value; 
		mykeyvalue1.key = vdram[dramoffset_kvs + i].data[1].key; 
		mykeyvalue1.value = vdram[dramoffset_kvs + i].data[1].value; 
		mykeyvalue2.key = vdram[dramoffset_kvs + i].data[2].key; 
		mykeyvalue2.value = vdram[dramoffset_kvs + i].data[2].value; 
		mykeyvalue3.key = vdram[dramoffset_kvs + i].data[3].key; 
		mykeyvalue3.value = vdram[dramoffset_kvs + i].data[3].value; 
		mykeyvalue4.key = vdram[dramoffset_kvs + i].data[4].key; 
		mykeyvalue4.value = vdram[dramoffset_kvs + i].data[4].value; 
		mykeyvalue5.key = vdram[dramoffset_kvs + i].data[5].key; 
		mykeyvalue5.value = vdram[dramoffset_kvs + i].data[5].value; 
		mykeyvalue6.key = vdram[dramoffset_kvs + i].data[6].key; 
		mykeyvalue6.value = vdram[dramoffset_kvs + i].data[6].value; 
		mykeyvalue7.key = vdram[dramoffset_kvs + i].data[7].key; 
		mykeyvalue7.value = vdram[dramoffset_kvs + i].data[7].value; 
		#endif 
		
		buffer0[begincol + 0][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue0);
		buffer0[begincol + 1][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue1);
		buffer0[begincol + 2][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue2);
		buffer0[begincol + 3][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue3);
		buffer0[begincol + 4][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue4);
		buffer0[begincol + 5][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue5);
		buffer0[begincol + 6][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue6);
		buffer0[begincol + 7][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue7);
		buffer1[begincol + 0][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue0);
		buffer1[begincol + 1][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue1);
		buffer1[begincol + 2][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue2);
		buffer1[begincol + 3][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue3);
		buffer1[begincol + 4][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue4);
		buffer1[begincol + 5][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue5);
		buffer1[begincol + 6][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue6);
		buffer1[begincol + 7][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue7);
		buffer2[begincol + 0][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue0);
		buffer2[begincol + 1][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue1);
		buffer2[begincol + 2][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue2);
		buffer2[begincol + 3][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue3);
		buffer2[begincol + 4][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue4);
		buffer2[begincol + 5][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue5);
		buffer2[begincol + 6][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue6);
		buffer2[begincol + 7][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue7);
		buffer3[begincol + 0][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue0);
		buffer3[begincol + 1][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue1);
		buffer3[begincol + 2][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue2);
		buffer3[begincol + 3][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue3);
		buffer3[begincol + 4][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue4);
		buffer3[begincol + 5][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue5);
		buffer3[begincol + 6][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue6);
		buffer3[begincol + 7][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue7);
		buffer4[begincol + 0][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue0);
		buffer4[begincol + 1][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue1);
		buffer4[begincol + 2][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue2);
		buffer4[begincol + 3][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue3);
		buffer4[begincol + 4][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue4);
		buffer4[begincol + 5][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue5);
		buffer4[begincol + 6][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue6);
		buffer4[begincol + 7][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue7);
		buffer5[begincol + 0][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue0);
		buffer5[begincol + 1][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue1);
		buffer5[begincol + 2][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue2);
		buffer5[begincol + 3][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue3);
		buffer5[begincol + 4][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue4);
		buffer5[begincol + 5][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue5);
		buffer5[begincol + 6][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue6);
		buffer5[begincol + 7][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue7);
		buffer6[begincol + 0][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue0);
		buffer6[begincol + 1][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue1);
		buffer6[begincol + 2][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue2);
		buffer6[begincol + 3][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue3);
		buffer6[begincol + 4][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue4);
		buffer6[begincol + 5][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue5);
		buffer6[begincol + 6][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue6);
		buffer6[begincol + 7][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue7);
		buffer7[begincol + 0][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue0);
		buffer7[begincol + 1][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue1);
		buffer7[begincol + 2][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue2);
		buffer7[begincol + 3][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue3);
		buffer7[begincol + 4][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue4);
		buffer7[begincol + 5][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue5);
		buffer7[begincol + 6][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue6);
		buffer7[begincol + 7][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue7);
		buffer8[begincol + 0][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue0);
		buffer8[begincol + 1][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue1);
		buffer8[begincol + 2][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue2);
		buffer8[begincol + 3][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue3);
		buffer8[begincol + 4][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue4);
		buffer8[begincol + 5][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue5);
		buffer8[begincol + 6][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue6);
		buffer8[begincol + 7][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue7);
		
		#ifdef _DEBUGMODE_STATS
		actsutilityobj->globalstats_countkvsread(VECTOR_SIZE);
		#endif
	}
	#ifdef _DEBUGMODE_KERNELPRINTS
	cout<< TIMINGRESULTSCOLOR<<"readvdata:: vertices read: offset: "<<dramoffset_kvs * VECTOR_SIZE<<"-"<<(dramoffset_kvs + size_kvs) * VECTOR_SIZE<<", number of vertex datas read: "<<(size_kvs * VECTOR_SIZE * 2)<<" ("<<size_kvs * VECTOR_SIZE<<" keyvalues written)"<< RESET<<endl;
	#endif
	#ifdef _DEBUGMODE_KERNELPRINTS
	if(dramoffset_kvs >= globalparams.BASEOFFSETKVS_VERTEXPTR_ && dramoffset_kvs < globalparams.BASEOFFSETKVS_VERTEXPTR + VERTEXPTRSSZ_KVS){ cout<< TIMINGRESULTSCOLOR<<"readvdata:: vertices read: offset: "<<(dramoffset_kvs - globalparams.BASEOFFSETKVS_VERTEXPTR) * VECTOR_SIZE<<"-"<<(dramoffset_kvs + size_kvs - globalparams.BASEOFFSETKVS_VERTEXPTR) * VECTOR_SIZE<<", number of vertex datas read: "<<(size_kvs * VECTOR_SIZE * 2)<<" ("<<size_kvs * VECTOR_SIZE<<" keyvalues written)"<< RESET<<endl; }
	if(dramoffset_kvs >= globalparams.BASEOFFSETKVS_VERTICESDATA_ && dramoffset_kvs < globalparams.BASEOFFSETKVS_DESTVERTICESDATA + VERTICESDATASZ_KVS){ cout<< TIMINGRESULTSCOLOR<<"readvdata:: vertices read: offset: "<<(dramoffset_kvs - globalparams.BASEOFFSETKVS_DESTVERTICESDATA) * VECTOR_SIZE<<"-"<<(dramoffset_kvs + size_kvs - globalparams.BASEOFFSETKVS_DESTVERTICESDATA) * VECTOR_SIZE<<", number of vertex datas read: "<<(size_kvs * VECTOR_SIZE * 2)<<" ("<<size_kvs * VECTOR_SIZE<<" keyvalues written)"<< RESET<<endl; }				
	#endif
	return;
}
void acts_all::MERGE_readandreplicate10vdata(bool_type enable, uint512_dt * vdram, batch_type dramoffset_kvs, keyvalue_vbuffer_t buffer0[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t buffer1[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t buffer2[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t buffer3[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t buffer4[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t buffer5[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t buffer6[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t buffer7[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t buffer8[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t buffer9[VDATA_PACKINGSIZE][BLOCKRAM_SIZE], unsigned int begincol, batch_type bufferoffset_kvs, buffer_type size_kvs, globalparams_t globalparams){
	if(enable == OFF){ return; }
	analysis_type analysis_loopcount = BLOCKRAM_SIZE;
		
	READVDATA_LOOP: for (buffer_type i=0; i<size_kvs; i++){
	#pragma HLS LOOP_TRIPCOUNT min=0 max=analysis_loopcount avg=analysis_loopcount
	#pragma HLS PIPELINE II=1
		keyvalue_t mykeyvalue0;
		keyvalue_t mykeyvalue1;
		keyvalue_t mykeyvalue2;
		keyvalue_t mykeyvalue3;
		keyvalue_t mykeyvalue4;
		keyvalue_t mykeyvalue5;
		keyvalue_t mykeyvalue6;
		keyvalue_t mykeyvalue7;
		
		#ifdef _WIDEWORD
		mykeyvalue0.key = vdram[dramoffset_kvs + i].range(31, 0); 
		mykeyvalue0.value = vdram[dramoffset_kvs + i].range(63, 32); 
		mykeyvalue1.key = vdram[dramoffset_kvs + i].range(95, 64); 
		mykeyvalue1.value = vdram[dramoffset_kvs + i].range(127, 96); 
		mykeyvalue2.key = vdram[dramoffset_kvs + i].range(159, 128); 
		mykeyvalue2.value = vdram[dramoffset_kvs + i].range(191, 160); 
		mykeyvalue3.key = vdram[dramoffset_kvs + i].range(223, 192); 
		mykeyvalue3.value = vdram[dramoffset_kvs + i].range(255, 224); 
		mykeyvalue4.key = vdram[dramoffset_kvs + i].range(287, 256); 
		mykeyvalue4.value = vdram[dramoffset_kvs + i].range(319, 288); 
		mykeyvalue5.key = vdram[dramoffset_kvs + i].range(351, 320); 
		mykeyvalue5.value = vdram[dramoffset_kvs + i].range(383, 352); 
		mykeyvalue6.key = vdram[dramoffset_kvs + i].range(415, 384); 
		mykeyvalue6.value = vdram[dramoffset_kvs + i].range(447, 416); 
		mykeyvalue7.key = vdram[dramoffset_kvs + i].range(479, 448); 
		mykeyvalue7.value = vdram[dramoffset_kvs + i].range(511, 480); 
		#else 
		mykeyvalue0.key = vdram[dramoffset_kvs + i].data[0].key; 
		mykeyvalue0.value = vdram[dramoffset_kvs + i].data[0].value; 
		mykeyvalue1.key = vdram[dramoffset_kvs + i].data[1].key; 
		mykeyvalue1.value = vdram[dramoffset_kvs + i].data[1].value; 
		mykeyvalue2.key = vdram[dramoffset_kvs + i].data[2].key; 
		mykeyvalue2.value = vdram[dramoffset_kvs + i].data[2].value; 
		mykeyvalue3.key = vdram[dramoffset_kvs + i].data[3].key; 
		mykeyvalue3.value = vdram[dramoffset_kvs + i].data[3].value; 
		mykeyvalue4.key = vdram[dramoffset_kvs + i].data[4].key; 
		mykeyvalue4.value = vdram[dramoffset_kvs + i].data[4].value; 
		mykeyvalue5.key = vdram[dramoffset_kvs + i].data[5].key; 
		mykeyvalue5.value = vdram[dramoffset_kvs + i].data[5].value; 
		mykeyvalue6.key = vdram[dramoffset_kvs + i].data[6].key; 
		mykeyvalue6.value = vdram[dramoffset_kvs + i].data[6].value; 
		mykeyvalue7.key = vdram[dramoffset_kvs + i].data[7].key; 
		mykeyvalue7.value = vdram[dramoffset_kvs + i].data[7].value; 
		#endif 
		
		buffer0[begincol + 0][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue0);
		buffer0[begincol + 1][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue1);
		buffer0[begincol + 2][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue2);
		buffer0[begincol + 3][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue3);
		buffer0[begincol + 4][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue4);
		buffer0[begincol + 5][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue5);
		buffer0[begincol + 6][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue6);
		buffer0[begincol + 7][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue7);
		buffer1[begincol + 0][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue0);
		buffer1[begincol + 1][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue1);
		buffer1[begincol + 2][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue2);
		buffer1[begincol + 3][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue3);
		buffer1[begincol + 4][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue4);
		buffer1[begincol + 5][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue5);
		buffer1[begincol + 6][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue6);
		buffer1[begincol + 7][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue7);
		buffer2[begincol + 0][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue0);
		buffer2[begincol + 1][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue1);
		buffer2[begincol + 2][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue2);
		buffer2[begincol + 3][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue3);
		buffer2[begincol + 4][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue4);
		buffer2[begincol + 5][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue5);
		buffer2[begincol + 6][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue6);
		buffer2[begincol + 7][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue7);
		buffer3[begincol + 0][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue0);
		buffer3[begincol + 1][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue1);
		buffer3[begincol + 2][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue2);
		buffer3[begincol + 3][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue3);
		buffer3[begincol + 4][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue4);
		buffer3[begincol + 5][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue5);
		buffer3[begincol + 6][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue6);
		buffer3[begincol + 7][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue7);
		buffer4[begincol + 0][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue0);
		buffer4[begincol + 1][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue1);
		buffer4[begincol + 2][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue2);
		buffer4[begincol + 3][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue3);
		buffer4[begincol + 4][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue4);
		buffer4[begincol + 5][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue5);
		buffer4[begincol + 6][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue6);
		buffer4[begincol + 7][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue7);
		buffer5[begincol + 0][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue0);
		buffer5[begincol + 1][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue1);
		buffer5[begincol + 2][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue2);
		buffer5[begincol + 3][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue3);
		buffer5[begincol + 4][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue4);
		buffer5[begincol + 5][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue5);
		buffer5[begincol + 6][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue6);
		buffer5[begincol + 7][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue7);
		buffer6[begincol + 0][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue0);
		buffer6[begincol + 1][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue1);
		buffer6[begincol + 2][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue2);
		buffer6[begincol + 3][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue3);
		buffer6[begincol + 4][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue4);
		buffer6[begincol + 5][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue5);
		buffer6[begincol + 6][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue6);
		buffer6[begincol + 7][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue7);
		buffer7[begincol + 0][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue0);
		buffer7[begincol + 1][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue1);
		buffer7[begincol + 2][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue2);
		buffer7[begincol + 3][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue3);
		buffer7[begincol + 4][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue4);
		buffer7[begincol + 5][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue5);
		buffer7[begincol + 6][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue6);
		buffer7[begincol + 7][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue7);
		buffer8[begincol + 0][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue0);
		buffer8[begincol + 1][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue1);
		buffer8[begincol + 2][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue2);
		buffer8[begincol + 3][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue3);
		buffer8[begincol + 4][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue4);
		buffer8[begincol + 5][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue5);
		buffer8[begincol + 6][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue6);
		buffer8[begincol + 7][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue7);
		buffer9[begincol + 0][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue0);
		buffer9[begincol + 1][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue1);
		buffer9[begincol + 2][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue2);
		buffer9[begincol + 3][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue3);
		buffer9[begincol + 4][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue4);
		buffer9[begincol + 5][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue5);
		buffer9[begincol + 6][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue6);
		buffer9[begincol + 7][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue7);
		
		#ifdef _DEBUGMODE_STATS
		actsutilityobj->globalstats_countkvsread(VECTOR_SIZE);
		#endif
	}
	#ifdef _DEBUGMODE_KERNELPRINTS
	cout<< TIMINGRESULTSCOLOR<<"readvdata:: vertices read: offset: "<<dramoffset_kvs * VECTOR_SIZE<<"-"<<(dramoffset_kvs + size_kvs) * VECTOR_SIZE<<", number of vertex datas read: "<<(size_kvs * VECTOR_SIZE * 2)<<" ("<<size_kvs * VECTOR_SIZE<<" keyvalues written)"<< RESET<<endl;
	#endif
	#ifdef _DEBUGMODE_KERNELPRINTS
	if(dramoffset_kvs >= globalparams.BASEOFFSETKVS_VERTEXPTR_ && dramoffset_kvs < globalparams.BASEOFFSETKVS_VERTEXPTR + VERTEXPTRSSZ_KVS){ cout<< TIMINGRESULTSCOLOR<<"readvdata:: vertices read: offset: "<<(dramoffset_kvs - globalparams.BASEOFFSETKVS_VERTEXPTR) * VECTOR_SIZE<<"-"<<(dramoffset_kvs + size_kvs - globalparams.BASEOFFSETKVS_VERTEXPTR) * VECTOR_SIZE<<", number of vertex datas read: "<<(size_kvs * VECTOR_SIZE * 2)<<" ("<<size_kvs * VECTOR_SIZE<<" keyvalues written)"<< RESET<<endl; }
	if(dramoffset_kvs >= globalparams.BASEOFFSETKVS_VERTICESDATA_ && dramoffset_kvs < globalparams.BASEOFFSETKVS_DESTVERTICESDATA + VERTICESDATASZ_KVS){ cout<< TIMINGRESULTSCOLOR<<"readvdata:: vertices read: offset: "<<(dramoffset_kvs - globalparams.BASEOFFSETKVS_DESTVERTICESDATA) * VECTOR_SIZE<<"-"<<(dramoffset_kvs + size_kvs - globalparams.BASEOFFSETKVS_DESTVERTICESDATA) * VECTOR_SIZE<<", number of vertex datas read: "<<(size_kvs * VECTOR_SIZE * 2)<<" ("<<size_kvs * VECTOR_SIZE<<" keyvalues written)"<< RESET<<endl; }				
	#endif
	return;
}
void acts_all::MERGE_readandreplicate11vdata(bool_type enable, uint512_dt * vdram, batch_type dramoffset_kvs, keyvalue_vbuffer_t buffer0[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t buffer1[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t buffer2[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t buffer3[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t buffer4[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t buffer5[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t buffer6[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t buffer7[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t buffer8[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t buffer9[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t buffer10[VDATA_PACKINGSIZE][BLOCKRAM_SIZE], unsigned int begincol, batch_type bufferoffset_kvs, buffer_type size_kvs, globalparams_t globalparams){
	if(enable == OFF){ return; }
	analysis_type analysis_loopcount = BLOCKRAM_SIZE;
		
	READVDATA_LOOP: for (buffer_type i=0; i<size_kvs; i++){
	#pragma HLS LOOP_TRIPCOUNT min=0 max=analysis_loopcount avg=analysis_loopcount
	#pragma HLS PIPELINE II=1
		keyvalue_t mykeyvalue0;
		keyvalue_t mykeyvalue1;
		keyvalue_t mykeyvalue2;
		keyvalue_t mykeyvalue3;
		keyvalue_t mykeyvalue4;
		keyvalue_t mykeyvalue5;
		keyvalue_t mykeyvalue6;
		keyvalue_t mykeyvalue7;
		
		#ifdef _WIDEWORD
		mykeyvalue0.key = vdram[dramoffset_kvs + i].range(31, 0); 
		mykeyvalue0.value = vdram[dramoffset_kvs + i].range(63, 32); 
		mykeyvalue1.key = vdram[dramoffset_kvs + i].range(95, 64); 
		mykeyvalue1.value = vdram[dramoffset_kvs + i].range(127, 96); 
		mykeyvalue2.key = vdram[dramoffset_kvs + i].range(159, 128); 
		mykeyvalue2.value = vdram[dramoffset_kvs + i].range(191, 160); 
		mykeyvalue3.key = vdram[dramoffset_kvs + i].range(223, 192); 
		mykeyvalue3.value = vdram[dramoffset_kvs + i].range(255, 224); 
		mykeyvalue4.key = vdram[dramoffset_kvs + i].range(287, 256); 
		mykeyvalue4.value = vdram[dramoffset_kvs + i].range(319, 288); 
		mykeyvalue5.key = vdram[dramoffset_kvs + i].range(351, 320); 
		mykeyvalue5.value = vdram[dramoffset_kvs + i].range(383, 352); 
		mykeyvalue6.key = vdram[dramoffset_kvs + i].range(415, 384); 
		mykeyvalue6.value = vdram[dramoffset_kvs + i].range(447, 416); 
		mykeyvalue7.key = vdram[dramoffset_kvs + i].range(479, 448); 
		mykeyvalue7.value = vdram[dramoffset_kvs + i].range(511, 480); 
		#else 
		mykeyvalue0.key = vdram[dramoffset_kvs + i].data[0].key; 
		mykeyvalue0.value = vdram[dramoffset_kvs + i].data[0].value; 
		mykeyvalue1.key = vdram[dramoffset_kvs + i].data[1].key; 
		mykeyvalue1.value = vdram[dramoffset_kvs + i].data[1].value; 
		mykeyvalue2.key = vdram[dramoffset_kvs + i].data[2].key; 
		mykeyvalue2.value = vdram[dramoffset_kvs + i].data[2].value; 
		mykeyvalue3.key = vdram[dramoffset_kvs + i].data[3].key; 
		mykeyvalue3.value = vdram[dramoffset_kvs + i].data[3].value; 
		mykeyvalue4.key = vdram[dramoffset_kvs + i].data[4].key; 
		mykeyvalue4.value = vdram[dramoffset_kvs + i].data[4].value; 
		mykeyvalue5.key = vdram[dramoffset_kvs + i].data[5].key; 
		mykeyvalue5.value = vdram[dramoffset_kvs + i].data[5].value; 
		mykeyvalue6.key = vdram[dramoffset_kvs + i].data[6].key; 
		mykeyvalue6.value = vdram[dramoffset_kvs + i].data[6].value; 
		mykeyvalue7.key = vdram[dramoffset_kvs + i].data[7].key; 
		mykeyvalue7.value = vdram[dramoffset_kvs + i].data[7].value; 
		#endif 
		
		buffer0[begincol + 0][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue0);
		buffer0[begincol + 1][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue1);
		buffer0[begincol + 2][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue2);
		buffer0[begincol + 3][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue3);
		buffer0[begincol + 4][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue4);
		buffer0[begincol + 5][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue5);
		buffer0[begincol + 6][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue6);
		buffer0[begincol + 7][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue7);
		buffer1[begincol + 0][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue0);
		buffer1[begincol + 1][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue1);
		buffer1[begincol + 2][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue2);
		buffer1[begincol + 3][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue3);
		buffer1[begincol + 4][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue4);
		buffer1[begincol + 5][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue5);
		buffer1[begincol + 6][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue6);
		buffer1[begincol + 7][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue7);
		buffer2[begincol + 0][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue0);
		buffer2[begincol + 1][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue1);
		buffer2[begincol + 2][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue2);
		buffer2[begincol + 3][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue3);
		buffer2[begincol + 4][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue4);
		buffer2[begincol + 5][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue5);
		buffer2[begincol + 6][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue6);
		buffer2[begincol + 7][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue7);
		buffer3[begincol + 0][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue0);
		buffer3[begincol + 1][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue1);
		buffer3[begincol + 2][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue2);
		buffer3[begincol + 3][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue3);
		buffer3[begincol + 4][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue4);
		buffer3[begincol + 5][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue5);
		buffer3[begincol + 6][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue6);
		buffer3[begincol + 7][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue7);
		buffer4[begincol + 0][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue0);
		buffer4[begincol + 1][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue1);
		buffer4[begincol + 2][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue2);
		buffer4[begincol + 3][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue3);
		buffer4[begincol + 4][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue4);
		buffer4[begincol + 5][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue5);
		buffer4[begincol + 6][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue6);
		buffer4[begincol + 7][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue7);
		buffer5[begincol + 0][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue0);
		buffer5[begincol + 1][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue1);
		buffer5[begincol + 2][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue2);
		buffer5[begincol + 3][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue3);
		buffer5[begincol + 4][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue4);
		buffer5[begincol + 5][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue5);
		buffer5[begincol + 6][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue6);
		buffer5[begincol + 7][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue7);
		buffer6[begincol + 0][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue0);
		buffer6[begincol + 1][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue1);
		buffer6[begincol + 2][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue2);
		buffer6[begincol + 3][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue3);
		buffer6[begincol + 4][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue4);
		buffer6[begincol + 5][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue5);
		buffer6[begincol + 6][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue6);
		buffer6[begincol + 7][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue7);
		buffer7[begincol + 0][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue0);
		buffer7[begincol + 1][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue1);
		buffer7[begincol + 2][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue2);
		buffer7[begincol + 3][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue3);
		buffer7[begincol + 4][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue4);
		buffer7[begincol + 5][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue5);
		buffer7[begincol + 6][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue6);
		buffer7[begincol + 7][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue7);
		buffer8[begincol + 0][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue0);
		buffer8[begincol + 1][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue1);
		buffer8[begincol + 2][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue2);
		buffer8[begincol + 3][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue3);
		buffer8[begincol + 4][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue4);
		buffer8[begincol + 5][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue5);
		buffer8[begincol + 6][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue6);
		buffer8[begincol + 7][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue7);
		buffer9[begincol + 0][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue0);
		buffer9[begincol + 1][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue1);
		buffer9[begincol + 2][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue2);
		buffer9[begincol + 3][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue3);
		buffer9[begincol + 4][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue4);
		buffer9[begincol + 5][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue5);
		buffer9[begincol + 6][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue6);
		buffer9[begincol + 7][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue7);
		buffer10[begincol + 0][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue0);
		buffer10[begincol + 1][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue1);
		buffer10[begincol + 2][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue2);
		buffer10[begincol + 3][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue3);
		buffer10[begincol + 4][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue4);
		buffer10[begincol + 5][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue5);
		buffer10[begincol + 6][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue6);
		buffer10[begincol + 7][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue7);
		
		#ifdef _DEBUGMODE_STATS
		actsutilityobj->globalstats_countkvsread(VECTOR_SIZE);
		#endif
	}
	#ifdef _DEBUGMODE_KERNELPRINTS
	cout<< TIMINGRESULTSCOLOR<<"readvdata:: vertices read: offset: "<<dramoffset_kvs * VECTOR_SIZE<<"-"<<(dramoffset_kvs + size_kvs) * VECTOR_SIZE<<", number of vertex datas read: "<<(size_kvs * VECTOR_SIZE * 2)<<" ("<<size_kvs * VECTOR_SIZE<<" keyvalues written)"<< RESET<<endl;
	#endif
	#ifdef _DEBUGMODE_KERNELPRINTS
	if(dramoffset_kvs >= globalparams.BASEOFFSETKVS_VERTEXPTR_ && dramoffset_kvs < globalparams.BASEOFFSETKVS_VERTEXPTR + VERTEXPTRSSZ_KVS){ cout<< TIMINGRESULTSCOLOR<<"readvdata:: vertices read: offset: "<<(dramoffset_kvs - globalparams.BASEOFFSETKVS_VERTEXPTR) * VECTOR_SIZE<<"-"<<(dramoffset_kvs + size_kvs - globalparams.BASEOFFSETKVS_VERTEXPTR) * VECTOR_SIZE<<", number of vertex datas read: "<<(size_kvs * VECTOR_SIZE * 2)<<" ("<<size_kvs * VECTOR_SIZE<<" keyvalues written)"<< RESET<<endl; }
	if(dramoffset_kvs >= globalparams.BASEOFFSETKVS_VERTICESDATA_ && dramoffset_kvs < globalparams.BASEOFFSETKVS_DESTVERTICESDATA + VERTICESDATASZ_KVS){ cout<< TIMINGRESULTSCOLOR<<"readvdata:: vertices read: offset: "<<(dramoffset_kvs - globalparams.BASEOFFSETKVS_DESTVERTICESDATA) * VECTOR_SIZE<<"-"<<(dramoffset_kvs + size_kvs - globalparams.BASEOFFSETKVS_DESTVERTICESDATA) * VECTOR_SIZE<<", number of vertex datas read: "<<(size_kvs * VECTOR_SIZE * 2)<<" ("<<size_kvs * VECTOR_SIZE<<" keyvalues written)"<< RESET<<endl; }				
	#endif
	return;
}
void acts_all::MERGE_readandreplicate12vdata(bool_type enable, uint512_dt * vdram, batch_type dramoffset_kvs, keyvalue_vbuffer_t buffer0[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t buffer1[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t buffer2[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t buffer3[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t buffer4[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t buffer5[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t buffer6[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t buffer7[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t buffer8[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t buffer9[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t buffer10[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t buffer11[VDATA_PACKINGSIZE][BLOCKRAM_SIZE], unsigned int begincol, batch_type bufferoffset_kvs, buffer_type size_kvs, globalparams_t globalparams){
	if(enable == OFF){ return; }
	analysis_type analysis_loopcount = BLOCKRAM_SIZE;
		
	READVDATA_LOOP: for (buffer_type i=0; i<size_kvs; i++){
	#pragma HLS LOOP_TRIPCOUNT min=0 max=analysis_loopcount avg=analysis_loopcount
	#pragma HLS PIPELINE II=1
		keyvalue_t mykeyvalue0;
		keyvalue_t mykeyvalue1;
		keyvalue_t mykeyvalue2;
		keyvalue_t mykeyvalue3;
		keyvalue_t mykeyvalue4;
		keyvalue_t mykeyvalue5;
		keyvalue_t mykeyvalue6;
		keyvalue_t mykeyvalue7;
		
		#ifdef _WIDEWORD
		mykeyvalue0.key = vdram[dramoffset_kvs + i].range(31, 0); 
		mykeyvalue0.value = vdram[dramoffset_kvs + i].range(63, 32); 
		mykeyvalue1.key = vdram[dramoffset_kvs + i].range(95, 64); 
		mykeyvalue1.value = vdram[dramoffset_kvs + i].range(127, 96); 
		mykeyvalue2.key = vdram[dramoffset_kvs + i].range(159, 128); 
		mykeyvalue2.value = vdram[dramoffset_kvs + i].range(191, 160); 
		mykeyvalue3.key = vdram[dramoffset_kvs + i].range(223, 192); 
		mykeyvalue3.value = vdram[dramoffset_kvs + i].range(255, 224); 
		mykeyvalue4.key = vdram[dramoffset_kvs + i].range(287, 256); 
		mykeyvalue4.value = vdram[dramoffset_kvs + i].range(319, 288); 
		mykeyvalue5.key = vdram[dramoffset_kvs + i].range(351, 320); 
		mykeyvalue5.value = vdram[dramoffset_kvs + i].range(383, 352); 
		mykeyvalue6.key = vdram[dramoffset_kvs + i].range(415, 384); 
		mykeyvalue6.value = vdram[dramoffset_kvs + i].range(447, 416); 
		mykeyvalue7.key = vdram[dramoffset_kvs + i].range(479, 448); 
		mykeyvalue7.value = vdram[dramoffset_kvs + i].range(511, 480); 
		#else 
		mykeyvalue0.key = vdram[dramoffset_kvs + i].data[0].key; 
		mykeyvalue0.value = vdram[dramoffset_kvs + i].data[0].value; 
		mykeyvalue1.key = vdram[dramoffset_kvs + i].data[1].key; 
		mykeyvalue1.value = vdram[dramoffset_kvs + i].data[1].value; 
		mykeyvalue2.key = vdram[dramoffset_kvs + i].data[2].key; 
		mykeyvalue2.value = vdram[dramoffset_kvs + i].data[2].value; 
		mykeyvalue3.key = vdram[dramoffset_kvs + i].data[3].key; 
		mykeyvalue3.value = vdram[dramoffset_kvs + i].data[3].value; 
		mykeyvalue4.key = vdram[dramoffset_kvs + i].data[4].key; 
		mykeyvalue4.value = vdram[dramoffset_kvs + i].data[4].value; 
		mykeyvalue5.key = vdram[dramoffset_kvs + i].data[5].key; 
		mykeyvalue5.value = vdram[dramoffset_kvs + i].data[5].value; 
		mykeyvalue6.key = vdram[dramoffset_kvs + i].data[6].key; 
		mykeyvalue6.value = vdram[dramoffset_kvs + i].data[6].value; 
		mykeyvalue7.key = vdram[dramoffset_kvs + i].data[7].key; 
		mykeyvalue7.value = vdram[dramoffset_kvs + i].data[7].value; 
		#endif 
		
		buffer0[begincol + 0][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue0);
		buffer0[begincol + 1][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue1);
		buffer0[begincol + 2][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue2);
		buffer0[begincol + 3][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue3);
		buffer0[begincol + 4][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue4);
		buffer0[begincol + 5][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue5);
		buffer0[begincol + 6][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue6);
		buffer0[begincol + 7][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue7);
		buffer1[begincol + 0][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue0);
		buffer1[begincol + 1][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue1);
		buffer1[begincol + 2][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue2);
		buffer1[begincol + 3][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue3);
		buffer1[begincol + 4][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue4);
		buffer1[begincol + 5][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue5);
		buffer1[begincol + 6][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue6);
		buffer1[begincol + 7][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue7);
		buffer2[begincol + 0][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue0);
		buffer2[begincol + 1][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue1);
		buffer2[begincol + 2][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue2);
		buffer2[begincol + 3][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue3);
		buffer2[begincol + 4][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue4);
		buffer2[begincol + 5][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue5);
		buffer2[begincol + 6][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue6);
		buffer2[begincol + 7][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue7);
		buffer3[begincol + 0][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue0);
		buffer3[begincol + 1][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue1);
		buffer3[begincol + 2][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue2);
		buffer3[begincol + 3][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue3);
		buffer3[begincol + 4][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue4);
		buffer3[begincol + 5][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue5);
		buffer3[begincol + 6][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue6);
		buffer3[begincol + 7][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue7);
		buffer4[begincol + 0][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue0);
		buffer4[begincol + 1][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue1);
		buffer4[begincol + 2][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue2);
		buffer4[begincol + 3][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue3);
		buffer4[begincol + 4][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue4);
		buffer4[begincol + 5][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue5);
		buffer4[begincol + 6][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue6);
		buffer4[begincol + 7][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue7);
		buffer5[begincol + 0][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue0);
		buffer5[begincol + 1][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue1);
		buffer5[begincol + 2][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue2);
		buffer5[begincol + 3][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue3);
		buffer5[begincol + 4][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue4);
		buffer5[begincol + 5][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue5);
		buffer5[begincol + 6][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue6);
		buffer5[begincol + 7][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue7);
		buffer6[begincol + 0][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue0);
		buffer6[begincol + 1][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue1);
		buffer6[begincol + 2][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue2);
		buffer6[begincol + 3][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue3);
		buffer6[begincol + 4][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue4);
		buffer6[begincol + 5][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue5);
		buffer6[begincol + 6][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue6);
		buffer6[begincol + 7][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue7);
		buffer7[begincol + 0][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue0);
		buffer7[begincol + 1][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue1);
		buffer7[begincol + 2][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue2);
		buffer7[begincol + 3][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue3);
		buffer7[begincol + 4][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue4);
		buffer7[begincol + 5][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue5);
		buffer7[begincol + 6][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue6);
		buffer7[begincol + 7][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue7);
		buffer8[begincol + 0][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue0);
		buffer8[begincol + 1][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue1);
		buffer8[begincol + 2][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue2);
		buffer8[begincol + 3][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue3);
		buffer8[begincol + 4][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue4);
		buffer8[begincol + 5][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue5);
		buffer8[begincol + 6][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue6);
		buffer8[begincol + 7][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue7);
		buffer9[begincol + 0][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue0);
		buffer9[begincol + 1][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue1);
		buffer9[begincol + 2][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue2);
		buffer9[begincol + 3][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue3);
		buffer9[begincol + 4][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue4);
		buffer9[begincol + 5][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue5);
		buffer9[begincol + 6][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue6);
		buffer9[begincol + 7][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue7);
		buffer10[begincol + 0][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue0);
		buffer10[begincol + 1][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue1);
		buffer10[begincol + 2][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue2);
		buffer10[begincol + 3][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue3);
		buffer10[begincol + 4][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue4);
		buffer10[begincol + 5][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue5);
		buffer10[begincol + 6][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue6);
		buffer10[begincol + 7][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue7);
		buffer11[begincol + 0][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue0);
		buffer11[begincol + 1][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue1);
		buffer11[begincol + 2][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue2);
		buffer11[begincol + 3][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue3);
		buffer11[begincol + 4][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue4);
		buffer11[begincol + 5][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue5);
		buffer11[begincol + 6][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue6);
		buffer11[begincol + 7][bufferoffset_kvs + i] = UTIL_GETKV2(mykeyvalue7);
		
		#ifdef _DEBUGMODE_STATS
		actsutilityobj->globalstats_countkvsread(VECTOR_SIZE);
		#endif
	}
	#ifdef _DEBUGMODE_KERNELPRINTS
	cout<< TIMINGRESULTSCOLOR<<"readvdata:: vertices read: offset: "<<dramoffset_kvs * VECTOR_SIZE<<"-"<<(dramoffset_kvs + size_kvs) * VECTOR_SIZE<<", number of vertex datas read: "<<(size_kvs * VECTOR_SIZE * 2)<<" ("<<size_kvs * VECTOR_SIZE<<" keyvalues written)"<< RESET<<endl;
	#endif
	#ifdef _DEBUGMODE_KERNELPRINTS
	if(dramoffset_kvs >= globalparams.BASEOFFSETKVS_VERTEXPTR_ && dramoffset_kvs < globalparams.BASEOFFSETKVS_VERTEXPTR + VERTEXPTRSSZ_KVS){ cout<< TIMINGRESULTSCOLOR<<"readvdata:: vertices read: offset: "<<(dramoffset_kvs - globalparams.BASEOFFSETKVS_VERTEXPTR) * VECTOR_SIZE<<"-"<<(dramoffset_kvs + size_kvs - globalparams.BASEOFFSETKVS_VERTEXPTR) * VECTOR_SIZE<<", number of vertex datas read: "<<(size_kvs * VECTOR_SIZE * 2)<<" ("<<size_kvs * VECTOR_SIZE<<" keyvalues written)"<< RESET<<endl; }
	if(dramoffset_kvs >= globalparams.BASEOFFSETKVS_VERTICESDATA_ && dramoffset_kvs < globalparams.BASEOFFSETKVS_DESTVERTICESDATA + VERTICESDATASZ_KVS){ cout<< TIMINGRESULTSCOLOR<<"readvdata:: vertices read: offset: "<<(dramoffset_kvs - globalparams.BASEOFFSETKVS_DESTVERTICESDATA) * VECTOR_SIZE<<"-"<<(dramoffset_kvs + size_kvs - globalparams.BASEOFFSETKVS_DESTVERTICESDATA) * VECTOR_SIZE<<", number of vertex datas read: "<<(size_kvs * VECTOR_SIZE * 2)<<" ("<<size_kvs * VECTOR_SIZE<<" keyvalues written)"<< RESET<<endl; }				
	#endif
	return;
}

void acts_all::MERGE_merge1andsavevdata(bool_type enable, uint512_dt * vdram, keyvalue_vbuffer_t vbuffer0[VDATA_PACKINGSIZE][BLOCKRAM_SIZE], unsigned int begincol, batch_type bufferoffset_kvs, unsigned int dramoffset_kvs){
	if(enable == OFF){ return; }
	keyvalue_t dummykv;
	dummykv.key = 0xFFFFFFFF; dummykv.value = 0xFFFFFFFF;
	
	keyy_t keyA0 = dummykv.key;
	value_t valA0 = dummykv.key;
	keyy_t keyB0 = dummykv.key;
	value_t valB0 = dummykv.key;
	keyy_t keyC0 = dummykv.key;
	value_t valC0 = dummykv.key;
	keyy_t keyD0 = dummykv.key;
	value_t valD0 = dummykv.key;
	keyy_t keyE0 = dummykv.key;
	value_t valE0 = dummykv.key;
	keyy_t keyF0 = dummykv.key;
	value_t valF0 = dummykv.key;
	keyy_t keyG0 = dummykv.key;
	value_t valG0 = dummykv.key;
	keyy_t keyH0 = dummykv.key;
	value_t valH0 = dummykv.key;
	keyy_t keyI0 = dummykv.key;
	value_t valI0 = dummykv.key;
	keyy_t keyJ0 = dummykv.key;
	value_t valJ0 = dummykv.key;
	keyy_t keyK0 = dummykv.key;
	value_t valK0 = dummykv.key;
	keyy_t keyL0 = dummykv.key;
	value_t valL0 = dummykv.key;
	keyy_t keyM0 = dummykv.key;
	value_t valM0 = dummykv.key;
	keyy_t keyA1 = dummykv.key;
	value_t valA1 = dummykv.key;
	keyy_t keyB1 = dummykv.key;
	value_t valB1 = dummykv.key;
	keyy_t keyC1 = dummykv.key;
	value_t valC1 = dummykv.key;
	keyy_t keyD1 = dummykv.key;
	value_t valD1 = dummykv.key;
	keyy_t keyE1 = dummykv.key;
	value_t valE1 = dummykv.key;
	keyy_t keyF1 = dummykv.key;
	value_t valF1 = dummykv.key;
	keyy_t keyG1 = dummykv.key;
	value_t valG1 = dummykv.key;
	keyy_t keyH1 = dummykv.key;
	value_t valH1 = dummykv.key;
	keyy_t keyI1 = dummykv.key;
	value_t valI1 = dummykv.key;
	keyy_t keyJ1 = dummykv.key;
	value_t valJ1 = dummykv.key;
	keyy_t keyK1 = dummykv.key;
	value_t valK1 = dummykv.key;
	keyy_t keyL1 = dummykv.key;
	value_t valL1 = dummykv.key;
	keyy_t keyM1 = dummykv.key;
	value_t valM1 = dummykv.key;
	keyy_t keyA2 = dummykv.key;
	value_t valA2 = dummykv.key;
	keyy_t keyB2 = dummykv.key;
	value_t valB2 = dummykv.key;
	keyy_t keyC2 = dummykv.key;
	value_t valC2 = dummykv.key;
	keyy_t keyD2 = dummykv.key;
	value_t valD2 = dummykv.key;
	keyy_t keyE2 = dummykv.key;
	value_t valE2 = dummykv.key;
	keyy_t keyF2 = dummykv.key;
	value_t valF2 = dummykv.key;
	keyy_t keyG2 = dummykv.key;
	value_t valG2 = dummykv.key;
	keyy_t keyH2 = dummykv.key;
	value_t valH2 = dummykv.key;
	keyy_t keyI2 = dummykv.key;
	value_t valI2 = dummykv.key;
	keyy_t keyJ2 = dummykv.key;
	value_t valJ2 = dummykv.key;
	keyy_t keyK2 = dummykv.key;
	value_t valK2 = dummykv.key;
	keyy_t keyL2 = dummykv.key;
	value_t valL2 = dummykv.key;
	keyy_t keyM2 = dummykv.key;
	value_t valM2 = dummykv.key;
	keyy_t keyA3 = dummykv.key;
	value_t valA3 = dummykv.key;
	keyy_t keyB3 = dummykv.key;
	value_t valB3 = dummykv.key;
	keyy_t keyC3 = dummykv.key;
	value_t valC3 = dummykv.key;
	keyy_t keyD3 = dummykv.key;
	value_t valD3 = dummykv.key;
	keyy_t keyE3 = dummykv.key;
	value_t valE3 = dummykv.key;
	keyy_t keyF3 = dummykv.key;
	value_t valF3 = dummykv.key;
	keyy_t keyG3 = dummykv.key;
	value_t valG3 = dummykv.key;
	keyy_t keyH3 = dummykv.key;
	value_t valH3 = dummykv.key;
	keyy_t keyI3 = dummykv.key;
	value_t valI3 = dummykv.key;
	keyy_t keyJ3 = dummykv.key;
	value_t valJ3 = dummykv.key;
	keyy_t keyK3 = dummykv.key;
	value_t valK3 = dummykv.key;
	keyy_t keyL3 = dummykv.key;
	value_t valL3 = dummykv.key;
	keyy_t keyM3 = dummykv.key;
	value_t valM3 = dummykv.key;
	keyy_t keyA4 = dummykv.key;
	value_t valA4 = dummykv.key;
	keyy_t keyB4 = dummykv.key;
	value_t valB4 = dummykv.key;
	keyy_t keyC4 = dummykv.key;
	value_t valC4 = dummykv.key;
	keyy_t keyD4 = dummykv.key;
	value_t valD4 = dummykv.key;
	keyy_t keyE4 = dummykv.key;
	value_t valE4 = dummykv.key;
	keyy_t keyF4 = dummykv.key;
	value_t valF4 = dummykv.key;
	keyy_t keyG4 = dummykv.key;
	value_t valG4 = dummykv.key;
	keyy_t keyH4 = dummykv.key;
	value_t valH4 = dummykv.key;
	keyy_t keyI4 = dummykv.key;
	value_t valI4 = dummykv.key;
	keyy_t keyJ4 = dummykv.key;
	value_t valJ4 = dummykv.key;
	keyy_t keyK4 = dummykv.key;
	value_t valK4 = dummykv.key;
	keyy_t keyL4 = dummykv.key;
	value_t valL4 = dummykv.key;
	keyy_t keyM4 = dummykv.key;
	value_t valM4 = dummykv.key;
	keyy_t keyA5 = dummykv.key;
	value_t valA5 = dummykv.key;
	keyy_t keyB5 = dummykv.key;
	value_t valB5 = dummykv.key;
	keyy_t keyC5 = dummykv.key;
	value_t valC5 = dummykv.key;
	keyy_t keyD5 = dummykv.key;
	value_t valD5 = dummykv.key;
	keyy_t keyE5 = dummykv.key;
	value_t valE5 = dummykv.key;
	keyy_t keyF5 = dummykv.key;
	value_t valF5 = dummykv.key;
	keyy_t keyG5 = dummykv.key;
	value_t valG5 = dummykv.key;
	keyy_t keyH5 = dummykv.key;
	value_t valH5 = dummykv.key;
	keyy_t keyI5 = dummykv.key;
	value_t valI5 = dummykv.key;
	keyy_t keyJ5 = dummykv.key;
	value_t valJ5 = dummykv.key;
	keyy_t keyK5 = dummykv.key;
	value_t valK5 = dummykv.key;
	keyy_t keyL5 = dummykv.key;
	value_t valL5 = dummykv.key;
	keyy_t keyM5 = dummykv.key;
	value_t valM5 = dummykv.key;
	keyy_t keyA6 = dummykv.key;
	value_t valA6 = dummykv.key;
	keyy_t keyB6 = dummykv.key;
	value_t valB6 = dummykv.key;
	keyy_t keyC6 = dummykv.key;
	value_t valC6 = dummykv.key;
	keyy_t keyD6 = dummykv.key;
	value_t valD6 = dummykv.key;
	keyy_t keyE6 = dummykv.key;
	value_t valE6 = dummykv.key;
	keyy_t keyF6 = dummykv.key;
	value_t valF6 = dummykv.key;
	keyy_t keyG6 = dummykv.key;
	value_t valG6 = dummykv.key;
	keyy_t keyH6 = dummykv.key;
	value_t valH6 = dummykv.key;
	keyy_t keyI6 = dummykv.key;
	value_t valI6 = dummykv.key;
	keyy_t keyJ6 = dummykv.key;
	value_t valJ6 = dummykv.key;
	keyy_t keyK6 = dummykv.key;
	value_t valK6 = dummykv.key;
	keyy_t keyL6 = dummykv.key;
	value_t valL6 = dummykv.key;
	keyy_t keyM6 = dummykv.key;
	value_t valM6 = dummykv.key;
	keyy_t keyA7 = dummykv.key;
	value_t valA7 = dummykv.key;
	keyy_t keyB7 = dummykv.key;
	value_t valB7 = dummykv.key;
	keyy_t keyC7 = dummykv.key;
	value_t valC7 = dummykv.key;
	keyy_t keyD7 = dummykv.key;
	value_t valD7 = dummykv.key;
	keyy_t keyE7 = dummykv.key;
	value_t valE7 = dummykv.key;
	keyy_t keyF7 = dummykv.key;
	value_t valF7 = dummykv.key;
	keyy_t keyG7 = dummykv.key;
	value_t valG7 = dummykv.key;
	keyy_t keyH7 = dummykv.key;
	value_t valH7 = dummykv.key;
	keyy_t keyI7 = dummykv.key;
	value_t valI7 = dummykv.key;
	keyy_t keyJ7 = dummykv.key;
	value_t valJ7 = dummykv.key;
	keyy_t keyK7 = dummykv.key;
	value_t valK7 = dummykv.key;
	keyy_t keyL7 = dummykv.key;
	value_t valL7 = dummykv.key;
	keyy_t keyM7 = dummykv.key;
	value_t valM7 = dummykv.key;
	
	MERGE1_LOOP1: for (buffer_type j=0; j<BLOCKRAM_SIZE; j++){
	#pragma HLS PIPELINE II=1
		keyvalue_t mykeyvalue00 = UTIL_GETKV2(vbuffer0[begincol + 0][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue01 = UTIL_GETKV2(vbuffer0[begincol + 1][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue02 = UTIL_GETKV2(vbuffer0[begincol + 2][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue03 = UTIL_GETKV2(vbuffer0[begincol + 3][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue04 = UTIL_GETKV2(vbuffer0[begincol + 4][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue05 = UTIL_GETKV2(vbuffer0[begincol + 5][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue06 = UTIL_GETKV2(vbuffer0[begincol + 6][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue07 = UTIL_GETKV2(vbuffer0[begincol + 7][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue10 = dummykv;
		keyvalue_t mykeyvalue11 = dummykv;
		keyvalue_t mykeyvalue12 = dummykv;
		keyvalue_t mykeyvalue13 = dummykv;
		keyvalue_t mykeyvalue14 = dummykv;
		keyvalue_t mykeyvalue15 = dummykv;
		keyvalue_t mykeyvalue16 = dummykv;
		keyvalue_t mykeyvalue17 = dummykv;
		keyvalue_t mykeyvalue20 = dummykv;
		keyvalue_t mykeyvalue21 = dummykv;
		keyvalue_t mykeyvalue22 = dummykv;
		keyvalue_t mykeyvalue23 = dummykv;
		keyvalue_t mykeyvalue24 = dummykv;
		keyvalue_t mykeyvalue25 = dummykv;
		keyvalue_t mykeyvalue26 = dummykv;
		keyvalue_t mykeyvalue27 = dummykv;
		keyvalue_t mykeyvalue30 = dummykv;
		keyvalue_t mykeyvalue31 = dummykv;
		keyvalue_t mykeyvalue32 = dummykv;
		keyvalue_t mykeyvalue33 = dummykv;
		keyvalue_t mykeyvalue34 = dummykv;
		keyvalue_t mykeyvalue35 = dummykv;
		keyvalue_t mykeyvalue36 = dummykv;
		keyvalue_t mykeyvalue37 = dummykv;
		keyvalue_t mykeyvalue40 = dummykv;
		keyvalue_t mykeyvalue41 = dummykv;
		keyvalue_t mykeyvalue42 = dummykv;
		keyvalue_t mykeyvalue43 = dummykv;
		keyvalue_t mykeyvalue44 = dummykv;
		keyvalue_t mykeyvalue45 = dummykv;
		keyvalue_t mykeyvalue46 = dummykv;
		keyvalue_t mykeyvalue47 = dummykv;
		keyvalue_t mykeyvalue50 = dummykv;
		keyvalue_t mykeyvalue51 = dummykv;
		keyvalue_t mykeyvalue52 = dummykv;
		keyvalue_t mykeyvalue53 = dummykv;
		keyvalue_t mykeyvalue54 = dummykv;
		keyvalue_t mykeyvalue55 = dummykv;
		keyvalue_t mykeyvalue56 = dummykv;
		keyvalue_t mykeyvalue57 = dummykv;
		keyvalue_t mykeyvalue60 = dummykv;
		keyvalue_t mykeyvalue61 = dummykv;
		keyvalue_t mykeyvalue62 = dummykv;
		keyvalue_t mykeyvalue63 = dummykv;
		keyvalue_t mykeyvalue64 = dummykv;
		keyvalue_t mykeyvalue65 = dummykv;
		keyvalue_t mykeyvalue66 = dummykv;
		keyvalue_t mykeyvalue67 = dummykv;
		keyvalue_t mykeyvalue70 = dummykv;
		keyvalue_t mykeyvalue71 = dummykv;
		keyvalue_t mykeyvalue72 = dummykv;
		keyvalue_t mykeyvalue73 = dummykv;
		keyvalue_t mykeyvalue74 = dummykv;
		keyvalue_t mykeyvalue75 = dummykv;
		keyvalue_t mykeyvalue76 = dummykv;
		keyvalue_t mykeyvalue77 = dummykv;
		keyvalue_t mykeyvalue80 = dummykv;
		keyvalue_t mykeyvalue81 = dummykv;
		keyvalue_t mykeyvalue82 = dummykv;
		keyvalue_t mykeyvalue83 = dummykv;
		keyvalue_t mykeyvalue84 = dummykv;
		keyvalue_t mykeyvalue85 = dummykv;
		keyvalue_t mykeyvalue86 = dummykv;
		keyvalue_t mykeyvalue87 = dummykv;
		keyvalue_t mykeyvalue90 = dummykv;
		keyvalue_t mykeyvalue91 = dummykv;
		keyvalue_t mykeyvalue92 = dummykv;
		keyvalue_t mykeyvalue93 = dummykv;
		keyvalue_t mykeyvalue94 = dummykv;
		keyvalue_t mykeyvalue95 = dummykv;
		keyvalue_t mykeyvalue96 = dummykv;
		keyvalue_t mykeyvalue97 = dummykv;
		keyvalue_t mykeyvalue100 = dummykv;
		keyvalue_t mykeyvalue101 = dummykv;
		keyvalue_t mykeyvalue102 = dummykv;
		keyvalue_t mykeyvalue103 = dummykv;
		keyvalue_t mykeyvalue104 = dummykv;
		keyvalue_t mykeyvalue105 = dummykv;
		keyvalue_t mykeyvalue106 = dummykv;
		keyvalue_t mykeyvalue107 = dummykv;
		keyvalue_t mykeyvalue110 = dummykv;
		keyvalue_t mykeyvalue111 = dummykv;
		keyvalue_t mykeyvalue112 = dummykv;
		keyvalue_t mykeyvalue113 = dummykv;
		keyvalue_t mykeyvalue114 = dummykv;
		keyvalue_t mykeyvalue115 = dummykv;
		keyvalue_t mykeyvalue116 = dummykv;
		keyvalue_t mykeyvalue117 = dummykv;
		keyvalue_t mykeyvalue120 = dummykv;
		keyvalue_t mykeyvalue121 = dummykv;
		keyvalue_t mykeyvalue122 = dummykv;
		keyvalue_t mykeyvalue123 = dummykv;
		keyvalue_t mykeyvalue124 = dummykv;
		keyvalue_t mykeyvalue125 = dummykv;
		keyvalue_t mykeyvalue126 = dummykv;
		keyvalue_t mykeyvalue127 = dummykv;
		keyvalue_t mykeyvalue130 = dummykv;
		keyvalue_t mykeyvalue131 = dummykv;
		keyvalue_t mykeyvalue132 = dummykv;
		keyvalue_t mykeyvalue133 = dummykv;
		keyvalue_t mykeyvalue134 = dummykv;
		keyvalue_t mykeyvalue135 = dummykv;
		keyvalue_t mykeyvalue136 = dummykv;
		keyvalue_t mykeyvalue137 = dummykv;
		keyvalue_t mykeyvalue140 = dummykv;
		keyvalue_t mykeyvalue141 = dummykv;
		keyvalue_t mykeyvalue142 = dummykv;
		keyvalue_t mykeyvalue143 = dummykv;
		keyvalue_t mykeyvalue144 = dummykv;
		keyvalue_t mykeyvalue145 = dummykv;
		keyvalue_t mykeyvalue146 = dummykv;
		keyvalue_t mykeyvalue147 = dummykv;
		
		//((n)/2)
		keyA0 = MERGE_mergefunc(mykeyvalue00.key, mykeyvalue10.key, NAp);
		keyA1 = MERGE_mergefunc(mykeyvalue01.key, mykeyvalue11.key, NAp);
		keyA2 = MERGE_mergefunc(mykeyvalue02.key, mykeyvalue12.key, NAp);
		keyA3 = MERGE_mergefunc(mykeyvalue03.key, mykeyvalue13.key, NAp);
		keyA4 = MERGE_mergefunc(mykeyvalue04.key, mykeyvalue14.key, NAp);
		keyA5 = MERGE_mergefunc(mykeyvalue05.key, mykeyvalue15.key, NAp);
		keyA6 = MERGE_mergefunc(mykeyvalue06.key, mykeyvalue16.key, NAp);
		keyA7 = MERGE_mergefunc(mykeyvalue07.key, mykeyvalue17.key, NAp);
		keyy_t keyPA0 = MERGE_mergefunc(keyA0, keyB0, NAp);
		keyy_t keyPB0 = MERGE_mergefunc(keyC0, keyD0, NAp);
		keyy_t keyPC0 = MERGE_mergefunc(keyE0, keyF0, NAp);
		keyy_t keyRA0 = MERGE_mergefunc(keyPA0, keyPB0, NAp);
		keyy_t keyRB0 = MERGE_mergefunc(keyPC0, keyF0, NAp);
		keyy_t keyRZ0 = MERGE_mergefunc(keyRA0, keyRB0, NAp);
		keyy_t keyPA1 = MERGE_mergefunc(keyA1, keyB1, NAp);
		keyy_t keyPB1 = MERGE_mergefunc(keyC1, keyD1, NAp);
		keyy_t keyPC1 = MERGE_mergefunc(keyE1, keyF1, NAp);
		keyy_t keyRA1 = MERGE_mergefunc(keyPA1, keyPB1, NAp);
		keyy_t keyRB1 = MERGE_mergefunc(keyPC1, keyF1, NAp);
		keyy_t keyRZ1 = MERGE_mergefunc(keyRA1, keyRB1, NAp);
		keyy_t keyPA2 = MERGE_mergefunc(keyA2, keyB2, NAp);
		keyy_t keyPB2 = MERGE_mergefunc(keyC2, keyD2, NAp);
		keyy_t keyPC2 = MERGE_mergefunc(keyE2, keyF2, NAp);
		keyy_t keyRA2 = MERGE_mergefunc(keyPA2, keyPB2, NAp);
		keyy_t keyRB2 = MERGE_mergefunc(keyPC2, keyF2, NAp);
		keyy_t keyRZ2 = MERGE_mergefunc(keyRA2, keyRB2, NAp);
		keyy_t keyPA3 = MERGE_mergefunc(keyA3, keyB3, NAp);
		keyy_t keyPB3 = MERGE_mergefunc(keyC3, keyD3, NAp);
		keyy_t keyPC3 = MERGE_mergefunc(keyE3, keyF3, NAp);
		keyy_t keyRA3 = MERGE_mergefunc(keyPA3, keyPB3, NAp);
		keyy_t keyRB3 = MERGE_mergefunc(keyPC3, keyF3, NAp);
		keyy_t keyRZ3 = MERGE_mergefunc(keyRA3, keyRB3, NAp);
		keyy_t keyPA4 = MERGE_mergefunc(keyA4, keyB4, NAp);
		keyy_t keyPB4 = MERGE_mergefunc(keyC4, keyD4, NAp);
		keyy_t keyPC4 = MERGE_mergefunc(keyE4, keyF4, NAp);
		keyy_t keyRA4 = MERGE_mergefunc(keyPA4, keyPB4, NAp);
		keyy_t keyRB4 = MERGE_mergefunc(keyPC4, keyF4, NAp);
		keyy_t keyRZ4 = MERGE_mergefunc(keyRA4, keyRB4, NAp);
		keyy_t keyPA5 = MERGE_mergefunc(keyA5, keyB5, NAp);
		keyy_t keyPB5 = MERGE_mergefunc(keyC5, keyD5, NAp);
		keyy_t keyPC5 = MERGE_mergefunc(keyE5, keyF5, NAp);
		keyy_t keyRA5 = MERGE_mergefunc(keyPA5, keyPB5, NAp);
		keyy_t keyRB5 = MERGE_mergefunc(keyPC5, keyF5, NAp);
		keyy_t keyRZ5 = MERGE_mergefunc(keyRA5, keyRB5, NAp);
		keyy_t keyPA6 = MERGE_mergefunc(keyA6, keyB6, NAp);
		keyy_t keyPB6 = MERGE_mergefunc(keyC6, keyD6, NAp);
		keyy_t keyPC6 = MERGE_mergefunc(keyE6, keyF6, NAp);
		keyy_t keyRA6 = MERGE_mergefunc(keyPA6, keyPB6, NAp);
		keyy_t keyRB6 = MERGE_mergefunc(keyPC6, keyF6, NAp);
		keyy_t keyRZ6 = MERGE_mergefunc(keyRA6, keyRB6, NAp);
		keyy_t keyPA7 = MERGE_mergefunc(keyA7, keyB7, NAp);
		keyy_t keyPB7 = MERGE_mergefunc(keyC7, keyD7, NAp);
		keyy_t keyPC7 = MERGE_mergefunc(keyE7, keyF7, NAp);
		keyy_t keyRA7 = MERGE_mergefunc(keyPA7, keyPB7, NAp);
		keyy_t keyRB7 = MERGE_mergefunc(keyPC7, keyF7, NAp);
		keyy_t keyRZ7 = MERGE_mergefunc(keyRA7, keyRB7, NAp);
		
		//((n)/2)
		valA0 = MERGE_mergefunc(mykeyvalue00.value, mykeyvalue10.value, NAp);
		valA1 = MERGE_mergefunc(mykeyvalue01.value, mykeyvalue11.value, NAp);
		valA2 = MERGE_mergefunc(mykeyvalue02.value, mykeyvalue12.value, NAp);
		valA3 = MERGE_mergefunc(mykeyvalue03.value, mykeyvalue13.value, NAp);
		valA4 = MERGE_mergefunc(mykeyvalue04.value, mykeyvalue14.value, NAp);
		valA5 = MERGE_mergefunc(mykeyvalue05.value, mykeyvalue15.value, NAp);
		valA6 = MERGE_mergefunc(mykeyvalue06.value, mykeyvalue16.value, NAp);
		valA7 = MERGE_mergefunc(mykeyvalue07.value, mykeyvalue17.value, NAp);
		value_t valPA0 = MERGE_mergefunc(valA0, valB0, NAp);
		value_t valPB0 = MERGE_mergefunc(valC0, valD0, NAp);
		value_t valPC0 = MERGE_mergefunc(valE0, valF0, NAp);
		value_t valRA0 = MERGE_mergefunc(valPA0, valPB0, NAp);
		value_t valRB0 = MERGE_mergefunc(valPC0, valF0, NAp);
		value_t valRZ0 = MERGE_mergefunc(valRA0, valRB0, NAp);
		value_t valPA1 = MERGE_mergefunc(valA1, valB1, NAp);
		value_t valPB1 = MERGE_mergefunc(valC1, valD1, NAp);
		value_t valPC1 = MERGE_mergefunc(valE1, valF1, NAp);
		value_t valRA1 = MERGE_mergefunc(valPA1, valPB1, NAp);
		value_t valRB1 = MERGE_mergefunc(valPC1, valF1, NAp);
		value_t valRZ1 = MERGE_mergefunc(valRA1, valRB1, NAp);
		value_t valPA2 = MERGE_mergefunc(valA2, valB2, NAp);
		value_t valPB2 = MERGE_mergefunc(valC2, valD2, NAp);
		value_t valPC2 = MERGE_mergefunc(valE2, valF2, NAp);
		value_t valRA2 = MERGE_mergefunc(valPA2, valPB2, NAp);
		value_t valRB2 = MERGE_mergefunc(valPC2, valF2, NAp);
		value_t valRZ2 = MERGE_mergefunc(valRA2, valRB2, NAp);
		value_t valPA3 = MERGE_mergefunc(valA3, valB3, NAp);
		value_t valPB3 = MERGE_mergefunc(valC3, valD3, NAp);
		value_t valPC3 = MERGE_mergefunc(valE3, valF3, NAp);
		value_t valRA3 = MERGE_mergefunc(valPA3, valPB3, NAp);
		value_t valRB3 = MERGE_mergefunc(valPC3, valF3, NAp);
		value_t valRZ3 = MERGE_mergefunc(valRA3, valRB3, NAp);
		value_t valPA4 = MERGE_mergefunc(valA4, valB4, NAp);
		value_t valPB4 = MERGE_mergefunc(valC4, valD4, NAp);
		value_t valPC4 = MERGE_mergefunc(valE4, valF4, NAp);
		value_t valRA4 = MERGE_mergefunc(valPA4, valPB4, NAp);
		value_t valRB4 = MERGE_mergefunc(valPC4, valF4, NAp);
		value_t valRZ4 = MERGE_mergefunc(valRA4, valRB4, NAp);
		value_t valPA5 = MERGE_mergefunc(valA5, valB5, NAp);
		value_t valPB5 = MERGE_mergefunc(valC5, valD5, NAp);
		value_t valPC5 = MERGE_mergefunc(valE5, valF5, NAp);
		value_t valRA5 = MERGE_mergefunc(valPA5, valPB5, NAp);
		value_t valRB5 = MERGE_mergefunc(valPC5, valF5, NAp);
		value_t valRZ5 = MERGE_mergefunc(valRA5, valRB5, NAp);
		value_t valPA6 = MERGE_mergefunc(valA6, valB6, NAp);
		value_t valPB6 = MERGE_mergefunc(valC6, valD6, NAp);
		value_t valPC6 = MERGE_mergefunc(valE6, valF6, NAp);
		value_t valRA6 = MERGE_mergefunc(valPA6, valPB6, NAp);
		value_t valRB6 = MERGE_mergefunc(valPC6, valF6, NAp);
		value_t valRZ6 = MERGE_mergefunc(valRA6, valRB6, NAp);
		value_t valPA7 = MERGE_mergefunc(valA7, valB7, NAp);
		value_t valPB7 = MERGE_mergefunc(valC7, valD7, NAp);
		value_t valPC7 = MERGE_mergefunc(valE7, valF7, NAp);
		value_t valRA7 = MERGE_mergefunc(valPA7, valPB7, NAp);
		value_t valRB7 = MERGE_mergefunc(valPC7, valF7, NAp);
		value_t valRZ7 = MERGE_mergefunc(valRA7, valRB7, NAp);
		
		#ifdef _WIDEWORD
		vdram[dramoffset_kvs + j].range(31, 0) = keyRZ0;
		vdram[dramoffset_kvs + j].range(63, 32) = valRZ0;
		vdram[dramoffset_kvs + j].range(95, 64) = keyRZ1;
		vdram[dramoffset_kvs + j].range(127, 96) = valRZ1;
		vdram[dramoffset_kvs + j].range(159, 128) = keyRZ2;
		vdram[dramoffset_kvs + j].range(191, 160) = valRZ2;
		vdram[dramoffset_kvs + j].range(223, 192) = keyRZ3;
		vdram[dramoffset_kvs + j].range(255, 224) = valRZ3;
		vdram[dramoffset_kvs + j].range(287, 256) = keyRZ4;
		vdram[dramoffset_kvs + j].range(319, 288) = valRZ4;
		vdram[dramoffset_kvs + j].range(351, 320) = keyRZ5;
		vdram[dramoffset_kvs + j].range(383, 352) = valRZ5;
		vdram[dramoffset_kvs + j].range(415, 384) = keyRZ6;
		vdram[dramoffset_kvs + j].range(447, 416) = valRZ6;
		vdram[dramoffset_kvs + j].range(479, 448) = keyRZ7;
		vdram[dramoffset_kvs + j].range(511, 480) = valRZ7;
		#else
		vdram[dramoffset_kvs + j].data[0].key = keyRZ0;
		vdram[dramoffset_kvs + j].data[0].value = valRZ0;
		vdram[dramoffset_kvs + j].data[1].key = keyRZ1;
		vdram[dramoffset_kvs + j].data[1].value = valRZ1;
		vdram[dramoffset_kvs + j].data[2].key = keyRZ2;
		vdram[dramoffset_kvs + j].data[2].value = valRZ2;
		vdram[dramoffset_kvs + j].data[3].key = keyRZ3;
		vdram[dramoffset_kvs + j].data[3].value = valRZ3;
		vdram[dramoffset_kvs + j].data[4].key = keyRZ4;
		vdram[dramoffset_kvs + j].data[4].value = valRZ4;
		vdram[dramoffset_kvs + j].data[5].key = keyRZ5;
		vdram[dramoffset_kvs + j].data[5].value = valRZ5;
		vdram[dramoffset_kvs + j].data[6].key = keyRZ6;
		vdram[dramoffset_kvs + j].data[6].value = valRZ6;
		vdram[dramoffset_kvs + j].data[7].key = keyRZ7;
		vdram[dramoffset_kvs + j].data[7].value = valRZ7;
		#endif
	}
	return;
}
void acts_all::MERGE_merge2andsavevdata(bool_type enable, uint512_dt * vdram, keyvalue_vbuffer_t vbuffer0[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t vbuffer1[VDATA_PACKINGSIZE][BLOCKRAM_SIZE], unsigned int begincol, batch_type bufferoffset_kvs, unsigned int dramoffset_kvs){
	if(enable == OFF){ return; }
	keyvalue_t dummykv;
	dummykv.key = 0xFFFFFFFF; dummykv.value = 0xFFFFFFFF;
	
	keyy_t keyA0 = dummykv.key;
	value_t valA0 = dummykv.key;
	keyy_t keyB0 = dummykv.key;
	value_t valB0 = dummykv.key;
	keyy_t keyC0 = dummykv.key;
	value_t valC0 = dummykv.key;
	keyy_t keyD0 = dummykv.key;
	value_t valD0 = dummykv.key;
	keyy_t keyE0 = dummykv.key;
	value_t valE0 = dummykv.key;
	keyy_t keyF0 = dummykv.key;
	value_t valF0 = dummykv.key;
	keyy_t keyG0 = dummykv.key;
	value_t valG0 = dummykv.key;
	keyy_t keyH0 = dummykv.key;
	value_t valH0 = dummykv.key;
	keyy_t keyI0 = dummykv.key;
	value_t valI0 = dummykv.key;
	keyy_t keyJ0 = dummykv.key;
	value_t valJ0 = dummykv.key;
	keyy_t keyK0 = dummykv.key;
	value_t valK0 = dummykv.key;
	keyy_t keyL0 = dummykv.key;
	value_t valL0 = dummykv.key;
	keyy_t keyM0 = dummykv.key;
	value_t valM0 = dummykv.key;
	keyy_t keyA1 = dummykv.key;
	value_t valA1 = dummykv.key;
	keyy_t keyB1 = dummykv.key;
	value_t valB1 = dummykv.key;
	keyy_t keyC1 = dummykv.key;
	value_t valC1 = dummykv.key;
	keyy_t keyD1 = dummykv.key;
	value_t valD1 = dummykv.key;
	keyy_t keyE1 = dummykv.key;
	value_t valE1 = dummykv.key;
	keyy_t keyF1 = dummykv.key;
	value_t valF1 = dummykv.key;
	keyy_t keyG1 = dummykv.key;
	value_t valG1 = dummykv.key;
	keyy_t keyH1 = dummykv.key;
	value_t valH1 = dummykv.key;
	keyy_t keyI1 = dummykv.key;
	value_t valI1 = dummykv.key;
	keyy_t keyJ1 = dummykv.key;
	value_t valJ1 = dummykv.key;
	keyy_t keyK1 = dummykv.key;
	value_t valK1 = dummykv.key;
	keyy_t keyL1 = dummykv.key;
	value_t valL1 = dummykv.key;
	keyy_t keyM1 = dummykv.key;
	value_t valM1 = dummykv.key;
	keyy_t keyA2 = dummykv.key;
	value_t valA2 = dummykv.key;
	keyy_t keyB2 = dummykv.key;
	value_t valB2 = dummykv.key;
	keyy_t keyC2 = dummykv.key;
	value_t valC2 = dummykv.key;
	keyy_t keyD2 = dummykv.key;
	value_t valD2 = dummykv.key;
	keyy_t keyE2 = dummykv.key;
	value_t valE2 = dummykv.key;
	keyy_t keyF2 = dummykv.key;
	value_t valF2 = dummykv.key;
	keyy_t keyG2 = dummykv.key;
	value_t valG2 = dummykv.key;
	keyy_t keyH2 = dummykv.key;
	value_t valH2 = dummykv.key;
	keyy_t keyI2 = dummykv.key;
	value_t valI2 = dummykv.key;
	keyy_t keyJ2 = dummykv.key;
	value_t valJ2 = dummykv.key;
	keyy_t keyK2 = dummykv.key;
	value_t valK2 = dummykv.key;
	keyy_t keyL2 = dummykv.key;
	value_t valL2 = dummykv.key;
	keyy_t keyM2 = dummykv.key;
	value_t valM2 = dummykv.key;
	keyy_t keyA3 = dummykv.key;
	value_t valA3 = dummykv.key;
	keyy_t keyB3 = dummykv.key;
	value_t valB3 = dummykv.key;
	keyy_t keyC3 = dummykv.key;
	value_t valC3 = dummykv.key;
	keyy_t keyD3 = dummykv.key;
	value_t valD3 = dummykv.key;
	keyy_t keyE3 = dummykv.key;
	value_t valE3 = dummykv.key;
	keyy_t keyF3 = dummykv.key;
	value_t valF3 = dummykv.key;
	keyy_t keyG3 = dummykv.key;
	value_t valG3 = dummykv.key;
	keyy_t keyH3 = dummykv.key;
	value_t valH3 = dummykv.key;
	keyy_t keyI3 = dummykv.key;
	value_t valI3 = dummykv.key;
	keyy_t keyJ3 = dummykv.key;
	value_t valJ3 = dummykv.key;
	keyy_t keyK3 = dummykv.key;
	value_t valK3 = dummykv.key;
	keyy_t keyL3 = dummykv.key;
	value_t valL3 = dummykv.key;
	keyy_t keyM3 = dummykv.key;
	value_t valM3 = dummykv.key;
	keyy_t keyA4 = dummykv.key;
	value_t valA4 = dummykv.key;
	keyy_t keyB4 = dummykv.key;
	value_t valB4 = dummykv.key;
	keyy_t keyC4 = dummykv.key;
	value_t valC4 = dummykv.key;
	keyy_t keyD4 = dummykv.key;
	value_t valD4 = dummykv.key;
	keyy_t keyE4 = dummykv.key;
	value_t valE4 = dummykv.key;
	keyy_t keyF4 = dummykv.key;
	value_t valF4 = dummykv.key;
	keyy_t keyG4 = dummykv.key;
	value_t valG4 = dummykv.key;
	keyy_t keyH4 = dummykv.key;
	value_t valH4 = dummykv.key;
	keyy_t keyI4 = dummykv.key;
	value_t valI4 = dummykv.key;
	keyy_t keyJ4 = dummykv.key;
	value_t valJ4 = dummykv.key;
	keyy_t keyK4 = dummykv.key;
	value_t valK4 = dummykv.key;
	keyy_t keyL4 = dummykv.key;
	value_t valL4 = dummykv.key;
	keyy_t keyM4 = dummykv.key;
	value_t valM4 = dummykv.key;
	keyy_t keyA5 = dummykv.key;
	value_t valA5 = dummykv.key;
	keyy_t keyB5 = dummykv.key;
	value_t valB5 = dummykv.key;
	keyy_t keyC5 = dummykv.key;
	value_t valC5 = dummykv.key;
	keyy_t keyD5 = dummykv.key;
	value_t valD5 = dummykv.key;
	keyy_t keyE5 = dummykv.key;
	value_t valE5 = dummykv.key;
	keyy_t keyF5 = dummykv.key;
	value_t valF5 = dummykv.key;
	keyy_t keyG5 = dummykv.key;
	value_t valG5 = dummykv.key;
	keyy_t keyH5 = dummykv.key;
	value_t valH5 = dummykv.key;
	keyy_t keyI5 = dummykv.key;
	value_t valI5 = dummykv.key;
	keyy_t keyJ5 = dummykv.key;
	value_t valJ5 = dummykv.key;
	keyy_t keyK5 = dummykv.key;
	value_t valK5 = dummykv.key;
	keyy_t keyL5 = dummykv.key;
	value_t valL5 = dummykv.key;
	keyy_t keyM5 = dummykv.key;
	value_t valM5 = dummykv.key;
	keyy_t keyA6 = dummykv.key;
	value_t valA6 = dummykv.key;
	keyy_t keyB6 = dummykv.key;
	value_t valB6 = dummykv.key;
	keyy_t keyC6 = dummykv.key;
	value_t valC6 = dummykv.key;
	keyy_t keyD6 = dummykv.key;
	value_t valD6 = dummykv.key;
	keyy_t keyE6 = dummykv.key;
	value_t valE6 = dummykv.key;
	keyy_t keyF6 = dummykv.key;
	value_t valF6 = dummykv.key;
	keyy_t keyG6 = dummykv.key;
	value_t valG6 = dummykv.key;
	keyy_t keyH6 = dummykv.key;
	value_t valH6 = dummykv.key;
	keyy_t keyI6 = dummykv.key;
	value_t valI6 = dummykv.key;
	keyy_t keyJ6 = dummykv.key;
	value_t valJ6 = dummykv.key;
	keyy_t keyK6 = dummykv.key;
	value_t valK6 = dummykv.key;
	keyy_t keyL6 = dummykv.key;
	value_t valL6 = dummykv.key;
	keyy_t keyM6 = dummykv.key;
	value_t valM6 = dummykv.key;
	keyy_t keyA7 = dummykv.key;
	value_t valA7 = dummykv.key;
	keyy_t keyB7 = dummykv.key;
	value_t valB7 = dummykv.key;
	keyy_t keyC7 = dummykv.key;
	value_t valC7 = dummykv.key;
	keyy_t keyD7 = dummykv.key;
	value_t valD7 = dummykv.key;
	keyy_t keyE7 = dummykv.key;
	value_t valE7 = dummykv.key;
	keyy_t keyF7 = dummykv.key;
	value_t valF7 = dummykv.key;
	keyy_t keyG7 = dummykv.key;
	value_t valG7 = dummykv.key;
	keyy_t keyH7 = dummykv.key;
	value_t valH7 = dummykv.key;
	keyy_t keyI7 = dummykv.key;
	value_t valI7 = dummykv.key;
	keyy_t keyJ7 = dummykv.key;
	value_t valJ7 = dummykv.key;
	keyy_t keyK7 = dummykv.key;
	value_t valK7 = dummykv.key;
	keyy_t keyL7 = dummykv.key;
	value_t valL7 = dummykv.key;
	keyy_t keyM7 = dummykv.key;
	value_t valM7 = dummykv.key;
	
	MERGE2_LOOP1: for (buffer_type j=0; j<BLOCKRAM_SIZE; j++){
	#pragma HLS PIPELINE II=1
		keyvalue_t mykeyvalue00 = UTIL_GETKV2(vbuffer0[begincol + 0][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue01 = UTIL_GETKV2(vbuffer0[begincol + 1][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue02 = UTIL_GETKV2(vbuffer0[begincol + 2][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue03 = UTIL_GETKV2(vbuffer0[begincol + 3][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue04 = UTIL_GETKV2(vbuffer0[begincol + 4][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue05 = UTIL_GETKV2(vbuffer0[begincol + 5][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue06 = UTIL_GETKV2(vbuffer0[begincol + 6][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue07 = UTIL_GETKV2(vbuffer0[begincol + 7][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue10 = UTIL_GETKV2(vbuffer1[begincol + 0][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue11 = UTIL_GETKV2(vbuffer1[begincol + 1][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue12 = UTIL_GETKV2(vbuffer1[begincol + 2][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue13 = UTIL_GETKV2(vbuffer1[begincol + 3][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue14 = UTIL_GETKV2(vbuffer1[begincol + 4][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue15 = UTIL_GETKV2(vbuffer1[begincol + 5][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue16 = UTIL_GETKV2(vbuffer1[begincol + 6][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue17 = UTIL_GETKV2(vbuffer1[begincol + 7][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue20 = dummykv;
		keyvalue_t mykeyvalue21 = dummykv;
		keyvalue_t mykeyvalue22 = dummykv;
		keyvalue_t mykeyvalue23 = dummykv;
		keyvalue_t mykeyvalue24 = dummykv;
		keyvalue_t mykeyvalue25 = dummykv;
		keyvalue_t mykeyvalue26 = dummykv;
		keyvalue_t mykeyvalue27 = dummykv;
		keyvalue_t mykeyvalue30 = dummykv;
		keyvalue_t mykeyvalue31 = dummykv;
		keyvalue_t mykeyvalue32 = dummykv;
		keyvalue_t mykeyvalue33 = dummykv;
		keyvalue_t mykeyvalue34 = dummykv;
		keyvalue_t mykeyvalue35 = dummykv;
		keyvalue_t mykeyvalue36 = dummykv;
		keyvalue_t mykeyvalue37 = dummykv;
		keyvalue_t mykeyvalue40 = dummykv;
		keyvalue_t mykeyvalue41 = dummykv;
		keyvalue_t mykeyvalue42 = dummykv;
		keyvalue_t mykeyvalue43 = dummykv;
		keyvalue_t mykeyvalue44 = dummykv;
		keyvalue_t mykeyvalue45 = dummykv;
		keyvalue_t mykeyvalue46 = dummykv;
		keyvalue_t mykeyvalue47 = dummykv;
		keyvalue_t mykeyvalue50 = dummykv;
		keyvalue_t mykeyvalue51 = dummykv;
		keyvalue_t mykeyvalue52 = dummykv;
		keyvalue_t mykeyvalue53 = dummykv;
		keyvalue_t mykeyvalue54 = dummykv;
		keyvalue_t mykeyvalue55 = dummykv;
		keyvalue_t mykeyvalue56 = dummykv;
		keyvalue_t mykeyvalue57 = dummykv;
		keyvalue_t mykeyvalue60 = dummykv;
		keyvalue_t mykeyvalue61 = dummykv;
		keyvalue_t mykeyvalue62 = dummykv;
		keyvalue_t mykeyvalue63 = dummykv;
		keyvalue_t mykeyvalue64 = dummykv;
		keyvalue_t mykeyvalue65 = dummykv;
		keyvalue_t mykeyvalue66 = dummykv;
		keyvalue_t mykeyvalue67 = dummykv;
		keyvalue_t mykeyvalue70 = dummykv;
		keyvalue_t mykeyvalue71 = dummykv;
		keyvalue_t mykeyvalue72 = dummykv;
		keyvalue_t mykeyvalue73 = dummykv;
		keyvalue_t mykeyvalue74 = dummykv;
		keyvalue_t mykeyvalue75 = dummykv;
		keyvalue_t mykeyvalue76 = dummykv;
		keyvalue_t mykeyvalue77 = dummykv;
		keyvalue_t mykeyvalue80 = dummykv;
		keyvalue_t mykeyvalue81 = dummykv;
		keyvalue_t mykeyvalue82 = dummykv;
		keyvalue_t mykeyvalue83 = dummykv;
		keyvalue_t mykeyvalue84 = dummykv;
		keyvalue_t mykeyvalue85 = dummykv;
		keyvalue_t mykeyvalue86 = dummykv;
		keyvalue_t mykeyvalue87 = dummykv;
		keyvalue_t mykeyvalue90 = dummykv;
		keyvalue_t mykeyvalue91 = dummykv;
		keyvalue_t mykeyvalue92 = dummykv;
		keyvalue_t mykeyvalue93 = dummykv;
		keyvalue_t mykeyvalue94 = dummykv;
		keyvalue_t mykeyvalue95 = dummykv;
		keyvalue_t mykeyvalue96 = dummykv;
		keyvalue_t mykeyvalue97 = dummykv;
		keyvalue_t mykeyvalue100 = dummykv;
		keyvalue_t mykeyvalue101 = dummykv;
		keyvalue_t mykeyvalue102 = dummykv;
		keyvalue_t mykeyvalue103 = dummykv;
		keyvalue_t mykeyvalue104 = dummykv;
		keyvalue_t mykeyvalue105 = dummykv;
		keyvalue_t mykeyvalue106 = dummykv;
		keyvalue_t mykeyvalue107 = dummykv;
		keyvalue_t mykeyvalue110 = dummykv;
		keyvalue_t mykeyvalue111 = dummykv;
		keyvalue_t mykeyvalue112 = dummykv;
		keyvalue_t mykeyvalue113 = dummykv;
		keyvalue_t mykeyvalue114 = dummykv;
		keyvalue_t mykeyvalue115 = dummykv;
		keyvalue_t mykeyvalue116 = dummykv;
		keyvalue_t mykeyvalue117 = dummykv;
		keyvalue_t mykeyvalue120 = dummykv;
		keyvalue_t mykeyvalue121 = dummykv;
		keyvalue_t mykeyvalue122 = dummykv;
		keyvalue_t mykeyvalue123 = dummykv;
		keyvalue_t mykeyvalue124 = dummykv;
		keyvalue_t mykeyvalue125 = dummykv;
		keyvalue_t mykeyvalue126 = dummykv;
		keyvalue_t mykeyvalue127 = dummykv;
		keyvalue_t mykeyvalue130 = dummykv;
		keyvalue_t mykeyvalue131 = dummykv;
		keyvalue_t mykeyvalue132 = dummykv;
		keyvalue_t mykeyvalue133 = dummykv;
		keyvalue_t mykeyvalue134 = dummykv;
		keyvalue_t mykeyvalue135 = dummykv;
		keyvalue_t mykeyvalue136 = dummykv;
		keyvalue_t mykeyvalue137 = dummykv;
		keyvalue_t mykeyvalue140 = dummykv;
		keyvalue_t mykeyvalue141 = dummykv;
		keyvalue_t mykeyvalue142 = dummykv;
		keyvalue_t mykeyvalue143 = dummykv;
		keyvalue_t mykeyvalue144 = dummykv;
		keyvalue_t mykeyvalue145 = dummykv;
		keyvalue_t mykeyvalue146 = dummykv;
		keyvalue_t mykeyvalue147 = dummykv;
		
		//((n)/2)
		keyA0 = MERGE_mergefunc(mykeyvalue00.key, mykeyvalue10.key, NAp);
		keyB0 = MERGE_mergefunc(mykeyvalue20.key, mykeyvalue30.key, NAp);
		keyA1 = MERGE_mergefunc(mykeyvalue01.key, mykeyvalue11.key, NAp);
		keyB1 = MERGE_mergefunc(mykeyvalue21.key, mykeyvalue31.key, NAp);
		keyA2 = MERGE_mergefunc(mykeyvalue02.key, mykeyvalue12.key, NAp);
		keyB2 = MERGE_mergefunc(mykeyvalue22.key, mykeyvalue32.key, NAp);
		keyA3 = MERGE_mergefunc(mykeyvalue03.key, mykeyvalue13.key, NAp);
		keyB3 = MERGE_mergefunc(mykeyvalue23.key, mykeyvalue33.key, NAp);
		keyA4 = MERGE_mergefunc(mykeyvalue04.key, mykeyvalue14.key, NAp);
		keyB4 = MERGE_mergefunc(mykeyvalue24.key, mykeyvalue34.key, NAp);
		keyA5 = MERGE_mergefunc(mykeyvalue05.key, mykeyvalue15.key, NAp);
		keyB5 = MERGE_mergefunc(mykeyvalue25.key, mykeyvalue35.key, NAp);
		keyA6 = MERGE_mergefunc(mykeyvalue06.key, mykeyvalue16.key, NAp);
		keyB6 = MERGE_mergefunc(mykeyvalue26.key, mykeyvalue36.key, NAp);
		keyA7 = MERGE_mergefunc(mykeyvalue07.key, mykeyvalue17.key, NAp);
		keyB7 = MERGE_mergefunc(mykeyvalue27.key, mykeyvalue37.key, NAp);
		keyy_t keyPA0 = MERGE_mergefunc(keyA0, keyB0, NAp);
		keyy_t keyPB0 = MERGE_mergefunc(keyC0, keyD0, NAp);
		keyy_t keyPC0 = MERGE_mergefunc(keyE0, keyF0, NAp);
		keyy_t keyRA0 = MERGE_mergefunc(keyPA0, keyPB0, NAp);
		keyy_t keyRB0 = MERGE_mergefunc(keyPC0, keyF0, NAp);
		keyy_t keyRZ0 = MERGE_mergefunc(keyRA0, keyRB0, NAp);
		keyy_t keyPA1 = MERGE_mergefunc(keyA1, keyB1, NAp);
		keyy_t keyPB1 = MERGE_mergefunc(keyC1, keyD1, NAp);
		keyy_t keyPC1 = MERGE_mergefunc(keyE1, keyF1, NAp);
		keyy_t keyRA1 = MERGE_mergefunc(keyPA1, keyPB1, NAp);
		keyy_t keyRB1 = MERGE_mergefunc(keyPC1, keyF1, NAp);
		keyy_t keyRZ1 = MERGE_mergefunc(keyRA1, keyRB1, NAp);
		keyy_t keyPA2 = MERGE_mergefunc(keyA2, keyB2, NAp);
		keyy_t keyPB2 = MERGE_mergefunc(keyC2, keyD2, NAp);
		keyy_t keyPC2 = MERGE_mergefunc(keyE2, keyF2, NAp);
		keyy_t keyRA2 = MERGE_mergefunc(keyPA2, keyPB2, NAp);
		keyy_t keyRB2 = MERGE_mergefunc(keyPC2, keyF2, NAp);
		keyy_t keyRZ2 = MERGE_mergefunc(keyRA2, keyRB2, NAp);
		keyy_t keyPA3 = MERGE_mergefunc(keyA3, keyB3, NAp);
		keyy_t keyPB3 = MERGE_mergefunc(keyC3, keyD3, NAp);
		keyy_t keyPC3 = MERGE_mergefunc(keyE3, keyF3, NAp);
		keyy_t keyRA3 = MERGE_mergefunc(keyPA3, keyPB3, NAp);
		keyy_t keyRB3 = MERGE_mergefunc(keyPC3, keyF3, NAp);
		keyy_t keyRZ3 = MERGE_mergefunc(keyRA3, keyRB3, NAp);
		keyy_t keyPA4 = MERGE_mergefunc(keyA4, keyB4, NAp);
		keyy_t keyPB4 = MERGE_mergefunc(keyC4, keyD4, NAp);
		keyy_t keyPC4 = MERGE_mergefunc(keyE4, keyF4, NAp);
		keyy_t keyRA4 = MERGE_mergefunc(keyPA4, keyPB4, NAp);
		keyy_t keyRB4 = MERGE_mergefunc(keyPC4, keyF4, NAp);
		keyy_t keyRZ4 = MERGE_mergefunc(keyRA4, keyRB4, NAp);
		keyy_t keyPA5 = MERGE_mergefunc(keyA5, keyB5, NAp);
		keyy_t keyPB5 = MERGE_mergefunc(keyC5, keyD5, NAp);
		keyy_t keyPC5 = MERGE_mergefunc(keyE5, keyF5, NAp);
		keyy_t keyRA5 = MERGE_mergefunc(keyPA5, keyPB5, NAp);
		keyy_t keyRB5 = MERGE_mergefunc(keyPC5, keyF5, NAp);
		keyy_t keyRZ5 = MERGE_mergefunc(keyRA5, keyRB5, NAp);
		keyy_t keyPA6 = MERGE_mergefunc(keyA6, keyB6, NAp);
		keyy_t keyPB6 = MERGE_mergefunc(keyC6, keyD6, NAp);
		keyy_t keyPC6 = MERGE_mergefunc(keyE6, keyF6, NAp);
		keyy_t keyRA6 = MERGE_mergefunc(keyPA6, keyPB6, NAp);
		keyy_t keyRB6 = MERGE_mergefunc(keyPC6, keyF6, NAp);
		keyy_t keyRZ6 = MERGE_mergefunc(keyRA6, keyRB6, NAp);
		keyy_t keyPA7 = MERGE_mergefunc(keyA7, keyB7, NAp);
		keyy_t keyPB7 = MERGE_mergefunc(keyC7, keyD7, NAp);
		keyy_t keyPC7 = MERGE_mergefunc(keyE7, keyF7, NAp);
		keyy_t keyRA7 = MERGE_mergefunc(keyPA7, keyPB7, NAp);
		keyy_t keyRB7 = MERGE_mergefunc(keyPC7, keyF7, NAp);
		keyy_t keyRZ7 = MERGE_mergefunc(keyRA7, keyRB7, NAp);
		
		//((n)/2)
		valA0 = MERGE_mergefunc(mykeyvalue00.value, mykeyvalue10.value, NAp);
		valB0 = MERGE_mergefunc(mykeyvalue20.value, mykeyvalue30.value, NAp);
		valA1 = MERGE_mergefunc(mykeyvalue01.value, mykeyvalue11.value, NAp);
		valB1 = MERGE_mergefunc(mykeyvalue21.value, mykeyvalue31.value, NAp);
		valA2 = MERGE_mergefunc(mykeyvalue02.value, mykeyvalue12.value, NAp);
		valB2 = MERGE_mergefunc(mykeyvalue22.value, mykeyvalue32.value, NAp);
		valA3 = MERGE_mergefunc(mykeyvalue03.value, mykeyvalue13.value, NAp);
		valB3 = MERGE_mergefunc(mykeyvalue23.value, mykeyvalue33.value, NAp);
		valA4 = MERGE_mergefunc(mykeyvalue04.value, mykeyvalue14.value, NAp);
		valB4 = MERGE_mergefunc(mykeyvalue24.value, mykeyvalue34.value, NAp);
		valA5 = MERGE_mergefunc(mykeyvalue05.value, mykeyvalue15.value, NAp);
		valB5 = MERGE_mergefunc(mykeyvalue25.value, mykeyvalue35.value, NAp);
		valA6 = MERGE_mergefunc(mykeyvalue06.value, mykeyvalue16.value, NAp);
		valB6 = MERGE_mergefunc(mykeyvalue26.value, mykeyvalue36.value, NAp);
		valA7 = MERGE_mergefunc(mykeyvalue07.value, mykeyvalue17.value, NAp);
		valB7 = MERGE_mergefunc(mykeyvalue27.value, mykeyvalue37.value, NAp);
		value_t valPA0 = MERGE_mergefunc(valA0, valB0, NAp);
		value_t valPB0 = MERGE_mergefunc(valC0, valD0, NAp);
		value_t valPC0 = MERGE_mergefunc(valE0, valF0, NAp);
		value_t valRA0 = MERGE_mergefunc(valPA0, valPB0, NAp);
		value_t valRB0 = MERGE_mergefunc(valPC0, valF0, NAp);
		value_t valRZ0 = MERGE_mergefunc(valRA0, valRB0, NAp);
		value_t valPA1 = MERGE_mergefunc(valA1, valB1, NAp);
		value_t valPB1 = MERGE_mergefunc(valC1, valD1, NAp);
		value_t valPC1 = MERGE_mergefunc(valE1, valF1, NAp);
		value_t valRA1 = MERGE_mergefunc(valPA1, valPB1, NAp);
		value_t valRB1 = MERGE_mergefunc(valPC1, valF1, NAp);
		value_t valRZ1 = MERGE_mergefunc(valRA1, valRB1, NAp);
		value_t valPA2 = MERGE_mergefunc(valA2, valB2, NAp);
		value_t valPB2 = MERGE_mergefunc(valC2, valD2, NAp);
		value_t valPC2 = MERGE_mergefunc(valE2, valF2, NAp);
		value_t valRA2 = MERGE_mergefunc(valPA2, valPB2, NAp);
		value_t valRB2 = MERGE_mergefunc(valPC2, valF2, NAp);
		value_t valRZ2 = MERGE_mergefunc(valRA2, valRB2, NAp);
		value_t valPA3 = MERGE_mergefunc(valA3, valB3, NAp);
		value_t valPB3 = MERGE_mergefunc(valC3, valD3, NAp);
		value_t valPC3 = MERGE_mergefunc(valE3, valF3, NAp);
		value_t valRA3 = MERGE_mergefunc(valPA3, valPB3, NAp);
		value_t valRB3 = MERGE_mergefunc(valPC3, valF3, NAp);
		value_t valRZ3 = MERGE_mergefunc(valRA3, valRB3, NAp);
		value_t valPA4 = MERGE_mergefunc(valA4, valB4, NAp);
		value_t valPB4 = MERGE_mergefunc(valC4, valD4, NAp);
		value_t valPC4 = MERGE_mergefunc(valE4, valF4, NAp);
		value_t valRA4 = MERGE_mergefunc(valPA4, valPB4, NAp);
		value_t valRB4 = MERGE_mergefunc(valPC4, valF4, NAp);
		value_t valRZ4 = MERGE_mergefunc(valRA4, valRB4, NAp);
		value_t valPA5 = MERGE_mergefunc(valA5, valB5, NAp);
		value_t valPB5 = MERGE_mergefunc(valC5, valD5, NAp);
		value_t valPC5 = MERGE_mergefunc(valE5, valF5, NAp);
		value_t valRA5 = MERGE_mergefunc(valPA5, valPB5, NAp);
		value_t valRB5 = MERGE_mergefunc(valPC5, valF5, NAp);
		value_t valRZ5 = MERGE_mergefunc(valRA5, valRB5, NAp);
		value_t valPA6 = MERGE_mergefunc(valA6, valB6, NAp);
		value_t valPB6 = MERGE_mergefunc(valC6, valD6, NAp);
		value_t valPC6 = MERGE_mergefunc(valE6, valF6, NAp);
		value_t valRA6 = MERGE_mergefunc(valPA6, valPB6, NAp);
		value_t valRB6 = MERGE_mergefunc(valPC6, valF6, NAp);
		value_t valRZ6 = MERGE_mergefunc(valRA6, valRB6, NAp);
		value_t valPA7 = MERGE_mergefunc(valA7, valB7, NAp);
		value_t valPB7 = MERGE_mergefunc(valC7, valD7, NAp);
		value_t valPC7 = MERGE_mergefunc(valE7, valF7, NAp);
		value_t valRA7 = MERGE_mergefunc(valPA7, valPB7, NAp);
		value_t valRB7 = MERGE_mergefunc(valPC7, valF7, NAp);
		value_t valRZ7 = MERGE_mergefunc(valRA7, valRB7, NAp);
		
		#ifdef _WIDEWORD
		vdram[dramoffset_kvs + j].range(31, 0) = keyRZ0;
		vdram[dramoffset_kvs + j].range(63, 32) = valRZ0;
		vdram[dramoffset_kvs + j].range(95, 64) = keyRZ1;
		vdram[dramoffset_kvs + j].range(127, 96) = valRZ1;
		vdram[dramoffset_kvs + j].range(159, 128) = keyRZ2;
		vdram[dramoffset_kvs + j].range(191, 160) = valRZ2;
		vdram[dramoffset_kvs + j].range(223, 192) = keyRZ3;
		vdram[dramoffset_kvs + j].range(255, 224) = valRZ3;
		vdram[dramoffset_kvs + j].range(287, 256) = keyRZ4;
		vdram[dramoffset_kvs + j].range(319, 288) = valRZ4;
		vdram[dramoffset_kvs + j].range(351, 320) = keyRZ5;
		vdram[dramoffset_kvs + j].range(383, 352) = valRZ5;
		vdram[dramoffset_kvs + j].range(415, 384) = keyRZ6;
		vdram[dramoffset_kvs + j].range(447, 416) = valRZ6;
		vdram[dramoffset_kvs + j].range(479, 448) = keyRZ7;
		vdram[dramoffset_kvs + j].range(511, 480) = valRZ7;
		#else
		vdram[dramoffset_kvs + j].data[0].key = keyRZ0;
		vdram[dramoffset_kvs + j].data[0].value = valRZ0;
		vdram[dramoffset_kvs + j].data[1].key = keyRZ1;
		vdram[dramoffset_kvs + j].data[1].value = valRZ1;
		vdram[dramoffset_kvs + j].data[2].key = keyRZ2;
		vdram[dramoffset_kvs + j].data[2].value = valRZ2;
		vdram[dramoffset_kvs + j].data[3].key = keyRZ3;
		vdram[dramoffset_kvs + j].data[3].value = valRZ3;
		vdram[dramoffset_kvs + j].data[4].key = keyRZ4;
		vdram[dramoffset_kvs + j].data[4].value = valRZ4;
		vdram[dramoffset_kvs + j].data[5].key = keyRZ5;
		vdram[dramoffset_kvs + j].data[5].value = valRZ5;
		vdram[dramoffset_kvs + j].data[6].key = keyRZ6;
		vdram[dramoffset_kvs + j].data[6].value = valRZ6;
		vdram[dramoffset_kvs + j].data[7].key = keyRZ7;
		vdram[dramoffset_kvs + j].data[7].value = valRZ7;
		#endif
	}
	return;
}
void acts_all::MERGE_merge3andsavevdata(bool_type enable, uint512_dt * vdram, keyvalue_vbuffer_t vbuffer0[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t vbuffer1[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t vbuffer2[VDATA_PACKINGSIZE][BLOCKRAM_SIZE], unsigned int begincol, batch_type bufferoffset_kvs, unsigned int dramoffset_kvs){
	if(enable == OFF){ return; }
	keyvalue_t dummykv;
	dummykv.key = 0xFFFFFFFF; dummykv.value = 0xFFFFFFFF;
	
	keyy_t keyA0 = dummykv.key;
	value_t valA0 = dummykv.key;
	keyy_t keyB0 = dummykv.key;
	value_t valB0 = dummykv.key;
	keyy_t keyC0 = dummykv.key;
	value_t valC0 = dummykv.key;
	keyy_t keyD0 = dummykv.key;
	value_t valD0 = dummykv.key;
	keyy_t keyE0 = dummykv.key;
	value_t valE0 = dummykv.key;
	keyy_t keyF0 = dummykv.key;
	value_t valF0 = dummykv.key;
	keyy_t keyG0 = dummykv.key;
	value_t valG0 = dummykv.key;
	keyy_t keyH0 = dummykv.key;
	value_t valH0 = dummykv.key;
	keyy_t keyI0 = dummykv.key;
	value_t valI0 = dummykv.key;
	keyy_t keyJ0 = dummykv.key;
	value_t valJ0 = dummykv.key;
	keyy_t keyK0 = dummykv.key;
	value_t valK0 = dummykv.key;
	keyy_t keyL0 = dummykv.key;
	value_t valL0 = dummykv.key;
	keyy_t keyM0 = dummykv.key;
	value_t valM0 = dummykv.key;
	keyy_t keyA1 = dummykv.key;
	value_t valA1 = dummykv.key;
	keyy_t keyB1 = dummykv.key;
	value_t valB1 = dummykv.key;
	keyy_t keyC1 = dummykv.key;
	value_t valC1 = dummykv.key;
	keyy_t keyD1 = dummykv.key;
	value_t valD1 = dummykv.key;
	keyy_t keyE1 = dummykv.key;
	value_t valE1 = dummykv.key;
	keyy_t keyF1 = dummykv.key;
	value_t valF1 = dummykv.key;
	keyy_t keyG1 = dummykv.key;
	value_t valG1 = dummykv.key;
	keyy_t keyH1 = dummykv.key;
	value_t valH1 = dummykv.key;
	keyy_t keyI1 = dummykv.key;
	value_t valI1 = dummykv.key;
	keyy_t keyJ1 = dummykv.key;
	value_t valJ1 = dummykv.key;
	keyy_t keyK1 = dummykv.key;
	value_t valK1 = dummykv.key;
	keyy_t keyL1 = dummykv.key;
	value_t valL1 = dummykv.key;
	keyy_t keyM1 = dummykv.key;
	value_t valM1 = dummykv.key;
	keyy_t keyA2 = dummykv.key;
	value_t valA2 = dummykv.key;
	keyy_t keyB2 = dummykv.key;
	value_t valB2 = dummykv.key;
	keyy_t keyC2 = dummykv.key;
	value_t valC2 = dummykv.key;
	keyy_t keyD2 = dummykv.key;
	value_t valD2 = dummykv.key;
	keyy_t keyE2 = dummykv.key;
	value_t valE2 = dummykv.key;
	keyy_t keyF2 = dummykv.key;
	value_t valF2 = dummykv.key;
	keyy_t keyG2 = dummykv.key;
	value_t valG2 = dummykv.key;
	keyy_t keyH2 = dummykv.key;
	value_t valH2 = dummykv.key;
	keyy_t keyI2 = dummykv.key;
	value_t valI2 = dummykv.key;
	keyy_t keyJ2 = dummykv.key;
	value_t valJ2 = dummykv.key;
	keyy_t keyK2 = dummykv.key;
	value_t valK2 = dummykv.key;
	keyy_t keyL2 = dummykv.key;
	value_t valL2 = dummykv.key;
	keyy_t keyM2 = dummykv.key;
	value_t valM2 = dummykv.key;
	keyy_t keyA3 = dummykv.key;
	value_t valA3 = dummykv.key;
	keyy_t keyB3 = dummykv.key;
	value_t valB3 = dummykv.key;
	keyy_t keyC3 = dummykv.key;
	value_t valC3 = dummykv.key;
	keyy_t keyD3 = dummykv.key;
	value_t valD3 = dummykv.key;
	keyy_t keyE3 = dummykv.key;
	value_t valE3 = dummykv.key;
	keyy_t keyF3 = dummykv.key;
	value_t valF3 = dummykv.key;
	keyy_t keyG3 = dummykv.key;
	value_t valG3 = dummykv.key;
	keyy_t keyH3 = dummykv.key;
	value_t valH3 = dummykv.key;
	keyy_t keyI3 = dummykv.key;
	value_t valI3 = dummykv.key;
	keyy_t keyJ3 = dummykv.key;
	value_t valJ3 = dummykv.key;
	keyy_t keyK3 = dummykv.key;
	value_t valK3 = dummykv.key;
	keyy_t keyL3 = dummykv.key;
	value_t valL3 = dummykv.key;
	keyy_t keyM3 = dummykv.key;
	value_t valM3 = dummykv.key;
	keyy_t keyA4 = dummykv.key;
	value_t valA4 = dummykv.key;
	keyy_t keyB4 = dummykv.key;
	value_t valB4 = dummykv.key;
	keyy_t keyC4 = dummykv.key;
	value_t valC4 = dummykv.key;
	keyy_t keyD4 = dummykv.key;
	value_t valD4 = dummykv.key;
	keyy_t keyE4 = dummykv.key;
	value_t valE4 = dummykv.key;
	keyy_t keyF4 = dummykv.key;
	value_t valF4 = dummykv.key;
	keyy_t keyG4 = dummykv.key;
	value_t valG4 = dummykv.key;
	keyy_t keyH4 = dummykv.key;
	value_t valH4 = dummykv.key;
	keyy_t keyI4 = dummykv.key;
	value_t valI4 = dummykv.key;
	keyy_t keyJ4 = dummykv.key;
	value_t valJ4 = dummykv.key;
	keyy_t keyK4 = dummykv.key;
	value_t valK4 = dummykv.key;
	keyy_t keyL4 = dummykv.key;
	value_t valL4 = dummykv.key;
	keyy_t keyM4 = dummykv.key;
	value_t valM4 = dummykv.key;
	keyy_t keyA5 = dummykv.key;
	value_t valA5 = dummykv.key;
	keyy_t keyB5 = dummykv.key;
	value_t valB5 = dummykv.key;
	keyy_t keyC5 = dummykv.key;
	value_t valC5 = dummykv.key;
	keyy_t keyD5 = dummykv.key;
	value_t valD5 = dummykv.key;
	keyy_t keyE5 = dummykv.key;
	value_t valE5 = dummykv.key;
	keyy_t keyF5 = dummykv.key;
	value_t valF5 = dummykv.key;
	keyy_t keyG5 = dummykv.key;
	value_t valG5 = dummykv.key;
	keyy_t keyH5 = dummykv.key;
	value_t valH5 = dummykv.key;
	keyy_t keyI5 = dummykv.key;
	value_t valI5 = dummykv.key;
	keyy_t keyJ5 = dummykv.key;
	value_t valJ5 = dummykv.key;
	keyy_t keyK5 = dummykv.key;
	value_t valK5 = dummykv.key;
	keyy_t keyL5 = dummykv.key;
	value_t valL5 = dummykv.key;
	keyy_t keyM5 = dummykv.key;
	value_t valM5 = dummykv.key;
	keyy_t keyA6 = dummykv.key;
	value_t valA6 = dummykv.key;
	keyy_t keyB6 = dummykv.key;
	value_t valB6 = dummykv.key;
	keyy_t keyC6 = dummykv.key;
	value_t valC6 = dummykv.key;
	keyy_t keyD6 = dummykv.key;
	value_t valD6 = dummykv.key;
	keyy_t keyE6 = dummykv.key;
	value_t valE6 = dummykv.key;
	keyy_t keyF6 = dummykv.key;
	value_t valF6 = dummykv.key;
	keyy_t keyG6 = dummykv.key;
	value_t valG6 = dummykv.key;
	keyy_t keyH6 = dummykv.key;
	value_t valH6 = dummykv.key;
	keyy_t keyI6 = dummykv.key;
	value_t valI6 = dummykv.key;
	keyy_t keyJ6 = dummykv.key;
	value_t valJ6 = dummykv.key;
	keyy_t keyK6 = dummykv.key;
	value_t valK6 = dummykv.key;
	keyy_t keyL6 = dummykv.key;
	value_t valL6 = dummykv.key;
	keyy_t keyM6 = dummykv.key;
	value_t valM6 = dummykv.key;
	keyy_t keyA7 = dummykv.key;
	value_t valA7 = dummykv.key;
	keyy_t keyB7 = dummykv.key;
	value_t valB7 = dummykv.key;
	keyy_t keyC7 = dummykv.key;
	value_t valC7 = dummykv.key;
	keyy_t keyD7 = dummykv.key;
	value_t valD7 = dummykv.key;
	keyy_t keyE7 = dummykv.key;
	value_t valE7 = dummykv.key;
	keyy_t keyF7 = dummykv.key;
	value_t valF7 = dummykv.key;
	keyy_t keyG7 = dummykv.key;
	value_t valG7 = dummykv.key;
	keyy_t keyH7 = dummykv.key;
	value_t valH7 = dummykv.key;
	keyy_t keyI7 = dummykv.key;
	value_t valI7 = dummykv.key;
	keyy_t keyJ7 = dummykv.key;
	value_t valJ7 = dummykv.key;
	keyy_t keyK7 = dummykv.key;
	value_t valK7 = dummykv.key;
	keyy_t keyL7 = dummykv.key;
	value_t valL7 = dummykv.key;
	keyy_t keyM7 = dummykv.key;
	value_t valM7 = dummykv.key;
	
	MERGE3_LOOP1: for (buffer_type j=0; j<BLOCKRAM_SIZE; j++){
	#pragma HLS PIPELINE II=1
		keyvalue_t mykeyvalue00 = UTIL_GETKV2(vbuffer0[begincol + 0][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue01 = UTIL_GETKV2(vbuffer0[begincol + 1][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue02 = UTIL_GETKV2(vbuffer0[begincol + 2][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue03 = UTIL_GETKV2(vbuffer0[begincol + 3][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue04 = UTIL_GETKV2(vbuffer0[begincol + 4][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue05 = UTIL_GETKV2(vbuffer0[begincol + 5][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue06 = UTIL_GETKV2(vbuffer0[begincol + 6][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue07 = UTIL_GETKV2(vbuffer0[begincol + 7][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue10 = UTIL_GETKV2(vbuffer1[begincol + 0][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue11 = UTIL_GETKV2(vbuffer1[begincol + 1][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue12 = UTIL_GETKV2(vbuffer1[begincol + 2][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue13 = UTIL_GETKV2(vbuffer1[begincol + 3][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue14 = UTIL_GETKV2(vbuffer1[begincol + 4][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue15 = UTIL_GETKV2(vbuffer1[begincol + 5][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue16 = UTIL_GETKV2(vbuffer1[begincol + 6][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue17 = UTIL_GETKV2(vbuffer1[begincol + 7][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue20 = UTIL_GETKV2(vbuffer2[begincol + 0][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue21 = UTIL_GETKV2(vbuffer2[begincol + 1][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue22 = UTIL_GETKV2(vbuffer2[begincol + 2][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue23 = UTIL_GETKV2(vbuffer2[begincol + 3][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue24 = UTIL_GETKV2(vbuffer2[begincol + 4][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue25 = UTIL_GETKV2(vbuffer2[begincol + 5][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue26 = UTIL_GETKV2(vbuffer2[begincol + 6][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue27 = UTIL_GETKV2(vbuffer2[begincol + 7][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue30 = dummykv;
		keyvalue_t mykeyvalue31 = dummykv;
		keyvalue_t mykeyvalue32 = dummykv;
		keyvalue_t mykeyvalue33 = dummykv;
		keyvalue_t mykeyvalue34 = dummykv;
		keyvalue_t mykeyvalue35 = dummykv;
		keyvalue_t mykeyvalue36 = dummykv;
		keyvalue_t mykeyvalue37 = dummykv;
		keyvalue_t mykeyvalue40 = dummykv;
		keyvalue_t mykeyvalue41 = dummykv;
		keyvalue_t mykeyvalue42 = dummykv;
		keyvalue_t mykeyvalue43 = dummykv;
		keyvalue_t mykeyvalue44 = dummykv;
		keyvalue_t mykeyvalue45 = dummykv;
		keyvalue_t mykeyvalue46 = dummykv;
		keyvalue_t mykeyvalue47 = dummykv;
		keyvalue_t mykeyvalue50 = dummykv;
		keyvalue_t mykeyvalue51 = dummykv;
		keyvalue_t mykeyvalue52 = dummykv;
		keyvalue_t mykeyvalue53 = dummykv;
		keyvalue_t mykeyvalue54 = dummykv;
		keyvalue_t mykeyvalue55 = dummykv;
		keyvalue_t mykeyvalue56 = dummykv;
		keyvalue_t mykeyvalue57 = dummykv;
		keyvalue_t mykeyvalue60 = dummykv;
		keyvalue_t mykeyvalue61 = dummykv;
		keyvalue_t mykeyvalue62 = dummykv;
		keyvalue_t mykeyvalue63 = dummykv;
		keyvalue_t mykeyvalue64 = dummykv;
		keyvalue_t mykeyvalue65 = dummykv;
		keyvalue_t mykeyvalue66 = dummykv;
		keyvalue_t mykeyvalue67 = dummykv;
		keyvalue_t mykeyvalue70 = dummykv;
		keyvalue_t mykeyvalue71 = dummykv;
		keyvalue_t mykeyvalue72 = dummykv;
		keyvalue_t mykeyvalue73 = dummykv;
		keyvalue_t mykeyvalue74 = dummykv;
		keyvalue_t mykeyvalue75 = dummykv;
		keyvalue_t mykeyvalue76 = dummykv;
		keyvalue_t mykeyvalue77 = dummykv;
		keyvalue_t mykeyvalue80 = dummykv;
		keyvalue_t mykeyvalue81 = dummykv;
		keyvalue_t mykeyvalue82 = dummykv;
		keyvalue_t mykeyvalue83 = dummykv;
		keyvalue_t mykeyvalue84 = dummykv;
		keyvalue_t mykeyvalue85 = dummykv;
		keyvalue_t mykeyvalue86 = dummykv;
		keyvalue_t mykeyvalue87 = dummykv;
		keyvalue_t mykeyvalue90 = dummykv;
		keyvalue_t mykeyvalue91 = dummykv;
		keyvalue_t mykeyvalue92 = dummykv;
		keyvalue_t mykeyvalue93 = dummykv;
		keyvalue_t mykeyvalue94 = dummykv;
		keyvalue_t mykeyvalue95 = dummykv;
		keyvalue_t mykeyvalue96 = dummykv;
		keyvalue_t mykeyvalue97 = dummykv;
		keyvalue_t mykeyvalue100 = dummykv;
		keyvalue_t mykeyvalue101 = dummykv;
		keyvalue_t mykeyvalue102 = dummykv;
		keyvalue_t mykeyvalue103 = dummykv;
		keyvalue_t mykeyvalue104 = dummykv;
		keyvalue_t mykeyvalue105 = dummykv;
		keyvalue_t mykeyvalue106 = dummykv;
		keyvalue_t mykeyvalue107 = dummykv;
		keyvalue_t mykeyvalue110 = dummykv;
		keyvalue_t mykeyvalue111 = dummykv;
		keyvalue_t mykeyvalue112 = dummykv;
		keyvalue_t mykeyvalue113 = dummykv;
		keyvalue_t mykeyvalue114 = dummykv;
		keyvalue_t mykeyvalue115 = dummykv;
		keyvalue_t mykeyvalue116 = dummykv;
		keyvalue_t mykeyvalue117 = dummykv;
		keyvalue_t mykeyvalue120 = dummykv;
		keyvalue_t mykeyvalue121 = dummykv;
		keyvalue_t mykeyvalue122 = dummykv;
		keyvalue_t mykeyvalue123 = dummykv;
		keyvalue_t mykeyvalue124 = dummykv;
		keyvalue_t mykeyvalue125 = dummykv;
		keyvalue_t mykeyvalue126 = dummykv;
		keyvalue_t mykeyvalue127 = dummykv;
		keyvalue_t mykeyvalue130 = dummykv;
		keyvalue_t mykeyvalue131 = dummykv;
		keyvalue_t mykeyvalue132 = dummykv;
		keyvalue_t mykeyvalue133 = dummykv;
		keyvalue_t mykeyvalue134 = dummykv;
		keyvalue_t mykeyvalue135 = dummykv;
		keyvalue_t mykeyvalue136 = dummykv;
		keyvalue_t mykeyvalue137 = dummykv;
		keyvalue_t mykeyvalue140 = dummykv;
		keyvalue_t mykeyvalue141 = dummykv;
		keyvalue_t mykeyvalue142 = dummykv;
		keyvalue_t mykeyvalue143 = dummykv;
		keyvalue_t mykeyvalue144 = dummykv;
		keyvalue_t mykeyvalue145 = dummykv;
		keyvalue_t mykeyvalue146 = dummykv;
		keyvalue_t mykeyvalue147 = dummykv;
		
		//((n)/2)
		keyA0 = MERGE_mergefunc(mykeyvalue00.key, mykeyvalue10.key, NAp);
		keyB0 = MERGE_mergefunc(mykeyvalue20.key, mykeyvalue30.key, NAp);
		keyA1 = MERGE_mergefunc(mykeyvalue01.key, mykeyvalue11.key, NAp);
		keyB1 = MERGE_mergefunc(mykeyvalue21.key, mykeyvalue31.key, NAp);
		keyA2 = MERGE_mergefunc(mykeyvalue02.key, mykeyvalue12.key, NAp);
		keyB2 = MERGE_mergefunc(mykeyvalue22.key, mykeyvalue32.key, NAp);
		keyA3 = MERGE_mergefunc(mykeyvalue03.key, mykeyvalue13.key, NAp);
		keyB3 = MERGE_mergefunc(mykeyvalue23.key, mykeyvalue33.key, NAp);
		keyA4 = MERGE_mergefunc(mykeyvalue04.key, mykeyvalue14.key, NAp);
		keyB4 = MERGE_mergefunc(mykeyvalue24.key, mykeyvalue34.key, NAp);
		keyA5 = MERGE_mergefunc(mykeyvalue05.key, mykeyvalue15.key, NAp);
		keyB5 = MERGE_mergefunc(mykeyvalue25.key, mykeyvalue35.key, NAp);
		keyA6 = MERGE_mergefunc(mykeyvalue06.key, mykeyvalue16.key, NAp);
		keyB6 = MERGE_mergefunc(mykeyvalue26.key, mykeyvalue36.key, NAp);
		keyA7 = MERGE_mergefunc(mykeyvalue07.key, mykeyvalue17.key, NAp);
		keyB7 = MERGE_mergefunc(mykeyvalue27.key, mykeyvalue37.key, NAp);
		keyy_t keyPA0 = MERGE_mergefunc(keyA0, keyB0, NAp);
		keyy_t keyPB0 = MERGE_mergefunc(keyC0, keyD0, NAp);
		keyy_t keyPC0 = MERGE_mergefunc(keyE0, keyF0, NAp);
		keyy_t keyRA0 = MERGE_mergefunc(keyPA0, keyPB0, NAp);
		keyy_t keyRB0 = MERGE_mergefunc(keyPC0, keyF0, NAp);
		keyy_t keyRZ0 = MERGE_mergefunc(keyRA0, keyRB0, NAp);
		keyy_t keyPA1 = MERGE_mergefunc(keyA1, keyB1, NAp);
		keyy_t keyPB1 = MERGE_mergefunc(keyC1, keyD1, NAp);
		keyy_t keyPC1 = MERGE_mergefunc(keyE1, keyF1, NAp);
		keyy_t keyRA1 = MERGE_mergefunc(keyPA1, keyPB1, NAp);
		keyy_t keyRB1 = MERGE_mergefunc(keyPC1, keyF1, NAp);
		keyy_t keyRZ1 = MERGE_mergefunc(keyRA1, keyRB1, NAp);
		keyy_t keyPA2 = MERGE_mergefunc(keyA2, keyB2, NAp);
		keyy_t keyPB2 = MERGE_mergefunc(keyC2, keyD2, NAp);
		keyy_t keyPC2 = MERGE_mergefunc(keyE2, keyF2, NAp);
		keyy_t keyRA2 = MERGE_mergefunc(keyPA2, keyPB2, NAp);
		keyy_t keyRB2 = MERGE_mergefunc(keyPC2, keyF2, NAp);
		keyy_t keyRZ2 = MERGE_mergefunc(keyRA2, keyRB2, NAp);
		keyy_t keyPA3 = MERGE_mergefunc(keyA3, keyB3, NAp);
		keyy_t keyPB3 = MERGE_mergefunc(keyC3, keyD3, NAp);
		keyy_t keyPC3 = MERGE_mergefunc(keyE3, keyF3, NAp);
		keyy_t keyRA3 = MERGE_mergefunc(keyPA3, keyPB3, NAp);
		keyy_t keyRB3 = MERGE_mergefunc(keyPC3, keyF3, NAp);
		keyy_t keyRZ3 = MERGE_mergefunc(keyRA3, keyRB3, NAp);
		keyy_t keyPA4 = MERGE_mergefunc(keyA4, keyB4, NAp);
		keyy_t keyPB4 = MERGE_mergefunc(keyC4, keyD4, NAp);
		keyy_t keyPC4 = MERGE_mergefunc(keyE4, keyF4, NAp);
		keyy_t keyRA4 = MERGE_mergefunc(keyPA4, keyPB4, NAp);
		keyy_t keyRB4 = MERGE_mergefunc(keyPC4, keyF4, NAp);
		keyy_t keyRZ4 = MERGE_mergefunc(keyRA4, keyRB4, NAp);
		keyy_t keyPA5 = MERGE_mergefunc(keyA5, keyB5, NAp);
		keyy_t keyPB5 = MERGE_mergefunc(keyC5, keyD5, NAp);
		keyy_t keyPC5 = MERGE_mergefunc(keyE5, keyF5, NAp);
		keyy_t keyRA5 = MERGE_mergefunc(keyPA5, keyPB5, NAp);
		keyy_t keyRB5 = MERGE_mergefunc(keyPC5, keyF5, NAp);
		keyy_t keyRZ5 = MERGE_mergefunc(keyRA5, keyRB5, NAp);
		keyy_t keyPA6 = MERGE_mergefunc(keyA6, keyB6, NAp);
		keyy_t keyPB6 = MERGE_mergefunc(keyC6, keyD6, NAp);
		keyy_t keyPC6 = MERGE_mergefunc(keyE6, keyF6, NAp);
		keyy_t keyRA6 = MERGE_mergefunc(keyPA6, keyPB6, NAp);
		keyy_t keyRB6 = MERGE_mergefunc(keyPC6, keyF6, NAp);
		keyy_t keyRZ6 = MERGE_mergefunc(keyRA6, keyRB6, NAp);
		keyy_t keyPA7 = MERGE_mergefunc(keyA7, keyB7, NAp);
		keyy_t keyPB7 = MERGE_mergefunc(keyC7, keyD7, NAp);
		keyy_t keyPC7 = MERGE_mergefunc(keyE7, keyF7, NAp);
		keyy_t keyRA7 = MERGE_mergefunc(keyPA7, keyPB7, NAp);
		keyy_t keyRB7 = MERGE_mergefunc(keyPC7, keyF7, NAp);
		keyy_t keyRZ7 = MERGE_mergefunc(keyRA7, keyRB7, NAp);
		
		//((n)/2)
		valA0 = MERGE_mergefunc(mykeyvalue00.value, mykeyvalue10.value, NAp);
		valB0 = MERGE_mergefunc(mykeyvalue20.value, mykeyvalue30.value, NAp);
		valA1 = MERGE_mergefunc(mykeyvalue01.value, mykeyvalue11.value, NAp);
		valB1 = MERGE_mergefunc(mykeyvalue21.value, mykeyvalue31.value, NAp);
		valA2 = MERGE_mergefunc(mykeyvalue02.value, mykeyvalue12.value, NAp);
		valB2 = MERGE_mergefunc(mykeyvalue22.value, mykeyvalue32.value, NAp);
		valA3 = MERGE_mergefunc(mykeyvalue03.value, mykeyvalue13.value, NAp);
		valB3 = MERGE_mergefunc(mykeyvalue23.value, mykeyvalue33.value, NAp);
		valA4 = MERGE_mergefunc(mykeyvalue04.value, mykeyvalue14.value, NAp);
		valB4 = MERGE_mergefunc(mykeyvalue24.value, mykeyvalue34.value, NAp);
		valA5 = MERGE_mergefunc(mykeyvalue05.value, mykeyvalue15.value, NAp);
		valB5 = MERGE_mergefunc(mykeyvalue25.value, mykeyvalue35.value, NAp);
		valA6 = MERGE_mergefunc(mykeyvalue06.value, mykeyvalue16.value, NAp);
		valB6 = MERGE_mergefunc(mykeyvalue26.value, mykeyvalue36.value, NAp);
		valA7 = MERGE_mergefunc(mykeyvalue07.value, mykeyvalue17.value, NAp);
		valB7 = MERGE_mergefunc(mykeyvalue27.value, mykeyvalue37.value, NAp);
		value_t valPA0 = MERGE_mergefunc(valA0, valB0, NAp);
		value_t valPB0 = MERGE_mergefunc(valC0, valD0, NAp);
		value_t valPC0 = MERGE_mergefunc(valE0, valF0, NAp);
		value_t valRA0 = MERGE_mergefunc(valPA0, valPB0, NAp);
		value_t valRB0 = MERGE_mergefunc(valPC0, valF0, NAp);
		value_t valRZ0 = MERGE_mergefunc(valRA0, valRB0, NAp);
		value_t valPA1 = MERGE_mergefunc(valA1, valB1, NAp);
		value_t valPB1 = MERGE_mergefunc(valC1, valD1, NAp);
		value_t valPC1 = MERGE_mergefunc(valE1, valF1, NAp);
		value_t valRA1 = MERGE_mergefunc(valPA1, valPB1, NAp);
		value_t valRB1 = MERGE_mergefunc(valPC1, valF1, NAp);
		value_t valRZ1 = MERGE_mergefunc(valRA1, valRB1, NAp);
		value_t valPA2 = MERGE_mergefunc(valA2, valB2, NAp);
		value_t valPB2 = MERGE_mergefunc(valC2, valD2, NAp);
		value_t valPC2 = MERGE_mergefunc(valE2, valF2, NAp);
		value_t valRA2 = MERGE_mergefunc(valPA2, valPB2, NAp);
		value_t valRB2 = MERGE_mergefunc(valPC2, valF2, NAp);
		value_t valRZ2 = MERGE_mergefunc(valRA2, valRB2, NAp);
		value_t valPA3 = MERGE_mergefunc(valA3, valB3, NAp);
		value_t valPB3 = MERGE_mergefunc(valC3, valD3, NAp);
		value_t valPC3 = MERGE_mergefunc(valE3, valF3, NAp);
		value_t valRA3 = MERGE_mergefunc(valPA3, valPB3, NAp);
		value_t valRB3 = MERGE_mergefunc(valPC3, valF3, NAp);
		value_t valRZ3 = MERGE_mergefunc(valRA3, valRB3, NAp);
		value_t valPA4 = MERGE_mergefunc(valA4, valB4, NAp);
		value_t valPB4 = MERGE_mergefunc(valC4, valD4, NAp);
		value_t valPC4 = MERGE_mergefunc(valE4, valF4, NAp);
		value_t valRA4 = MERGE_mergefunc(valPA4, valPB4, NAp);
		value_t valRB4 = MERGE_mergefunc(valPC4, valF4, NAp);
		value_t valRZ4 = MERGE_mergefunc(valRA4, valRB4, NAp);
		value_t valPA5 = MERGE_mergefunc(valA5, valB5, NAp);
		value_t valPB5 = MERGE_mergefunc(valC5, valD5, NAp);
		value_t valPC5 = MERGE_mergefunc(valE5, valF5, NAp);
		value_t valRA5 = MERGE_mergefunc(valPA5, valPB5, NAp);
		value_t valRB5 = MERGE_mergefunc(valPC5, valF5, NAp);
		value_t valRZ5 = MERGE_mergefunc(valRA5, valRB5, NAp);
		value_t valPA6 = MERGE_mergefunc(valA6, valB6, NAp);
		value_t valPB6 = MERGE_mergefunc(valC6, valD6, NAp);
		value_t valPC6 = MERGE_mergefunc(valE6, valF6, NAp);
		value_t valRA6 = MERGE_mergefunc(valPA6, valPB6, NAp);
		value_t valRB6 = MERGE_mergefunc(valPC6, valF6, NAp);
		value_t valRZ6 = MERGE_mergefunc(valRA6, valRB6, NAp);
		value_t valPA7 = MERGE_mergefunc(valA7, valB7, NAp);
		value_t valPB7 = MERGE_mergefunc(valC7, valD7, NAp);
		value_t valPC7 = MERGE_mergefunc(valE7, valF7, NAp);
		value_t valRA7 = MERGE_mergefunc(valPA7, valPB7, NAp);
		value_t valRB7 = MERGE_mergefunc(valPC7, valF7, NAp);
		value_t valRZ7 = MERGE_mergefunc(valRA7, valRB7, NAp);
		
		#ifdef _WIDEWORD
		vdram[dramoffset_kvs + j].range(31, 0) = keyRZ0;
		vdram[dramoffset_kvs + j].range(63, 32) = valRZ0;
		vdram[dramoffset_kvs + j].range(95, 64) = keyRZ1;
		vdram[dramoffset_kvs + j].range(127, 96) = valRZ1;
		vdram[dramoffset_kvs + j].range(159, 128) = keyRZ2;
		vdram[dramoffset_kvs + j].range(191, 160) = valRZ2;
		vdram[dramoffset_kvs + j].range(223, 192) = keyRZ3;
		vdram[dramoffset_kvs + j].range(255, 224) = valRZ3;
		vdram[dramoffset_kvs + j].range(287, 256) = keyRZ4;
		vdram[dramoffset_kvs + j].range(319, 288) = valRZ4;
		vdram[dramoffset_kvs + j].range(351, 320) = keyRZ5;
		vdram[dramoffset_kvs + j].range(383, 352) = valRZ5;
		vdram[dramoffset_kvs + j].range(415, 384) = keyRZ6;
		vdram[dramoffset_kvs + j].range(447, 416) = valRZ6;
		vdram[dramoffset_kvs + j].range(479, 448) = keyRZ7;
		vdram[dramoffset_kvs + j].range(511, 480) = valRZ7;
		#else
		vdram[dramoffset_kvs + j].data[0].key = keyRZ0;
		vdram[dramoffset_kvs + j].data[0].value = valRZ0;
		vdram[dramoffset_kvs + j].data[1].key = keyRZ1;
		vdram[dramoffset_kvs + j].data[1].value = valRZ1;
		vdram[dramoffset_kvs + j].data[2].key = keyRZ2;
		vdram[dramoffset_kvs + j].data[2].value = valRZ2;
		vdram[dramoffset_kvs + j].data[3].key = keyRZ3;
		vdram[dramoffset_kvs + j].data[3].value = valRZ3;
		vdram[dramoffset_kvs + j].data[4].key = keyRZ4;
		vdram[dramoffset_kvs + j].data[4].value = valRZ4;
		vdram[dramoffset_kvs + j].data[5].key = keyRZ5;
		vdram[dramoffset_kvs + j].data[5].value = valRZ5;
		vdram[dramoffset_kvs + j].data[6].key = keyRZ6;
		vdram[dramoffset_kvs + j].data[6].value = valRZ6;
		vdram[dramoffset_kvs + j].data[7].key = keyRZ7;
		vdram[dramoffset_kvs + j].data[7].value = valRZ7;
		#endif
	}
	return;
}
void acts_all::MERGE_merge4andsavevdata(bool_type enable, uint512_dt * vdram, keyvalue_vbuffer_t vbuffer0[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t vbuffer1[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t vbuffer2[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t vbuffer3[VDATA_PACKINGSIZE][BLOCKRAM_SIZE], unsigned int begincol, batch_type bufferoffset_kvs, unsigned int dramoffset_kvs){
	if(enable == OFF){ return; }
	keyvalue_t dummykv;
	dummykv.key = 0xFFFFFFFF; dummykv.value = 0xFFFFFFFF;
	
	keyy_t keyA0 = dummykv.key;
	value_t valA0 = dummykv.key;
	keyy_t keyB0 = dummykv.key;
	value_t valB0 = dummykv.key;
	keyy_t keyC0 = dummykv.key;
	value_t valC0 = dummykv.key;
	keyy_t keyD0 = dummykv.key;
	value_t valD0 = dummykv.key;
	keyy_t keyE0 = dummykv.key;
	value_t valE0 = dummykv.key;
	keyy_t keyF0 = dummykv.key;
	value_t valF0 = dummykv.key;
	keyy_t keyG0 = dummykv.key;
	value_t valG0 = dummykv.key;
	keyy_t keyH0 = dummykv.key;
	value_t valH0 = dummykv.key;
	keyy_t keyI0 = dummykv.key;
	value_t valI0 = dummykv.key;
	keyy_t keyJ0 = dummykv.key;
	value_t valJ0 = dummykv.key;
	keyy_t keyK0 = dummykv.key;
	value_t valK0 = dummykv.key;
	keyy_t keyL0 = dummykv.key;
	value_t valL0 = dummykv.key;
	keyy_t keyM0 = dummykv.key;
	value_t valM0 = dummykv.key;
	keyy_t keyA1 = dummykv.key;
	value_t valA1 = dummykv.key;
	keyy_t keyB1 = dummykv.key;
	value_t valB1 = dummykv.key;
	keyy_t keyC1 = dummykv.key;
	value_t valC1 = dummykv.key;
	keyy_t keyD1 = dummykv.key;
	value_t valD1 = dummykv.key;
	keyy_t keyE1 = dummykv.key;
	value_t valE1 = dummykv.key;
	keyy_t keyF1 = dummykv.key;
	value_t valF1 = dummykv.key;
	keyy_t keyG1 = dummykv.key;
	value_t valG1 = dummykv.key;
	keyy_t keyH1 = dummykv.key;
	value_t valH1 = dummykv.key;
	keyy_t keyI1 = dummykv.key;
	value_t valI1 = dummykv.key;
	keyy_t keyJ1 = dummykv.key;
	value_t valJ1 = dummykv.key;
	keyy_t keyK1 = dummykv.key;
	value_t valK1 = dummykv.key;
	keyy_t keyL1 = dummykv.key;
	value_t valL1 = dummykv.key;
	keyy_t keyM1 = dummykv.key;
	value_t valM1 = dummykv.key;
	keyy_t keyA2 = dummykv.key;
	value_t valA2 = dummykv.key;
	keyy_t keyB2 = dummykv.key;
	value_t valB2 = dummykv.key;
	keyy_t keyC2 = dummykv.key;
	value_t valC2 = dummykv.key;
	keyy_t keyD2 = dummykv.key;
	value_t valD2 = dummykv.key;
	keyy_t keyE2 = dummykv.key;
	value_t valE2 = dummykv.key;
	keyy_t keyF2 = dummykv.key;
	value_t valF2 = dummykv.key;
	keyy_t keyG2 = dummykv.key;
	value_t valG2 = dummykv.key;
	keyy_t keyH2 = dummykv.key;
	value_t valH2 = dummykv.key;
	keyy_t keyI2 = dummykv.key;
	value_t valI2 = dummykv.key;
	keyy_t keyJ2 = dummykv.key;
	value_t valJ2 = dummykv.key;
	keyy_t keyK2 = dummykv.key;
	value_t valK2 = dummykv.key;
	keyy_t keyL2 = dummykv.key;
	value_t valL2 = dummykv.key;
	keyy_t keyM2 = dummykv.key;
	value_t valM2 = dummykv.key;
	keyy_t keyA3 = dummykv.key;
	value_t valA3 = dummykv.key;
	keyy_t keyB3 = dummykv.key;
	value_t valB3 = dummykv.key;
	keyy_t keyC3 = dummykv.key;
	value_t valC3 = dummykv.key;
	keyy_t keyD3 = dummykv.key;
	value_t valD3 = dummykv.key;
	keyy_t keyE3 = dummykv.key;
	value_t valE3 = dummykv.key;
	keyy_t keyF3 = dummykv.key;
	value_t valF3 = dummykv.key;
	keyy_t keyG3 = dummykv.key;
	value_t valG3 = dummykv.key;
	keyy_t keyH3 = dummykv.key;
	value_t valH3 = dummykv.key;
	keyy_t keyI3 = dummykv.key;
	value_t valI3 = dummykv.key;
	keyy_t keyJ3 = dummykv.key;
	value_t valJ3 = dummykv.key;
	keyy_t keyK3 = dummykv.key;
	value_t valK3 = dummykv.key;
	keyy_t keyL3 = dummykv.key;
	value_t valL3 = dummykv.key;
	keyy_t keyM3 = dummykv.key;
	value_t valM3 = dummykv.key;
	keyy_t keyA4 = dummykv.key;
	value_t valA4 = dummykv.key;
	keyy_t keyB4 = dummykv.key;
	value_t valB4 = dummykv.key;
	keyy_t keyC4 = dummykv.key;
	value_t valC4 = dummykv.key;
	keyy_t keyD4 = dummykv.key;
	value_t valD4 = dummykv.key;
	keyy_t keyE4 = dummykv.key;
	value_t valE4 = dummykv.key;
	keyy_t keyF4 = dummykv.key;
	value_t valF4 = dummykv.key;
	keyy_t keyG4 = dummykv.key;
	value_t valG4 = dummykv.key;
	keyy_t keyH4 = dummykv.key;
	value_t valH4 = dummykv.key;
	keyy_t keyI4 = dummykv.key;
	value_t valI4 = dummykv.key;
	keyy_t keyJ4 = dummykv.key;
	value_t valJ4 = dummykv.key;
	keyy_t keyK4 = dummykv.key;
	value_t valK4 = dummykv.key;
	keyy_t keyL4 = dummykv.key;
	value_t valL4 = dummykv.key;
	keyy_t keyM4 = dummykv.key;
	value_t valM4 = dummykv.key;
	keyy_t keyA5 = dummykv.key;
	value_t valA5 = dummykv.key;
	keyy_t keyB5 = dummykv.key;
	value_t valB5 = dummykv.key;
	keyy_t keyC5 = dummykv.key;
	value_t valC5 = dummykv.key;
	keyy_t keyD5 = dummykv.key;
	value_t valD5 = dummykv.key;
	keyy_t keyE5 = dummykv.key;
	value_t valE5 = dummykv.key;
	keyy_t keyF5 = dummykv.key;
	value_t valF5 = dummykv.key;
	keyy_t keyG5 = dummykv.key;
	value_t valG5 = dummykv.key;
	keyy_t keyH5 = dummykv.key;
	value_t valH5 = dummykv.key;
	keyy_t keyI5 = dummykv.key;
	value_t valI5 = dummykv.key;
	keyy_t keyJ5 = dummykv.key;
	value_t valJ5 = dummykv.key;
	keyy_t keyK5 = dummykv.key;
	value_t valK5 = dummykv.key;
	keyy_t keyL5 = dummykv.key;
	value_t valL5 = dummykv.key;
	keyy_t keyM5 = dummykv.key;
	value_t valM5 = dummykv.key;
	keyy_t keyA6 = dummykv.key;
	value_t valA6 = dummykv.key;
	keyy_t keyB6 = dummykv.key;
	value_t valB6 = dummykv.key;
	keyy_t keyC6 = dummykv.key;
	value_t valC6 = dummykv.key;
	keyy_t keyD6 = dummykv.key;
	value_t valD6 = dummykv.key;
	keyy_t keyE6 = dummykv.key;
	value_t valE6 = dummykv.key;
	keyy_t keyF6 = dummykv.key;
	value_t valF6 = dummykv.key;
	keyy_t keyG6 = dummykv.key;
	value_t valG6 = dummykv.key;
	keyy_t keyH6 = dummykv.key;
	value_t valH6 = dummykv.key;
	keyy_t keyI6 = dummykv.key;
	value_t valI6 = dummykv.key;
	keyy_t keyJ6 = dummykv.key;
	value_t valJ6 = dummykv.key;
	keyy_t keyK6 = dummykv.key;
	value_t valK6 = dummykv.key;
	keyy_t keyL6 = dummykv.key;
	value_t valL6 = dummykv.key;
	keyy_t keyM6 = dummykv.key;
	value_t valM6 = dummykv.key;
	keyy_t keyA7 = dummykv.key;
	value_t valA7 = dummykv.key;
	keyy_t keyB7 = dummykv.key;
	value_t valB7 = dummykv.key;
	keyy_t keyC7 = dummykv.key;
	value_t valC7 = dummykv.key;
	keyy_t keyD7 = dummykv.key;
	value_t valD7 = dummykv.key;
	keyy_t keyE7 = dummykv.key;
	value_t valE7 = dummykv.key;
	keyy_t keyF7 = dummykv.key;
	value_t valF7 = dummykv.key;
	keyy_t keyG7 = dummykv.key;
	value_t valG7 = dummykv.key;
	keyy_t keyH7 = dummykv.key;
	value_t valH7 = dummykv.key;
	keyy_t keyI7 = dummykv.key;
	value_t valI7 = dummykv.key;
	keyy_t keyJ7 = dummykv.key;
	value_t valJ7 = dummykv.key;
	keyy_t keyK7 = dummykv.key;
	value_t valK7 = dummykv.key;
	keyy_t keyL7 = dummykv.key;
	value_t valL7 = dummykv.key;
	keyy_t keyM7 = dummykv.key;
	value_t valM7 = dummykv.key;
	
	MERGE4_LOOP1: for (buffer_type j=0; j<BLOCKRAM_SIZE; j++){
	#pragma HLS PIPELINE II=1
		keyvalue_t mykeyvalue00 = UTIL_GETKV2(vbuffer0[begincol + 0][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue01 = UTIL_GETKV2(vbuffer0[begincol + 1][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue02 = UTIL_GETKV2(vbuffer0[begincol + 2][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue03 = UTIL_GETKV2(vbuffer0[begincol + 3][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue04 = UTIL_GETKV2(vbuffer0[begincol + 4][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue05 = UTIL_GETKV2(vbuffer0[begincol + 5][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue06 = UTIL_GETKV2(vbuffer0[begincol + 6][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue07 = UTIL_GETKV2(vbuffer0[begincol + 7][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue10 = UTIL_GETKV2(vbuffer1[begincol + 0][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue11 = UTIL_GETKV2(vbuffer1[begincol + 1][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue12 = UTIL_GETKV2(vbuffer1[begincol + 2][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue13 = UTIL_GETKV2(vbuffer1[begincol + 3][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue14 = UTIL_GETKV2(vbuffer1[begincol + 4][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue15 = UTIL_GETKV2(vbuffer1[begincol + 5][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue16 = UTIL_GETKV2(vbuffer1[begincol + 6][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue17 = UTIL_GETKV2(vbuffer1[begincol + 7][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue20 = UTIL_GETKV2(vbuffer2[begincol + 0][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue21 = UTIL_GETKV2(vbuffer2[begincol + 1][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue22 = UTIL_GETKV2(vbuffer2[begincol + 2][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue23 = UTIL_GETKV2(vbuffer2[begincol + 3][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue24 = UTIL_GETKV2(vbuffer2[begincol + 4][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue25 = UTIL_GETKV2(vbuffer2[begincol + 5][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue26 = UTIL_GETKV2(vbuffer2[begincol + 6][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue27 = UTIL_GETKV2(vbuffer2[begincol + 7][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue30 = UTIL_GETKV2(vbuffer3[begincol + 0][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue31 = UTIL_GETKV2(vbuffer3[begincol + 1][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue32 = UTIL_GETKV2(vbuffer3[begincol + 2][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue33 = UTIL_GETKV2(vbuffer3[begincol + 3][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue34 = UTIL_GETKV2(vbuffer3[begincol + 4][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue35 = UTIL_GETKV2(vbuffer3[begincol + 5][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue36 = UTIL_GETKV2(vbuffer3[begincol + 6][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue37 = UTIL_GETKV2(vbuffer3[begincol + 7][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue40 = dummykv;
		keyvalue_t mykeyvalue41 = dummykv;
		keyvalue_t mykeyvalue42 = dummykv;
		keyvalue_t mykeyvalue43 = dummykv;
		keyvalue_t mykeyvalue44 = dummykv;
		keyvalue_t mykeyvalue45 = dummykv;
		keyvalue_t mykeyvalue46 = dummykv;
		keyvalue_t mykeyvalue47 = dummykv;
		keyvalue_t mykeyvalue50 = dummykv;
		keyvalue_t mykeyvalue51 = dummykv;
		keyvalue_t mykeyvalue52 = dummykv;
		keyvalue_t mykeyvalue53 = dummykv;
		keyvalue_t mykeyvalue54 = dummykv;
		keyvalue_t mykeyvalue55 = dummykv;
		keyvalue_t mykeyvalue56 = dummykv;
		keyvalue_t mykeyvalue57 = dummykv;
		keyvalue_t mykeyvalue60 = dummykv;
		keyvalue_t mykeyvalue61 = dummykv;
		keyvalue_t mykeyvalue62 = dummykv;
		keyvalue_t mykeyvalue63 = dummykv;
		keyvalue_t mykeyvalue64 = dummykv;
		keyvalue_t mykeyvalue65 = dummykv;
		keyvalue_t mykeyvalue66 = dummykv;
		keyvalue_t mykeyvalue67 = dummykv;
		keyvalue_t mykeyvalue70 = dummykv;
		keyvalue_t mykeyvalue71 = dummykv;
		keyvalue_t mykeyvalue72 = dummykv;
		keyvalue_t mykeyvalue73 = dummykv;
		keyvalue_t mykeyvalue74 = dummykv;
		keyvalue_t mykeyvalue75 = dummykv;
		keyvalue_t mykeyvalue76 = dummykv;
		keyvalue_t mykeyvalue77 = dummykv;
		keyvalue_t mykeyvalue80 = dummykv;
		keyvalue_t mykeyvalue81 = dummykv;
		keyvalue_t mykeyvalue82 = dummykv;
		keyvalue_t mykeyvalue83 = dummykv;
		keyvalue_t mykeyvalue84 = dummykv;
		keyvalue_t mykeyvalue85 = dummykv;
		keyvalue_t mykeyvalue86 = dummykv;
		keyvalue_t mykeyvalue87 = dummykv;
		keyvalue_t mykeyvalue90 = dummykv;
		keyvalue_t mykeyvalue91 = dummykv;
		keyvalue_t mykeyvalue92 = dummykv;
		keyvalue_t mykeyvalue93 = dummykv;
		keyvalue_t mykeyvalue94 = dummykv;
		keyvalue_t mykeyvalue95 = dummykv;
		keyvalue_t mykeyvalue96 = dummykv;
		keyvalue_t mykeyvalue97 = dummykv;
		keyvalue_t mykeyvalue100 = dummykv;
		keyvalue_t mykeyvalue101 = dummykv;
		keyvalue_t mykeyvalue102 = dummykv;
		keyvalue_t mykeyvalue103 = dummykv;
		keyvalue_t mykeyvalue104 = dummykv;
		keyvalue_t mykeyvalue105 = dummykv;
		keyvalue_t mykeyvalue106 = dummykv;
		keyvalue_t mykeyvalue107 = dummykv;
		keyvalue_t mykeyvalue110 = dummykv;
		keyvalue_t mykeyvalue111 = dummykv;
		keyvalue_t mykeyvalue112 = dummykv;
		keyvalue_t mykeyvalue113 = dummykv;
		keyvalue_t mykeyvalue114 = dummykv;
		keyvalue_t mykeyvalue115 = dummykv;
		keyvalue_t mykeyvalue116 = dummykv;
		keyvalue_t mykeyvalue117 = dummykv;
		keyvalue_t mykeyvalue120 = dummykv;
		keyvalue_t mykeyvalue121 = dummykv;
		keyvalue_t mykeyvalue122 = dummykv;
		keyvalue_t mykeyvalue123 = dummykv;
		keyvalue_t mykeyvalue124 = dummykv;
		keyvalue_t mykeyvalue125 = dummykv;
		keyvalue_t mykeyvalue126 = dummykv;
		keyvalue_t mykeyvalue127 = dummykv;
		keyvalue_t mykeyvalue130 = dummykv;
		keyvalue_t mykeyvalue131 = dummykv;
		keyvalue_t mykeyvalue132 = dummykv;
		keyvalue_t mykeyvalue133 = dummykv;
		keyvalue_t mykeyvalue134 = dummykv;
		keyvalue_t mykeyvalue135 = dummykv;
		keyvalue_t mykeyvalue136 = dummykv;
		keyvalue_t mykeyvalue137 = dummykv;
		keyvalue_t mykeyvalue140 = dummykv;
		keyvalue_t mykeyvalue141 = dummykv;
		keyvalue_t mykeyvalue142 = dummykv;
		keyvalue_t mykeyvalue143 = dummykv;
		keyvalue_t mykeyvalue144 = dummykv;
		keyvalue_t mykeyvalue145 = dummykv;
		keyvalue_t mykeyvalue146 = dummykv;
		keyvalue_t mykeyvalue147 = dummykv;
		
		//((n)/2)
		keyA0 = MERGE_mergefunc(mykeyvalue00.key, mykeyvalue10.key, NAp);
		keyB0 = MERGE_mergefunc(mykeyvalue20.key, mykeyvalue30.key, NAp);
		keyC0 = MERGE_mergefunc(mykeyvalue40.key, mykeyvalue50.key, NAp);
		keyA1 = MERGE_mergefunc(mykeyvalue01.key, mykeyvalue11.key, NAp);
		keyB1 = MERGE_mergefunc(mykeyvalue21.key, mykeyvalue31.key, NAp);
		keyC1 = MERGE_mergefunc(mykeyvalue41.key, mykeyvalue51.key, NAp);
		keyA2 = MERGE_mergefunc(mykeyvalue02.key, mykeyvalue12.key, NAp);
		keyB2 = MERGE_mergefunc(mykeyvalue22.key, mykeyvalue32.key, NAp);
		keyC2 = MERGE_mergefunc(mykeyvalue42.key, mykeyvalue52.key, NAp);
		keyA3 = MERGE_mergefunc(mykeyvalue03.key, mykeyvalue13.key, NAp);
		keyB3 = MERGE_mergefunc(mykeyvalue23.key, mykeyvalue33.key, NAp);
		keyC3 = MERGE_mergefunc(mykeyvalue43.key, mykeyvalue53.key, NAp);
		keyA4 = MERGE_mergefunc(mykeyvalue04.key, mykeyvalue14.key, NAp);
		keyB4 = MERGE_mergefunc(mykeyvalue24.key, mykeyvalue34.key, NAp);
		keyC4 = MERGE_mergefunc(mykeyvalue44.key, mykeyvalue54.key, NAp);
		keyA5 = MERGE_mergefunc(mykeyvalue05.key, mykeyvalue15.key, NAp);
		keyB5 = MERGE_mergefunc(mykeyvalue25.key, mykeyvalue35.key, NAp);
		keyC5 = MERGE_mergefunc(mykeyvalue45.key, mykeyvalue55.key, NAp);
		keyA6 = MERGE_mergefunc(mykeyvalue06.key, mykeyvalue16.key, NAp);
		keyB6 = MERGE_mergefunc(mykeyvalue26.key, mykeyvalue36.key, NAp);
		keyC6 = MERGE_mergefunc(mykeyvalue46.key, mykeyvalue56.key, NAp);
		keyA7 = MERGE_mergefunc(mykeyvalue07.key, mykeyvalue17.key, NAp);
		keyB7 = MERGE_mergefunc(mykeyvalue27.key, mykeyvalue37.key, NAp);
		keyC7 = MERGE_mergefunc(mykeyvalue47.key, mykeyvalue57.key, NAp);
		keyy_t keyPA0 = MERGE_mergefunc(keyA0, keyB0, NAp);
		keyy_t keyPB0 = MERGE_mergefunc(keyC0, keyD0, NAp);
		keyy_t keyPC0 = MERGE_mergefunc(keyE0, keyF0, NAp);
		keyy_t keyRA0 = MERGE_mergefunc(keyPA0, keyPB0, NAp);
		keyy_t keyRB0 = MERGE_mergefunc(keyPC0, keyF0, NAp);
		keyy_t keyRZ0 = MERGE_mergefunc(keyRA0, keyRB0, NAp);
		keyy_t keyPA1 = MERGE_mergefunc(keyA1, keyB1, NAp);
		keyy_t keyPB1 = MERGE_mergefunc(keyC1, keyD1, NAp);
		keyy_t keyPC1 = MERGE_mergefunc(keyE1, keyF1, NAp);
		keyy_t keyRA1 = MERGE_mergefunc(keyPA1, keyPB1, NAp);
		keyy_t keyRB1 = MERGE_mergefunc(keyPC1, keyF1, NAp);
		keyy_t keyRZ1 = MERGE_mergefunc(keyRA1, keyRB1, NAp);
		keyy_t keyPA2 = MERGE_mergefunc(keyA2, keyB2, NAp);
		keyy_t keyPB2 = MERGE_mergefunc(keyC2, keyD2, NAp);
		keyy_t keyPC2 = MERGE_mergefunc(keyE2, keyF2, NAp);
		keyy_t keyRA2 = MERGE_mergefunc(keyPA2, keyPB2, NAp);
		keyy_t keyRB2 = MERGE_mergefunc(keyPC2, keyF2, NAp);
		keyy_t keyRZ2 = MERGE_mergefunc(keyRA2, keyRB2, NAp);
		keyy_t keyPA3 = MERGE_mergefunc(keyA3, keyB3, NAp);
		keyy_t keyPB3 = MERGE_mergefunc(keyC3, keyD3, NAp);
		keyy_t keyPC3 = MERGE_mergefunc(keyE3, keyF3, NAp);
		keyy_t keyRA3 = MERGE_mergefunc(keyPA3, keyPB3, NAp);
		keyy_t keyRB3 = MERGE_mergefunc(keyPC3, keyF3, NAp);
		keyy_t keyRZ3 = MERGE_mergefunc(keyRA3, keyRB3, NAp);
		keyy_t keyPA4 = MERGE_mergefunc(keyA4, keyB4, NAp);
		keyy_t keyPB4 = MERGE_mergefunc(keyC4, keyD4, NAp);
		keyy_t keyPC4 = MERGE_mergefunc(keyE4, keyF4, NAp);
		keyy_t keyRA4 = MERGE_mergefunc(keyPA4, keyPB4, NAp);
		keyy_t keyRB4 = MERGE_mergefunc(keyPC4, keyF4, NAp);
		keyy_t keyRZ4 = MERGE_mergefunc(keyRA4, keyRB4, NAp);
		keyy_t keyPA5 = MERGE_mergefunc(keyA5, keyB5, NAp);
		keyy_t keyPB5 = MERGE_mergefunc(keyC5, keyD5, NAp);
		keyy_t keyPC5 = MERGE_mergefunc(keyE5, keyF5, NAp);
		keyy_t keyRA5 = MERGE_mergefunc(keyPA5, keyPB5, NAp);
		keyy_t keyRB5 = MERGE_mergefunc(keyPC5, keyF5, NAp);
		keyy_t keyRZ5 = MERGE_mergefunc(keyRA5, keyRB5, NAp);
		keyy_t keyPA6 = MERGE_mergefunc(keyA6, keyB6, NAp);
		keyy_t keyPB6 = MERGE_mergefunc(keyC6, keyD6, NAp);
		keyy_t keyPC6 = MERGE_mergefunc(keyE6, keyF6, NAp);
		keyy_t keyRA6 = MERGE_mergefunc(keyPA6, keyPB6, NAp);
		keyy_t keyRB6 = MERGE_mergefunc(keyPC6, keyF6, NAp);
		keyy_t keyRZ6 = MERGE_mergefunc(keyRA6, keyRB6, NAp);
		keyy_t keyPA7 = MERGE_mergefunc(keyA7, keyB7, NAp);
		keyy_t keyPB7 = MERGE_mergefunc(keyC7, keyD7, NAp);
		keyy_t keyPC7 = MERGE_mergefunc(keyE7, keyF7, NAp);
		keyy_t keyRA7 = MERGE_mergefunc(keyPA7, keyPB7, NAp);
		keyy_t keyRB7 = MERGE_mergefunc(keyPC7, keyF7, NAp);
		keyy_t keyRZ7 = MERGE_mergefunc(keyRA7, keyRB7, NAp);
		
		//((n)/2)
		valA0 = MERGE_mergefunc(mykeyvalue00.value, mykeyvalue10.value, NAp);
		valB0 = MERGE_mergefunc(mykeyvalue20.value, mykeyvalue30.value, NAp);
		valC0 = MERGE_mergefunc(mykeyvalue40.value, mykeyvalue50.value, NAp);
		valA1 = MERGE_mergefunc(mykeyvalue01.value, mykeyvalue11.value, NAp);
		valB1 = MERGE_mergefunc(mykeyvalue21.value, mykeyvalue31.value, NAp);
		valC1 = MERGE_mergefunc(mykeyvalue41.value, mykeyvalue51.value, NAp);
		valA2 = MERGE_mergefunc(mykeyvalue02.value, mykeyvalue12.value, NAp);
		valB2 = MERGE_mergefunc(mykeyvalue22.value, mykeyvalue32.value, NAp);
		valC2 = MERGE_mergefunc(mykeyvalue42.value, mykeyvalue52.value, NAp);
		valA3 = MERGE_mergefunc(mykeyvalue03.value, mykeyvalue13.value, NAp);
		valB3 = MERGE_mergefunc(mykeyvalue23.value, mykeyvalue33.value, NAp);
		valC3 = MERGE_mergefunc(mykeyvalue43.value, mykeyvalue53.value, NAp);
		valA4 = MERGE_mergefunc(mykeyvalue04.value, mykeyvalue14.value, NAp);
		valB4 = MERGE_mergefunc(mykeyvalue24.value, mykeyvalue34.value, NAp);
		valC4 = MERGE_mergefunc(mykeyvalue44.value, mykeyvalue54.value, NAp);
		valA5 = MERGE_mergefunc(mykeyvalue05.value, mykeyvalue15.value, NAp);
		valB5 = MERGE_mergefunc(mykeyvalue25.value, mykeyvalue35.value, NAp);
		valC5 = MERGE_mergefunc(mykeyvalue45.value, mykeyvalue55.value, NAp);
		valA6 = MERGE_mergefunc(mykeyvalue06.value, mykeyvalue16.value, NAp);
		valB6 = MERGE_mergefunc(mykeyvalue26.value, mykeyvalue36.value, NAp);
		valC6 = MERGE_mergefunc(mykeyvalue46.value, mykeyvalue56.value, NAp);
		valA7 = MERGE_mergefunc(mykeyvalue07.value, mykeyvalue17.value, NAp);
		valB7 = MERGE_mergefunc(mykeyvalue27.value, mykeyvalue37.value, NAp);
		valC7 = MERGE_mergefunc(mykeyvalue47.value, mykeyvalue57.value, NAp);
		value_t valPA0 = MERGE_mergefunc(valA0, valB0, NAp);
		value_t valPB0 = MERGE_mergefunc(valC0, valD0, NAp);
		value_t valPC0 = MERGE_mergefunc(valE0, valF0, NAp);
		value_t valRA0 = MERGE_mergefunc(valPA0, valPB0, NAp);
		value_t valRB0 = MERGE_mergefunc(valPC0, valF0, NAp);
		value_t valRZ0 = MERGE_mergefunc(valRA0, valRB0, NAp);
		value_t valPA1 = MERGE_mergefunc(valA1, valB1, NAp);
		value_t valPB1 = MERGE_mergefunc(valC1, valD1, NAp);
		value_t valPC1 = MERGE_mergefunc(valE1, valF1, NAp);
		value_t valRA1 = MERGE_mergefunc(valPA1, valPB1, NAp);
		value_t valRB1 = MERGE_mergefunc(valPC1, valF1, NAp);
		value_t valRZ1 = MERGE_mergefunc(valRA1, valRB1, NAp);
		value_t valPA2 = MERGE_mergefunc(valA2, valB2, NAp);
		value_t valPB2 = MERGE_mergefunc(valC2, valD2, NAp);
		value_t valPC2 = MERGE_mergefunc(valE2, valF2, NAp);
		value_t valRA2 = MERGE_mergefunc(valPA2, valPB2, NAp);
		value_t valRB2 = MERGE_mergefunc(valPC2, valF2, NAp);
		value_t valRZ2 = MERGE_mergefunc(valRA2, valRB2, NAp);
		value_t valPA3 = MERGE_mergefunc(valA3, valB3, NAp);
		value_t valPB3 = MERGE_mergefunc(valC3, valD3, NAp);
		value_t valPC3 = MERGE_mergefunc(valE3, valF3, NAp);
		value_t valRA3 = MERGE_mergefunc(valPA3, valPB3, NAp);
		value_t valRB3 = MERGE_mergefunc(valPC3, valF3, NAp);
		value_t valRZ3 = MERGE_mergefunc(valRA3, valRB3, NAp);
		value_t valPA4 = MERGE_mergefunc(valA4, valB4, NAp);
		value_t valPB4 = MERGE_mergefunc(valC4, valD4, NAp);
		value_t valPC4 = MERGE_mergefunc(valE4, valF4, NAp);
		value_t valRA4 = MERGE_mergefunc(valPA4, valPB4, NAp);
		value_t valRB4 = MERGE_mergefunc(valPC4, valF4, NAp);
		value_t valRZ4 = MERGE_mergefunc(valRA4, valRB4, NAp);
		value_t valPA5 = MERGE_mergefunc(valA5, valB5, NAp);
		value_t valPB5 = MERGE_mergefunc(valC5, valD5, NAp);
		value_t valPC5 = MERGE_mergefunc(valE5, valF5, NAp);
		value_t valRA5 = MERGE_mergefunc(valPA5, valPB5, NAp);
		value_t valRB5 = MERGE_mergefunc(valPC5, valF5, NAp);
		value_t valRZ5 = MERGE_mergefunc(valRA5, valRB5, NAp);
		value_t valPA6 = MERGE_mergefunc(valA6, valB6, NAp);
		value_t valPB6 = MERGE_mergefunc(valC6, valD6, NAp);
		value_t valPC6 = MERGE_mergefunc(valE6, valF6, NAp);
		value_t valRA6 = MERGE_mergefunc(valPA6, valPB6, NAp);
		value_t valRB6 = MERGE_mergefunc(valPC6, valF6, NAp);
		value_t valRZ6 = MERGE_mergefunc(valRA6, valRB6, NAp);
		value_t valPA7 = MERGE_mergefunc(valA7, valB7, NAp);
		value_t valPB7 = MERGE_mergefunc(valC7, valD7, NAp);
		value_t valPC7 = MERGE_mergefunc(valE7, valF7, NAp);
		value_t valRA7 = MERGE_mergefunc(valPA7, valPB7, NAp);
		value_t valRB7 = MERGE_mergefunc(valPC7, valF7, NAp);
		value_t valRZ7 = MERGE_mergefunc(valRA7, valRB7, NAp);
		
		#ifdef _WIDEWORD
		vdram[dramoffset_kvs + j].range(31, 0) = keyRZ0;
		vdram[dramoffset_kvs + j].range(63, 32) = valRZ0;
		vdram[dramoffset_kvs + j].range(95, 64) = keyRZ1;
		vdram[dramoffset_kvs + j].range(127, 96) = valRZ1;
		vdram[dramoffset_kvs + j].range(159, 128) = keyRZ2;
		vdram[dramoffset_kvs + j].range(191, 160) = valRZ2;
		vdram[dramoffset_kvs + j].range(223, 192) = keyRZ3;
		vdram[dramoffset_kvs + j].range(255, 224) = valRZ3;
		vdram[dramoffset_kvs + j].range(287, 256) = keyRZ4;
		vdram[dramoffset_kvs + j].range(319, 288) = valRZ4;
		vdram[dramoffset_kvs + j].range(351, 320) = keyRZ5;
		vdram[dramoffset_kvs + j].range(383, 352) = valRZ5;
		vdram[dramoffset_kvs + j].range(415, 384) = keyRZ6;
		vdram[dramoffset_kvs + j].range(447, 416) = valRZ6;
		vdram[dramoffset_kvs + j].range(479, 448) = keyRZ7;
		vdram[dramoffset_kvs + j].range(511, 480) = valRZ7;
		#else
		vdram[dramoffset_kvs + j].data[0].key = keyRZ0;
		vdram[dramoffset_kvs + j].data[0].value = valRZ0;
		vdram[dramoffset_kvs + j].data[1].key = keyRZ1;
		vdram[dramoffset_kvs + j].data[1].value = valRZ1;
		vdram[dramoffset_kvs + j].data[2].key = keyRZ2;
		vdram[dramoffset_kvs + j].data[2].value = valRZ2;
		vdram[dramoffset_kvs + j].data[3].key = keyRZ3;
		vdram[dramoffset_kvs + j].data[3].value = valRZ3;
		vdram[dramoffset_kvs + j].data[4].key = keyRZ4;
		vdram[dramoffset_kvs + j].data[4].value = valRZ4;
		vdram[dramoffset_kvs + j].data[5].key = keyRZ5;
		vdram[dramoffset_kvs + j].data[5].value = valRZ5;
		vdram[dramoffset_kvs + j].data[6].key = keyRZ6;
		vdram[dramoffset_kvs + j].data[6].value = valRZ6;
		vdram[dramoffset_kvs + j].data[7].key = keyRZ7;
		vdram[dramoffset_kvs + j].data[7].value = valRZ7;
		#endif
	}
	return;
}
void acts_all::MERGE_merge5andsavevdata(bool_type enable, uint512_dt * vdram, keyvalue_vbuffer_t vbuffer0[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t vbuffer1[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t vbuffer2[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t vbuffer3[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t vbuffer4[VDATA_PACKINGSIZE][BLOCKRAM_SIZE], unsigned int begincol, batch_type bufferoffset_kvs, unsigned int dramoffset_kvs){
	if(enable == OFF){ return; }
	keyvalue_t dummykv;
	dummykv.key = 0xFFFFFFFF; dummykv.value = 0xFFFFFFFF;
	
	keyy_t keyA0 = dummykv.key;
	value_t valA0 = dummykv.key;
	keyy_t keyB0 = dummykv.key;
	value_t valB0 = dummykv.key;
	keyy_t keyC0 = dummykv.key;
	value_t valC0 = dummykv.key;
	keyy_t keyD0 = dummykv.key;
	value_t valD0 = dummykv.key;
	keyy_t keyE0 = dummykv.key;
	value_t valE0 = dummykv.key;
	keyy_t keyF0 = dummykv.key;
	value_t valF0 = dummykv.key;
	keyy_t keyG0 = dummykv.key;
	value_t valG0 = dummykv.key;
	keyy_t keyH0 = dummykv.key;
	value_t valH0 = dummykv.key;
	keyy_t keyI0 = dummykv.key;
	value_t valI0 = dummykv.key;
	keyy_t keyJ0 = dummykv.key;
	value_t valJ0 = dummykv.key;
	keyy_t keyK0 = dummykv.key;
	value_t valK0 = dummykv.key;
	keyy_t keyL0 = dummykv.key;
	value_t valL0 = dummykv.key;
	keyy_t keyM0 = dummykv.key;
	value_t valM0 = dummykv.key;
	keyy_t keyA1 = dummykv.key;
	value_t valA1 = dummykv.key;
	keyy_t keyB1 = dummykv.key;
	value_t valB1 = dummykv.key;
	keyy_t keyC1 = dummykv.key;
	value_t valC1 = dummykv.key;
	keyy_t keyD1 = dummykv.key;
	value_t valD1 = dummykv.key;
	keyy_t keyE1 = dummykv.key;
	value_t valE1 = dummykv.key;
	keyy_t keyF1 = dummykv.key;
	value_t valF1 = dummykv.key;
	keyy_t keyG1 = dummykv.key;
	value_t valG1 = dummykv.key;
	keyy_t keyH1 = dummykv.key;
	value_t valH1 = dummykv.key;
	keyy_t keyI1 = dummykv.key;
	value_t valI1 = dummykv.key;
	keyy_t keyJ1 = dummykv.key;
	value_t valJ1 = dummykv.key;
	keyy_t keyK1 = dummykv.key;
	value_t valK1 = dummykv.key;
	keyy_t keyL1 = dummykv.key;
	value_t valL1 = dummykv.key;
	keyy_t keyM1 = dummykv.key;
	value_t valM1 = dummykv.key;
	keyy_t keyA2 = dummykv.key;
	value_t valA2 = dummykv.key;
	keyy_t keyB2 = dummykv.key;
	value_t valB2 = dummykv.key;
	keyy_t keyC2 = dummykv.key;
	value_t valC2 = dummykv.key;
	keyy_t keyD2 = dummykv.key;
	value_t valD2 = dummykv.key;
	keyy_t keyE2 = dummykv.key;
	value_t valE2 = dummykv.key;
	keyy_t keyF2 = dummykv.key;
	value_t valF2 = dummykv.key;
	keyy_t keyG2 = dummykv.key;
	value_t valG2 = dummykv.key;
	keyy_t keyH2 = dummykv.key;
	value_t valH2 = dummykv.key;
	keyy_t keyI2 = dummykv.key;
	value_t valI2 = dummykv.key;
	keyy_t keyJ2 = dummykv.key;
	value_t valJ2 = dummykv.key;
	keyy_t keyK2 = dummykv.key;
	value_t valK2 = dummykv.key;
	keyy_t keyL2 = dummykv.key;
	value_t valL2 = dummykv.key;
	keyy_t keyM2 = dummykv.key;
	value_t valM2 = dummykv.key;
	keyy_t keyA3 = dummykv.key;
	value_t valA3 = dummykv.key;
	keyy_t keyB3 = dummykv.key;
	value_t valB3 = dummykv.key;
	keyy_t keyC3 = dummykv.key;
	value_t valC3 = dummykv.key;
	keyy_t keyD3 = dummykv.key;
	value_t valD3 = dummykv.key;
	keyy_t keyE3 = dummykv.key;
	value_t valE3 = dummykv.key;
	keyy_t keyF3 = dummykv.key;
	value_t valF3 = dummykv.key;
	keyy_t keyG3 = dummykv.key;
	value_t valG3 = dummykv.key;
	keyy_t keyH3 = dummykv.key;
	value_t valH3 = dummykv.key;
	keyy_t keyI3 = dummykv.key;
	value_t valI3 = dummykv.key;
	keyy_t keyJ3 = dummykv.key;
	value_t valJ3 = dummykv.key;
	keyy_t keyK3 = dummykv.key;
	value_t valK3 = dummykv.key;
	keyy_t keyL3 = dummykv.key;
	value_t valL3 = dummykv.key;
	keyy_t keyM3 = dummykv.key;
	value_t valM3 = dummykv.key;
	keyy_t keyA4 = dummykv.key;
	value_t valA4 = dummykv.key;
	keyy_t keyB4 = dummykv.key;
	value_t valB4 = dummykv.key;
	keyy_t keyC4 = dummykv.key;
	value_t valC4 = dummykv.key;
	keyy_t keyD4 = dummykv.key;
	value_t valD4 = dummykv.key;
	keyy_t keyE4 = dummykv.key;
	value_t valE4 = dummykv.key;
	keyy_t keyF4 = dummykv.key;
	value_t valF4 = dummykv.key;
	keyy_t keyG4 = dummykv.key;
	value_t valG4 = dummykv.key;
	keyy_t keyH4 = dummykv.key;
	value_t valH4 = dummykv.key;
	keyy_t keyI4 = dummykv.key;
	value_t valI4 = dummykv.key;
	keyy_t keyJ4 = dummykv.key;
	value_t valJ4 = dummykv.key;
	keyy_t keyK4 = dummykv.key;
	value_t valK4 = dummykv.key;
	keyy_t keyL4 = dummykv.key;
	value_t valL4 = dummykv.key;
	keyy_t keyM4 = dummykv.key;
	value_t valM4 = dummykv.key;
	keyy_t keyA5 = dummykv.key;
	value_t valA5 = dummykv.key;
	keyy_t keyB5 = dummykv.key;
	value_t valB5 = dummykv.key;
	keyy_t keyC5 = dummykv.key;
	value_t valC5 = dummykv.key;
	keyy_t keyD5 = dummykv.key;
	value_t valD5 = dummykv.key;
	keyy_t keyE5 = dummykv.key;
	value_t valE5 = dummykv.key;
	keyy_t keyF5 = dummykv.key;
	value_t valF5 = dummykv.key;
	keyy_t keyG5 = dummykv.key;
	value_t valG5 = dummykv.key;
	keyy_t keyH5 = dummykv.key;
	value_t valH5 = dummykv.key;
	keyy_t keyI5 = dummykv.key;
	value_t valI5 = dummykv.key;
	keyy_t keyJ5 = dummykv.key;
	value_t valJ5 = dummykv.key;
	keyy_t keyK5 = dummykv.key;
	value_t valK5 = dummykv.key;
	keyy_t keyL5 = dummykv.key;
	value_t valL5 = dummykv.key;
	keyy_t keyM5 = dummykv.key;
	value_t valM5 = dummykv.key;
	keyy_t keyA6 = dummykv.key;
	value_t valA6 = dummykv.key;
	keyy_t keyB6 = dummykv.key;
	value_t valB6 = dummykv.key;
	keyy_t keyC6 = dummykv.key;
	value_t valC6 = dummykv.key;
	keyy_t keyD6 = dummykv.key;
	value_t valD6 = dummykv.key;
	keyy_t keyE6 = dummykv.key;
	value_t valE6 = dummykv.key;
	keyy_t keyF6 = dummykv.key;
	value_t valF6 = dummykv.key;
	keyy_t keyG6 = dummykv.key;
	value_t valG6 = dummykv.key;
	keyy_t keyH6 = dummykv.key;
	value_t valH6 = dummykv.key;
	keyy_t keyI6 = dummykv.key;
	value_t valI6 = dummykv.key;
	keyy_t keyJ6 = dummykv.key;
	value_t valJ6 = dummykv.key;
	keyy_t keyK6 = dummykv.key;
	value_t valK6 = dummykv.key;
	keyy_t keyL6 = dummykv.key;
	value_t valL6 = dummykv.key;
	keyy_t keyM6 = dummykv.key;
	value_t valM6 = dummykv.key;
	keyy_t keyA7 = dummykv.key;
	value_t valA7 = dummykv.key;
	keyy_t keyB7 = dummykv.key;
	value_t valB7 = dummykv.key;
	keyy_t keyC7 = dummykv.key;
	value_t valC7 = dummykv.key;
	keyy_t keyD7 = dummykv.key;
	value_t valD7 = dummykv.key;
	keyy_t keyE7 = dummykv.key;
	value_t valE7 = dummykv.key;
	keyy_t keyF7 = dummykv.key;
	value_t valF7 = dummykv.key;
	keyy_t keyG7 = dummykv.key;
	value_t valG7 = dummykv.key;
	keyy_t keyH7 = dummykv.key;
	value_t valH7 = dummykv.key;
	keyy_t keyI7 = dummykv.key;
	value_t valI7 = dummykv.key;
	keyy_t keyJ7 = dummykv.key;
	value_t valJ7 = dummykv.key;
	keyy_t keyK7 = dummykv.key;
	value_t valK7 = dummykv.key;
	keyy_t keyL7 = dummykv.key;
	value_t valL7 = dummykv.key;
	keyy_t keyM7 = dummykv.key;
	value_t valM7 = dummykv.key;
	
	MERGE5_LOOP1: for (buffer_type j=0; j<BLOCKRAM_SIZE; j++){
	#pragma HLS PIPELINE II=1
		keyvalue_t mykeyvalue00 = UTIL_GETKV2(vbuffer0[begincol + 0][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue01 = UTIL_GETKV2(vbuffer0[begincol + 1][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue02 = UTIL_GETKV2(vbuffer0[begincol + 2][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue03 = UTIL_GETKV2(vbuffer0[begincol + 3][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue04 = UTIL_GETKV2(vbuffer0[begincol + 4][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue05 = UTIL_GETKV2(vbuffer0[begincol + 5][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue06 = UTIL_GETKV2(vbuffer0[begincol + 6][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue07 = UTIL_GETKV2(vbuffer0[begincol + 7][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue10 = UTIL_GETKV2(vbuffer1[begincol + 0][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue11 = UTIL_GETKV2(vbuffer1[begincol + 1][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue12 = UTIL_GETKV2(vbuffer1[begincol + 2][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue13 = UTIL_GETKV2(vbuffer1[begincol + 3][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue14 = UTIL_GETKV2(vbuffer1[begincol + 4][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue15 = UTIL_GETKV2(vbuffer1[begincol + 5][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue16 = UTIL_GETKV2(vbuffer1[begincol + 6][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue17 = UTIL_GETKV2(vbuffer1[begincol + 7][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue20 = UTIL_GETKV2(vbuffer2[begincol + 0][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue21 = UTIL_GETKV2(vbuffer2[begincol + 1][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue22 = UTIL_GETKV2(vbuffer2[begincol + 2][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue23 = UTIL_GETKV2(vbuffer2[begincol + 3][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue24 = UTIL_GETKV2(vbuffer2[begincol + 4][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue25 = UTIL_GETKV2(vbuffer2[begincol + 5][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue26 = UTIL_GETKV2(vbuffer2[begincol + 6][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue27 = UTIL_GETKV2(vbuffer2[begincol + 7][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue30 = UTIL_GETKV2(vbuffer3[begincol + 0][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue31 = UTIL_GETKV2(vbuffer3[begincol + 1][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue32 = UTIL_GETKV2(vbuffer3[begincol + 2][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue33 = UTIL_GETKV2(vbuffer3[begincol + 3][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue34 = UTIL_GETKV2(vbuffer3[begincol + 4][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue35 = UTIL_GETKV2(vbuffer3[begincol + 5][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue36 = UTIL_GETKV2(vbuffer3[begincol + 6][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue37 = UTIL_GETKV2(vbuffer3[begincol + 7][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue40 = UTIL_GETKV2(vbuffer4[begincol + 0][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue41 = UTIL_GETKV2(vbuffer4[begincol + 1][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue42 = UTIL_GETKV2(vbuffer4[begincol + 2][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue43 = UTIL_GETKV2(vbuffer4[begincol + 3][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue44 = UTIL_GETKV2(vbuffer4[begincol + 4][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue45 = UTIL_GETKV2(vbuffer4[begincol + 5][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue46 = UTIL_GETKV2(vbuffer4[begincol + 6][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue47 = UTIL_GETKV2(vbuffer4[begincol + 7][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue50 = dummykv;
		keyvalue_t mykeyvalue51 = dummykv;
		keyvalue_t mykeyvalue52 = dummykv;
		keyvalue_t mykeyvalue53 = dummykv;
		keyvalue_t mykeyvalue54 = dummykv;
		keyvalue_t mykeyvalue55 = dummykv;
		keyvalue_t mykeyvalue56 = dummykv;
		keyvalue_t mykeyvalue57 = dummykv;
		keyvalue_t mykeyvalue60 = dummykv;
		keyvalue_t mykeyvalue61 = dummykv;
		keyvalue_t mykeyvalue62 = dummykv;
		keyvalue_t mykeyvalue63 = dummykv;
		keyvalue_t mykeyvalue64 = dummykv;
		keyvalue_t mykeyvalue65 = dummykv;
		keyvalue_t mykeyvalue66 = dummykv;
		keyvalue_t mykeyvalue67 = dummykv;
		keyvalue_t mykeyvalue70 = dummykv;
		keyvalue_t mykeyvalue71 = dummykv;
		keyvalue_t mykeyvalue72 = dummykv;
		keyvalue_t mykeyvalue73 = dummykv;
		keyvalue_t mykeyvalue74 = dummykv;
		keyvalue_t mykeyvalue75 = dummykv;
		keyvalue_t mykeyvalue76 = dummykv;
		keyvalue_t mykeyvalue77 = dummykv;
		keyvalue_t mykeyvalue80 = dummykv;
		keyvalue_t mykeyvalue81 = dummykv;
		keyvalue_t mykeyvalue82 = dummykv;
		keyvalue_t mykeyvalue83 = dummykv;
		keyvalue_t mykeyvalue84 = dummykv;
		keyvalue_t mykeyvalue85 = dummykv;
		keyvalue_t mykeyvalue86 = dummykv;
		keyvalue_t mykeyvalue87 = dummykv;
		keyvalue_t mykeyvalue90 = dummykv;
		keyvalue_t mykeyvalue91 = dummykv;
		keyvalue_t mykeyvalue92 = dummykv;
		keyvalue_t mykeyvalue93 = dummykv;
		keyvalue_t mykeyvalue94 = dummykv;
		keyvalue_t mykeyvalue95 = dummykv;
		keyvalue_t mykeyvalue96 = dummykv;
		keyvalue_t mykeyvalue97 = dummykv;
		keyvalue_t mykeyvalue100 = dummykv;
		keyvalue_t mykeyvalue101 = dummykv;
		keyvalue_t mykeyvalue102 = dummykv;
		keyvalue_t mykeyvalue103 = dummykv;
		keyvalue_t mykeyvalue104 = dummykv;
		keyvalue_t mykeyvalue105 = dummykv;
		keyvalue_t mykeyvalue106 = dummykv;
		keyvalue_t mykeyvalue107 = dummykv;
		keyvalue_t mykeyvalue110 = dummykv;
		keyvalue_t mykeyvalue111 = dummykv;
		keyvalue_t mykeyvalue112 = dummykv;
		keyvalue_t mykeyvalue113 = dummykv;
		keyvalue_t mykeyvalue114 = dummykv;
		keyvalue_t mykeyvalue115 = dummykv;
		keyvalue_t mykeyvalue116 = dummykv;
		keyvalue_t mykeyvalue117 = dummykv;
		keyvalue_t mykeyvalue120 = dummykv;
		keyvalue_t mykeyvalue121 = dummykv;
		keyvalue_t mykeyvalue122 = dummykv;
		keyvalue_t mykeyvalue123 = dummykv;
		keyvalue_t mykeyvalue124 = dummykv;
		keyvalue_t mykeyvalue125 = dummykv;
		keyvalue_t mykeyvalue126 = dummykv;
		keyvalue_t mykeyvalue127 = dummykv;
		keyvalue_t mykeyvalue130 = dummykv;
		keyvalue_t mykeyvalue131 = dummykv;
		keyvalue_t mykeyvalue132 = dummykv;
		keyvalue_t mykeyvalue133 = dummykv;
		keyvalue_t mykeyvalue134 = dummykv;
		keyvalue_t mykeyvalue135 = dummykv;
		keyvalue_t mykeyvalue136 = dummykv;
		keyvalue_t mykeyvalue137 = dummykv;
		keyvalue_t mykeyvalue140 = dummykv;
		keyvalue_t mykeyvalue141 = dummykv;
		keyvalue_t mykeyvalue142 = dummykv;
		keyvalue_t mykeyvalue143 = dummykv;
		keyvalue_t mykeyvalue144 = dummykv;
		keyvalue_t mykeyvalue145 = dummykv;
		keyvalue_t mykeyvalue146 = dummykv;
		keyvalue_t mykeyvalue147 = dummykv;
		
		//((n)/2)
		keyA0 = MERGE_mergefunc(mykeyvalue00.key, mykeyvalue10.key, NAp);
		keyB0 = MERGE_mergefunc(mykeyvalue20.key, mykeyvalue30.key, NAp);
		keyC0 = MERGE_mergefunc(mykeyvalue40.key, mykeyvalue50.key, NAp);
		keyA1 = MERGE_mergefunc(mykeyvalue01.key, mykeyvalue11.key, NAp);
		keyB1 = MERGE_mergefunc(mykeyvalue21.key, mykeyvalue31.key, NAp);
		keyC1 = MERGE_mergefunc(mykeyvalue41.key, mykeyvalue51.key, NAp);
		keyA2 = MERGE_mergefunc(mykeyvalue02.key, mykeyvalue12.key, NAp);
		keyB2 = MERGE_mergefunc(mykeyvalue22.key, mykeyvalue32.key, NAp);
		keyC2 = MERGE_mergefunc(mykeyvalue42.key, mykeyvalue52.key, NAp);
		keyA3 = MERGE_mergefunc(mykeyvalue03.key, mykeyvalue13.key, NAp);
		keyB3 = MERGE_mergefunc(mykeyvalue23.key, mykeyvalue33.key, NAp);
		keyC3 = MERGE_mergefunc(mykeyvalue43.key, mykeyvalue53.key, NAp);
		keyA4 = MERGE_mergefunc(mykeyvalue04.key, mykeyvalue14.key, NAp);
		keyB4 = MERGE_mergefunc(mykeyvalue24.key, mykeyvalue34.key, NAp);
		keyC4 = MERGE_mergefunc(mykeyvalue44.key, mykeyvalue54.key, NAp);
		keyA5 = MERGE_mergefunc(mykeyvalue05.key, mykeyvalue15.key, NAp);
		keyB5 = MERGE_mergefunc(mykeyvalue25.key, mykeyvalue35.key, NAp);
		keyC5 = MERGE_mergefunc(mykeyvalue45.key, mykeyvalue55.key, NAp);
		keyA6 = MERGE_mergefunc(mykeyvalue06.key, mykeyvalue16.key, NAp);
		keyB6 = MERGE_mergefunc(mykeyvalue26.key, mykeyvalue36.key, NAp);
		keyC6 = MERGE_mergefunc(mykeyvalue46.key, mykeyvalue56.key, NAp);
		keyA7 = MERGE_mergefunc(mykeyvalue07.key, mykeyvalue17.key, NAp);
		keyB7 = MERGE_mergefunc(mykeyvalue27.key, mykeyvalue37.key, NAp);
		keyC7 = MERGE_mergefunc(mykeyvalue47.key, mykeyvalue57.key, NAp);
		keyy_t keyPA0 = MERGE_mergefunc(keyA0, keyB0, NAp);
		keyy_t keyPB0 = MERGE_mergefunc(keyC0, keyD0, NAp);
		keyy_t keyPC0 = MERGE_mergefunc(keyE0, keyF0, NAp);
		keyy_t keyRA0 = MERGE_mergefunc(keyPA0, keyPB0, NAp);
		keyy_t keyRB0 = MERGE_mergefunc(keyPC0, keyF0, NAp);
		keyy_t keyRZ0 = MERGE_mergefunc(keyRA0, keyRB0, NAp);
		keyy_t keyPA1 = MERGE_mergefunc(keyA1, keyB1, NAp);
		keyy_t keyPB1 = MERGE_mergefunc(keyC1, keyD1, NAp);
		keyy_t keyPC1 = MERGE_mergefunc(keyE1, keyF1, NAp);
		keyy_t keyRA1 = MERGE_mergefunc(keyPA1, keyPB1, NAp);
		keyy_t keyRB1 = MERGE_mergefunc(keyPC1, keyF1, NAp);
		keyy_t keyRZ1 = MERGE_mergefunc(keyRA1, keyRB1, NAp);
		keyy_t keyPA2 = MERGE_mergefunc(keyA2, keyB2, NAp);
		keyy_t keyPB2 = MERGE_mergefunc(keyC2, keyD2, NAp);
		keyy_t keyPC2 = MERGE_mergefunc(keyE2, keyF2, NAp);
		keyy_t keyRA2 = MERGE_mergefunc(keyPA2, keyPB2, NAp);
		keyy_t keyRB2 = MERGE_mergefunc(keyPC2, keyF2, NAp);
		keyy_t keyRZ2 = MERGE_mergefunc(keyRA2, keyRB2, NAp);
		keyy_t keyPA3 = MERGE_mergefunc(keyA3, keyB3, NAp);
		keyy_t keyPB3 = MERGE_mergefunc(keyC3, keyD3, NAp);
		keyy_t keyPC3 = MERGE_mergefunc(keyE3, keyF3, NAp);
		keyy_t keyRA3 = MERGE_mergefunc(keyPA3, keyPB3, NAp);
		keyy_t keyRB3 = MERGE_mergefunc(keyPC3, keyF3, NAp);
		keyy_t keyRZ3 = MERGE_mergefunc(keyRA3, keyRB3, NAp);
		keyy_t keyPA4 = MERGE_mergefunc(keyA4, keyB4, NAp);
		keyy_t keyPB4 = MERGE_mergefunc(keyC4, keyD4, NAp);
		keyy_t keyPC4 = MERGE_mergefunc(keyE4, keyF4, NAp);
		keyy_t keyRA4 = MERGE_mergefunc(keyPA4, keyPB4, NAp);
		keyy_t keyRB4 = MERGE_mergefunc(keyPC4, keyF4, NAp);
		keyy_t keyRZ4 = MERGE_mergefunc(keyRA4, keyRB4, NAp);
		keyy_t keyPA5 = MERGE_mergefunc(keyA5, keyB5, NAp);
		keyy_t keyPB5 = MERGE_mergefunc(keyC5, keyD5, NAp);
		keyy_t keyPC5 = MERGE_mergefunc(keyE5, keyF5, NAp);
		keyy_t keyRA5 = MERGE_mergefunc(keyPA5, keyPB5, NAp);
		keyy_t keyRB5 = MERGE_mergefunc(keyPC5, keyF5, NAp);
		keyy_t keyRZ5 = MERGE_mergefunc(keyRA5, keyRB5, NAp);
		keyy_t keyPA6 = MERGE_mergefunc(keyA6, keyB6, NAp);
		keyy_t keyPB6 = MERGE_mergefunc(keyC6, keyD6, NAp);
		keyy_t keyPC6 = MERGE_mergefunc(keyE6, keyF6, NAp);
		keyy_t keyRA6 = MERGE_mergefunc(keyPA6, keyPB6, NAp);
		keyy_t keyRB6 = MERGE_mergefunc(keyPC6, keyF6, NAp);
		keyy_t keyRZ6 = MERGE_mergefunc(keyRA6, keyRB6, NAp);
		keyy_t keyPA7 = MERGE_mergefunc(keyA7, keyB7, NAp);
		keyy_t keyPB7 = MERGE_mergefunc(keyC7, keyD7, NAp);
		keyy_t keyPC7 = MERGE_mergefunc(keyE7, keyF7, NAp);
		keyy_t keyRA7 = MERGE_mergefunc(keyPA7, keyPB7, NAp);
		keyy_t keyRB7 = MERGE_mergefunc(keyPC7, keyF7, NAp);
		keyy_t keyRZ7 = MERGE_mergefunc(keyRA7, keyRB7, NAp);
		
		//((n)/2)
		valA0 = MERGE_mergefunc(mykeyvalue00.value, mykeyvalue10.value, NAp);
		valB0 = MERGE_mergefunc(mykeyvalue20.value, mykeyvalue30.value, NAp);
		valC0 = MERGE_mergefunc(mykeyvalue40.value, mykeyvalue50.value, NAp);
		valA1 = MERGE_mergefunc(mykeyvalue01.value, mykeyvalue11.value, NAp);
		valB1 = MERGE_mergefunc(mykeyvalue21.value, mykeyvalue31.value, NAp);
		valC1 = MERGE_mergefunc(mykeyvalue41.value, mykeyvalue51.value, NAp);
		valA2 = MERGE_mergefunc(mykeyvalue02.value, mykeyvalue12.value, NAp);
		valB2 = MERGE_mergefunc(mykeyvalue22.value, mykeyvalue32.value, NAp);
		valC2 = MERGE_mergefunc(mykeyvalue42.value, mykeyvalue52.value, NAp);
		valA3 = MERGE_mergefunc(mykeyvalue03.value, mykeyvalue13.value, NAp);
		valB3 = MERGE_mergefunc(mykeyvalue23.value, mykeyvalue33.value, NAp);
		valC3 = MERGE_mergefunc(mykeyvalue43.value, mykeyvalue53.value, NAp);
		valA4 = MERGE_mergefunc(mykeyvalue04.value, mykeyvalue14.value, NAp);
		valB4 = MERGE_mergefunc(mykeyvalue24.value, mykeyvalue34.value, NAp);
		valC4 = MERGE_mergefunc(mykeyvalue44.value, mykeyvalue54.value, NAp);
		valA5 = MERGE_mergefunc(mykeyvalue05.value, mykeyvalue15.value, NAp);
		valB5 = MERGE_mergefunc(mykeyvalue25.value, mykeyvalue35.value, NAp);
		valC5 = MERGE_mergefunc(mykeyvalue45.value, mykeyvalue55.value, NAp);
		valA6 = MERGE_mergefunc(mykeyvalue06.value, mykeyvalue16.value, NAp);
		valB6 = MERGE_mergefunc(mykeyvalue26.value, mykeyvalue36.value, NAp);
		valC6 = MERGE_mergefunc(mykeyvalue46.value, mykeyvalue56.value, NAp);
		valA7 = MERGE_mergefunc(mykeyvalue07.value, mykeyvalue17.value, NAp);
		valB7 = MERGE_mergefunc(mykeyvalue27.value, mykeyvalue37.value, NAp);
		valC7 = MERGE_mergefunc(mykeyvalue47.value, mykeyvalue57.value, NAp);
		value_t valPA0 = MERGE_mergefunc(valA0, valB0, NAp);
		value_t valPB0 = MERGE_mergefunc(valC0, valD0, NAp);
		value_t valPC0 = MERGE_mergefunc(valE0, valF0, NAp);
		value_t valRA0 = MERGE_mergefunc(valPA0, valPB0, NAp);
		value_t valRB0 = MERGE_mergefunc(valPC0, valF0, NAp);
		value_t valRZ0 = MERGE_mergefunc(valRA0, valRB0, NAp);
		value_t valPA1 = MERGE_mergefunc(valA1, valB1, NAp);
		value_t valPB1 = MERGE_mergefunc(valC1, valD1, NAp);
		value_t valPC1 = MERGE_mergefunc(valE1, valF1, NAp);
		value_t valRA1 = MERGE_mergefunc(valPA1, valPB1, NAp);
		value_t valRB1 = MERGE_mergefunc(valPC1, valF1, NAp);
		value_t valRZ1 = MERGE_mergefunc(valRA1, valRB1, NAp);
		value_t valPA2 = MERGE_mergefunc(valA2, valB2, NAp);
		value_t valPB2 = MERGE_mergefunc(valC2, valD2, NAp);
		value_t valPC2 = MERGE_mergefunc(valE2, valF2, NAp);
		value_t valRA2 = MERGE_mergefunc(valPA2, valPB2, NAp);
		value_t valRB2 = MERGE_mergefunc(valPC2, valF2, NAp);
		value_t valRZ2 = MERGE_mergefunc(valRA2, valRB2, NAp);
		value_t valPA3 = MERGE_mergefunc(valA3, valB3, NAp);
		value_t valPB3 = MERGE_mergefunc(valC3, valD3, NAp);
		value_t valPC3 = MERGE_mergefunc(valE3, valF3, NAp);
		value_t valRA3 = MERGE_mergefunc(valPA3, valPB3, NAp);
		value_t valRB3 = MERGE_mergefunc(valPC3, valF3, NAp);
		value_t valRZ3 = MERGE_mergefunc(valRA3, valRB3, NAp);
		value_t valPA4 = MERGE_mergefunc(valA4, valB4, NAp);
		value_t valPB4 = MERGE_mergefunc(valC4, valD4, NAp);
		value_t valPC4 = MERGE_mergefunc(valE4, valF4, NAp);
		value_t valRA4 = MERGE_mergefunc(valPA4, valPB4, NAp);
		value_t valRB4 = MERGE_mergefunc(valPC4, valF4, NAp);
		value_t valRZ4 = MERGE_mergefunc(valRA4, valRB4, NAp);
		value_t valPA5 = MERGE_mergefunc(valA5, valB5, NAp);
		value_t valPB5 = MERGE_mergefunc(valC5, valD5, NAp);
		value_t valPC5 = MERGE_mergefunc(valE5, valF5, NAp);
		value_t valRA5 = MERGE_mergefunc(valPA5, valPB5, NAp);
		value_t valRB5 = MERGE_mergefunc(valPC5, valF5, NAp);
		value_t valRZ5 = MERGE_mergefunc(valRA5, valRB5, NAp);
		value_t valPA6 = MERGE_mergefunc(valA6, valB6, NAp);
		value_t valPB6 = MERGE_mergefunc(valC6, valD6, NAp);
		value_t valPC6 = MERGE_mergefunc(valE6, valF6, NAp);
		value_t valRA6 = MERGE_mergefunc(valPA6, valPB6, NAp);
		value_t valRB6 = MERGE_mergefunc(valPC6, valF6, NAp);
		value_t valRZ6 = MERGE_mergefunc(valRA6, valRB6, NAp);
		value_t valPA7 = MERGE_mergefunc(valA7, valB7, NAp);
		value_t valPB7 = MERGE_mergefunc(valC7, valD7, NAp);
		value_t valPC7 = MERGE_mergefunc(valE7, valF7, NAp);
		value_t valRA7 = MERGE_mergefunc(valPA7, valPB7, NAp);
		value_t valRB7 = MERGE_mergefunc(valPC7, valF7, NAp);
		value_t valRZ7 = MERGE_mergefunc(valRA7, valRB7, NAp);
		
		#ifdef _WIDEWORD
		vdram[dramoffset_kvs + j].range(31, 0) = keyRZ0;
		vdram[dramoffset_kvs + j].range(63, 32) = valRZ0;
		vdram[dramoffset_kvs + j].range(95, 64) = keyRZ1;
		vdram[dramoffset_kvs + j].range(127, 96) = valRZ1;
		vdram[dramoffset_kvs + j].range(159, 128) = keyRZ2;
		vdram[dramoffset_kvs + j].range(191, 160) = valRZ2;
		vdram[dramoffset_kvs + j].range(223, 192) = keyRZ3;
		vdram[dramoffset_kvs + j].range(255, 224) = valRZ3;
		vdram[dramoffset_kvs + j].range(287, 256) = keyRZ4;
		vdram[dramoffset_kvs + j].range(319, 288) = valRZ4;
		vdram[dramoffset_kvs + j].range(351, 320) = keyRZ5;
		vdram[dramoffset_kvs + j].range(383, 352) = valRZ5;
		vdram[dramoffset_kvs + j].range(415, 384) = keyRZ6;
		vdram[dramoffset_kvs + j].range(447, 416) = valRZ6;
		vdram[dramoffset_kvs + j].range(479, 448) = keyRZ7;
		vdram[dramoffset_kvs + j].range(511, 480) = valRZ7;
		#else
		vdram[dramoffset_kvs + j].data[0].key = keyRZ0;
		vdram[dramoffset_kvs + j].data[0].value = valRZ0;
		vdram[dramoffset_kvs + j].data[1].key = keyRZ1;
		vdram[dramoffset_kvs + j].data[1].value = valRZ1;
		vdram[dramoffset_kvs + j].data[2].key = keyRZ2;
		vdram[dramoffset_kvs + j].data[2].value = valRZ2;
		vdram[dramoffset_kvs + j].data[3].key = keyRZ3;
		vdram[dramoffset_kvs + j].data[3].value = valRZ3;
		vdram[dramoffset_kvs + j].data[4].key = keyRZ4;
		vdram[dramoffset_kvs + j].data[4].value = valRZ4;
		vdram[dramoffset_kvs + j].data[5].key = keyRZ5;
		vdram[dramoffset_kvs + j].data[5].value = valRZ5;
		vdram[dramoffset_kvs + j].data[6].key = keyRZ6;
		vdram[dramoffset_kvs + j].data[6].value = valRZ6;
		vdram[dramoffset_kvs + j].data[7].key = keyRZ7;
		vdram[dramoffset_kvs + j].data[7].value = valRZ7;
		#endif
	}
	return;
}
void acts_all::MERGE_merge6andsavevdata(bool_type enable, uint512_dt * vdram, keyvalue_vbuffer_t vbuffer0[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t vbuffer1[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t vbuffer2[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t vbuffer3[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t vbuffer4[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t vbuffer5[VDATA_PACKINGSIZE][BLOCKRAM_SIZE], unsigned int begincol, batch_type bufferoffset_kvs, unsigned int dramoffset_kvs){
	if(enable == OFF){ return; }
	keyvalue_t dummykv;
	dummykv.key = 0xFFFFFFFF; dummykv.value = 0xFFFFFFFF;
	
	keyy_t keyA0 = dummykv.key;
	value_t valA0 = dummykv.key;
	keyy_t keyB0 = dummykv.key;
	value_t valB0 = dummykv.key;
	keyy_t keyC0 = dummykv.key;
	value_t valC0 = dummykv.key;
	keyy_t keyD0 = dummykv.key;
	value_t valD0 = dummykv.key;
	keyy_t keyE0 = dummykv.key;
	value_t valE0 = dummykv.key;
	keyy_t keyF0 = dummykv.key;
	value_t valF0 = dummykv.key;
	keyy_t keyG0 = dummykv.key;
	value_t valG0 = dummykv.key;
	keyy_t keyH0 = dummykv.key;
	value_t valH0 = dummykv.key;
	keyy_t keyI0 = dummykv.key;
	value_t valI0 = dummykv.key;
	keyy_t keyJ0 = dummykv.key;
	value_t valJ0 = dummykv.key;
	keyy_t keyK0 = dummykv.key;
	value_t valK0 = dummykv.key;
	keyy_t keyL0 = dummykv.key;
	value_t valL0 = dummykv.key;
	keyy_t keyM0 = dummykv.key;
	value_t valM0 = dummykv.key;
	keyy_t keyA1 = dummykv.key;
	value_t valA1 = dummykv.key;
	keyy_t keyB1 = dummykv.key;
	value_t valB1 = dummykv.key;
	keyy_t keyC1 = dummykv.key;
	value_t valC1 = dummykv.key;
	keyy_t keyD1 = dummykv.key;
	value_t valD1 = dummykv.key;
	keyy_t keyE1 = dummykv.key;
	value_t valE1 = dummykv.key;
	keyy_t keyF1 = dummykv.key;
	value_t valF1 = dummykv.key;
	keyy_t keyG1 = dummykv.key;
	value_t valG1 = dummykv.key;
	keyy_t keyH1 = dummykv.key;
	value_t valH1 = dummykv.key;
	keyy_t keyI1 = dummykv.key;
	value_t valI1 = dummykv.key;
	keyy_t keyJ1 = dummykv.key;
	value_t valJ1 = dummykv.key;
	keyy_t keyK1 = dummykv.key;
	value_t valK1 = dummykv.key;
	keyy_t keyL1 = dummykv.key;
	value_t valL1 = dummykv.key;
	keyy_t keyM1 = dummykv.key;
	value_t valM1 = dummykv.key;
	keyy_t keyA2 = dummykv.key;
	value_t valA2 = dummykv.key;
	keyy_t keyB2 = dummykv.key;
	value_t valB2 = dummykv.key;
	keyy_t keyC2 = dummykv.key;
	value_t valC2 = dummykv.key;
	keyy_t keyD2 = dummykv.key;
	value_t valD2 = dummykv.key;
	keyy_t keyE2 = dummykv.key;
	value_t valE2 = dummykv.key;
	keyy_t keyF2 = dummykv.key;
	value_t valF2 = dummykv.key;
	keyy_t keyG2 = dummykv.key;
	value_t valG2 = dummykv.key;
	keyy_t keyH2 = dummykv.key;
	value_t valH2 = dummykv.key;
	keyy_t keyI2 = dummykv.key;
	value_t valI2 = dummykv.key;
	keyy_t keyJ2 = dummykv.key;
	value_t valJ2 = dummykv.key;
	keyy_t keyK2 = dummykv.key;
	value_t valK2 = dummykv.key;
	keyy_t keyL2 = dummykv.key;
	value_t valL2 = dummykv.key;
	keyy_t keyM2 = dummykv.key;
	value_t valM2 = dummykv.key;
	keyy_t keyA3 = dummykv.key;
	value_t valA3 = dummykv.key;
	keyy_t keyB3 = dummykv.key;
	value_t valB3 = dummykv.key;
	keyy_t keyC3 = dummykv.key;
	value_t valC3 = dummykv.key;
	keyy_t keyD3 = dummykv.key;
	value_t valD3 = dummykv.key;
	keyy_t keyE3 = dummykv.key;
	value_t valE3 = dummykv.key;
	keyy_t keyF3 = dummykv.key;
	value_t valF3 = dummykv.key;
	keyy_t keyG3 = dummykv.key;
	value_t valG3 = dummykv.key;
	keyy_t keyH3 = dummykv.key;
	value_t valH3 = dummykv.key;
	keyy_t keyI3 = dummykv.key;
	value_t valI3 = dummykv.key;
	keyy_t keyJ3 = dummykv.key;
	value_t valJ3 = dummykv.key;
	keyy_t keyK3 = dummykv.key;
	value_t valK3 = dummykv.key;
	keyy_t keyL3 = dummykv.key;
	value_t valL3 = dummykv.key;
	keyy_t keyM3 = dummykv.key;
	value_t valM3 = dummykv.key;
	keyy_t keyA4 = dummykv.key;
	value_t valA4 = dummykv.key;
	keyy_t keyB4 = dummykv.key;
	value_t valB4 = dummykv.key;
	keyy_t keyC4 = dummykv.key;
	value_t valC4 = dummykv.key;
	keyy_t keyD4 = dummykv.key;
	value_t valD4 = dummykv.key;
	keyy_t keyE4 = dummykv.key;
	value_t valE4 = dummykv.key;
	keyy_t keyF4 = dummykv.key;
	value_t valF4 = dummykv.key;
	keyy_t keyG4 = dummykv.key;
	value_t valG4 = dummykv.key;
	keyy_t keyH4 = dummykv.key;
	value_t valH4 = dummykv.key;
	keyy_t keyI4 = dummykv.key;
	value_t valI4 = dummykv.key;
	keyy_t keyJ4 = dummykv.key;
	value_t valJ4 = dummykv.key;
	keyy_t keyK4 = dummykv.key;
	value_t valK4 = dummykv.key;
	keyy_t keyL4 = dummykv.key;
	value_t valL4 = dummykv.key;
	keyy_t keyM4 = dummykv.key;
	value_t valM4 = dummykv.key;
	keyy_t keyA5 = dummykv.key;
	value_t valA5 = dummykv.key;
	keyy_t keyB5 = dummykv.key;
	value_t valB5 = dummykv.key;
	keyy_t keyC5 = dummykv.key;
	value_t valC5 = dummykv.key;
	keyy_t keyD5 = dummykv.key;
	value_t valD5 = dummykv.key;
	keyy_t keyE5 = dummykv.key;
	value_t valE5 = dummykv.key;
	keyy_t keyF5 = dummykv.key;
	value_t valF5 = dummykv.key;
	keyy_t keyG5 = dummykv.key;
	value_t valG5 = dummykv.key;
	keyy_t keyH5 = dummykv.key;
	value_t valH5 = dummykv.key;
	keyy_t keyI5 = dummykv.key;
	value_t valI5 = dummykv.key;
	keyy_t keyJ5 = dummykv.key;
	value_t valJ5 = dummykv.key;
	keyy_t keyK5 = dummykv.key;
	value_t valK5 = dummykv.key;
	keyy_t keyL5 = dummykv.key;
	value_t valL5 = dummykv.key;
	keyy_t keyM5 = dummykv.key;
	value_t valM5 = dummykv.key;
	keyy_t keyA6 = dummykv.key;
	value_t valA6 = dummykv.key;
	keyy_t keyB6 = dummykv.key;
	value_t valB6 = dummykv.key;
	keyy_t keyC6 = dummykv.key;
	value_t valC6 = dummykv.key;
	keyy_t keyD6 = dummykv.key;
	value_t valD6 = dummykv.key;
	keyy_t keyE6 = dummykv.key;
	value_t valE6 = dummykv.key;
	keyy_t keyF6 = dummykv.key;
	value_t valF6 = dummykv.key;
	keyy_t keyG6 = dummykv.key;
	value_t valG6 = dummykv.key;
	keyy_t keyH6 = dummykv.key;
	value_t valH6 = dummykv.key;
	keyy_t keyI6 = dummykv.key;
	value_t valI6 = dummykv.key;
	keyy_t keyJ6 = dummykv.key;
	value_t valJ6 = dummykv.key;
	keyy_t keyK6 = dummykv.key;
	value_t valK6 = dummykv.key;
	keyy_t keyL6 = dummykv.key;
	value_t valL6 = dummykv.key;
	keyy_t keyM6 = dummykv.key;
	value_t valM6 = dummykv.key;
	keyy_t keyA7 = dummykv.key;
	value_t valA7 = dummykv.key;
	keyy_t keyB7 = dummykv.key;
	value_t valB7 = dummykv.key;
	keyy_t keyC7 = dummykv.key;
	value_t valC7 = dummykv.key;
	keyy_t keyD7 = dummykv.key;
	value_t valD7 = dummykv.key;
	keyy_t keyE7 = dummykv.key;
	value_t valE7 = dummykv.key;
	keyy_t keyF7 = dummykv.key;
	value_t valF7 = dummykv.key;
	keyy_t keyG7 = dummykv.key;
	value_t valG7 = dummykv.key;
	keyy_t keyH7 = dummykv.key;
	value_t valH7 = dummykv.key;
	keyy_t keyI7 = dummykv.key;
	value_t valI7 = dummykv.key;
	keyy_t keyJ7 = dummykv.key;
	value_t valJ7 = dummykv.key;
	keyy_t keyK7 = dummykv.key;
	value_t valK7 = dummykv.key;
	keyy_t keyL7 = dummykv.key;
	value_t valL7 = dummykv.key;
	keyy_t keyM7 = dummykv.key;
	value_t valM7 = dummykv.key;
	
	MERGE6_LOOP1: for (buffer_type j=0; j<BLOCKRAM_SIZE; j++){
	#pragma HLS PIPELINE II=1
		keyvalue_t mykeyvalue00 = UTIL_GETKV2(vbuffer0[begincol + 0][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue01 = UTIL_GETKV2(vbuffer0[begincol + 1][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue02 = UTIL_GETKV2(vbuffer0[begincol + 2][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue03 = UTIL_GETKV2(vbuffer0[begincol + 3][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue04 = UTIL_GETKV2(vbuffer0[begincol + 4][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue05 = UTIL_GETKV2(vbuffer0[begincol + 5][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue06 = UTIL_GETKV2(vbuffer0[begincol + 6][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue07 = UTIL_GETKV2(vbuffer0[begincol + 7][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue10 = UTIL_GETKV2(vbuffer1[begincol + 0][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue11 = UTIL_GETKV2(vbuffer1[begincol + 1][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue12 = UTIL_GETKV2(vbuffer1[begincol + 2][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue13 = UTIL_GETKV2(vbuffer1[begincol + 3][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue14 = UTIL_GETKV2(vbuffer1[begincol + 4][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue15 = UTIL_GETKV2(vbuffer1[begincol + 5][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue16 = UTIL_GETKV2(vbuffer1[begincol + 6][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue17 = UTIL_GETKV2(vbuffer1[begincol + 7][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue20 = UTIL_GETKV2(vbuffer2[begincol + 0][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue21 = UTIL_GETKV2(vbuffer2[begincol + 1][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue22 = UTIL_GETKV2(vbuffer2[begincol + 2][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue23 = UTIL_GETKV2(vbuffer2[begincol + 3][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue24 = UTIL_GETKV2(vbuffer2[begincol + 4][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue25 = UTIL_GETKV2(vbuffer2[begincol + 5][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue26 = UTIL_GETKV2(vbuffer2[begincol + 6][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue27 = UTIL_GETKV2(vbuffer2[begincol + 7][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue30 = UTIL_GETKV2(vbuffer3[begincol + 0][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue31 = UTIL_GETKV2(vbuffer3[begincol + 1][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue32 = UTIL_GETKV2(vbuffer3[begincol + 2][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue33 = UTIL_GETKV2(vbuffer3[begincol + 3][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue34 = UTIL_GETKV2(vbuffer3[begincol + 4][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue35 = UTIL_GETKV2(vbuffer3[begincol + 5][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue36 = UTIL_GETKV2(vbuffer3[begincol + 6][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue37 = UTIL_GETKV2(vbuffer3[begincol + 7][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue40 = UTIL_GETKV2(vbuffer4[begincol + 0][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue41 = UTIL_GETKV2(vbuffer4[begincol + 1][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue42 = UTIL_GETKV2(vbuffer4[begincol + 2][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue43 = UTIL_GETKV2(vbuffer4[begincol + 3][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue44 = UTIL_GETKV2(vbuffer4[begincol + 4][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue45 = UTIL_GETKV2(vbuffer4[begincol + 5][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue46 = UTIL_GETKV2(vbuffer4[begincol + 6][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue47 = UTIL_GETKV2(vbuffer4[begincol + 7][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue50 = UTIL_GETKV2(vbuffer5[begincol + 0][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue51 = UTIL_GETKV2(vbuffer5[begincol + 1][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue52 = UTIL_GETKV2(vbuffer5[begincol + 2][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue53 = UTIL_GETKV2(vbuffer5[begincol + 3][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue54 = UTIL_GETKV2(vbuffer5[begincol + 4][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue55 = UTIL_GETKV2(vbuffer5[begincol + 5][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue56 = UTIL_GETKV2(vbuffer5[begincol + 6][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue57 = UTIL_GETKV2(vbuffer5[begincol + 7][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue60 = dummykv;
		keyvalue_t mykeyvalue61 = dummykv;
		keyvalue_t mykeyvalue62 = dummykv;
		keyvalue_t mykeyvalue63 = dummykv;
		keyvalue_t mykeyvalue64 = dummykv;
		keyvalue_t mykeyvalue65 = dummykv;
		keyvalue_t mykeyvalue66 = dummykv;
		keyvalue_t mykeyvalue67 = dummykv;
		keyvalue_t mykeyvalue70 = dummykv;
		keyvalue_t mykeyvalue71 = dummykv;
		keyvalue_t mykeyvalue72 = dummykv;
		keyvalue_t mykeyvalue73 = dummykv;
		keyvalue_t mykeyvalue74 = dummykv;
		keyvalue_t mykeyvalue75 = dummykv;
		keyvalue_t mykeyvalue76 = dummykv;
		keyvalue_t mykeyvalue77 = dummykv;
		keyvalue_t mykeyvalue80 = dummykv;
		keyvalue_t mykeyvalue81 = dummykv;
		keyvalue_t mykeyvalue82 = dummykv;
		keyvalue_t mykeyvalue83 = dummykv;
		keyvalue_t mykeyvalue84 = dummykv;
		keyvalue_t mykeyvalue85 = dummykv;
		keyvalue_t mykeyvalue86 = dummykv;
		keyvalue_t mykeyvalue87 = dummykv;
		keyvalue_t mykeyvalue90 = dummykv;
		keyvalue_t mykeyvalue91 = dummykv;
		keyvalue_t mykeyvalue92 = dummykv;
		keyvalue_t mykeyvalue93 = dummykv;
		keyvalue_t mykeyvalue94 = dummykv;
		keyvalue_t mykeyvalue95 = dummykv;
		keyvalue_t mykeyvalue96 = dummykv;
		keyvalue_t mykeyvalue97 = dummykv;
		keyvalue_t mykeyvalue100 = dummykv;
		keyvalue_t mykeyvalue101 = dummykv;
		keyvalue_t mykeyvalue102 = dummykv;
		keyvalue_t mykeyvalue103 = dummykv;
		keyvalue_t mykeyvalue104 = dummykv;
		keyvalue_t mykeyvalue105 = dummykv;
		keyvalue_t mykeyvalue106 = dummykv;
		keyvalue_t mykeyvalue107 = dummykv;
		keyvalue_t mykeyvalue110 = dummykv;
		keyvalue_t mykeyvalue111 = dummykv;
		keyvalue_t mykeyvalue112 = dummykv;
		keyvalue_t mykeyvalue113 = dummykv;
		keyvalue_t mykeyvalue114 = dummykv;
		keyvalue_t mykeyvalue115 = dummykv;
		keyvalue_t mykeyvalue116 = dummykv;
		keyvalue_t mykeyvalue117 = dummykv;
		keyvalue_t mykeyvalue120 = dummykv;
		keyvalue_t mykeyvalue121 = dummykv;
		keyvalue_t mykeyvalue122 = dummykv;
		keyvalue_t mykeyvalue123 = dummykv;
		keyvalue_t mykeyvalue124 = dummykv;
		keyvalue_t mykeyvalue125 = dummykv;
		keyvalue_t mykeyvalue126 = dummykv;
		keyvalue_t mykeyvalue127 = dummykv;
		keyvalue_t mykeyvalue130 = dummykv;
		keyvalue_t mykeyvalue131 = dummykv;
		keyvalue_t mykeyvalue132 = dummykv;
		keyvalue_t mykeyvalue133 = dummykv;
		keyvalue_t mykeyvalue134 = dummykv;
		keyvalue_t mykeyvalue135 = dummykv;
		keyvalue_t mykeyvalue136 = dummykv;
		keyvalue_t mykeyvalue137 = dummykv;
		keyvalue_t mykeyvalue140 = dummykv;
		keyvalue_t mykeyvalue141 = dummykv;
		keyvalue_t mykeyvalue142 = dummykv;
		keyvalue_t mykeyvalue143 = dummykv;
		keyvalue_t mykeyvalue144 = dummykv;
		keyvalue_t mykeyvalue145 = dummykv;
		keyvalue_t mykeyvalue146 = dummykv;
		keyvalue_t mykeyvalue147 = dummykv;
		
		//((n)/2)
		keyA0 = MERGE_mergefunc(mykeyvalue00.key, mykeyvalue10.key, NAp);
		keyB0 = MERGE_mergefunc(mykeyvalue20.key, mykeyvalue30.key, NAp);
		keyC0 = MERGE_mergefunc(mykeyvalue40.key, mykeyvalue50.key, NAp);
		keyD0 = MERGE_mergefunc(mykeyvalue60.key, mykeyvalue70.key, NAp);
		keyA1 = MERGE_mergefunc(mykeyvalue01.key, mykeyvalue11.key, NAp);
		keyB1 = MERGE_mergefunc(mykeyvalue21.key, mykeyvalue31.key, NAp);
		keyC1 = MERGE_mergefunc(mykeyvalue41.key, mykeyvalue51.key, NAp);
		keyD1 = MERGE_mergefunc(mykeyvalue61.key, mykeyvalue71.key, NAp);
		keyA2 = MERGE_mergefunc(mykeyvalue02.key, mykeyvalue12.key, NAp);
		keyB2 = MERGE_mergefunc(mykeyvalue22.key, mykeyvalue32.key, NAp);
		keyC2 = MERGE_mergefunc(mykeyvalue42.key, mykeyvalue52.key, NAp);
		keyD2 = MERGE_mergefunc(mykeyvalue62.key, mykeyvalue72.key, NAp);
		keyA3 = MERGE_mergefunc(mykeyvalue03.key, mykeyvalue13.key, NAp);
		keyB3 = MERGE_mergefunc(mykeyvalue23.key, mykeyvalue33.key, NAp);
		keyC3 = MERGE_mergefunc(mykeyvalue43.key, mykeyvalue53.key, NAp);
		keyD3 = MERGE_mergefunc(mykeyvalue63.key, mykeyvalue73.key, NAp);
		keyA4 = MERGE_mergefunc(mykeyvalue04.key, mykeyvalue14.key, NAp);
		keyB4 = MERGE_mergefunc(mykeyvalue24.key, mykeyvalue34.key, NAp);
		keyC4 = MERGE_mergefunc(mykeyvalue44.key, mykeyvalue54.key, NAp);
		keyD4 = MERGE_mergefunc(mykeyvalue64.key, mykeyvalue74.key, NAp);
		keyA5 = MERGE_mergefunc(mykeyvalue05.key, mykeyvalue15.key, NAp);
		keyB5 = MERGE_mergefunc(mykeyvalue25.key, mykeyvalue35.key, NAp);
		keyC5 = MERGE_mergefunc(mykeyvalue45.key, mykeyvalue55.key, NAp);
		keyD5 = MERGE_mergefunc(mykeyvalue65.key, mykeyvalue75.key, NAp);
		keyA6 = MERGE_mergefunc(mykeyvalue06.key, mykeyvalue16.key, NAp);
		keyB6 = MERGE_mergefunc(mykeyvalue26.key, mykeyvalue36.key, NAp);
		keyC6 = MERGE_mergefunc(mykeyvalue46.key, mykeyvalue56.key, NAp);
		keyD6 = MERGE_mergefunc(mykeyvalue66.key, mykeyvalue76.key, NAp);
		keyA7 = MERGE_mergefunc(mykeyvalue07.key, mykeyvalue17.key, NAp);
		keyB7 = MERGE_mergefunc(mykeyvalue27.key, mykeyvalue37.key, NAp);
		keyC7 = MERGE_mergefunc(mykeyvalue47.key, mykeyvalue57.key, NAp);
		keyD7 = MERGE_mergefunc(mykeyvalue67.key, mykeyvalue77.key, NAp);
		keyy_t keyPA0 = MERGE_mergefunc(keyA0, keyB0, NAp);
		keyy_t keyPB0 = MERGE_mergefunc(keyC0, keyD0, NAp);
		keyy_t keyPC0 = MERGE_mergefunc(keyE0, keyF0, NAp);
		keyy_t keyRA0 = MERGE_mergefunc(keyPA0, keyPB0, NAp);
		keyy_t keyRB0 = MERGE_mergefunc(keyPC0, keyF0, NAp);
		keyy_t keyRZ0 = MERGE_mergefunc(keyRA0, keyRB0, NAp);
		keyy_t keyPA1 = MERGE_mergefunc(keyA1, keyB1, NAp);
		keyy_t keyPB1 = MERGE_mergefunc(keyC1, keyD1, NAp);
		keyy_t keyPC1 = MERGE_mergefunc(keyE1, keyF1, NAp);
		keyy_t keyRA1 = MERGE_mergefunc(keyPA1, keyPB1, NAp);
		keyy_t keyRB1 = MERGE_mergefunc(keyPC1, keyF1, NAp);
		keyy_t keyRZ1 = MERGE_mergefunc(keyRA1, keyRB1, NAp);
		keyy_t keyPA2 = MERGE_mergefunc(keyA2, keyB2, NAp);
		keyy_t keyPB2 = MERGE_mergefunc(keyC2, keyD2, NAp);
		keyy_t keyPC2 = MERGE_mergefunc(keyE2, keyF2, NAp);
		keyy_t keyRA2 = MERGE_mergefunc(keyPA2, keyPB2, NAp);
		keyy_t keyRB2 = MERGE_mergefunc(keyPC2, keyF2, NAp);
		keyy_t keyRZ2 = MERGE_mergefunc(keyRA2, keyRB2, NAp);
		keyy_t keyPA3 = MERGE_mergefunc(keyA3, keyB3, NAp);
		keyy_t keyPB3 = MERGE_mergefunc(keyC3, keyD3, NAp);
		keyy_t keyPC3 = MERGE_mergefunc(keyE3, keyF3, NAp);
		keyy_t keyRA3 = MERGE_mergefunc(keyPA3, keyPB3, NAp);
		keyy_t keyRB3 = MERGE_mergefunc(keyPC3, keyF3, NAp);
		keyy_t keyRZ3 = MERGE_mergefunc(keyRA3, keyRB3, NAp);
		keyy_t keyPA4 = MERGE_mergefunc(keyA4, keyB4, NAp);
		keyy_t keyPB4 = MERGE_mergefunc(keyC4, keyD4, NAp);
		keyy_t keyPC4 = MERGE_mergefunc(keyE4, keyF4, NAp);
		keyy_t keyRA4 = MERGE_mergefunc(keyPA4, keyPB4, NAp);
		keyy_t keyRB4 = MERGE_mergefunc(keyPC4, keyF4, NAp);
		keyy_t keyRZ4 = MERGE_mergefunc(keyRA4, keyRB4, NAp);
		keyy_t keyPA5 = MERGE_mergefunc(keyA5, keyB5, NAp);
		keyy_t keyPB5 = MERGE_mergefunc(keyC5, keyD5, NAp);
		keyy_t keyPC5 = MERGE_mergefunc(keyE5, keyF5, NAp);
		keyy_t keyRA5 = MERGE_mergefunc(keyPA5, keyPB5, NAp);
		keyy_t keyRB5 = MERGE_mergefunc(keyPC5, keyF5, NAp);
		keyy_t keyRZ5 = MERGE_mergefunc(keyRA5, keyRB5, NAp);
		keyy_t keyPA6 = MERGE_mergefunc(keyA6, keyB6, NAp);
		keyy_t keyPB6 = MERGE_mergefunc(keyC6, keyD6, NAp);
		keyy_t keyPC6 = MERGE_mergefunc(keyE6, keyF6, NAp);
		keyy_t keyRA6 = MERGE_mergefunc(keyPA6, keyPB6, NAp);
		keyy_t keyRB6 = MERGE_mergefunc(keyPC6, keyF6, NAp);
		keyy_t keyRZ6 = MERGE_mergefunc(keyRA6, keyRB6, NAp);
		keyy_t keyPA7 = MERGE_mergefunc(keyA7, keyB7, NAp);
		keyy_t keyPB7 = MERGE_mergefunc(keyC7, keyD7, NAp);
		keyy_t keyPC7 = MERGE_mergefunc(keyE7, keyF7, NAp);
		keyy_t keyRA7 = MERGE_mergefunc(keyPA7, keyPB7, NAp);
		keyy_t keyRB7 = MERGE_mergefunc(keyPC7, keyF7, NAp);
		keyy_t keyRZ7 = MERGE_mergefunc(keyRA7, keyRB7, NAp);
		
		//((n)/2)
		valA0 = MERGE_mergefunc(mykeyvalue00.value, mykeyvalue10.value, NAp);
		valB0 = MERGE_mergefunc(mykeyvalue20.value, mykeyvalue30.value, NAp);
		valC0 = MERGE_mergefunc(mykeyvalue40.value, mykeyvalue50.value, NAp);
		valD0 = MERGE_mergefunc(mykeyvalue60.value, mykeyvalue70.value, NAp);
		valA1 = MERGE_mergefunc(mykeyvalue01.value, mykeyvalue11.value, NAp);
		valB1 = MERGE_mergefunc(mykeyvalue21.value, mykeyvalue31.value, NAp);
		valC1 = MERGE_mergefunc(mykeyvalue41.value, mykeyvalue51.value, NAp);
		valD1 = MERGE_mergefunc(mykeyvalue61.value, mykeyvalue71.value, NAp);
		valA2 = MERGE_mergefunc(mykeyvalue02.value, mykeyvalue12.value, NAp);
		valB2 = MERGE_mergefunc(mykeyvalue22.value, mykeyvalue32.value, NAp);
		valC2 = MERGE_mergefunc(mykeyvalue42.value, mykeyvalue52.value, NAp);
		valD2 = MERGE_mergefunc(mykeyvalue62.value, mykeyvalue72.value, NAp);
		valA3 = MERGE_mergefunc(mykeyvalue03.value, mykeyvalue13.value, NAp);
		valB3 = MERGE_mergefunc(mykeyvalue23.value, mykeyvalue33.value, NAp);
		valC3 = MERGE_mergefunc(mykeyvalue43.value, mykeyvalue53.value, NAp);
		valD3 = MERGE_mergefunc(mykeyvalue63.value, mykeyvalue73.value, NAp);
		valA4 = MERGE_mergefunc(mykeyvalue04.value, mykeyvalue14.value, NAp);
		valB4 = MERGE_mergefunc(mykeyvalue24.value, mykeyvalue34.value, NAp);
		valC4 = MERGE_mergefunc(mykeyvalue44.value, mykeyvalue54.value, NAp);
		valD4 = MERGE_mergefunc(mykeyvalue64.value, mykeyvalue74.value, NAp);
		valA5 = MERGE_mergefunc(mykeyvalue05.value, mykeyvalue15.value, NAp);
		valB5 = MERGE_mergefunc(mykeyvalue25.value, mykeyvalue35.value, NAp);
		valC5 = MERGE_mergefunc(mykeyvalue45.value, mykeyvalue55.value, NAp);
		valD5 = MERGE_mergefunc(mykeyvalue65.value, mykeyvalue75.value, NAp);
		valA6 = MERGE_mergefunc(mykeyvalue06.value, mykeyvalue16.value, NAp);
		valB6 = MERGE_mergefunc(mykeyvalue26.value, mykeyvalue36.value, NAp);
		valC6 = MERGE_mergefunc(mykeyvalue46.value, mykeyvalue56.value, NAp);
		valD6 = MERGE_mergefunc(mykeyvalue66.value, mykeyvalue76.value, NAp);
		valA7 = MERGE_mergefunc(mykeyvalue07.value, mykeyvalue17.value, NAp);
		valB7 = MERGE_mergefunc(mykeyvalue27.value, mykeyvalue37.value, NAp);
		valC7 = MERGE_mergefunc(mykeyvalue47.value, mykeyvalue57.value, NAp);
		valD7 = MERGE_mergefunc(mykeyvalue67.value, mykeyvalue77.value, NAp);
		value_t valPA0 = MERGE_mergefunc(valA0, valB0, NAp);
		value_t valPB0 = MERGE_mergefunc(valC0, valD0, NAp);
		value_t valPC0 = MERGE_mergefunc(valE0, valF0, NAp);
		value_t valRA0 = MERGE_mergefunc(valPA0, valPB0, NAp);
		value_t valRB0 = MERGE_mergefunc(valPC0, valF0, NAp);
		value_t valRZ0 = MERGE_mergefunc(valRA0, valRB0, NAp);
		value_t valPA1 = MERGE_mergefunc(valA1, valB1, NAp);
		value_t valPB1 = MERGE_mergefunc(valC1, valD1, NAp);
		value_t valPC1 = MERGE_mergefunc(valE1, valF1, NAp);
		value_t valRA1 = MERGE_mergefunc(valPA1, valPB1, NAp);
		value_t valRB1 = MERGE_mergefunc(valPC1, valF1, NAp);
		value_t valRZ1 = MERGE_mergefunc(valRA1, valRB1, NAp);
		value_t valPA2 = MERGE_mergefunc(valA2, valB2, NAp);
		value_t valPB2 = MERGE_mergefunc(valC2, valD2, NAp);
		value_t valPC2 = MERGE_mergefunc(valE2, valF2, NAp);
		value_t valRA2 = MERGE_mergefunc(valPA2, valPB2, NAp);
		value_t valRB2 = MERGE_mergefunc(valPC2, valF2, NAp);
		value_t valRZ2 = MERGE_mergefunc(valRA2, valRB2, NAp);
		value_t valPA3 = MERGE_mergefunc(valA3, valB3, NAp);
		value_t valPB3 = MERGE_mergefunc(valC3, valD3, NAp);
		value_t valPC3 = MERGE_mergefunc(valE3, valF3, NAp);
		value_t valRA3 = MERGE_mergefunc(valPA3, valPB3, NAp);
		value_t valRB3 = MERGE_mergefunc(valPC3, valF3, NAp);
		value_t valRZ3 = MERGE_mergefunc(valRA3, valRB3, NAp);
		value_t valPA4 = MERGE_mergefunc(valA4, valB4, NAp);
		value_t valPB4 = MERGE_mergefunc(valC4, valD4, NAp);
		value_t valPC4 = MERGE_mergefunc(valE4, valF4, NAp);
		value_t valRA4 = MERGE_mergefunc(valPA4, valPB4, NAp);
		value_t valRB4 = MERGE_mergefunc(valPC4, valF4, NAp);
		value_t valRZ4 = MERGE_mergefunc(valRA4, valRB4, NAp);
		value_t valPA5 = MERGE_mergefunc(valA5, valB5, NAp);
		value_t valPB5 = MERGE_mergefunc(valC5, valD5, NAp);
		value_t valPC5 = MERGE_mergefunc(valE5, valF5, NAp);
		value_t valRA5 = MERGE_mergefunc(valPA5, valPB5, NAp);
		value_t valRB5 = MERGE_mergefunc(valPC5, valF5, NAp);
		value_t valRZ5 = MERGE_mergefunc(valRA5, valRB5, NAp);
		value_t valPA6 = MERGE_mergefunc(valA6, valB6, NAp);
		value_t valPB6 = MERGE_mergefunc(valC6, valD6, NAp);
		value_t valPC6 = MERGE_mergefunc(valE6, valF6, NAp);
		value_t valRA6 = MERGE_mergefunc(valPA6, valPB6, NAp);
		value_t valRB6 = MERGE_mergefunc(valPC6, valF6, NAp);
		value_t valRZ6 = MERGE_mergefunc(valRA6, valRB6, NAp);
		value_t valPA7 = MERGE_mergefunc(valA7, valB7, NAp);
		value_t valPB7 = MERGE_mergefunc(valC7, valD7, NAp);
		value_t valPC7 = MERGE_mergefunc(valE7, valF7, NAp);
		value_t valRA7 = MERGE_mergefunc(valPA7, valPB7, NAp);
		value_t valRB7 = MERGE_mergefunc(valPC7, valF7, NAp);
		value_t valRZ7 = MERGE_mergefunc(valRA7, valRB7, NAp);
		
		#ifdef _WIDEWORD
		vdram[dramoffset_kvs + j].range(31, 0) = keyRZ0;
		vdram[dramoffset_kvs + j].range(63, 32) = valRZ0;
		vdram[dramoffset_kvs + j].range(95, 64) = keyRZ1;
		vdram[dramoffset_kvs + j].range(127, 96) = valRZ1;
		vdram[dramoffset_kvs + j].range(159, 128) = keyRZ2;
		vdram[dramoffset_kvs + j].range(191, 160) = valRZ2;
		vdram[dramoffset_kvs + j].range(223, 192) = keyRZ3;
		vdram[dramoffset_kvs + j].range(255, 224) = valRZ3;
		vdram[dramoffset_kvs + j].range(287, 256) = keyRZ4;
		vdram[dramoffset_kvs + j].range(319, 288) = valRZ4;
		vdram[dramoffset_kvs + j].range(351, 320) = keyRZ5;
		vdram[dramoffset_kvs + j].range(383, 352) = valRZ5;
		vdram[dramoffset_kvs + j].range(415, 384) = keyRZ6;
		vdram[dramoffset_kvs + j].range(447, 416) = valRZ6;
		vdram[dramoffset_kvs + j].range(479, 448) = keyRZ7;
		vdram[dramoffset_kvs + j].range(511, 480) = valRZ7;
		#else
		vdram[dramoffset_kvs + j].data[0].key = keyRZ0;
		vdram[dramoffset_kvs + j].data[0].value = valRZ0;
		vdram[dramoffset_kvs + j].data[1].key = keyRZ1;
		vdram[dramoffset_kvs + j].data[1].value = valRZ1;
		vdram[dramoffset_kvs + j].data[2].key = keyRZ2;
		vdram[dramoffset_kvs + j].data[2].value = valRZ2;
		vdram[dramoffset_kvs + j].data[3].key = keyRZ3;
		vdram[dramoffset_kvs + j].data[3].value = valRZ3;
		vdram[dramoffset_kvs + j].data[4].key = keyRZ4;
		vdram[dramoffset_kvs + j].data[4].value = valRZ4;
		vdram[dramoffset_kvs + j].data[5].key = keyRZ5;
		vdram[dramoffset_kvs + j].data[5].value = valRZ5;
		vdram[dramoffset_kvs + j].data[6].key = keyRZ6;
		vdram[dramoffset_kvs + j].data[6].value = valRZ6;
		vdram[dramoffset_kvs + j].data[7].key = keyRZ7;
		vdram[dramoffset_kvs + j].data[7].value = valRZ7;
		#endif
	}
	return;
}
void acts_all::MERGE_merge7andsavevdata(bool_type enable, uint512_dt * vdram, keyvalue_vbuffer_t vbuffer0[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t vbuffer1[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t vbuffer2[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t vbuffer3[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t vbuffer4[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t vbuffer5[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t vbuffer6[VDATA_PACKINGSIZE][BLOCKRAM_SIZE], unsigned int begincol, batch_type bufferoffset_kvs, unsigned int dramoffset_kvs){
	if(enable == OFF){ return; }
	keyvalue_t dummykv;
	dummykv.key = 0xFFFFFFFF; dummykv.value = 0xFFFFFFFF;
	
	keyy_t keyA0 = dummykv.key;
	value_t valA0 = dummykv.key;
	keyy_t keyB0 = dummykv.key;
	value_t valB0 = dummykv.key;
	keyy_t keyC0 = dummykv.key;
	value_t valC0 = dummykv.key;
	keyy_t keyD0 = dummykv.key;
	value_t valD0 = dummykv.key;
	keyy_t keyE0 = dummykv.key;
	value_t valE0 = dummykv.key;
	keyy_t keyF0 = dummykv.key;
	value_t valF0 = dummykv.key;
	keyy_t keyG0 = dummykv.key;
	value_t valG0 = dummykv.key;
	keyy_t keyH0 = dummykv.key;
	value_t valH0 = dummykv.key;
	keyy_t keyI0 = dummykv.key;
	value_t valI0 = dummykv.key;
	keyy_t keyJ0 = dummykv.key;
	value_t valJ0 = dummykv.key;
	keyy_t keyK0 = dummykv.key;
	value_t valK0 = dummykv.key;
	keyy_t keyL0 = dummykv.key;
	value_t valL0 = dummykv.key;
	keyy_t keyM0 = dummykv.key;
	value_t valM0 = dummykv.key;
	keyy_t keyA1 = dummykv.key;
	value_t valA1 = dummykv.key;
	keyy_t keyB1 = dummykv.key;
	value_t valB1 = dummykv.key;
	keyy_t keyC1 = dummykv.key;
	value_t valC1 = dummykv.key;
	keyy_t keyD1 = dummykv.key;
	value_t valD1 = dummykv.key;
	keyy_t keyE1 = dummykv.key;
	value_t valE1 = dummykv.key;
	keyy_t keyF1 = dummykv.key;
	value_t valF1 = dummykv.key;
	keyy_t keyG1 = dummykv.key;
	value_t valG1 = dummykv.key;
	keyy_t keyH1 = dummykv.key;
	value_t valH1 = dummykv.key;
	keyy_t keyI1 = dummykv.key;
	value_t valI1 = dummykv.key;
	keyy_t keyJ1 = dummykv.key;
	value_t valJ1 = dummykv.key;
	keyy_t keyK1 = dummykv.key;
	value_t valK1 = dummykv.key;
	keyy_t keyL1 = dummykv.key;
	value_t valL1 = dummykv.key;
	keyy_t keyM1 = dummykv.key;
	value_t valM1 = dummykv.key;
	keyy_t keyA2 = dummykv.key;
	value_t valA2 = dummykv.key;
	keyy_t keyB2 = dummykv.key;
	value_t valB2 = dummykv.key;
	keyy_t keyC2 = dummykv.key;
	value_t valC2 = dummykv.key;
	keyy_t keyD2 = dummykv.key;
	value_t valD2 = dummykv.key;
	keyy_t keyE2 = dummykv.key;
	value_t valE2 = dummykv.key;
	keyy_t keyF2 = dummykv.key;
	value_t valF2 = dummykv.key;
	keyy_t keyG2 = dummykv.key;
	value_t valG2 = dummykv.key;
	keyy_t keyH2 = dummykv.key;
	value_t valH2 = dummykv.key;
	keyy_t keyI2 = dummykv.key;
	value_t valI2 = dummykv.key;
	keyy_t keyJ2 = dummykv.key;
	value_t valJ2 = dummykv.key;
	keyy_t keyK2 = dummykv.key;
	value_t valK2 = dummykv.key;
	keyy_t keyL2 = dummykv.key;
	value_t valL2 = dummykv.key;
	keyy_t keyM2 = dummykv.key;
	value_t valM2 = dummykv.key;
	keyy_t keyA3 = dummykv.key;
	value_t valA3 = dummykv.key;
	keyy_t keyB3 = dummykv.key;
	value_t valB3 = dummykv.key;
	keyy_t keyC3 = dummykv.key;
	value_t valC3 = dummykv.key;
	keyy_t keyD3 = dummykv.key;
	value_t valD3 = dummykv.key;
	keyy_t keyE3 = dummykv.key;
	value_t valE3 = dummykv.key;
	keyy_t keyF3 = dummykv.key;
	value_t valF3 = dummykv.key;
	keyy_t keyG3 = dummykv.key;
	value_t valG3 = dummykv.key;
	keyy_t keyH3 = dummykv.key;
	value_t valH3 = dummykv.key;
	keyy_t keyI3 = dummykv.key;
	value_t valI3 = dummykv.key;
	keyy_t keyJ3 = dummykv.key;
	value_t valJ3 = dummykv.key;
	keyy_t keyK3 = dummykv.key;
	value_t valK3 = dummykv.key;
	keyy_t keyL3 = dummykv.key;
	value_t valL3 = dummykv.key;
	keyy_t keyM3 = dummykv.key;
	value_t valM3 = dummykv.key;
	keyy_t keyA4 = dummykv.key;
	value_t valA4 = dummykv.key;
	keyy_t keyB4 = dummykv.key;
	value_t valB4 = dummykv.key;
	keyy_t keyC4 = dummykv.key;
	value_t valC4 = dummykv.key;
	keyy_t keyD4 = dummykv.key;
	value_t valD4 = dummykv.key;
	keyy_t keyE4 = dummykv.key;
	value_t valE4 = dummykv.key;
	keyy_t keyF4 = dummykv.key;
	value_t valF4 = dummykv.key;
	keyy_t keyG4 = dummykv.key;
	value_t valG4 = dummykv.key;
	keyy_t keyH4 = dummykv.key;
	value_t valH4 = dummykv.key;
	keyy_t keyI4 = dummykv.key;
	value_t valI4 = dummykv.key;
	keyy_t keyJ4 = dummykv.key;
	value_t valJ4 = dummykv.key;
	keyy_t keyK4 = dummykv.key;
	value_t valK4 = dummykv.key;
	keyy_t keyL4 = dummykv.key;
	value_t valL4 = dummykv.key;
	keyy_t keyM4 = dummykv.key;
	value_t valM4 = dummykv.key;
	keyy_t keyA5 = dummykv.key;
	value_t valA5 = dummykv.key;
	keyy_t keyB5 = dummykv.key;
	value_t valB5 = dummykv.key;
	keyy_t keyC5 = dummykv.key;
	value_t valC5 = dummykv.key;
	keyy_t keyD5 = dummykv.key;
	value_t valD5 = dummykv.key;
	keyy_t keyE5 = dummykv.key;
	value_t valE5 = dummykv.key;
	keyy_t keyF5 = dummykv.key;
	value_t valF5 = dummykv.key;
	keyy_t keyG5 = dummykv.key;
	value_t valG5 = dummykv.key;
	keyy_t keyH5 = dummykv.key;
	value_t valH5 = dummykv.key;
	keyy_t keyI5 = dummykv.key;
	value_t valI5 = dummykv.key;
	keyy_t keyJ5 = dummykv.key;
	value_t valJ5 = dummykv.key;
	keyy_t keyK5 = dummykv.key;
	value_t valK5 = dummykv.key;
	keyy_t keyL5 = dummykv.key;
	value_t valL5 = dummykv.key;
	keyy_t keyM5 = dummykv.key;
	value_t valM5 = dummykv.key;
	keyy_t keyA6 = dummykv.key;
	value_t valA6 = dummykv.key;
	keyy_t keyB6 = dummykv.key;
	value_t valB6 = dummykv.key;
	keyy_t keyC6 = dummykv.key;
	value_t valC6 = dummykv.key;
	keyy_t keyD6 = dummykv.key;
	value_t valD6 = dummykv.key;
	keyy_t keyE6 = dummykv.key;
	value_t valE6 = dummykv.key;
	keyy_t keyF6 = dummykv.key;
	value_t valF6 = dummykv.key;
	keyy_t keyG6 = dummykv.key;
	value_t valG6 = dummykv.key;
	keyy_t keyH6 = dummykv.key;
	value_t valH6 = dummykv.key;
	keyy_t keyI6 = dummykv.key;
	value_t valI6 = dummykv.key;
	keyy_t keyJ6 = dummykv.key;
	value_t valJ6 = dummykv.key;
	keyy_t keyK6 = dummykv.key;
	value_t valK6 = dummykv.key;
	keyy_t keyL6 = dummykv.key;
	value_t valL6 = dummykv.key;
	keyy_t keyM6 = dummykv.key;
	value_t valM6 = dummykv.key;
	keyy_t keyA7 = dummykv.key;
	value_t valA7 = dummykv.key;
	keyy_t keyB7 = dummykv.key;
	value_t valB7 = dummykv.key;
	keyy_t keyC7 = dummykv.key;
	value_t valC7 = dummykv.key;
	keyy_t keyD7 = dummykv.key;
	value_t valD7 = dummykv.key;
	keyy_t keyE7 = dummykv.key;
	value_t valE7 = dummykv.key;
	keyy_t keyF7 = dummykv.key;
	value_t valF7 = dummykv.key;
	keyy_t keyG7 = dummykv.key;
	value_t valG7 = dummykv.key;
	keyy_t keyH7 = dummykv.key;
	value_t valH7 = dummykv.key;
	keyy_t keyI7 = dummykv.key;
	value_t valI7 = dummykv.key;
	keyy_t keyJ7 = dummykv.key;
	value_t valJ7 = dummykv.key;
	keyy_t keyK7 = dummykv.key;
	value_t valK7 = dummykv.key;
	keyy_t keyL7 = dummykv.key;
	value_t valL7 = dummykv.key;
	keyy_t keyM7 = dummykv.key;
	value_t valM7 = dummykv.key;
	
	MERGE7_LOOP1: for (buffer_type j=0; j<BLOCKRAM_SIZE; j++){
	#pragma HLS PIPELINE II=1
		keyvalue_t mykeyvalue00 = UTIL_GETKV2(vbuffer0[begincol + 0][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue01 = UTIL_GETKV2(vbuffer0[begincol + 1][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue02 = UTIL_GETKV2(vbuffer0[begincol + 2][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue03 = UTIL_GETKV2(vbuffer0[begincol + 3][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue04 = UTIL_GETKV2(vbuffer0[begincol + 4][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue05 = UTIL_GETKV2(vbuffer0[begincol + 5][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue06 = UTIL_GETKV2(vbuffer0[begincol + 6][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue07 = UTIL_GETKV2(vbuffer0[begincol + 7][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue10 = UTIL_GETKV2(vbuffer1[begincol + 0][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue11 = UTIL_GETKV2(vbuffer1[begincol + 1][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue12 = UTIL_GETKV2(vbuffer1[begincol + 2][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue13 = UTIL_GETKV2(vbuffer1[begincol + 3][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue14 = UTIL_GETKV2(vbuffer1[begincol + 4][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue15 = UTIL_GETKV2(vbuffer1[begincol + 5][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue16 = UTIL_GETKV2(vbuffer1[begincol + 6][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue17 = UTIL_GETKV2(vbuffer1[begincol + 7][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue20 = UTIL_GETKV2(vbuffer2[begincol + 0][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue21 = UTIL_GETKV2(vbuffer2[begincol + 1][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue22 = UTIL_GETKV2(vbuffer2[begincol + 2][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue23 = UTIL_GETKV2(vbuffer2[begincol + 3][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue24 = UTIL_GETKV2(vbuffer2[begincol + 4][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue25 = UTIL_GETKV2(vbuffer2[begincol + 5][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue26 = UTIL_GETKV2(vbuffer2[begincol + 6][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue27 = UTIL_GETKV2(vbuffer2[begincol + 7][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue30 = UTIL_GETKV2(vbuffer3[begincol + 0][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue31 = UTIL_GETKV2(vbuffer3[begincol + 1][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue32 = UTIL_GETKV2(vbuffer3[begincol + 2][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue33 = UTIL_GETKV2(vbuffer3[begincol + 3][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue34 = UTIL_GETKV2(vbuffer3[begincol + 4][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue35 = UTIL_GETKV2(vbuffer3[begincol + 5][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue36 = UTIL_GETKV2(vbuffer3[begincol + 6][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue37 = UTIL_GETKV2(vbuffer3[begincol + 7][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue40 = UTIL_GETKV2(vbuffer4[begincol + 0][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue41 = UTIL_GETKV2(vbuffer4[begincol + 1][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue42 = UTIL_GETKV2(vbuffer4[begincol + 2][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue43 = UTIL_GETKV2(vbuffer4[begincol + 3][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue44 = UTIL_GETKV2(vbuffer4[begincol + 4][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue45 = UTIL_GETKV2(vbuffer4[begincol + 5][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue46 = UTIL_GETKV2(vbuffer4[begincol + 6][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue47 = UTIL_GETKV2(vbuffer4[begincol + 7][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue50 = UTIL_GETKV2(vbuffer5[begincol + 0][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue51 = UTIL_GETKV2(vbuffer5[begincol + 1][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue52 = UTIL_GETKV2(vbuffer5[begincol + 2][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue53 = UTIL_GETKV2(vbuffer5[begincol + 3][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue54 = UTIL_GETKV2(vbuffer5[begincol + 4][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue55 = UTIL_GETKV2(vbuffer5[begincol + 5][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue56 = UTIL_GETKV2(vbuffer5[begincol + 6][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue57 = UTIL_GETKV2(vbuffer5[begincol + 7][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue60 = UTIL_GETKV2(vbuffer6[begincol + 0][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue61 = UTIL_GETKV2(vbuffer6[begincol + 1][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue62 = UTIL_GETKV2(vbuffer6[begincol + 2][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue63 = UTIL_GETKV2(vbuffer6[begincol + 3][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue64 = UTIL_GETKV2(vbuffer6[begincol + 4][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue65 = UTIL_GETKV2(vbuffer6[begincol + 5][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue66 = UTIL_GETKV2(vbuffer6[begincol + 6][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue67 = UTIL_GETKV2(vbuffer6[begincol + 7][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue70 = dummykv;
		keyvalue_t mykeyvalue71 = dummykv;
		keyvalue_t mykeyvalue72 = dummykv;
		keyvalue_t mykeyvalue73 = dummykv;
		keyvalue_t mykeyvalue74 = dummykv;
		keyvalue_t mykeyvalue75 = dummykv;
		keyvalue_t mykeyvalue76 = dummykv;
		keyvalue_t mykeyvalue77 = dummykv;
		keyvalue_t mykeyvalue80 = dummykv;
		keyvalue_t mykeyvalue81 = dummykv;
		keyvalue_t mykeyvalue82 = dummykv;
		keyvalue_t mykeyvalue83 = dummykv;
		keyvalue_t mykeyvalue84 = dummykv;
		keyvalue_t mykeyvalue85 = dummykv;
		keyvalue_t mykeyvalue86 = dummykv;
		keyvalue_t mykeyvalue87 = dummykv;
		keyvalue_t mykeyvalue90 = dummykv;
		keyvalue_t mykeyvalue91 = dummykv;
		keyvalue_t mykeyvalue92 = dummykv;
		keyvalue_t mykeyvalue93 = dummykv;
		keyvalue_t mykeyvalue94 = dummykv;
		keyvalue_t mykeyvalue95 = dummykv;
		keyvalue_t mykeyvalue96 = dummykv;
		keyvalue_t mykeyvalue97 = dummykv;
		keyvalue_t mykeyvalue100 = dummykv;
		keyvalue_t mykeyvalue101 = dummykv;
		keyvalue_t mykeyvalue102 = dummykv;
		keyvalue_t mykeyvalue103 = dummykv;
		keyvalue_t mykeyvalue104 = dummykv;
		keyvalue_t mykeyvalue105 = dummykv;
		keyvalue_t mykeyvalue106 = dummykv;
		keyvalue_t mykeyvalue107 = dummykv;
		keyvalue_t mykeyvalue110 = dummykv;
		keyvalue_t mykeyvalue111 = dummykv;
		keyvalue_t mykeyvalue112 = dummykv;
		keyvalue_t mykeyvalue113 = dummykv;
		keyvalue_t mykeyvalue114 = dummykv;
		keyvalue_t mykeyvalue115 = dummykv;
		keyvalue_t mykeyvalue116 = dummykv;
		keyvalue_t mykeyvalue117 = dummykv;
		keyvalue_t mykeyvalue120 = dummykv;
		keyvalue_t mykeyvalue121 = dummykv;
		keyvalue_t mykeyvalue122 = dummykv;
		keyvalue_t mykeyvalue123 = dummykv;
		keyvalue_t mykeyvalue124 = dummykv;
		keyvalue_t mykeyvalue125 = dummykv;
		keyvalue_t mykeyvalue126 = dummykv;
		keyvalue_t mykeyvalue127 = dummykv;
		keyvalue_t mykeyvalue130 = dummykv;
		keyvalue_t mykeyvalue131 = dummykv;
		keyvalue_t mykeyvalue132 = dummykv;
		keyvalue_t mykeyvalue133 = dummykv;
		keyvalue_t mykeyvalue134 = dummykv;
		keyvalue_t mykeyvalue135 = dummykv;
		keyvalue_t mykeyvalue136 = dummykv;
		keyvalue_t mykeyvalue137 = dummykv;
		keyvalue_t mykeyvalue140 = dummykv;
		keyvalue_t mykeyvalue141 = dummykv;
		keyvalue_t mykeyvalue142 = dummykv;
		keyvalue_t mykeyvalue143 = dummykv;
		keyvalue_t mykeyvalue144 = dummykv;
		keyvalue_t mykeyvalue145 = dummykv;
		keyvalue_t mykeyvalue146 = dummykv;
		keyvalue_t mykeyvalue147 = dummykv;
		
		//((n)/2)
		keyA0 = MERGE_mergefunc(mykeyvalue00.key, mykeyvalue10.key, NAp);
		keyB0 = MERGE_mergefunc(mykeyvalue20.key, mykeyvalue30.key, NAp);
		keyC0 = MERGE_mergefunc(mykeyvalue40.key, mykeyvalue50.key, NAp);
		keyD0 = MERGE_mergefunc(mykeyvalue60.key, mykeyvalue70.key, NAp);
		keyA1 = MERGE_mergefunc(mykeyvalue01.key, mykeyvalue11.key, NAp);
		keyB1 = MERGE_mergefunc(mykeyvalue21.key, mykeyvalue31.key, NAp);
		keyC1 = MERGE_mergefunc(mykeyvalue41.key, mykeyvalue51.key, NAp);
		keyD1 = MERGE_mergefunc(mykeyvalue61.key, mykeyvalue71.key, NAp);
		keyA2 = MERGE_mergefunc(mykeyvalue02.key, mykeyvalue12.key, NAp);
		keyB2 = MERGE_mergefunc(mykeyvalue22.key, mykeyvalue32.key, NAp);
		keyC2 = MERGE_mergefunc(mykeyvalue42.key, mykeyvalue52.key, NAp);
		keyD2 = MERGE_mergefunc(mykeyvalue62.key, mykeyvalue72.key, NAp);
		keyA3 = MERGE_mergefunc(mykeyvalue03.key, mykeyvalue13.key, NAp);
		keyB3 = MERGE_mergefunc(mykeyvalue23.key, mykeyvalue33.key, NAp);
		keyC3 = MERGE_mergefunc(mykeyvalue43.key, mykeyvalue53.key, NAp);
		keyD3 = MERGE_mergefunc(mykeyvalue63.key, mykeyvalue73.key, NAp);
		keyA4 = MERGE_mergefunc(mykeyvalue04.key, mykeyvalue14.key, NAp);
		keyB4 = MERGE_mergefunc(mykeyvalue24.key, mykeyvalue34.key, NAp);
		keyC4 = MERGE_mergefunc(mykeyvalue44.key, mykeyvalue54.key, NAp);
		keyD4 = MERGE_mergefunc(mykeyvalue64.key, mykeyvalue74.key, NAp);
		keyA5 = MERGE_mergefunc(mykeyvalue05.key, mykeyvalue15.key, NAp);
		keyB5 = MERGE_mergefunc(mykeyvalue25.key, mykeyvalue35.key, NAp);
		keyC5 = MERGE_mergefunc(mykeyvalue45.key, mykeyvalue55.key, NAp);
		keyD5 = MERGE_mergefunc(mykeyvalue65.key, mykeyvalue75.key, NAp);
		keyA6 = MERGE_mergefunc(mykeyvalue06.key, mykeyvalue16.key, NAp);
		keyB6 = MERGE_mergefunc(mykeyvalue26.key, mykeyvalue36.key, NAp);
		keyC6 = MERGE_mergefunc(mykeyvalue46.key, mykeyvalue56.key, NAp);
		keyD6 = MERGE_mergefunc(mykeyvalue66.key, mykeyvalue76.key, NAp);
		keyA7 = MERGE_mergefunc(mykeyvalue07.key, mykeyvalue17.key, NAp);
		keyB7 = MERGE_mergefunc(mykeyvalue27.key, mykeyvalue37.key, NAp);
		keyC7 = MERGE_mergefunc(mykeyvalue47.key, mykeyvalue57.key, NAp);
		keyD7 = MERGE_mergefunc(mykeyvalue67.key, mykeyvalue77.key, NAp);
		keyy_t keyPA0 = MERGE_mergefunc(keyA0, keyB0, NAp);
		keyy_t keyPB0 = MERGE_mergefunc(keyC0, keyD0, NAp);
		keyy_t keyPC0 = MERGE_mergefunc(keyE0, keyF0, NAp);
		keyy_t keyRA0 = MERGE_mergefunc(keyPA0, keyPB0, NAp);
		keyy_t keyRB0 = MERGE_mergefunc(keyPC0, keyF0, NAp);
		keyy_t keyRZ0 = MERGE_mergefunc(keyRA0, keyRB0, NAp);
		keyy_t keyPA1 = MERGE_mergefunc(keyA1, keyB1, NAp);
		keyy_t keyPB1 = MERGE_mergefunc(keyC1, keyD1, NAp);
		keyy_t keyPC1 = MERGE_mergefunc(keyE1, keyF1, NAp);
		keyy_t keyRA1 = MERGE_mergefunc(keyPA1, keyPB1, NAp);
		keyy_t keyRB1 = MERGE_mergefunc(keyPC1, keyF1, NAp);
		keyy_t keyRZ1 = MERGE_mergefunc(keyRA1, keyRB1, NAp);
		keyy_t keyPA2 = MERGE_mergefunc(keyA2, keyB2, NAp);
		keyy_t keyPB2 = MERGE_mergefunc(keyC2, keyD2, NAp);
		keyy_t keyPC2 = MERGE_mergefunc(keyE2, keyF2, NAp);
		keyy_t keyRA2 = MERGE_mergefunc(keyPA2, keyPB2, NAp);
		keyy_t keyRB2 = MERGE_mergefunc(keyPC2, keyF2, NAp);
		keyy_t keyRZ2 = MERGE_mergefunc(keyRA2, keyRB2, NAp);
		keyy_t keyPA3 = MERGE_mergefunc(keyA3, keyB3, NAp);
		keyy_t keyPB3 = MERGE_mergefunc(keyC3, keyD3, NAp);
		keyy_t keyPC3 = MERGE_mergefunc(keyE3, keyF3, NAp);
		keyy_t keyRA3 = MERGE_mergefunc(keyPA3, keyPB3, NAp);
		keyy_t keyRB3 = MERGE_mergefunc(keyPC3, keyF3, NAp);
		keyy_t keyRZ3 = MERGE_mergefunc(keyRA3, keyRB3, NAp);
		keyy_t keyPA4 = MERGE_mergefunc(keyA4, keyB4, NAp);
		keyy_t keyPB4 = MERGE_mergefunc(keyC4, keyD4, NAp);
		keyy_t keyPC4 = MERGE_mergefunc(keyE4, keyF4, NAp);
		keyy_t keyRA4 = MERGE_mergefunc(keyPA4, keyPB4, NAp);
		keyy_t keyRB4 = MERGE_mergefunc(keyPC4, keyF4, NAp);
		keyy_t keyRZ4 = MERGE_mergefunc(keyRA4, keyRB4, NAp);
		keyy_t keyPA5 = MERGE_mergefunc(keyA5, keyB5, NAp);
		keyy_t keyPB5 = MERGE_mergefunc(keyC5, keyD5, NAp);
		keyy_t keyPC5 = MERGE_mergefunc(keyE5, keyF5, NAp);
		keyy_t keyRA5 = MERGE_mergefunc(keyPA5, keyPB5, NAp);
		keyy_t keyRB5 = MERGE_mergefunc(keyPC5, keyF5, NAp);
		keyy_t keyRZ5 = MERGE_mergefunc(keyRA5, keyRB5, NAp);
		keyy_t keyPA6 = MERGE_mergefunc(keyA6, keyB6, NAp);
		keyy_t keyPB6 = MERGE_mergefunc(keyC6, keyD6, NAp);
		keyy_t keyPC6 = MERGE_mergefunc(keyE6, keyF6, NAp);
		keyy_t keyRA6 = MERGE_mergefunc(keyPA6, keyPB6, NAp);
		keyy_t keyRB6 = MERGE_mergefunc(keyPC6, keyF6, NAp);
		keyy_t keyRZ6 = MERGE_mergefunc(keyRA6, keyRB6, NAp);
		keyy_t keyPA7 = MERGE_mergefunc(keyA7, keyB7, NAp);
		keyy_t keyPB7 = MERGE_mergefunc(keyC7, keyD7, NAp);
		keyy_t keyPC7 = MERGE_mergefunc(keyE7, keyF7, NAp);
		keyy_t keyRA7 = MERGE_mergefunc(keyPA7, keyPB7, NAp);
		keyy_t keyRB7 = MERGE_mergefunc(keyPC7, keyF7, NAp);
		keyy_t keyRZ7 = MERGE_mergefunc(keyRA7, keyRB7, NAp);
		
		//((n)/2)
		valA0 = MERGE_mergefunc(mykeyvalue00.value, mykeyvalue10.value, NAp);
		valB0 = MERGE_mergefunc(mykeyvalue20.value, mykeyvalue30.value, NAp);
		valC0 = MERGE_mergefunc(mykeyvalue40.value, mykeyvalue50.value, NAp);
		valD0 = MERGE_mergefunc(mykeyvalue60.value, mykeyvalue70.value, NAp);
		valA1 = MERGE_mergefunc(mykeyvalue01.value, mykeyvalue11.value, NAp);
		valB1 = MERGE_mergefunc(mykeyvalue21.value, mykeyvalue31.value, NAp);
		valC1 = MERGE_mergefunc(mykeyvalue41.value, mykeyvalue51.value, NAp);
		valD1 = MERGE_mergefunc(mykeyvalue61.value, mykeyvalue71.value, NAp);
		valA2 = MERGE_mergefunc(mykeyvalue02.value, mykeyvalue12.value, NAp);
		valB2 = MERGE_mergefunc(mykeyvalue22.value, mykeyvalue32.value, NAp);
		valC2 = MERGE_mergefunc(mykeyvalue42.value, mykeyvalue52.value, NAp);
		valD2 = MERGE_mergefunc(mykeyvalue62.value, mykeyvalue72.value, NAp);
		valA3 = MERGE_mergefunc(mykeyvalue03.value, mykeyvalue13.value, NAp);
		valB3 = MERGE_mergefunc(mykeyvalue23.value, mykeyvalue33.value, NAp);
		valC3 = MERGE_mergefunc(mykeyvalue43.value, mykeyvalue53.value, NAp);
		valD3 = MERGE_mergefunc(mykeyvalue63.value, mykeyvalue73.value, NAp);
		valA4 = MERGE_mergefunc(mykeyvalue04.value, mykeyvalue14.value, NAp);
		valB4 = MERGE_mergefunc(mykeyvalue24.value, mykeyvalue34.value, NAp);
		valC4 = MERGE_mergefunc(mykeyvalue44.value, mykeyvalue54.value, NAp);
		valD4 = MERGE_mergefunc(mykeyvalue64.value, mykeyvalue74.value, NAp);
		valA5 = MERGE_mergefunc(mykeyvalue05.value, mykeyvalue15.value, NAp);
		valB5 = MERGE_mergefunc(mykeyvalue25.value, mykeyvalue35.value, NAp);
		valC5 = MERGE_mergefunc(mykeyvalue45.value, mykeyvalue55.value, NAp);
		valD5 = MERGE_mergefunc(mykeyvalue65.value, mykeyvalue75.value, NAp);
		valA6 = MERGE_mergefunc(mykeyvalue06.value, mykeyvalue16.value, NAp);
		valB6 = MERGE_mergefunc(mykeyvalue26.value, mykeyvalue36.value, NAp);
		valC6 = MERGE_mergefunc(mykeyvalue46.value, mykeyvalue56.value, NAp);
		valD6 = MERGE_mergefunc(mykeyvalue66.value, mykeyvalue76.value, NAp);
		valA7 = MERGE_mergefunc(mykeyvalue07.value, mykeyvalue17.value, NAp);
		valB7 = MERGE_mergefunc(mykeyvalue27.value, mykeyvalue37.value, NAp);
		valC7 = MERGE_mergefunc(mykeyvalue47.value, mykeyvalue57.value, NAp);
		valD7 = MERGE_mergefunc(mykeyvalue67.value, mykeyvalue77.value, NAp);
		value_t valPA0 = MERGE_mergefunc(valA0, valB0, NAp);
		value_t valPB0 = MERGE_mergefunc(valC0, valD0, NAp);
		value_t valPC0 = MERGE_mergefunc(valE0, valF0, NAp);
		value_t valRA0 = MERGE_mergefunc(valPA0, valPB0, NAp);
		value_t valRB0 = MERGE_mergefunc(valPC0, valF0, NAp);
		value_t valRZ0 = MERGE_mergefunc(valRA0, valRB0, NAp);
		value_t valPA1 = MERGE_mergefunc(valA1, valB1, NAp);
		value_t valPB1 = MERGE_mergefunc(valC1, valD1, NAp);
		value_t valPC1 = MERGE_mergefunc(valE1, valF1, NAp);
		value_t valRA1 = MERGE_mergefunc(valPA1, valPB1, NAp);
		value_t valRB1 = MERGE_mergefunc(valPC1, valF1, NAp);
		value_t valRZ1 = MERGE_mergefunc(valRA1, valRB1, NAp);
		value_t valPA2 = MERGE_mergefunc(valA2, valB2, NAp);
		value_t valPB2 = MERGE_mergefunc(valC2, valD2, NAp);
		value_t valPC2 = MERGE_mergefunc(valE2, valF2, NAp);
		value_t valRA2 = MERGE_mergefunc(valPA2, valPB2, NAp);
		value_t valRB2 = MERGE_mergefunc(valPC2, valF2, NAp);
		value_t valRZ2 = MERGE_mergefunc(valRA2, valRB2, NAp);
		value_t valPA3 = MERGE_mergefunc(valA3, valB3, NAp);
		value_t valPB3 = MERGE_mergefunc(valC3, valD3, NAp);
		value_t valPC3 = MERGE_mergefunc(valE3, valF3, NAp);
		value_t valRA3 = MERGE_mergefunc(valPA3, valPB3, NAp);
		value_t valRB3 = MERGE_mergefunc(valPC3, valF3, NAp);
		value_t valRZ3 = MERGE_mergefunc(valRA3, valRB3, NAp);
		value_t valPA4 = MERGE_mergefunc(valA4, valB4, NAp);
		value_t valPB4 = MERGE_mergefunc(valC4, valD4, NAp);
		value_t valPC4 = MERGE_mergefunc(valE4, valF4, NAp);
		value_t valRA4 = MERGE_mergefunc(valPA4, valPB4, NAp);
		value_t valRB4 = MERGE_mergefunc(valPC4, valF4, NAp);
		value_t valRZ4 = MERGE_mergefunc(valRA4, valRB4, NAp);
		value_t valPA5 = MERGE_mergefunc(valA5, valB5, NAp);
		value_t valPB5 = MERGE_mergefunc(valC5, valD5, NAp);
		value_t valPC5 = MERGE_mergefunc(valE5, valF5, NAp);
		value_t valRA5 = MERGE_mergefunc(valPA5, valPB5, NAp);
		value_t valRB5 = MERGE_mergefunc(valPC5, valF5, NAp);
		value_t valRZ5 = MERGE_mergefunc(valRA5, valRB5, NAp);
		value_t valPA6 = MERGE_mergefunc(valA6, valB6, NAp);
		value_t valPB6 = MERGE_mergefunc(valC6, valD6, NAp);
		value_t valPC6 = MERGE_mergefunc(valE6, valF6, NAp);
		value_t valRA6 = MERGE_mergefunc(valPA6, valPB6, NAp);
		value_t valRB6 = MERGE_mergefunc(valPC6, valF6, NAp);
		value_t valRZ6 = MERGE_mergefunc(valRA6, valRB6, NAp);
		value_t valPA7 = MERGE_mergefunc(valA7, valB7, NAp);
		value_t valPB7 = MERGE_mergefunc(valC7, valD7, NAp);
		value_t valPC7 = MERGE_mergefunc(valE7, valF7, NAp);
		value_t valRA7 = MERGE_mergefunc(valPA7, valPB7, NAp);
		value_t valRB7 = MERGE_mergefunc(valPC7, valF7, NAp);
		value_t valRZ7 = MERGE_mergefunc(valRA7, valRB7, NAp);
		
		#ifdef _WIDEWORD
		vdram[dramoffset_kvs + j].range(31, 0) = keyRZ0;
		vdram[dramoffset_kvs + j].range(63, 32) = valRZ0;
		vdram[dramoffset_kvs + j].range(95, 64) = keyRZ1;
		vdram[dramoffset_kvs + j].range(127, 96) = valRZ1;
		vdram[dramoffset_kvs + j].range(159, 128) = keyRZ2;
		vdram[dramoffset_kvs + j].range(191, 160) = valRZ2;
		vdram[dramoffset_kvs + j].range(223, 192) = keyRZ3;
		vdram[dramoffset_kvs + j].range(255, 224) = valRZ3;
		vdram[dramoffset_kvs + j].range(287, 256) = keyRZ4;
		vdram[dramoffset_kvs + j].range(319, 288) = valRZ4;
		vdram[dramoffset_kvs + j].range(351, 320) = keyRZ5;
		vdram[dramoffset_kvs + j].range(383, 352) = valRZ5;
		vdram[dramoffset_kvs + j].range(415, 384) = keyRZ6;
		vdram[dramoffset_kvs + j].range(447, 416) = valRZ6;
		vdram[dramoffset_kvs + j].range(479, 448) = keyRZ7;
		vdram[dramoffset_kvs + j].range(511, 480) = valRZ7;
		#else
		vdram[dramoffset_kvs + j].data[0].key = keyRZ0;
		vdram[dramoffset_kvs + j].data[0].value = valRZ0;
		vdram[dramoffset_kvs + j].data[1].key = keyRZ1;
		vdram[dramoffset_kvs + j].data[1].value = valRZ1;
		vdram[dramoffset_kvs + j].data[2].key = keyRZ2;
		vdram[dramoffset_kvs + j].data[2].value = valRZ2;
		vdram[dramoffset_kvs + j].data[3].key = keyRZ3;
		vdram[dramoffset_kvs + j].data[3].value = valRZ3;
		vdram[dramoffset_kvs + j].data[4].key = keyRZ4;
		vdram[dramoffset_kvs + j].data[4].value = valRZ4;
		vdram[dramoffset_kvs + j].data[5].key = keyRZ5;
		vdram[dramoffset_kvs + j].data[5].value = valRZ5;
		vdram[dramoffset_kvs + j].data[6].key = keyRZ6;
		vdram[dramoffset_kvs + j].data[6].value = valRZ6;
		vdram[dramoffset_kvs + j].data[7].key = keyRZ7;
		vdram[dramoffset_kvs + j].data[7].value = valRZ7;
		#endif
	}
	return;
}
void acts_all::MERGE_merge8andsavevdata(bool_type enable, uint512_dt * vdram, keyvalue_vbuffer_t vbuffer0[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t vbuffer1[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t vbuffer2[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t vbuffer3[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t vbuffer4[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t vbuffer5[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t vbuffer6[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t vbuffer7[VDATA_PACKINGSIZE][BLOCKRAM_SIZE], unsigned int begincol, batch_type bufferoffset_kvs, unsigned int dramoffset_kvs){
	if(enable == OFF){ return; }
	keyvalue_t dummykv;
	dummykv.key = 0xFFFFFFFF; dummykv.value = 0xFFFFFFFF;
	
	keyy_t keyA0 = dummykv.key;
	value_t valA0 = dummykv.key;
	keyy_t keyB0 = dummykv.key;
	value_t valB0 = dummykv.key;
	keyy_t keyC0 = dummykv.key;
	value_t valC0 = dummykv.key;
	keyy_t keyD0 = dummykv.key;
	value_t valD0 = dummykv.key;
	keyy_t keyE0 = dummykv.key;
	value_t valE0 = dummykv.key;
	keyy_t keyF0 = dummykv.key;
	value_t valF0 = dummykv.key;
	keyy_t keyG0 = dummykv.key;
	value_t valG0 = dummykv.key;
	keyy_t keyH0 = dummykv.key;
	value_t valH0 = dummykv.key;
	keyy_t keyI0 = dummykv.key;
	value_t valI0 = dummykv.key;
	keyy_t keyJ0 = dummykv.key;
	value_t valJ0 = dummykv.key;
	keyy_t keyK0 = dummykv.key;
	value_t valK0 = dummykv.key;
	keyy_t keyL0 = dummykv.key;
	value_t valL0 = dummykv.key;
	keyy_t keyM0 = dummykv.key;
	value_t valM0 = dummykv.key;
	keyy_t keyA1 = dummykv.key;
	value_t valA1 = dummykv.key;
	keyy_t keyB1 = dummykv.key;
	value_t valB1 = dummykv.key;
	keyy_t keyC1 = dummykv.key;
	value_t valC1 = dummykv.key;
	keyy_t keyD1 = dummykv.key;
	value_t valD1 = dummykv.key;
	keyy_t keyE1 = dummykv.key;
	value_t valE1 = dummykv.key;
	keyy_t keyF1 = dummykv.key;
	value_t valF1 = dummykv.key;
	keyy_t keyG1 = dummykv.key;
	value_t valG1 = dummykv.key;
	keyy_t keyH1 = dummykv.key;
	value_t valH1 = dummykv.key;
	keyy_t keyI1 = dummykv.key;
	value_t valI1 = dummykv.key;
	keyy_t keyJ1 = dummykv.key;
	value_t valJ1 = dummykv.key;
	keyy_t keyK1 = dummykv.key;
	value_t valK1 = dummykv.key;
	keyy_t keyL1 = dummykv.key;
	value_t valL1 = dummykv.key;
	keyy_t keyM1 = dummykv.key;
	value_t valM1 = dummykv.key;
	keyy_t keyA2 = dummykv.key;
	value_t valA2 = dummykv.key;
	keyy_t keyB2 = dummykv.key;
	value_t valB2 = dummykv.key;
	keyy_t keyC2 = dummykv.key;
	value_t valC2 = dummykv.key;
	keyy_t keyD2 = dummykv.key;
	value_t valD2 = dummykv.key;
	keyy_t keyE2 = dummykv.key;
	value_t valE2 = dummykv.key;
	keyy_t keyF2 = dummykv.key;
	value_t valF2 = dummykv.key;
	keyy_t keyG2 = dummykv.key;
	value_t valG2 = dummykv.key;
	keyy_t keyH2 = dummykv.key;
	value_t valH2 = dummykv.key;
	keyy_t keyI2 = dummykv.key;
	value_t valI2 = dummykv.key;
	keyy_t keyJ2 = dummykv.key;
	value_t valJ2 = dummykv.key;
	keyy_t keyK2 = dummykv.key;
	value_t valK2 = dummykv.key;
	keyy_t keyL2 = dummykv.key;
	value_t valL2 = dummykv.key;
	keyy_t keyM2 = dummykv.key;
	value_t valM2 = dummykv.key;
	keyy_t keyA3 = dummykv.key;
	value_t valA3 = dummykv.key;
	keyy_t keyB3 = dummykv.key;
	value_t valB3 = dummykv.key;
	keyy_t keyC3 = dummykv.key;
	value_t valC3 = dummykv.key;
	keyy_t keyD3 = dummykv.key;
	value_t valD3 = dummykv.key;
	keyy_t keyE3 = dummykv.key;
	value_t valE3 = dummykv.key;
	keyy_t keyF3 = dummykv.key;
	value_t valF3 = dummykv.key;
	keyy_t keyG3 = dummykv.key;
	value_t valG3 = dummykv.key;
	keyy_t keyH3 = dummykv.key;
	value_t valH3 = dummykv.key;
	keyy_t keyI3 = dummykv.key;
	value_t valI3 = dummykv.key;
	keyy_t keyJ3 = dummykv.key;
	value_t valJ3 = dummykv.key;
	keyy_t keyK3 = dummykv.key;
	value_t valK3 = dummykv.key;
	keyy_t keyL3 = dummykv.key;
	value_t valL3 = dummykv.key;
	keyy_t keyM3 = dummykv.key;
	value_t valM3 = dummykv.key;
	keyy_t keyA4 = dummykv.key;
	value_t valA4 = dummykv.key;
	keyy_t keyB4 = dummykv.key;
	value_t valB4 = dummykv.key;
	keyy_t keyC4 = dummykv.key;
	value_t valC4 = dummykv.key;
	keyy_t keyD4 = dummykv.key;
	value_t valD4 = dummykv.key;
	keyy_t keyE4 = dummykv.key;
	value_t valE4 = dummykv.key;
	keyy_t keyF4 = dummykv.key;
	value_t valF4 = dummykv.key;
	keyy_t keyG4 = dummykv.key;
	value_t valG4 = dummykv.key;
	keyy_t keyH4 = dummykv.key;
	value_t valH4 = dummykv.key;
	keyy_t keyI4 = dummykv.key;
	value_t valI4 = dummykv.key;
	keyy_t keyJ4 = dummykv.key;
	value_t valJ4 = dummykv.key;
	keyy_t keyK4 = dummykv.key;
	value_t valK4 = dummykv.key;
	keyy_t keyL4 = dummykv.key;
	value_t valL4 = dummykv.key;
	keyy_t keyM4 = dummykv.key;
	value_t valM4 = dummykv.key;
	keyy_t keyA5 = dummykv.key;
	value_t valA5 = dummykv.key;
	keyy_t keyB5 = dummykv.key;
	value_t valB5 = dummykv.key;
	keyy_t keyC5 = dummykv.key;
	value_t valC5 = dummykv.key;
	keyy_t keyD5 = dummykv.key;
	value_t valD5 = dummykv.key;
	keyy_t keyE5 = dummykv.key;
	value_t valE5 = dummykv.key;
	keyy_t keyF5 = dummykv.key;
	value_t valF5 = dummykv.key;
	keyy_t keyG5 = dummykv.key;
	value_t valG5 = dummykv.key;
	keyy_t keyH5 = dummykv.key;
	value_t valH5 = dummykv.key;
	keyy_t keyI5 = dummykv.key;
	value_t valI5 = dummykv.key;
	keyy_t keyJ5 = dummykv.key;
	value_t valJ5 = dummykv.key;
	keyy_t keyK5 = dummykv.key;
	value_t valK5 = dummykv.key;
	keyy_t keyL5 = dummykv.key;
	value_t valL5 = dummykv.key;
	keyy_t keyM5 = dummykv.key;
	value_t valM5 = dummykv.key;
	keyy_t keyA6 = dummykv.key;
	value_t valA6 = dummykv.key;
	keyy_t keyB6 = dummykv.key;
	value_t valB6 = dummykv.key;
	keyy_t keyC6 = dummykv.key;
	value_t valC6 = dummykv.key;
	keyy_t keyD6 = dummykv.key;
	value_t valD6 = dummykv.key;
	keyy_t keyE6 = dummykv.key;
	value_t valE6 = dummykv.key;
	keyy_t keyF6 = dummykv.key;
	value_t valF6 = dummykv.key;
	keyy_t keyG6 = dummykv.key;
	value_t valG6 = dummykv.key;
	keyy_t keyH6 = dummykv.key;
	value_t valH6 = dummykv.key;
	keyy_t keyI6 = dummykv.key;
	value_t valI6 = dummykv.key;
	keyy_t keyJ6 = dummykv.key;
	value_t valJ6 = dummykv.key;
	keyy_t keyK6 = dummykv.key;
	value_t valK6 = dummykv.key;
	keyy_t keyL6 = dummykv.key;
	value_t valL6 = dummykv.key;
	keyy_t keyM6 = dummykv.key;
	value_t valM6 = dummykv.key;
	keyy_t keyA7 = dummykv.key;
	value_t valA7 = dummykv.key;
	keyy_t keyB7 = dummykv.key;
	value_t valB7 = dummykv.key;
	keyy_t keyC7 = dummykv.key;
	value_t valC7 = dummykv.key;
	keyy_t keyD7 = dummykv.key;
	value_t valD7 = dummykv.key;
	keyy_t keyE7 = dummykv.key;
	value_t valE7 = dummykv.key;
	keyy_t keyF7 = dummykv.key;
	value_t valF7 = dummykv.key;
	keyy_t keyG7 = dummykv.key;
	value_t valG7 = dummykv.key;
	keyy_t keyH7 = dummykv.key;
	value_t valH7 = dummykv.key;
	keyy_t keyI7 = dummykv.key;
	value_t valI7 = dummykv.key;
	keyy_t keyJ7 = dummykv.key;
	value_t valJ7 = dummykv.key;
	keyy_t keyK7 = dummykv.key;
	value_t valK7 = dummykv.key;
	keyy_t keyL7 = dummykv.key;
	value_t valL7 = dummykv.key;
	keyy_t keyM7 = dummykv.key;
	value_t valM7 = dummykv.key;
	
	MERGE8_LOOP1: for (buffer_type j=0; j<BLOCKRAM_SIZE; j++){
	#pragma HLS PIPELINE II=1
		keyvalue_t mykeyvalue00 = UTIL_GETKV2(vbuffer0[begincol + 0][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue01 = UTIL_GETKV2(vbuffer0[begincol + 1][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue02 = UTIL_GETKV2(vbuffer0[begincol + 2][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue03 = UTIL_GETKV2(vbuffer0[begincol + 3][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue04 = UTIL_GETKV2(vbuffer0[begincol + 4][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue05 = UTIL_GETKV2(vbuffer0[begincol + 5][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue06 = UTIL_GETKV2(vbuffer0[begincol + 6][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue07 = UTIL_GETKV2(vbuffer0[begincol + 7][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue10 = UTIL_GETKV2(vbuffer1[begincol + 0][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue11 = UTIL_GETKV2(vbuffer1[begincol + 1][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue12 = UTIL_GETKV2(vbuffer1[begincol + 2][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue13 = UTIL_GETKV2(vbuffer1[begincol + 3][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue14 = UTIL_GETKV2(vbuffer1[begincol + 4][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue15 = UTIL_GETKV2(vbuffer1[begincol + 5][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue16 = UTIL_GETKV2(vbuffer1[begincol + 6][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue17 = UTIL_GETKV2(vbuffer1[begincol + 7][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue20 = UTIL_GETKV2(vbuffer2[begincol + 0][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue21 = UTIL_GETKV2(vbuffer2[begincol + 1][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue22 = UTIL_GETKV2(vbuffer2[begincol + 2][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue23 = UTIL_GETKV2(vbuffer2[begincol + 3][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue24 = UTIL_GETKV2(vbuffer2[begincol + 4][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue25 = UTIL_GETKV2(vbuffer2[begincol + 5][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue26 = UTIL_GETKV2(vbuffer2[begincol + 6][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue27 = UTIL_GETKV2(vbuffer2[begincol + 7][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue30 = UTIL_GETKV2(vbuffer3[begincol + 0][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue31 = UTIL_GETKV2(vbuffer3[begincol + 1][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue32 = UTIL_GETKV2(vbuffer3[begincol + 2][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue33 = UTIL_GETKV2(vbuffer3[begincol + 3][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue34 = UTIL_GETKV2(vbuffer3[begincol + 4][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue35 = UTIL_GETKV2(vbuffer3[begincol + 5][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue36 = UTIL_GETKV2(vbuffer3[begincol + 6][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue37 = UTIL_GETKV2(vbuffer3[begincol + 7][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue40 = UTIL_GETKV2(vbuffer4[begincol + 0][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue41 = UTIL_GETKV2(vbuffer4[begincol + 1][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue42 = UTIL_GETKV2(vbuffer4[begincol + 2][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue43 = UTIL_GETKV2(vbuffer4[begincol + 3][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue44 = UTIL_GETKV2(vbuffer4[begincol + 4][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue45 = UTIL_GETKV2(vbuffer4[begincol + 5][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue46 = UTIL_GETKV2(vbuffer4[begincol + 6][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue47 = UTIL_GETKV2(vbuffer4[begincol + 7][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue50 = UTIL_GETKV2(vbuffer5[begincol + 0][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue51 = UTIL_GETKV2(vbuffer5[begincol + 1][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue52 = UTIL_GETKV2(vbuffer5[begincol + 2][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue53 = UTIL_GETKV2(vbuffer5[begincol + 3][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue54 = UTIL_GETKV2(vbuffer5[begincol + 4][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue55 = UTIL_GETKV2(vbuffer5[begincol + 5][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue56 = UTIL_GETKV2(vbuffer5[begincol + 6][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue57 = UTIL_GETKV2(vbuffer5[begincol + 7][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue60 = UTIL_GETKV2(vbuffer6[begincol + 0][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue61 = UTIL_GETKV2(vbuffer6[begincol + 1][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue62 = UTIL_GETKV2(vbuffer6[begincol + 2][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue63 = UTIL_GETKV2(vbuffer6[begincol + 3][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue64 = UTIL_GETKV2(vbuffer6[begincol + 4][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue65 = UTIL_GETKV2(vbuffer6[begincol + 5][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue66 = UTIL_GETKV2(vbuffer6[begincol + 6][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue67 = UTIL_GETKV2(vbuffer6[begincol + 7][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue70 = UTIL_GETKV2(vbuffer7[begincol + 0][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue71 = UTIL_GETKV2(vbuffer7[begincol + 1][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue72 = UTIL_GETKV2(vbuffer7[begincol + 2][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue73 = UTIL_GETKV2(vbuffer7[begincol + 3][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue74 = UTIL_GETKV2(vbuffer7[begincol + 4][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue75 = UTIL_GETKV2(vbuffer7[begincol + 5][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue76 = UTIL_GETKV2(vbuffer7[begincol + 6][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue77 = UTIL_GETKV2(vbuffer7[begincol + 7][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue80 = dummykv;
		keyvalue_t mykeyvalue81 = dummykv;
		keyvalue_t mykeyvalue82 = dummykv;
		keyvalue_t mykeyvalue83 = dummykv;
		keyvalue_t mykeyvalue84 = dummykv;
		keyvalue_t mykeyvalue85 = dummykv;
		keyvalue_t mykeyvalue86 = dummykv;
		keyvalue_t mykeyvalue87 = dummykv;
		keyvalue_t mykeyvalue90 = dummykv;
		keyvalue_t mykeyvalue91 = dummykv;
		keyvalue_t mykeyvalue92 = dummykv;
		keyvalue_t mykeyvalue93 = dummykv;
		keyvalue_t mykeyvalue94 = dummykv;
		keyvalue_t mykeyvalue95 = dummykv;
		keyvalue_t mykeyvalue96 = dummykv;
		keyvalue_t mykeyvalue97 = dummykv;
		keyvalue_t mykeyvalue100 = dummykv;
		keyvalue_t mykeyvalue101 = dummykv;
		keyvalue_t mykeyvalue102 = dummykv;
		keyvalue_t mykeyvalue103 = dummykv;
		keyvalue_t mykeyvalue104 = dummykv;
		keyvalue_t mykeyvalue105 = dummykv;
		keyvalue_t mykeyvalue106 = dummykv;
		keyvalue_t mykeyvalue107 = dummykv;
		keyvalue_t mykeyvalue110 = dummykv;
		keyvalue_t mykeyvalue111 = dummykv;
		keyvalue_t mykeyvalue112 = dummykv;
		keyvalue_t mykeyvalue113 = dummykv;
		keyvalue_t mykeyvalue114 = dummykv;
		keyvalue_t mykeyvalue115 = dummykv;
		keyvalue_t mykeyvalue116 = dummykv;
		keyvalue_t mykeyvalue117 = dummykv;
		keyvalue_t mykeyvalue120 = dummykv;
		keyvalue_t mykeyvalue121 = dummykv;
		keyvalue_t mykeyvalue122 = dummykv;
		keyvalue_t mykeyvalue123 = dummykv;
		keyvalue_t mykeyvalue124 = dummykv;
		keyvalue_t mykeyvalue125 = dummykv;
		keyvalue_t mykeyvalue126 = dummykv;
		keyvalue_t mykeyvalue127 = dummykv;
		keyvalue_t mykeyvalue130 = dummykv;
		keyvalue_t mykeyvalue131 = dummykv;
		keyvalue_t mykeyvalue132 = dummykv;
		keyvalue_t mykeyvalue133 = dummykv;
		keyvalue_t mykeyvalue134 = dummykv;
		keyvalue_t mykeyvalue135 = dummykv;
		keyvalue_t mykeyvalue136 = dummykv;
		keyvalue_t mykeyvalue137 = dummykv;
		keyvalue_t mykeyvalue140 = dummykv;
		keyvalue_t mykeyvalue141 = dummykv;
		keyvalue_t mykeyvalue142 = dummykv;
		keyvalue_t mykeyvalue143 = dummykv;
		keyvalue_t mykeyvalue144 = dummykv;
		keyvalue_t mykeyvalue145 = dummykv;
		keyvalue_t mykeyvalue146 = dummykv;
		keyvalue_t mykeyvalue147 = dummykv;
		
		//((n)/2)
		keyA0 = MERGE_mergefunc(mykeyvalue00.key, mykeyvalue10.key, NAp);
		keyB0 = MERGE_mergefunc(mykeyvalue20.key, mykeyvalue30.key, NAp);
		keyC0 = MERGE_mergefunc(mykeyvalue40.key, mykeyvalue50.key, NAp);
		keyD0 = MERGE_mergefunc(mykeyvalue60.key, mykeyvalue70.key, NAp);
		keyE0 = MERGE_mergefunc(mykeyvalue80.key, mykeyvalue90.key, NAp);
		keyA1 = MERGE_mergefunc(mykeyvalue01.key, mykeyvalue11.key, NAp);
		keyB1 = MERGE_mergefunc(mykeyvalue21.key, mykeyvalue31.key, NAp);
		keyC1 = MERGE_mergefunc(mykeyvalue41.key, mykeyvalue51.key, NAp);
		keyD1 = MERGE_mergefunc(mykeyvalue61.key, mykeyvalue71.key, NAp);
		keyE1 = MERGE_mergefunc(mykeyvalue81.key, mykeyvalue91.key, NAp);
		keyA2 = MERGE_mergefunc(mykeyvalue02.key, mykeyvalue12.key, NAp);
		keyB2 = MERGE_mergefunc(mykeyvalue22.key, mykeyvalue32.key, NAp);
		keyC2 = MERGE_mergefunc(mykeyvalue42.key, mykeyvalue52.key, NAp);
		keyD2 = MERGE_mergefunc(mykeyvalue62.key, mykeyvalue72.key, NAp);
		keyE2 = MERGE_mergefunc(mykeyvalue82.key, mykeyvalue92.key, NAp);
		keyA3 = MERGE_mergefunc(mykeyvalue03.key, mykeyvalue13.key, NAp);
		keyB3 = MERGE_mergefunc(mykeyvalue23.key, mykeyvalue33.key, NAp);
		keyC3 = MERGE_mergefunc(mykeyvalue43.key, mykeyvalue53.key, NAp);
		keyD3 = MERGE_mergefunc(mykeyvalue63.key, mykeyvalue73.key, NAp);
		keyE3 = MERGE_mergefunc(mykeyvalue83.key, mykeyvalue93.key, NAp);
		keyA4 = MERGE_mergefunc(mykeyvalue04.key, mykeyvalue14.key, NAp);
		keyB4 = MERGE_mergefunc(mykeyvalue24.key, mykeyvalue34.key, NAp);
		keyC4 = MERGE_mergefunc(mykeyvalue44.key, mykeyvalue54.key, NAp);
		keyD4 = MERGE_mergefunc(mykeyvalue64.key, mykeyvalue74.key, NAp);
		keyE4 = MERGE_mergefunc(mykeyvalue84.key, mykeyvalue94.key, NAp);
		keyA5 = MERGE_mergefunc(mykeyvalue05.key, mykeyvalue15.key, NAp);
		keyB5 = MERGE_mergefunc(mykeyvalue25.key, mykeyvalue35.key, NAp);
		keyC5 = MERGE_mergefunc(mykeyvalue45.key, mykeyvalue55.key, NAp);
		keyD5 = MERGE_mergefunc(mykeyvalue65.key, mykeyvalue75.key, NAp);
		keyE5 = MERGE_mergefunc(mykeyvalue85.key, mykeyvalue95.key, NAp);
		keyA6 = MERGE_mergefunc(mykeyvalue06.key, mykeyvalue16.key, NAp);
		keyB6 = MERGE_mergefunc(mykeyvalue26.key, mykeyvalue36.key, NAp);
		keyC6 = MERGE_mergefunc(mykeyvalue46.key, mykeyvalue56.key, NAp);
		keyD6 = MERGE_mergefunc(mykeyvalue66.key, mykeyvalue76.key, NAp);
		keyE6 = MERGE_mergefunc(mykeyvalue86.key, mykeyvalue96.key, NAp);
		keyA7 = MERGE_mergefunc(mykeyvalue07.key, mykeyvalue17.key, NAp);
		keyB7 = MERGE_mergefunc(mykeyvalue27.key, mykeyvalue37.key, NAp);
		keyC7 = MERGE_mergefunc(mykeyvalue47.key, mykeyvalue57.key, NAp);
		keyD7 = MERGE_mergefunc(mykeyvalue67.key, mykeyvalue77.key, NAp);
		keyE7 = MERGE_mergefunc(mykeyvalue87.key, mykeyvalue97.key, NAp);
		keyy_t keyPA0 = MERGE_mergefunc(keyA0, keyB0, NAp);
		keyy_t keyPB0 = MERGE_mergefunc(keyC0, keyD0, NAp);
		keyy_t keyPC0 = MERGE_mergefunc(keyE0, keyF0, NAp);
		keyy_t keyRA0 = MERGE_mergefunc(keyPA0, keyPB0, NAp);
		keyy_t keyRB0 = MERGE_mergefunc(keyPC0, keyF0, NAp);
		keyy_t keyRZ0 = MERGE_mergefunc(keyRA0, keyRB0, NAp);
		keyy_t keyPA1 = MERGE_mergefunc(keyA1, keyB1, NAp);
		keyy_t keyPB1 = MERGE_mergefunc(keyC1, keyD1, NAp);
		keyy_t keyPC1 = MERGE_mergefunc(keyE1, keyF1, NAp);
		keyy_t keyRA1 = MERGE_mergefunc(keyPA1, keyPB1, NAp);
		keyy_t keyRB1 = MERGE_mergefunc(keyPC1, keyF1, NAp);
		keyy_t keyRZ1 = MERGE_mergefunc(keyRA1, keyRB1, NAp);
		keyy_t keyPA2 = MERGE_mergefunc(keyA2, keyB2, NAp);
		keyy_t keyPB2 = MERGE_mergefunc(keyC2, keyD2, NAp);
		keyy_t keyPC2 = MERGE_mergefunc(keyE2, keyF2, NAp);
		keyy_t keyRA2 = MERGE_mergefunc(keyPA2, keyPB2, NAp);
		keyy_t keyRB2 = MERGE_mergefunc(keyPC2, keyF2, NAp);
		keyy_t keyRZ2 = MERGE_mergefunc(keyRA2, keyRB2, NAp);
		keyy_t keyPA3 = MERGE_mergefunc(keyA3, keyB3, NAp);
		keyy_t keyPB3 = MERGE_mergefunc(keyC3, keyD3, NAp);
		keyy_t keyPC3 = MERGE_mergefunc(keyE3, keyF3, NAp);
		keyy_t keyRA3 = MERGE_mergefunc(keyPA3, keyPB3, NAp);
		keyy_t keyRB3 = MERGE_mergefunc(keyPC3, keyF3, NAp);
		keyy_t keyRZ3 = MERGE_mergefunc(keyRA3, keyRB3, NAp);
		keyy_t keyPA4 = MERGE_mergefunc(keyA4, keyB4, NAp);
		keyy_t keyPB4 = MERGE_mergefunc(keyC4, keyD4, NAp);
		keyy_t keyPC4 = MERGE_mergefunc(keyE4, keyF4, NAp);
		keyy_t keyRA4 = MERGE_mergefunc(keyPA4, keyPB4, NAp);
		keyy_t keyRB4 = MERGE_mergefunc(keyPC4, keyF4, NAp);
		keyy_t keyRZ4 = MERGE_mergefunc(keyRA4, keyRB4, NAp);
		keyy_t keyPA5 = MERGE_mergefunc(keyA5, keyB5, NAp);
		keyy_t keyPB5 = MERGE_mergefunc(keyC5, keyD5, NAp);
		keyy_t keyPC5 = MERGE_mergefunc(keyE5, keyF5, NAp);
		keyy_t keyRA5 = MERGE_mergefunc(keyPA5, keyPB5, NAp);
		keyy_t keyRB5 = MERGE_mergefunc(keyPC5, keyF5, NAp);
		keyy_t keyRZ5 = MERGE_mergefunc(keyRA5, keyRB5, NAp);
		keyy_t keyPA6 = MERGE_mergefunc(keyA6, keyB6, NAp);
		keyy_t keyPB6 = MERGE_mergefunc(keyC6, keyD6, NAp);
		keyy_t keyPC6 = MERGE_mergefunc(keyE6, keyF6, NAp);
		keyy_t keyRA6 = MERGE_mergefunc(keyPA6, keyPB6, NAp);
		keyy_t keyRB6 = MERGE_mergefunc(keyPC6, keyF6, NAp);
		keyy_t keyRZ6 = MERGE_mergefunc(keyRA6, keyRB6, NAp);
		keyy_t keyPA7 = MERGE_mergefunc(keyA7, keyB7, NAp);
		keyy_t keyPB7 = MERGE_mergefunc(keyC7, keyD7, NAp);
		keyy_t keyPC7 = MERGE_mergefunc(keyE7, keyF7, NAp);
		keyy_t keyRA7 = MERGE_mergefunc(keyPA7, keyPB7, NAp);
		keyy_t keyRB7 = MERGE_mergefunc(keyPC7, keyF7, NAp);
		keyy_t keyRZ7 = MERGE_mergefunc(keyRA7, keyRB7, NAp);
		
		//((n)/2)
		valA0 = MERGE_mergefunc(mykeyvalue00.value, mykeyvalue10.value, NAp);
		valB0 = MERGE_mergefunc(mykeyvalue20.value, mykeyvalue30.value, NAp);
		valC0 = MERGE_mergefunc(mykeyvalue40.value, mykeyvalue50.value, NAp);
		valD0 = MERGE_mergefunc(mykeyvalue60.value, mykeyvalue70.value, NAp);
		valE0 = MERGE_mergefunc(mykeyvalue80.value, mykeyvalue90.value, NAp);
		valA1 = MERGE_mergefunc(mykeyvalue01.value, mykeyvalue11.value, NAp);
		valB1 = MERGE_mergefunc(mykeyvalue21.value, mykeyvalue31.value, NAp);
		valC1 = MERGE_mergefunc(mykeyvalue41.value, mykeyvalue51.value, NAp);
		valD1 = MERGE_mergefunc(mykeyvalue61.value, mykeyvalue71.value, NAp);
		valE1 = MERGE_mergefunc(mykeyvalue81.value, mykeyvalue91.value, NAp);
		valA2 = MERGE_mergefunc(mykeyvalue02.value, mykeyvalue12.value, NAp);
		valB2 = MERGE_mergefunc(mykeyvalue22.value, mykeyvalue32.value, NAp);
		valC2 = MERGE_mergefunc(mykeyvalue42.value, mykeyvalue52.value, NAp);
		valD2 = MERGE_mergefunc(mykeyvalue62.value, mykeyvalue72.value, NAp);
		valE2 = MERGE_mergefunc(mykeyvalue82.value, mykeyvalue92.value, NAp);
		valA3 = MERGE_mergefunc(mykeyvalue03.value, mykeyvalue13.value, NAp);
		valB3 = MERGE_mergefunc(mykeyvalue23.value, mykeyvalue33.value, NAp);
		valC3 = MERGE_mergefunc(mykeyvalue43.value, mykeyvalue53.value, NAp);
		valD3 = MERGE_mergefunc(mykeyvalue63.value, mykeyvalue73.value, NAp);
		valE3 = MERGE_mergefunc(mykeyvalue83.value, mykeyvalue93.value, NAp);
		valA4 = MERGE_mergefunc(mykeyvalue04.value, mykeyvalue14.value, NAp);
		valB4 = MERGE_mergefunc(mykeyvalue24.value, mykeyvalue34.value, NAp);
		valC4 = MERGE_mergefunc(mykeyvalue44.value, mykeyvalue54.value, NAp);
		valD4 = MERGE_mergefunc(mykeyvalue64.value, mykeyvalue74.value, NAp);
		valE4 = MERGE_mergefunc(mykeyvalue84.value, mykeyvalue94.value, NAp);
		valA5 = MERGE_mergefunc(mykeyvalue05.value, mykeyvalue15.value, NAp);
		valB5 = MERGE_mergefunc(mykeyvalue25.value, mykeyvalue35.value, NAp);
		valC5 = MERGE_mergefunc(mykeyvalue45.value, mykeyvalue55.value, NAp);
		valD5 = MERGE_mergefunc(mykeyvalue65.value, mykeyvalue75.value, NAp);
		valE5 = MERGE_mergefunc(mykeyvalue85.value, mykeyvalue95.value, NAp);
		valA6 = MERGE_mergefunc(mykeyvalue06.value, mykeyvalue16.value, NAp);
		valB6 = MERGE_mergefunc(mykeyvalue26.value, mykeyvalue36.value, NAp);
		valC6 = MERGE_mergefunc(mykeyvalue46.value, mykeyvalue56.value, NAp);
		valD6 = MERGE_mergefunc(mykeyvalue66.value, mykeyvalue76.value, NAp);
		valE6 = MERGE_mergefunc(mykeyvalue86.value, mykeyvalue96.value, NAp);
		valA7 = MERGE_mergefunc(mykeyvalue07.value, mykeyvalue17.value, NAp);
		valB7 = MERGE_mergefunc(mykeyvalue27.value, mykeyvalue37.value, NAp);
		valC7 = MERGE_mergefunc(mykeyvalue47.value, mykeyvalue57.value, NAp);
		valD7 = MERGE_mergefunc(mykeyvalue67.value, mykeyvalue77.value, NAp);
		valE7 = MERGE_mergefunc(mykeyvalue87.value, mykeyvalue97.value, NAp);
		value_t valPA0 = MERGE_mergefunc(valA0, valB0, NAp);
		value_t valPB0 = MERGE_mergefunc(valC0, valD0, NAp);
		value_t valPC0 = MERGE_mergefunc(valE0, valF0, NAp);
		value_t valRA0 = MERGE_mergefunc(valPA0, valPB0, NAp);
		value_t valRB0 = MERGE_mergefunc(valPC0, valF0, NAp);
		value_t valRZ0 = MERGE_mergefunc(valRA0, valRB0, NAp);
		value_t valPA1 = MERGE_mergefunc(valA1, valB1, NAp);
		value_t valPB1 = MERGE_mergefunc(valC1, valD1, NAp);
		value_t valPC1 = MERGE_mergefunc(valE1, valF1, NAp);
		value_t valRA1 = MERGE_mergefunc(valPA1, valPB1, NAp);
		value_t valRB1 = MERGE_mergefunc(valPC1, valF1, NAp);
		value_t valRZ1 = MERGE_mergefunc(valRA1, valRB1, NAp);
		value_t valPA2 = MERGE_mergefunc(valA2, valB2, NAp);
		value_t valPB2 = MERGE_mergefunc(valC2, valD2, NAp);
		value_t valPC2 = MERGE_mergefunc(valE2, valF2, NAp);
		value_t valRA2 = MERGE_mergefunc(valPA2, valPB2, NAp);
		value_t valRB2 = MERGE_mergefunc(valPC2, valF2, NAp);
		value_t valRZ2 = MERGE_mergefunc(valRA2, valRB2, NAp);
		value_t valPA3 = MERGE_mergefunc(valA3, valB3, NAp);
		value_t valPB3 = MERGE_mergefunc(valC3, valD3, NAp);
		value_t valPC3 = MERGE_mergefunc(valE3, valF3, NAp);
		value_t valRA3 = MERGE_mergefunc(valPA3, valPB3, NAp);
		value_t valRB3 = MERGE_mergefunc(valPC3, valF3, NAp);
		value_t valRZ3 = MERGE_mergefunc(valRA3, valRB3, NAp);
		value_t valPA4 = MERGE_mergefunc(valA4, valB4, NAp);
		value_t valPB4 = MERGE_mergefunc(valC4, valD4, NAp);
		value_t valPC4 = MERGE_mergefunc(valE4, valF4, NAp);
		value_t valRA4 = MERGE_mergefunc(valPA4, valPB4, NAp);
		value_t valRB4 = MERGE_mergefunc(valPC4, valF4, NAp);
		value_t valRZ4 = MERGE_mergefunc(valRA4, valRB4, NAp);
		value_t valPA5 = MERGE_mergefunc(valA5, valB5, NAp);
		value_t valPB5 = MERGE_mergefunc(valC5, valD5, NAp);
		value_t valPC5 = MERGE_mergefunc(valE5, valF5, NAp);
		value_t valRA5 = MERGE_mergefunc(valPA5, valPB5, NAp);
		value_t valRB5 = MERGE_mergefunc(valPC5, valF5, NAp);
		value_t valRZ5 = MERGE_mergefunc(valRA5, valRB5, NAp);
		value_t valPA6 = MERGE_mergefunc(valA6, valB6, NAp);
		value_t valPB6 = MERGE_mergefunc(valC6, valD6, NAp);
		value_t valPC6 = MERGE_mergefunc(valE6, valF6, NAp);
		value_t valRA6 = MERGE_mergefunc(valPA6, valPB6, NAp);
		value_t valRB6 = MERGE_mergefunc(valPC6, valF6, NAp);
		value_t valRZ6 = MERGE_mergefunc(valRA6, valRB6, NAp);
		value_t valPA7 = MERGE_mergefunc(valA7, valB7, NAp);
		value_t valPB7 = MERGE_mergefunc(valC7, valD7, NAp);
		value_t valPC7 = MERGE_mergefunc(valE7, valF7, NAp);
		value_t valRA7 = MERGE_mergefunc(valPA7, valPB7, NAp);
		value_t valRB7 = MERGE_mergefunc(valPC7, valF7, NAp);
		value_t valRZ7 = MERGE_mergefunc(valRA7, valRB7, NAp);
		
		#ifdef _WIDEWORD
		vdram[dramoffset_kvs + j].range(31, 0) = keyRZ0;
		vdram[dramoffset_kvs + j].range(63, 32) = valRZ0;
		vdram[dramoffset_kvs + j].range(95, 64) = keyRZ1;
		vdram[dramoffset_kvs + j].range(127, 96) = valRZ1;
		vdram[dramoffset_kvs + j].range(159, 128) = keyRZ2;
		vdram[dramoffset_kvs + j].range(191, 160) = valRZ2;
		vdram[dramoffset_kvs + j].range(223, 192) = keyRZ3;
		vdram[dramoffset_kvs + j].range(255, 224) = valRZ3;
		vdram[dramoffset_kvs + j].range(287, 256) = keyRZ4;
		vdram[dramoffset_kvs + j].range(319, 288) = valRZ4;
		vdram[dramoffset_kvs + j].range(351, 320) = keyRZ5;
		vdram[dramoffset_kvs + j].range(383, 352) = valRZ5;
		vdram[dramoffset_kvs + j].range(415, 384) = keyRZ6;
		vdram[dramoffset_kvs + j].range(447, 416) = valRZ6;
		vdram[dramoffset_kvs + j].range(479, 448) = keyRZ7;
		vdram[dramoffset_kvs + j].range(511, 480) = valRZ7;
		#else
		vdram[dramoffset_kvs + j].data[0].key = keyRZ0;
		vdram[dramoffset_kvs + j].data[0].value = valRZ0;
		vdram[dramoffset_kvs + j].data[1].key = keyRZ1;
		vdram[dramoffset_kvs + j].data[1].value = valRZ1;
		vdram[dramoffset_kvs + j].data[2].key = keyRZ2;
		vdram[dramoffset_kvs + j].data[2].value = valRZ2;
		vdram[dramoffset_kvs + j].data[3].key = keyRZ3;
		vdram[dramoffset_kvs + j].data[3].value = valRZ3;
		vdram[dramoffset_kvs + j].data[4].key = keyRZ4;
		vdram[dramoffset_kvs + j].data[4].value = valRZ4;
		vdram[dramoffset_kvs + j].data[5].key = keyRZ5;
		vdram[dramoffset_kvs + j].data[5].value = valRZ5;
		vdram[dramoffset_kvs + j].data[6].key = keyRZ6;
		vdram[dramoffset_kvs + j].data[6].value = valRZ6;
		vdram[dramoffset_kvs + j].data[7].key = keyRZ7;
		vdram[dramoffset_kvs + j].data[7].value = valRZ7;
		#endif
	}
	return;
}
void acts_all::MERGE_merge9andsavevdata(bool_type enable, uint512_dt * vdram, keyvalue_vbuffer_t vbuffer0[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t vbuffer1[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t vbuffer2[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t vbuffer3[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t vbuffer4[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t vbuffer5[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t vbuffer6[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t vbuffer7[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t vbuffer8[VDATA_PACKINGSIZE][BLOCKRAM_SIZE], unsigned int begincol, batch_type bufferoffset_kvs, unsigned int dramoffset_kvs){
	if(enable == OFF){ return; }
	keyvalue_t dummykv;
	dummykv.key = 0xFFFFFFFF; dummykv.value = 0xFFFFFFFF;
	
	keyy_t keyA0 = dummykv.key;
	value_t valA0 = dummykv.key;
	keyy_t keyB0 = dummykv.key;
	value_t valB0 = dummykv.key;
	keyy_t keyC0 = dummykv.key;
	value_t valC0 = dummykv.key;
	keyy_t keyD0 = dummykv.key;
	value_t valD0 = dummykv.key;
	keyy_t keyE0 = dummykv.key;
	value_t valE0 = dummykv.key;
	keyy_t keyF0 = dummykv.key;
	value_t valF0 = dummykv.key;
	keyy_t keyG0 = dummykv.key;
	value_t valG0 = dummykv.key;
	keyy_t keyH0 = dummykv.key;
	value_t valH0 = dummykv.key;
	keyy_t keyI0 = dummykv.key;
	value_t valI0 = dummykv.key;
	keyy_t keyJ0 = dummykv.key;
	value_t valJ0 = dummykv.key;
	keyy_t keyK0 = dummykv.key;
	value_t valK0 = dummykv.key;
	keyy_t keyL0 = dummykv.key;
	value_t valL0 = dummykv.key;
	keyy_t keyM0 = dummykv.key;
	value_t valM0 = dummykv.key;
	keyy_t keyA1 = dummykv.key;
	value_t valA1 = dummykv.key;
	keyy_t keyB1 = dummykv.key;
	value_t valB1 = dummykv.key;
	keyy_t keyC1 = dummykv.key;
	value_t valC1 = dummykv.key;
	keyy_t keyD1 = dummykv.key;
	value_t valD1 = dummykv.key;
	keyy_t keyE1 = dummykv.key;
	value_t valE1 = dummykv.key;
	keyy_t keyF1 = dummykv.key;
	value_t valF1 = dummykv.key;
	keyy_t keyG1 = dummykv.key;
	value_t valG1 = dummykv.key;
	keyy_t keyH1 = dummykv.key;
	value_t valH1 = dummykv.key;
	keyy_t keyI1 = dummykv.key;
	value_t valI1 = dummykv.key;
	keyy_t keyJ1 = dummykv.key;
	value_t valJ1 = dummykv.key;
	keyy_t keyK1 = dummykv.key;
	value_t valK1 = dummykv.key;
	keyy_t keyL1 = dummykv.key;
	value_t valL1 = dummykv.key;
	keyy_t keyM1 = dummykv.key;
	value_t valM1 = dummykv.key;
	keyy_t keyA2 = dummykv.key;
	value_t valA2 = dummykv.key;
	keyy_t keyB2 = dummykv.key;
	value_t valB2 = dummykv.key;
	keyy_t keyC2 = dummykv.key;
	value_t valC2 = dummykv.key;
	keyy_t keyD2 = dummykv.key;
	value_t valD2 = dummykv.key;
	keyy_t keyE2 = dummykv.key;
	value_t valE2 = dummykv.key;
	keyy_t keyF2 = dummykv.key;
	value_t valF2 = dummykv.key;
	keyy_t keyG2 = dummykv.key;
	value_t valG2 = dummykv.key;
	keyy_t keyH2 = dummykv.key;
	value_t valH2 = dummykv.key;
	keyy_t keyI2 = dummykv.key;
	value_t valI2 = dummykv.key;
	keyy_t keyJ2 = dummykv.key;
	value_t valJ2 = dummykv.key;
	keyy_t keyK2 = dummykv.key;
	value_t valK2 = dummykv.key;
	keyy_t keyL2 = dummykv.key;
	value_t valL2 = dummykv.key;
	keyy_t keyM2 = dummykv.key;
	value_t valM2 = dummykv.key;
	keyy_t keyA3 = dummykv.key;
	value_t valA3 = dummykv.key;
	keyy_t keyB3 = dummykv.key;
	value_t valB3 = dummykv.key;
	keyy_t keyC3 = dummykv.key;
	value_t valC3 = dummykv.key;
	keyy_t keyD3 = dummykv.key;
	value_t valD3 = dummykv.key;
	keyy_t keyE3 = dummykv.key;
	value_t valE3 = dummykv.key;
	keyy_t keyF3 = dummykv.key;
	value_t valF3 = dummykv.key;
	keyy_t keyG3 = dummykv.key;
	value_t valG3 = dummykv.key;
	keyy_t keyH3 = dummykv.key;
	value_t valH3 = dummykv.key;
	keyy_t keyI3 = dummykv.key;
	value_t valI3 = dummykv.key;
	keyy_t keyJ3 = dummykv.key;
	value_t valJ3 = dummykv.key;
	keyy_t keyK3 = dummykv.key;
	value_t valK3 = dummykv.key;
	keyy_t keyL3 = dummykv.key;
	value_t valL3 = dummykv.key;
	keyy_t keyM3 = dummykv.key;
	value_t valM3 = dummykv.key;
	keyy_t keyA4 = dummykv.key;
	value_t valA4 = dummykv.key;
	keyy_t keyB4 = dummykv.key;
	value_t valB4 = dummykv.key;
	keyy_t keyC4 = dummykv.key;
	value_t valC4 = dummykv.key;
	keyy_t keyD4 = dummykv.key;
	value_t valD4 = dummykv.key;
	keyy_t keyE4 = dummykv.key;
	value_t valE4 = dummykv.key;
	keyy_t keyF4 = dummykv.key;
	value_t valF4 = dummykv.key;
	keyy_t keyG4 = dummykv.key;
	value_t valG4 = dummykv.key;
	keyy_t keyH4 = dummykv.key;
	value_t valH4 = dummykv.key;
	keyy_t keyI4 = dummykv.key;
	value_t valI4 = dummykv.key;
	keyy_t keyJ4 = dummykv.key;
	value_t valJ4 = dummykv.key;
	keyy_t keyK4 = dummykv.key;
	value_t valK4 = dummykv.key;
	keyy_t keyL4 = dummykv.key;
	value_t valL4 = dummykv.key;
	keyy_t keyM4 = dummykv.key;
	value_t valM4 = dummykv.key;
	keyy_t keyA5 = dummykv.key;
	value_t valA5 = dummykv.key;
	keyy_t keyB5 = dummykv.key;
	value_t valB5 = dummykv.key;
	keyy_t keyC5 = dummykv.key;
	value_t valC5 = dummykv.key;
	keyy_t keyD5 = dummykv.key;
	value_t valD5 = dummykv.key;
	keyy_t keyE5 = dummykv.key;
	value_t valE5 = dummykv.key;
	keyy_t keyF5 = dummykv.key;
	value_t valF5 = dummykv.key;
	keyy_t keyG5 = dummykv.key;
	value_t valG5 = dummykv.key;
	keyy_t keyH5 = dummykv.key;
	value_t valH5 = dummykv.key;
	keyy_t keyI5 = dummykv.key;
	value_t valI5 = dummykv.key;
	keyy_t keyJ5 = dummykv.key;
	value_t valJ5 = dummykv.key;
	keyy_t keyK5 = dummykv.key;
	value_t valK5 = dummykv.key;
	keyy_t keyL5 = dummykv.key;
	value_t valL5 = dummykv.key;
	keyy_t keyM5 = dummykv.key;
	value_t valM5 = dummykv.key;
	keyy_t keyA6 = dummykv.key;
	value_t valA6 = dummykv.key;
	keyy_t keyB6 = dummykv.key;
	value_t valB6 = dummykv.key;
	keyy_t keyC6 = dummykv.key;
	value_t valC6 = dummykv.key;
	keyy_t keyD6 = dummykv.key;
	value_t valD6 = dummykv.key;
	keyy_t keyE6 = dummykv.key;
	value_t valE6 = dummykv.key;
	keyy_t keyF6 = dummykv.key;
	value_t valF6 = dummykv.key;
	keyy_t keyG6 = dummykv.key;
	value_t valG6 = dummykv.key;
	keyy_t keyH6 = dummykv.key;
	value_t valH6 = dummykv.key;
	keyy_t keyI6 = dummykv.key;
	value_t valI6 = dummykv.key;
	keyy_t keyJ6 = dummykv.key;
	value_t valJ6 = dummykv.key;
	keyy_t keyK6 = dummykv.key;
	value_t valK6 = dummykv.key;
	keyy_t keyL6 = dummykv.key;
	value_t valL6 = dummykv.key;
	keyy_t keyM6 = dummykv.key;
	value_t valM6 = dummykv.key;
	keyy_t keyA7 = dummykv.key;
	value_t valA7 = dummykv.key;
	keyy_t keyB7 = dummykv.key;
	value_t valB7 = dummykv.key;
	keyy_t keyC7 = dummykv.key;
	value_t valC7 = dummykv.key;
	keyy_t keyD7 = dummykv.key;
	value_t valD7 = dummykv.key;
	keyy_t keyE7 = dummykv.key;
	value_t valE7 = dummykv.key;
	keyy_t keyF7 = dummykv.key;
	value_t valF7 = dummykv.key;
	keyy_t keyG7 = dummykv.key;
	value_t valG7 = dummykv.key;
	keyy_t keyH7 = dummykv.key;
	value_t valH7 = dummykv.key;
	keyy_t keyI7 = dummykv.key;
	value_t valI7 = dummykv.key;
	keyy_t keyJ7 = dummykv.key;
	value_t valJ7 = dummykv.key;
	keyy_t keyK7 = dummykv.key;
	value_t valK7 = dummykv.key;
	keyy_t keyL7 = dummykv.key;
	value_t valL7 = dummykv.key;
	keyy_t keyM7 = dummykv.key;
	value_t valM7 = dummykv.key;
	
	MERGE9_LOOP1: for (buffer_type j=0; j<BLOCKRAM_SIZE; j++){
	#pragma HLS PIPELINE II=1
		keyvalue_t mykeyvalue00 = UTIL_GETKV2(vbuffer0[begincol + 0][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue01 = UTIL_GETKV2(vbuffer0[begincol + 1][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue02 = UTIL_GETKV2(vbuffer0[begincol + 2][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue03 = UTIL_GETKV2(vbuffer0[begincol + 3][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue04 = UTIL_GETKV2(vbuffer0[begincol + 4][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue05 = UTIL_GETKV2(vbuffer0[begincol + 5][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue06 = UTIL_GETKV2(vbuffer0[begincol + 6][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue07 = UTIL_GETKV2(vbuffer0[begincol + 7][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue10 = UTIL_GETKV2(vbuffer1[begincol + 0][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue11 = UTIL_GETKV2(vbuffer1[begincol + 1][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue12 = UTIL_GETKV2(vbuffer1[begincol + 2][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue13 = UTIL_GETKV2(vbuffer1[begincol + 3][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue14 = UTIL_GETKV2(vbuffer1[begincol + 4][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue15 = UTIL_GETKV2(vbuffer1[begincol + 5][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue16 = UTIL_GETKV2(vbuffer1[begincol + 6][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue17 = UTIL_GETKV2(vbuffer1[begincol + 7][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue20 = UTIL_GETKV2(vbuffer2[begincol + 0][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue21 = UTIL_GETKV2(vbuffer2[begincol + 1][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue22 = UTIL_GETKV2(vbuffer2[begincol + 2][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue23 = UTIL_GETKV2(vbuffer2[begincol + 3][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue24 = UTIL_GETKV2(vbuffer2[begincol + 4][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue25 = UTIL_GETKV2(vbuffer2[begincol + 5][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue26 = UTIL_GETKV2(vbuffer2[begincol + 6][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue27 = UTIL_GETKV2(vbuffer2[begincol + 7][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue30 = UTIL_GETKV2(vbuffer3[begincol + 0][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue31 = UTIL_GETKV2(vbuffer3[begincol + 1][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue32 = UTIL_GETKV2(vbuffer3[begincol + 2][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue33 = UTIL_GETKV2(vbuffer3[begincol + 3][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue34 = UTIL_GETKV2(vbuffer3[begincol + 4][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue35 = UTIL_GETKV2(vbuffer3[begincol + 5][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue36 = UTIL_GETKV2(vbuffer3[begincol + 6][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue37 = UTIL_GETKV2(vbuffer3[begincol + 7][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue40 = UTIL_GETKV2(vbuffer4[begincol + 0][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue41 = UTIL_GETKV2(vbuffer4[begincol + 1][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue42 = UTIL_GETKV2(vbuffer4[begincol + 2][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue43 = UTIL_GETKV2(vbuffer4[begincol + 3][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue44 = UTIL_GETKV2(vbuffer4[begincol + 4][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue45 = UTIL_GETKV2(vbuffer4[begincol + 5][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue46 = UTIL_GETKV2(vbuffer4[begincol + 6][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue47 = UTIL_GETKV2(vbuffer4[begincol + 7][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue50 = UTIL_GETKV2(vbuffer5[begincol + 0][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue51 = UTIL_GETKV2(vbuffer5[begincol + 1][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue52 = UTIL_GETKV2(vbuffer5[begincol + 2][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue53 = UTIL_GETKV2(vbuffer5[begincol + 3][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue54 = UTIL_GETKV2(vbuffer5[begincol + 4][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue55 = UTIL_GETKV2(vbuffer5[begincol + 5][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue56 = UTIL_GETKV2(vbuffer5[begincol + 6][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue57 = UTIL_GETKV2(vbuffer5[begincol + 7][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue60 = UTIL_GETKV2(vbuffer6[begincol + 0][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue61 = UTIL_GETKV2(vbuffer6[begincol + 1][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue62 = UTIL_GETKV2(vbuffer6[begincol + 2][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue63 = UTIL_GETKV2(vbuffer6[begincol + 3][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue64 = UTIL_GETKV2(vbuffer6[begincol + 4][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue65 = UTIL_GETKV2(vbuffer6[begincol + 5][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue66 = UTIL_GETKV2(vbuffer6[begincol + 6][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue67 = UTIL_GETKV2(vbuffer6[begincol + 7][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue70 = UTIL_GETKV2(vbuffer7[begincol + 0][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue71 = UTIL_GETKV2(vbuffer7[begincol + 1][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue72 = UTIL_GETKV2(vbuffer7[begincol + 2][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue73 = UTIL_GETKV2(vbuffer7[begincol + 3][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue74 = UTIL_GETKV2(vbuffer7[begincol + 4][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue75 = UTIL_GETKV2(vbuffer7[begincol + 5][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue76 = UTIL_GETKV2(vbuffer7[begincol + 6][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue77 = UTIL_GETKV2(vbuffer7[begincol + 7][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue80 = UTIL_GETKV2(vbuffer8[begincol + 0][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue81 = UTIL_GETKV2(vbuffer8[begincol + 1][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue82 = UTIL_GETKV2(vbuffer8[begincol + 2][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue83 = UTIL_GETKV2(vbuffer8[begincol + 3][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue84 = UTIL_GETKV2(vbuffer8[begincol + 4][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue85 = UTIL_GETKV2(vbuffer8[begincol + 5][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue86 = UTIL_GETKV2(vbuffer8[begincol + 6][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue87 = UTIL_GETKV2(vbuffer8[begincol + 7][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue90 = dummykv;
		keyvalue_t mykeyvalue91 = dummykv;
		keyvalue_t mykeyvalue92 = dummykv;
		keyvalue_t mykeyvalue93 = dummykv;
		keyvalue_t mykeyvalue94 = dummykv;
		keyvalue_t mykeyvalue95 = dummykv;
		keyvalue_t mykeyvalue96 = dummykv;
		keyvalue_t mykeyvalue97 = dummykv;
		keyvalue_t mykeyvalue100 = dummykv;
		keyvalue_t mykeyvalue101 = dummykv;
		keyvalue_t mykeyvalue102 = dummykv;
		keyvalue_t mykeyvalue103 = dummykv;
		keyvalue_t mykeyvalue104 = dummykv;
		keyvalue_t mykeyvalue105 = dummykv;
		keyvalue_t mykeyvalue106 = dummykv;
		keyvalue_t mykeyvalue107 = dummykv;
		keyvalue_t mykeyvalue110 = dummykv;
		keyvalue_t mykeyvalue111 = dummykv;
		keyvalue_t mykeyvalue112 = dummykv;
		keyvalue_t mykeyvalue113 = dummykv;
		keyvalue_t mykeyvalue114 = dummykv;
		keyvalue_t mykeyvalue115 = dummykv;
		keyvalue_t mykeyvalue116 = dummykv;
		keyvalue_t mykeyvalue117 = dummykv;
		keyvalue_t mykeyvalue120 = dummykv;
		keyvalue_t mykeyvalue121 = dummykv;
		keyvalue_t mykeyvalue122 = dummykv;
		keyvalue_t mykeyvalue123 = dummykv;
		keyvalue_t mykeyvalue124 = dummykv;
		keyvalue_t mykeyvalue125 = dummykv;
		keyvalue_t mykeyvalue126 = dummykv;
		keyvalue_t mykeyvalue127 = dummykv;
		keyvalue_t mykeyvalue130 = dummykv;
		keyvalue_t mykeyvalue131 = dummykv;
		keyvalue_t mykeyvalue132 = dummykv;
		keyvalue_t mykeyvalue133 = dummykv;
		keyvalue_t mykeyvalue134 = dummykv;
		keyvalue_t mykeyvalue135 = dummykv;
		keyvalue_t mykeyvalue136 = dummykv;
		keyvalue_t mykeyvalue137 = dummykv;
		keyvalue_t mykeyvalue140 = dummykv;
		keyvalue_t mykeyvalue141 = dummykv;
		keyvalue_t mykeyvalue142 = dummykv;
		keyvalue_t mykeyvalue143 = dummykv;
		keyvalue_t mykeyvalue144 = dummykv;
		keyvalue_t mykeyvalue145 = dummykv;
		keyvalue_t mykeyvalue146 = dummykv;
		keyvalue_t mykeyvalue147 = dummykv;
		
		//((n)/2)
		keyA0 = MERGE_mergefunc(mykeyvalue00.key, mykeyvalue10.key, NAp);
		keyB0 = MERGE_mergefunc(mykeyvalue20.key, mykeyvalue30.key, NAp);
		keyC0 = MERGE_mergefunc(mykeyvalue40.key, mykeyvalue50.key, NAp);
		keyD0 = MERGE_mergefunc(mykeyvalue60.key, mykeyvalue70.key, NAp);
		keyE0 = MERGE_mergefunc(mykeyvalue80.key, mykeyvalue90.key, NAp);
		keyA1 = MERGE_mergefunc(mykeyvalue01.key, mykeyvalue11.key, NAp);
		keyB1 = MERGE_mergefunc(mykeyvalue21.key, mykeyvalue31.key, NAp);
		keyC1 = MERGE_mergefunc(mykeyvalue41.key, mykeyvalue51.key, NAp);
		keyD1 = MERGE_mergefunc(mykeyvalue61.key, mykeyvalue71.key, NAp);
		keyE1 = MERGE_mergefunc(mykeyvalue81.key, mykeyvalue91.key, NAp);
		keyA2 = MERGE_mergefunc(mykeyvalue02.key, mykeyvalue12.key, NAp);
		keyB2 = MERGE_mergefunc(mykeyvalue22.key, mykeyvalue32.key, NAp);
		keyC2 = MERGE_mergefunc(mykeyvalue42.key, mykeyvalue52.key, NAp);
		keyD2 = MERGE_mergefunc(mykeyvalue62.key, mykeyvalue72.key, NAp);
		keyE2 = MERGE_mergefunc(mykeyvalue82.key, mykeyvalue92.key, NAp);
		keyA3 = MERGE_mergefunc(mykeyvalue03.key, mykeyvalue13.key, NAp);
		keyB3 = MERGE_mergefunc(mykeyvalue23.key, mykeyvalue33.key, NAp);
		keyC3 = MERGE_mergefunc(mykeyvalue43.key, mykeyvalue53.key, NAp);
		keyD3 = MERGE_mergefunc(mykeyvalue63.key, mykeyvalue73.key, NAp);
		keyE3 = MERGE_mergefunc(mykeyvalue83.key, mykeyvalue93.key, NAp);
		keyA4 = MERGE_mergefunc(mykeyvalue04.key, mykeyvalue14.key, NAp);
		keyB4 = MERGE_mergefunc(mykeyvalue24.key, mykeyvalue34.key, NAp);
		keyC4 = MERGE_mergefunc(mykeyvalue44.key, mykeyvalue54.key, NAp);
		keyD4 = MERGE_mergefunc(mykeyvalue64.key, mykeyvalue74.key, NAp);
		keyE4 = MERGE_mergefunc(mykeyvalue84.key, mykeyvalue94.key, NAp);
		keyA5 = MERGE_mergefunc(mykeyvalue05.key, mykeyvalue15.key, NAp);
		keyB5 = MERGE_mergefunc(mykeyvalue25.key, mykeyvalue35.key, NAp);
		keyC5 = MERGE_mergefunc(mykeyvalue45.key, mykeyvalue55.key, NAp);
		keyD5 = MERGE_mergefunc(mykeyvalue65.key, mykeyvalue75.key, NAp);
		keyE5 = MERGE_mergefunc(mykeyvalue85.key, mykeyvalue95.key, NAp);
		keyA6 = MERGE_mergefunc(mykeyvalue06.key, mykeyvalue16.key, NAp);
		keyB6 = MERGE_mergefunc(mykeyvalue26.key, mykeyvalue36.key, NAp);
		keyC6 = MERGE_mergefunc(mykeyvalue46.key, mykeyvalue56.key, NAp);
		keyD6 = MERGE_mergefunc(mykeyvalue66.key, mykeyvalue76.key, NAp);
		keyE6 = MERGE_mergefunc(mykeyvalue86.key, mykeyvalue96.key, NAp);
		keyA7 = MERGE_mergefunc(mykeyvalue07.key, mykeyvalue17.key, NAp);
		keyB7 = MERGE_mergefunc(mykeyvalue27.key, mykeyvalue37.key, NAp);
		keyC7 = MERGE_mergefunc(mykeyvalue47.key, mykeyvalue57.key, NAp);
		keyD7 = MERGE_mergefunc(mykeyvalue67.key, mykeyvalue77.key, NAp);
		keyE7 = MERGE_mergefunc(mykeyvalue87.key, mykeyvalue97.key, NAp);
		keyy_t keyPA0 = MERGE_mergefunc(keyA0, keyB0, NAp);
		keyy_t keyPB0 = MERGE_mergefunc(keyC0, keyD0, NAp);
		keyy_t keyPC0 = MERGE_mergefunc(keyE0, keyF0, NAp);
		keyy_t keyRA0 = MERGE_mergefunc(keyPA0, keyPB0, NAp);
		keyy_t keyRB0 = MERGE_mergefunc(keyPC0, keyF0, NAp);
		keyy_t keyRZ0 = MERGE_mergefunc(keyRA0, keyRB0, NAp);
		keyy_t keyPA1 = MERGE_mergefunc(keyA1, keyB1, NAp);
		keyy_t keyPB1 = MERGE_mergefunc(keyC1, keyD1, NAp);
		keyy_t keyPC1 = MERGE_mergefunc(keyE1, keyF1, NAp);
		keyy_t keyRA1 = MERGE_mergefunc(keyPA1, keyPB1, NAp);
		keyy_t keyRB1 = MERGE_mergefunc(keyPC1, keyF1, NAp);
		keyy_t keyRZ1 = MERGE_mergefunc(keyRA1, keyRB1, NAp);
		keyy_t keyPA2 = MERGE_mergefunc(keyA2, keyB2, NAp);
		keyy_t keyPB2 = MERGE_mergefunc(keyC2, keyD2, NAp);
		keyy_t keyPC2 = MERGE_mergefunc(keyE2, keyF2, NAp);
		keyy_t keyRA2 = MERGE_mergefunc(keyPA2, keyPB2, NAp);
		keyy_t keyRB2 = MERGE_mergefunc(keyPC2, keyF2, NAp);
		keyy_t keyRZ2 = MERGE_mergefunc(keyRA2, keyRB2, NAp);
		keyy_t keyPA3 = MERGE_mergefunc(keyA3, keyB3, NAp);
		keyy_t keyPB3 = MERGE_mergefunc(keyC3, keyD3, NAp);
		keyy_t keyPC3 = MERGE_mergefunc(keyE3, keyF3, NAp);
		keyy_t keyRA3 = MERGE_mergefunc(keyPA3, keyPB3, NAp);
		keyy_t keyRB3 = MERGE_mergefunc(keyPC3, keyF3, NAp);
		keyy_t keyRZ3 = MERGE_mergefunc(keyRA3, keyRB3, NAp);
		keyy_t keyPA4 = MERGE_mergefunc(keyA4, keyB4, NAp);
		keyy_t keyPB4 = MERGE_mergefunc(keyC4, keyD4, NAp);
		keyy_t keyPC4 = MERGE_mergefunc(keyE4, keyF4, NAp);
		keyy_t keyRA4 = MERGE_mergefunc(keyPA4, keyPB4, NAp);
		keyy_t keyRB4 = MERGE_mergefunc(keyPC4, keyF4, NAp);
		keyy_t keyRZ4 = MERGE_mergefunc(keyRA4, keyRB4, NAp);
		keyy_t keyPA5 = MERGE_mergefunc(keyA5, keyB5, NAp);
		keyy_t keyPB5 = MERGE_mergefunc(keyC5, keyD5, NAp);
		keyy_t keyPC5 = MERGE_mergefunc(keyE5, keyF5, NAp);
		keyy_t keyRA5 = MERGE_mergefunc(keyPA5, keyPB5, NAp);
		keyy_t keyRB5 = MERGE_mergefunc(keyPC5, keyF5, NAp);
		keyy_t keyRZ5 = MERGE_mergefunc(keyRA5, keyRB5, NAp);
		keyy_t keyPA6 = MERGE_mergefunc(keyA6, keyB6, NAp);
		keyy_t keyPB6 = MERGE_mergefunc(keyC6, keyD6, NAp);
		keyy_t keyPC6 = MERGE_mergefunc(keyE6, keyF6, NAp);
		keyy_t keyRA6 = MERGE_mergefunc(keyPA6, keyPB6, NAp);
		keyy_t keyRB6 = MERGE_mergefunc(keyPC6, keyF6, NAp);
		keyy_t keyRZ6 = MERGE_mergefunc(keyRA6, keyRB6, NAp);
		keyy_t keyPA7 = MERGE_mergefunc(keyA7, keyB7, NAp);
		keyy_t keyPB7 = MERGE_mergefunc(keyC7, keyD7, NAp);
		keyy_t keyPC7 = MERGE_mergefunc(keyE7, keyF7, NAp);
		keyy_t keyRA7 = MERGE_mergefunc(keyPA7, keyPB7, NAp);
		keyy_t keyRB7 = MERGE_mergefunc(keyPC7, keyF7, NAp);
		keyy_t keyRZ7 = MERGE_mergefunc(keyRA7, keyRB7, NAp);
		
		//((n)/2)
		valA0 = MERGE_mergefunc(mykeyvalue00.value, mykeyvalue10.value, NAp);
		valB0 = MERGE_mergefunc(mykeyvalue20.value, mykeyvalue30.value, NAp);
		valC0 = MERGE_mergefunc(mykeyvalue40.value, mykeyvalue50.value, NAp);
		valD0 = MERGE_mergefunc(mykeyvalue60.value, mykeyvalue70.value, NAp);
		valE0 = MERGE_mergefunc(mykeyvalue80.value, mykeyvalue90.value, NAp);
		valA1 = MERGE_mergefunc(mykeyvalue01.value, mykeyvalue11.value, NAp);
		valB1 = MERGE_mergefunc(mykeyvalue21.value, mykeyvalue31.value, NAp);
		valC1 = MERGE_mergefunc(mykeyvalue41.value, mykeyvalue51.value, NAp);
		valD1 = MERGE_mergefunc(mykeyvalue61.value, mykeyvalue71.value, NAp);
		valE1 = MERGE_mergefunc(mykeyvalue81.value, mykeyvalue91.value, NAp);
		valA2 = MERGE_mergefunc(mykeyvalue02.value, mykeyvalue12.value, NAp);
		valB2 = MERGE_mergefunc(mykeyvalue22.value, mykeyvalue32.value, NAp);
		valC2 = MERGE_mergefunc(mykeyvalue42.value, mykeyvalue52.value, NAp);
		valD2 = MERGE_mergefunc(mykeyvalue62.value, mykeyvalue72.value, NAp);
		valE2 = MERGE_mergefunc(mykeyvalue82.value, mykeyvalue92.value, NAp);
		valA3 = MERGE_mergefunc(mykeyvalue03.value, mykeyvalue13.value, NAp);
		valB3 = MERGE_mergefunc(mykeyvalue23.value, mykeyvalue33.value, NAp);
		valC3 = MERGE_mergefunc(mykeyvalue43.value, mykeyvalue53.value, NAp);
		valD3 = MERGE_mergefunc(mykeyvalue63.value, mykeyvalue73.value, NAp);
		valE3 = MERGE_mergefunc(mykeyvalue83.value, mykeyvalue93.value, NAp);
		valA4 = MERGE_mergefunc(mykeyvalue04.value, mykeyvalue14.value, NAp);
		valB4 = MERGE_mergefunc(mykeyvalue24.value, mykeyvalue34.value, NAp);
		valC4 = MERGE_mergefunc(mykeyvalue44.value, mykeyvalue54.value, NAp);
		valD4 = MERGE_mergefunc(mykeyvalue64.value, mykeyvalue74.value, NAp);
		valE4 = MERGE_mergefunc(mykeyvalue84.value, mykeyvalue94.value, NAp);
		valA5 = MERGE_mergefunc(mykeyvalue05.value, mykeyvalue15.value, NAp);
		valB5 = MERGE_mergefunc(mykeyvalue25.value, mykeyvalue35.value, NAp);
		valC5 = MERGE_mergefunc(mykeyvalue45.value, mykeyvalue55.value, NAp);
		valD5 = MERGE_mergefunc(mykeyvalue65.value, mykeyvalue75.value, NAp);
		valE5 = MERGE_mergefunc(mykeyvalue85.value, mykeyvalue95.value, NAp);
		valA6 = MERGE_mergefunc(mykeyvalue06.value, mykeyvalue16.value, NAp);
		valB6 = MERGE_mergefunc(mykeyvalue26.value, mykeyvalue36.value, NAp);
		valC6 = MERGE_mergefunc(mykeyvalue46.value, mykeyvalue56.value, NAp);
		valD6 = MERGE_mergefunc(mykeyvalue66.value, mykeyvalue76.value, NAp);
		valE6 = MERGE_mergefunc(mykeyvalue86.value, mykeyvalue96.value, NAp);
		valA7 = MERGE_mergefunc(mykeyvalue07.value, mykeyvalue17.value, NAp);
		valB7 = MERGE_mergefunc(mykeyvalue27.value, mykeyvalue37.value, NAp);
		valC7 = MERGE_mergefunc(mykeyvalue47.value, mykeyvalue57.value, NAp);
		valD7 = MERGE_mergefunc(mykeyvalue67.value, mykeyvalue77.value, NAp);
		valE7 = MERGE_mergefunc(mykeyvalue87.value, mykeyvalue97.value, NAp);
		value_t valPA0 = MERGE_mergefunc(valA0, valB0, NAp);
		value_t valPB0 = MERGE_mergefunc(valC0, valD0, NAp);
		value_t valPC0 = MERGE_mergefunc(valE0, valF0, NAp);
		value_t valRA0 = MERGE_mergefunc(valPA0, valPB0, NAp);
		value_t valRB0 = MERGE_mergefunc(valPC0, valF0, NAp);
		value_t valRZ0 = MERGE_mergefunc(valRA0, valRB0, NAp);
		value_t valPA1 = MERGE_mergefunc(valA1, valB1, NAp);
		value_t valPB1 = MERGE_mergefunc(valC1, valD1, NAp);
		value_t valPC1 = MERGE_mergefunc(valE1, valF1, NAp);
		value_t valRA1 = MERGE_mergefunc(valPA1, valPB1, NAp);
		value_t valRB1 = MERGE_mergefunc(valPC1, valF1, NAp);
		value_t valRZ1 = MERGE_mergefunc(valRA1, valRB1, NAp);
		value_t valPA2 = MERGE_mergefunc(valA2, valB2, NAp);
		value_t valPB2 = MERGE_mergefunc(valC2, valD2, NAp);
		value_t valPC2 = MERGE_mergefunc(valE2, valF2, NAp);
		value_t valRA2 = MERGE_mergefunc(valPA2, valPB2, NAp);
		value_t valRB2 = MERGE_mergefunc(valPC2, valF2, NAp);
		value_t valRZ2 = MERGE_mergefunc(valRA2, valRB2, NAp);
		value_t valPA3 = MERGE_mergefunc(valA3, valB3, NAp);
		value_t valPB3 = MERGE_mergefunc(valC3, valD3, NAp);
		value_t valPC3 = MERGE_mergefunc(valE3, valF3, NAp);
		value_t valRA3 = MERGE_mergefunc(valPA3, valPB3, NAp);
		value_t valRB3 = MERGE_mergefunc(valPC3, valF3, NAp);
		value_t valRZ3 = MERGE_mergefunc(valRA3, valRB3, NAp);
		value_t valPA4 = MERGE_mergefunc(valA4, valB4, NAp);
		value_t valPB4 = MERGE_mergefunc(valC4, valD4, NAp);
		value_t valPC4 = MERGE_mergefunc(valE4, valF4, NAp);
		value_t valRA4 = MERGE_mergefunc(valPA4, valPB4, NAp);
		value_t valRB4 = MERGE_mergefunc(valPC4, valF4, NAp);
		value_t valRZ4 = MERGE_mergefunc(valRA4, valRB4, NAp);
		value_t valPA5 = MERGE_mergefunc(valA5, valB5, NAp);
		value_t valPB5 = MERGE_mergefunc(valC5, valD5, NAp);
		value_t valPC5 = MERGE_mergefunc(valE5, valF5, NAp);
		value_t valRA5 = MERGE_mergefunc(valPA5, valPB5, NAp);
		value_t valRB5 = MERGE_mergefunc(valPC5, valF5, NAp);
		value_t valRZ5 = MERGE_mergefunc(valRA5, valRB5, NAp);
		value_t valPA6 = MERGE_mergefunc(valA6, valB6, NAp);
		value_t valPB6 = MERGE_mergefunc(valC6, valD6, NAp);
		value_t valPC6 = MERGE_mergefunc(valE6, valF6, NAp);
		value_t valRA6 = MERGE_mergefunc(valPA6, valPB6, NAp);
		value_t valRB6 = MERGE_mergefunc(valPC6, valF6, NAp);
		value_t valRZ6 = MERGE_mergefunc(valRA6, valRB6, NAp);
		value_t valPA7 = MERGE_mergefunc(valA7, valB7, NAp);
		value_t valPB7 = MERGE_mergefunc(valC7, valD7, NAp);
		value_t valPC7 = MERGE_mergefunc(valE7, valF7, NAp);
		value_t valRA7 = MERGE_mergefunc(valPA7, valPB7, NAp);
		value_t valRB7 = MERGE_mergefunc(valPC7, valF7, NAp);
		value_t valRZ7 = MERGE_mergefunc(valRA7, valRB7, NAp);
		
		#ifdef _WIDEWORD
		vdram[dramoffset_kvs + j].range(31, 0) = keyRZ0;
		vdram[dramoffset_kvs + j].range(63, 32) = valRZ0;
		vdram[dramoffset_kvs + j].range(95, 64) = keyRZ1;
		vdram[dramoffset_kvs + j].range(127, 96) = valRZ1;
		vdram[dramoffset_kvs + j].range(159, 128) = keyRZ2;
		vdram[dramoffset_kvs + j].range(191, 160) = valRZ2;
		vdram[dramoffset_kvs + j].range(223, 192) = keyRZ3;
		vdram[dramoffset_kvs + j].range(255, 224) = valRZ3;
		vdram[dramoffset_kvs + j].range(287, 256) = keyRZ4;
		vdram[dramoffset_kvs + j].range(319, 288) = valRZ4;
		vdram[dramoffset_kvs + j].range(351, 320) = keyRZ5;
		vdram[dramoffset_kvs + j].range(383, 352) = valRZ5;
		vdram[dramoffset_kvs + j].range(415, 384) = keyRZ6;
		vdram[dramoffset_kvs + j].range(447, 416) = valRZ6;
		vdram[dramoffset_kvs + j].range(479, 448) = keyRZ7;
		vdram[dramoffset_kvs + j].range(511, 480) = valRZ7;
		#else
		vdram[dramoffset_kvs + j].data[0].key = keyRZ0;
		vdram[dramoffset_kvs + j].data[0].value = valRZ0;
		vdram[dramoffset_kvs + j].data[1].key = keyRZ1;
		vdram[dramoffset_kvs + j].data[1].value = valRZ1;
		vdram[dramoffset_kvs + j].data[2].key = keyRZ2;
		vdram[dramoffset_kvs + j].data[2].value = valRZ2;
		vdram[dramoffset_kvs + j].data[3].key = keyRZ3;
		vdram[dramoffset_kvs + j].data[3].value = valRZ3;
		vdram[dramoffset_kvs + j].data[4].key = keyRZ4;
		vdram[dramoffset_kvs + j].data[4].value = valRZ4;
		vdram[dramoffset_kvs + j].data[5].key = keyRZ5;
		vdram[dramoffset_kvs + j].data[5].value = valRZ5;
		vdram[dramoffset_kvs + j].data[6].key = keyRZ6;
		vdram[dramoffset_kvs + j].data[6].value = valRZ6;
		vdram[dramoffset_kvs + j].data[7].key = keyRZ7;
		vdram[dramoffset_kvs + j].data[7].value = valRZ7;
		#endif
	}
	return;
}
void acts_all::MERGE_merge10andsavevdata(bool_type enable, uint512_dt * vdram, keyvalue_vbuffer_t vbuffer0[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t vbuffer1[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t vbuffer2[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t vbuffer3[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t vbuffer4[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t vbuffer5[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t vbuffer6[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t vbuffer7[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t vbuffer8[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t vbuffer9[VDATA_PACKINGSIZE][BLOCKRAM_SIZE], unsigned int begincol, batch_type bufferoffset_kvs, unsigned int dramoffset_kvs){
	if(enable == OFF){ return; }
	keyvalue_t dummykv;
	dummykv.key = 0xFFFFFFFF; dummykv.value = 0xFFFFFFFF;
	
	keyy_t keyA0 = dummykv.key;
	value_t valA0 = dummykv.key;
	keyy_t keyB0 = dummykv.key;
	value_t valB0 = dummykv.key;
	keyy_t keyC0 = dummykv.key;
	value_t valC0 = dummykv.key;
	keyy_t keyD0 = dummykv.key;
	value_t valD0 = dummykv.key;
	keyy_t keyE0 = dummykv.key;
	value_t valE0 = dummykv.key;
	keyy_t keyF0 = dummykv.key;
	value_t valF0 = dummykv.key;
	keyy_t keyG0 = dummykv.key;
	value_t valG0 = dummykv.key;
	keyy_t keyH0 = dummykv.key;
	value_t valH0 = dummykv.key;
	keyy_t keyI0 = dummykv.key;
	value_t valI0 = dummykv.key;
	keyy_t keyJ0 = dummykv.key;
	value_t valJ0 = dummykv.key;
	keyy_t keyK0 = dummykv.key;
	value_t valK0 = dummykv.key;
	keyy_t keyL0 = dummykv.key;
	value_t valL0 = dummykv.key;
	keyy_t keyM0 = dummykv.key;
	value_t valM0 = dummykv.key;
	keyy_t keyA1 = dummykv.key;
	value_t valA1 = dummykv.key;
	keyy_t keyB1 = dummykv.key;
	value_t valB1 = dummykv.key;
	keyy_t keyC1 = dummykv.key;
	value_t valC1 = dummykv.key;
	keyy_t keyD1 = dummykv.key;
	value_t valD1 = dummykv.key;
	keyy_t keyE1 = dummykv.key;
	value_t valE1 = dummykv.key;
	keyy_t keyF1 = dummykv.key;
	value_t valF1 = dummykv.key;
	keyy_t keyG1 = dummykv.key;
	value_t valG1 = dummykv.key;
	keyy_t keyH1 = dummykv.key;
	value_t valH1 = dummykv.key;
	keyy_t keyI1 = dummykv.key;
	value_t valI1 = dummykv.key;
	keyy_t keyJ1 = dummykv.key;
	value_t valJ1 = dummykv.key;
	keyy_t keyK1 = dummykv.key;
	value_t valK1 = dummykv.key;
	keyy_t keyL1 = dummykv.key;
	value_t valL1 = dummykv.key;
	keyy_t keyM1 = dummykv.key;
	value_t valM1 = dummykv.key;
	keyy_t keyA2 = dummykv.key;
	value_t valA2 = dummykv.key;
	keyy_t keyB2 = dummykv.key;
	value_t valB2 = dummykv.key;
	keyy_t keyC2 = dummykv.key;
	value_t valC2 = dummykv.key;
	keyy_t keyD2 = dummykv.key;
	value_t valD2 = dummykv.key;
	keyy_t keyE2 = dummykv.key;
	value_t valE2 = dummykv.key;
	keyy_t keyF2 = dummykv.key;
	value_t valF2 = dummykv.key;
	keyy_t keyG2 = dummykv.key;
	value_t valG2 = dummykv.key;
	keyy_t keyH2 = dummykv.key;
	value_t valH2 = dummykv.key;
	keyy_t keyI2 = dummykv.key;
	value_t valI2 = dummykv.key;
	keyy_t keyJ2 = dummykv.key;
	value_t valJ2 = dummykv.key;
	keyy_t keyK2 = dummykv.key;
	value_t valK2 = dummykv.key;
	keyy_t keyL2 = dummykv.key;
	value_t valL2 = dummykv.key;
	keyy_t keyM2 = dummykv.key;
	value_t valM2 = dummykv.key;
	keyy_t keyA3 = dummykv.key;
	value_t valA3 = dummykv.key;
	keyy_t keyB3 = dummykv.key;
	value_t valB3 = dummykv.key;
	keyy_t keyC3 = dummykv.key;
	value_t valC3 = dummykv.key;
	keyy_t keyD3 = dummykv.key;
	value_t valD3 = dummykv.key;
	keyy_t keyE3 = dummykv.key;
	value_t valE3 = dummykv.key;
	keyy_t keyF3 = dummykv.key;
	value_t valF3 = dummykv.key;
	keyy_t keyG3 = dummykv.key;
	value_t valG3 = dummykv.key;
	keyy_t keyH3 = dummykv.key;
	value_t valH3 = dummykv.key;
	keyy_t keyI3 = dummykv.key;
	value_t valI3 = dummykv.key;
	keyy_t keyJ3 = dummykv.key;
	value_t valJ3 = dummykv.key;
	keyy_t keyK3 = dummykv.key;
	value_t valK3 = dummykv.key;
	keyy_t keyL3 = dummykv.key;
	value_t valL3 = dummykv.key;
	keyy_t keyM3 = dummykv.key;
	value_t valM3 = dummykv.key;
	keyy_t keyA4 = dummykv.key;
	value_t valA4 = dummykv.key;
	keyy_t keyB4 = dummykv.key;
	value_t valB4 = dummykv.key;
	keyy_t keyC4 = dummykv.key;
	value_t valC4 = dummykv.key;
	keyy_t keyD4 = dummykv.key;
	value_t valD4 = dummykv.key;
	keyy_t keyE4 = dummykv.key;
	value_t valE4 = dummykv.key;
	keyy_t keyF4 = dummykv.key;
	value_t valF4 = dummykv.key;
	keyy_t keyG4 = dummykv.key;
	value_t valG4 = dummykv.key;
	keyy_t keyH4 = dummykv.key;
	value_t valH4 = dummykv.key;
	keyy_t keyI4 = dummykv.key;
	value_t valI4 = dummykv.key;
	keyy_t keyJ4 = dummykv.key;
	value_t valJ4 = dummykv.key;
	keyy_t keyK4 = dummykv.key;
	value_t valK4 = dummykv.key;
	keyy_t keyL4 = dummykv.key;
	value_t valL4 = dummykv.key;
	keyy_t keyM4 = dummykv.key;
	value_t valM4 = dummykv.key;
	keyy_t keyA5 = dummykv.key;
	value_t valA5 = dummykv.key;
	keyy_t keyB5 = dummykv.key;
	value_t valB5 = dummykv.key;
	keyy_t keyC5 = dummykv.key;
	value_t valC5 = dummykv.key;
	keyy_t keyD5 = dummykv.key;
	value_t valD5 = dummykv.key;
	keyy_t keyE5 = dummykv.key;
	value_t valE5 = dummykv.key;
	keyy_t keyF5 = dummykv.key;
	value_t valF5 = dummykv.key;
	keyy_t keyG5 = dummykv.key;
	value_t valG5 = dummykv.key;
	keyy_t keyH5 = dummykv.key;
	value_t valH5 = dummykv.key;
	keyy_t keyI5 = dummykv.key;
	value_t valI5 = dummykv.key;
	keyy_t keyJ5 = dummykv.key;
	value_t valJ5 = dummykv.key;
	keyy_t keyK5 = dummykv.key;
	value_t valK5 = dummykv.key;
	keyy_t keyL5 = dummykv.key;
	value_t valL5 = dummykv.key;
	keyy_t keyM5 = dummykv.key;
	value_t valM5 = dummykv.key;
	keyy_t keyA6 = dummykv.key;
	value_t valA6 = dummykv.key;
	keyy_t keyB6 = dummykv.key;
	value_t valB6 = dummykv.key;
	keyy_t keyC6 = dummykv.key;
	value_t valC6 = dummykv.key;
	keyy_t keyD6 = dummykv.key;
	value_t valD6 = dummykv.key;
	keyy_t keyE6 = dummykv.key;
	value_t valE6 = dummykv.key;
	keyy_t keyF6 = dummykv.key;
	value_t valF6 = dummykv.key;
	keyy_t keyG6 = dummykv.key;
	value_t valG6 = dummykv.key;
	keyy_t keyH6 = dummykv.key;
	value_t valH6 = dummykv.key;
	keyy_t keyI6 = dummykv.key;
	value_t valI6 = dummykv.key;
	keyy_t keyJ6 = dummykv.key;
	value_t valJ6 = dummykv.key;
	keyy_t keyK6 = dummykv.key;
	value_t valK6 = dummykv.key;
	keyy_t keyL6 = dummykv.key;
	value_t valL6 = dummykv.key;
	keyy_t keyM6 = dummykv.key;
	value_t valM6 = dummykv.key;
	keyy_t keyA7 = dummykv.key;
	value_t valA7 = dummykv.key;
	keyy_t keyB7 = dummykv.key;
	value_t valB7 = dummykv.key;
	keyy_t keyC7 = dummykv.key;
	value_t valC7 = dummykv.key;
	keyy_t keyD7 = dummykv.key;
	value_t valD7 = dummykv.key;
	keyy_t keyE7 = dummykv.key;
	value_t valE7 = dummykv.key;
	keyy_t keyF7 = dummykv.key;
	value_t valF7 = dummykv.key;
	keyy_t keyG7 = dummykv.key;
	value_t valG7 = dummykv.key;
	keyy_t keyH7 = dummykv.key;
	value_t valH7 = dummykv.key;
	keyy_t keyI7 = dummykv.key;
	value_t valI7 = dummykv.key;
	keyy_t keyJ7 = dummykv.key;
	value_t valJ7 = dummykv.key;
	keyy_t keyK7 = dummykv.key;
	value_t valK7 = dummykv.key;
	keyy_t keyL7 = dummykv.key;
	value_t valL7 = dummykv.key;
	keyy_t keyM7 = dummykv.key;
	value_t valM7 = dummykv.key;
	
	MERGE10_LOOP1: for (buffer_type j=0; j<BLOCKRAM_SIZE; j++){
	#pragma HLS PIPELINE II=1
		keyvalue_t mykeyvalue00 = UTIL_GETKV2(vbuffer0[begincol + 0][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue01 = UTIL_GETKV2(vbuffer0[begincol + 1][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue02 = UTIL_GETKV2(vbuffer0[begincol + 2][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue03 = UTIL_GETKV2(vbuffer0[begincol + 3][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue04 = UTIL_GETKV2(vbuffer0[begincol + 4][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue05 = UTIL_GETKV2(vbuffer0[begincol + 5][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue06 = UTIL_GETKV2(vbuffer0[begincol + 6][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue07 = UTIL_GETKV2(vbuffer0[begincol + 7][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue10 = UTIL_GETKV2(vbuffer1[begincol + 0][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue11 = UTIL_GETKV2(vbuffer1[begincol + 1][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue12 = UTIL_GETKV2(vbuffer1[begincol + 2][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue13 = UTIL_GETKV2(vbuffer1[begincol + 3][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue14 = UTIL_GETKV2(vbuffer1[begincol + 4][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue15 = UTIL_GETKV2(vbuffer1[begincol + 5][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue16 = UTIL_GETKV2(vbuffer1[begincol + 6][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue17 = UTIL_GETKV2(vbuffer1[begincol + 7][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue20 = UTIL_GETKV2(vbuffer2[begincol + 0][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue21 = UTIL_GETKV2(vbuffer2[begincol + 1][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue22 = UTIL_GETKV2(vbuffer2[begincol + 2][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue23 = UTIL_GETKV2(vbuffer2[begincol + 3][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue24 = UTIL_GETKV2(vbuffer2[begincol + 4][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue25 = UTIL_GETKV2(vbuffer2[begincol + 5][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue26 = UTIL_GETKV2(vbuffer2[begincol + 6][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue27 = UTIL_GETKV2(vbuffer2[begincol + 7][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue30 = UTIL_GETKV2(vbuffer3[begincol + 0][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue31 = UTIL_GETKV2(vbuffer3[begincol + 1][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue32 = UTIL_GETKV2(vbuffer3[begincol + 2][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue33 = UTIL_GETKV2(vbuffer3[begincol + 3][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue34 = UTIL_GETKV2(vbuffer3[begincol + 4][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue35 = UTIL_GETKV2(vbuffer3[begincol + 5][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue36 = UTIL_GETKV2(vbuffer3[begincol + 6][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue37 = UTIL_GETKV2(vbuffer3[begincol + 7][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue40 = UTIL_GETKV2(vbuffer4[begincol + 0][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue41 = UTIL_GETKV2(vbuffer4[begincol + 1][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue42 = UTIL_GETKV2(vbuffer4[begincol + 2][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue43 = UTIL_GETKV2(vbuffer4[begincol + 3][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue44 = UTIL_GETKV2(vbuffer4[begincol + 4][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue45 = UTIL_GETKV2(vbuffer4[begincol + 5][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue46 = UTIL_GETKV2(vbuffer4[begincol + 6][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue47 = UTIL_GETKV2(vbuffer4[begincol + 7][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue50 = UTIL_GETKV2(vbuffer5[begincol + 0][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue51 = UTIL_GETKV2(vbuffer5[begincol + 1][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue52 = UTIL_GETKV2(vbuffer5[begincol + 2][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue53 = UTIL_GETKV2(vbuffer5[begincol + 3][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue54 = UTIL_GETKV2(vbuffer5[begincol + 4][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue55 = UTIL_GETKV2(vbuffer5[begincol + 5][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue56 = UTIL_GETKV2(vbuffer5[begincol + 6][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue57 = UTIL_GETKV2(vbuffer5[begincol + 7][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue60 = UTIL_GETKV2(vbuffer6[begincol + 0][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue61 = UTIL_GETKV2(vbuffer6[begincol + 1][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue62 = UTIL_GETKV2(vbuffer6[begincol + 2][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue63 = UTIL_GETKV2(vbuffer6[begincol + 3][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue64 = UTIL_GETKV2(vbuffer6[begincol + 4][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue65 = UTIL_GETKV2(vbuffer6[begincol + 5][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue66 = UTIL_GETKV2(vbuffer6[begincol + 6][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue67 = UTIL_GETKV2(vbuffer6[begincol + 7][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue70 = UTIL_GETKV2(vbuffer7[begincol + 0][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue71 = UTIL_GETKV2(vbuffer7[begincol + 1][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue72 = UTIL_GETKV2(vbuffer7[begincol + 2][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue73 = UTIL_GETKV2(vbuffer7[begincol + 3][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue74 = UTIL_GETKV2(vbuffer7[begincol + 4][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue75 = UTIL_GETKV2(vbuffer7[begincol + 5][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue76 = UTIL_GETKV2(vbuffer7[begincol + 6][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue77 = UTIL_GETKV2(vbuffer7[begincol + 7][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue80 = UTIL_GETKV2(vbuffer8[begincol + 0][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue81 = UTIL_GETKV2(vbuffer8[begincol + 1][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue82 = UTIL_GETKV2(vbuffer8[begincol + 2][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue83 = UTIL_GETKV2(vbuffer8[begincol + 3][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue84 = UTIL_GETKV2(vbuffer8[begincol + 4][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue85 = UTIL_GETKV2(vbuffer8[begincol + 5][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue86 = UTIL_GETKV2(vbuffer8[begincol + 6][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue87 = UTIL_GETKV2(vbuffer8[begincol + 7][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue90 = UTIL_GETKV2(vbuffer9[begincol + 0][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue91 = UTIL_GETKV2(vbuffer9[begincol + 1][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue92 = UTIL_GETKV2(vbuffer9[begincol + 2][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue93 = UTIL_GETKV2(vbuffer9[begincol + 3][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue94 = UTIL_GETKV2(vbuffer9[begincol + 4][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue95 = UTIL_GETKV2(vbuffer9[begincol + 5][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue96 = UTIL_GETKV2(vbuffer9[begincol + 6][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue97 = UTIL_GETKV2(vbuffer9[begincol + 7][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue100 = dummykv;
		keyvalue_t mykeyvalue101 = dummykv;
		keyvalue_t mykeyvalue102 = dummykv;
		keyvalue_t mykeyvalue103 = dummykv;
		keyvalue_t mykeyvalue104 = dummykv;
		keyvalue_t mykeyvalue105 = dummykv;
		keyvalue_t mykeyvalue106 = dummykv;
		keyvalue_t mykeyvalue107 = dummykv;
		keyvalue_t mykeyvalue110 = dummykv;
		keyvalue_t mykeyvalue111 = dummykv;
		keyvalue_t mykeyvalue112 = dummykv;
		keyvalue_t mykeyvalue113 = dummykv;
		keyvalue_t mykeyvalue114 = dummykv;
		keyvalue_t mykeyvalue115 = dummykv;
		keyvalue_t mykeyvalue116 = dummykv;
		keyvalue_t mykeyvalue117 = dummykv;
		keyvalue_t mykeyvalue120 = dummykv;
		keyvalue_t mykeyvalue121 = dummykv;
		keyvalue_t mykeyvalue122 = dummykv;
		keyvalue_t mykeyvalue123 = dummykv;
		keyvalue_t mykeyvalue124 = dummykv;
		keyvalue_t mykeyvalue125 = dummykv;
		keyvalue_t mykeyvalue126 = dummykv;
		keyvalue_t mykeyvalue127 = dummykv;
		keyvalue_t mykeyvalue130 = dummykv;
		keyvalue_t mykeyvalue131 = dummykv;
		keyvalue_t mykeyvalue132 = dummykv;
		keyvalue_t mykeyvalue133 = dummykv;
		keyvalue_t mykeyvalue134 = dummykv;
		keyvalue_t mykeyvalue135 = dummykv;
		keyvalue_t mykeyvalue136 = dummykv;
		keyvalue_t mykeyvalue137 = dummykv;
		keyvalue_t mykeyvalue140 = dummykv;
		keyvalue_t mykeyvalue141 = dummykv;
		keyvalue_t mykeyvalue142 = dummykv;
		keyvalue_t mykeyvalue143 = dummykv;
		keyvalue_t mykeyvalue144 = dummykv;
		keyvalue_t mykeyvalue145 = dummykv;
		keyvalue_t mykeyvalue146 = dummykv;
		keyvalue_t mykeyvalue147 = dummykv;
		
		//((n)/2)
		keyA0 = MERGE_mergefunc(mykeyvalue00.key, mykeyvalue10.key, NAp);
		keyB0 = MERGE_mergefunc(mykeyvalue20.key, mykeyvalue30.key, NAp);
		keyC0 = MERGE_mergefunc(mykeyvalue40.key, mykeyvalue50.key, NAp);
		keyD0 = MERGE_mergefunc(mykeyvalue60.key, mykeyvalue70.key, NAp);
		keyE0 = MERGE_mergefunc(mykeyvalue80.key, mykeyvalue90.key, NAp);
		keyF0 = MERGE_mergefunc(mykeyvalue100.key, mykeyvalue110.key, NAp);
		keyA1 = MERGE_mergefunc(mykeyvalue01.key, mykeyvalue11.key, NAp);
		keyB1 = MERGE_mergefunc(mykeyvalue21.key, mykeyvalue31.key, NAp);
		keyC1 = MERGE_mergefunc(mykeyvalue41.key, mykeyvalue51.key, NAp);
		keyD1 = MERGE_mergefunc(mykeyvalue61.key, mykeyvalue71.key, NAp);
		keyE1 = MERGE_mergefunc(mykeyvalue81.key, mykeyvalue91.key, NAp);
		keyF1 = MERGE_mergefunc(mykeyvalue101.key, mykeyvalue111.key, NAp);
		keyA2 = MERGE_mergefunc(mykeyvalue02.key, mykeyvalue12.key, NAp);
		keyB2 = MERGE_mergefunc(mykeyvalue22.key, mykeyvalue32.key, NAp);
		keyC2 = MERGE_mergefunc(mykeyvalue42.key, mykeyvalue52.key, NAp);
		keyD2 = MERGE_mergefunc(mykeyvalue62.key, mykeyvalue72.key, NAp);
		keyE2 = MERGE_mergefunc(mykeyvalue82.key, mykeyvalue92.key, NAp);
		keyF2 = MERGE_mergefunc(mykeyvalue102.key, mykeyvalue112.key, NAp);
		keyA3 = MERGE_mergefunc(mykeyvalue03.key, mykeyvalue13.key, NAp);
		keyB3 = MERGE_mergefunc(mykeyvalue23.key, mykeyvalue33.key, NAp);
		keyC3 = MERGE_mergefunc(mykeyvalue43.key, mykeyvalue53.key, NAp);
		keyD3 = MERGE_mergefunc(mykeyvalue63.key, mykeyvalue73.key, NAp);
		keyE3 = MERGE_mergefunc(mykeyvalue83.key, mykeyvalue93.key, NAp);
		keyF3 = MERGE_mergefunc(mykeyvalue103.key, mykeyvalue113.key, NAp);
		keyA4 = MERGE_mergefunc(mykeyvalue04.key, mykeyvalue14.key, NAp);
		keyB4 = MERGE_mergefunc(mykeyvalue24.key, mykeyvalue34.key, NAp);
		keyC4 = MERGE_mergefunc(mykeyvalue44.key, mykeyvalue54.key, NAp);
		keyD4 = MERGE_mergefunc(mykeyvalue64.key, mykeyvalue74.key, NAp);
		keyE4 = MERGE_mergefunc(mykeyvalue84.key, mykeyvalue94.key, NAp);
		keyF4 = MERGE_mergefunc(mykeyvalue104.key, mykeyvalue114.key, NAp);
		keyA5 = MERGE_mergefunc(mykeyvalue05.key, mykeyvalue15.key, NAp);
		keyB5 = MERGE_mergefunc(mykeyvalue25.key, mykeyvalue35.key, NAp);
		keyC5 = MERGE_mergefunc(mykeyvalue45.key, mykeyvalue55.key, NAp);
		keyD5 = MERGE_mergefunc(mykeyvalue65.key, mykeyvalue75.key, NAp);
		keyE5 = MERGE_mergefunc(mykeyvalue85.key, mykeyvalue95.key, NAp);
		keyF5 = MERGE_mergefunc(mykeyvalue105.key, mykeyvalue115.key, NAp);
		keyA6 = MERGE_mergefunc(mykeyvalue06.key, mykeyvalue16.key, NAp);
		keyB6 = MERGE_mergefunc(mykeyvalue26.key, mykeyvalue36.key, NAp);
		keyC6 = MERGE_mergefunc(mykeyvalue46.key, mykeyvalue56.key, NAp);
		keyD6 = MERGE_mergefunc(mykeyvalue66.key, mykeyvalue76.key, NAp);
		keyE6 = MERGE_mergefunc(mykeyvalue86.key, mykeyvalue96.key, NAp);
		keyF6 = MERGE_mergefunc(mykeyvalue106.key, mykeyvalue116.key, NAp);
		keyA7 = MERGE_mergefunc(mykeyvalue07.key, mykeyvalue17.key, NAp);
		keyB7 = MERGE_mergefunc(mykeyvalue27.key, mykeyvalue37.key, NAp);
		keyC7 = MERGE_mergefunc(mykeyvalue47.key, mykeyvalue57.key, NAp);
		keyD7 = MERGE_mergefunc(mykeyvalue67.key, mykeyvalue77.key, NAp);
		keyE7 = MERGE_mergefunc(mykeyvalue87.key, mykeyvalue97.key, NAp);
		keyF7 = MERGE_mergefunc(mykeyvalue107.key, mykeyvalue117.key, NAp);
		keyy_t keyPA0 = MERGE_mergefunc(keyA0, keyB0, NAp);
		keyy_t keyPB0 = MERGE_mergefunc(keyC0, keyD0, NAp);
		keyy_t keyPC0 = MERGE_mergefunc(keyE0, keyF0, NAp);
		keyy_t keyRA0 = MERGE_mergefunc(keyPA0, keyPB0, NAp);
		keyy_t keyRB0 = MERGE_mergefunc(keyPC0, keyF0, NAp);
		keyy_t keyRZ0 = MERGE_mergefunc(keyRA0, keyRB0, NAp);
		keyy_t keyPA1 = MERGE_mergefunc(keyA1, keyB1, NAp);
		keyy_t keyPB1 = MERGE_mergefunc(keyC1, keyD1, NAp);
		keyy_t keyPC1 = MERGE_mergefunc(keyE1, keyF1, NAp);
		keyy_t keyRA1 = MERGE_mergefunc(keyPA1, keyPB1, NAp);
		keyy_t keyRB1 = MERGE_mergefunc(keyPC1, keyF1, NAp);
		keyy_t keyRZ1 = MERGE_mergefunc(keyRA1, keyRB1, NAp);
		keyy_t keyPA2 = MERGE_mergefunc(keyA2, keyB2, NAp);
		keyy_t keyPB2 = MERGE_mergefunc(keyC2, keyD2, NAp);
		keyy_t keyPC2 = MERGE_mergefunc(keyE2, keyF2, NAp);
		keyy_t keyRA2 = MERGE_mergefunc(keyPA2, keyPB2, NAp);
		keyy_t keyRB2 = MERGE_mergefunc(keyPC2, keyF2, NAp);
		keyy_t keyRZ2 = MERGE_mergefunc(keyRA2, keyRB2, NAp);
		keyy_t keyPA3 = MERGE_mergefunc(keyA3, keyB3, NAp);
		keyy_t keyPB3 = MERGE_mergefunc(keyC3, keyD3, NAp);
		keyy_t keyPC3 = MERGE_mergefunc(keyE3, keyF3, NAp);
		keyy_t keyRA3 = MERGE_mergefunc(keyPA3, keyPB3, NAp);
		keyy_t keyRB3 = MERGE_mergefunc(keyPC3, keyF3, NAp);
		keyy_t keyRZ3 = MERGE_mergefunc(keyRA3, keyRB3, NAp);
		keyy_t keyPA4 = MERGE_mergefunc(keyA4, keyB4, NAp);
		keyy_t keyPB4 = MERGE_mergefunc(keyC4, keyD4, NAp);
		keyy_t keyPC4 = MERGE_mergefunc(keyE4, keyF4, NAp);
		keyy_t keyRA4 = MERGE_mergefunc(keyPA4, keyPB4, NAp);
		keyy_t keyRB4 = MERGE_mergefunc(keyPC4, keyF4, NAp);
		keyy_t keyRZ4 = MERGE_mergefunc(keyRA4, keyRB4, NAp);
		keyy_t keyPA5 = MERGE_mergefunc(keyA5, keyB5, NAp);
		keyy_t keyPB5 = MERGE_mergefunc(keyC5, keyD5, NAp);
		keyy_t keyPC5 = MERGE_mergefunc(keyE5, keyF5, NAp);
		keyy_t keyRA5 = MERGE_mergefunc(keyPA5, keyPB5, NAp);
		keyy_t keyRB5 = MERGE_mergefunc(keyPC5, keyF5, NAp);
		keyy_t keyRZ5 = MERGE_mergefunc(keyRA5, keyRB5, NAp);
		keyy_t keyPA6 = MERGE_mergefunc(keyA6, keyB6, NAp);
		keyy_t keyPB6 = MERGE_mergefunc(keyC6, keyD6, NAp);
		keyy_t keyPC6 = MERGE_mergefunc(keyE6, keyF6, NAp);
		keyy_t keyRA6 = MERGE_mergefunc(keyPA6, keyPB6, NAp);
		keyy_t keyRB6 = MERGE_mergefunc(keyPC6, keyF6, NAp);
		keyy_t keyRZ6 = MERGE_mergefunc(keyRA6, keyRB6, NAp);
		keyy_t keyPA7 = MERGE_mergefunc(keyA7, keyB7, NAp);
		keyy_t keyPB7 = MERGE_mergefunc(keyC7, keyD7, NAp);
		keyy_t keyPC7 = MERGE_mergefunc(keyE7, keyF7, NAp);
		keyy_t keyRA7 = MERGE_mergefunc(keyPA7, keyPB7, NAp);
		keyy_t keyRB7 = MERGE_mergefunc(keyPC7, keyF7, NAp);
		keyy_t keyRZ7 = MERGE_mergefunc(keyRA7, keyRB7, NAp);
		
		//((n)/2)
		valA0 = MERGE_mergefunc(mykeyvalue00.value, mykeyvalue10.value, NAp);
		valB0 = MERGE_mergefunc(mykeyvalue20.value, mykeyvalue30.value, NAp);
		valC0 = MERGE_mergefunc(mykeyvalue40.value, mykeyvalue50.value, NAp);
		valD0 = MERGE_mergefunc(mykeyvalue60.value, mykeyvalue70.value, NAp);
		valE0 = MERGE_mergefunc(mykeyvalue80.value, mykeyvalue90.value, NAp);
		valF0 = MERGE_mergefunc(mykeyvalue100.value, mykeyvalue110.value, NAp);
		valA1 = MERGE_mergefunc(mykeyvalue01.value, mykeyvalue11.value, NAp);
		valB1 = MERGE_mergefunc(mykeyvalue21.value, mykeyvalue31.value, NAp);
		valC1 = MERGE_mergefunc(mykeyvalue41.value, mykeyvalue51.value, NAp);
		valD1 = MERGE_mergefunc(mykeyvalue61.value, mykeyvalue71.value, NAp);
		valE1 = MERGE_mergefunc(mykeyvalue81.value, mykeyvalue91.value, NAp);
		valF1 = MERGE_mergefunc(mykeyvalue101.value, mykeyvalue111.value, NAp);
		valA2 = MERGE_mergefunc(mykeyvalue02.value, mykeyvalue12.value, NAp);
		valB2 = MERGE_mergefunc(mykeyvalue22.value, mykeyvalue32.value, NAp);
		valC2 = MERGE_mergefunc(mykeyvalue42.value, mykeyvalue52.value, NAp);
		valD2 = MERGE_mergefunc(mykeyvalue62.value, mykeyvalue72.value, NAp);
		valE2 = MERGE_mergefunc(mykeyvalue82.value, mykeyvalue92.value, NAp);
		valF2 = MERGE_mergefunc(mykeyvalue102.value, mykeyvalue112.value, NAp);
		valA3 = MERGE_mergefunc(mykeyvalue03.value, mykeyvalue13.value, NAp);
		valB3 = MERGE_mergefunc(mykeyvalue23.value, mykeyvalue33.value, NAp);
		valC3 = MERGE_mergefunc(mykeyvalue43.value, mykeyvalue53.value, NAp);
		valD3 = MERGE_mergefunc(mykeyvalue63.value, mykeyvalue73.value, NAp);
		valE3 = MERGE_mergefunc(mykeyvalue83.value, mykeyvalue93.value, NAp);
		valF3 = MERGE_mergefunc(mykeyvalue103.value, mykeyvalue113.value, NAp);
		valA4 = MERGE_mergefunc(mykeyvalue04.value, mykeyvalue14.value, NAp);
		valB4 = MERGE_mergefunc(mykeyvalue24.value, mykeyvalue34.value, NAp);
		valC4 = MERGE_mergefunc(mykeyvalue44.value, mykeyvalue54.value, NAp);
		valD4 = MERGE_mergefunc(mykeyvalue64.value, mykeyvalue74.value, NAp);
		valE4 = MERGE_mergefunc(mykeyvalue84.value, mykeyvalue94.value, NAp);
		valF4 = MERGE_mergefunc(mykeyvalue104.value, mykeyvalue114.value, NAp);
		valA5 = MERGE_mergefunc(mykeyvalue05.value, mykeyvalue15.value, NAp);
		valB5 = MERGE_mergefunc(mykeyvalue25.value, mykeyvalue35.value, NAp);
		valC5 = MERGE_mergefunc(mykeyvalue45.value, mykeyvalue55.value, NAp);
		valD5 = MERGE_mergefunc(mykeyvalue65.value, mykeyvalue75.value, NAp);
		valE5 = MERGE_mergefunc(mykeyvalue85.value, mykeyvalue95.value, NAp);
		valF5 = MERGE_mergefunc(mykeyvalue105.value, mykeyvalue115.value, NAp);
		valA6 = MERGE_mergefunc(mykeyvalue06.value, mykeyvalue16.value, NAp);
		valB6 = MERGE_mergefunc(mykeyvalue26.value, mykeyvalue36.value, NAp);
		valC6 = MERGE_mergefunc(mykeyvalue46.value, mykeyvalue56.value, NAp);
		valD6 = MERGE_mergefunc(mykeyvalue66.value, mykeyvalue76.value, NAp);
		valE6 = MERGE_mergefunc(mykeyvalue86.value, mykeyvalue96.value, NAp);
		valF6 = MERGE_mergefunc(mykeyvalue106.value, mykeyvalue116.value, NAp);
		valA7 = MERGE_mergefunc(mykeyvalue07.value, mykeyvalue17.value, NAp);
		valB7 = MERGE_mergefunc(mykeyvalue27.value, mykeyvalue37.value, NAp);
		valC7 = MERGE_mergefunc(mykeyvalue47.value, mykeyvalue57.value, NAp);
		valD7 = MERGE_mergefunc(mykeyvalue67.value, mykeyvalue77.value, NAp);
		valE7 = MERGE_mergefunc(mykeyvalue87.value, mykeyvalue97.value, NAp);
		valF7 = MERGE_mergefunc(mykeyvalue107.value, mykeyvalue117.value, NAp);
		value_t valPA0 = MERGE_mergefunc(valA0, valB0, NAp);
		value_t valPB0 = MERGE_mergefunc(valC0, valD0, NAp);
		value_t valPC0 = MERGE_mergefunc(valE0, valF0, NAp);
		value_t valRA0 = MERGE_mergefunc(valPA0, valPB0, NAp);
		value_t valRB0 = MERGE_mergefunc(valPC0, valF0, NAp);
		value_t valRZ0 = MERGE_mergefunc(valRA0, valRB0, NAp);
		value_t valPA1 = MERGE_mergefunc(valA1, valB1, NAp);
		value_t valPB1 = MERGE_mergefunc(valC1, valD1, NAp);
		value_t valPC1 = MERGE_mergefunc(valE1, valF1, NAp);
		value_t valRA1 = MERGE_mergefunc(valPA1, valPB1, NAp);
		value_t valRB1 = MERGE_mergefunc(valPC1, valF1, NAp);
		value_t valRZ1 = MERGE_mergefunc(valRA1, valRB1, NAp);
		value_t valPA2 = MERGE_mergefunc(valA2, valB2, NAp);
		value_t valPB2 = MERGE_mergefunc(valC2, valD2, NAp);
		value_t valPC2 = MERGE_mergefunc(valE2, valF2, NAp);
		value_t valRA2 = MERGE_mergefunc(valPA2, valPB2, NAp);
		value_t valRB2 = MERGE_mergefunc(valPC2, valF2, NAp);
		value_t valRZ2 = MERGE_mergefunc(valRA2, valRB2, NAp);
		value_t valPA3 = MERGE_mergefunc(valA3, valB3, NAp);
		value_t valPB3 = MERGE_mergefunc(valC3, valD3, NAp);
		value_t valPC3 = MERGE_mergefunc(valE3, valF3, NAp);
		value_t valRA3 = MERGE_mergefunc(valPA3, valPB3, NAp);
		value_t valRB3 = MERGE_mergefunc(valPC3, valF3, NAp);
		value_t valRZ3 = MERGE_mergefunc(valRA3, valRB3, NAp);
		value_t valPA4 = MERGE_mergefunc(valA4, valB4, NAp);
		value_t valPB4 = MERGE_mergefunc(valC4, valD4, NAp);
		value_t valPC4 = MERGE_mergefunc(valE4, valF4, NAp);
		value_t valRA4 = MERGE_mergefunc(valPA4, valPB4, NAp);
		value_t valRB4 = MERGE_mergefunc(valPC4, valF4, NAp);
		value_t valRZ4 = MERGE_mergefunc(valRA4, valRB4, NAp);
		value_t valPA5 = MERGE_mergefunc(valA5, valB5, NAp);
		value_t valPB5 = MERGE_mergefunc(valC5, valD5, NAp);
		value_t valPC5 = MERGE_mergefunc(valE5, valF5, NAp);
		value_t valRA5 = MERGE_mergefunc(valPA5, valPB5, NAp);
		value_t valRB5 = MERGE_mergefunc(valPC5, valF5, NAp);
		value_t valRZ5 = MERGE_mergefunc(valRA5, valRB5, NAp);
		value_t valPA6 = MERGE_mergefunc(valA6, valB6, NAp);
		value_t valPB6 = MERGE_mergefunc(valC6, valD6, NAp);
		value_t valPC6 = MERGE_mergefunc(valE6, valF6, NAp);
		value_t valRA6 = MERGE_mergefunc(valPA6, valPB6, NAp);
		value_t valRB6 = MERGE_mergefunc(valPC6, valF6, NAp);
		value_t valRZ6 = MERGE_mergefunc(valRA6, valRB6, NAp);
		value_t valPA7 = MERGE_mergefunc(valA7, valB7, NAp);
		value_t valPB7 = MERGE_mergefunc(valC7, valD7, NAp);
		value_t valPC7 = MERGE_mergefunc(valE7, valF7, NAp);
		value_t valRA7 = MERGE_mergefunc(valPA7, valPB7, NAp);
		value_t valRB7 = MERGE_mergefunc(valPC7, valF7, NAp);
		value_t valRZ7 = MERGE_mergefunc(valRA7, valRB7, NAp);
		
		#ifdef _WIDEWORD
		vdram[dramoffset_kvs + j].range(31, 0) = keyRZ0;
		vdram[dramoffset_kvs + j].range(63, 32) = valRZ0;
		vdram[dramoffset_kvs + j].range(95, 64) = keyRZ1;
		vdram[dramoffset_kvs + j].range(127, 96) = valRZ1;
		vdram[dramoffset_kvs + j].range(159, 128) = keyRZ2;
		vdram[dramoffset_kvs + j].range(191, 160) = valRZ2;
		vdram[dramoffset_kvs + j].range(223, 192) = keyRZ3;
		vdram[dramoffset_kvs + j].range(255, 224) = valRZ3;
		vdram[dramoffset_kvs + j].range(287, 256) = keyRZ4;
		vdram[dramoffset_kvs + j].range(319, 288) = valRZ4;
		vdram[dramoffset_kvs + j].range(351, 320) = keyRZ5;
		vdram[dramoffset_kvs + j].range(383, 352) = valRZ5;
		vdram[dramoffset_kvs + j].range(415, 384) = keyRZ6;
		vdram[dramoffset_kvs + j].range(447, 416) = valRZ6;
		vdram[dramoffset_kvs + j].range(479, 448) = keyRZ7;
		vdram[dramoffset_kvs + j].range(511, 480) = valRZ7;
		#else
		vdram[dramoffset_kvs + j].data[0].key = keyRZ0;
		vdram[dramoffset_kvs + j].data[0].value = valRZ0;
		vdram[dramoffset_kvs + j].data[1].key = keyRZ1;
		vdram[dramoffset_kvs + j].data[1].value = valRZ1;
		vdram[dramoffset_kvs + j].data[2].key = keyRZ2;
		vdram[dramoffset_kvs + j].data[2].value = valRZ2;
		vdram[dramoffset_kvs + j].data[3].key = keyRZ3;
		vdram[dramoffset_kvs + j].data[3].value = valRZ3;
		vdram[dramoffset_kvs + j].data[4].key = keyRZ4;
		vdram[dramoffset_kvs + j].data[4].value = valRZ4;
		vdram[dramoffset_kvs + j].data[5].key = keyRZ5;
		vdram[dramoffset_kvs + j].data[5].value = valRZ5;
		vdram[dramoffset_kvs + j].data[6].key = keyRZ6;
		vdram[dramoffset_kvs + j].data[6].value = valRZ6;
		vdram[dramoffset_kvs + j].data[7].key = keyRZ7;
		vdram[dramoffset_kvs + j].data[7].value = valRZ7;
		#endif
	}
	return;
}
void acts_all::MERGE_merge11andsavevdata(bool_type enable, uint512_dt * vdram, keyvalue_vbuffer_t vbuffer0[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t vbuffer1[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t vbuffer2[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t vbuffer3[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t vbuffer4[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t vbuffer5[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t vbuffer6[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t vbuffer7[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t vbuffer8[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t vbuffer9[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t vbuffer10[VDATA_PACKINGSIZE][BLOCKRAM_SIZE], unsigned int begincol, batch_type bufferoffset_kvs, unsigned int dramoffset_kvs){
	if(enable == OFF){ return; }
	keyvalue_t dummykv;
	dummykv.key = 0xFFFFFFFF; dummykv.value = 0xFFFFFFFF;
	
	keyy_t keyA0 = dummykv.key;
	value_t valA0 = dummykv.key;
	keyy_t keyB0 = dummykv.key;
	value_t valB0 = dummykv.key;
	keyy_t keyC0 = dummykv.key;
	value_t valC0 = dummykv.key;
	keyy_t keyD0 = dummykv.key;
	value_t valD0 = dummykv.key;
	keyy_t keyE0 = dummykv.key;
	value_t valE0 = dummykv.key;
	keyy_t keyF0 = dummykv.key;
	value_t valF0 = dummykv.key;
	keyy_t keyG0 = dummykv.key;
	value_t valG0 = dummykv.key;
	keyy_t keyH0 = dummykv.key;
	value_t valH0 = dummykv.key;
	keyy_t keyI0 = dummykv.key;
	value_t valI0 = dummykv.key;
	keyy_t keyJ0 = dummykv.key;
	value_t valJ0 = dummykv.key;
	keyy_t keyK0 = dummykv.key;
	value_t valK0 = dummykv.key;
	keyy_t keyL0 = dummykv.key;
	value_t valL0 = dummykv.key;
	keyy_t keyM0 = dummykv.key;
	value_t valM0 = dummykv.key;
	keyy_t keyA1 = dummykv.key;
	value_t valA1 = dummykv.key;
	keyy_t keyB1 = dummykv.key;
	value_t valB1 = dummykv.key;
	keyy_t keyC1 = dummykv.key;
	value_t valC1 = dummykv.key;
	keyy_t keyD1 = dummykv.key;
	value_t valD1 = dummykv.key;
	keyy_t keyE1 = dummykv.key;
	value_t valE1 = dummykv.key;
	keyy_t keyF1 = dummykv.key;
	value_t valF1 = dummykv.key;
	keyy_t keyG1 = dummykv.key;
	value_t valG1 = dummykv.key;
	keyy_t keyH1 = dummykv.key;
	value_t valH1 = dummykv.key;
	keyy_t keyI1 = dummykv.key;
	value_t valI1 = dummykv.key;
	keyy_t keyJ1 = dummykv.key;
	value_t valJ1 = dummykv.key;
	keyy_t keyK1 = dummykv.key;
	value_t valK1 = dummykv.key;
	keyy_t keyL1 = dummykv.key;
	value_t valL1 = dummykv.key;
	keyy_t keyM1 = dummykv.key;
	value_t valM1 = dummykv.key;
	keyy_t keyA2 = dummykv.key;
	value_t valA2 = dummykv.key;
	keyy_t keyB2 = dummykv.key;
	value_t valB2 = dummykv.key;
	keyy_t keyC2 = dummykv.key;
	value_t valC2 = dummykv.key;
	keyy_t keyD2 = dummykv.key;
	value_t valD2 = dummykv.key;
	keyy_t keyE2 = dummykv.key;
	value_t valE2 = dummykv.key;
	keyy_t keyF2 = dummykv.key;
	value_t valF2 = dummykv.key;
	keyy_t keyG2 = dummykv.key;
	value_t valG2 = dummykv.key;
	keyy_t keyH2 = dummykv.key;
	value_t valH2 = dummykv.key;
	keyy_t keyI2 = dummykv.key;
	value_t valI2 = dummykv.key;
	keyy_t keyJ2 = dummykv.key;
	value_t valJ2 = dummykv.key;
	keyy_t keyK2 = dummykv.key;
	value_t valK2 = dummykv.key;
	keyy_t keyL2 = dummykv.key;
	value_t valL2 = dummykv.key;
	keyy_t keyM2 = dummykv.key;
	value_t valM2 = dummykv.key;
	keyy_t keyA3 = dummykv.key;
	value_t valA3 = dummykv.key;
	keyy_t keyB3 = dummykv.key;
	value_t valB3 = dummykv.key;
	keyy_t keyC3 = dummykv.key;
	value_t valC3 = dummykv.key;
	keyy_t keyD3 = dummykv.key;
	value_t valD3 = dummykv.key;
	keyy_t keyE3 = dummykv.key;
	value_t valE3 = dummykv.key;
	keyy_t keyF3 = dummykv.key;
	value_t valF3 = dummykv.key;
	keyy_t keyG3 = dummykv.key;
	value_t valG3 = dummykv.key;
	keyy_t keyH3 = dummykv.key;
	value_t valH3 = dummykv.key;
	keyy_t keyI3 = dummykv.key;
	value_t valI3 = dummykv.key;
	keyy_t keyJ3 = dummykv.key;
	value_t valJ3 = dummykv.key;
	keyy_t keyK3 = dummykv.key;
	value_t valK3 = dummykv.key;
	keyy_t keyL3 = dummykv.key;
	value_t valL3 = dummykv.key;
	keyy_t keyM3 = dummykv.key;
	value_t valM3 = dummykv.key;
	keyy_t keyA4 = dummykv.key;
	value_t valA4 = dummykv.key;
	keyy_t keyB4 = dummykv.key;
	value_t valB4 = dummykv.key;
	keyy_t keyC4 = dummykv.key;
	value_t valC4 = dummykv.key;
	keyy_t keyD4 = dummykv.key;
	value_t valD4 = dummykv.key;
	keyy_t keyE4 = dummykv.key;
	value_t valE4 = dummykv.key;
	keyy_t keyF4 = dummykv.key;
	value_t valF4 = dummykv.key;
	keyy_t keyG4 = dummykv.key;
	value_t valG4 = dummykv.key;
	keyy_t keyH4 = dummykv.key;
	value_t valH4 = dummykv.key;
	keyy_t keyI4 = dummykv.key;
	value_t valI4 = dummykv.key;
	keyy_t keyJ4 = dummykv.key;
	value_t valJ4 = dummykv.key;
	keyy_t keyK4 = dummykv.key;
	value_t valK4 = dummykv.key;
	keyy_t keyL4 = dummykv.key;
	value_t valL4 = dummykv.key;
	keyy_t keyM4 = dummykv.key;
	value_t valM4 = dummykv.key;
	keyy_t keyA5 = dummykv.key;
	value_t valA5 = dummykv.key;
	keyy_t keyB5 = dummykv.key;
	value_t valB5 = dummykv.key;
	keyy_t keyC5 = dummykv.key;
	value_t valC5 = dummykv.key;
	keyy_t keyD5 = dummykv.key;
	value_t valD5 = dummykv.key;
	keyy_t keyE5 = dummykv.key;
	value_t valE5 = dummykv.key;
	keyy_t keyF5 = dummykv.key;
	value_t valF5 = dummykv.key;
	keyy_t keyG5 = dummykv.key;
	value_t valG5 = dummykv.key;
	keyy_t keyH5 = dummykv.key;
	value_t valH5 = dummykv.key;
	keyy_t keyI5 = dummykv.key;
	value_t valI5 = dummykv.key;
	keyy_t keyJ5 = dummykv.key;
	value_t valJ5 = dummykv.key;
	keyy_t keyK5 = dummykv.key;
	value_t valK5 = dummykv.key;
	keyy_t keyL5 = dummykv.key;
	value_t valL5 = dummykv.key;
	keyy_t keyM5 = dummykv.key;
	value_t valM5 = dummykv.key;
	keyy_t keyA6 = dummykv.key;
	value_t valA6 = dummykv.key;
	keyy_t keyB6 = dummykv.key;
	value_t valB6 = dummykv.key;
	keyy_t keyC6 = dummykv.key;
	value_t valC6 = dummykv.key;
	keyy_t keyD6 = dummykv.key;
	value_t valD6 = dummykv.key;
	keyy_t keyE6 = dummykv.key;
	value_t valE6 = dummykv.key;
	keyy_t keyF6 = dummykv.key;
	value_t valF6 = dummykv.key;
	keyy_t keyG6 = dummykv.key;
	value_t valG6 = dummykv.key;
	keyy_t keyH6 = dummykv.key;
	value_t valH6 = dummykv.key;
	keyy_t keyI6 = dummykv.key;
	value_t valI6 = dummykv.key;
	keyy_t keyJ6 = dummykv.key;
	value_t valJ6 = dummykv.key;
	keyy_t keyK6 = dummykv.key;
	value_t valK6 = dummykv.key;
	keyy_t keyL6 = dummykv.key;
	value_t valL6 = dummykv.key;
	keyy_t keyM6 = dummykv.key;
	value_t valM6 = dummykv.key;
	keyy_t keyA7 = dummykv.key;
	value_t valA7 = dummykv.key;
	keyy_t keyB7 = dummykv.key;
	value_t valB7 = dummykv.key;
	keyy_t keyC7 = dummykv.key;
	value_t valC7 = dummykv.key;
	keyy_t keyD7 = dummykv.key;
	value_t valD7 = dummykv.key;
	keyy_t keyE7 = dummykv.key;
	value_t valE7 = dummykv.key;
	keyy_t keyF7 = dummykv.key;
	value_t valF7 = dummykv.key;
	keyy_t keyG7 = dummykv.key;
	value_t valG7 = dummykv.key;
	keyy_t keyH7 = dummykv.key;
	value_t valH7 = dummykv.key;
	keyy_t keyI7 = dummykv.key;
	value_t valI7 = dummykv.key;
	keyy_t keyJ7 = dummykv.key;
	value_t valJ7 = dummykv.key;
	keyy_t keyK7 = dummykv.key;
	value_t valK7 = dummykv.key;
	keyy_t keyL7 = dummykv.key;
	value_t valL7 = dummykv.key;
	keyy_t keyM7 = dummykv.key;
	value_t valM7 = dummykv.key;
	
	MERGE11_LOOP1: for (buffer_type j=0; j<BLOCKRAM_SIZE; j++){
	#pragma HLS PIPELINE II=1
		keyvalue_t mykeyvalue00 = UTIL_GETKV2(vbuffer0[begincol + 0][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue01 = UTIL_GETKV2(vbuffer0[begincol + 1][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue02 = UTIL_GETKV2(vbuffer0[begincol + 2][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue03 = UTIL_GETKV2(vbuffer0[begincol + 3][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue04 = UTIL_GETKV2(vbuffer0[begincol + 4][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue05 = UTIL_GETKV2(vbuffer0[begincol + 5][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue06 = UTIL_GETKV2(vbuffer0[begincol + 6][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue07 = UTIL_GETKV2(vbuffer0[begincol + 7][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue10 = UTIL_GETKV2(vbuffer1[begincol + 0][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue11 = UTIL_GETKV2(vbuffer1[begincol + 1][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue12 = UTIL_GETKV2(vbuffer1[begincol + 2][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue13 = UTIL_GETKV2(vbuffer1[begincol + 3][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue14 = UTIL_GETKV2(vbuffer1[begincol + 4][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue15 = UTIL_GETKV2(vbuffer1[begincol + 5][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue16 = UTIL_GETKV2(vbuffer1[begincol + 6][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue17 = UTIL_GETKV2(vbuffer1[begincol + 7][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue20 = UTIL_GETKV2(vbuffer2[begincol + 0][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue21 = UTIL_GETKV2(vbuffer2[begincol + 1][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue22 = UTIL_GETKV2(vbuffer2[begincol + 2][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue23 = UTIL_GETKV2(vbuffer2[begincol + 3][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue24 = UTIL_GETKV2(vbuffer2[begincol + 4][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue25 = UTIL_GETKV2(vbuffer2[begincol + 5][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue26 = UTIL_GETKV2(vbuffer2[begincol + 6][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue27 = UTIL_GETKV2(vbuffer2[begincol + 7][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue30 = UTIL_GETKV2(vbuffer3[begincol + 0][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue31 = UTIL_GETKV2(vbuffer3[begincol + 1][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue32 = UTIL_GETKV2(vbuffer3[begincol + 2][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue33 = UTIL_GETKV2(vbuffer3[begincol + 3][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue34 = UTIL_GETKV2(vbuffer3[begincol + 4][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue35 = UTIL_GETKV2(vbuffer3[begincol + 5][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue36 = UTIL_GETKV2(vbuffer3[begincol + 6][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue37 = UTIL_GETKV2(vbuffer3[begincol + 7][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue40 = UTIL_GETKV2(vbuffer4[begincol + 0][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue41 = UTIL_GETKV2(vbuffer4[begincol + 1][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue42 = UTIL_GETKV2(vbuffer4[begincol + 2][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue43 = UTIL_GETKV2(vbuffer4[begincol + 3][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue44 = UTIL_GETKV2(vbuffer4[begincol + 4][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue45 = UTIL_GETKV2(vbuffer4[begincol + 5][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue46 = UTIL_GETKV2(vbuffer4[begincol + 6][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue47 = UTIL_GETKV2(vbuffer4[begincol + 7][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue50 = UTIL_GETKV2(vbuffer5[begincol + 0][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue51 = UTIL_GETKV2(vbuffer5[begincol + 1][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue52 = UTIL_GETKV2(vbuffer5[begincol + 2][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue53 = UTIL_GETKV2(vbuffer5[begincol + 3][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue54 = UTIL_GETKV2(vbuffer5[begincol + 4][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue55 = UTIL_GETKV2(vbuffer5[begincol + 5][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue56 = UTIL_GETKV2(vbuffer5[begincol + 6][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue57 = UTIL_GETKV2(vbuffer5[begincol + 7][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue60 = UTIL_GETKV2(vbuffer6[begincol + 0][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue61 = UTIL_GETKV2(vbuffer6[begincol + 1][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue62 = UTIL_GETKV2(vbuffer6[begincol + 2][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue63 = UTIL_GETKV2(vbuffer6[begincol + 3][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue64 = UTIL_GETKV2(vbuffer6[begincol + 4][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue65 = UTIL_GETKV2(vbuffer6[begincol + 5][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue66 = UTIL_GETKV2(vbuffer6[begincol + 6][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue67 = UTIL_GETKV2(vbuffer6[begincol + 7][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue70 = UTIL_GETKV2(vbuffer7[begincol + 0][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue71 = UTIL_GETKV2(vbuffer7[begincol + 1][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue72 = UTIL_GETKV2(vbuffer7[begincol + 2][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue73 = UTIL_GETKV2(vbuffer7[begincol + 3][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue74 = UTIL_GETKV2(vbuffer7[begincol + 4][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue75 = UTIL_GETKV2(vbuffer7[begincol + 5][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue76 = UTIL_GETKV2(vbuffer7[begincol + 6][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue77 = UTIL_GETKV2(vbuffer7[begincol + 7][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue80 = UTIL_GETKV2(vbuffer8[begincol + 0][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue81 = UTIL_GETKV2(vbuffer8[begincol + 1][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue82 = UTIL_GETKV2(vbuffer8[begincol + 2][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue83 = UTIL_GETKV2(vbuffer8[begincol + 3][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue84 = UTIL_GETKV2(vbuffer8[begincol + 4][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue85 = UTIL_GETKV2(vbuffer8[begincol + 5][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue86 = UTIL_GETKV2(vbuffer8[begincol + 6][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue87 = UTIL_GETKV2(vbuffer8[begincol + 7][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue90 = UTIL_GETKV2(vbuffer9[begincol + 0][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue91 = UTIL_GETKV2(vbuffer9[begincol + 1][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue92 = UTIL_GETKV2(vbuffer9[begincol + 2][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue93 = UTIL_GETKV2(vbuffer9[begincol + 3][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue94 = UTIL_GETKV2(vbuffer9[begincol + 4][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue95 = UTIL_GETKV2(vbuffer9[begincol + 5][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue96 = UTIL_GETKV2(vbuffer9[begincol + 6][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue97 = UTIL_GETKV2(vbuffer9[begincol + 7][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue100 = UTIL_GETKV2(vbuffer10[begincol + 0][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue101 = UTIL_GETKV2(vbuffer10[begincol + 1][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue102 = UTIL_GETKV2(vbuffer10[begincol + 2][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue103 = UTIL_GETKV2(vbuffer10[begincol + 3][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue104 = UTIL_GETKV2(vbuffer10[begincol + 4][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue105 = UTIL_GETKV2(vbuffer10[begincol + 5][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue106 = UTIL_GETKV2(vbuffer10[begincol + 6][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue107 = UTIL_GETKV2(vbuffer10[begincol + 7][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue110 = dummykv;
		keyvalue_t mykeyvalue111 = dummykv;
		keyvalue_t mykeyvalue112 = dummykv;
		keyvalue_t mykeyvalue113 = dummykv;
		keyvalue_t mykeyvalue114 = dummykv;
		keyvalue_t mykeyvalue115 = dummykv;
		keyvalue_t mykeyvalue116 = dummykv;
		keyvalue_t mykeyvalue117 = dummykv;
		keyvalue_t mykeyvalue120 = dummykv;
		keyvalue_t mykeyvalue121 = dummykv;
		keyvalue_t mykeyvalue122 = dummykv;
		keyvalue_t mykeyvalue123 = dummykv;
		keyvalue_t mykeyvalue124 = dummykv;
		keyvalue_t mykeyvalue125 = dummykv;
		keyvalue_t mykeyvalue126 = dummykv;
		keyvalue_t mykeyvalue127 = dummykv;
		keyvalue_t mykeyvalue130 = dummykv;
		keyvalue_t mykeyvalue131 = dummykv;
		keyvalue_t mykeyvalue132 = dummykv;
		keyvalue_t mykeyvalue133 = dummykv;
		keyvalue_t mykeyvalue134 = dummykv;
		keyvalue_t mykeyvalue135 = dummykv;
		keyvalue_t mykeyvalue136 = dummykv;
		keyvalue_t mykeyvalue137 = dummykv;
		keyvalue_t mykeyvalue140 = dummykv;
		keyvalue_t mykeyvalue141 = dummykv;
		keyvalue_t mykeyvalue142 = dummykv;
		keyvalue_t mykeyvalue143 = dummykv;
		keyvalue_t mykeyvalue144 = dummykv;
		keyvalue_t mykeyvalue145 = dummykv;
		keyvalue_t mykeyvalue146 = dummykv;
		keyvalue_t mykeyvalue147 = dummykv;
		
		//((n)/2)
		keyA0 = MERGE_mergefunc(mykeyvalue00.key, mykeyvalue10.key, NAp);
		keyB0 = MERGE_mergefunc(mykeyvalue20.key, mykeyvalue30.key, NAp);
		keyC0 = MERGE_mergefunc(mykeyvalue40.key, mykeyvalue50.key, NAp);
		keyD0 = MERGE_mergefunc(mykeyvalue60.key, mykeyvalue70.key, NAp);
		keyE0 = MERGE_mergefunc(mykeyvalue80.key, mykeyvalue90.key, NAp);
		keyF0 = MERGE_mergefunc(mykeyvalue100.key, mykeyvalue110.key, NAp);
		keyA1 = MERGE_mergefunc(mykeyvalue01.key, mykeyvalue11.key, NAp);
		keyB1 = MERGE_mergefunc(mykeyvalue21.key, mykeyvalue31.key, NAp);
		keyC1 = MERGE_mergefunc(mykeyvalue41.key, mykeyvalue51.key, NAp);
		keyD1 = MERGE_mergefunc(mykeyvalue61.key, mykeyvalue71.key, NAp);
		keyE1 = MERGE_mergefunc(mykeyvalue81.key, mykeyvalue91.key, NAp);
		keyF1 = MERGE_mergefunc(mykeyvalue101.key, mykeyvalue111.key, NAp);
		keyA2 = MERGE_mergefunc(mykeyvalue02.key, mykeyvalue12.key, NAp);
		keyB2 = MERGE_mergefunc(mykeyvalue22.key, mykeyvalue32.key, NAp);
		keyC2 = MERGE_mergefunc(mykeyvalue42.key, mykeyvalue52.key, NAp);
		keyD2 = MERGE_mergefunc(mykeyvalue62.key, mykeyvalue72.key, NAp);
		keyE2 = MERGE_mergefunc(mykeyvalue82.key, mykeyvalue92.key, NAp);
		keyF2 = MERGE_mergefunc(mykeyvalue102.key, mykeyvalue112.key, NAp);
		keyA3 = MERGE_mergefunc(mykeyvalue03.key, mykeyvalue13.key, NAp);
		keyB3 = MERGE_mergefunc(mykeyvalue23.key, mykeyvalue33.key, NAp);
		keyC3 = MERGE_mergefunc(mykeyvalue43.key, mykeyvalue53.key, NAp);
		keyD3 = MERGE_mergefunc(mykeyvalue63.key, mykeyvalue73.key, NAp);
		keyE3 = MERGE_mergefunc(mykeyvalue83.key, mykeyvalue93.key, NAp);
		keyF3 = MERGE_mergefunc(mykeyvalue103.key, mykeyvalue113.key, NAp);
		keyA4 = MERGE_mergefunc(mykeyvalue04.key, mykeyvalue14.key, NAp);
		keyB4 = MERGE_mergefunc(mykeyvalue24.key, mykeyvalue34.key, NAp);
		keyC4 = MERGE_mergefunc(mykeyvalue44.key, mykeyvalue54.key, NAp);
		keyD4 = MERGE_mergefunc(mykeyvalue64.key, mykeyvalue74.key, NAp);
		keyE4 = MERGE_mergefunc(mykeyvalue84.key, mykeyvalue94.key, NAp);
		keyF4 = MERGE_mergefunc(mykeyvalue104.key, mykeyvalue114.key, NAp);
		keyA5 = MERGE_mergefunc(mykeyvalue05.key, mykeyvalue15.key, NAp);
		keyB5 = MERGE_mergefunc(mykeyvalue25.key, mykeyvalue35.key, NAp);
		keyC5 = MERGE_mergefunc(mykeyvalue45.key, mykeyvalue55.key, NAp);
		keyD5 = MERGE_mergefunc(mykeyvalue65.key, mykeyvalue75.key, NAp);
		keyE5 = MERGE_mergefunc(mykeyvalue85.key, mykeyvalue95.key, NAp);
		keyF5 = MERGE_mergefunc(mykeyvalue105.key, mykeyvalue115.key, NAp);
		keyA6 = MERGE_mergefunc(mykeyvalue06.key, mykeyvalue16.key, NAp);
		keyB6 = MERGE_mergefunc(mykeyvalue26.key, mykeyvalue36.key, NAp);
		keyC6 = MERGE_mergefunc(mykeyvalue46.key, mykeyvalue56.key, NAp);
		keyD6 = MERGE_mergefunc(mykeyvalue66.key, mykeyvalue76.key, NAp);
		keyE6 = MERGE_mergefunc(mykeyvalue86.key, mykeyvalue96.key, NAp);
		keyF6 = MERGE_mergefunc(mykeyvalue106.key, mykeyvalue116.key, NAp);
		keyA7 = MERGE_mergefunc(mykeyvalue07.key, mykeyvalue17.key, NAp);
		keyB7 = MERGE_mergefunc(mykeyvalue27.key, mykeyvalue37.key, NAp);
		keyC7 = MERGE_mergefunc(mykeyvalue47.key, mykeyvalue57.key, NAp);
		keyD7 = MERGE_mergefunc(mykeyvalue67.key, mykeyvalue77.key, NAp);
		keyE7 = MERGE_mergefunc(mykeyvalue87.key, mykeyvalue97.key, NAp);
		keyF7 = MERGE_mergefunc(mykeyvalue107.key, mykeyvalue117.key, NAp);
		keyy_t keyPA0 = MERGE_mergefunc(keyA0, keyB0, NAp);
		keyy_t keyPB0 = MERGE_mergefunc(keyC0, keyD0, NAp);
		keyy_t keyPC0 = MERGE_mergefunc(keyE0, keyF0, NAp);
		keyy_t keyRA0 = MERGE_mergefunc(keyPA0, keyPB0, NAp);
		keyy_t keyRB0 = MERGE_mergefunc(keyPC0, keyF0, NAp);
		keyy_t keyRZ0 = MERGE_mergefunc(keyRA0, keyRB0, NAp);
		keyy_t keyPA1 = MERGE_mergefunc(keyA1, keyB1, NAp);
		keyy_t keyPB1 = MERGE_mergefunc(keyC1, keyD1, NAp);
		keyy_t keyPC1 = MERGE_mergefunc(keyE1, keyF1, NAp);
		keyy_t keyRA1 = MERGE_mergefunc(keyPA1, keyPB1, NAp);
		keyy_t keyRB1 = MERGE_mergefunc(keyPC1, keyF1, NAp);
		keyy_t keyRZ1 = MERGE_mergefunc(keyRA1, keyRB1, NAp);
		keyy_t keyPA2 = MERGE_mergefunc(keyA2, keyB2, NAp);
		keyy_t keyPB2 = MERGE_mergefunc(keyC2, keyD2, NAp);
		keyy_t keyPC2 = MERGE_mergefunc(keyE2, keyF2, NAp);
		keyy_t keyRA2 = MERGE_mergefunc(keyPA2, keyPB2, NAp);
		keyy_t keyRB2 = MERGE_mergefunc(keyPC2, keyF2, NAp);
		keyy_t keyRZ2 = MERGE_mergefunc(keyRA2, keyRB2, NAp);
		keyy_t keyPA3 = MERGE_mergefunc(keyA3, keyB3, NAp);
		keyy_t keyPB3 = MERGE_mergefunc(keyC3, keyD3, NAp);
		keyy_t keyPC3 = MERGE_mergefunc(keyE3, keyF3, NAp);
		keyy_t keyRA3 = MERGE_mergefunc(keyPA3, keyPB3, NAp);
		keyy_t keyRB3 = MERGE_mergefunc(keyPC3, keyF3, NAp);
		keyy_t keyRZ3 = MERGE_mergefunc(keyRA3, keyRB3, NAp);
		keyy_t keyPA4 = MERGE_mergefunc(keyA4, keyB4, NAp);
		keyy_t keyPB4 = MERGE_mergefunc(keyC4, keyD4, NAp);
		keyy_t keyPC4 = MERGE_mergefunc(keyE4, keyF4, NAp);
		keyy_t keyRA4 = MERGE_mergefunc(keyPA4, keyPB4, NAp);
		keyy_t keyRB4 = MERGE_mergefunc(keyPC4, keyF4, NAp);
		keyy_t keyRZ4 = MERGE_mergefunc(keyRA4, keyRB4, NAp);
		keyy_t keyPA5 = MERGE_mergefunc(keyA5, keyB5, NAp);
		keyy_t keyPB5 = MERGE_mergefunc(keyC5, keyD5, NAp);
		keyy_t keyPC5 = MERGE_mergefunc(keyE5, keyF5, NAp);
		keyy_t keyRA5 = MERGE_mergefunc(keyPA5, keyPB5, NAp);
		keyy_t keyRB5 = MERGE_mergefunc(keyPC5, keyF5, NAp);
		keyy_t keyRZ5 = MERGE_mergefunc(keyRA5, keyRB5, NAp);
		keyy_t keyPA6 = MERGE_mergefunc(keyA6, keyB6, NAp);
		keyy_t keyPB6 = MERGE_mergefunc(keyC6, keyD6, NAp);
		keyy_t keyPC6 = MERGE_mergefunc(keyE6, keyF6, NAp);
		keyy_t keyRA6 = MERGE_mergefunc(keyPA6, keyPB6, NAp);
		keyy_t keyRB6 = MERGE_mergefunc(keyPC6, keyF6, NAp);
		keyy_t keyRZ6 = MERGE_mergefunc(keyRA6, keyRB6, NAp);
		keyy_t keyPA7 = MERGE_mergefunc(keyA7, keyB7, NAp);
		keyy_t keyPB7 = MERGE_mergefunc(keyC7, keyD7, NAp);
		keyy_t keyPC7 = MERGE_mergefunc(keyE7, keyF7, NAp);
		keyy_t keyRA7 = MERGE_mergefunc(keyPA7, keyPB7, NAp);
		keyy_t keyRB7 = MERGE_mergefunc(keyPC7, keyF7, NAp);
		keyy_t keyRZ7 = MERGE_mergefunc(keyRA7, keyRB7, NAp);
		
		//((n)/2)
		valA0 = MERGE_mergefunc(mykeyvalue00.value, mykeyvalue10.value, NAp);
		valB0 = MERGE_mergefunc(mykeyvalue20.value, mykeyvalue30.value, NAp);
		valC0 = MERGE_mergefunc(mykeyvalue40.value, mykeyvalue50.value, NAp);
		valD0 = MERGE_mergefunc(mykeyvalue60.value, mykeyvalue70.value, NAp);
		valE0 = MERGE_mergefunc(mykeyvalue80.value, mykeyvalue90.value, NAp);
		valF0 = MERGE_mergefunc(mykeyvalue100.value, mykeyvalue110.value, NAp);
		valA1 = MERGE_mergefunc(mykeyvalue01.value, mykeyvalue11.value, NAp);
		valB1 = MERGE_mergefunc(mykeyvalue21.value, mykeyvalue31.value, NAp);
		valC1 = MERGE_mergefunc(mykeyvalue41.value, mykeyvalue51.value, NAp);
		valD1 = MERGE_mergefunc(mykeyvalue61.value, mykeyvalue71.value, NAp);
		valE1 = MERGE_mergefunc(mykeyvalue81.value, mykeyvalue91.value, NAp);
		valF1 = MERGE_mergefunc(mykeyvalue101.value, mykeyvalue111.value, NAp);
		valA2 = MERGE_mergefunc(mykeyvalue02.value, mykeyvalue12.value, NAp);
		valB2 = MERGE_mergefunc(mykeyvalue22.value, mykeyvalue32.value, NAp);
		valC2 = MERGE_mergefunc(mykeyvalue42.value, mykeyvalue52.value, NAp);
		valD2 = MERGE_mergefunc(mykeyvalue62.value, mykeyvalue72.value, NAp);
		valE2 = MERGE_mergefunc(mykeyvalue82.value, mykeyvalue92.value, NAp);
		valF2 = MERGE_mergefunc(mykeyvalue102.value, mykeyvalue112.value, NAp);
		valA3 = MERGE_mergefunc(mykeyvalue03.value, mykeyvalue13.value, NAp);
		valB3 = MERGE_mergefunc(mykeyvalue23.value, mykeyvalue33.value, NAp);
		valC3 = MERGE_mergefunc(mykeyvalue43.value, mykeyvalue53.value, NAp);
		valD3 = MERGE_mergefunc(mykeyvalue63.value, mykeyvalue73.value, NAp);
		valE3 = MERGE_mergefunc(mykeyvalue83.value, mykeyvalue93.value, NAp);
		valF3 = MERGE_mergefunc(mykeyvalue103.value, mykeyvalue113.value, NAp);
		valA4 = MERGE_mergefunc(mykeyvalue04.value, mykeyvalue14.value, NAp);
		valB4 = MERGE_mergefunc(mykeyvalue24.value, mykeyvalue34.value, NAp);
		valC4 = MERGE_mergefunc(mykeyvalue44.value, mykeyvalue54.value, NAp);
		valD4 = MERGE_mergefunc(mykeyvalue64.value, mykeyvalue74.value, NAp);
		valE4 = MERGE_mergefunc(mykeyvalue84.value, mykeyvalue94.value, NAp);
		valF4 = MERGE_mergefunc(mykeyvalue104.value, mykeyvalue114.value, NAp);
		valA5 = MERGE_mergefunc(mykeyvalue05.value, mykeyvalue15.value, NAp);
		valB5 = MERGE_mergefunc(mykeyvalue25.value, mykeyvalue35.value, NAp);
		valC5 = MERGE_mergefunc(mykeyvalue45.value, mykeyvalue55.value, NAp);
		valD5 = MERGE_mergefunc(mykeyvalue65.value, mykeyvalue75.value, NAp);
		valE5 = MERGE_mergefunc(mykeyvalue85.value, mykeyvalue95.value, NAp);
		valF5 = MERGE_mergefunc(mykeyvalue105.value, mykeyvalue115.value, NAp);
		valA6 = MERGE_mergefunc(mykeyvalue06.value, mykeyvalue16.value, NAp);
		valB6 = MERGE_mergefunc(mykeyvalue26.value, mykeyvalue36.value, NAp);
		valC6 = MERGE_mergefunc(mykeyvalue46.value, mykeyvalue56.value, NAp);
		valD6 = MERGE_mergefunc(mykeyvalue66.value, mykeyvalue76.value, NAp);
		valE6 = MERGE_mergefunc(mykeyvalue86.value, mykeyvalue96.value, NAp);
		valF6 = MERGE_mergefunc(mykeyvalue106.value, mykeyvalue116.value, NAp);
		valA7 = MERGE_mergefunc(mykeyvalue07.value, mykeyvalue17.value, NAp);
		valB7 = MERGE_mergefunc(mykeyvalue27.value, mykeyvalue37.value, NAp);
		valC7 = MERGE_mergefunc(mykeyvalue47.value, mykeyvalue57.value, NAp);
		valD7 = MERGE_mergefunc(mykeyvalue67.value, mykeyvalue77.value, NAp);
		valE7 = MERGE_mergefunc(mykeyvalue87.value, mykeyvalue97.value, NAp);
		valF7 = MERGE_mergefunc(mykeyvalue107.value, mykeyvalue117.value, NAp);
		value_t valPA0 = MERGE_mergefunc(valA0, valB0, NAp);
		value_t valPB0 = MERGE_mergefunc(valC0, valD0, NAp);
		value_t valPC0 = MERGE_mergefunc(valE0, valF0, NAp);
		value_t valRA0 = MERGE_mergefunc(valPA0, valPB0, NAp);
		value_t valRB0 = MERGE_mergefunc(valPC0, valF0, NAp);
		value_t valRZ0 = MERGE_mergefunc(valRA0, valRB0, NAp);
		value_t valPA1 = MERGE_mergefunc(valA1, valB1, NAp);
		value_t valPB1 = MERGE_mergefunc(valC1, valD1, NAp);
		value_t valPC1 = MERGE_mergefunc(valE1, valF1, NAp);
		value_t valRA1 = MERGE_mergefunc(valPA1, valPB1, NAp);
		value_t valRB1 = MERGE_mergefunc(valPC1, valF1, NAp);
		value_t valRZ1 = MERGE_mergefunc(valRA1, valRB1, NAp);
		value_t valPA2 = MERGE_mergefunc(valA2, valB2, NAp);
		value_t valPB2 = MERGE_mergefunc(valC2, valD2, NAp);
		value_t valPC2 = MERGE_mergefunc(valE2, valF2, NAp);
		value_t valRA2 = MERGE_mergefunc(valPA2, valPB2, NAp);
		value_t valRB2 = MERGE_mergefunc(valPC2, valF2, NAp);
		value_t valRZ2 = MERGE_mergefunc(valRA2, valRB2, NAp);
		value_t valPA3 = MERGE_mergefunc(valA3, valB3, NAp);
		value_t valPB3 = MERGE_mergefunc(valC3, valD3, NAp);
		value_t valPC3 = MERGE_mergefunc(valE3, valF3, NAp);
		value_t valRA3 = MERGE_mergefunc(valPA3, valPB3, NAp);
		value_t valRB3 = MERGE_mergefunc(valPC3, valF3, NAp);
		value_t valRZ3 = MERGE_mergefunc(valRA3, valRB3, NAp);
		value_t valPA4 = MERGE_mergefunc(valA4, valB4, NAp);
		value_t valPB4 = MERGE_mergefunc(valC4, valD4, NAp);
		value_t valPC4 = MERGE_mergefunc(valE4, valF4, NAp);
		value_t valRA4 = MERGE_mergefunc(valPA4, valPB4, NAp);
		value_t valRB4 = MERGE_mergefunc(valPC4, valF4, NAp);
		value_t valRZ4 = MERGE_mergefunc(valRA4, valRB4, NAp);
		value_t valPA5 = MERGE_mergefunc(valA5, valB5, NAp);
		value_t valPB5 = MERGE_mergefunc(valC5, valD5, NAp);
		value_t valPC5 = MERGE_mergefunc(valE5, valF5, NAp);
		value_t valRA5 = MERGE_mergefunc(valPA5, valPB5, NAp);
		value_t valRB5 = MERGE_mergefunc(valPC5, valF5, NAp);
		value_t valRZ5 = MERGE_mergefunc(valRA5, valRB5, NAp);
		value_t valPA6 = MERGE_mergefunc(valA6, valB6, NAp);
		value_t valPB6 = MERGE_mergefunc(valC6, valD6, NAp);
		value_t valPC6 = MERGE_mergefunc(valE6, valF6, NAp);
		value_t valRA6 = MERGE_mergefunc(valPA6, valPB6, NAp);
		value_t valRB6 = MERGE_mergefunc(valPC6, valF6, NAp);
		value_t valRZ6 = MERGE_mergefunc(valRA6, valRB6, NAp);
		value_t valPA7 = MERGE_mergefunc(valA7, valB7, NAp);
		value_t valPB7 = MERGE_mergefunc(valC7, valD7, NAp);
		value_t valPC7 = MERGE_mergefunc(valE7, valF7, NAp);
		value_t valRA7 = MERGE_mergefunc(valPA7, valPB7, NAp);
		value_t valRB7 = MERGE_mergefunc(valPC7, valF7, NAp);
		value_t valRZ7 = MERGE_mergefunc(valRA7, valRB7, NAp);
		
		#ifdef _WIDEWORD
		vdram[dramoffset_kvs + j].range(31, 0) = keyRZ0;
		vdram[dramoffset_kvs + j].range(63, 32) = valRZ0;
		vdram[dramoffset_kvs + j].range(95, 64) = keyRZ1;
		vdram[dramoffset_kvs + j].range(127, 96) = valRZ1;
		vdram[dramoffset_kvs + j].range(159, 128) = keyRZ2;
		vdram[dramoffset_kvs + j].range(191, 160) = valRZ2;
		vdram[dramoffset_kvs + j].range(223, 192) = keyRZ3;
		vdram[dramoffset_kvs + j].range(255, 224) = valRZ3;
		vdram[dramoffset_kvs + j].range(287, 256) = keyRZ4;
		vdram[dramoffset_kvs + j].range(319, 288) = valRZ4;
		vdram[dramoffset_kvs + j].range(351, 320) = keyRZ5;
		vdram[dramoffset_kvs + j].range(383, 352) = valRZ5;
		vdram[dramoffset_kvs + j].range(415, 384) = keyRZ6;
		vdram[dramoffset_kvs + j].range(447, 416) = valRZ6;
		vdram[dramoffset_kvs + j].range(479, 448) = keyRZ7;
		vdram[dramoffset_kvs + j].range(511, 480) = valRZ7;
		#else
		vdram[dramoffset_kvs + j].data[0].key = keyRZ0;
		vdram[dramoffset_kvs + j].data[0].value = valRZ0;
		vdram[dramoffset_kvs + j].data[1].key = keyRZ1;
		vdram[dramoffset_kvs + j].data[1].value = valRZ1;
		vdram[dramoffset_kvs + j].data[2].key = keyRZ2;
		vdram[dramoffset_kvs + j].data[2].value = valRZ2;
		vdram[dramoffset_kvs + j].data[3].key = keyRZ3;
		vdram[dramoffset_kvs + j].data[3].value = valRZ3;
		vdram[dramoffset_kvs + j].data[4].key = keyRZ4;
		vdram[dramoffset_kvs + j].data[4].value = valRZ4;
		vdram[dramoffset_kvs + j].data[5].key = keyRZ5;
		vdram[dramoffset_kvs + j].data[5].value = valRZ5;
		vdram[dramoffset_kvs + j].data[6].key = keyRZ6;
		vdram[dramoffset_kvs + j].data[6].value = valRZ6;
		vdram[dramoffset_kvs + j].data[7].key = keyRZ7;
		vdram[dramoffset_kvs + j].data[7].value = valRZ7;
		#endif
	}
	return;
}
void acts_all::MERGE_merge12andsavevdata(bool_type enable, uint512_dt * vdram, keyvalue_vbuffer_t vbuffer0[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t vbuffer1[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t vbuffer2[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t vbuffer3[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t vbuffer4[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t vbuffer5[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t vbuffer6[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t vbuffer7[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t vbuffer8[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t vbuffer9[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t vbuffer10[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],keyvalue_vbuffer_t vbuffer11[VDATA_PACKINGSIZE][BLOCKRAM_SIZE], unsigned int begincol, batch_type bufferoffset_kvs, unsigned int dramoffset_kvs){
	if(enable == OFF){ return; }
	keyvalue_t dummykv;
	dummykv.key = 0xFFFFFFFF; dummykv.value = 0xFFFFFFFF;
	
	keyy_t keyA0 = dummykv.key;
	value_t valA0 = dummykv.key;
	keyy_t keyB0 = dummykv.key;
	value_t valB0 = dummykv.key;
	keyy_t keyC0 = dummykv.key;
	value_t valC0 = dummykv.key;
	keyy_t keyD0 = dummykv.key;
	value_t valD0 = dummykv.key;
	keyy_t keyE0 = dummykv.key;
	value_t valE0 = dummykv.key;
	keyy_t keyF0 = dummykv.key;
	value_t valF0 = dummykv.key;
	keyy_t keyG0 = dummykv.key;
	value_t valG0 = dummykv.key;
	keyy_t keyH0 = dummykv.key;
	value_t valH0 = dummykv.key;
	keyy_t keyI0 = dummykv.key;
	value_t valI0 = dummykv.key;
	keyy_t keyJ0 = dummykv.key;
	value_t valJ0 = dummykv.key;
	keyy_t keyK0 = dummykv.key;
	value_t valK0 = dummykv.key;
	keyy_t keyL0 = dummykv.key;
	value_t valL0 = dummykv.key;
	keyy_t keyM0 = dummykv.key;
	value_t valM0 = dummykv.key;
	keyy_t keyA1 = dummykv.key;
	value_t valA1 = dummykv.key;
	keyy_t keyB1 = dummykv.key;
	value_t valB1 = dummykv.key;
	keyy_t keyC1 = dummykv.key;
	value_t valC1 = dummykv.key;
	keyy_t keyD1 = dummykv.key;
	value_t valD1 = dummykv.key;
	keyy_t keyE1 = dummykv.key;
	value_t valE1 = dummykv.key;
	keyy_t keyF1 = dummykv.key;
	value_t valF1 = dummykv.key;
	keyy_t keyG1 = dummykv.key;
	value_t valG1 = dummykv.key;
	keyy_t keyH1 = dummykv.key;
	value_t valH1 = dummykv.key;
	keyy_t keyI1 = dummykv.key;
	value_t valI1 = dummykv.key;
	keyy_t keyJ1 = dummykv.key;
	value_t valJ1 = dummykv.key;
	keyy_t keyK1 = dummykv.key;
	value_t valK1 = dummykv.key;
	keyy_t keyL1 = dummykv.key;
	value_t valL1 = dummykv.key;
	keyy_t keyM1 = dummykv.key;
	value_t valM1 = dummykv.key;
	keyy_t keyA2 = dummykv.key;
	value_t valA2 = dummykv.key;
	keyy_t keyB2 = dummykv.key;
	value_t valB2 = dummykv.key;
	keyy_t keyC2 = dummykv.key;
	value_t valC2 = dummykv.key;
	keyy_t keyD2 = dummykv.key;
	value_t valD2 = dummykv.key;
	keyy_t keyE2 = dummykv.key;
	value_t valE2 = dummykv.key;
	keyy_t keyF2 = dummykv.key;
	value_t valF2 = dummykv.key;
	keyy_t keyG2 = dummykv.key;
	value_t valG2 = dummykv.key;
	keyy_t keyH2 = dummykv.key;
	value_t valH2 = dummykv.key;
	keyy_t keyI2 = dummykv.key;
	value_t valI2 = dummykv.key;
	keyy_t keyJ2 = dummykv.key;
	value_t valJ2 = dummykv.key;
	keyy_t keyK2 = dummykv.key;
	value_t valK2 = dummykv.key;
	keyy_t keyL2 = dummykv.key;
	value_t valL2 = dummykv.key;
	keyy_t keyM2 = dummykv.key;
	value_t valM2 = dummykv.key;
	keyy_t keyA3 = dummykv.key;
	value_t valA3 = dummykv.key;
	keyy_t keyB3 = dummykv.key;
	value_t valB3 = dummykv.key;
	keyy_t keyC3 = dummykv.key;
	value_t valC3 = dummykv.key;
	keyy_t keyD3 = dummykv.key;
	value_t valD3 = dummykv.key;
	keyy_t keyE3 = dummykv.key;
	value_t valE3 = dummykv.key;
	keyy_t keyF3 = dummykv.key;
	value_t valF3 = dummykv.key;
	keyy_t keyG3 = dummykv.key;
	value_t valG3 = dummykv.key;
	keyy_t keyH3 = dummykv.key;
	value_t valH3 = dummykv.key;
	keyy_t keyI3 = dummykv.key;
	value_t valI3 = dummykv.key;
	keyy_t keyJ3 = dummykv.key;
	value_t valJ3 = dummykv.key;
	keyy_t keyK3 = dummykv.key;
	value_t valK3 = dummykv.key;
	keyy_t keyL3 = dummykv.key;
	value_t valL3 = dummykv.key;
	keyy_t keyM3 = dummykv.key;
	value_t valM3 = dummykv.key;
	keyy_t keyA4 = dummykv.key;
	value_t valA4 = dummykv.key;
	keyy_t keyB4 = dummykv.key;
	value_t valB4 = dummykv.key;
	keyy_t keyC4 = dummykv.key;
	value_t valC4 = dummykv.key;
	keyy_t keyD4 = dummykv.key;
	value_t valD4 = dummykv.key;
	keyy_t keyE4 = dummykv.key;
	value_t valE4 = dummykv.key;
	keyy_t keyF4 = dummykv.key;
	value_t valF4 = dummykv.key;
	keyy_t keyG4 = dummykv.key;
	value_t valG4 = dummykv.key;
	keyy_t keyH4 = dummykv.key;
	value_t valH4 = dummykv.key;
	keyy_t keyI4 = dummykv.key;
	value_t valI4 = dummykv.key;
	keyy_t keyJ4 = dummykv.key;
	value_t valJ4 = dummykv.key;
	keyy_t keyK4 = dummykv.key;
	value_t valK4 = dummykv.key;
	keyy_t keyL4 = dummykv.key;
	value_t valL4 = dummykv.key;
	keyy_t keyM4 = dummykv.key;
	value_t valM4 = dummykv.key;
	keyy_t keyA5 = dummykv.key;
	value_t valA5 = dummykv.key;
	keyy_t keyB5 = dummykv.key;
	value_t valB5 = dummykv.key;
	keyy_t keyC5 = dummykv.key;
	value_t valC5 = dummykv.key;
	keyy_t keyD5 = dummykv.key;
	value_t valD5 = dummykv.key;
	keyy_t keyE5 = dummykv.key;
	value_t valE5 = dummykv.key;
	keyy_t keyF5 = dummykv.key;
	value_t valF5 = dummykv.key;
	keyy_t keyG5 = dummykv.key;
	value_t valG5 = dummykv.key;
	keyy_t keyH5 = dummykv.key;
	value_t valH5 = dummykv.key;
	keyy_t keyI5 = dummykv.key;
	value_t valI5 = dummykv.key;
	keyy_t keyJ5 = dummykv.key;
	value_t valJ5 = dummykv.key;
	keyy_t keyK5 = dummykv.key;
	value_t valK5 = dummykv.key;
	keyy_t keyL5 = dummykv.key;
	value_t valL5 = dummykv.key;
	keyy_t keyM5 = dummykv.key;
	value_t valM5 = dummykv.key;
	keyy_t keyA6 = dummykv.key;
	value_t valA6 = dummykv.key;
	keyy_t keyB6 = dummykv.key;
	value_t valB6 = dummykv.key;
	keyy_t keyC6 = dummykv.key;
	value_t valC6 = dummykv.key;
	keyy_t keyD6 = dummykv.key;
	value_t valD6 = dummykv.key;
	keyy_t keyE6 = dummykv.key;
	value_t valE6 = dummykv.key;
	keyy_t keyF6 = dummykv.key;
	value_t valF6 = dummykv.key;
	keyy_t keyG6 = dummykv.key;
	value_t valG6 = dummykv.key;
	keyy_t keyH6 = dummykv.key;
	value_t valH6 = dummykv.key;
	keyy_t keyI6 = dummykv.key;
	value_t valI6 = dummykv.key;
	keyy_t keyJ6 = dummykv.key;
	value_t valJ6 = dummykv.key;
	keyy_t keyK6 = dummykv.key;
	value_t valK6 = dummykv.key;
	keyy_t keyL6 = dummykv.key;
	value_t valL6 = dummykv.key;
	keyy_t keyM6 = dummykv.key;
	value_t valM6 = dummykv.key;
	keyy_t keyA7 = dummykv.key;
	value_t valA7 = dummykv.key;
	keyy_t keyB7 = dummykv.key;
	value_t valB7 = dummykv.key;
	keyy_t keyC7 = dummykv.key;
	value_t valC7 = dummykv.key;
	keyy_t keyD7 = dummykv.key;
	value_t valD7 = dummykv.key;
	keyy_t keyE7 = dummykv.key;
	value_t valE7 = dummykv.key;
	keyy_t keyF7 = dummykv.key;
	value_t valF7 = dummykv.key;
	keyy_t keyG7 = dummykv.key;
	value_t valG7 = dummykv.key;
	keyy_t keyH7 = dummykv.key;
	value_t valH7 = dummykv.key;
	keyy_t keyI7 = dummykv.key;
	value_t valI7 = dummykv.key;
	keyy_t keyJ7 = dummykv.key;
	value_t valJ7 = dummykv.key;
	keyy_t keyK7 = dummykv.key;
	value_t valK7 = dummykv.key;
	keyy_t keyL7 = dummykv.key;
	value_t valL7 = dummykv.key;
	keyy_t keyM7 = dummykv.key;
	value_t valM7 = dummykv.key;
	
	MERGE12_LOOP1: for (buffer_type j=0; j<BLOCKRAM_SIZE; j++){
	#pragma HLS PIPELINE II=1
		keyvalue_t mykeyvalue00 = UTIL_GETKV2(vbuffer0[begincol + 0][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue01 = UTIL_GETKV2(vbuffer0[begincol + 1][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue02 = UTIL_GETKV2(vbuffer0[begincol + 2][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue03 = UTIL_GETKV2(vbuffer0[begincol + 3][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue04 = UTIL_GETKV2(vbuffer0[begincol + 4][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue05 = UTIL_GETKV2(vbuffer0[begincol + 5][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue06 = UTIL_GETKV2(vbuffer0[begincol + 6][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue07 = UTIL_GETKV2(vbuffer0[begincol + 7][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue10 = UTIL_GETKV2(vbuffer1[begincol + 0][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue11 = UTIL_GETKV2(vbuffer1[begincol + 1][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue12 = UTIL_GETKV2(vbuffer1[begincol + 2][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue13 = UTIL_GETKV2(vbuffer1[begincol + 3][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue14 = UTIL_GETKV2(vbuffer1[begincol + 4][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue15 = UTIL_GETKV2(vbuffer1[begincol + 5][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue16 = UTIL_GETKV2(vbuffer1[begincol + 6][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue17 = UTIL_GETKV2(vbuffer1[begincol + 7][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue20 = UTIL_GETKV2(vbuffer2[begincol + 0][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue21 = UTIL_GETKV2(vbuffer2[begincol + 1][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue22 = UTIL_GETKV2(vbuffer2[begincol + 2][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue23 = UTIL_GETKV2(vbuffer2[begincol + 3][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue24 = UTIL_GETKV2(vbuffer2[begincol + 4][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue25 = UTIL_GETKV2(vbuffer2[begincol + 5][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue26 = UTIL_GETKV2(vbuffer2[begincol + 6][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue27 = UTIL_GETKV2(vbuffer2[begincol + 7][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue30 = UTIL_GETKV2(vbuffer3[begincol + 0][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue31 = UTIL_GETKV2(vbuffer3[begincol + 1][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue32 = UTIL_GETKV2(vbuffer3[begincol + 2][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue33 = UTIL_GETKV2(vbuffer3[begincol + 3][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue34 = UTIL_GETKV2(vbuffer3[begincol + 4][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue35 = UTIL_GETKV2(vbuffer3[begincol + 5][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue36 = UTIL_GETKV2(vbuffer3[begincol + 6][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue37 = UTIL_GETKV2(vbuffer3[begincol + 7][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue40 = UTIL_GETKV2(vbuffer4[begincol + 0][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue41 = UTIL_GETKV2(vbuffer4[begincol + 1][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue42 = UTIL_GETKV2(vbuffer4[begincol + 2][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue43 = UTIL_GETKV2(vbuffer4[begincol + 3][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue44 = UTIL_GETKV2(vbuffer4[begincol + 4][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue45 = UTIL_GETKV2(vbuffer4[begincol + 5][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue46 = UTIL_GETKV2(vbuffer4[begincol + 6][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue47 = UTIL_GETKV2(vbuffer4[begincol + 7][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue50 = UTIL_GETKV2(vbuffer5[begincol + 0][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue51 = UTIL_GETKV2(vbuffer5[begincol + 1][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue52 = UTIL_GETKV2(vbuffer5[begincol + 2][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue53 = UTIL_GETKV2(vbuffer5[begincol + 3][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue54 = UTIL_GETKV2(vbuffer5[begincol + 4][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue55 = UTIL_GETKV2(vbuffer5[begincol + 5][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue56 = UTIL_GETKV2(vbuffer5[begincol + 6][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue57 = UTIL_GETKV2(vbuffer5[begincol + 7][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue60 = UTIL_GETKV2(vbuffer6[begincol + 0][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue61 = UTIL_GETKV2(vbuffer6[begincol + 1][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue62 = UTIL_GETKV2(vbuffer6[begincol + 2][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue63 = UTIL_GETKV2(vbuffer6[begincol + 3][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue64 = UTIL_GETKV2(vbuffer6[begincol + 4][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue65 = UTIL_GETKV2(vbuffer6[begincol + 5][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue66 = UTIL_GETKV2(vbuffer6[begincol + 6][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue67 = UTIL_GETKV2(vbuffer6[begincol + 7][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue70 = UTIL_GETKV2(vbuffer7[begincol + 0][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue71 = UTIL_GETKV2(vbuffer7[begincol + 1][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue72 = UTIL_GETKV2(vbuffer7[begincol + 2][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue73 = UTIL_GETKV2(vbuffer7[begincol + 3][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue74 = UTIL_GETKV2(vbuffer7[begincol + 4][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue75 = UTIL_GETKV2(vbuffer7[begincol + 5][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue76 = UTIL_GETKV2(vbuffer7[begincol + 6][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue77 = UTIL_GETKV2(vbuffer7[begincol + 7][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue80 = UTIL_GETKV2(vbuffer8[begincol + 0][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue81 = UTIL_GETKV2(vbuffer8[begincol + 1][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue82 = UTIL_GETKV2(vbuffer8[begincol + 2][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue83 = UTIL_GETKV2(vbuffer8[begincol + 3][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue84 = UTIL_GETKV2(vbuffer8[begincol + 4][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue85 = UTIL_GETKV2(vbuffer8[begincol + 5][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue86 = UTIL_GETKV2(vbuffer8[begincol + 6][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue87 = UTIL_GETKV2(vbuffer8[begincol + 7][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue90 = UTIL_GETKV2(vbuffer9[begincol + 0][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue91 = UTIL_GETKV2(vbuffer9[begincol + 1][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue92 = UTIL_GETKV2(vbuffer9[begincol + 2][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue93 = UTIL_GETKV2(vbuffer9[begincol + 3][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue94 = UTIL_GETKV2(vbuffer9[begincol + 4][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue95 = UTIL_GETKV2(vbuffer9[begincol + 5][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue96 = UTIL_GETKV2(vbuffer9[begincol + 6][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue97 = UTIL_GETKV2(vbuffer9[begincol + 7][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue100 = UTIL_GETKV2(vbuffer10[begincol + 0][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue101 = UTIL_GETKV2(vbuffer10[begincol + 1][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue102 = UTIL_GETKV2(vbuffer10[begincol + 2][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue103 = UTIL_GETKV2(vbuffer10[begincol + 3][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue104 = UTIL_GETKV2(vbuffer10[begincol + 4][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue105 = UTIL_GETKV2(vbuffer10[begincol + 5][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue106 = UTIL_GETKV2(vbuffer10[begincol + 6][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue107 = UTIL_GETKV2(vbuffer10[begincol + 7][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue110 = UTIL_GETKV2(vbuffer11[begincol + 0][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue111 = UTIL_GETKV2(vbuffer11[begincol + 1][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue112 = UTIL_GETKV2(vbuffer11[begincol + 2][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue113 = UTIL_GETKV2(vbuffer11[begincol + 3][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue114 = UTIL_GETKV2(vbuffer11[begincol + 4][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue115 = UTIL_GETKV2(vbuffer11[begincol + 5][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue116 = UTIL_GETKV2(vbuffer11[begincol + 6][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue117 = UTIL_GETKV2(vbuffer11[begincol + 7][bufferoffset_kvs + j]);	
		keyvalue_t mykeyvalue120 = dummykv;
		keyvalue_t mykeyvalue121 = dummykv;
		keyvalue_t mykeyvalue122 = dummykv;
		keyvalue_t mykeyvalue123 = dummykv;
		keyvalue_t mykeyvalue124 = dummykv;
		keyvalue_t mykeyvalue125 = dummykv;
		keyvalue_t mykeyvalue126 = dummykv;
		keyvalue_t mykeyvalue127 = dummykv;
		keyvalue_t mykeyvalue130 = dummykv;
		keyvalue_t mykeyvalue131 = dummykv;
		keyvalue_t mykeyvalue132 = dummykv;
		keyvalue_t mykeyvalue133 = dummykv;
		keyvalue_t mykeyvalue134 = dummykv;
		keyvalue_t mykeyvalue135 = dummykv;
		keyvalue_t mykeyvalue136 = dummykv;
		keyvalue_t mykeyvalue137 = dummykv;
		keyvalue_t mykeyvalue140 = dummykv;
		keyvalue_t mykeyvalue141 = dummykv;
		keyvalue_t mykeyvalue142 = dummykv;
		keyvalue_t mykeyvalue143 = dummykv;
		keyvalue_t mykeyvalue144 = dummykv;
		keyvalue_t mykeyvalue145 = dummykv;
		keyvalue_t mykeyvalue146 = dummykv;
		keyvalue_t mykeyvalue147 = dummykv;
		
		//((n)/2)
		keyA0 = MERGE_mergefunc(mykeyvalue00.key, mykeyvalue10.key, NAp);
		keyB0 = MERGE_mergefunc(mykeyvalue20.key, mykeyvalue30.key, NAp);
		keyC0 = MERGE_mergefunc(mykeyvalue40.key, mykeyvalue50.key, NAp);
		keyD0 = MERGE_mergefunc(mykeyvalue60.key, mykeyvalue70.key, NAp);
		keyE0 = MERGE_mergefunc(mykeyvalue80.key, mykeyvalue90.key, NAp);
		keyF0 = MERGE_mergefunc(mykeyvalue100.key, mykeyvalue110.key, NAp);
		keyG0 = MERGE_mergefunc(mykeyvalue120.key, mykeyvalue130.key, NAp);
		keyA1 = MERGE_mergefunc(mykeyvalue01.key, mykeyvalue11.key, NAp);
		keyB1 = MERGE_mergefunc(mykeyvalue21.key, mykeyvalue31.key, NAp);
		keyC1 = MERGE_mergefunc(mykeyvalue41.key, mykeyvalue51.key, NAp);
		keyD1 = MERGE_mergefunc(mykeyvalue61.key, mykeyvalue71.key, NAp);
		keyE1 = MERGE_mergefunc(mykeyvalue81.key, mykeyvalue91.key, NAp);
		keyF1 = MERGE_mergefunc(mykeyvalue101.key, mykeyvalue111.key, NAp);
		keyG1 = MERGE_mergefunc(mykeyvalue121.key, mykeyvalue131.key, NAp);
		keyA2 = MERGE_mergefunc(mykeyvalue02.key, mykeyvalue12.key, NAp);
		keyB2 = MERGE_mergefunc(mykeyvalue22.key, mykeyvalue32.key, NAp);
		keyC2 = MERGE_mergefunc(mykeyvalue42.key, mykeyvalue52.key, NAp);
		keyD2 = MERGE_mergefunc(mykeyvalue62.key, mykeyvalue72.key, NAp);
		keyE2 = MERGE_mergefunc(mykeyvalue82.key, mykeyvalue92.key, NAp);
		keyF2 = MERGE_mergefunc(mykeyvalue102.key, mykeyvalue112.key, NAp);
		keyG2 = MERGE_mergefunc(mykeyvalue122.key, mykeyvalue132.key, NAp);
		keyA3 = MERGE_mergefunc(mykeyvalue03.key, mykeyvalue13.key, NAp);
		keyB3 = MERGE_mergefunc(mykeyvalue23.key, mykeyvalue33.key, NAp);
		keyC3 = MERGE_mergefunc(mykeyvalue43.key, mykeyvalue53.key, NAp);
		keyD3 = MERGE_mergefunc(mykeyvalue63.key, mykeyvalue73.key, NAp);
		keyE3 = MERGE_mergefunc(mykeyvalue83.key, mykeyvalue93.key, NAp);
		keyF3 = MERGE_mergefunc(mykeyvalue103.key, mykeyvalue113.key, NAp);
		keyG3 = MERGE_mergefunc(mykeyvalue123.key, mykeyvalue133.key, NAp);
		keyA4 = MERGE_mergefunc(mykeyvalue04.key, mykeyvalue14.key, NAp);
		keyB4 = MERGE_mergefunc(mykeyvalue24.key, mykeyvalue34.key, NAp);
		keyC4 = MERGE_mergefunc(mykeyvalue44.key, mykeyvalue54.key, NAp);
		keyD4 = MERGE_mergefunc(mykeyvalue64.key, mykeyvalue74.key, NAp);
		keyE4 = MERGE_mergefunc(mykeyvalue84.key, mykeyvalue94.key, NAp);
		keyF4 = MERGE_mergefunc(mykeyvalue104.key, mykeyvalue114.key, NAp);
		keyG4 = MERGE_mergefunc(mykeyvalue124.key, mykeyvalue134.key, NAp);
		keyA5 = MERGE_mergefunc(mykeyvalue05.key, mykeyvalue15.key, NAp);
		keyB5 = MERGE_mergefunc(mykeyvalue25.key, mykeyvalue35.key, NAp);
		keyC5 = MERGE_mergefunc(mykeyvalue45.key, mykeyvalue55.key, NAp);
		keyD5 = MERGE_mergefunc(mykeyvalue65.key, mykeyvalue75.key, NAp);
		keyE5 = MERGE_mergefunc(mykeyvalue85.key, mykeyvalue95.key, NAp);
		keyF5 = MERGE_mergefunc(mykeyvalue105.key, mykeyvalue115.key, NAp);
		keyG5 = MERGE_mergefunc(mykeyvalue125.key, mykeyvalue135.key, NAp);
		keyA6 = MERGE_mergefunc(mykeyvalue06.key, mykeyvalue16.key, NAp);
		keyB6 = MERGE_mergefunc(mykeyvalue26.key, mykeyvalue36.key, NAp);
		keyC6 = MERGE_mergefunc(mykeyvalue46.key, mykeyvalue56.key, NAp);
		keyD6 = MERGE_mergefunc(mykeyvalue66.key, mykeyvalue76.key, NAp);
		keyE6 = MERGE_mergefunc(mykeyvalue86.key, mykeyvalue96.key, NAp);
		keyF6 = MERGE_mergefunc(mykeyvalue106.key, mykeyvalue116.key, NAp);
		keyG6 = MERGE_mergefunc(mykeyvalue126.key, mykeyvalue136.key, NAp);
		keyA7 = MERGE_mergefunc(mykeyvalue07.key, mykeyvalue17.key, NAp);
		keyB7 = MERGE_mergefunc(mykeyvalue27.key, mykeyvalue37.key, NAp);
		keyC7 = MERGE_mergefunc(mykeyvalue47.key, mykeyvalue57.key, NAp);
		keyD7 = MERGE_mergefunc(mykeyvalue67.key, mykeyvalue77.key, NAp);
		keyE7 = MERGE_mergefunc(mykeyvalue87.key, mykeyvalue97.key, NAp);
		keyF7 = MERGE_mergefunc(mykeyvalue107.key, mykeyvalue117.key, NAp);
		keyG7 = MERGE_mergefunc(mykeyvalue127.key, mykeyvalue137.key, NAp);
		keyy_t keyPA0 = MERGE_mergefunc(keyA0, keyB0, NAp);
		keyy_t keyPB0 = MERGE_mergefunc(keyC0, keyD0, NAp);
		keyy_t keyPC0 = MERGE_mergefunc(keyE0, keyF0, NAp);
		keyy_t keyRA0 = MERGE_mergefunc(keyPA0, keyPB0, NAp);
		keyy_t keyRB0 = MERGE_mergefunc(keyPC0, keyF0, NAp);
		keyy_t keyRZ0 = MERGE_mergefunc(keyRA0, keyRB0, NAp);
		keyy_t keyPA1 = MERGE_mergefunc(keyA1, keyB1, NAp);
		keyy_t keyPB1 = MERGE_mergefunc(keyC1, keyD1, NAp);
		keyy_t keyPC1 = MERGE_mergefunc(keyE1, keyF1, NAp);
		keyy_t keyRA1 = MERGE_mergefunc(keyPA1, keyPB1, NAp);
		keyy_t keyRB1 = MERGE_mergefunc(keyPC1, keyF1, NAp);
		keyy_t keyRZ1 = MERGE_mergefunc(keyRA1, keyRB1, NAp);
		keyy_t keyPA2 = MERGE_mergefunc(keyA2, keyB2, NAp);
		keyy_t keyPB2 = MERGE_mergefunc(keyC2, keyD2, NAp);
		keyy_t keyPC2 = MERGE_mergefunc(keyE2, keyF2, NAp);
		keyy_t keyRA2 = MERGE_mergefunc(keyPA2, keyPB2, NAp);
		keyy_t keyRB2 = MERGE_mergefunc(keyPC2, keyF2, NAp);
		keyy_t keyRZ2 = MERGE_mergefunc(keyRA2, keyRB2, NAp);
		keyy_t keyPA3 = MERGE_mergefunc(keyA3, keyB3, NAp);
		keyy_t keyPB3 = MERGE_mergefunc(keyC3, keyD3, NAp);
		keyy_t keyPC3 = MERGE_mergefunc(keyE3, keyF3, NAp);
		keyy_t keyRA3 = MERGE_mergefunc(keyPA3, keyPB3, NAp);
		keyy_t keyRB3 = MERGE_mergefunc(keyPC3, keyF3, NAp);
		keyy_t keyRZ3 = MERGE_mergefunc(keyRA3, keyRB3, NAp);
		keyy_t keyPA4 = MERGE_mergefunc(keyA4, keyB4, NAp);
		keyy_t keyPB4 = MERGE_mergefunc(keyC4, keyD4, NAp);
		keyy_t keyPC4 = MERGE_mergefunc(keyE4, keyF4, NAp);
		keyy_t keyRA4 = MERGE_mergefunc(keyPA4, keyPB4, NAp);
		keyy_t keyRB4 = MERGE_mergefunc(keyPC4, keyF4, NAp);
		keyy_t keyRZ4 = MERGE_mergefunc(keyRA4, keyRB4, NAp);
		keyy_t keyPA5 = MERGE_mergefunc(keyA5, keyB5, NAp);
		keyy_t keyPB5 = MERGE_mergefunc(keyC5, keyD5, NAp);
		keyy_t keyPC5 = MERGE_mergefunc(keyE5, keyF5, NAp);
		keyy_t keyRA5 = MERGE_mergefunc(keyPA5, keyPB5, NAp);
		keyy_t keyRB5 = MERGE_mergefunc(keyPC5, keyF5, NAp);
		keyy_t keyRZ5 = MERGE_mergefunc(keyRA5, keyRB5, NAp);
		keyy_t keyPA6 = MERGE_mergefunc(keyA6, keyB6, NAp);
		keyy_t keyPB6 = MERGE_mergefunc(keyC6, keyD6, NAp);
		keyy_t keyPC6 = MERGE_mergefunc(keyE6, keyF6, NAp);
		keyy_t keyRA6 = MERGE_mergefunc(keyPA6, keyPB6, NAp);
		keyy_t keyRB6 = MERGE_mergefunc(keyPC6, keyF6, NAp);
		keyy_t keyRZ6 = MERGE_mergefunc(keyRA6, keyRB6, NAp);
		keyy_t keyPA7 = MERGE_mergefunc(keyA7, keyB7, NAp);
		keyy_t keyPB7 = MERGE_mergefunc(keyC7, keyD7, NAp);
		keyy_t keyPC7 = MERGE_mergefunc(keyE7, keyF7, NAp);
		keyy_t keyRA7 = MERGE_mergefunc(keyPA7, keyPB7, NAp);
		keyy_t keyRB7 = MERGE_mergefunc(keyPC7, keyF7, NAp);
		keyy_t keyRZ7 = MERGE_mergefunc(keyRA7, keyRB7, NAp);
		
		//((n)/2)
		valA0 = MERGE_mergefunc(mykeyvalue00.value, mykeyvalue10.value, NAp);
		valB0 = MERGE_mergefunc(mykeyvalue20.value, mykeyvalue30.value, NAp);
		valC0 = MERGE_mergefunc(mykeyvalue40.value, mykeyvalue50.value, NAp);
		valD0 = MERGE_mergefunc(mykeyvalue60.value, mykeyvalue70.value, NAp);
		valE0 = MERGE_mergefunc(mykeyvalue80.value, mykeyvalue90.value, NAp);
		valF0 = MERGE_mergefunc(mykeyvalue100.value, mykeyvalue110.value, NAp);
		valG0 = MERGE_mergefunc(mykeyvalue120.value, mykeyvalue130.value, NAp);
		valA1 = MERGE_mergefunc(mykeyvalue01.value, mykeyvalue11.value, NAp);
		valB1 = MERGE_mergefunc(mykeyvalue21.value, mykeyvalue31.value, NAp);
		valC1 = MERGE_mergefunc(mykeyvalue41.value, mykeyvalue51.value, NAp);
		valD1 = MERGE_mergefunc(mykeyvalue61.value, mykeyvalue71.value, NAp);
		valE1 = MERGE_mergefunc(mykeyvalue81.value, mykeyvalue91.value, NAp);
		valF1 = MERGE_mergefunc(mykeyvalue101.value, mykeyvalue111.value, NAp);
		valG1 = MERGE_mergefunc(mykeyvalue121.value, mykeyvalue131.value, NAp);
		valA2 = MERGE_mergefunc(mykeyvalue02.value, mykeyvalue12.value, NAp);
		valB2 = MERGE_mergefunc(mykeyvalue22.value, mykeyvalue32.value, NAp);
		valC2 = MERGE_mergefunc(mykeyvalue42.value, mykeyvalue52.value, NAp);
		valD2 = MERGE_mergefunc(mykeyvalue62.value, mykeyvalue72.value, NAp);
		valE2 = MERGE_mergefunc(mykeyvalue82.value, mykeyvalue92.value, NAp);
		valF2 = MERGE_mergefunc(mykeyvalue102.value, mykeyvalue112.value, NAp);
		valG2 = MERGE_mergefunc(mykeyvalue122.value, mykeyvalue132.value, NAp);
		valA3 = MERGE_mergefunc(mykeyvalue03.value, mykeyvalue13.value, NAp);
		valB3 = MERGE_mergefunc(mykeyvalue23.value, mykeyvalue33.value, NAp);
		valC3 = MERGE_mergefunc(mykeyvalue43.value, mykeyvalue53.value, NAp);
		valD3 = MERGE_mergefunc(mykeyvalue63.value, mykeyvalue73.value, NAp);
		valE3 = MERGE_mergefunc(mykeyvalue83.value, mykeyvalue93.value, NAp);
		valF3 = MERGE_mergefunc(mykeyvalue103.value, mykeyvalue113.value, NAp);
		valG3 = MERGE_mergefunc(mykeyvalue123.value, mykeyvalue133.value, NAp);
		valA4 = MERGE_mergefunc(mykeyvalue04.value, mykeyvalue14.value, NAp);
		valB4 = MERGE_mergefunc(mykeyvalue24.value, mykeyvalue34.value, NAp);
		valC4 = MERGE_mergefunc(mykeyvalue44.value, mykeyvalue54.value, NAp);
		valD4 = MERGE_mergefunc(mykeyvalue64.value, mykeyvalue74.value, NAp);
		valE4 = MERGE_mergefunc(mykeyvalue84.value, mykeyvalue94.value, NAp);
		valF4 = MERGE_mergefunc(mykeyvalue104.value, mykeyvalue114.value, NAp);
		valG4 = MERGE_mergefunc(mykeyvalue124.value, mykeyvalue134.value, NAp);
		valA5 = MERGE_mergefunc(mykeyvalue05.value, mykeyvalue15.value, NAp);
		valB5 = MERGE_mergefunc(mykeyvalue25.value, mykeyvalue35.value, NAp);
		valC5 = MERGE_mergefunc(mykeyvalue45.value, mykeyvalue55.value, NAp);
		valD5 = MERGE_mergefunc(mykeyvalue65.value, mykeyvalue75.value, NAp);
		valE5 = MERGE_mergefunc(mykeyvalue85.value, mykeyvalue95.value, NAp);
		valF5 = MERGE_mergefunc(mykeyvalue105.value, mykeyvalue115.value, NAp);
		valG5 = MERGE_mergefunc(mykeyvalue125.value, mykeyvalue135.value, NAp);
		valA6 = MERGE_mergefunc(mykeyvalue06.value, mykeyvalue16.value, NAp);
		valB6 = MERGE_mergefunc(mykeyvalue26.value, mykeyvalue36.value, NAp);
		valC6 = MERGE_mergefunc(mykeyvalue46.value, mykeyvalue56.value, NAp);
		valD6 = MERGE_mergefunc(mykeyvalue66.value, mykeyvalue76.value, NAp);
		valE6 = MERGE_mergefunc(mykeyvalue86.value, mykeyvalue96.value, NAp);
		valF6 = MERGE_mergefunc(mykeyvalue106.value, mykeyvalue116.value, NAp);
		valG6 = MERGE_mergefunc(mykeyvalue126.value, mykeyvalue136.value, NAp);
		valA7 = MERGE_mergefunc(mykeyvalue07.value, mykeyvalue17.value, NAp);
		valB7 = MERGE_mergefunc(mykeyvalue27.value, mykeyvalue37.value, NAp);
		valC7 = MERGE_mergefunc(mykeyvalue47.value, mykeyvalue57.value, NAp);
		valD7 = MERGE_mergefunc(mykeyvalue67.value, mykeyvalue77.value, NAp);
		valE7 = MERGE_mergefunc(mykeyvalue87.value, mykeyvalue97.value, NAp);
		valF7 = MERGE_mergefunc(mykeyvalue107.value, mykeyvalue117.value, NAp);
		valG7 = MERGE_mergefunc(mykeyvalue127.value, mykeyvalue137.value, NAp);
		value_t valPA0 = MERGE_mergefunc(valA0, valB0, NAp);
		value_t valPB0 = MERGE_mergefunc(valC0, valD0, NAp);
		value_t valPC0 = MERGE_mergefunc(valE0, valF0, NAp);
		value_t valRA0 = MERGE_mergefunc(valPA0, valPB0, NAp);
		value_t valRB0 = MERGE_mergefunc(valPC0, valF0, NAp);
		value_t valRZ0 = MERGE_mergefunc(valRA0, valRB0, NAp);
		value_t valPA1 = MERGE_mergefunc(valA1, valB1, NAp);
		value_t valPB1 = MERGE_mergefunc(valC1, valD1, NAp);
		value_t valPC1 = MERGE_mergefunc(valE1, valF1, NAp);
		value_t valRA1 = MERGE_mergefunc(valPA1, valPB1, NAp);
		value_t valRB1 = MERGE_mergefunc(valPC1, valF1, NAp);
		value_t valRZ1 = MERGE_mergefunc(valRA1, valRB1, NAp);
		value_t valPA2 = MERGE_mergefunc(valA2, valB2, NAp);
		value_t valPB2 = MERGE_mergefunc(valC2, valD2, NAp);
		value_t valPC2 = MERGE_mergefunc(valE2, valF2, NAp);
		value_t valRA2 = MERGE_mergefunc(valPA2, valPB2, NAp);
		value_t valRB2 = MERGE_mergefunc(valPC2, valF2, NAp);
		value_t valRZ2 = MERGE_mergefunc(valRA2, valRB2, NAp);
		value_t valPA3 = MERGE_mergefunc(valA3, valB3, NAp);
		value_t valPB3 = MERGE_mergefunc(valC3, valD3, NAp);
		value_t valPC3 = MERGE_mergefunc(valE3, valF3, NAp);
		value_t valRA3 = MERGE_mergefunc(valPA3, valPB3, NAp);
		value_t valRB3 = MERGE_mergefunc(valPC3, valF3, NAp);
		value_t valRZ3 = MERGE_mergefunc(valRA3, valRB3, NAp);
		value_t valPA4 = MERGE_mergefunc(valA4, valB4, NAp);
		value_t valPB4 = MERGE_mergefunc(valC4, valD4, NAp);
		value_t valPC4 = MERGE_mergefunc(valE4, valF4, NAp);
		value_t valRA4 = MERGE_mergefunc(valPA4, valPB4, NAp);
		value_t valRB4 = MERGE_mergefunc(valPC4, valF4, NAp);
		value_t valRZ4 = MERGE_mergefunc(valRA4, valRB4, NAp);
		value_t valPA5 = MERGE_mergefunc(valA5, valB5, NAp);
		value_t valPB5 = MERGE_mergefunc(valC5, valD5, NAp);
		value_t valPC5 = MERGE_mergefunc(valE5, valF5, NAp);
		value_t valRA5 = MERGE_mergefunc(valPA5, valPB5, NAp);
		value_t valRB5 = MERGE_mergefunc(valPC5, valF5, NAp);
		value_t valRZ5 = MERGE_mergefunc(valRA5, valRB5, NAp);
		value_t valPA6 = MERGE_mergefunc(valA6, valB6, NAp);
		value_t valPB6 = MERGE_mergefunc(valC6, valD6, NAp);
		value_t valPC6 = MERGE_mergefunc(valE6, valF6, NAp);
		value_t valRA6 = MERGE_mergefunc(valPA6, valPB6, NAp);
		value_t valRB6 = MERGE_mergefunc(valPC6, valF6, NAp);
		value_t valRZ6 = MERGE_mergefunc(valRA6, valRB6, NAp);
		value_t valPA7 = MERGE_mergefunc(valA7, valB7, NAp);
		value_t valPB7 = MERGE_mergefunc(valC7, valD7, NAp);
		value_t valPC7 = MERGE_mergefunc(valE7, valF7, NAp);
		value_t valRA7 = MERGE_mergefunc(valPA7, valPB7, NAp);
		value_t valRB7 = MERGE_mergefunc(valPC7, valF7, NAp);
		value_t valRZ7 = MERGE_mergefunc(valRA7, valRB7, NAp);
		
		#ifdef _WIDEWORD
		vdram[dramoffset_kvs + j].range(31, 0) = keyRZ0;
		vdram[dramoffset_kvs + j].range(63, 32) = valRZ0;
		vdram[dramoffset_kvs + j].range(95, 64) = keyRZ1;
		vdram[dramoffset_kvs + j].range(127, 96) = valRZ1;
		vdram[dramoffset_kvs + j].range(159, 128) = keyRZ2;
		vdram[dramoffset_kvs + j].range(191, 160) = valRZ2;
		vdram[dramoffset_kvs + j].range(223, 192) = keyRZ3;
		vdram[dramoffset_kvs + j].range(255, 224) = valRZ3;
		vdram[dramoffset_kvs + j].range(287, 256) = keyRZ4;
		vdram[dramoffset_kvs + j].range(319, 288) = valRZ4;
		vdram[dramoffset_kvs + j].range(351, 320) = keyRZ5;
		vdram[dramoffset_kvs + j].range(383, 352) = valRZ5;
		vdram[dramoffset_kvs + j].range(415, 384) = keyRZ6;
		vdram[dramoffset_kvs + j].range(447, 416) = valRZ6;
		vdram[dramoffset_kvs + j].range(479, 448) = keyRZ7;
		vdram[dramoffset_kvs + j].range(511, 480) = valRZ7;
		#else
		vdram[dramoffset_kvs + j].data[0].key = keyRZ0;
		vdram[dramoffset_kvs + j].data[0].value = valRZ0;
		vdram[dramoffset_kvs + j].data[1].key = keyRZ1;
		vdram[dramoffset_kvs + j].data[1].value = valRZ1;
		vdram[dramoffset_kvs + j].data[2].key = keyRZ2;
		vdram[dramoffset_kvs + j].data[2].value = valRZ2;
		vdram[dramoffset_kvs + j].data[3].key = keyRZ3;
		vdram[dramoffset_kvs + j].data[3].value = valRZ3;
		vdram[dramoffset_kvs + j].data[4].key = keyRZ4;
		vdram[dramoffset_kvs + j].data[4].value = valRZ4;
		vdram[dramoffset_kvs + j].data[5].key = keyRZ5;
		vdram[dramoffset_kvs + j].data[5].value = valRZ5;
		vdram[dramoffset_kvs + j].data[6].key = keyRZ6;
		vdram[dramoffset_kvs + j].data[6].value = valRZ6;
		vdram[dramoffset_kvs + j].data[7].key = keyRZ7;
		vdram[dramoffset_kvs + j].data[7].value = valRZ7;
		#endif
	}
	return;
}


