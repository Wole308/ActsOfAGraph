#include <string>
#include <string.h>
#include <iostream>
#include <vector>
#include <string.h>
#include <stdio.h>
#include <ctime>
#include <functional>
#include <sys/time.h>
#include <time.h>
#include <stdlib.h>
#include <iomanip>
#include <cmath>
#include <fstream>
#include "../../include/common.h"
#include "../include/actscommon.h"
#ifndef FPGA_IMPL
#include "../../src/utility/utility.h"
#include "../actsutility/actsutility.h"
#endif 
#include "actspartition.h"
using namespace std;

#ifdef SW
actspartition::actspartition(){ actsutilityobj = new actsutility(); }
actspartition::~actspartition(){}
#endif 

unsigned int 
	#ifdef SW 
	actspartition::
	#endif 
allignhigher_KV(unsigned int val){
	unsigned int fac = (val + (ALW_VECTOR_SIZE - 1)) / ALW_VECTOR_SIZE;
	return (fac * ALW_VECTOR_SIZE); // ALW_VECTOR_SIZE
}
void 
	#ifdef SW 
	actspartition::
	#endif 
copykeyandvalues(keyvalue_t * buffer1, keyvalue_t * buffer2, unsigned int size){
	#pragma HLS INLINE
	for(partition_type i=0; i<size; i++){ buffer1[i] = buffer2[i]; }
}
void 
	#ifdef SW 
	actspartition::
	#endif 
calculatemanyoffsets(keyvalue_t buffer[NUMTWINS][NUM_PARTITIONS], unsigned int size){
	#pragma HLS INLINE
	for(partition_type i=1; i<size; i++){ 
		for(buffer_type j=0; j<NUMTWINS; j++){
		#pragma HLS UNROLL
			buffer[j][i].key = allignhigher_KV(buffer[j][i-1].key + buffer[j][i-1].value); 
		}
	}
}
void 
	#ifdef SW 
	actspartition::
	#endif 
resetkeyandvalues(keyvalue_t * buffer, unsigned int size){
	#pragma HLS INLINE
	for(unsigned int i=0; i<size; i++){ buffer[i].key = 0; buffer[i].value = 0; }
}
void 
	#ifdef SW 
	actspartition::
	#endif 
resetmanykeyandvalues(keyvalue_t buffer[NUMTWINS][NUM_PARTITIONS], unsigned int size){
	#pragma HLS INLINE
	for(unsigned int i=0; i<size; i++){ 
		for(buffer_type j=0; j<NUMTWINS; j++){ 
		#pragma HLS UNROLL
			buffer[j][i].key = 0; buffer[j][i].value = 0; 
		}
	}
}
unsigned int 
	#ifdef SW 
	actspartition::
	#endif 
checkandforce(unsigned int val, unsigned int limit){ if(val >= limit){ return 0; } else { return val; }}
buffer_type 
	#ifdef SW 
	actspartition::
	#endif 
getchunksize(buffer_type buffer_size, atp_travstate_t travstate, unsigned int localoffset){
	#pragma HLS INLINE
	buffer_type chunk_size = buffer_size;
	batch_type i = travstate.i_kvs + localoffset;
	if (i > travstate.end_kvs){ chunk_size = 0; }
	else if ((i + buffer_size) > travstate.end_kvs){ chunk_size = travstate.end_kvs - i; }
	else {}
	return chunk_size;
}
unsigned int 
	#ifdef SW 
	actspartition::
	#endif 
getpartition(keyvalue_t keyvalue, unsigned int currentLOP, vertex_t upperlimit){
	partition_type partition = ((keyvalue.key - upperlimit) >> (BATCH_RANGE_POW - (NUM_PARTITIONS_POW * currentLOP)));
	#ifdef _DEBUGMODE_CHECKS2
	actsutilityobj->checkoutofbounds("actspartition::getpartition", partition, NUM_PARTITIONS, keyvalue.key, upperlimit, currentLOP);
	#endif
	// partition = checkandforce(partition, NUM_PARTITIONS);
	return partition;
}

void 
	#ifdef SW 
	actspartition::
	#endif 
read(uint512_dt * kvdram, keyvalue_t * buffer, batch_type offset_kvs, buffer_type size_kvs){
	unsigned int analysis_srcbuffersz = NUM_PARTITIONS;
	READ_LOOP: for (buffer_type i=0; i<size_kvs; i++){
	#pragma HLS PIPELINE II=1
	#pragma HLS LOOP_TRIPCOUNT min=0 max=analysis_srcbuffersz avg=analysis_srcbuffersz	
		buffer[i] = kvdram[offset_kvs + i].data[0];
	}
	return;
}
void 
	#ifdef SW 
	actspartition::
	#endif 
save(uint512_dt * kvdram, keyvalue_t * buffer, batch_type offset_kvs, buffer_type size_kvs){
	unsigned int analysis_srcbuffersz = NUM_PARTITIONS;
	SAVE_LOOP: for (buffer_type i=0; i<size_kvs; i++){
	#pragma HLS PIPELINE II=1
	#pragma HLS LOOP_TRIPCOUNT min=0 max=analysis_srcbuffersz avg=analysis_srcbuffersz	
		kvdram[offset_kvs + i].data[0] = buffer[i];
	}
	return;
}

{%for inst, inst_ in zip(context['NUMINSTANCES_seq'], context['INSTANCES_charseq'])%}
void 
	#ifdef SW 
	actspartition::
	#endif 
readKVS{{inst}}(unsigned int sw, uint512_dt * kvdram, atp_uint512_dt buffer[NUMTWINS][ALW_SRCBUFFER_SIZE], batch_type offset_kvs, atp_travstate_t travstate){
	unsigned int analysis_srcbuffersz = ALW_SRCBUFFER_SIZE;
	travstate.i_kvs += sw * ALW_SRCBUFFER_SIZE;
	buffer_type chunk_size = getchunksize(ALW_SRCBUFFER_SIZE, travstate, 0);
	READKVS_LOOP: for (buffer_type i=0; i<chunk_size; i++){
	#pragma HLS LOOP_TRIPCOUNT min=0 max=analysis_srcbuffersz avg=analysis_srcbuffersz	
	#pragma HLS PIPELINE II=1
		{%for t in context['NUMTWINS_seq']%}
		{%for lv in context['ALW_VECTOR_SIZE_seq']%}
		buffer[{{t}}][i].data[{{lv}}] = kvdram[offset_kvs + i].data[{{lv + t*context['ALW_VECTOR_SIZE']}}]; 
		{%endfor%}
		{%endfor%}
		#ifdef _DEBUGMODE_STATS
		actsutilityobj->globalstats_countkvsread(1 * NUMTWINS * ALW_VECTOR_SIZE);
		#endif
	}
	return;
}
{%endfor%}

{%for inst, inst_ in zip(context['NUMINSTANCES_seq'], context['INSTANCES_charseq'])%}
{%for sw in context['NUMSUBWORKERS_seq']%}
void 
	#ifdef SW 
	actspartition::
	#endif 
partition{{inst}}{{sw}}(unsigned int sw, atp_uint512_dt sourcebuffer[NUMTWINS][ALW_SRCBUFFER_SIZE], atp_uint512_dt destbuffer[NUMTWINS][ALW_PADDEDDESTBUFFER_SIZE], keyvalue_t _localcapsule[NUMTWINS][NUM_PARTITIONS], sweepparams_t sweepparams, atp_travstate_t travstate){
	unsigned int analysis_srcbuffersz = ALW_SRCBUFFER_SIZE;
	// keyvalue_t _localcapsule[NUM_PARTITIONS];
	// #pragma HLS ARRAY_PARTITION variable=_localcapsule complete
	
	travstate.i_kvs += {{sw}} * ALW_SRCBUFFER_SIZE;
	buffer_type chunk_size = getchunksize(ALW_SRCBUFFER_SIZE, travstate, 0);

	resetmanykeyandvalues(_localcapsule, NUM_PARTITIONS);
	COLLECTSTATS_LOOP2: for(buffer_type i=0; i<chunk_size; i++){
	#pragma HLS LOOP_TRIPCOUNT min=0 max=analysis_srcbuffersz avg=analysis_srcbuffersz	
		COLLECTSTATS_LOOP2B: for(buffer_type j=0; j<ALW_VECTOR_SIZE; j++){ 
		#pragma HLS PIPELINE II=1
			{%for t in context['NUMTWINS_seq']%}
			keyvalue_t keyvalue{{t}} = sourcebuffer[{{t}}][i].data[j];
			{%endfor%}
			{%for t in context['NUMTWINS_seq']%}
			partition_type p{{t}} = getpartition(keyvalue{{t}}, sweepparams.currentLOP, sweepparams.upperlimit);
			{%endfor%}

			{%for t in context['NUMTWINS_seq']%}
			_localcapsule[{{t}}][p{{t}}].value += 1;
			{%endfor%}
			#ifdef _DEBUGMODE_CHECKS2
			actsutilityobj->globalvar_collectstats_counttotalkvsread(1 * NUMTWINS);
			#endif 
		}
	}
	calculatemanyoffsets(_localcapsule, NUM_PARTITIONS);
	resetmanykeyandvalues(_localcapsule, NUM_PARTITIONS);
	PARTITION_LOOP5: for(buffer_type i=0; i<chunk_size; i++){
	#pragma HLS LOOP_TRIPCOUNT min=0 max=analysis_srcbuffersz avg=analysis_srcbuffersz	
		PARTITION_LOOP5B: for(buffer_type j=0; j<ALW_VECTOR_SIZE; j++){
		#pragma HLS PIPELINE II=1
			{%for t in context['NUMTWINS_seq']%}
			keyvalue_t keyvalue{{t}} = sourcebuffer[{{t}}][i].data[j];
			{%endfor%}
			{%for t in context['NUMTWINS_seq']%}
			partition_type p{{t}} = getpartition(keyvalue{{t}}, sweepparams.currentLOP, sweepparams.upperlimit);
			{%endfor%}
			
			{%for t in context['NUMTWINS_seq']%}
			buffer_type index{{t}} = _localcapsule[{{t}}][p{{t}}].key + _localcapsule[{{t}}][p{{t}}].value;
			batch_type idy{{t}} = index{{t}} / ALW_VECTOR_SIZE; 
			vector_type idx{{t}} = index{{t}} % ALW_VECTOR_SIZE; 
			{%endfor%}
			
			{%for t in context['NUMTWINS_seq']%}
			destbuffer[{{t}}][idy{{t}}].data[idx{{t}}] = keyvalue{{t}};
			{%endfor%}
			{%for t in context['NUMTWINS_seq']%}
			_localcapsule[{{t}}][p{{t}}].value += 1;
			{%endfor%}
			#ifdef _DEBUGMODE_CHECKS2
			actsutilityobj->globalstats_countkvspartitioned(1 * NUMTWINS);
			#endif 
		}
	}
	keyvalue_t InvalidKV; InvalidKV.key = INVALIDDATA; InvalidKV.value = INVALIDDATA;
	APPENDINVALIDS_LOOP1: for(partition_type p=0; p<NUM_PARTITIONS; p++){
		{%for t in context['NUMTWINS_seq']%}
		buffer_type ovsize{{t}} = allignhigher_KV(_localcapsule[{{t}}][p].value) - _localcapsule[{{t}}][p].value;
		{%endfor%}
	
		#ifdef _DEBUGMODE_STATS
		{%for t in context['NUMTWINS_seq']%}
		actsutilityobj->globalvar_savepartitions_countinvalids(ovsize{{t}} * NUMTWINS);
		{%endfor%}
		#endif
		
		{%for t in context['NUMTWINS_seq']%}
		buffer_type index{{t}} = _localcapsule[{{t}}][p].key + _localcapsule[{{t}}][p].value;
		batch_type idy{{t}} = index{{t}} / ALW_VECTOR_SIZE; 
		vector_type idx{{t}} = index{{t}} % ALW_VECTOR_SIZE; 
		{%endfor%}
	
		APPENDINVALIDS_LOOP1B: for(vector_type v=0; v<ALW_VECTOR_SIZE; v++){ 
		#pragma HLS PIPELINE
			{%for t in context['NUMTWINS_seq']%}
			if(v < ovsize{{t}}){ destbuffer[{{t}}][idy{{t}}].data[idx{{t}} + v] = InvalidKV; }
			{%endfor%}
		}
	}
	// copykeyandvalues(localcapsule, _localcapsule, NUM_PARTITIONS);
	return;
}
{%endfor%}
{%endfor%}

{%for inst, inst_ in zip(context['NUMINSTANCES_seq'], context['INSTANCES_charseq'])%}
void 
	#ifdef SW 
	actspartition::
	#endif 
saveKVS{{inst}}(uint512_dt * kvdram, atp_uint512_dt buffer[NUMTWINS][ALW_PADDEDDESTBUFFER_SIZE], keyvalue_t * globalcapsule, keyvalue_t localcapsule[NUMTWINS][NUM_PARTITIONS], batch_type globalbaseaddress_kvs){				
	unsigned int analysis_destpartitionsz = ALW_PADDEDDESTBUFFER_SIZE / NUM_PARTITIONS;
	SAVEPARTITIONS_LOOP1: for(partition_type p=0; p<NUM_PARTITIONS; p++){
		batch_type dramoffset_kvs = globalbaseaddress_kvs + ((globalcapsule[p].key + globalcapsule[p].value) / ALW_VECTOR_SIZE);
		buffer_type bramoffset_kvs = localcapsule[0][p].key / ALW_VECTOR_SIZE;
		#ifdef FPGA_IMPL
		buffer_type size_kvs = ALW_PADDEDDESTBUFFER_SIZE / NUM_PARTITIONS;
		#else 
		buffer_type size_kvs = (localcapsule[0][p].value + (ALW_VECTOR_SIZE - 1)) / ALW_VECTOR_SIZE;
		#endif 
		size_kvs = checkandforce(bramoffset_kvs + size_kvs, ALW_PADDEDDESTBUFFER_SIZE);
		
		SAVEPARTITIONS_LOOP1B: for(buffer_type i=0; i<size_kvs; i++){
		#pragma HLS LOOP_TRIPCOUNT min=0 max=analysis_destpartitionsz avg=analysis_destpartitionsz
		#pragma HLS PIPELINE II=1
			
			{%for t in context['NUMTWINS_seq']%}
			{%for lv in context['ALW_VECTOR_SIZE_seq']%}
			kvdram[dramoffset_kvs + i].data[{{lv + t*context['ALW_VECTOR_SIZE']}}] = buffer[{{t}}][bramoffset_kvs + i].data[{{lv}}];
			{%endfor%}
			{%endfor%}
			#ifdef _DEBUGMODE_STATS
			actsutilityobj->globalstats_countkvspartitionswritten_actual(NUMTWINS * ALW_VECTOR_SIZE);
			#endif
		}
		globalcapsule[p].value += allignhigher_KV(localcapsule[0][p].value);
		#ifdef _DEBUGMODE_STATS
		actsutilityobj->globalstats_countkvspartitionswritten(size_kvs * NUMTWINS * ALW_VECTOR_SIZE);
		actsutilityobj->globalvar_inmemory_counttotalvalidkeyvalues(localcapsule[0][p].value * NUMTWINS);
		#endif
	}
	return;
}
{%endfor%}

extern "C" {
void 
	#ifdef SW 
	actspartition:: 
	#endif
topkernel({%for inst, inst_ in zip(context['NUMINSTANCES_seq'], context['INSTANCES_charseq'])%}{%if(inst>0)%},{%endif%} uint512_dt * source{{inst_}}volume {%endfor%}){
{%for inst, inst_ in zip(context['NUMINSTANCES_seq'], context['INSTANCES_charseq'])%}
#pragma HLS INTERFACE m_axi port = source{{inst_}}volume offset = slave bundle = gmem{{inst}}
{%endfor%}

{%for inst, inst_ in zip(context['NUMINSTANCES_seq'], context['INSTANCES_charseq'])%}
#pragma HLS INTERFACE s_axilite port = source{{inst_}}volume bundle = control
{%endfor%}

#pragma HLS INTERFACE s_axilite port=return bundle=control

{%for inst, inst_ in zip(context['NUMINSTANCES_seq'], context['INSTANCES_charseq'])%}
#pragma HLS DATA_PACK variable = source{{inst_}}volume
{%endfor%}

	{%for inst, inst_ in zip(context['NUMINSTANCES_seq'], context['INSTANCES_charseq'])%}
	{%for sw in context['NUMSUBWORKERS_seq']%}
	atp_uint512_dt source{{inst_}}buffer{{sw}}[NUMTWINS][ALW_SRCBUFFER_SIZE];
	atp_uint512_dt dest{{inst_}}buffer{{sw}}[NUMTWINS][ALW_PADDEDDESTBUFFER_SIZE];
	keyvalue_t localcapsule{{inst_}}{{sw}}[NUMTWINS][NUM_PARTITIONS];
	{%endfor%}
	keyvalue_t globalcapsule{{inst_}}[NUM_PARTITIONS];
	{%endfor%}
	
	{%for inst, inst_ in zip(context['NUMINSTANCES_seq'], context['INSTANCES_charseq'])%}
	{%for sw in context['NUMSUBWORKERS_seq']%}
	#pragma HLS array_partition variable = source{{inst_}}buffer{{sw}} //block dim=2
	#pragma HLS array_partition variable = dest{{inst_}}buffer{{sw}} //block dim=2
	#pragma HLS array_partition variable = localcapsule{{inst_}}{{sw}} //block dim=2
	#pragma HLS DATA_PACK variable = source{{inst_}}buffer{{sw}}
	#pragma HLS DATA_PACK variable = dest{{inst_}}buffer{{sw}}
	{%endfor%}
	{%endfor%}
	
	unsigned int analysis_mainloop = KVDATA_BATCHSIZE_KVS / ALW_SRCBUFFER_SIZE;
	#ifdef _DEBUGMODE_KERNELPRINTS2
	actsutilityobj->printglobalvars();
	actsutilityobj->clearglobalvars();
	#endif
	
	{%for inst, inst_ in zip(context['NUMINSTANCES_seq'], context['INSTANCES_charseq'])%}
	alw_globalparams_t globalparams{{inst_}};
	globalparams{{inst_}}.runkernelcommand = source{{inst_}}volume[BASEOFFSET2_MESSAGESDRAM_KVS + MESSAGES_RUNKERNELCOMMANDID].data[0].key;
	globalparams{{inst_}}.processcommand = source{{inst_}}volume[BASEOFFSET2_MESSAGESDRAM_KVS + MESSAGES_PROCESSCOMMANDID].data[0].key;
	globalparams{{inst_}}.collectstatscommand = source{{inst_}}volume[BASEOFFSET2_MESSAGESDRAM_KVS + MESSAGES_COLLECTSTATSCOMMANDID].data[0].key;
	globalparams{{inst_}}.partitioncommand = source{{inst_}}volume[BASEOFFSET2_MESSAGESDRAM_KVS + MESSAGES_PARTITIONCOMMANDID].data[0].key;
	globalparams{{inst_}}.reducecommand = source{{inst_}}volume[BASEOFFSET2_MESSAGESDRAM_KVS + MESSAGES_APPLYUPDATESCOMMANDID].data[0].key;
	globalparams{{inst_}}.vbegin = source{{inst_}}volume[BASEOFFSET2_MESSAGESDRAM_KVS + MESSAGES_VOFFSET].data[0].key; 
	globalparams{{inst_}}.vsize = source{{inst_}}volume[BASEOFFSET2_MESSAGESDRAM_KVS + MESSAGES_VSIZE].data[0].key; 
	globalparams{{inst_}}.treedepth = source{{inst_}}volume[BASEOFFSET2_MESSAGESDRAM_KVS + MESSAGES_TREEDEPTH].data[0].key; 
	globalparams{{inst_}}.LLOPnumpartitions = source{{inst_}}volume[BASEOFFSET2_MESSAGESDRAM_KVS + MESSAGES_FINALNUMPARTITIONS].data[0].key;
	globalparams{{inst_}}.GraphIter = source{{inst_}}volume[BASEOFFSET2_MESSAGESDRAM_KVS + MESSAGES_GRAPHITERATIONID].data[0].key;
	globalparams{{inst_}}.batchsize = source{{inst_}}volume[BASEOFFSET2_MESSAGESDRAM_KVS + MESSAGES_BATCHSIZE].data[0].key;
	globalparams{{inst_}}.runsize = source{{inst_}}volume[BASEOFFSET2_MESSAGESDRAM_KVS + MESSAGES_RUNSIZE].data[0].key;
	globalparams{{inst_}}.nextbatchoffset = source{{inst_}}volume[BASEOFFSET2_MESSAGESDRAM_KVS + MESSAGES_NEXTBATCHOFFSET].data[0].key;
	globalparams{{inst_}}.statsalreadycollected = source{{inst_}}volume[BASEOFFSET2_MESSAGESDRAM_KVS + MESSAGES_STATSALREADYCOLLECTED].data[0].key; // false;
	globalparams{{inst_}}.baseaddr_destkvs_kvs = 0;
	{%endfor%}
	#ifdef _DEBUGMODE_KERNELPRINTS
	{%for inst, inst_ in zip(context['NUMINSTANCES_seq'], context['INSTANCES_charseq'])%}
	actsutilityobj->printglobalparameters("actspartition:: printing global parameters for instance {{inst_}}", globalparams{{inst_}});
	{%endfor%}
	#endif
	
	batch_type currentreadindex = 0;
	batch_type currentsaveindex = NUM_PARTITIONS;
	batch_type sourcebaseaddress_kvs = 0;
	batch_type destbaseaddress_kvs = BASEOFFSET_KVDRAMWORKSPACE_KVS;
	sweepparams_t sweepparams; sweepparams.upperlimit = globalparamsA.vbegin;
	batch_type runsize_kvs = globalparamsA.runsize / VECTOR_SIZE;
	atp_travstate_t travstate; travstate.begin_kvs = 0; travstate.end_kvs = runsize_kvs; travstate.skip_kvs = ALW_SRCBUFFER_SIZE;
	{%for inst, inst_ in zip(context['NUMINSTANCES_seq'], context['INSTANCES_charseq'])%}
	resetkeyandvalues(globalcapsule{{inst_}}, NUM_PARTITIONS);
	{%endfor%}
	
	for(unsigned int currentreadindex=1; currentreadindex<2; currentreadindex+=1){
		if(currentreadindex == 1){ sweepparams.currentLOP = 1; } else if(currentreadindex == 16){ sweepparams.currentLOP = 1; } else if(currentreadindex == 256){ sweepparams.currentLOP = 1; } else if(currentreadindex == 4096){ sweepparams.currentLOP = 1; } else if(currentreadindex == 65536){} else if(currentreadindex == 1048576){ sweepparams.currentLOP = 1; } else { sweepparams.currentLOP = 1; }				
	
		{%for inst, inst_ in zip(context['NUMINSTANCES_seq'], context['INSTANCES_charseq'])%}
		read(source{{inst_}}volume, globalcapsule{{inst_}}, BASEOFFSET_STATSDRAM + currentreadindex, NUM_PARTITIONS);
		{%endfor%}
		
		{%for inst, inst_ in zip(context['NUMINSTANCES_seq'], context['INSTANCES_charseq'])%}
		resetkeyandvalues(globalcapsule{{inst_}}, NUM_PARTITIONS); // REMOVEME.
		{%endfor%}

		MAIN_LOOP: for(unsigned int offset_kvs=0; offset_kvs<runsize_kvs; offset_kvs+=NUMSUBWORKERS * ALW_SRCBUFFER_SIZE){
		#pragma HLS LOOP_TRIPCOUNT min=0 max=analysis_mainloop avg=analysis_mainloop	
			travstate.i_kvs = offset_kvs;
			
			{%for inst, inst_ in zip(context['NUMINSTANCES_seq'], context['INSTANCES_charseq'])%}
			{%for sw in context['NUMSUBWORKERS_seq']%}
			readKVS{{inst}}({{sw}}, source{{inst_}}volume, source{{inst_}}buffer{{sw}}, (sourcebaseaddress_kvs + offset_kvs + {{sw}}*NUMSUBWORKERS), travstate);
			{%endfor%}
			{%endfor%}
			
			{%for inst, inst_ in zip(context['NUMINSTANCES_seq'], context['INSTANCES_charseq'])%}
			{%for sw in context['NUMSUBWORKERS_seq']%}
			partition{{inst}}{{sw}}({{sw}}, source{{inst_}}buffer{{sw}}, dest{{inst_}}buffer{{sw}}, localcapsule{{inst_}}{{sw}}, sweepparams, travstate);
			{%endfor%}
			{%endfor%}
			
			{%for inst, inst_ in zip(context['NUMINSTANCES_seq'], context['INSTANCES_charseq'])%}
			{%for sw in context['NUMSUBWORKERS_seq']%}
			saveKVS{{inst}}(source{{inst_}}volume, dest{{inst_}}buffer{{sw}}, globalcapsule{{inst_}}, localcapsule{{inst_}}{{sw}}, destbaseaddress_kvs);
			{%endfor%}
			{%endfor%}
		}
		
		{%for inst, inst_ in zip(context['NUMINSTANCES_seq'], context['INSTANCES_charseq'])%}
		save(source{{inst_}}volume, globalcapsule{{inst_}}, BASEOFFSET_STATSDRAM + currentsaveindex, NUM_PARTITIONS);
		{%endfor%}
		
		currentsaveindex += NUM_PARTITIONS;
	}
	#ifdef _DEBUGMODE_KERNELPRINTS2
	actsutilityobj->printkeyvalues("actspartition::head::globalcapsule", (keyvalue_t *)globalcapsuleA, NUM_PARTITIONS);
	actsutilityobj->printglobalvars();
	actsutilityobj->clearglobalvars();
	#endif 
	return;
}
}









