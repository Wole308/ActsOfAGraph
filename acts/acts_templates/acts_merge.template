#include "acts_merge.h"
using namespace std;

#ifdef SW
acts_merge::acts_merge(){ 
	actsutilityobj = new actsutility(); 
	acts_utilobj = new acts_util(); 
	processedges_unslicedgraphobj = new processedges_unslicedgraph();
	processedges_slicedgraphobj = new processedges_slicedgraph();
	partitionupdatesobj = new partitionupdates();
	reduceupdatesobj = new reduceupdates();
	mem_accessobj = new mem_access();
	actsobj = new acts();
	mergeobj = new merge_vtxs();
}
acts_merge::~acts_merge(){}
#endif

unsigned int 
	#ifdef SW 
	acts_merge::
	#endif 
MERGE_getchannelvsize_kvs(globalparams_t globalparams){
	// unsigned int channelvsize_kvs = (((globalparams.SIZE_BATCHRANGE / VECTOR2_SIZE) + (CONFIGSPLITDESTVTXS_NUMWs-1)) / CONFIGSPLITDESTVTXS_NUMWs); 
	unsigned int channelvsize_kvs = (globalparams.SIZE_BATCHRANGE / VECTOR2_SIZE) / 16;
	return channelvsize_kvs;
}

unsigned int 
	#ifdef SW 
	acts_merge::
	#endif 
MERGE_getchannelnumpartitions(globalparams_t globalparams){
	return 11; // 16, 11; // CRITICAL FIXME. AUTOMATEME.
}

value_t 
	#ifdef SW 
	acts_merge::
	#endif 
MERGE_applyfunc(value_t vtemp, value_t res, unsigned int GraphIter, unsigned int GraphAlgo){
	value_t temp = 0;
	if(GraphAlgo == PAGERANK){
		// temp = vtemp + res;
		// temp = 0.5 + (1 - 0.5)*res / vdeg; // IDEAL
		temp = res;
	} else if(GraphAlgo == BFS){
		temp = res;
	} else if(GraphAlgo == SSSP){
		temp = acts_utilobj->UTIL_amin(vtemp, res);
	} else {
		temp = NAp;
	}
	return temp;
}

void // 
	#ifdef SW 
	acts_merge::
	#endif 
MERGE_readvdata(bool_type enable1, uint512_dt * kvdram, batch_type dramoffset_kvs, keyvalue_vbuffer_t buffer[VECTOR_SIZE][BLOCKRAM_SIZE], batch_type bufferoffset_kvs, buffer_type size_kvs){
	#pragma HLS function_instantiate variable=kvdram
	if(enable1 == OFF){ return; }
	analysis_type analysis_loopcount = BLOCKRAM_SIZE;
		
	READVDATA_LOOP: for (buffer_type i=0; i<size_kvs; i++){
	#pragma HLS LOOP_TRIPCOUNT min=0 max=analysis_loopcount avg=analysis_loopcount
	#pragma HLS PIPELINE II=1
		{%for v in context['VECTOR_SIZE_seq']%}
		keyvalue_t mykeyvalue{{v}};
		{%endfor%}
		
		#ifdef _WIDEWORD
		{%for v in context['VECTOR_SIZE_seq']%}
		mykeyvalue{{v}}.key = kvdram[dramoffset_kvs + i].range({{32 * ((v * 2) + 1) - 1}}, {{(v * 2) * 32}}); 
		mykeyvalue{{v}}.value = kvdram[dramoffset_kvs + i].range({{32 * (((v * 2) + 1) + 1) - 1}}, {{(v * 2 + 1) * 32}}); 
		{%endfor%}
		#else 
		{%for v in context['VECTOR_SIZE_seq']%}
		mykeyvalue{{v}}.key = kvdram[dramoffset_kvs + i].data[{{v}}].key; 
		mykeyvalue{{v}}.value = kvdram[dramoffset_kvs + i].data[{{v}}].value; 
		{%endfor%}
		#endif
		
		{%for v in context['VECTOR_SIZE_seq']%}
		buffer[{{v}}][bufferoffset_kvs + i] = acts_utilobj->UTIL_GETKV2(mykeyvalue{{v}});
		{%endfor%}
		
		#ifdef _DEBUGMODE_STATS
		actsutilityobj->globalstats_countkvsread(VECTOR_SIZE);
		#endif
	}
	return;
}

void // 
	#ifdef SW 
	acts_merge::
	#endif 
MERGE_writevdata(bool_type enable1, uint512_dt * kvdram, batch_type basedramoffset_kvs, batch_type localdramoffset_kvs, keyvalue_vbuffer_t buffer[VECTOR_SIZE][BLOCKRAM_SIZE], batch_type bufferoffset_kvs, buffer_type size_kvs){
	#pragma HLS function_instantiate variable=kvdram
	if(enable1 == OFF){ return; }
	analysis_type analysis_loopcount = BLOCKRAM_SIZE;
	unsigned int dramoffset_kvs = basedramoffset_kvs + localdramoffset_kvs;

	WRITEVDATA_LOOP: for (buffer_type i=0; i<size_kvs; i++){
		#pragma HLS LOOP_TRIPCOUNT min=0 max=analysis_loopcount avg=analysis_loopcount
		#pragma HLS PIPELINE II=1
			{%for v in context['VECTOR_SIZE_seq']%}
			keyvalue_t keyvalue{{v}} = acts_utilobj->UTIL_GETKV2(buffer[{{v}}][i]); 
			{%endfor%}
			
			#ifdef _WIDEWORD
			{%for v in context['VECTOR_SIZE_seq']%}
			kvdram[dramoffset_kvs + i].range({{32 * ((v * 2) + 1) - 1}}, {{(v * 2) * 32}}) = keyvalue{{v}}.key;
			kvdram[dramoffset_kvs + i].range({{32 * (((v * 2) + 1) + 1) - 1}}, {{(v * 2 + 1) * 32}}) = keyvalue{{v}}.value;
			{%endfor%}
			#else
			{%for v in context['VECTOR_SIZE_seq']%}
			kvdram[dramoffset_kvs + i].data[{{v}}].key = keyvalue{{v}}.key; 
			kvdram[dramoffset_kvs + i].data[{{v}}].value = keyvalue{{v}}.value;
			{%endfor%}
			#endif
	}
	#ifdef _DEBUGMODE_KERNELPRINTS
	cout<<">>> ACTS MERGE: MERGE_writevdata: data written at: dramoffset: "<<localdramoffset_kvs*VECTOR2_SIZE<<", dramoffset_kvs: "<<localdramoffset_kvs<<", size_kvs: "<<size_kvs<<endl;
	#endif
	return;
}

{%for n in context['T_seq']%}
{%if(n>=1)%}
void
	#ifdef SW 
	acts_merge::
	#endif
MERGE_broadcastVs{{n}}({%for i in context['T_seq']%}{%if(i<n)%}uint512_dt * kvdram{{i}},{%endif%}{%endfor%} uint512_dt * vdram){
	#pragma HLS INLINE
	#ifdef _DEBUGMODE_KERNELPRINTS3
	cout<<"====================== ACTS BROADCAST LAUNCHED. Broadcasting vertices... ======================"<<endl; 
	#endif
	
	globalparams_t globalparams = acts_utilobj->UTIL_getglobalparams(kvdram0);
	globalparams_t globalparamsv = acts_utilobj->UTIL_getglobalparams(vdram);
	buffer_type reducebuffersz = globalparamsv.SIZE_REDUCE / 2;
	unsigned int channel_numvpartitions = MERGE_getchannelnumpartitions(globalparamsv);
	unsigned int channelvsize_kvs = channel_numvpartitions * (reducebuffersz * FETFACTOR);
	
	#ifdef _DEBUGMODE_KERNELPRINTS3
	cout<<"transferring vertices from vdram to [kvdram0:kvdram{{n}}]."<<endl; 
	#endif 
	MERGE_BROADCASTVS_LOOP: for(unsigned int k=0; k<globalparamsv.SIZE_BATCHRANGE / VECTOR2_SIZE; k++){
	#pragma HLS PIPELINE II=1
		{%for i in context['T_seq']%}
		{%if(i<n)%}
		kvdram{{i}}[globalparams.BASEOFFSETKVS_SRCVERTICESDATA + k] = vdram[globalparamsv.BASEOFFSETKVS_DESTVERTICESDATA + k];
		{%endif%}
		{%endfor%}
	}
	
	#ifdef _DEBUGMODE_KERNELPRINTS3
	cout<<"transferring masks from vdram to [kvdram0:kvdram{{n}}]."<<endl; 
	#endif 
	MERGE_BROADCASTMASKS_LOOP: for(unsigned int k=0; k<globalparamsv.SIZE_VERTICESDATAMASK / VECTOR_SIZE; k++){
	#pragma HLS PIPELINE II=1
		{%for i in context['T_seq']%}
		{%if(i<n)%}
		kvdram{{i}}[globalparams.BASEOFFSETKVS_VERTICESDATAMASK + k] = vdram[globalparamsv.BASEOFFSETKVS_VERTICESDATAMASK + k];
		{%endif%}
		{%endfor%}
	}
	// exit(EXIT_SUCCESS); //
	return;
}
{%endif%}
{%endfor%}

{%for n in context['T_seq']%}
{%if(n>=1)%}
void
	#ifdef SW 
	acts_merge::
	#endif
MERGE_mergeVs{{n}}({%for i in context['T_seq']%}{%if(i<n)%}uint512_dt * kvdram{{i}},{%endif%}{%endfor%} uint512_dt * vdram){
	#pragma HLS INLINE
	#ifdef _DEBUGMODE_KERNELPRINTS3
	cout<<"====================== ACTS_MERGE: MergeVs Launched... ======================"<<endl; 
	#endif
	
	value_t buffer[BLOCKRAM_SIZE];
	unsigned int partition_is_active[BLOCKRAM_SIZE];
	unsigned int psizes_kvs[{{n}}][BLOCKRAM_SIZE];
	#pragma HLS array_partition variable = psizes_kvs
	
	globalparams_t globalparams = acts_utilobj->UTIL_getglobalparams(kvdram0);
	globalparams_t globalparamsv = acts_utilobj->UTIL_getglobalparams(vdram);
	buffer_type reducebuffersz = globalparamsv.SIZE_REDUCE / 2;
	buffer_type vmaskbuffersz_kvs = (globalparamsv.SIZE_REDUCE * VDATA_PACKINGSIZE) / 512; // '32'
	unsigned int channel_numvpartitions = MERGE_getchannelnumpartitions(globalparams);
	unsigned int channelvsize_kvs = channel_numvpartitions * (reducebuffersz * FETFACTOR);
	for(unsigned int i=0; i<BLOCKRAM_SIZE; i++){ buffer[i] = 0; } 

	unsigned int sourcestatsmarker = 0;
	#ifdef ENABLERECURSIVEPARTITIONING
	for(unsigned int k=0; k<globalparams.ACTSPARAMS_TREEDEPTH-1; k++){ sourcestatsmarker += (1 << (NUM_PARTITIONS_POW * k)); }
	#else 
	for(unsigned int k=0; k<globalparams.ACTSPARAMS_TREEDEPTH; k++){ sourcestatsmarker += (1 << (NUM_PARTITIONS_POW * k)); }
	#endif

	// stats 
	for(unsigned int partition=0; partition<channel_numvpartitions; partition++){
	#pragma HLS PIPELINE II=1
		#ifdef _WIDEWORD
		{%for i in context['T_seq']%}
		{%if(i<n)%}
		psizes_kvs[{{i}}][partition] = kvdram{{i}}[globalparams.BASEOFFSETKVS_STATSDRAM + sourcestatsmarker + partition].range(63, 32); 
		{%endif%}
		{%endfor%}
		#else 
		{%for i in context['T_seq']%}
		{%if(i<n)%}
		psizes_kvs[{{i}}][partition] = kvdram{{i}}[globalparams.BASEOFFSETKVS_STATSDRAM + sourcestatsmarker + partition].data[0].value; 
		// cout<<"&&& acts_merge:: psizes_kvs[{{i}}]["<<partition<<"]: "<<psizes_kvs[{{i}}][partition]<<endl;
		// cout<<"&&& acts_merge:: kvdram{{i}}[globalparams.BASEOFFSETKVS_STATSDRAM + "<<sourcestatsmarker<<" + "<<partition<<"].data[0].value: "<<kvdram{{i}}[globalparams.BASEOFFSETKVS_STATSDRAM + sourcestatsmarker + partition].data[0].value<<endl;
		{%endif%}
		{%endfor%}
		#endif
	}
	unsigned int running_partitions = 0;
	{%for i in context['T_seq']%}
	{%if(i<n)%}
	for(unsigned int partition=0; partition<channel_numvpartitions; partition++){
		buffer[running_partitions] = psizes_kvs[{{i}}][partition]; 
		cout<<"&&& acts_merge:: buffer["<<running_partitions<<"]: "<<buffer[running_partitions]<<endl;
		running_partitions += 1;
	}
	{%endif%}
	{%endfor%}
	mem_accessobj->MEMACCESS_commitkvstats2(vdram, buffer, globalparamsv, sourcestatsmarker, running_partitions);
	// exit(EXIT_SUCCESS); //
	
	// vertices 
	unsigned int offset_kvs = 0;
	{%for i in context['T_seq']%}
	{%if(i<n)%}
	#ifdef _DEBUGMODE_KERNELPRINTS3
	cout<<"acts_merge::MERGE_mergeVs{{n}}:: transferring dst vertices from kvdram{{i}} to vdram. offset: "<<({{i}}*channelvsize_kvs*VECTOR2_SIZE)<<", size: "<<(channelvsize_kvs*VECTOR2_SIZE)<<", end: "<<({{i}}*channelvsize_kvs*VECTOR2_SIZE + channelvsize_kvs*VECTOR2_SIZE)<<" [channel_numvpartitions: "<<channel_numvpartitions<<", globalparams.SIZE_BATCHRANGE: "<<globalparams.SIZE_BATCHRANGE<<"]"<<endl; 
	#endif
	offset_kvs = 0;
	for(unsigned int partition=0; partition<channel_numvpartitions; partition++){
		if(psizes_kvs[{{i}}][partition] > 0){
			#ifdef _DEBUGMODE_KERNELPRINTS3
			cout<<"acts_merge::MERGE_mergeVs{{n}}:: instance {{i}}, partition "<<partition<<" is active: [offset: "<<offset_kvs*VECTOR2_SIZE<<", size: "<<(reducebuffersz*FETFACTOR)<<", psizes_kvs[{{i}}]["<<partition<<"]: "<<psizes_kvs[{{i}}][partition]<<"] "<<endl;
			#endif 
			TOPKERNELCOMBINE_MAINLOOP{{i}}B: for(unsigned int k=0; k<reducebuffersz*FETFACTOR; k++){
			#pragma HLS PIPELINE II=1
				vdram[globalparamsv.BASEOFFSETKVS_DESTVERTICESDATA + ({{i}}*channelvsize_kvs) + offset_kvs + k] = kvdram{{i}}[globalparams.BASEOFFSETKVS_DESTVERTICESDATA + k]; // SIMPLIFYME. '{{i}}*channelvsize_kvs'
			}
		}
		offset_kvs += reducebuffersz*FETFACTOR;
	}
	{%endif%}
	{%endfor%}
	// exit(EXIT_SUCCESS); //
	return;
}
{%endif%}
{%endfor%}

void
	#ifdef SW 
	acts_merge::
	#endif
MERGE_syncVsAcrossSLRs(uint512_dt * vdramB, uint512_dt * vdramC, uint512_dt * vdramA){
	#pragma HLS INLINE
	#ifdef _DEBUGMODE_KERNELPRINTS3
	cout<<"====================== ACTS MERGE LAUNCHED. Merging vertices across different SLRs... ======================"<<endl; 
	#endif
	cout<<"MERGE_syncVsAcrossSLRs: NUMCOMPUTEUNITS_SLR1AND2: "<<NUMCOMPUTEUNITS_SLR1AND2<<", NUMCOMPUTEUNITS_SLR0: "<<NUMCOMPUTEUNITS_SLR0<<endl;
	
	value_t buffer[BLOCKRAM_SIZE];
	
	globalparams_t globalparamsvA = acts_utilobj->UTIL_getglobalparams(vdramA);
	globalparams_t globalparamsvB = acts_utilobj->UTIL_getglobalparams(vdramB);
	globalparams_t globalparamsvC = acts_utilobj->UTIL_getglobalparams(vdramC);
	buffer_type reducebuffersz = globalparamsvA.SIZE_REDUCE / 2;
	unsigned int channel_numvpartitions = MERGE_getchannelnumpartitions(globalparamsvA);
	unsigned int channelvsize_kvs = channel_numvpartitions * (reducebuffersz * FETFACTOR);
	
	unsigned int sourcestatsmarker = 0;
	#ifdef ENABLERECURSIVEPARTITIONING
	for(unsigned int k=0; k<globalparamsvA.ACTSPARAMS_TREEDEPTH-1; k++){ sourcestatsmarker += (1 << (NUM_PARTITIONS_POW * k)); }
	#else 
	for(unsigned int k=0; k<globalparamsvA.ACTSPARAMS_TREEDEPTH; k++){ sourcestatsmarker += (1 << (NUM_PARTITIONS_POW * k)); }
	#endif
	
	// vertices 
	unsigned int offset0_kvs = 0;
	unsigned int sz0_kvs = channelvsize_kvs * NUMCOMPUTEUNITS_SLR1AND2;
	#ifdef _DEBUGMODE_KERNELPRINTS3
	cout<<"transferring dst vertices from vdramA to vdramA. offset: "<<offset0_kvs*VECTOR2_SIZE<<", size: "<<sz0_kvs*VECTOR2_SIZE<<", end: "<<(offset0_kvs+sz0_kvs)*VECTOR2_SIZE<<endl; 
	#endif
	
	unsigned int offset1_kvs = offset0_kvs + sz0_kvs;
	unsigned int sz1_kvs = channelvsize_kvs * NUMCOMPUTEUNITS_SLR1AND2;
	#ifdef _DEBUGMODE_KERNELPRINTS3
	cout<<"transferring dst vertices from vdramB to vdramA. offset: "<<offset1_kvs*VECTOR2_SIZE<<", size: "<<sz1_kvs*VECTOR2_SIZE<<", end: "<<(offset1_kvs+sz1_kvs)*VECTOR2_SIZE<<endl; 
	#endif 
	MERGE_MERGEVSINSLIRS_LOOP1: for(unsigned int k=0; k<sz1_kvs; k++){ 
	#pragma HLS PIPELINE II=1
		vdramA[globalparamsvA.BASEOFFSETKVS_DESTVERTICESDATA + offset1_kvs + k] = vdramB[globalparamsvB.BASEOFFSETKVS_DESTVERTICESDATA + k];
	}
	
	unsigned int offset2_kvs = offset1_kvs + sz1_kvs;
	unsigned int sz2_kvs = channelvsize_kvs * NUMCOMPUTEUNITS_SLR0;
	#ifdef _DEBUGMODE_KERNELPRINTS3
	cout<<"transferring dst vertices from vdramC to vdramA. offset: "<<offset2_kvs*VECTOR2_SIZE<<", size: "<<sz2_kvs*VECTOR2_SIZE<<", end: "<<(offset2_kvs+sz2_kvs)*VECTOR2_SIZE<<endl; 
	#endif 
	MERGE_MERGEVSINSLIRS_LOOP2: for(unsigned int k=0; k<sz2_kvs; k++){
	#pragma HLS PIPELINE II=1
		vdramA[globalparamsvA.BASEOFFSETKVS_DESTVERTICESDATA + offset2_kvs + k] = vdramC[globalparamsvC.BASEOFFSETKVS_DESTVERTICESDATA + k];
	}
	// exit(EXIT_SUCCESS); //
	
	// stats 
	unsigned int running_partitions = 0;
	for(unsigned int partition=0; partition<channel_numvpartitions*NUMCOMPUTEUNITS_SLR1AND2; partition++){
	#pragma HLS PIPELINE II=1
		#ifdef _WIDEWORD
		vdramA[globalparamsvA.BASEOFFSETKVS_STATSDRAM + sourcestatsmarker + running_partitions].range(63, 32) = vdramA[globalparamsvA.BASEOFFSETKVS_STATSDRAM + sourcestatsmarker + partition].range(63, 32); 
		#else
		vdramA[globalparamsvA.BASEOFFSETKVS_STATSDRAM + sourcestatsmarker + running_partitions].data[0].value = vdramA[globalparamsvA.BASEOFFSETKVS_STATSDRAM + sourcestatsmarker + partition].data[0].value; 
		#endif
		running_partitions += 1;
	}
	
	for(unsigned int partition=0; partition<channel_numvpartitions*NUMCOMPUTEUNITS_SLR1AND2; partition++){
	#pragma HLS PIPELINE II=1
		#ifdef _WIDEWORD
		vdramA[globalparamsvA.BASEOFFSETKVS_STATSDRAM + sourcestatsmarker + running_partitions].range(63, 32) = vdramB[globalparamsvB.BASEOFFSETKVS_STATSDRAM + sourcestatsmarker + partition].range(63, 32); 
		#else
		vdramA[globalparamsvA.BASEOFFSETKVS_STATSDRAM + sourcestatsmarker + running_partitions].data[0].value = vdramB[globalparamsvB.BASEOFFSETKVS_STATSDRAM + sourcestatsmarker + partition].data[0].value; 
		#endif
		running_partitions += 1;
	}
	
	for(unsigned int partition=0; partition<channel_numvpartitions*NUMCOMPUTEUNITS_SLR0; partition++){
	#pragma HLS PIPELINE II=1
		#ifdef _WIDEWORD
		vdramA[globalparamsvA.BASEOFFSETKVS_STATSDRAM + sourcestatsmarker + running_partitions].range(63, 32) = vdramC[globalparamsvC.BASEOFFSETKVS_STATSDRAM + sourcestatsmarker + partition].range(63, 32); 
		#else
		vdramA[globalparamsvA.BASEOFFSETKVS_STATSDRAM + sourcestatsmarker + running_partitions].data[0].value = vdramC[globalparamsvC.BASEOFFSETKVS_STATSDRAM + sourcestatsmarker + partition].data[0].value; 
		#endif
		running_partitions += 1;
	}
	#ifdef _DEBUGMODE_KERNELPRINTS3
	cout<<"-----+++++++++++++++++++++++++++++++=---------------------- running_partitions: "<<running_partitions<<endl; 
	#endif
	return;
}