#include "acts_merge.h"
using namespace std;

#ifdef SW
acts_merge::acts_merge(){ 
	actsutilityobj = new actsutility(); 
	acts_utilobj = new acts_util(); 
	processedges_unslicedgraphobj = new processedges_unslicedgraph();
	processedges_slicedgraphobj = new processedges_slicedgraph();
	partitionupdatesobj = new partitionupdates();
	reduceupdatesobj = new reduceupdates();
	mem_accessobj = new mem_access();
	actsobj = new acts();
	mergeobj = new merge_vtxs();
}
acts_merge::~acts_merge(){}
#endif

unsigned int 
	#ifdef SW 
	acts_merge::
	#endif 
MERGE_actvpstatsoffset(globalparams_t globalparams){
	unsigned int actvpstats_beginoffset = 0;
	#ifdef ENABLERECURSIVEPARTITIONING
	for(unsigned int k=0; k<globalparams.ACTSPARAMS_TREEDEPTH-1; k++){ actvpstats_beginoffset += (1 << (NUM_PARTITIONS_POW * k)); }
	#else 
	for(unsigned int k=0; k<globalparams.ACTSPARAMS_TREEDEPTH; k++){ actvpstats_beginoffset += (1 << (NUM_PARTITIONS_POW * k)); }
	#endif
	return actvpstats_beginoffset;
}

value_t 
	#ifdef SW 
	acts_merge::
	#endif 
MERGE_applyfunc(value_t vtemp, value_t res, unsigned int GraphIter, unsigned int GraphAlgo){
	value_t temp = 0;
	if(GraphAlgo == PAGERANK){
		// temp = vtemp + res;
		// temp = 0.5 + (1 - 0.5)*res / vdeg; // IDEAL
		temp = res;
	} else if(GraphAlgo == BFS){
		temp = res;
	} else if(GraphAlgo == SSSP){
		temp = acts_utilobj->UTIL_amin(vtemp, res);
	} else {
		temp = NAp;
	}
	return temp;
}

void // 
	#ifdef SW 
	acts_merge::
	#endif 
MERGE_readvdata(bool_type enable1, uint512_dt * kvdram, batch_type dramoffset_kvs, keyvalue_vbuffer_t buffer[VECTOR_SIZE][BLOCKRAM_SIZE], batch_type bufferoffset_kvs, buffer_type size_kvs){
	#pragma HLS function_instantiate variable=kvdram
	if(enable1 == OFF){ return; }
	analysis_type analysis_loopcount = BLOCKRAM_SIZE;
		
	READVDATA_LOOP: for (buffer_type i=0; i<size_kvs; i++){
	#pragma HLS LOOP_TRIPCOUNT min=0 max=analysis_loopcount avg=analysis_loopcount
	#pragma HLS PIPELINE II=1
		{%for v in context['VECTOR_SIZE_seq']%}
		keyvalue_t mykeyvalue{{v}};
		{%endfor%}
		
		#ifdef _WIDEWORD
		{%for v in context['VECTOR_SIZE_seq']%}
		mykeyvalue{{v}}.key = kvdram[dramoffset_kvs + i].range({{32 * ((v * 2) + 1) - 1}}, {{(v * 2) * 32}}); 
		mykeyvalue{{v}}.value = kvdram[dramoffset_kvs + i].range({{32 * (((v * 2) + 1) + 1) - 1}}, {{(v * 2 + 1) * 32}}); 
		{%endfor%}
		#else 
		{%for v in context['VECTOR_SIZE_seq']%}
		mykeyvalue{{v}}.key = kvdram[dramoffset_kvs + i].data[{{v}}].key; 
		mykeyvalue{{v}}.value = kvdram[dramoffset_kvs + i].data[{{v}}].value; 
		{%endfor%}
		#endif
		
		{%for v in context['VECTOR_SIZE_seq']%}
		buffer[{{v}}][bufferoffset_kvs + i] = acts_utilobj->UTIL_GETKV2(mykeyvalue{{v}});
		{%endfor%}
		
		#ifdef _DEBUGMODE_STATS
		actsutilityobj->globalstats_countkvsread(VECTOR_SIZE);
		#endif
	}
	return;
}

void // 
	#ifdef SW 
	acts_merge::
	#endif 
MERGE_writevdata(bool_type enable1, uint512_dt * kvdram, batch_type basedramoffset_kvs, batch_type localdramoffset_kvs, keyvalue_vbuffer_t buffer[VECTOR_SIZE][BLOCKRAM_SIZE], batch_type bufferoffset_kvs, buffer_type size_kvs){
	#pragma HLS function_instantiate variable=kvdram
	if(enable1 == OFF){ return; }
	analysis_type analysis_loopcount = BLOCKRAM_SIZE;
	unsigned int dramoffset_kvs = basedramoffset_kvs + localdramoffset_kvs;

	WRITEVDATA_LOOP: for (buffer_type i=0; i<size_kvs; i++){
		#pragma HLS LOOP_TRIPCOUNT min=0 max=analysis_loopcount avg=analysis_loopcount
		#pragma HLS PIPELINE II=1
			{%for v in context['VECTOR_SIZE_seq']%}
			keyvalue_t keyvalue{{v}} = acts_utilobj->UTIL_GETKV2(buffer[{{v}}][i]); 
			{%endfor%}
			
			#ifdef _WIDEWORD
			{%for v in context['VECTOR_SIZE_seq']%}
			kvdram[dramoffset_kvs + i].range({{32 * ((v * 2) + 1) - 1}}, {{(v * 2) * 32}}) = keyvalue{{v}}.key;
			kvdram[dramoffset_kvs + i].range({{32 * (((v * 2) + 1) + 1) - 1}}, {{(v * 2 + 1) * 32}}) = keyvalue{{v}}.value;
			{%endfor%}
			#else
			{%for v in context['VECTOR_SIZE_seq']%}
			kvdram[dramoffset_kvs + i].data[{{v}}].key = keyvalue{{v}}.key; 
			kvdram[dramoffset_kvs + i].data[{{v}}].value = keyvalue{{v}}.value;
			{%endfor%}
			#endif
	}
	#ifdef _DEBUGMODE_KERNELPRINTS
	cout<<">>> ACTS MERGE: MERGE_writevdata: data written at: dramoffset: "<<localdramoffset_kvs*VECTOR2_SIZE<<", dramoffset_kvs: "<<localdramoffset_kvs<<", size_kvs: "<<size_kvs<<endl;
	#endif
	return;
}

{%for n in context['T_seq']%}
{%if(n>=1)%}
void
	#ifdef SW
	acts_merge::
	#endif
MERGE_broadcastVs{{n}}({%for i in context['T_seq']%}{%if(i<n)%}uint512_dt * kvdram{{i}},{%endif%}{%endfor%} uint512_dt * vdram){
	#pragma HLS INLINE
	#ifdef _DEBUGMODE_KERNELPRINTS3
	cout<<"====================== ACTS BROADCAST LAUNCHED. Broadcasting vertices... ======================"<<endl; 
	#endif
	
	unsigned int psizes_kvs[{{n}}][BLOCKRAM_SIZE];
	#pragma HLS array_partition variable = psizes_kvs
	
	globalparams_t globalparams = acts_utilobj->UTIL_getglobalparams(kvdram0);
	globalparams_t globalparamsv = acts_utilobj->UTIL_getglobalparams(vdram);
	unsigned int actvpstats_beginoffset = MERGE_actvpstatsoffset(globalparamsv);
	unsigned int offset_kvs = 0;
	
	{%for i in context['T_seq']%}
	{%if(i<n)%}
	mem_accessobj->MEMACCESS_retreievekvstats(kvdram{{i}}, psizes_kvs[{{i}}], globalparams, actvpstats_beginoffset, globalparams.NUM_PROCESSEDGESPARTITIONS);
	{%endif%}
	{%endfor%}
	
	#ifdef _DEBUGMODE_KERNELPRINTS3
	cout<<"transferring vertices from vdram to [kvdram0:kvdram{{n}}]."<<endl; 
	#endif
	for(unsigned int partition=0; partition<globalparams.NUM_PROCESSEDGESPARTITIONS; partition++){
		bool en = false; for(unsigned int i=0; i<{{n}}; i++){ if(psizes_kvs[i][partition] > 0){ en = true; break; }}
		if(en == true){
			#ifdef _DEBUGMODE_KERNELPRINTS3
			cout<<"acts_merge::MERGE_mergeVs{{n}}:: instance {{i}}, partition "<<partition<<" is active: boradcasting reduce partition vertices... "<<endl;
			#endif 
			MERGE_BROADCASTVTXS_LOOP: for(unsigned int k=0; k<globalparams.SIZEKVS_PROCESSEDGESPARTITION; k++){
			#pragma HLS PIPELINE II=1
				{%for i in context['T_seq']%}
				{%if(i<n)%}
				kvdram{{i}}[globalparams.BASEOFFSETKVS_SRCVERTICESDATA + offset_kvs + k] = vdram[globalparamsv.BASEOFFSETKVS_DESTVERTICESDATA + offset_kvs + k];
				{%endif%}
				{%endfor%}
			}
		}
		offset_kvs += globalparams.SIZEKVS_PROCESSEDGESPARTITION;
	}
	
	#ifdef _DEBUGMODE_KERNELPRINTS3
	cout<<"transferring masks from vdram to [kvdram0:kvdram{{n}}]."<<endl; 			 
	#endif
	for(unsigned int partition=0; partition<globalparams.NUM_PROCESSEDGESPARTITIONS; partition++){
		bool en = false; for(unsigned int i=0; i<{{n}}; i++){ if(psizes_kvs[i][partition] > 0){ en = true; break; }}
		if(en == true){
			#ifdef _DEBUGMODE_KERNELPRINTS3
			cout<<"acts_merge::MERGE_mergeVs{{n}}:: instance {{i}}, partition "<<partition<<" is active: boradcasting reduce partition masks... "<<endl;
			#endif 
			MERGE_BROADCASTMASKS_LOOP: for(unsigned int k=0; k<globalparams.SIZEKVS_VMASKBUFFER; k++){
			#pragma HLS PIPELINE II=1
				{%for i in context['T_seq']%}
				{%if(i<n)%}
				kvdram{{i}}[globalparams.BASEOFFSETKVS_VERTICESDATAMASK + k] = vdram[globalparamsv.BASEOFFSETKVS_VERTICESDATAMASK + k];
				{%endif%}
				{%endfor%}
			}
		}
	}
	
	// exit(EXIT_SUCCESS); //
	return;
}
{%endif%}
{%endfor%}

{%for n in context['T_seq']%}
{%if(n>=1)%}
void
	#ifdef SW 
	acts_merge::
	#endif
MERGE_mergeVs{{n}}({%for i in context['T_seq']%}{%if(i<n)%}uint512_dt * kvdram{{i}},{%endif%}{%endfor%} uint512_dt * vdram){
	#pragma HLS INLINE
	#ifdef _DEBUGMODE_KERNELPRINTS3
	cout<<"====================== ACTS_MERGE: MergeVs Launched... ======================"<<endl; 
	#endif
	
	unsigned int psizes_kvs[{{n}}][BLOCKRAM_SIZE];
	#pragma HLS array_partition variable = psizes_kvs
	
	globalparams_t globalparams = acts_utilobj->UTIL_getglobalparams(kvdram0);
	globalparams_t globalparamsv = acts_utilobj->UTIL_getglobalparams(vdram);
	unsigned int actvpstats_beginoffset = MERGE_actvpstatsoffset(globalparamsv);
	unsigned int offset_kvs = 0;

	// stats
	{%for i in context['T_seq']%}
	{%if(i<n)%}
	mem_accessobj->MEMACCESS_retreievekvstats(kvdram{{i}}, psizes_kvs[{{i}}], globalparams, actvpstats_beginoffset, globalparams.NUM_REDUCEPARTITIONS);
	{%endif%}
	{%endfor%}
	{%for i in context['T_seq']%}
	{%if(i<n)%}
	mem_accessobj->MEMACCESS_commitkvstats2(vdram, psizes_kvs[{{i}}], globalparamsv, actvpstats_beginoffset + {{i}} * globalparams.NUM_REDUCEPARTITIONS, globalparams.NUM_REDUCEPARTITIONS);
	{%endif%}
	{%endfor%}
	
	// vertices
	{%for i in context['T_seq']%}
	{%if(i<n)%}
	for(unsigned int partition=0; partition<globalparams.NUM_REDUCEPARTITIONS; partition++){
		if(psizes_kvs[{{i}}][partition] > 0){
			#ifdef _DEBUGMODE_KERNELPRINTS3
			cout<<"acts_merge::MERGE_mergeVs{{n}}:: [instance {{i}}, partition "<<partition<<"] is active: [offset: "<<offset_kvs*VECTOR2_SIZE<<", size: "<<globalparams.SIZEKVS_REDUCEPARTITION<<", psizes_kvs[{{i}}]["<<partition<<"]: "<<psizes_kvs[{{i}}][partition]<<"] "<<endl;
			#endif
			MERGE_MERGEVSLOOP{{i}}: for(unsigned int k=0; k<globalparams.SIZEKVS_REDUCEPARTITION; k++){
			#pragma HLS PIPELINE II=1
				vdram[globalparamsv.BASEOFFSETKVS_DESTVERTICESDATA + offset_kvs + k] = kvdram{{i}}[globalparams.BASEOFFSETKVS_DESTVERTICESDATA + k];
			}
		}
		offset_kvs += globalparams.SIZEKVS_REDUCEPARTITION;
	}
	{%endif%}
	{%endfor%}
	
	#ifdef _DEBUGMODE_KERNELPRINTS3
	cout<<"MERGE_mergeVs{{n}}: Finished. offset: "<<offset_kvs * VECTOR2_SIZE<<endl;
	#endif
	// exit(EXIT_SUCCESS); //
	return;
}
{%endif%}
{%endfor%}

void
	#ifdef SW 
	acts_merge::
	#endif
MERGE_mergeVsAcrossSLRs(uint512_dt * vdramA, uint512_dt * vdramB, uint512_dt * vdramC){
	#pragma HLS INLINE
	#ifdef _DEBUGMODE_KERNELPRINTS3
	cout<<"====================== ACTS MERGE LAUNCHED. Merging vertices across different SLRs... ======================"<<endl; 
	#endif
	cout<<"MERGE_mergeVsAcrossSLRs: NUMCOMPUTEUNITS_SLR1AND2: "<<NUMCOMPUTEUNITS_SLR1AND2<<", NUMCOMPUTEUNITS_SLR0: "<<NUMCOMPUTEUNITS_SLR0<<endl;

	unsigned int psizes_kvs[3][BLOCKRAM_SIZE];
	#pragma HLS array_partition variable = psizes_kvs
	
	globalparams_t globalparamsvA = acts_utilobj->UTIL_getglobalparams(vdramA);
	globalparams_t globalparamsvB = acts_utilobj->UTIL_getglobalparams(vdramB);
	globalparams_t globalparamsvC = acts_utilobj->UTIL_getglobalparams(vdramC);
	unsigned int actvpstats_beginoffset = MERGE_actvpstatsoffset(globalparamsvA);
	unsigned int offset_kvs = 0;
	unsigned int offseti_kvs = 0;
	unsigned int partitionoffseti = 0;
	
	#ifdef _DEBUGMODE_KERNELPRINTS3
	cout<<"retrieving stats from vdramA, vdramB & vdramC. "<<endl; 
	#endif 
	mem_accessobj->MEMACCESS_retreievekvstats(vdramA, psizes_kvs[0], globalparamsvA, actvpstats_beginoffset, globalparamsvA.NUM_REDUCEPARTITIONS * NUMCOMPUTEUNITS_SLR1AND2);
	mem_accessobj->MEMACCESS_retreievekvstats(vdramB, psizes_kvs[1], globalparamsvB, actvpstats_beginoffset, globalparamsvB.NUM_REDUCEPARTITIONS * NUMCOMPUTEUNITS_SLR1AND2);
	mem_accessobj->MEMACCESS_retreievekvstats(vdramC, psizes_kvs[2], globalparamsvC, actvpstats_beginoffset, globalparamsvC.NUM_REDUCEPARTITIONS * NUMCOMPUTEUNITS_SLR0);
	
	#ifdef _DEBUGMODE_KERNELPRINTS3
	cout<<"transferring stats from vdramA, vdramB & vdramC to vdramA. "<<endl; 
	#endif 
	mem_accessobj->MEMACCESS_commitkvstats2(vdramA, psizes_kvs[0], globalparamsvA, actvpstats_beginoffset + 0, (globalparamsvA.NUM_REDUCEPARTITIONS * NUMCOMPUTEUNITS_SLR1AND2));
	mem_accessobj->MEMACCESS_commitkvstats2(vdramA, psizes_kvs[1], globalparamsvA, actvpstats_beginoffset + (globalparamsvA.NUM_REDUCEPARTITIONS * NUMCOMPUTEUNITS_SLR1AND2), (globalparamsvA.NUM_REDUCEPARTITIONS * NUMCOMPUTEUNITS_SLR1AND2));
	mem_accessobj->MEMACCESS_commitkvstats2(vdramA, psizes_kvs[2], globalparamsvA, actvpstats_beginoffset + (globalparamsvA.NUM_REDUCEPARTITIONS * NUMCOMPUTEUNITS_SLR1AND2) + (globalparamsvA.NUM_REDUCEPARTITIONS * NUMCOMPUTEUNITS_SLR1AND2), (globalparamsvA.NUM_REDUCEPARTITIONS * NUMCOMPUTEUNITS_SLR0));
	
	// vertices 
	#ifdef _DEBUGMODE_KERNELPRINTS3
	cout<<"transferring dst vertices from vdramA to vdramA. offset: "<<offset_kvs*VECTOR2_SIZE<<endl; 
	#endif
	offseti_kvs = 0;
	partitionoffseti = 0;
	for(unsigned int i=0; i<NUMCOMPUTEUNITS_SLR1AND2; i++){
		for(unsigned int partition=0; partition<globalparamsvA.NUM_REDUCEPARTITIONS; partition++){
			if(psizes_kvs[0][partitionoffseti] > 0){
				#ifdef _DEBUGMODE_KERNELPRINTS3
				cout<<"acts_merge::MERGE_mergeVsAcrossSLRs{{n}}::[A->A] [vdramA, instance "<<i<<", partition "<<partition<<"] is active: [offset: "<<offset_kvs*VECTOR2_SIZE<<", size: "<<globalparamsvA.SIZEKVS_REDUCEPARTITION<<", psizes_kvs[0]["<<partitionoffseti<<"]: "<<psizes_kvs[0][partitionoffseti]<<"] "<<endl;
				#endif
				MERGE_MERGEVSINSLIRS_LOOP1: for(unsigned int k=0; k<globalparamsvA.SIZEKVS_REDUCEPARTITION; k++){
				#pragma HLS PIPELINE II=1
					vdramA[globalparamsvA.BASEOFFSETKVS_DESTVERTICESDATA + offset_kvs + k] = vdramA[globalparamsvA.BASEOFFSETKVS_DESTVERTICESDATA + offseti_kvs + k];
				}
			}
			partitionoffseti += 1;
			offset_kvs += globalparamsvA.SIZEKVS_REDUCEPARTITION;
			offseti_kvs += globalparamsvA.SIZEKVS_REDUCEPARTITION;
		}
	}
	
	#ifdef _DEBUGMODE_KERNELPRINTS3
	cout<<"transferring dst vertices from vdramB to vdramA. offset: "<<offset_kvs*VECTOR2_SIZE<<endl; 
	#endif 
	offseti_kvs = 0;
	partitionoffseti = 0;
	for(unsigned int i=0; i<NUMCOMPUTEUNITS_SLR1AND2; i++){
		for(unsigned int partition=0; partition<globalparamsvB.NUM_REDUCEPARTITIONS; partition++){
			if(psizes_kvs[1][partitionoffseti] > 0){
				#ifdef _DEBUGMODE_KERNELPRINTS3
				cout<<"acts_merge::MERGE_mergeVsAcrossSLRs{{n}}::[B->A] [vdramB, instance "<<i<<", partition "<<partition<<"] is active: [offset: "<<offset_kvs*VECTOR2_SIZE<<", size: "<<globalparamsvA.SIZEKVS_REDUCEPARTITION<<", psizes_kvs[1]["<<partitionoffseti<<"]: "<<psizes_kvs[1][partitionoffseti]<<"] "<<endl;
				#endif
				MERGE_MERGEVSINSLIRS_LOOP2: for(unsigned int k=0; k<globalparamsvB.SIZEKVS_REDUCEPARTITION; k++){
				#pragma HLS PIPELINE II=1
					vdramA[globalparamsvA.BASEOFFSETKVS_DESTVERTICESDATA + offset_kvs + k] = vdramB[globalparamsvB.BASEOFFSETKVS_DESTVERTICESDATA + offseti_kvs + k];
				}
			}
			partitionoffseti += 1;
			offset_kvs += globalparamsvA.SIZEKVS_REDUCEPARTITION;
			offseti_kvs += globalparamsvA.SIZEKVS_REDUCEPARTITION;
		}
	}
	
	#ifdef _DEBUGMODE_KERNELPRINTS3
	cout<<"transferring dst vertices from vdramC to vdramA. offset: "<<offset_kvs*VECTOR2_SIZE<<endl; 
	#endif 
	offseti_kvs = 0;
	partitionoffseti = 0;
	for(unsigned int i=0; i<NUMCOMPUTEUNITS_SLR0; i++){
		for(unsigned int partition=0; partition<globalparamsvC.NUM_REDUCEPARTITIONS; partition++){
			if(psizes_kvs[2][partitionoffseti] > 0){
				#ifdef _DEBUGMODE_KERNELPRINTS3
				cout<<"acts_merge::MERGE_mergeVsAcrossSLRs{{n}}::[C->A] [vdramC, instance "<<i<<", partition "<<partition<<"] is active: [offset: "<<offset_kvs*VECTOR2_SIZE<<", size: "<<globalparamsvA.SIZEKVS_REDUCEPARTITION<<", psizes_kvs[2]["<<partitionoffseti<<"]: "<<psizes_kvs[2][partitionoffseti]<<"] "<<endl;
				#endif
				MERGE_MERGEVSINSLIRS_LOOP3: for(unsigned int k=0; k<globalparamsvC.SIZEKVS_REDUCEPARTITION; k++){
				#pragma HLS PIPELINE II=1
					vdramA[globalparamsvA.BASEOFFSETKVS_DESTVERTICESDATA + offset_kvs + k] = vdramC[globalparamsvC.BASEOFFSETKVS_DESTVERTICESDATA + offseti_kvs + k];
				}
			}
			partitionoffseti += 1;
			offset_kvs += globalparamsvA.SIZEKVS_REDUCEPARTITION;
			offseti_kvs += globalparamsvA.SIZEKVS_REDUCEPARTITION;
		}
	}
	
	#ifdef _DEBUGMODE_KERNELPRINTS3
	cout<<"MERGE_mergeVsAcrossSLRs{{n}}: Finished. offset: "<<offset_kvs * VECTOR2_SIZE<<endl;
	#endif
	return;
}
 