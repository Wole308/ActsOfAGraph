value_t {{context['classname__reduceupdates']}}REDUCE{{context['id']}}_reducefunc(value_t vtemp, value_t res, unsigned int GraphIter, unsigned int GraphAlgo){
	value_t temp = 0;
	#ifdef CUSTOMLOGICFOREACHALGORITHM
		#if defined(PR_ALGORITHM)
			temp = vtemp + res;
		#elif defined(CF_ALGORITHM)
			unsigned int ew = 1;
			unsigned int lamda = 1;
			temp = vtemp + ((ew - vtemp*res)*res - lamda*vtemp);
		#elif defined(CC_ALGORITHM)
			temp = UTIL{{context['id']}}_amin(vtemp, res);
		#elif defined(BFS_ALGORITHM)
			temp = UTIL{{context['id']}}_amin(vtemp, GraphIter);
		#elif defined(SSSP_ALGORITHM)
			temp = UTIL{{context['id']}}_amin(vtemp, res);
		#else 
			NOT DEFINED.
		#endif
	#else 
	if(GraphAlgo == PAGERANK){
		temp = vtemp + res;
	} else if(GraphAlgo == CF){
		temp = vtemp + ((ew - vtemp*res)*res - lamda*vtemp);
	} else if(GraphAlgo == CC){
		temp = UTIL{{context['id']}}_amin(vtemp, res);
	} else if(GraphAlgo == BFS){
		temp = UTIL{{context['id']}}_amin(vtemp, GraphIter);
	} else if(GraphAlgo == SSSP){
		temp = UTIL{{context['id']}}_amin(vtemp, res);
	} else {
		NOT DEFINED
	}
	#endif
	return temp;
}

/** void {{context['classname__reduceupdates']}}REDUCE{{context['id']}}_reducevector(unsigned int col, keyvalue_buffer_t kvdata, keyvalue_vbuffer_t destbuffer[BLOCKRAM_SIZE], unit1_type vmaskBITS[BLOCKRAM_VMASK_SIZE], buffer_type destoffset, unsigned int upperlimit, sweepparams_t sweepparams, globalparams_t globalparams){
	#pragma HLS PIPELINE II=3
	analysis_type analysis_loop1 = VECTOR_SIZE;
	
	keyvalue_t mykeyvalue = UTIL{{context['id']}}_GETKV(kvdata);
	
	#ifdef CONFIG_SPLIT_DESTVTXS
	vertex_t loc = ((mykeyvalue.key - upperlimit) - col) >> NUM_PARTITIONS_POW;
	#else 
	vertex_t loc = mykeyvalue.key - upperlimit;
	#endif 
	#ifdef _DEBUGMODE_KERNELPRINTS
	cout<<"REDUCE{{context['id']}}_reducevector:: col: "<<col<<", loc: "<<loc<<", mykeyvalue.key: "<<mykeyvalue.key<<", mykeyvalue.value: "<<mykeyvalue.value<<endl;
	#endif 
	
	bool en = true; if(mykeyvalue.key != UTIL{{context['id']}}_GETK(INVALIDDATA) && mykeyvalue.value != UTIL{{context['id']}}_GETV(INVALIDDATA)){ en = true; } else { en = false; }
	
	#ifdef _DEBUGMODE_KERNELPRINTS_TRACE3 // upperlimit + loc
	if(en == true){ cout<<"REDUCE{{context['id']}}_reducevector:: REDUCE SEEN @ vid: "<<UTIL{{context['id']}}_GETREALVID(mykeyvalue.key, globalparams.ACTSPARAMS_INSTID)<<", loc: "<<loc<<", mykeyvalue.key: "<<mykeyvalue.key<<", mykeyvalue.value: "<<mykeyvalue.value<<", upperlimit: "<<upperlimit<<", reduce size: "<<globalparams.SIZE_REDUCE<<endl; }
	#endif 
	
	if(loc >= globalparams.SIZE_REDUCE && en == true){ 
		#ifdef _DEBUGMODE_CHECKS2
		if(true){ cout<<"REDUCE{{context['id']}}_reducevector::ERROR SEEN @ loc("<<loc<<") >= globalparams.SIZE_REDUCE("<<globalparams.SIZE_REDUCE<<"). mykeyvalue.key: "<<mykeyvalue.key<<", upperlimit: "<<upperlimit<<", col: "<<col<<". EXITING... "<<endl; exit(EXIT_FAILURE); }
		actsutilityobj->reducehelper_checkreduceloc(0, loc, mykeyvalue, sweepparams, globalparams); 
		#endif 
		loc = 0; }
		
	value_t curr_vprop;
	// if(en == true){ curr_vprop = MEMCA{{context['id']}}_READFROMBUFFER_VDATA(loc, destbuffer, destoffset); }
	if(en == true){ curr_vprop = loc + destoffset; } // CRITICAL REMOVEME.

	value_t new_vprop = REDUCE{{context['id']}}_reducefunc(curr_vprop, mykeyvalue.value, globalparams.ALGORITHMINFO_GRAPHITERATIONID, globalparams.ALGORITHMINFO_GRAPHALGORITHMID);
	#ifdef _DEBUGMODE_KERNELPRINTS
	if(en == true){ cout<<"REDUCE{{context['id']}}_reducevector:: REDUCEFUNC RESULT @ new_vprop: "<<new_vprop<<", curr_vprop: "<<curr_vprop<<", mykeyvalue.value: "<<mykeyvalue.value<<", NAp: "<<NAp<<endl; }
	#endif 
	
	#ifdef CONFIG_SEPERATEVMASKFROMVDATA
		if(en == true){ MEMCA{{context['id']}}_WRITETOBUFFER_VDATA(loc, destbuffer, new_vprop, destoffset); }
		if(en == true && new_vprop != curr_vprop){ vmaskBITS[loc] = 1; }
		#ifdef _DEBUGMODE_KERNELPRINTS_TRACE3
		if(en == true && new_vprop != curr_vprop){ cout<<"REDUCE{{context['id']}}_reducevector:: ACTIVE MASK SEEN AT: vmaskBITS["<<loc<<"]: "<<vmaskBITS[loc]<<endl; }
		#endif
	#else 
		unit1_type vmask = 0;
		if(en == true && new_vprop != curr_vprop){ vmask = 1; }
		// if(en == true && new_vprop != curr_vprop){ vmaskBITS[loc] = 1; } // REMOVEME.
		#ifdef _DEBUGMODE_KERNELPRINTS_TRACE3
		if(en == true && new_vprop != curr_vprop){ cout<<"REDUCE{{context['id']}}_reducevector:: ACTIVE MASK SEEN AT: vmaskBITS["<<loc<<"]: "<<vmaskBITS[loc]<<endl; }
		#endif
		if(en == true){ MEMCA{{context['id']}}_WRITETOBUFFER_VDATAWITHVMASK(loc, destbuffer, new_vprop, vmask, destoffset); }
	#endif 
	
	#ifdef _DEBUGMODE_STATS
	actsutilityobj->globalstats_countkvsreduced(1);
	if(en == true){ actsutilityobj->globalstats_reduce_countvalidkvsreduced(1); }
	#endif
	return;
} */
void {{context['classname__reduceupdates']}}REDUCE{{context['id']}}_reducevector(unsigned int col, keyvalue_buffer_t kvdata, keyvalue_vbuffer_t destbuffer[BLOCKRAM_VDATA_SIZE], unit1_type vmaskBITS[BLOCKRAM_VMASK_SIZE], buffer_type destoffset, unsigned int upperlimit, sweepparams_t sweepparams, globalparams_t globalparams){
	#pragma HLS PIPELINE II=3
	analysis_type analysis_loop1 = VECTOR_SIZE;
	
	value_t curr_vprop;
	value_t new_vprop;
	keyvalue_vbuffer_t curr_VPROP; 
	keyvalue_vbuffer_t new_VPROP;
	
	keyvalue_t mykeyvalue = UTIL{{context['id']}}_GETKV(kvdata);
	
	#ifdef CONFIG_SPLIT_DESTVTXS
	vertex_t loc = ((mykeyvalue.key - upperlimit) - col) >> NUM_PARTITIONS_POW;
	#else 
	vertex_t loc = mykeyvalue.key - upperlimit;
	#endif 
	#ifdef _DEBUGMODE_KERNELPRINTS
	cout<<"REDUCE{{context['id']}}_reducevector:: col: "<<col<<", loc: "<<loc<<", mykeyvalue.key: "<<mykeyvalue.key<<", mykeyvalue.value: "<<mykeyvalue.value<<endl;
	#endif 
	
	bool en = true; if(mykeyvalue.key != UTIL{{context['id']}}_GETK(INVALIDDATA) && mykeyvalue.value != UTIL{{context['id']}}_GETV(INVALIDDATA)){ en = true; } else { en = false; }
	
	#ifdef _DEBUGMODE_KERNELPRINTS_TRACE3 // upperlimit + loc
	if(en == true){ cout<<"REDUCE{{context['id']}}_reducevector:: REDUCE SEEN @ vid: "<<UTIL{{context['id']}}_GETREALVID(mykeyvalue.key, globalparams.ACTSPARAMS_INSTID)<<", loc: "<<loc<<", mykeyvalue.key: "<<mykeyvalue.key<<", mykeyvalue.value: "<<mykeyvalue.value<<", upperlimit: "<<upperlimit<<", reduce size: "<<globalparams.SIZE_REDUCE<<endl; }
	#endif 
	
	if(loc >= globalparams.SIZE_REDUCE && en == true){ 
		#ifdef _DEBUGMODE_CHECKS2X
		if(true){ cout<<"REDUCE{{context['id']}}_reducevector::ERROR SEEN @ loc("<<loc<<") >= globalparams.SIZE_REDUCE("<<globalparams.SIZE_REDUCE<<"). mykeyvalue.key: "<<mykeyvalue.key<<", upperlimit: "<<upperlimit<<", col: "<<col<<". EXITING... "<<endl; exit(EXIT_FAILURE); }
		actsutilityobj->reducehelper_checkreduceloc(0, loc, mykeyvalue, sweepparams, globalparams); 
		#endif 
		loc = 0; }
	
	// if(en == true){ curr_vprop = loc + destoffset; } // CRITICAL REMOVEME.	
	#ifdef _WIDEWORD
	if(en == true){ 
		curr_VPROP = destbuffer[destoffset + loc/2];
		if(loc%2==0){ curr_vprop = curr_VPROP.range(SIZEOF_VDATA0 - 1, 0); } else { curr_vprop = curr_VPROP.range(SIZEOF_VDATAKEY + SIZEOF_VDATA1 - 1, SIZEOF_VDATAKEY); }
		new_VPROP = curr_VPROP;
	}
	#else 
	if(en == true){ curr_vprop = MEMCA{{context['id']}}_READFROMBUFFER_VDATA(loc, destbuffer, destoffset); }		
	#endif 
	
	new_vprop = REDUCE{{context['id']}}_reducefunc(curr_vprop, mykeyvalue.value, globalparams.ALGORITHMINFO_GRAPHITERATIONID, globalparams.ALGORITHMINFO_GRAPHALGORITHMID);
	#ifdef _DEBUGMODE_KERNELPRINTS
	if(en == true){ cout<<"REDUCE{{context['id']}}_reducevector:: REDUCEFUNC RESULT @ new_vprop: "<<new_vprop<<", curr_vprop: "<<curr_vprop<<", mykeyvalue.value: "<<mykeyvalue.value<<", NAp: "<<NAp<<endl; }
	#endif 
	
	#ifdef CONFIG_SEPERATEVMASKFROMVDATA
		if(en == true){ MEMCA{{context['id']}}_WRITETOBUFFER_VDATA(loc, destbuffer, new_vprop, destoffset); }
		if(en == true && new_vprop != curr_vprop){ vmaskBITS[loc] = 1; }
		#ifdef _DEBUGMODE_KERNELPRINTS_TRACE3
		if(en == true && new_vprop != curr_vprop){ cout<<"REDUCE{{context['id']}}_reducevector:: ACTIVE MASK SEEN AT: vmaskBITS["<<loc<<"]: "<<vmaskBITS[loc]<<endl; }
		#endif
	#else 
		unit1_type vmask = 0;
		if(en == true && new_vprop != curr_vprop){ vmask = 1; }
		#ifdef _DEBUGMODE_KERNELPRINTS_TRACE3
		if(en == true && new_vprop != curr_vprop){ cout<<"REDUCE{{context['id']}}_reducevector:: ACTIVE MASK SEEN AT: vmaskBITS["<<loc<<"]: "<<vmaskBITS[loc]<<endl; }
		#endif
		
		#ifdef _WIDEWORD
		if(loc%2==0){ new_VPROP.range(SIZEOF_VDATA0 - 1, 0) = new_vprop; } else { new_VPROP.range(SIZEOF_VDATAKEY + SIZEOF_VDATA1 - 1, SIZEOF_VDATAKEY) = new_vprop; }
		destbuffer[destoffset + loc/2] = new_VPROP;	
		#else 
		if(en == true){ MEMCA{{context['id']}}_WRITETOBUFFER_VDATAWITHVMASK(loc, destbuffer, new_vprop, vmask, destoffset); }	
		#endif 
	#endif 
	
	#ifdef _DEBUGMODE_STATS
	actsutilityobj->globalstats_countkvsreduced(1);
	if(en == true){ actsutilityobj->globalstats_reduce_countvalidkvsreduced(1); }
	#endif
	return;
}

void {{context['classname__reduceupdates']}}REDUCE{{context['id']}}_reduceandbuffer(bool_type enable, keyvalue_buffer_t buffer[VECTOR_SIZE][DESTBLOCKRAM_SIZE], keyvalue_capsule_t localcapsule[MAX_NUM_PARTITIONS], keyvalue_vbuffer_t vbuffer[VDATA_PACKINGSIZE][BLOCKRAM_VDATA_SIZE], unit1_type vmaskBITS[VMASK_PACKINGSIZE][BLOCKRAM_VMASK_SIZE], sweepparams_t sweepparams, globalparams_t globalparams){				
	if(enable == OFF){ return; }
	#if REDUCEBUFFERFACTOR==8
	analysis_type analysis_loopcount = (DESTBLOCKRAM_SIZE / (NUM_PARTITIONS / 2)); // =46: '2' is safety padding.
	#endif 
	#if REDUCEBUFFERFACTOR==16
	analysis_type analysis_loopcount = (DESTBLOCKRAM_SIZE / NUM_PARTITIONS);
	#endif 
	
	{%for p in context['BRAMwidth_seq']%}
	keyvalue_buffer_t kvdata{{p}};
	{%endfor%}
	buffer_type bramoffset_kvs[MAX_NUM_PARTITIONS];
	#pragma HLS ARRAY_PARTITION variable=bramoffset_kvs complete
	buffer_type size_kvs[MAX_NUM_PARTITIONS];
	#pragma HLS ARRAY_PARTITION variable=size_kvs complete
	unsigned int upperlimits[MAX_NUM_PARTITIONS];
	#pragma HLS ARRAY_PARTITION variable=upperlimits complete
	
	#ifdef _DEBUGMODE_KERNELPRINTS
	actsutilityobj->printkeyvalues("reduceandbuffer.localcapsule", (keyvalue_t *)localcapsule, NUM_PARTITIONS);
	#endif

	unsigned int tmplloprange = 0;
	#if REDUCEBUFFERFACTOR==8
	REDUCEBUFFERPARTITIONS_LOOP1: for(unsigned int it=0; it<NUM_PARTITIONS; it+=NUM_PARTITIONS/2){
		buffer_type maxsize_kvs = 0;
		REDUCEBUFFERPARTITIONS_LOOP1B: for(partition_type p=0; p<NUM_PARTITIONS/2; p++){
		#pragma HLS PIPELINE II=1
			bramoffset_kvs[p] = localcapsule[it+p].key / VECTOR_SIZE;
			size_kvs[p] = localcapsule[it+p].value / VECTOR_SIZE;
			if(maxsize_kvs < size_kvs[p]){ maxsize_kvs = size_kvs[p]; }
		}
		
		unsigned int lloprange = UTIL{{context['id']}}_getrangeforeachllop(globalparams);
		REDUCEBUFFERPARTITIONS_LOOP1C: for(unsigned int p=0; p<NUM_PARTITIONS/2; p++){
		#pragma HLS PIPELINE II=1
			upperlimits[p] = sweepparams.upperlimit + tmplloprange;
			tmplloprange += lloprange;
		}
		
		{%for p in context['8_seq']%} unsigned int vmask_v{{p}} = 0; {%endfor%}	
		REDUCEBUFFERPARTITIONS_LOOP1D: for(buffer_type i=0; i<maxsize_kvs; i++){
		#pragma HLS LOOP_TRIPCOUNT min=0 max=analysis_loopcount avg=analysis_loopcount
		// #pragma HLS PIPELINE II=16
		#pragma HLS PIPELINE II=32 // FIXME? USE THIS INSTEAD?
		// #pragma HLS PIPELINE II=48 // FIXME? USE THIS INSTEAD?
			for(vector_type v=0; v<VECTOR_SIZE; v++){
				{%for p in context['8_seq']%}
				kvdata{{p}} = buffer[v][bramoffset_kvs[{{p}}] + i]; 	
				{%endfor%}	
				
				#ifdef CONFIG_SEPERATEVMASKFROMVDATA
				{%for p in context['8_seq']%} vmask_v{{p}} = it+{{p}}; {%endfor%}	
				#endif 

				#ifdef CONFIG_SPLIT_DESTVTXS
				{%for p in context['8_seq']%}
				if(i< size_kvs[{{p}}]){ REDUCE{{context['id']}}_reducevector(it+{{p}}, kvdata{{p}}, vbuffer[it+{{p}}], vmaskBITS[vmask_v{{p}}], 0, sweepparams.upperlimit, sweepparams, globalparams); }
				{%endfor%}
				#else 
				{%for p in context['8_seq']%}
				if(i< size_kvs[{{p}}]){ REDUCE{{context['id']}}_reducevector(it+{{p}}, kvdata{{p}}, vbuffer[it+{{p}}], vmaskBITS[vmask_v{{p}}], 0, upperlimits[{{p}}], sweepparams, globalparams); }
				{%endfor%}
				#endif 
			}
		}
	}
	#endif 
	#if REDUCEBUFFERFACTOR==16 // NOT USED.
	buffer_type maxsize_kvs = 0;
	REDUCEBUFFERPARTITIONS_LOOP1B: for(partition_type p=0; p<NUM_PARTITIONS; p++){
	#pragma HLS PIPELINE II=1
		bramoffset_kvs[p] = localcapsule[p].key / VECTOR_SIZE;
		size_kvs[p] = localcapsule[p].value / VECTOR_SIZE;
		if(maxsize_kvs < size_kvs[p]){ maxsize_kvs = size_kvs[p]; }
	}
	
	unsigned int lloprange = UTIL{{context['id']}}_getrangeforeachllop(globalparams);
	REDUCEBUFFERPARTITIONS_LOOP1C: for(unsigned int p=0; p<NUM_PARTITIONS; p++){
	#pragma HLS PIPELINE II=1
		upperlimits[p] = sweepparams.upperlimit + tmplloprange;
		tmplloprange += lloprange;
	}
	
	{%for p in context['BRAMwidth_seq']%} unsigned int vmask_v{{p}} = 0; {%endfor%}	
	REDUCEBUFFERPARTITIONS_LOOP1D: for(buffer_type i=0; i<maxsize_kvs; i++){
	#pragma HLS LOOP_TRIPCOUNT min=0 max=analysis_loopcount avg=analysis_loopcount
	#pragma HLS PIPELINE II=16
		for(vector_type v=0; v<VECTOR_SIZE; v++){
			{%for p in context['BRAMwidth_seq']%}
			kvdata{{p}} = buffer[v][bramoffset_kvs[{{p}}] + i]; 	
			{%endfor%}	
			
			#ifdef CONFIG_SEPERATEVMASKFROMVDATA
			{%for p in context['BRAMwidth_seq']%} vmask_v{{p}} = {{p}}; {%endfor%}	
			#endif 

			#ifdef CONFIG_SPLIT_DESTVTXS
			{%for p in context['BRAMwidth_seq']%}
			if(i< size_kvs[{{p}}]){ REDUCE{{context['id']}}_reducevector(it+{{p}}, kvdata{{p}}, vbuffer[{{p}}], vmaskBITS[vmask_v{{p}}], 0, sweepparams.upperlimit, sweepparams, globalparams); }
			{%endfor%}
			#else 
			{%for p in context['BRAMwidth_seq']%}
			if(i< size_kvs[{{p}}]){ REDUCE{{context['id']}}_reducevector(it+{{p}}, kvdata{{p}}, vbuffer[{{p}}], vmaskBITS[{{p}}], 0, upperlimits[{{p}}], sweepparams, globalparams); }
			{%endfor%}	
			#endif 
		}
	}
	#endif 
	// exit(EXIT_SUCCESS); ////
	return;
}

void {{context['classname__reduceupdates']}}REDUCE{{context['id']}}_priorreduceandbuffer(bool_type enable, keyvalue_buffer_t buffer[VECTOR_SIZE][SOURCEBLOCKRAM_SIZE], keyvalue_capsule_t localcapsule[MAX_NUM_PARTITIONS], keyvalue_vbuffer_t vbuffer[VDATA_PACKINGSIZE][BLOCKRAM_VDATA_SIZE], unit1_type vmaskBITS[VMASK_PACKINGSIZE][BLOCKRAM_VMASK_SIZE], buffer_type chunk_size, sweepparams_t sweepparams, globalparams_t globalparams){				
	if(enable == OFF){ return; }
	analysis_type analysis_loopcount = SOURCEBLOCKRAM_SIZE;
	
	#ifdef _DEBUGMODE_KERNELPRINTS
	actsutilityobj->printkeyvalues("priorreduceandbuffer.localcapsule", (keyvalue_t *)localcapsule, 8);
	#endif 
	
	PRIORREDUCEANDBUFFER_LOOP1: for(buffer_type i=0; i<chunk_size; i++){
	#pragma HLS LOOP_TRIPCOUNT min=0 max=analysis_loopcount avg=analysis_loopcount
	#pragma HLS PIPELINE II=16 // NEWCHANGE.
		PRIORREDUCEANDBUFFER_LOOP1B: for(unsigned int v=0; v<VECTOR_SIZE; v++){
		// #pragma HLS PIPELINE II=1 // NEWCHANGE.
			keyvalue_buffer_t kv = buffer[v][i];
			keyvalue_t kv2 = UTIL{{context['id']}}_GETKV(kv);
		
			partition_type p = ((kv2.key - sweepparams.upperlimit) >> (REDUCESZ_POW));
			
			unsigned int upperlimit = sweepparams.upperlimit + p*REDUCESZ;
			
			#ifdef _DEBUGMODE_KERNELPRINTS_TRACE3
			cout<<"priorreduceandbuffer: kv2.key: "<<kv2.key<<", kv2.value: "<<kv2.value<<", p: "<<p<<", upperlimit: "<<upperlimit<<", sweepparams.upperlimit: "<<sweepparams.upperlimit<<", currentLOP: "<<sweepparams.currentLOP<<endl;
			#endif 
			
			if(p < VDATA_PACKINGSIZE){ REDUCE{{context['id']}}_reducevector(p, kv, vbuffer[p], vmaskBITS[p], 0, upperlimit, sweepparams, globalparams); } // REMOVEME.
		}
	}
	return;
}

void {{context['classname__reduceupdates']}}REDUCE{{context['id']}}_tradreduceandbuffer(bool_type enable, uint512_dt * kvdram, keyvalue_buffer_t buffer[VECTOR_SIZE][SOURCEBLOCKRAM_SIZE], buffer_type chunk_size, keyvalue_t globalstatsbuffer[MAX_NUM_PARTITIONS], sweepparams_t sweepparams, globalparams_t globalparams){				
	if(enable == OFF){ return; }
	analysis_type analysis_loopcount = SOURCEBLOCKRAM_SIZE;
	
	TRADREDUCEANDBUFFER_LOOP1: for(buffer_type i=0; i<chunk_size; i++){
	#pragma HLS LOOP_TRIPCOUNT min=0 max=analysis_loopcount avg=analysis_loopcount
		TRADREDUCEANDBUFFER_LOOP1B: for(unsigned int v=0; v<VECTOR_SIZE; v++){
		#pragma HLS PIPELINE II=1 // NEWCHANGE.
			keyvalue_buffer_t kv = buffer[v][i];
			keyvalue_t kv2 = UTIL{{context['id']}}_GETKV(kv);
			
			if(kv2.key != UTIL{{context['id']}}_GETV(INVALIDDATA) && kv2.value != UTIL{{context['id']}}_GETV(INVALIDDATA)){
			
				unsigned int block = kv2.key / (REDUCESZ * VECTOR_SIZE); // REDUCESZ, globalparams.SIZE_REDUCE 
				unsigned int globalpos_offset = block * (REDUCESZ * VECTOR_SIZE);
				unsigned int globalrow_offset = globalpos_offset / VECTOR2_SIZE;
				
				unsigned int localpos = kv2.key % (REDUCESZ * VECTOR_SIZE); // 8192;
				unsigned int localrow = (localpos % REDUCESZ) / 2;
				unsigned int localcol = localpos / REDUCESZ;
				
				unsigned int row = globalrow_offset + localrow;
				unsigned int col = localcol;
				
				#ifdef _DEBUGMODE_KERNELPRINTS_TRACE3
				cout<<"REDUCE SEEN @ tradreduceandbuffer:: kv2.key: "<<kv2.key<<", kv2.value: "<<kv2.value<<" || block: "<<block<<", row: "<<row<<", col: "<<col<<" || localpos: "<<localpos<<", localrow: "<<localrow<<", localcol: "<<localcol<<endl;
				#endif
				
				value_t temp;
				uint512_vec_dt vdata;
				#pragma HLS data_pack variable=vdata
				
				#ifdef _WIDEWORD
				{%for v in context['VECTOR_SIZE_seq']%}
				vdata.data[{{v}}].key = kvdram[globalparams.BASEOFFSETKVS_DESTVERTICESDATA + row].range({{32 * ((v * 2) + 1) - 1}}, {{(v * 2) * 32}});
				vdata.data[{{v}}].value = kvdram[globalparams.BASEOFFSETKVS_DESTVERTICESDATA + row].range({{32 * (((v * 2) + 1) + 1) - 1}}, {{(v * 2 + 1) * 32}});
				{%endfor%}
				#else 
				{%for v in context['VECTOR_SIZE_seq']%}
				vdata.data[{{v}}].key = kvdram[globalparams.BASEOFFSETKVS_DESTVERTICESDATA + row].data[{{v}}].key; 
				vdata.data[{{v}}].value = kvdram[globalparams.BASEOFFSETKVS_DESTVERTICESDATA + row].data[{{v}}].value; 
				{%endfor%}
				#endif
				
				if(localpos % 2 == 0){ temp = vdata.data[localcol].key; }
				else { temp = vdata.data[localcol].value; }
				
				value_t new_vprop = REDUCE{{context['id']}}_reducefunc(temp, kv2.value, globalparams.ALGORITHMINFO_GRAPHITERATIONID, globalparams.ALGORITHMINFO_GRAPHALGORITHMID);
				
				if(localpos % 2 == 0){ vdata.data[localcol].key = new_vprop; }
				else { vdata.data[localcol].value = new_vprop; }
				
				#ifdef _WIDEWORD
				{%for v in context['VECTOR_SIZE_seq']%}
				kvdram[globalparams.BASEOFFSETKVS_DESTVERTICESDATA + row].range({{32 * ((v * 2) + 1) - 1}}, {{(v * 2) * 32}}) = vdata.data[{{v}}].key;
				kvdram[globalparams.BASEOFFSETKVS_DESTVERTICESDATA + row].range({{32 * (((v * 2) + 1) + 1) - 1}}, {{(v * 2 + 1) * 32}}) = vdata.data[{{v}}].value;
				{%endfor%}
				#else 
				{%for v in context['VECTOR_SIZE_seq']%}
				kvdram[globalparams.BASEOFFSETKVS_DESTVERTICESDATA + row].data[{{v}}].key = vdata.data[{{v}}].key; 
				kvdram[globalparams.BASEOFFSETKVS_DESTVERTICESDATA + row].data[{{v}}].value = vdata.data[{{v}}].value; 
				{%endfor%}
				#endif
				
				partition_type p = UTIL{{context['id']}}_getpartition(ON, REDUCEMODE, kv, sweepparams.currentLOP, sweepparams.upperlimit, sweepparams.upperpartition, globalparams.POW_BATCHRANGE);
				globalstatsbuffer[p].value += 1;
				
				#ifdef _DEBUGMODE_KERNELPRINTS_TRACE3
				if(localpos % 2 == 0){ cout<<"--- tradreduceandbuffer :: kvdram[globalparams.BASEOFFSETKVS_DESTVERTICESDATA + "<<row<<"].data["<<localcol<<"].key: "<<kvdram[globalparams.BASEOFFSETKVS_DESTVERTICESDATA + row].data[localcol].key<<endl; }
				else { cout<<"--- tradreduceandbuffer :: kvdram[globalparams.BASEOFFSETKVS_DESTVERTICESDATA + "<<row<<"].data["<<localcol<<"].value: "<<kvdram[globalparams.BASEOFFSETKVS_DESTVERTICESDATA + row].data[localcol].value<<endl; }
				#endif
			}
		}
	}
	return;
}



