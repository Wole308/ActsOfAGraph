#define PE_SETSZ {{context['PE_SETSZ']}}
// #define DEBUGME_PROCESSEDGES2

void {{context['classname__processedges']}}PROCESS{{context['id']}}_processvector(bool enx, unsigned int loc, keyvalue_t edata, keyvalue_vbuffer_t vbuffer[BLOCKRAM_VDATA_SIZE], keyvalue_buffer_t buffer[SOURCEBLOCKRAM_SIZE], unsigned int * loadcount, unsigned int GraphAlgoClass, globalparams_t globalparams){
	#pragma HLS INLINE
	bool en = true; if(edata.key != INVALIDDATA && edata.value != INVALIDDATA && enx == true){ en = true; } else { en = false; }
	#ifdef _DEBUGMODE_KERNELPRINTS_TRACE3
	if(en == true){ cout<<"PROCESS{{context['id']}}_processvector:: PROCESS SEEN @ vid: "<<UTIL{{context['id']}}_GETREALVID(edata.key, globalparams.ACTSPARAMS_INSTID)<<", loc: "<<loc<<", edata.key(dstvid): "<<edata.key<<", edata.value(srcvid): "<<edata.value<<", process size: "<<globalparams.SIZE_REDUCE<<endl; }
	#endif 
	
	if(loc >= globalparams.SIZEKVS2_REDUCEPARTITION && en == true){
		#ifdef _DEBUGMODE_CHECKS2X
		if(true){ cout<<"PROCESS{{context['id']}}_processvector::ERROR SEEN @ loc("<<loc<<") >= globalparams.SIZE_REDUCE("<<globalparams.SIZE_REDUCE<<"). edata.key: "<<edata.key<<", col: "<<col<<". EXITING... "<<endl; exit(EXIT_FAILURE); }
		#endif 
		loc = 0; }
	
	// read 
	vmdata_t vmdata;
	if(en == true){ vmdata = MEMCA{{context['id']}}_READFROMBUFFER_VDATAWITHVMASK(loc, vbuffer, 0); }
	if(GraphAlgoClass == ALGORITHMCLASS_ALLVERTEXISACTIVE){ vmdata.vmask = 1; } 
			
	// process
	value_t res = PROCESS{{context['id']}}_processfunc(vmdata.vdata, 1, globalparams.ALGORITHMINFO_GRAPHALGORITHMID);
	keyvalue_t mykeyvalue; mykeyvalue.key = edata.key; mykeyvalue.value = res;
	
	// write 
	if(en == true && vmdata.vmask == 1){ buffer[*loadcount] = UTIL{{context['id']}}_GETKV(mykeyvalue); }
	if(en == true && vmdata.vmask == 1){ *loadcount += 1; }
	
	#ifdef _DEBUGMODE_STATS
	actsutilityobj->globalstats_countkvsprocessed(1);
	if(en == true && vmdata.vmask == 1){ actsutilityobj->globalstats_processedges_countvalidkvsprocessed(1); } // mask0? FIXME.
	#endif 
	#ifdef _DEBUGMODE_CHECKS2
	actsutilityobj->checkoutofbounds("PROCESS{{context['id']}}_processvector::DEBUG CODE 14::1", *loadcount, SOURCEBLOCKRAM_SIZE, NAp, NAp, NAp);
	#endif
	return;
}

void {{context['classname__processedges']}}PROCESS{{context['id']}}_GetXYLayoutV(unsigned int s, unsigned int depths[VECTOR_SIZE], unsigned int basedepth){
	unsigned int s_ = s % VECTOR_SIZE;
	
	{%for v in context['VECTOR_SIZE_seq']%}
	{%if(v>0)%}else{%endif%} {%if(v<context['VECTOR_SIZE']-1)%}if(s_=={{v}}){%endif%}{ 
		{%for v2 in context['VECTOR_SIZE_seq']%}{%if(v2<v)%}
		depths[{{v2}}] = {{context['VECTOR_SIZE']-v+v2}}; 
		{%endif%}{%endfor%}
		{%for v2 in context['VECTOR_SIZE_seq']%}{%if(v2>=v)%}
		depths[{{v2}}] = {{v2-v}}; 
		{%endif%}{%endfor%}
	}
	{%endfor%}
	return;
}

void {{context['classname__processedges']}}PROCESS{{context['id']}}_RearrangeLayoutV(unsigned int s, uint32_type vdata[VECTOR_SIZE], uint32_type vdata2[VECTOR_SIZE]){
	unsigned int s_ = s;// % VECTOR_SIZE;
	{%for v in context['VECTOR_SIZE_seq']%}
	{%if(v>0)%}else{%endif%} {%if(v<context['VECTOR_SIZE']-1)%}if(s_=={{v}}){%endif%}{ 
		{%for v2 in context['VECTOR_SIZE_seq']%}{%if(v2<v)%}
		vdata2[{{context['VECTOR_SIZE']-v+v2}}] = vdata[{{v2}}]; 
		{%endif%}{%endfor%}
		{%for v2 in context['VECTOR_SIZE_seq']%}{%if(v2>=v)%}
		vdata2[{{v2-v}}] = vdata[{{v2}}]; 
		{%endif%}{%endfor%}
	}
	{%endfor%}
	
	// uint1024_dt W = 0;
	// {%for v in context['VECTOR_SIZE_seq']%}
	// W.range({{(v * 32) + 31}}, {{v * 32}}) = vdata[{{v}}]; 
	// {%endfor%}
	// {%for v in context['VECTOR_SIZE_seq']%}
	// W.range({{512 + ((v * 32) + 31)}}, {{512 + (v * 32)}}) = vdata[{{v}}]; 
	// {%endfor%}
	
	// W << s_;
	
	// {%for v in context['VECTOR_SIZE_seq']%}
	// vdata2[{{v}}] = W.range({{(v * 32) + 31}}, {{v * 32}}); 
	// {%endfor%}
	return;
}

parsededge_t {{context['classname__processedges']}}PROCESS{{context['id']}}_PARSEEDGE(uint32_type data){ 
	parsededge_t parsededge;
	#ifdef _WIDEWORD
	parsededge.incr = data.range(31, OFFSETOF_SRCV_IN_EDGEDSTVDATA);
	parsededge.dstvid = data.range(SIZEOF_DSTV_IN_EDGEDSTVDATA, 0);
	#else
	parsededge.incr = UTIL{{context['id']}}_READFROM_UINT(data, OFFSETOF_SRCV_IN_EDGEDSTVDATA, SIZEOF_SRCV_IN_EDGEDSTVDATA);
	parsededge.dstvid = UTIL{{context['id']}}_READFROM_UINT(data, OFFSETOF_DSTV_IN_EDGEDSTVDATA, SIZEOF_DSTV_IN_EDGEDSTVDATA);
	#endif
	return parsededge; 
}

void {{context['classname__processedges']}}PROCESS{{context['id']}}_calculateoffsets(keyvalue_capsule_t * buffer){
	for(buffer_type i=1; i<NUM_PARTITIONS; i++){ 
	#pragma HLS PIPELINE II=2	
		buffer[i].key = UTIL{{context['id']}}_allignlower_KV2(buffer[i-1].key + buffer[i-1].value); 
	}
	return;
}

fetchmessage_t {{context['classname__processedges']}}PROCESS{{context['id']}}_SPL_readandprocess(bool_type enable, uint512_dt * edges, uint512_dt * kvdram, keyvalue_vbuffer_t vbuffer[VDATA_PACKINGSIZE][BLOCKRAM_VDATA_SIZE], keyvalue_buffer_t buffer[VECTOR_SIZE][SOURCEBLOCKRAM_SIZE], 
		batch_type goffset_kvs, batch_type loffset_kvs, batch_type size_kvs, travstate_t travstate, sweepparams_t sweepparams, globalparams_t globalparams){
	// NB: localcapsule[x].key & localcapsule[x].key are all in _kvs formats
	fetchmessage_t fetchmessage;
	fetchmessage.chunksize_kvs = -1;
	fetchmessage.nextoffset_kvs = -1;
	if(enable == OFF){ return fetchmessage; }
	analysis_type analysis_loopcount = (DESTBLOCKRAM_SIZE / (NUM_PARTITIONS / 2));
	
	uint32_type E[VECTOR2_SIZE];
	#pragma HLS ARRAY_PARTITION variable=E complete
	uint32_type E2[VECTOR2_SIZE];
	#pragma HLS ARRAY_PARTITION variable=E2 complete

	buffer_type reducebuffersz = globalparams.SIZE_REDUCE / 2;
	unsigned int validbound = reducebuffersz * FETFACTOR * VECTOR2_SIZE;
	
	travstate.i_kvs = travstate.i_kvs / 2;
	travstate.end_kvs = travstate.end_kvs / 2;
	loffset_kvs = loffset_kvs / 2; //
	buffer_type edgessize_kvs = size_kvs / 2;
	
	batch_type offset_kvs = goffset_kvs + loffset_kvs;
	
	value_t res[VECTOR2_SIZE];
	#pragma HLS ARRAY_PARTITION variable=res complete
	unsigned int loadcount[VECTOR_SIZE];
	#pragma HLS ARRAY_PARTITION variable=loadcount complete
	unsigned int depths[VECTOR_SIZE];
	#pragma HLS ARRAY_PARTITION variable=depths complete
	unsigned int d_kvs[VECTOR_SIZE];
	#pragma HLS ARRAY_PARTITION variable=d_kvs complete
	bool enx[VECTOR_SIZE];
	#pragma HLS ARRAY_PARTITION variable=enx complete

	batch_type vptrbaseoffset_kvs = globalparams.BASEOFFSETKVS_VERTEXPTR + (globalparams.ACTSPARAMS_SRCVOFFSET / VECTOR_SIZE);
	batch_type voffset_kvs = sweepparams.source_partition * reducebuffersz * FETFACTOR;

	fetchmessage.chunksize_kvs = edgessize_kvs;
	fetchmessage.nextoffset_kvs = -1;
	
	unsigned int GraphAlgo = globalparams.ALGORITHMINFO_GRAPHALGORITHMID;
	unsigned int GraphAlgoClass = globalparams.ALGORITHMINFO_GRAPHALGORITHMCLASS;
	
	keyvalue_t edata[VECTOR_SIZE];
	#pragma HLS ARRAY_PARTITION variable=edata complete
	value_t tempbuffer[VECTOR2_SIZE][SOURCEBLOCKRAM_SIZE]; // OPTIMIZEME
	#pragma HLS array_partition variable = tempbuffer
	keyvalue_capsule_t localcapsule[MAX_NUM_PARTITIONS];
	
	buffer_type chunk_size = UTIL{{context['id']}}_getchunksize_kvs(edgessize_kvs, travstate, 0);
	for(unsigned int t=0; t<VECTOR2_SIZE; t++){ loadcount[t] = 0; }
	buffer_type maxsize_kvs[2]; 
	buffer_type height_kvs = 0;
	
	bool _readedgeblock = true;
	bool _readedgeblockstats = true;
	bool _processedgeblockstats = true;
	bool _processedgeblock = true;
	bool _process_and_reduce_edgeblock = false; // true;
	
	// read edge block
	if(_readedgeblock == true){
	#ifdef DEBUGME_PROCESSEDGES2
	cout<<"processedges2: FIRST: offset_kvs: "<<offset_kvs<<", loffset_kvs: "<<loffset_kvs<<", goffset_kvs: "<<goffset_kvs<<endl;
	#endif 
	PROCESSBUFFERPARTITIONS_LOOP1: for(buffer_type i=0; i<chunk_size; i++){
	#pragma HLS PIPELINE II=1
		#ifdef _WIDEWORD
		{%for v in context['VECTOR2_SIZE_seq']%}
		tempbuffer[{{v}}][i] = edges[offset_kvs + i].range({{((v + 1) * 32) - 1}}, {{v * 32}}); 
		{%endfor%}
		#else 
		{%for v in context['VECTOR_SIZE_seq']%}
		tempbuffer[{{2*v}}][i] = edges[offset_kvs + i].data[{{v}}].key; 
		tempbuffer[{{2*v+1}}][i] = edges[offset_kvs + i].data[{{v}}].value;	
		{%endfor%}
		#endif
		
		#ifdef DEBUGME_PROCESSEDGES2
		{%for v in context['VECTOR_SIZE_seq']%}
		if(i<4){ cout<<"processedges2: +++ sample edge: edges["<<offset_kvs + i<<"].data[{{v}}].key: "<<edges[offset_kvs + i].data[{{v}}].key<<", edges["<<offset_kvs + i<<"].data[{{v}}].value: "<<edges[offset_kvs + i].data[{{v}}].value<<endl; }
		{%endfor%}
		#endif 
	}
	}	
	
	// read edge block stats 
	if(_readedgeblockstats == true){
	PROCESSBUFFERPARTITIONS_LOOP2: for(unsigned int p=0; p<NUM_PARTITIONS; p++){ localcapsule[p].key = 0; localcapsule[p].value = tempbuffer[p][0]; }
	if(true || localcapsule[NUM_PARTITIONS-1].value != 8888888){ // FIXME. // localcapsule[NUM_PARTITIONS-1].key + localcapsule[NUM_PARTITIONS-1].value >= SOURCEBLOCKRAM_SIZE * VECTOR2_SIZE
		#ifdef _XXX_
		cout<<"processedges2: ERROR: localcapsule[NUM_PARTITIONS-1].value != 8888888. EXITING... "<<endl; actsutilityobj->printkeyvalues("processandbuffer.localcapsule", (keyvalue_t *)localcapsule, NUM_PARTITIONS); exit(EXIT_FAILURE);
		#endif 
		unsigned int modelsz = chunk_size / NUM_PARTITIONS; // mock it
		for(unsigned int i=0; i<NUM_PARTITIONS; i++){ localcapsule[i].key = (i * modelsz) * VECTOR2_SIZE; localcapsule[i].value = modelsz * VECTOR2_SIZE; } // FIXME.
	} else {
		localcapsule[NUM_PARTITIONS-1].value = 0;
	}
	PROCESS{{context['id']}}_calculateoffsets(localcapsule);
	#ifdef _DEBUGMODE_CHECKS
	actsutilityobj->checkoutofbounds("processedges2(12)::DEBUG CODE 125::1", (chunk_size * VECTOR2_SIZE), localcapsule[NUM_PARTITIONS-2].value, localcapsule[NUM_PARTITIONS-2].value, NAp, NAp);
	#endif
	#ifdef DEBUGME_PROCESSEDGES2
	actsutilityobj->printkeyvalues("processedges2(14).localcapsule", (keyvalue_t *)localcapsule, NUM_PARTITIONS); 
	cout<<"processedges2(15): "<<"chunk_size * VECTOR2_SIZE: "<<chunk_size * VECTOR2_SIZE<<", edgessize_kvs * VECTOR2_SIZE: "<<edgessize_kvs * VECTOR2_SIZE<<", WORKBUFFER_SIZE * VECTOR2_SIZE: "<<(WORKBUFFER_SIZE * VECTOR2_SIZE)<<endl;
	#endif
	}
	
	// process edge block stats 
	if(_processedgeblockstats == true){
	maxsize_kvs[0] = 0; maxsize_kvs[1] = 0;
	unsigned int _poff = 0;
	PROCESSBUFFERPARTITIONS_LOOP3: for(unsigned int cid=0; cid<2; cid++){
		PROCESSBUFFERPARTITIONS_LOOP3B: for(partition_type p=0; p<NUM_PARTITIONS/2; p++){
		#pragma HLS PIPELINE II=2
			unsigned int ssize_kvs = localcapsule[_poff + p].value / VECTOR2_SIZE;
			if(maxsize_kvs[cid] < ssize_kvs){ maxsize_kvs[cid] = ssize_kvs; }
		}
		_poff += NUM_PARTITIONS/2;
	}
	height_kvs = (localcapsule[NUM_PARTITIONS-1].key + localcapsule[NUM_PARTITIONS-1].value) / VECTOR2_SIZE;

	for(partition_type p=0; p<NUM_PARTITIONS; p++){
		localcapsule[p].key = localcapsule[p].key / VECTOR2_SIZE;
		localcapsule[p].value = localcapsule[p].value / VECTOR2_SIZE;
	}
	}
	
	// process edge block
	if(_processedgeblock == true){
	buffer_type psetoffset=0;
	PROCESSBUFFERPARTITIONS_LOOP4: for(buffer_type capsule_offset=0; capsule_offset<NUM_PARTITIONS; capsule_offset+=VECTOR_SIZE){ // processing next capsule set
		unsigned int mmaxsz_kvs = maxsize_kvs[capsule_offset / VECTOR_SIZE];
		PROCESSBUFFERPARTITIONS_LOOP4B: for(buffer_type block_offset=0; block_offset<VECTOR2_SIZE; block_offset+=VECTOR_SIZE){ // processing next block set 
			PROCESSBUFFERPARTITIONS_LOOP4C: for(unsigned int r=0; r<VECTOR_SIZE; r++){ // interchanging columns
				PROCESSBUFFERPARTITIONS_LOOP4D: for(buffer_type i=0; i<mmaxsz_kvs; i++){ // processing a column data
				#pragma HLS LOOP_TRIPCOUNT min=0 max=analysis_loopcount avg=analysis_loopcount
				#pragma HLS PIPELINE II=1
					#ifdef _DEBUGMODE_CHECKS2
					actsutilityobj->checkoutofbounds("readandprocess2(12)::DEBUG CODE 12::1", i, SOURCEBLOCKRAM_SIZE, NAp, NAp, NAp);
					#endif
					// read edges . FIXME
					PROCESS{{context['id']}}_GetXYLayoutV(r, depths, 0);
					#ifdef _DEBUGMODE_CHECKS3
					{%for v in context['VECTOR_SIZE_seq']%}
					actsutilityobj->checkoutofbounds("readandprocess2(13)::DEBUG CODE 13::1", capsule_offset + depths[{{v}}], NUM_PARTITIONS, capsule_offset, depths[{{v}}], NAp);
					{%endfor%} 
					#endif

					{%for v in context['VECTOR_SIZE_seq']%}
					unsigned int tdepth{{v}} = capsule_offset + depths[{{v}}];
					{%endfor%} 	
					{%for v in context['VECTOR_SIZE_seq']%}
					if(i < localcapsule[tdepth{{v}}].value){ enx[{{v}}] = true; } else { enx[{{v}}] = false; }
					{%endfor%} 
					
					{%for v in context['VECTOR_SIZE_seq']%}
					d_kvs[{{v}}] = localcapsule[tdepth{{v}}].key + i; 	
					{%endfor%} 	
					{%for v in context['VECTOR_SIZE_seq']%}
					if(d_kvs[{{v}}] < height_kvs){ E[{{v}}] = tempbuffer[block_offset + {{v}}][d_kvs[{{v}}]]; } else { E[{{v}}] = 555; }	
					{%endfor%} 	
					
					// re-arrange 
					// PROCESS{{context['id']}}_RearrangeLayoutV(r, E, E2);
					
					// parse
					// {%for v in context['VECTOR_SIZE_seq']%}
					// parsededge_t parsed_edge{{v}} = PROCESS{{context['id']}}_PARSEEDGE(E2[{{v}}]); // FIXME.
					// edata[{{v}}].value = parsed_edge{{v}}.incr; // source info
					// edata[{{v}}].key = parsed_edge{{v}}.dstvid;	
					// {%endfor%}
					
					/////
					// re-arrange 
					// PROCESS{{context['id']}}_RearrangeLayoutV(r, E, E2);
					
					// parse
					{%for v in context['VECTOR_SIZE_seq']%}
					parsededge_t parsed_edge{{v}} = PROCESS{{context['id']}}_PARSEEDGE(E[{{v}}]); // FIXME.
					edata[{{v}}].value = parsed_edge{{v}}.incr; // source info
					edata[{{v}}].key = parsed_edge{{v}}.dstvid;	
					{%endfor%}
					/////
					
					// process
					{%for v in context['VECTOR_SIZE_seq']%}
					if(E[{{v}}] == INVALIDDATA){ enx[{{v}}] = false; }
					PROCESS{{context['id']}}_processvector(enx[{{v}}], edata[{{v}}].value, edata[{{v}}], vbuffer[capsule_offset + {{v}}], buffer[{{v}}], &loadcount[{{v}}], GraphAlgoClass, globalparams);
					{%endfor%}
					#ifdef _DEBUGMODE_CHECKS2
					{%for v in context['VECTOR_SIZE_seq']%}
					actsutilityobj->checkoutofbounds("readandprocess2(14)::DEBUG CODE 14::1", loadcount[{{v}}], SOURCEBLOCKRAM_SIZE, NAp, NAp, NAp);
					{%endfor%} 
					#endif
				}
			}
		}
	}
	}
	/* // CRITICAL REMOVEME. //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	if(_processedgeblock == true){
		for(buffer_type i=0; i<chunk_size; i++){ // processing next block set 
			#pragma HLS LOOP_TRIPCOUNT min=0 max=analysis_loopcount avg=analysis_loopcount
			#pragma HLS PIPELINE II=1
			#ifdef _DEBUGMODE_CHECKS2
			actsutilityobj->checkoutofbounds("readandprocess2(12)::DEBUG CODE 12::1", i, SOURCEBLOCKRAM_SIZE, NAp, NAp, NAp);
			#endif
			
			{%for v in context['VECTOR_SIZE_seq']%}
			buffer[{{v}}][2*i].key = tempbuffer[{{v}}][i];
			buffer[{{v}}][2*i].value = 7;
			{%endfor%}
			{%for v in context['VECTOR_SIZE_seq']%}
			buffer[{{v}}][2*i+1].key = tempbuffer[{{8+v}}][i];
			buffer[{{v}}][2*i+1].value = 7;
			{%endfor%}
	}
	} // CRITICAL REMOVEME.
	// CRITICAL REMOVEME. ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// */
	
	// process edge block (primitive)
	#ifdef RANDOMVERTEXISACTIVE_ALGORITHM
	if(_process_and_reduce_edgeblock == true){
	unsigned int C = 0; // FIXM.
	unsigned int loadcount2 = 0;
	for(buffer_type i=0; i<chunk_size; i++){
		for(vector_type v=0; v<VECTOR2_SIZE; v++){
			uint32_type edge = tempubuffer[i][v];
			
			parsededge_t parsed_edge = PROCESS{{context['id']}}_PARSEEDGE(edge); 
			unsigned int srcvid = parsed_edge.incr; // source info FIXME.
			unsigned int dstvid = parsed_edge.dstvid;	
			
			bool en = true; if(edge != INVALIDDATA && edge != INVALIDDATA){ en = true; } else { en = false; }
			
			vmdata_t src_vmdata;
			if(en == true){
				src_vmdata = MEMCA{{context['id']}}_READFROMBUFFER_VDATAWITHVMASK(loc, vbuffer, 0); 
				if(src_vmdata.vmask == 1){
					value_t res = PROCESS{{context['id']}}_processfunc(src_vmdata.vdata, 1, globalparams.ALGORITHMINFO_GRAPHALGORITHMID);
					keyvalue_t mykeyvalue; mykeyvalue.key = dstvid; mykeyvalue.value = res;
					
					uint32_type dst_vmdata = MEMCA{{context['id']}}_READDATAFROMDRAM(dstvid, kvdram, globalparams.BASEOFFSETKVS_DESTVERTICESDATA, 0); 
					uint32_type new_vprop = REDUCE{{context['id']}}_reducefunc(GETVDATA(dst_vmdata), res, globalparams.ALGORITHMINFO_GRAPHITERATIONID, globalparams.ALGORITHMINFO_GRAPHALGORITHMID); 
					if(en == true && new_vprop != GETVDATA(dst_vmdata)){ APPENDMDATA(new_vprop, 1); }
					
					MEMCA{{context['id']}}_WRITEDATATODRAM(dstvid, kvdram, globalparams.BASEOFFSETKVS_DESTVERTICESDATA, new_vprop); 
				}
			}
		}
	}
	}
	#endif 
	
	// for(unsigned int t=0; t<VECTOR_SIZE; t++){ cout<<"--- loadcount["<<t<<"]: "<<loadcount[t]<<endl; }
	// actsutilityobj->printglobalvars();
	// exit(EXIT_SUCCESS); ////
	
	fetchmessage.chunksize_kvs = chunk_size * 2; // loadcount; // CRITICAL FIXME
	// cout<<"classname__processedges2 SUCCESSFULL HERE...."<<endl;
	// exit(EXIT_SUCCESS); ////
	return fetchmessage;
}











