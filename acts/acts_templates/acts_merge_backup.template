#include "acts_merge.h"
using namespace std;

#ifdef SW
acts_merge::acts_merge(){ 
	actsutilityobj = new actsutility(); 
	acts_utilobj = new acts_util(); 
	processedges_unslicedgraphobj = new processedges_unslicedgraph();
	processedges_slicedgraphobj = new processedges_slicedgraph();
	partitionupdatesobj = new partitionupdates();
	reduceupdatesobj = new reduceupdates();
	mem_accessobj = new mem_access();
	actsobj = new acts();
	mergeobj = new merge_vtxs();
}
acts_merge::~acts_merge(){}
#endif

value_t 
	#ifdef SW 
	acts_merge::
	#endif 
MERGE_applyfunc(value_t vtemp, value_t res, unsigned int GraphIter, unsigned int GraphAlgo){
	value_t temp = 0;
	if(GraphAlgo == PAGERANK){
		// temp = vtemp + res;
		// temp = 0.5 + (1 - 0.5)*res / vdeg; // IDEAL
		temp = res;
	} else if(GraphAlgo == BFS){
		temp = res;
	} else if(GraphAlgo == SSSP){
		temp = acts_utilobj->UTIL_amin(vtemp, res);
	} else {
		temp = NAp;
	}
	return temp;
}

void // 
	#ifdef SW 
	acts_merge::
	#endif 
MERGE_readvdata(bool_type enable1, uint512_dt * kvdram, batch_type dramoffset_kvs, keyvalue_vbuffer_t buffer[VECTOR_SIZE][BLOCKRAM_SIZE], batch_type bufferoffset_kvs, buffer_type size_kvs){
	#pragma HLS function_instantiate variable=kvdram
	if(enable1 == OFF){ return; }
	analysis_type analysis_loopcount = BLOCKRAM_SIZE;
		
	READVDATA_LOOP: for (buffer_type i=0; i<size_kvs; i++){
	#pragma HLS LOOP_TRIPCOUNT min=0 max=analysis_loopcount avg=analysis_loopcount
	#pragma HLS PIPELINE II=1
		{%for v in context['VECTOR_SIZE_seq']%}
		keyvalue_t mykeyvalue{{v}};
		{%endfor%}
		
		#ifdef _WIDEWORD
		{%for v in context['VECTOR_SIZE_seq']%}
		mykeyvalue{{v}}.key = kvdram[dramoffset_kvs + i].range({{32 * ((v * 2) + 1) - 1}}, {{(v * 2) * 32}}); 
		mykeyvalue{{v}}.value = kvdram[dramoffset_kvs + i].range({{32 * (((v * 2) + 1) + 1) - 1}}, {{(v * 2 + 1) * 32}}); 
		{%endfor%}
		#else 
		{%for v in context['VECTOR_SIZE_seq']%}
		mykeyvalue{{v}}.key = kvdram[dramoffset_kvs + i].data[{{v}}].key; 
		mykeyvalue{{v}}.value = kvdram[dramoffset_kvs + i].data[{{v}}].value; 
		{%endfor%}
		#endif
		
		{%for v in context['VECTOR_SIZE_seq']%}
		buffer[{{v}}][bufferoffset_kvs + i] = acts_utilobj->UTIL_GETKV2(mykeyvalue{{v}});
		{%endfor%}
		
		#ifdef _DEBUGMODE_STATS
		actsutilityobj->globalstats_countkvsread(VECTOR_SIZE);
		#endif
	}
	return;
}

void // 
	#ifdef SW 
	acts_merge::
	#endif 
MERGE_writevdata(bool_type enable1, uint512_dt * kvdram, batch_type dramoffset_kvs, keyvalue_vbuffer_t buffer[VECTOR_SIZE][BLOCKRAM_SIZE], batch_type bufferoffset_kvs, buffer_type size_kvs){
	#pragma HLS function_instantiate variable=kvdram
	if(enable1 == OFF){ return; }
	analysis_type analysis_loopcount = BLOCKRAM_SIZE;

	WRITEVDATA_LOOP: for (buffer_type i=0; i<size_kvs; i++){
		#pragma HLS LOOP_TRIPCOUNT min=0 max=analysis_loopcount avg=analysis_loopcount
		#pragma HLS PIPELINE II=1
			{%for v in context['VECTOR_SIZE_seq']%}
			keyvalue_t keyvalue{{v}} = acts_utilobj->UTIL_GETKV2(buffer[{{v}}][i]); 
			{%endfor%}
			
			#ifdef _WIDEWORD
			{%for v in context['VECTOR_SIZE_seq']%}
			kvdram[dramoffset_kvs + i].range({{32 * ((v * 2) + 1) - 1}}, {{(v * 2) * 32}}) = keyvalue{{v}}.key;
			kvdram[dramoffset_kvs + i].range({{32 * (((v * 2) + 1) + 1) - 1}}, {{(v * 2 + 1) * 32}}) = keyvalue{{v}}.value;
			{%endfor%}
			#else
			{%for v in context['VECTOR_SIZE_seq']%}
			kvdram[dramoffset_kvs + i].data[{{v}}].key = keyvalue{{v}}.key; 
			kvdram[dramoffset_kvs + i].data[{{v}}].value = keyvalue{{v}}.value;
			{%endfor%}
			#endif
	}
	return;
}

{%for n in context['T_seq']%}
{%if(n>=1)%}
void
	#ifdef SW 
	acts_merge::
	#endif
MERGE_merge{{n}}({%for i in context['T_seq']%}{%if(i<n)%}uint512_dt * kvdram{{i}},{%endif%}{%endfor%} uint512_dt * vdram){
	#pragma HLS INLINE
	
	#if defined(_DEBUGMODE_KERNELPRINTS2)
	cout<<">>> ====================== ACTS MERGE Launched... size: "<<SYNC_GETKEYENTRY(kvdram0[BASEOFFSET_MESSAGESDATA_KVS + MESSAGES_SIZE_RUN], 0)<<endl; 
	#endif
	
	globalparams_t globalparams = acts_utilobj->UTIL_getglobalparams(kvdram0);
	globalparams_t globalparamsv = acts_utilobj->UTIL_getglobalparams(vdram);
	batch_type num_source_partitions = acts_utilobj->UTIL_get_num_source_partitions(globalparams.ACTSPARAMS_TREEDEPTH);
	
	buffer_type reducebuffersz = globalparams.SIZE_REDUCE / 2;
	
	{%for i in context['T_seq']%}
	{%if(i<n)%}
	keyvalue_vbuffer_t vbuffer{{i}}[VECTOR_SIZE][BLOCKRAM_SIZE];
	#pragma HLS array_partition variable = vbuffer{{i}}
	{%endif%}
	{%endfor%}
	keyvalue_vbuffer_t refbuffer[VECTOR_SIZE][BLOCKRAM_SIZE];
	#pragma HLS array_partition variable = refbuffer
	keyvalue_vbuffer_t merge_buffer[VECTOR_SIZE][BLOCKRAM_SIZE];
	#pragma HLS array_partition variable = merge_buffer
	
	unsigned int vreadoffsetpp0_kvs = 0;
	unsigned int vwriteoffsetpp0_kvs = 0;
	
	unsigned int total_num_blocks = (globalparams.SIZE_BATCHRANGE / CONFIGSPLITDESTVTXS_NUMWs) / BLOCKRAM_SIZE;

	TOPKERNELSYNC_MAINLOOP: for(batch_type iterationidx=0; iterationidx<total_num_blocks; iterationidx+=1){ // total_num_blocks
		#if defined(_DEBUGMODE_KERNELPRINTS3)
		cout<<">>> ACTS MERGE: merging block: "<<iterationidx<<" (of "<<total_num_blocks<<" total blocks)"<<endl; 
		#endif
	
		{%for i in context['T_seq']%}
		{%if(i<n)%}
		MERGE_readvdata(ON, kvdram{{i}}, globalparams.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffsetpp0_kvs, vbuffer{{i}}, 0, reducebuffersz/CONFIGSPLITDESTVTXS_NUMWs);
		{%endif%}
		{%endfor%}
		#ifdef _DEBUGMODE_KERNELPRINTS_TRACE3
		// MERGE_readvdata(ON, vdram, globalparamsv.BASEOFFSETKVS_DESTVERTICESDATA + vreadoffsetpp0_kvs, refbuffer, 0, reducebuffersz);
		MERGE_readvdata(ON, vdram, globalparamsv.BASEOFFSETKVS_DESTVERTICESDATA + vwriteoffsetpp0_kvs, refbuffer, 0, reducebuffersz);
		#endif 
		
		unsigned int i_index = 0;
		unsigned int v_buffer_index = 0;
		{%for v in context['VECTOR_SIZE_seq']%} 
		keyvalue_t udata{{v}};
		keyvalue_t vdata{{v}};
		keyvalue_t res{{v}}; 
		{%endfor%}
		for(unsigned int i=0; i<?; i++){
			for(unsigned int k=0; k<reducebuffersz/CONFIGSPLITDESTVTXS_NUMWs; k++){
				{%for i in context['T_seq']%}
				{%if(i<n)%}
					{%for v in context['VECTOR_SIZE_seq']%}
					vdata{{v}} = acts_utilobj->UTIL_GETKV2(vbuffer{{i}}[{{v}}][v_buffer_index]);
					merge_buffer[{{v}}][i_index] = acts_utilobj->UTIL_GETKV2(vdata{{v}});
					
					#ifdef _DEBUGMODE_KERNELPRINTS_TRACE3
					udata{{v}} = acts_utilobj->UTIL_GETKV2(refbuffer[{{v}}][i_index]);
					res{{v}}.key = MERGE_applyfunc(udata{{v}}.key, vdata{{v}}.key, globalparams.ALGORITHMINFO_GRAPHITERATIONID, globalparams.ALGORITHMINFO_GRAPHALGORITHMID);
					res{{v}}.value = MERGE_applyfunc(udata{{v}}.value, vdata{{v}}.value, globalparams.ALGORITHMINFO_GRAPHITERATIONID, globalparams.ALGORITHMINFO_GRAPHALGORITHMID);
					if(res{{v}}.key != udata{{v}}.key){ cout<<"acts_merge::ACTIVE VTX SEEN(1) @ (vid: "<<vwriteoffsetpp0_kvs*VECTOR_SIZE*2 + ({{v}}*globalparams.SIZE_REDUCE) + 2*i_index<<", vbuffer{{i}}[{{v}}]["<<v_buffer_index<<"].key: "<<vbuffer{{i}}[{{v}}][v_buffer_index].key<<", refbuffer[{{v}}]["<<i_index<<"].key: "<<refbuffer[{{v}}][i_index].key<<endl; }
					if(res{{v}}.value != udata{{v}}.value){ cout<<"acts_merge::ACTIVE VTX SEEN(1) @ (vid: "<<vwriteoffsetpp0_kvs*VECTOR_SIZE*2 + ({{v}}*globalparams.SIZE_REDUCE) + 2*i_index + 1<<", vbuffer{{i}}[{{v}}]["<<v_buffer_index<<"].value: "<<vbuffer{{i}}[{{v}}][v_buffer_index].value<<", refbuffer[{{v}}]["<<i_index<<"].value: "<<refbuffer[{{v}}][i_index].value<<endl; }					
					#endif
					{%endfor%}
				cout<<">>> ACTS MERGE: i_index: "<<i_index<<", v_buffer_index: "<<v_buffer_index<<", reducebuffersz/CONFIGSPLITDESTVTXS_NUMWs: "<<reducebuffersz/CONFIGSPLITDESTVTXS_NUMWs<<endl;
				i_index += 1;
				{%endif%}
				{%endfor%}
				v_buffer_index += 1;
			}
			exit(EXIT_SUCCESS); //
			MERGE_writevdata(ON, vdram, globalparamsv.BASEOFFSETKVS_SRCVERTICESDATA + vwriteoffsetpp0_kvs, merge_buffer, 0, reducebuffersz);
			vwriteoffsetpp0_kvs += i_index;
			vreadoffsetpp0_kvs += v_buffer_index;
			#if defined(_DEBUGMODE_KERNELPRINTS3)
			cout<<">>> ACTS MERGE: merging finished: vreadoffsetpp0: "<<vreadoffsetpp0_kvs*VECTOR2_SIZE<<", v_buffer_index: "<<v_buffer_index<<", vwriteoffsetpp0: "<<vwriteoffsetpp0_kvs*VECTOR2_SIZE<<", i_index: "<<i_index<<endl;
			#endif
		}
		
		#ifdef _DEBUGMODE_KERNELPRINTS_TRACE
		for(unsigned int k=0; k<reducebuffersz; k++){
			{%for v in context['VECTOR_SIZE_seq']%} 
			udata{{v}} = acts_utilobj->UTIL_GETKV2(refbuffer[{{v}}][k]);
			if(merge_buffer[{{v}}][k].key != udata{{v}}.key){ cout<<"acts_merge::ACTIVE VTX SEEN(2) @ (vid: "<<vwriteoffsetpp0_kvs*VECTOR_SIZE*2 + ({{v}}*globalparams.SIZE_REDUCE) + 2*k<<", merge_buffer[{{v}}]["<<k<<"].key: "<<merge_buffer[{{v}}][k].key<<endl; }
			if(merge_buffer[{{v}}][k].value != udata{{v}}.value){ cout<<"acts_merge::ACTIVE VTX SEEN(2) @ (vid: "<<vwriteoffsetpp0_kvs*VECTOR_SIZE*2 + ({{v}}*globalparams.SIZE_REDUCE) + 2*k + 1<<", merge_buffer[{{v}}]["<<k<<"].value: "<<merge_buffer[{{v}}][k].value<<endl; }
			{%endfor%}
		}
		#endif
		
		// MERGE_writevdata(ON, vdram, globalparamsv.BASEOFFSETKVS_DESTVERTICESDATA + vwriteoffsetpp0_kvs, merge_buffer, 0, reducebuffersz);
		MERGE_writevdata(ON, vdram, globalparamsv.BASEOFFSETKVS_SRCVERTICESDATA + vwriteoffsetpp0_kvs, merge_buffer, 0, reducebuffersz);
		vwriteoffsetpp0_kvs += i_index;
		vreadoffsetpp0_kvs += v_buffer_index;
		#if defined(_DEBUGMODE_KERNELPRINTS3)
		cout<<">>> ACTS MERGE: merging finished: vreadoffsetpp0: "<<vreadoffsetpp0_kvs*VECTOR2_SIZE<<", v_buffer_index: "<<v_buffer_index<<", vwriteoffsetpp0: "<<vwriteoffsetpp0_kvs*VECTOR2_SIZE<<", i_index: "<<i_index<<endl;
		#endif
		// exit(EXIT_SUCCESS);
	}
	#if defined(_DEBUGMODE_KERNELPRINTS3)
	cout<<">>> ACTS MERGE: merging finished: vreadoffsetpp0: "<<vreadoffsetpp0_kvs * VECTOR2_SIZE<<", vwriteoffsetpp0: "<<vwriteoffsetpp0_kvs * VECTOR2_SIZE<<endl;
	#endif 
	exit(EXIT_SUCCESS);
	return;
}
{%endif%}
{%endfor%}
