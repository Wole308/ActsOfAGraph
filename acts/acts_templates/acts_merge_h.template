#ifndef ACTSMERGE_H
#define ACTSMERGE_H
#include "../../include/config_params.h"
#include "../../include/common.h"
#include "../include/actscommon.h"
#ifdef SW 
#include <string>
#include <string.h>
#include <iostream>
#include <vector>
#include <string.h>
#include <stdio.h>
#include <ctime>
#include <functional>
#include <sys/time.h>
#include <time.h>
#include <stdlib.h>
#include <iomanip>
#include <cmath>
#include <fstream>
#endif 
#ifdef SW 
#include "../../src/utility/utility.h"
#include "../../acts/actsutility/actsutility.h"
#endif
#include "processedgesu.h"
#include "processedges_splitdstvxs.h"
#include "partitionupdates.h"
#include "reduceupdates.h"
#include "mem_access.h"
#include "acts_util.h"
#include "acts.h"
#include "mydebug.h"
using namespace std;

class acts_merge {
public:
	acts_merge(mydebug * _mydebugobj);
	~acts_merge();
	
	// for usrcv udstv 
	unsigned int MERGE_amin(unsigned int val1, unsigned int val2);
	value_t MERGE_mergefunc(value_t value1, value_t value2, unsigned int GraphAlgo);
	
	{%for n in context['T_seq']%}
	{%if(n>=1)%}
	void MERGE_readandreplicate{{n}}vdata(bool_type enable, uint512_dt * vdram, batch_type dramoffset_kvs, {%for i in context['T_seq']%}{%if(i<n)%}keyvalue_vbuffer_t buffer{{i}}[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],{%endif%}{%endfor%} unsigned int begincol, batch_type bufferoffset_kvs, buffer_type size_kvs, globalparams_t globalparams);
	{%endif%}
	{%endfor%}
	
	{%for n in context['T_seq']%}
	{%if(n>=1)%}
	void MERGE_merge{{n}}andsavevdata(bool_type enable, uint512_dt * vdram, {%for i in context['T_seq']%}{%if(i<n)%}keyvalue_vbuffer_t vbuffer{{i}}[VDATA_PACKINGSIZE][BLOCKRAM_SIZE],{%endif%}{%endfor%} unsigned int begincol, batch_type bufferoffset_kvs, unsigned int dramoffset_kvs); 
	{%endif%}
	{%endfor%}

private:
	#ifdef SW
	actsutility * actsutilityobj;
	acts_util * acts_utilobj;
	processedgesu * processedgesobj;
	processedges_splitdstvxs * processedges_splitdstvxsobj;
	partitionupdates * partitionupdatesobj;
	reduceupdates * reduceupdatesobj;
	mem_access * mem_accessobj;
	acts * actsobj;
	mydebug * mydebugobj;
	#endif
};
#endif 







