#ifndef ACTS_COMMON_H
#define ACTS_COMMON_H
#include "../../include/config_params.h"
#include "../../include/common.h"
#if (defined(HW) || defined(SWEMU))
#include <string.h>
#include <cmath>
#include <ap_int.h>
#endif

// buffer parameters
#define NFACTOR 4

#define PADDEDDESTBUFFER_SIZE ((1 << SRAMSZ_POW) / VECTOR_SIZE)

#define SRCBUFFER_SIZE ((PADDEDDESTBUFFER_SIZE - NUM_PARTITIONS) / NFACTOR)

#define PADDEDBUFFER_SIZE PADDEDDESTBUFFER_SIZE

#define CAPSULEBUFFER_SIZE 512

#define APPLYVERTEXBUFFERSZ (1 << (BATCH_RANGE_POW - (TREE_DEPTH * NUM_PARTITIONS_POW)))
#define APPLYVERTEXBUFFERSZ_KVS (APPLYVERTEXBUFFERSZ / VECTOR_SIZE)

#define APPLYVERTEXBUFFERSZ2 (1 << (BATCH_RANGE2_POW - (TREE_DEPTH2 * NUM_PARTITIONS_POW)))
#define APPLYVERTEXBUFFERSZ2_KVS (APPLYVERTEXBUFFERSZ2 / VECTOR_SIZE)

// global parameters
#define NUMLASTLEVELPARTITIONS (1 << (NUM_PARTITIONS_POW * TREE_DEPTH))
#define KVSTATS_SIZE (VECTOR_SIZE + (NUMLASTLEVELPARTITIONS * TREE_DEPTH)) 
#define KVDRAMPADDING (((DRAMBATCHFACTOR * KVDATA_BATCHSIZE_KVS) / (SRCBUFFER_SIZE * NFACTOR)) * (NUM_PARTITIONS * VECTOR_SIZE)) * 16 

// dram sizes
#define KVDRAMBUFFERSZ 0 //
#define KVDRAMBUFFERSZ_KVS (KVDRAMBUFFERSZ / VECTOR_SIZE)

#define KVDRAMSZ ((DRAMBATCHFACTOR * KVDATA_BATCHSIZE) + KVDRAMPADDING)
#define KVDRAMSZ_KVS (KVDRAMSZ / VECTOR_SIZE)

#define KVDRAMWORKSPACESZ KVDRAMSZ
#define KVDRAMWORKSPACESZ_KVS (KVDRAMWORKSPACESZ / VECTOR_SIZE)

#define CAPSULESZ_KVS (((KVDRAMSZ_KVS / CAPSULEBUFFER_SIZE) * TREE_DEPTH) * 4) // FIXME. '4' is extra space.
#define CAPSULESZ (CAPSULESZ_KVS * VECTOR_SIZE)

#define MESSAGESDRAMSZ 1024
#define STATSDRAMSZ KVSTATS_SIZE
#define CAPSULEMETADATADRAMSZ (NUMLASTLEVELPARTITIONS * TREE_DEPTH)

#define KVSOURCEDRAMSZ (KVDRAMBUFFERSZ + KVDRAMSZ + KVDRAMWORKSPACESZ + CAPSULESZ)
#define KVSOURCEDRAMSZ_KVS (KVSOURCEDRAMSZ / VECTOR_SIZE)
#define KVSTATSDRAMSZ (MESSAGESDRAMSZ + STATSDRAMSZ + CAPSULEMETADATADRAMSZ)
#define LASTLEVELPARTITIONPADDING (NUM_PARTITIONS * 2)
#define KVBUFFERPADDING (NUM_PARTITIONS * 2)
#define KVSOURCEPADDING_KVS 0
#define PADDEDKVSOURCEDRAMSZ (KVSOURCEDRAMSZ + 4*KVSOURCEPADDING_KVS)
#define PADDEDKVSOURCEDRAMSZ_KVS (PADDEDKVSOURCEDRAMSZ / VECTOR_SIZE)

// base addresses
#define BASEOFFSET_KVDRAMBUFFER 0 //
#define BASEOFFSET_KVDRAMBUFFER_KVS (BASEOFFSET_KVDRAMBUFFER / VECTOR_SIZE) 

#define BASEOFFSET_KVDRAM (BASEOFFSET_KVDRAMBUFFER + KVDRAMBUFFERSZ)
#define BASEOFFSET_KVDRAM_KVS (BASEOFFSET_KVDRAM / VECTOR_SIZE)

#define BASEOFFSET_KVDRAMWORKSPACE (BASEOFFSET_KVDRAM + KVDRAMSZ)
#define BASEOFFSET_KVDRAMWORKSPACE_KVS (BASEOFFSET_KVDRAMWORKSPACE / VECTOR_SIZE)

#define BASEOFFSET_CAPSULES (BASEOFFSET_KVDRAMWORKSPACE + KVDRAMWORKSPACESZ)
#define BASEOFFSET_CAPSULES_KVS (BASEOFFSET_CAPSULES / VECTOR_SIZE)

#define BASEOFFSET_VERTICESDATA 0
#define BASEOFFSET_VERTICESDATA_KVS (BASEOFFSET_VERTICESDATA / VECTOR_SIZE)

#define BASEOFFSET_MESSAGESDRAM 0
#define BASEOFFSET_MESSAGESDRAM_KVS (BASEOFFSET_MESSAGESDRAM / VECTOR_SIZE) // not used

#define BASEOFFSET_STATSDRAM (BASEOFFSET_MESSAGESDRAM + MESSAGES_SIZE)
#define BASEOFFSET_STATSDRAM_KVS (BASEOFFSET_STATSDRAM / VECTOR_SIZE) // not used

#define BASEOFFSET_CAPSULEMETADATA (BASEOFFSET_STATSDRAM + CAPSULEMETADATADRAMSZ)

#endif



