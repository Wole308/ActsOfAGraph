// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1.3
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "getpartition.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic getpartition::ap_const_logic_1 = sc_dt::Log_1;
const bool getpartition::ap_const_boolean_1 = true;
const sc_lv<32> getpartition::ap_const_lv32_2 = "10";
const sc_lv<32> getpartition::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> getpartition::ap_const_lv32_1A = "11010";
const sc_logic getpartition::ap_const_logic_0 = sc_dt::Log_0;

getpartition::getpartition(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_add_ln174_fu_56_p2);
    sensitive << ( sub_ln174_2_fu_50_p2 );

    SC_METHOD(thread_ap_ready);

    SC_METHOD(thread_ap_return);
    sensitive << ( hashedval_fu_62_p2 );

    SC_METHOD(thread_hashedval_fu_62_p2);
    sensitive << ( sub_ln174_fu_32_p2 );
    sensitive << ( add_ln174_fu_56_p2 );

    SC_METHOD(thread_shl_ln174_fu_38_p2);
    sensitive << ( currentLOP );

    SC_METHOD(thread_sub_ln174_1_fu_44_p2);
    sensitive << ( shl_ln174_fu_38_p2 );

    SC_METHOD(thread_sub_ln174_2_fu_50_p2);
    sensitive << ( currentLOP );
    sensitive << ( sub_ln174_1_fu_44_p2 );

    SC_METHOD(thread_sub_ln174_fu_32_p2);
    sensitive << ( keyvalue_key );
    sensitive << ( upperlimit );

    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "getpartition_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, keyvalue_key, "(port)keyvalue_key");
    sc_trace(mVcdFile, currentLOP, "(port)currentLOP");
    sc_trace(mVcdFile, upperlimit, "(port)upperlimit");
    sc_trace(mVcdFile, ap_return, "(port)ap_return");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, shl_ln174_fu_38_p2, "shl_ln174_fu_38_p2");
    sc_trace(mVcdFile, sub_ln174_1_fu_44_p2, "sub_ln174_1_fu_44_p2");
    sc_trace(mVcdFile, sub_ln174_2_fu_50_p2, "sub_ln174_2_fu_50_p2");
    sc_trace(mVcdFile, sub_ln174_fu_32_p2, "sub_ln174_fu_32_p2");
    sc_trace(mVcdFile, add_ln174_fu_56_p2, "add_ln174_fu_56_p2");
    sc_trace(mVcdFile, hashedval_fu_62_p2, "hashedval_fu_62_p2");
#endif

    }
}

getpartition::~getpartition() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void getpartition::thread_add_ln174_fu_56_p2() {
    add_ln174_fu_56_p2 = (!ap_const_lv32_1A.is_01() || !sub_ln174_2_fu_50_p2.read().is_01())? sc_lv<32>(): (sc_biguint<32>(ap_const_lv32_1A) + sc_biguint<32>(sub_ln174_2_fu_50_p2.read()));
}

void getpartition::thread_ap_ready() {
    ap_ready = ap_const_logic_1;
}

void getpartition::thread_ap_return() {
    ap_return = hashedval_fu_62_p2.read().range(5-1, 0);
}

void getpartition::thread_hashedval_fu_62_p2() {
    hashedval_fu_62_p2 = (!add_ln174_fu_56_p2.read().is_01())? sc_lv<32>(): sub_ln174_fu_32_p2.read() >> (unsigned short)add_ln174_fu_56_p2.read().to_uint();
}

void getpartition::thread_shl_ln174_fu_38_p2() {
    shl_ln174_fu_38_p2 = (!ap_const_lv32_2.is_01())? sc_lv<32>(): currentLOP.read() << (unsigned short)ap_const_lv32_2.to_uint();
}

void getpartition::thread_sub_ln174_1_fu_44_p2() {
    sub_ln174_1_fu_44_p2 = (!ap_const_lv32_0.is_01() || !shl_ln174_fu_38_p2.read().is_01())? sc_lv<32>(): (sc_biguint<32>(ap_const_lv32_0) - sc_biguint<32>(shl_ln174_fu_38_p2.read()));
}

void getpartition::thread_sub_ln174_2_fu_50_p2() {
    sub_ln174_2_fu_50_p2 = (!sub_ln174_1_fu_44_p2.read().is_01() || !currentLOP.read().is_01())? sc_lv<32>(): (sc_biguint<32>(sub_ln174_1_fu_44_p2.read()) - sc_biguint<32>(currentLOP.read()));
}

void getpartition::thread_sub_ln174_fu_32_p2() {
    sub_ln174_fu_32_p2 = (!keyvalue_key.read().is_01() || !upperlimit.read().is_01())? sc_lv<32>(): (sc_biguint<32>(keyvalue_key.read()) - sc_biguint<32>(upperlimit.read()));
}

}

