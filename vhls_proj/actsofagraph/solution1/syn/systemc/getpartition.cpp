// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1.3
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "getpartition.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic getpartition::ap_const_logic_1 = sc_dt::Log_1;
const bool getpartition::ap_const_boolean_1 = true;
const sc_lv<32> getpartition::ap_const_lv32_2 = "10";
const sc_lv<32> getpartition::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> getpartition::ap_const_lv32_1A = "11010";
const sc_lv<32> getpartition::ap_const_lv32_75BCD15 = "111010110111100110100010101";
const sc_lv<32> getpartition::ap_const_lv32_5 = "101";
const sc_lv<32> getpartition::ap_const_lv32_1F = "11111";
const sc_lv<27> getpartition::ap_const_lv27_0 = "000000000000000000000000000";
const sc_logic getpartition::ap_const_logic_0 = sc_dt::Log_0;

getpartition::getpartition(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_add_ln304_fu_66_p2);
    sensitive << ( sub_ln304_2_fu_60_p2 );

    SC_METHOD(thread_ap_ready);

    SC_METHOD(thread_ap_return);
    sensitive << ( icmp_ln307_fu_102_p2 );
    sensitive << ( trunc_ln307_fu_108_p1 );
    sensitive << ( trunc_ln307_1_fu_112_p1 );

    SC_METHOD(thread_icmp_ln306_fu_78_p2);
    sensitive << ( keyvalue_key );

    SC_METHOD(thread_icmp_ln307_fu_102_p2);
    sensitive << ( tmp_fu_92_p4 );

    SC_METHOD(thread_select_ln306_fu_84_p3);
    sensitive << ( icmp_ln306_fu_78_p2 );
    sensitive << ( val_fu_72_p2 );

    SC_METHOD(thread_shl_ln304_fu_48_p2);
    sensitive << ( currentLOP );

    SC_METHOD(thread_sub_ln304_1_fu_54_p2);
    sensitive << ( shl_ln304_fu_48_p2 );

    SC_METHOD(thread_sub_ln304_2_fu_60_p2);
    sensitive << ( currentLOP );
    sensitive << ( sub_ln304_1_fu_54_p2 );

    SC_METHOD(thread_sub_ln304_fu_42_p2);
    sensitive << ( keyvalue_key );
    sensitive << ( upperlimit );

    SC_METHOD(thread_tmp_fu_92_p4);
    sensitive << ( select_ln306_fu_84_p3 );

    SC_METHOD(thread_trunc_ln307_1_fu_112_p1);
    sensitive << ( select_ln306_fu_84_p3 );

    SC_METHOD(thread_trunc_ln307_fu_108_p1);
    sensitive << ( val_fu_72_p2 );

    SC_METHOD(thread_val_fu_72_p2);
    sensitive << ( sub_ln304_fu_42_p2 );
    sensitive << ( add_ln304_fu_66_p2 );

    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "getpartition_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, keyvalue_key, "(port)keyvalue_key");
    sc_trace(mVcdFile, currentLOP, "(port)currentLOP");
    sc_trace(mVcdFile, upperlimit, "(port)upperlimit");
    sc_trace(mVcdFile, ap_return, "(port)ap_return");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, shl_ln304_fu_48_p2, "shl_ln304_fu_48_p2");
    sc_trace(mVcdFile, sub_ln304_1_fu_54_p2, "sub_ln304_1_fu_54_p2");
    sc_trace(mVcdFile, sub_ln304_2_fu_60_p2, "sub_ln304_2_fu_60_p2");
    sc_trace(mVcdFile, sub_ln304_fu_42_p2, "sub_ln304_fu_42_p2");
    sc_trace(mVcdFile, add_ln304_fu_66_p2, "add_ln304_fu_66_p2");
    sc_trace(mVcdFile, icmp_ln306_fu_78_p2, "icmp_ln306_fu_78_p2");
    sc_trace(mVcdFile, val_fu_72_p2, "val_fu_72_p2");
    sc_trace(mVcdFile, select_ln306_fu_84_p3, "select_ln306_fu_84_p3");
    sc_trace(mVcdFile, tmp_fu_92_p4, "tmp_fu_92_p4");
    sc_trace(mVcdFile, icmp_ln307_fu_102_p2, "icmp_ln307_fu_102_p2");
    sc_trace(mVcdFile, trunc_ln307_fu_108_p1, "trunc_ln307_fu_108_p1");
    sc_trace(mVcdFile, trunc_ln307_1_fu_112_p1, "trunc_ln307_1_fu_112_p1");
#endif

    }
}

getpartition::~getpartition() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void getpartition::thread_add_ln304_fu_66_p2() {
    add_ln304_fu_66_p2 = (!ap_const_lv32_1A.is_01() || !sub_ln304_2_fu_60_p2.read().is_01())? sc_lv<32>(): (sc_biguint<32>(ap_const_lv32_1A) + sc_biguint<32>(sub_ln304_2_fu_60_p2.read()));
}

void getpartition::thread_ap_ready() {
    ap_ready = ap_const_logic_1;
}

void getpartition::thread_ap_return() {
    ap_return = (!icmp_ln307_fu_102_p2.read()[0].is_01())? sc_lv<5>(): ((icmp_ln307_fu_102_p2.read()[0].to_bool())? trunc_ln307_fu_108_p1.read(): trunc_ln307_1_fu_112_p1.read());
}

void getpartition::thread_icmp_ln306_fu_78_p2() {
    icmp_ln306_fu_78_p2 = (!keyvalue_key.read().is_01() || !ap_const_lv32_75BCD15.is_01())? sc_lv<1>(): sc_lv<1>(keyvalue_key.read() == ap_const_lv32_75BCD15);
}

void getpartition::thread_icmp_ln307_fu_102_p2() {
    icmp_ln307_fu_102_p2 = (!tmp_fu_92_p4.read().is_01() || !ap_const_lv27_0.is_01())? sc_lv<1>(): sc_lv<1>(tmp_fu_92_p4.read() != ap_const_lv27_0);
}

void getpartition::thread_select_ln306_fu_84_p3() {
    select_ln306_fu_84_p3 = (!icmp_ln306_fu_78_p2.read()[0].is_01())? sc_lv<32>(): ((icmp_ln306_fu_78_p2.read()[0].to_bool())? ap_const_lv32_0: val_fu_72_p2.read());
}

void getpartition::thread_shl_ln304_fu_48_p2() {
    shl_ln304_fu_48_p2 = (!ap_const_lv32_2.is_01())? sc_lv<32>(): currentLOP.read() << (unsigned short)ap_const_lv32_2.to_uint();
}

void getpartition::thread_sub_ln304_1_fu_54_p2() {
    sub_ln304_1_fu_54_p2 = (!ap_const_lv32_0.is_01() || !shl_ln304_fu_48_p2.read().is_01())? sc_lv<32>(): (sc_biguint<32>(ap_const_lv32_0) - sc_biguint<32>(shl_ln304_fu_48_p2.read()));
}

void getpartition::thread_sub_ln304_2_fu_60_p2() {
    sub_ln304_2_fu_60_p2 = (!sub_ln304_1_fu_54_p2.read().is_01() || !currentLOP.read().is_01())? sc_lv<32>(): (sc_biguint<32>(sub_ln304_1_fu_54_p2.read()) - sc_biguint<32>(currentLOP.read()));
}

void getpartition::thread_sub_ln304_fu_42_p2() {
    sub_ln304_fu_42_p2 = (!keyvalue_key.read().is_01() || !upperlimit.read().is_01())? sc_lv<32>(): (sc_biguint<32>(keyvalue_key.read()) - sc_biguint<32>(upperlimit.read()));
}

void getpartition::thread_tmp_fu_92_p4() {
    tmp_fu_92_p4 = select_ln306_fu_84_p3.read().range(31, 5);
}

void getpartition::thread_trunc_ln307_1_fu_112_p1() {
    trunc_ln307_1_fu_112_p1 = select_ln306_fu_84_p3.read().range(5-1, 0);
}

void getpartition::thread_trunc_ln307_fu_108_p1() {
    trunc_ln307_fu_108_p1 = val_fu_72_p2.read().range(5-1, 0);
}

void getpartition::thread_val_fu_72_p2() {
    val_fu_72_p2 = (!add_ln304_fu_66_p2.read().is_01())? sc_lv<32>(): sub_ln304_fu_42_p2.read() >> (unsigned short)add_ln304_fu_66_p2.read().to_uint();
}

}

