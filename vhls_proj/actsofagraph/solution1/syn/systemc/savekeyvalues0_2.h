// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1.3
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _savekeyvalues0_2_HH_
#define _savekeyvalues0_2_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct savekeyvalues0_2 : public sc_module {
    // Port declarations 101
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_logic > m_axi_kvdram_V_AWVALID;
    sc_in< sc_logic > m_axi_kvdram_V_AWREADY;
    sc_out< sc_lv<32> > m_axi_kvdram_V_AWADDR;
    sc_out< sc_lv<1> > m_axi_kvdram_V_AWID;
    sc_out< sc_lv<32> > m_axi_kvdram_V_AWLEN;
    sc_out< sc_lv<3> > m_axi_kvdram_V_AWSIZE;
    sc_out< sc_lv<2> > m_axi_kvdram_V_AWBURST;
    sc_out< sc_lv<2> > m_axi_kvdram_V_AWLOCK;
    sc_out< sc_lv<4> > m_axi_kvdram_V_AWCACHE;
    sc_out< sc_lv<3> > m_axi_kvdram_V_AWPROT;
    sc_out< sc_lv<4> > m_axi_kvdram_V_AWQOS;
    sc_out< sc_lv<4> > m_axi_kvdram_V_AWREGION;
    sc_out< sc_lv<1> > m_axi_kvdram_V_AWUSER;
    sc_out< sc_logic > m_axi_kvdram_V_WVALID;
    sc_in< sc_logic > m_axi_kvdram_V_WREADY;
    sc_out< sc_lv<512> > m_axi_kvdram_V_WDATA;
    sc_out< sc_lv<64> > m_axi_kvdram_V_WSTRB;
    sc_out< sc_logic > m_axi_kvdram_V_WLAST;
    sc_out< sc_lv<1> > m_axi_kvdram_V_WID;
    sc_out< sc_lv<1> > m_axi_kvdram_V_WUSER;
    sc_out< sc_logic > m_axi_kvdram_V_ARVALID;
    sc_in< sc_logic > m_axi_kvdram_V_ARREADY;
    sc_out< sc_lv<32> > m_axi_kvdram_V_ARADDR;
    sc_out< sc_lv<1> > m_axi_kvdram_V_ARID;
    sc_out< sc_lv<32> > m_axi_kvdram_V_ARLEN;
    sc_out< sc_lv<3> > m_axi_kvdram_V_ARSIZE;
    sc_out< sc_lv<2> > m_axi_kvdram_V_ARBURST;
    sc_out< sc_lv<2> > m_axi_kvdram_V_ARLOCK;
    sc_out< sc_lv<4> > m_axi_kvdram_V_ARCACHE;
    sc_out< sc_lv<3> > m_axi_kvdram_V_ARPROT;
    sc_out< sc_lv<4> > m_axi_kvdram_V_ARQOS;
    sc_out< sc_lv<4> > m_axi_kvdram_V_ARREGION;
    sc_out< sc_lv<1> > m_axi_kvdram_V_ARUSER;
    sc_in< sc_logic > m_axi_kvdram_V_RVALID;
    sc_out< sc_logic > m_axi_kvdram_V_RREADY;
    sc_in< sc_lv<512> > m_axi_kvdram_V_RDATA;
    sc_in< sc_logic > m_axi_kvdram_V_RLAST;
    sc_in< sc_lv<1> > m_axi_kvdram_V_RID;
    sc_in< sc_lv<1> > m_axi_kvdram_V_RUSER;
    sc_in< sc_lv<2> > m_axi_kvdram_V_RRESP;
    sc_in< sc_logic > m_axi_kvdram_V_BVALID;
    sc_out< sc_logic > m_axi_kvdram_V_BREADY;
    sc_in< sc_lv<2> > m_axi_kvdram_V_BRESP;
    sc_in< sc_lv<1> > m_axi_kvdram_V_BID;
    sc_in< sc_lv<1> > m_axi_kvdram_V_BUSER;
    sc_in< sc_lv<26> > kvdram_V_offset;
    sc_out< sc_lv<12> > buffer30_key_address0;
    sc_out< sc_logic > buffer30_key_ce0;
    sc_in< sc_lv<32> > buffer30_key_q0;
    sc_out< sc_lv<12> > buffer30_value_address0;
    sc_out< sc_logic > buffer30_value_ce0;
    sc_in< sc_lv<32> > buffer30_value_q0;
    sc_out< sc_lv<12> > buffer31_key_address0;
    sc_out< sc_logic > buffer31_key_ce0;
    sc_in< sc_lv<32> > buffer31_key_q0;
    sc_out< sc_lv<12> > buffer31_value_address0;
    sc_out< sc_logic > buffer31_value_ce0;
    sc_in< sc_lv<32> > buffer31_value_q0;
    sc_out< sc_lv<12> > buffer32_key_address0;
    sc_out< sc_logic > buffer32_key_ce0;
    sc_in< sc_lv<32> > buffer32_key_q0;
    sc_out< sc_lv<12> > buffer32_value_address0;
    sc_out< sc_logic > buffer32_value_ce0;
    sc_in< sc_lv<32> > buffer32_value_q0;
    sc_out< sc_lv<12> > buffer33_key_address0;
    sc_out< sc_logic > buffer33_key_ce0;
    sc_in< sc_lv<32> > buffer33_key_q0;
    sc_out< sc_lv<12> > buffer33_value_address0;
    sc_out< sc_logic > buffer33_value_ce0;
    sc_in< sc_lv<32> > buffer33_value_q0;
    sc_out< sc_lv<12> > buffer34_key_address0;
    sc_out< sc_logic > buffer34_key_ce0;
    sc_in< sc_lv<32> > buffer34_key_q0;
    sc_out< sc_lv<12> > buffer34_value_address0;
    sc_out< sc_logic > buffer34_value_ce0;
    sc_in< sc_lv<32> > buffer34_value_q0;
    sc_out< sc_lv<12> > buffer35_key_address0;
    sc_out< sc_logic > buffer35_key_ce0;
    sc_in< sc_lv<32> > buffer35_key_q0;
    sc_out< sc_lv<12> > buffer35_value_address0;
    sc_out< sc_logic > buffer35_value_ce0;
    sc_in< sc_lv<32> > buffer35_value_q0;
    sc_out< sc_lv<12> > buffer36_key_address0;
    sc_out< sc_logic > buffer36_key_ce0;
    sc_in< sc_lv<32> > buffer36_key_q0;
    sc_out< sc_lv<12> > buffer36_value_address0;
    sc_out< sc_logic > buffer36_value_ce0;
    sc_in< sc_lv<32> > buffer36_value_q0;
    sc_out< sc_lv<12> > buffer37_key_address0;
    sc_out< sc_logic > buffer37_key_ce0;
    sc_in< sc_lv<32> > buffer37_key_q0;
    sc_out< sc_lv<12> > buffer37_value_address0;
    sc_out< sc_logic > buffer37_value_ce0;
    sc_in< sc_lv<32> > buffer37_value_q0;
    sc_in< sc_lv<30> > offset_kvs;


    // Module declarations
    savekeyvalues0_2(sc_module_name name);
    SC_HAS_PROCESS(savekeyvalues0_2);

    ~savekeyvalues0_2();

    sc_trace_file* mVcdFile;

    sc_signal< sc_lv<8> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > kvdram_V_blk_n_AW;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_logic > kvdram_V_blk_n_W;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter2;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<1> > icmp_ln2530_reg_429;
    sc_signal< sc_lv<1> > icmp_ln2530_reg_429_pp0_iter1_reg;
    sc_signal< sc_logic > kvdram_V_blk_n_B;
    sc_signal< sc_logic > ap_CS_fsm_state10;
    sc_signal< sc_lv<9> > i_0_reg_330;
    sc_signal< sc_lv<31> > add_ln392_fu_349_p2;
    sc_signal< sc_lv<31> > add_ln392_reg_418;
    sc_signal< sc_lv<1> > icmp_ln2530_fu_365_p2;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state4_pp0_stage0_iter1;
    sc_signal< bool > ap_block_state5_pp0_stage0_iter2;
    sc_signal< bool > ap_block_state5_io;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<9> > i_fu_371_p2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_lv<32> > buffer30_key_load_reg_518;
    sc_signal< sc_lv<32> > buffer30_value_load_reg_523;
    sc_signal< sc_lv<32> > buffer31_key_load_reg_528;
    sc_signal< sc_lv<32> > buffer31_value_load_reg_533;
    sc_signal< sc_lv<32> > buffer32_key_load_reg_538;
    sc_signal< sc_lv<32> > buffer32_value_load_reg_543;
    sc_signal< sc_lv<32> > buffer33_key_load_reg_548;
    sc_signal< sc_lv<32> > buffer33_value_load_reg_553;
    sc_signal< sc_lv<32> > buffer34_key_load_reg_558;
    sc_signal< sc_lv<32> > buffer34_value_load_reg_563;
    sc_signal< sc_lv<32> > buffer35_key_load_reg_568;
    sc_signal< sc_lv<32> > buffer35_value_load_reg_573;
    sc_signal< sc_lv<32> > buffer36_key_load_reg_578;
    sc_signal< sc_lv<32> > buffer36_value_load_reg_583;
    sc_signal< sc_lv<32> > buffer37_key_load_reg_588;
    sc_signal< sc_lv<32> > buffer37_value_load_reg_593;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state3;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< sc_lv<64> > zext_ln2535_fu_377_p1;
    sc_signal< sc_lv<64> > zext_ln392_2_fu_355_p1;
    sc_signal< bool > ap_block_pp0_stage0_01001;
    sc_signal< sc_lv<31> > zext_ln392_fu_341_p1;
    sc_signal< sc_lv<31> > zext_ln392_1_fu_345_p1;
    sc_signal< sc_lv<8> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<8> ap_ST_fsm_state1;
    static const sc_lv<8> ap_ST_fsm_state2;
    static const sc_lv<8> ap_ST_fsm_pp0_stage0;
    static const sc_lv<8> ap_ST_fsm_state6;
    static const sc_lv<8> ap_ST_fsm_state7;
    static const sc_lv<8> ap_ST_fsm_state8;
    static const sc_lv<8> ap_ST_fsm_state9;
    static const sc_lv<8> ap_ST_fsm_state10;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const bool ap_const_boolean_0;
    static const sc_lv<32> ap_const_lv32_7;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<9> ap_const_lv9_0;
    static const sc_lv<32> ap_const_lv32_100;
    static const sc_lv<64> ap_const_lv64_FFFFFFFFFFFFFFFF;
    static const sc_lv<9> ap_const_lv9_100;
    static const sc_lv<9> ap_const_lv9_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_add_ln392_fu_349_p2();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state10();
    void thread_ap_CS_fsm_state2();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_01001();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state3_pp0_stage0_iter0();
    void thread_ap_block_state4_pp0_stage0_iter1();
    void thread_ap_block_state5_io();
    void thread_ap_block_state5_pp0_stage0_iter2();
    void thread_ap_condition_pp0_exit_iter0_state3();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_ready();
    void thread_buffer30_key_address0();
    void thread_buffer30_key_ce0();
    void thread_buffer30_value_address0();
    void thread_buffer30_value_ce0();
    void thread_buffer31_key_address0();
    void thread_buffer31_key_ce0();
    void thread_buffer31_value_address0();
    void thread_buffer31_value_ce0();
    void thread_buffer32_key_address0();
    void thread_buffer32_key_ce0();
    void thread_buffer32_value_address0();
    void thread_buffer32_value_ce0();
    void thread_buffer33_key_address0();
    void thread_buffer33_key_ce0();
    void thread_buffer33_value_address0();
    void thread_buffer33_value_ce0();
    void thread_buffer34_key_address0();
    void thread_buffer34_key_ce0();
    void thread_buffer34_value_address0();
    void thread_buffer34_value_ce0();
    void thread_buffer35_key_address0();
    void thread_buffer35_key_ce0();
    void thread_buffer35_value_address0();
    void thread_buffer35_value_ce0();
    void thread_buffer36_key_address0();
    void thread_buffer36_key_ce0();
    void thread_buffer36_value_address0();
    void thread_buffer36_value_ce0();
    void thread_buffer37_key_address0();
    void thread_buffer37_key_ce0();
    void thread_buffer37_value_address0();
    void thread_buffer37_value_ce0();
    void thread_i_fu_371_p2();
    void thread_icmp_ln2530_fu_365_p2();
    void thread_kvdram_V_blk_n_AW();
    void thread_kvdram_V_blk_n_B();
    void thread_kvdram_V_blk_n_W();
    void thread_m_axi_kvdram_V_ARADDR();
    void thread_m_axi_kvdram_V_ARBURST();
    void thread_m_axi_kvdram_V_ARCACHE();
    void thread_m_axi_kvdram_V_ARID();
    void thread_m_axi_kvdram_V_ARLEN();
    void thread_m_axi_kvdram_V_ARLOCK();
    void thread_m_axi_kvdram_V_ARPROT();
    void thread_m_axi_kvdram_V_ARQOS();
    void thread_m_axi_kvdram_V_ARREGION();
    void thread_m_axi_kvdram_V_ARSIZE();
    void thread_m_axi_kvdram_V_ARUSER();
    void thread_m_axi_kvdram_V_ARVALID();
    void thread_m_axi_kvdram_V_AWADDR();
    void thread_m_axi_kvdram_V_AWBURST();
    void thread_m_axi_kvdram_V_AWCACHE();
    void thread_m_axi_kvdram_V_AWID();
    void thread_m_axi_kvdram_V_AWLEN();
    void thread_m_axi_kvdram_V_AWLOCK();
    void thread_m_axi_kvdram_V_AWPROT();
    void thread_m_axi_kvdram_V_AWQOS();
    void thread_m_axi_kvdram_V_AWREGION();
    void thread_m_axi_kvdram_V_AWSIZE();
    void thread_m_axi_kvdram_V_AWUSER();
    void thread_m_axi_kvdram_V_AWVALID();
    void thread_m_axi_kvdram_V_BREADY();
    void thread_m_axi_kvdram_V_RREADY();
    void thread_m_axi_kvdram_V_WDATA();
    void thread_m_axi_kvdram_V_WID();
    void thread_m_axi_kvdram_V_WLAST();
    void thread_m_axi_kvdram_V_WSTRB();
    void thread_m_axi_kvdram_V_WUSER();
    void thread_m_axi_kvdram_V_WVALID();
    void thread_zext_ln2535_fu_377_p1();
    void thread_zext_ln392_1_fu_345_p1();
    void thread_zext_ln392_2_fu_355_p1();
    void thread_zext_ln392_fu_341_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
