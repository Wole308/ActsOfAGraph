// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1.3
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _savekeyvalues0_251_HH_
#define _savekeyvalues0_251_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct savekeyvalues0_251 : public sc_module {
    // Port declarations 59
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_logic > m_axi_dram_AWVALID;
    sc_in< sc_logic > m_axi_dram_AWREADY;
    sc_out< sc_lv<32> > m_axi_dram_AWADDR;
    sc_out< sc_lv<1> > m_axi_dram_AWID;
    sc_out< sc_lv<32> > m_axi_dram_AWLEN;
    sc_out< sc_lv<3> > m_axi_dram_AWSIZE;
    sc_out< sc_lv<2> > m_axi_dram_AWBURST;
    sc_out< sc_lv<2> > m_axi_dram_AWLOCK;
    sc_out< sc_lv<4> > m_axi_dram_AWCACHE;
    sc_out< sc_lv<3> > m_axi_dram_AWPROT;
    sc_out< sc_lv<4> > m_axi_dram_AWQOS;
    sc_out< sc_lv<4> > m_axi_dram_AWREGION;
    sc_out< sc_lv<1> > m_axi_dram_AWUSER;
    sc_out< sc_logic > m_axi_dram_WVALID;
    sc_in< sc_logic > m_axi_dram_WREADY;
    sc_out< sc_lv<64> > m_axi_dram_WDATA;
    sc_out< sc_lv<8> > m_axi_dram_WSTRB;
    sc_out< sc_logic > m_axi_dram_WLAST;
    sc_out< sc_lv<1> > m_axi_dram_WID;
    sc_out< sc_lv<1> > m_axi_dram_WUSER;
    sc_out< sc_logic > m_axi_dram_ARVALID;
    sc_in< sc_logic > m_axi_dram_ARREADY;
    sc_out< sc_lv<32> > m_axi_dram_ARADDR;
    sc_out< sc_lv<1> > m_axi_dram_ARID;
    sc_out< sc_lv<32> > m_axi_dram_ARLEN;
    sc_out< sc_lv<3> > m_axi_dram_ARSIZE;
    sc_out< sc_lv<2> > m_axi_dram_ARBURST;
    sc_out< sc_lv<2> > m_axi_dram_ARLOCK;
    sc_out< sc_lv<4> > m_axi_dram_ARCACHE;
    sc_out< sc_lv<3> > m_axi_dram_ARPROT;
    sc_out< sc_lv<4> > m_axi_dram_ARQOS;
    sc_out< sc_lv<4> > m_axi_dram_ARREGION;
    sc_out< sc_lv<1> > m_axi_dram_ARUSER;
    sc_in< sc_logic > m_axi_dram_RVALID;
    sc_out< sc_logic > m_axi_dram_RREADY;
    sc_in< sc_lv<64> > m_axi_dram_RDATA;
    sc_in< sc_logic > m_axi_dram_RLAST;
    sc_in< sc_lv<1> > m_axi_dram_RID;
    sc_in< sc_lv<1> > m_axi_dram_RUSER;
    sc_in< sc_lv<2> > m_axi_dram_RRESP;
    sc_in< sc_logic > m_axi_dram_BVALID;
    sc_out< sc_logic > m_axi_dram_BREADY;
    sc_in< sc_lv<2> > m_axi_dram_BRESP;
    sc_in< sc_lv<1> > m_axi_dram_BID;
    sc_in< sc_lv<1> > m_axi_dram_BUSER;
    sc_in< sc_lv<29> > dram_offset;
    sc_out< sc_lv<5> > buffer_key_address0;
    sc_out< sc_logic > buffer_key_ce0;
    sc_in< sc_lv<32> > buffer_key_q0;
    sc_out< sc_lv<5> > buffer_value_address0;
    sc_out< sc_logic > buffer_value_ce0;
    sc_in< sc_lv<32> > buffer_value_q0;
    sc_in< sc_lv<32> > offset_kvs;


    // Module declarations
    savekeyvalues0_251(sc_module_name name);
    SC_HAS_PROCESS(savekeyvalues0_251);

    ~savekeyvalues0_251();

    sc_trace_file* mVcdFile;

    sc_signal< sc_lv<8> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > dram_blk_n_AW;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_logic > dram_blk_n_W;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter2;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<1> > icmp_ln2514_reg_197;
    sc_signal< sc_lv<1> > icmp_ln2514_reg_197_pp0_iter1_reg;
    sc_signal< sc_logic > dram_blk_n_B;
    sc_signal< sc_logic > ap_CS_fsm_state10;
    sc_signal< sc_lv<6> > i_0_reg_120;
    sc_signal< sc_lv<33> > add_ln2517_1_fu_145_p2;
    sc_signal< sc_lv<33> > add_ln2517_1_reg_186;
    sc_signal< sc_lv<1> > icmp_ln2514_fu_161_p2;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state4_pp0_stage0_iter1;
    sc_signal< bool > ap_block_state5_pp0_stage0_iter2;
    sc_signal< bool > ap_block_state5_io;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<6> > i_fu_167_p2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_lv<32> > buffer_key_load_reg_216;
    sc_signal< sc_lv<32> > buffer_value_load_reg_221;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state3;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< sc_lv<64> > zext_ln2517_1_fu_173_p1;
    sc_signal< sc_lv<64> > zext_ln2517_3_fu_151_p1;
    sc_signal< bool > ap_block_pp0_stage0_01001;
    sc_signal< sc_lv<32> > add_ln2517_fu_131_p2;
    sc_signal< sc_lv<33> > zext_ln2517_fu_137_p1;
    sc_signal< sc_lv<33> > zext_ln2517_2_fu_141_p1;
    sc_signal< sc_lv<8> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<8> ap_ST_fsm_state1;
    static const sc_lv<8> ap_ST_fsm_state2;
    static const sc_lv<8> ap_ST_fsm_pp0_stage0;
    static const sc_lv<8> ap_ST_fsm_state6;
    static const sc_lv<8> ap_ST_fsm_state7;
    static const sc_lv<8> ap_ST_fsm_state8;
    static const sc_lv<8> ap_ST_fsm_state9;
    static const sc_lv<8> ap_ST_fsm_state10;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const bool ap_const_boolean_0;
    static const sc_lv<32> ap_const_lv32_7;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<6> ap_const_lv6_0;
    static const sc_lv<32> ap_const_lv32_20;
    static const sc_lv<8> ap_const_lv8_FF;
    static const sc_lv<32> ap_const_lv32_400;
    static const sc_lv<6> ap_const_lv6_20;
    static const sc_lv<6> ap_const_lv6_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_add_ln2517_1_fu_145_p2();
    void thread_add_ln2517_fu_131_p2();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state10();
    void thread_ap_CS_fsm_state2();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_01001();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state3_pp0_stage0_iter0();
    void thread_ap_block_state4_pp0_stage0_iter1();
    void thread_ap_block_state5_io();
    void thread_ap_block_state5_pp0_stage0_iter2();
    void thread_ap_condition_pp0_exit_iter0_state3();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_ready();
    void thread_buffer_key_address0();
    void thread_buffer_key_ce0();
    void thread_buffer_value_address0();
    void thread_buffer_value_ce0();
    void thread_dram_blk_n_AW();
    void thread_dram_blk_n_B();
    void thread_dram_blk_n_W();
    void thread_i_fu_167_p2();
    void thread_icmp_ln2514_fu_161_p2();
    void thread_m_axi_dram_ARADDR();
    void thread_m_axi_dram_ARBURST();
    void thread_m_axi_dram_ARCACHE();
    void thread_m_axi_dram_ARID();
    void thread_m_axi_dram_ARLEN();
    void thread_m_axi_dram_ARLOCK();
    void thread_m_axi_dram_ARPROT();
    void thread_m_axi_dram_ARQOS();
    void thread_m_axi_dram_ARREGION();
    void thread_m_axi_dram_ARSIZE();
    void thread_m_axi_dram_ARUSER();
    void thread_m_axi_dram_ARVALID();
    void thread_m_axi_dram_AWADDR();
    void thread_m_axi_dram_AWBURST();
    void thread_m_axi_dram_AWCACHE();
    void thread_m_axi_dram_AWID();
    void thread_m_axi_dram_AWLEN();
    void thread_m_axi_dram_AWLOCK();
    void thread_m_axi_dram_AWPROT();
    void thread_m_axi_dram_AWQOS();
    void thread_m_axi_dram_AWREGION();
    void thread_m_axi_dram_AWSIZE();
    void thread_m_axi_dram_AWUSER();
    void thread_m_axi_dram_AWVALID();
    void thread_m_axi_dram_BREADY();
    void thread_m_axi_dram_RREADY();
    void thread_m_axi_dram_WDATA();
    void thread_m_axi_dram_WID();
    void thread_m_axi_dram_WLAST();
    void thread_m_axi_dram_WSTRB();
    void thread_m_axi_dram_WUSER();
    void thread_m_axi_dram_WVALID();
    void thread_zext_ln2517_1_fu_173_p1();
    void thread_zext_ln2517_2_fu_141_p1();
    void thread_zext_ln2517_3_fu_151_p1();
    void thread_zext_ln2517_fu_137_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
