// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1.3
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _getpartition_HH_
#define _getpartition_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct getpartition : public sc_module {
    // Port declarations 5
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<32> > keyvalue_key;
    sc_in< sc_lv<32> > currentLOP;
    sc_in< sc_lv<32> > upperlimit;
    sc_out< sc_lv<5> > ap_return;


    // Module declarations
    getpartition(sc_module_name name);
    SC_HAS_PROCESS(getpartition);

    ~getpartition();

    sc_trace_file* mVcdFile;

    sc_signal< sc_lv<32> > shl_ln304_fu_48_p2;
    sc_signal< sc_lv<32> > sub_ln304_1_fu_54_p2;
    sc_signal< sc_lv<32> > sub_ln304_2_fu_60_p2;
    sc_signal< sc_lv<32> > sub_ln304_fu_42_p2;
    sc_signal< sc_lv<32> > add_ln304_fu_66_p2;
    sc_signal< sc_lv<1> > icmp_ln306_fu_78_p2;
    sc_signal< sc_lv<32> > val_fu_72_p2;
    sc_signal< sc_lv<32> > select_ln306_fu_84_p3;
    sc_signal< sc_lv<27> > tmp_fu_92_p4;
    sc_signal< sc_lv<1> > icmp_ln307_fu_102_p2;
    sc_signal< sc_lv<5> > trunc_ln307_fu_108_p1;
    sc_signal< sc_lv<5> > trunc_ln307_1_fu_112_p1;
    static const sc_logic ap_const_logic_1;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1A;
    static const sc_lv<32> ap_const_lv32_75BCD15;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<32> ap_const_lv32_1F;
    static const sc_lv<27> ap_const_lv27_0;
    static const sc_logic ap_const_logic_0;
    // Thread declarations
    void thread_add_ln304_fu_66_p2();
    void thread_ap_ready();
    void thread_ap_return();
    void thread_icmp_ln306_fu_78_p2();
    void thread_icmp_ln307_fu_102_p2();
    void thread_select_ln306_fu_84_p3();
    void thread_shl_ln304_fu_48_p2();
    void thread_sub_ln304_1_fu_54_p2();
    void thread_sub_ln304_2_fu_60_p2();
    void thread_sub_ln304_fu_42_p2();
    void thread_tmp_fu_92_p4();
    void thread_trunc_ln307_1_fu_112_p1();
    void thread_trunc_ln307_fu_108_p1();
    void thread_val_fu_72_p2();
};

}

using namespace ap_rtl;

#endif
