// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1.3
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "savekeyvalues0_1.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic savekeyvalues0_1::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic savekeyvalues0_1::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<1> savekeyvalues0_1::ap_ST_fsm_pp0_stage0 = "1";
const bool savekeyvalues0_1::ap_const_boolean_1 = true;
const sc_lv<32> savekeyvalues0_1::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool savekeyvalues0_1::ap_const_boolean_0 = false;
const sc_lv<1> savekeyvalues0_1::ap_const_lv1_0 = "0";
const sc_lv<3> savekeyvalues0_1::ap_const_lv3_0 = "000";
const sc_lv<2> savekeyvalues0_1::ap_const_lv2_0 = "00";
const sc_lv<4> savekeyvalues0_1::ap_const_lv4_0 = "0000";
const sc_lv<32> savekeyvalues0_1::ap_const_lv32_1 = "1";
const sc_lv<8> savekeyvalues0_1::ap_const_lv8_FF = "11111111";
const sc_lv<32> savekeyvalues0_1::ap_const_lv32_18400 = "11000010000000000";

savekeyvalues0_1::savekeyvalues0_1(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_add_ln2517_1_fu_96_p2);
    sensitive << ( offset_kvs );

    SC_METHOD(thread_add_ln2517_fu_110_p2);
    sensitive << ( zext_ln2517_fu_102_p1 );
    sensitive << ( zext_ln2517_4_fu_106_p1 );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_01001);
    sensitive << ( ap_start );
    sensitive << ( ap_enable_reg_pp0_iter7 );
    sensitive << ( m_axi_dram_BVALID );

    SC_METHOD(thread_ap_block_pp0_stage0_11001);
    sensitive << ( ap_start );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_enable_reg_pp0_iter7 );
    sensitive << ( m_axi_dram_AWREADY );
    sensitive << ( m_axi_dram_WREADY );
    sensitive << ( m_axi_dram_BVALID );

    SC_METHOD(thread_ap_block_pp0_stage0_subdone);
    sensitive << ( ap_start );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_enable_reg_pp0_iter7 );
    sensitive << ( m_axi_dram_AWREADY );
    sensitive << ( m_axi_dram_WREADY );
    sensitive << ( m_axi_dram_BVALID );

    SC_METHOD(thread_ap_block_state1_pp0_stage0_iter0);
    sensitive << ( ap_start );

    SC_METHOD(thread_ap_block_state2_pp0_stage0_iter1);

    SC_METHOD(thread_ap_block_state3_pp0_stage0_iter2);

    SC_METHOD(thread_ap_block_state4_pp0_stage0_iter3);

    SC_METHOD(thread_ap_block_state5_pp0_stage0_iter4);

    SC_METHOD(thread_ap_block_state6_pp0_stage0_iter5);

    SC_METHOD(thread_ap_block_state7_pp0_stage0_iter6);

    SC_METHOD(thread_ap_block_state8_pp0_stage0_iter7);
    sensitive << ( m_axi_dram_BVALID );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter7 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_enable_reg_pp0_iter0);
    sensitive << ( ap_start );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_enable_reg_pp0_iter3 );
    sensitive << ( ap_enable_reg_pp0_iter4 );
    sensitive << ( ap_enable_reg_pp0_iter5 );
    sensitive << ( ap_enable_reg_pp0_iter6 );
    sensitive << ( ap_enable_reg_pp0_iter7 );

    SC_METHOD(thread_ap_idle_pp0_0to6);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_enable_reg_pp0_iter3 );
    sensitive << ( ap_enable_reg_pp0_iter4 );
    sensitive << ( ap_enable_reg_pp0_iter5 );
    sensitive << ( ap_enable_reg_pp0_iter6 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_ap_reset_idle_pp0);
    sensitive << ( ap_start );
    sensitive << ( ap_idle_pp0_0to6 );

    SC_METHOD(thread_dram_blk_n_AW);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( m_axi_dram_AWREADY );

    SC_METHOD(thread_dram_blk_n_B);
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter7 );
    sensitive << ( m_axi_dram_BVALID );

    SC_METHOD(thread_dram_blk_n_W);
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( m_axi_dram_WREADY );

    SC_METHOD(thread_m_axi_dram_ARADDR);

    SC_METHOD(thread_m_axi_dram_ARBURST);

    SC_METHOD(thread_m_axi_dram_ARCACHE);

    SC_METHOD(thread_m_axi_dram_ARID);

    SC_METHOD(thread_m_axi_dram_ARLEN);

    SC_METHOD(thread_m_axi_dram_ARLOCK);

    SC_METHOD(thread_m_axi_dram_ARPROT);

    SC_METHOD(thread_m_axi_dram_ARQOS);

    SC_METHOD(thread_m_axi_dram_ARREGION);

    SC_METHOD(thread_m_axi_dram_ARSIZE);

    SC_METHOD(thread_m_axi_dram_ARUSER);

    SC_METHOD(thread_m_axi_dram_ARVALID);

    SC_METHOD(thread_m_axi_dram_AWADDR);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( zext_ln2517_5_fu_116_p1 );

    SC_METHOD(thread_m_axi_dram_AWBURST);

    SC_METHOD(thread_m_axi_dram_AWCACHE);

    SC_METHOD(thread_m_axi_dram_AWID);

    SC_METHOD(thread_m_axi_dram_AWLEN);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_m_axi_dram_AWLOCK);

    SC_METHOD(thread_m_axi_dram_AWPROT);

    SC_METHOD(thread_m_axi_dram_AWQOS);

    SC_METHOD(thread_m_axi_dram_AWREGION);

    SC_METHOD(thread_m_axi_dram_AWSIZE);

    SC_METHOD(thread_m_axi_dram_AWUSER);

    SC_METHOD(thread_m_axi_dram_AWVALID);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_m_axi_dram_BREADY);
    sensitive << ( ap_enable_reg_pp0_iter7 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_m_axi_dram_RREADY);

    SC_METHOD(thread_m_axi_dram_WDATA);
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( buffer_0_value_read_1_reg_133_pp0_iter1_reg );
    sensitive << ( buffer_0_key_read_1_reg_138_pp0_iter1_reg );
    sensitive << ( ap_block_pp0_stage0_01001 );

    SC_METHOD(thread_m_axi_dram_WID);

    SC_METHOD(thread_m_axi_dram_WLAST);

    SC_METHOD(thread_m_axi_dram_WSTRB);
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_block_pp0_stage0_01001 );

    SC_METHOD(thread_m_axi_dram_WUSER);

    SC_METHOD(thread_m_axi_dram_WVALID);
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_zext_ln2517_4_fu_106_p1);
    sensitive << ( dram_offset );

    SC_METHOD(thread_zext_ln2517_5_fu_116_p1);
    sensitive << ( add_ln2517_reg_143 );

    SC_METHOD(thread_zext_ln2517_fu_102_p1);
    sensitive << ( add_ln2517_1_fu_96_p2 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_block_pp0_stage0_subdone );
    sensitive << ( ap_reset_idle_pp0 );

    ap_CS_fsm = "1";
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter2 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter3 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter4 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter5 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter6 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter7 = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "savekeyvalues0_1_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, m_axi_dram_AWVALID, "(port)m_axi_dram_AWVALID");
    sc_trace(mVcdFile, m_axi_dram_AWREADY, "(port)m_axi_dram_AWREADY");
    sc_trace(mVcdFile, m_axi_dram_AWADDR, "(port)m_axi_dram_AWADDR");
    sc_trace(mVcdFile, m_axi_dram_AWID, "(port)m_axi_dram_AWID");
    sc_trace(mVcdFile, m_axi_dram_AWLEN, "(port)m_axi_dram_AWLEN");
    sc_trace(mVcdFile, m_axi_dram_AWSIZE, "(port)m_axi_dram_AWSIZE");
    sc_trace(mVcdFile, m_axi_dram_AWBURST, "(port)m_axi_dram_AWBURST");
    sc_trace(mVcdFile, m_axi_dram_AWLOCK, "(port)m_axi_dram_AWLOCK");
    sc_trace(mVcdFile, m_axi_dram_AWCACHE, "(port)m_axi_dram_AWCACHE");
    sc_trace(mVcdFile, m_axi_dram_AWPROT, "(port)m_axi_dram_AWPROT");
    sc_trace(mVcdFile, m_axi_dram_AWQOS, "(port)m_axi_dram_AWQOS");
    sc_trace(mVcdFile, m_axi_dram_AWREGION, "(port)m_axi_dram_AWREGION");
    sc_trace(mVcdFile, m_axi_dram_AWUSER, "(port)m_axi_dram_AWUSER");
    sc_trace(mVcdFile, m_axi_dram_WVALID, "(port)m_axi_dram_WVALID");
    sc_trace(mVcdFile, m_axi_dram_WREADY, "(port)m_axi_dram_WREADY");
    sc_trace(mVcdFile, m_axi_dram_WDATA, "(port)m_axi_dram_WDATA");
    sc_trace(mVcdFile, m_axi_dram_WSTRB, "(port)m_axi_dram_WSTRB");
    sc_trace(mVcdFile, m_axi_dram_WLAST, "(port)m_axi_dram_WLAST");
    sc_trace(mVcdFile, m_axi_dram_WID, "(port)m_axi_dram_WID");
    sc_trace(mVcdFile, m_axi_dram_WUSER, "(port)m_axi_dram_WUSER");
    sc_trace(mVcdFile, m_axi_dram_ARVALID, "(port)m_axi_dram_ARVALID");
    sc_trace(mVcdFile, m_axi_dram_ARREADY, "(port)m_axi_dram_ARREADY");
    sc_trace(mVcdFile, m_axi_dram_ARADDR, "(port)m_axi_dram_ARADDR");
    sc_trace(mVcdFile, m_axi_dram_ARID, "(port)m_axi_dram_ARID");
    sc_trace(mVcdFile, m_axi_dram_ARLEN, "(port)m_axi_dram_ARLEN");
    sc_trace(mVcdFile, m_axi_dram_ARSIZE, "(port)m_axi_dram_ARSIZE");
    sc_trace(mVcdFile, m_axi_dram_ARBURST, "(port)m_axi_dram_ARBURST");
    sc_trace(mVcdFile, m_axi_dram_ARLOCK, "(port)m_axi_dram_ARLOCK");
    sc_trace(mVcdFile, m_axi_dram_ARCACHE, "(port)m_axi_dram_ARCACHE");
    sc_trace(mVcdFile, m_axi_dram_ARPROT, "(port)m_axi_dram_ARPROT");
    sc_trace(mVcdFile, m_axi_dram_ARQOS, "(port)m_axi_dram_ARQOS");
    sc_trace(mVcdFile, m_axi_dram_ARREGION, "(port)m_axi_dram_ARREGION");
    sc_trace(mVcdFile, m_axi_dram_ARUSER, "(port)m_axi_dram_ARUSER");
    sc_trace(mVcdFile, m_axi_dram_RVALID, "(port)m_axi_dram_RVALID");
    sc_trace(mVcdFile, m_axi_dram_RREADY, "(port)m_axi_dram_RREADY");
    sc_trace(mVcdFile, m_axi_dram_RDATA, "(port)m_axi_dram_RDATA");
    sc_trace(mVcdFile, m_axi_dram_RLAST, "(port)m_axi_dram_RLAST");
    sc_trace(mVcdFile, m_axi_dram_RID, "(port)m_axi_dram_RID");
    sc_trace(mVcdFile, m_axi_dram_RUSER, "(port)m_axi_dram_RUSER");
    sc_trace(mVcdFile, m_axi_dram_RRESP, "(port)m_axi_dram_RRESP");
    sc_trace(mVcdFile, m_axi_dram_BVALID, "(port)m_axi_dram_BVALID");
    sc_trace(mVcdFile, m_axi_dram_BREADY, "(port)m_axi_dram_BREADY");
    sc_trace(mVcdFile, m_axi_dram_BRESP, "(port)m_axi_dram_BRESP");
    sc_trace(mVcdFile, m_axi_dram_BID, "(port)m_axi_dram_BID");
    sc_trace(mVcdFile, m_axi_dram_BUSER, "(port)m_axi_dram_BUSER");
    sc_trace(mVcdFile, dram_offset, "(port)dram_offset");
    sc_trace(mVcdFile, buffer_0_key_read, "(port)buffer_0_key_read");
    sc_trace(mVcdFile, buffer_0_value_read, "(port)buffer_0_value_read");
    sc_trace(mVcdFile, offset_kvs, "(port)offset_kvs");
    sc_trace(mVcdFile, dram_blk_n_AW, "(port)dram_blk_n_AW");
    sc_trace(mVcdFile, dram_blk_n_W, "(port)dram_blk_n_W");
    sc_trace(mVcdFile, dram_blk_n_B, "(port)dram_blk_n_B");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter2, "ap_enable_reg_pp0_iter2");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter3, "ap_enable_reg_pp0_iter3");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter4, "ap_enable_reg_pp0_iter4");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter5, "ap_enable_reg_pp0_iter5");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter6, "ap_enable_reg_pp0_iter6");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter7, "ap_enable_reg_pp0_iter7");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, ap_block_state1_pp0_stage0_iter0, "ap_block_state1_pp0_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state2_pp0_stage0_iter1, "ap_block_state2_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_block_state3_pp0_stage0_iter2, "ap_block_state3_pp0_stage0_iter2");
    sc_trace(mVcdFile, ap_block_state4_pp0_stage0_iter3, "ap_block_state4_pp0_stage0_iter3");
    sc_trace(mVcdFile, ap_block_state5_pp0_stage0_iter4, "ap_block_state5_pp0_stage0_iter4");
    sc_trace(mVcdFile, ap_block_state6_pp0_stage0_iter5, "ap_block_state6_pp0_stage0_iter5");
    sc_trace(mVcdFile, ap_block_state7_pp0_stage0_iter6, "ap_block_state7_pp0_stage0_iter6");
    sc_trace(mVcdFile, ap_block_state8_pp0_stage0_iter7, "ap_block_state8_pp0_stage0_iter7");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, buffer_0_value_read_1_reg_133, "buffer_0_value_read_1_reg_133");
    sc_trace(mVcdFile, buffer_0_value_read_1_reg_133_pp0_iter1_reg, "buffer_0_value_read_1_reg_133_pp0_iter1_reg");
    sc_trace(mVcdFile, buffer_0_key_read_1_reg_138, "buffer_0_key_read_1_reg_138");
    sc_trace(mVcdFile, buffer_0_key_read_1_reg_138_pp0_iter1_reg, "buffer_0_key_read_1_reg_138_pp0_iter1_reg");
    sc_trace(mVcdFile, add_ln2517_fu_110_p2, "add_ln2517_fu_110_p2");
    sc_trace(mVcdFile, add_ln2517_reg_143, "add_ln2517_reg_143");
    sc_trace(mVcdFile, ap_block_pp0_stage0_subdone, "ap_block_pp0_stage0_subdone");
    sc_trace(mVcdFile, zext_ln2517_5_fu_116_p1, "zext_ln2517_5_fu_116_p1");
    sc_trace(mVcdFile, ap_block_pp0_stage0_01001, "ap_block_pp0_stage0_01001");
    sc_trace(mVcdFile, add_ln2517_1_fu_96_p2, "add_ln2517_1_fu_96_p2");
    sc_trace(mVcdFile, zext_ln2517_fu_102_p1, "zext_ln2517_fu_102_p1");
    sc_trace(mVcdFile, zext_ln2517_4_fu_106_p1, "zext_ln2517_4_fu_106_p1");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_idle_pp0_0to6, "ap_idle_pp0_0to6");
    sc_trace(mVcdFile, ap_reset_idle_pp0, "ap_reset_idle_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
#endif

    }
}

savekeyvalues0_1::~savekeyvalues0_1() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void savekeyvalues0_1::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_pp0_stage0;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0))) {
            ap_enable_reg_pp0_iter1 = ap_start.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter2 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter2 = ap_enable_reg_pp0_iter1.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter3 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter3 = ap_enable_reg_pp0_iter2.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter4 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter4 = ap_enable_reg_pp0_iter3.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter5 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter5 = ap_enable_reg_pp0_iter4.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter6 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter6 = ap_enable_reg_pp0_iter5.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter7 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter7 = ap_enable_reg_pp0_iter6.read();
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        add_ln2517_reg_143 = add_ln2517_fu_110_p2.read();
        buffer_0_key_read_1_reg_138 = buffer_0_key_read.read();
        buffer_0_key_read_1_reg_138_pp0_iter1_reg = buffer_0_key_read_1_reg_138.read();
        buffer_0_value_read_1_reg_133 = buffer_0_value_read.read();
        buffer_0_value_read_1_reg_133_pp0_iter1_reg = buffer_0_value_read_1_reg_133.read();
    }
}

void savekeyvalues0_1::thread_add_ln2517_1_fu_96_p2() {
    add_ln2517_1_fu_96_p2 = (!offset_kvs.read().is_01() || !ap_const_lv32_18400.is_01())? sc_lv<32>(): (sc_biguint<32>(offset_kvs.read()) + sc_biguint<32>(ap_const_lv32_18400));
}

void savekeyvalues0_1::thread_add_ln2517_fu_110_p2() {
    add_ln2517_fu_110_p2 = (!zext_ln2517_fu_102_p1.read().is_01() || !zext_ln2517_4_fu_106_p1.read().is_01())? sc_lv<33>(): (sc_biguint<33>(zext_ln2517_fu_102_p1.read()) + sc_biguint<33>(zext_ln2517_4_fu_106_p1.read()));
}

void savekeyvalues0_1::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[0];
}

void savekeyvalues0_1::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void savekeyvalues0_1::thread_ap_block_pp0_stage0_01001() {
    ap_block_pp0_stage0_01001 = ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, m_axi_dram_BVALID.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter7.read())));
}

void savekeyvalues0_1::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, m_axi_dram_AWREADY.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, m_axi_dram_WREADY.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, m_axi_dram_BVALID.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter7.read())));
}

void savekeyvalues0_1::thread_ap_block_pp0_stage0_subdone() {
    ap_block_pp0_stage0_subdone = ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, m_axi_dram_AWREADY.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, m_axi_dram_WREADY.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, m_axi_dram_BVALID.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter7.read())));
}

void savekeyvalues0_1::thread_ap_block_state1_pp0_stage0_iter0() {
    ap_block_state1_pp0_stage0_iter0 = esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read());
}

void savekeyvalues0_1::thread_ap_block_state2_pp0_stage0_iter1() {
    ap_block_state2_pp0_stage0_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void savekeyvalues0_1::thread_ap_block_state3_pp0_stage0_iter2() {
    ap_block_state3_pp0_stage0_iter2 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void savekeyvalues0_1::thread_ap_block_state4_pp0_stage0_iter3() {
    ap_block_state4_pp0_stage0_iter3 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void savekeyvalues0_1::thread_ap_block_state5_pp0_stage0_iter4() {
    ap_block_state5_pp0_stage0_iter4 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void savekeyvalues0_1::thread_ap_block_state6_pp0_stage0_iter5() {
    ap_block_state6_pp0_stage0_iter5 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void savekeyvalues0_1::thread_ap_block_state7_pp0_stage0_iter6() {
    ap_block_state7_pp0_stage0_iter6 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void savekeyvalues0_1::thread_ap_block_state8_pp0_stage0_iter7() {
    ap_block_state8_pp0_stage0_iter7 = esl_seteq<1,1,1>(ap_const_logic_0, m_axi_dram_BVALID.read());
}

void savekeyvalues0_1::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter7.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void savekeyvalues0_1::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void savekeyvalues0_1::thread_ap_enable_reg_pp0_iter0() {
    ap_enable_reg_pp0_iter0 = ap_start.read();
}

void savekeyvalues0_1::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_idle_pp0.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void savekeyvalues0_1::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter2.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter3.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter4.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter5.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter6.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter7.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void savekeyvalues0_1::thread_ap_idle_pp0_0to6() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter2.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter3.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter4.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter5.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter6.read()))) {
        ap_idle_pp0_0to6 = ap_const_logic_1;
    } else {
        ap_idle_pp0_0to6 = ap_const_logic_0;
    }
}

void savekeyvalues0_1::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void savekeyvalues0_1::thread_ap_reset_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_idle_pp0_0to6.read()))) {
        ap_reset_idle_pp0 = ap_const_logic_1;
    } else {
        ap_reset_idle_pp0 = ap_const_logic_0;
    }
}

void savekeyvalues0_1::thread_dram_blk_n_AW() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()))) {
        dram_blk_n_AW = m_axi_dram_AWREADY.read();
    } else {
        dram_blk_n_AW = ap_const_logic_1;
    }
}

void savekeyvalues0_1::thread_dram_blk_n_B() {
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter7.read()))) {
        dram_blk_n_B = m_axi_dram_BVALID.read();
    } else {
        dram_blk_n_B = ap_const_logic_1;
    }
}

void savekeyvalues0_1::thread_dram_blk_n_W() {
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()))) {
        dram_blk_n_W = m_axi_dram_WREADY.read();
    } else {
        dram_blk_n_W = ap_const_logic_1;
    }
}

void savekeyvalues0_1::thread_m_axi_dram_ARADDR() {
    m_axi_dram_ARADDR = ap_const_lv32_0;
}

void savekeyvalues0_1::thread_m_axi_dram_ARBURST() {
    m_axi_dram_ARBURST = ap_const_lv2_0;
}

void savekeyvalues0_1::thread_m_axi_dram_ARCACHE() {
    m_axi_dram_ARCACHE = ap_const_lv4_0;
}

void savekeyvalues0_1::thread_m_axi_dram_ARID() {
    m_axi_dram_ARID = ap_const_lv1_0;
}

void savekeyvalues0_1::thread_m_axi_dram_ARLEN() {
    m_axi_dram_ARLEN = ap_const_lv32_0;
}

void savekeyvalues0_1::thread_m_axi_dram_ARLOCK() {
    m_axi_dram_ARLOCK = ap_const_lv2_0;
}

void savekeyvalues0_1::thread_m_axi_dram_ARPROT() {
    m_axi_dram_ARPROT = ap_const_lv3_0;
}

void savekeyvalues0_1::thread_m_axi_dram_ARQOS() {
    m_axi_dram_ARQOS = ap_const_lv4_0;
}

void savekeyvalues0_1::thread_m_axi_dram_ARREGION() {
    m_axi_dram_ARREGION = ap_const_lv4_0;
}

void savekeyvalues0_1::thread_m_axi_dram_ARSIZE() {
    m_axi_dram_ARSIZE = ap_const_lv3_0;
}

void savekeyvalues0_1::thread_m_axi_dram_ARUSER() {
    m_axi_dram_ARUSER = ap_const_lv1_0;
}

void savekeyvalues0_1::thread_m_axi_dram_ARVALID() {
    m_axi_dram_ARVALID = ap_const_logic_0;
}

void savekeyvalues0_1::thread_m_axi_dram_AWADDR() {
    m_axi_dram_AWADDR =  (sc_lv<32>) (zext_ln2517_5_fu_116_p1.read());
}

void savekeyvalues0_1::thread_m_axi_dram_AWBURST() {
    m_axi_dram_AWBURST = ap_const_lv2_0;
}

void savekeyvalues0_1::thread_m_axi_dram_AWCACHE() {
    m_axi_dram_AWCACHE = ap_const_lv4_0;
}

void savekeyvalues0_1::thread_m_axi_dram_AWID() {
    m_axi_dram_AWID = ap_const_lv1_0;
}

void savekeyvalues0_1::thread_m_axi_dram_AWLEN() {
    m_axi_dram_AWLEN = ap_const_lv32_1;
}

void savekeyvalues0_1::thread_m_axi_dram_AWLOCK() {
    m_axi_dram_AWLOCK = ap_const_lv2_0;
}

void savekeyvalues0_1::thread_m_axi_dram_AWPROT() {
    m_axi_dram_AWPROT = ap_const_lv3_0;
}

void savekeyvalues0_1::thread_m_axi_dram_AWQOS() {
    m_axi_dram_AWQOS = ap_const_lv4_0;
}

void savekeyvalues0_1::thread_m_axi_dram_AWREGION() {
    m_axi_dram_AWREGION = ap_const_lv4_0;
}

void savekeyvalues0_1::thread_m_axi_dram_AWSIZE() {
    m_axi_dram_AWSIZE = ap_const_lv3_0;
}

void savekeyvalues0_1::thread_m_axi_dram_AWUSER() {
    m_axi_dram_AWUSER = ap_const_lv1_0;
}

void savekeyvalues0_1::thread_m_axi_dram_AWVALID() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        m_axi_dram_AWVALID = ap_const_logic_1;
    } else {
        m_axi_dram_AWVALID = ap_const_logic_0;
    }
}

void savekeyvalues0_1::thread_m_axi_dram_BREADY() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter7.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        m_axi_dram_BREADY = ap_const_logic_1;
    } else {
        m_axi_dram_BREADY = ap_const_logic_0;
    }
}

void savekeyvalues0_1::thread_m_axi_dram_RREADY() {
    m_axi_dram_RREADY = ap_const_logic_0;
}

void savekeyvalues0_1::thread_m_axi_dram_WDATA() {
    m_axi_dram_WDATA = esl_concat<32,32>(buffer_0_value_read_1_reg_133_pp0_iter1_reg.read(), buffer_0_key_read_1_reg_138_pp0_iter1_reg.read());
}

void savekeyvalues0_1::thread_m_axi_dram_WID() {
    m_axi_dram_WID = ap_const_lv1_0;
}

void savekeyvalues0_1::thread_m_axi_dram_WLAST() {
    m_axi_dram_WLAST = ap_const_logic_0;
}

void savekeyvalues0_1::thread_m_axi_dram_WSTRB() {
    m_axi_dram_WSTRB = ap_const_lv8_FF;
}

void savekeyvalues0_1::thread_m_axi_dram_WUSER() {
    m_axi_dram_WUSER = ap_const_lv1_0;
}

void savekeyvalues0_1::thread_m_axi_dram_WVALID() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        m_axi_dram_WVALID = ap_const_logic_1;
    } else {
        m_axi_dram_WVALID = ap_const_logic_0;
    }
}

void savekeyvalues0_1::thread_zext_ln2517_4_fu_106_p1() {
    zext_ln2517_4_fu_106_p1 = esl_zext<33,29>(dram_offset.read());
}

void savekeyvalues0_1::thread_zext_ln2517_5_fu_116_p1() {
    zext_ln2517_5_fu_116_p1 = esl_zext<64,33>(add_ln2517_reg_143.read());
}

void savekeyvalues0_1::thread_zext_ln2517_fu_102_p1() {
    zext_ln2517_fu_102_p1 = esl_zext<33,32>(add_ln2517_1_fu_96_p2.read());
}

void savekeyvalues0_1::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
break;
        default : 
            ap_NS_fsm = "X";
            break;
    }
}

}

