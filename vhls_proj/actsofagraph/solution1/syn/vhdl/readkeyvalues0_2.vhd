-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1.3
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity readkeyvalues0_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    enable : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_kvdram_V_AWVALID : OUT STD_LOGIC;
    m_axi_kvdram_V_AWREADY : IN STD_LOGIC;
    m_axi_kvdram_V_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_kvdram_V_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_kvdram_V_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_kvdram_V_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_kvdram_V_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_kvdram_V_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_kvdram_V_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_kvdram_V_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_kvdram_V_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_kvdram_V_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_kvdram_V_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_kvdram_V_WVALID : OUT STD_LOGIC;
    m_axi_kvdram_V_WREADY : IN STD_LOGIC;
    m_axi_kvdram_V_WDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
    m_axi_kvdram_V_WSTRB : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_kvdram_V_WLAST : OUT STD_LOGIC;
    m_axi_kvdram_V_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_kvdram_V_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_kvdram_V_ARVALID : OUT STD_LOGIC;
    m_axi_kvdram_V_ARREADY : IN STD_LOGIC;
    m_axi_kvdram_V_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_kvdram_V_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_kvdram_V_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_kvdram_V_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_kvdram_V_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_kvdram_V_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_kvdram_V_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_kvdram_V_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_kvdram_V_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_kvdram_V_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_kvdram_V_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_kvdram_V_RVALID : IN STD_LOGIC;
    m_axi_kvdram_V_RREADY : OUT STD_LOGIC;
    m_axi_kvdram_V_RDATA : IN STD_LOGIC_VECTOR (511 downto 0);
    m_axi_kvdram_V_RLAST : IN STD_LOGIC;
    m_axi_kvdram_V_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_kvdram_V_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_kvdram_V_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_kvdram_V_BVALID : IN STD_LOGIC;
    m_axi_kvdram_V_BREADY : OUT STD_LOGIC;
    m_axi_kvdram_V_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_kvdram_V_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_kvdram_V_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    kvdram_V_offset : IN STD_LOGIC_VECTOR (25 downto 0);
    buffer0_V_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    buffer0_V_ce0 : OUT STD_LOGIC;
    buffer0_V_we0 : OUT STD_LOGIC;
    buffer0_V_d0 : OUT STD_LOGIC_VECTOR (511 downto 0);
    buffer1_V_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    buffer1_V_ce0 : OUT STD_LOGIC;
    buffer1_V_we0 : OUT STD_LOGIC;
    buffer1_V_d0 : OUT STD_LOGIC_VECTOR (511 downto 0);
    buffer2_V_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    buffer2_V_ce0 : OUT STD_LOGIC;
    buffer2_V_we0 : OUT STD_LOGIC;
    buffer2_V_d0 : OUT STD_LOGIC_VECTOR (511 downto 0);
    buffer3_V_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    buffer3_V_ce0 : OUT STD_LOGIC;
    buffer3_V_we0 : OUT STD_LOGIC;
    buffer3_V_d0 : OUT STD_LOGIC_VECTOR (511 downto 0);
    baseaddress : IN STD_LOGIC_VECTOR (24 downto 0);
    offset_kvs : IN STD_LOGIC_VECTOR (31 downto 0);
    travstate_i_kvs : IN STD_LOGIC_VECTOR (31 downto 0);
    travstate_end_kvs : IN STD_LOGIC_VECTOR (29 downto 0) );
end;


architecture behav of readkeyvalues0_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (8 downto 0) := "000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (8 downto 0) := "000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (8 downto 0) := "000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (8 downto 0) := "000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (8 downto 0) := "001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (8 downto 0) := "010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv512_lc_1 : STD_LOGIC_VECTOR (511 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_200 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000000000";
    constant ap_const_lv32_400 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000010000000000";
    constant ap_const_lv32_600 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000011000000000";
    constant ap_const_lv32_800 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000100000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal enable_read_read_fu_88_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal travstate_end_kvs_ca_fu_109_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal travstate_end_kvs_ca_reg_288 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_fu_119_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_298 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln1234_fu_125_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1234_reg_303 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln1233_fu_145_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln1233_reg_308 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln1233_4_fu_175_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln1233_4_reg_313 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal grp_readkeyvalues0_166_fu_94_ap_ready : STD_LOGIC;
    signal grp_readkeyvalues0_166_fu_94_ap_done : STD_LOGIC;
    signal select_ln1233_5_fu_205_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln1233_5_reg_318 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln1233_6_fu_236_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln1233_6_reg_323 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln1437_fu_244_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln1437_reg_328 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln1438_fu_249_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln1438_reg_333 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal add_ln1439_fu_254_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln1439_reg_338 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal grp_readkeyvalues0_166_fu_94_ap_start : STD_LOGIC;
    signal grp_readkeyvalues0_166_fu_94_ap_idle : STD_LOGIC;
    signal grp_readkeyvalues0_166_fu_94_m_axi_kvdram_V_AWVALID : STD_LOGIC;
    signal grp_readkeyvalues0_166_fu_94_m_axi_kvdram_V_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_readkeyvalues0_166_fu_94_m_axi_kvdram_V_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_readkeyvalues0_166_fu_94_m_axi_kvdram_V_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_readkeyvalues0_166_fu_94_m_axi_kvdram_V_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_readkeyvalues0_166_fu_94_m_axi_kvdram_V_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_readkeyvalues0_166_fu_94_m_axi_kvdram_V_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_readkeyvalues0_166_fu_94_m_axi_kvdram_V_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_readkeyvalues0_166_fu_94_m_axi_kvdram_V_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_readkeyvalues0_166_fu_94_m_axi_kvdram_V_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_readkeyvalues0_166_fu_94_m_axi_kvdram_V_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_readkeyvalues0_166_fu_94_m_axi_kvdram_V_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_readkeyvalues0_166_fu_94_m_axi_kvdram_V_WVALID : STD_LOGIC;
    signal grp_readkeyvalues0_166_fu_94_m_axi_kvdram_V_WDATA : STD_LOGIC_VECTOR (511 downto 0);
    signal grp_readkeyvalues0_166_fu_94_m_axi_kvdram_V_WSTRB : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_readkeyvalues0_166_fu_94_m_axi_kvdram_V_WLAST : STD_LOGIC;
    signal grp_readkeyvalues0_166_fu_94_m_axi_kvdram_V_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_readkeyvalues0_166_fu_94_m_axi_kvdram_V_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_readkeyvalues0_166_fu_94_m_axi_kvdram_V_ARVALID : STD_LOGIC;
    signal grp_readkeyvalues0_166_fu_94_m_axi_kvdram_V_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_readkeyvalues0_166_fu_94_m_axi_kvdram_V_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_readkeyvalues0_166_fu_94_m_axi_kvdram_V_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_readkeyvalues0_166_fu_94_m_axi_kvdram_V_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_readkeyvalues0_166_fu_94_m_axi_kvdram_V_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_readkeyvalues0_166_fu_94_m_axi_kvdram_V_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_readkeyvalues0_166_fu_94_m_axi_kvdram_V_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_readkeyvalues0_166_fu_94_m_axi_kvdram_V_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_readkeyvalues0_166_fu_94_m_axi_kvdram_V_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_readkeyvalues0_166_fu_94_m_axi_kvdram_V_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_readkeyvalues0_166_fu_94_m_axi_kvdram_V_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_readkeyvalues0_166_fu_94_m_axi_kvdram_V_RREADY : STD_LOGIC;
    signal grp_readkeyvalues0_166_fu_94_m_axi_kvdram_V_BREADY : STD_LOGIC;
    signal grp_readkeyvalues0_166_fu_94_buffer_V_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_readkeyvalues0_166_fu_94_buffer_V_ce0 : STD_LOGIC;
    signal grp_readkeyvalues0_166_fu_94_buffer_V_we0 : STD_LOGIC;
    signal grp_readkeyvalues0_166_fu_94_buffer_V_d0 : STD_LOGIC_VECTOR (511 downto 0);
    signal grp_readkeyvalues0_166_fu_94_offset_kvs : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_readkeyvalues0_166_fu_94_size_kvs : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_readkeyvalues0_166_fu_94_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal chunk0_size_fu_131_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln1233_fu_113_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln1234_fu_137_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_4_fu_153_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln1234_4_fu_158_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal chunk1_size_fu_163_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln1234_4_fu_167_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_5_fu_182_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln1234_5_fu_187_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal chunk2_size_fu_192_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln1234_5_fu_197_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln1234_fu_213_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln1234_6_fu_218_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal chunk3_size_fu_223_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln1234_6_fu_228_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state9_on_subcall_done : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (8 downto 0);

    component readkeyvalues0_166 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_kvdram_V_AWVALID : OUT STD_LOGIC;
        m_axi_kvdram_V_AWREADY : IN STD_LOGIC;
        m_axi_kvdram_V_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_kvdram_V_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_kvdram_V_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_kvdram_V_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_kvdram_V_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_kvdram_V_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_kvdram_V_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_kvdram_V_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_kvdram_V_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_kvdram_V_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_kvdram_V_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_kvdram_V_WVALID : OUT STD_LOGIC;
        m_axi_kvdram_V_WREADY : IN STD_LOGIC;
        m_axi_kvdram_V_WDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
        m_axi_kvdram_V_WSTRB : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_kvdram_V_WLAST : OUT STD_LOGIC;
        m_axi_kvdram_V_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_kvdram_V_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_kvdram_V_ARVALID : OUT STD_LOGIC;
        m_axi_kvdram_V_ARREADY : IN STD_LOGIC;
        m_axi_kvdram_V_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_kvdram_V_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_kvdram_V_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_kvdram_V_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_kvdram_V_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_kvdram_V_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_kvdram_V_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_kvdram_V_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_kvdram_V_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_kvdram_V_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_kvdram_V_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_kvdram_V_RVALID : IN STD_LOGIC;
        m_axi_kvdram_V_RREADY : OUT STD_LOGIC;
        m_axi_kvdram_V_RDATA : IN STD_LOGIC_VECTOR (511 downto 0);
        m_axi_kvdram_V_RLAST : IN STD_LOGIC;
        m_axi_kvdram_V_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_kvdram_V_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_kvdram_V_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_kvdram_V_BVALID : IN STD_LOGIC;
        m_axi_kvdram_V_BREADY : OUT STD_LOGIC;
        m_axi_kvdram_V_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_kvdram_V_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_kvdram_V_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        kvdram_V_offset : IN STD_LOGIC_VECTOR (25 downto 0);
        buffer_V_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        buffer_V_ce0 : OUT STD_LOGIC;
        buffer_V_we0 : OUT STD_LOGIC;
        buffer_V_d0 : OUT STD_LOGIC_VECTOR (511 downto 0);
        baseaddress : IN STD_LOGIC_VECTOR (24 downto 0);
        offset_kvs : IN STD_LOGIC_VECTOR (31 downto 0);
        size_kvs : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    grp_readkeyvalues0_166_fu_94 : component readkeyvalues0_166
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_readkeyvalues0_166_fu_94_ap_start,
        ap_done => grp_readkeyvalues0_166_fu_94_ap_done,
        ap_idle => grp_readkeyvalues0_166_fu_94_ap_idle,
        ap_ready => grp_readkeyvalues0_166_fu_94_ap_ready,
        m_axi_kvdram_V_AWVALID => grp_readkeyvalues0_166_fu_94_m_axi_kvdram_V_AWVALID,
        m_axi_kvdram_V_AWREADY => ap_const_logic_0,
        m_axi_kvdram_V_AWADDR => grp_readkeyvalues0_166_fu_94_m_axi_kvdram_V_AWADDR,
        m_axi_kvdram_V_AWID => grp_readkeyvalues0_166_fu_94_m_axi_kvdram_V_AWID,
        m_axi_kvdram_V_AWLEN => grp_readkeyvalues0_166_fu_94_m_axi_kvdram_V_AWLEN,
        m_axi_kvdram_V_AWSIZE => grp_readkeyvalues0_166_fu_94_m_axi_kvdram_V_AWSIZE,
        m_axi_kvdram_V_AWBURST => grp_readkeyvalues0_166_fu_94_m_axi_kvdram_V_AWBURST,
        m_axi_kvdram_V_AWLOCK => grp_readkeyvalues0_166_fu_94_m_axi_kvdram_V_AWLOCK,
        m_axi_kvdram_V_AWCACHE => grp_readkeyvalues0_166_fu_94_m_axi_kvdram_V_AWCACHE,
        m_axi_kvdram_V_AWPROT => grp_readkeyvalues0_166_fu_94_m_axi_kvdram_V_AWPROT,
        m_axi_kvdram_V_AWQOS => grp_readkeyvalues0_166_fu_94_m_axi_kvdram_V_AWQOS,
        m_axi_kvdram_V_AWREGION => grp_readkeyvalues0_166_fu_94_m_axi_kvdram_V_AWREGION,
        m_axi_kvdram_V_AWUSER => grp_readkeyvalues0_166_fu_94_m_axi_kvdram_V_AWUSER,
        m_axi_kvdram_V_WVALID => grp_readkeyvalues0_166_fu_94_m_axi_kvdram_V_WVALID,
        m_axi_kvdram_V_WREADY => ap_const_logic_0,
        m_axi_kvdram_V_WDATA => grp_readkeyvalues0_166_fu_94_m_axi_kvdram_V_WDATA,
        m_axi_kvdram_V_WSTRB => grp_readkeyvalues0_166_fu_94_m_axi_kvdram_V_WSTRB,
        m_axi_kvdram_V_WLAST => grp_readkeyvalues0_166_fu_94_m_axi_kvdram_V_WLAST,
        m_axi_kvdram_V_WID => grp_readkeyvalues0_166_fu_94_m_axi_kvdram_V_WID,
        m_axi_kvdram_V_WUSER => grp_readkeyvalues0_166_fu_94_m_axi_kvdram_V_WUSER,
        m_axi_kvdram_V_ARVALID => grp_readkeyvalues0_166_fu_94_m_axi_kvdram_V_ARVALID,
        m_axi_kvdram_V_ARREADY => m_axi_kvdram_V_ARREADY,
        m_axi_kvdram_V_ARADDR => grp_readkeyvalues0_166_fu_94_m_axi_kvdram_V_ARADDR,
        m_axi_kvdram_V_ARID => grp_readkeyvalues0_166_fu_94_m_axi_kvdram_V_ARID,
        m_axi_kvdram_V_ARLEN => grp_readkeyvalues0_166_fu_94_m_axi_kvdram_V_ARLEN,
        m_axi_kvdram_V_ARSIZE => grp_readkeyvalues0_166_fu_94_m_axi_kvdram_V_ARSIZE,
        m_axi_kvdram_V_ARBURST => grp_readkeyvalues0_166_fu_94_m_axi_kvdram_V_ARBURST,
        m_axi_kvdram_V_ARLOCK => grp_readkeyvalues0_166_fu_94_m_axi_kvdram_V_ARLOCK,
        m_axi_kvdram_V_ARCACHE => grp_readkeyvalues0_166_fu_94_m_axi_kvdram_V_ARCACHE,
        m_axi_kvdram_V_ARPROT => grp_readkeyvalues0_166_fu_94_m_axi_kvdram_V_ARPROT,
        m_axi_kvdram_V_ARQOS => grp_readkeyvalues0_166_fu_94_m_axi_kvdram_V_ARQOS,
        m_axi_kvdram_V_ARREGION => grp_readkeyvalues0_166_fu_94_m_axi_kvdram_V_ARREGION,
        m_axi_kvdram_V_ARUSER => grp_readkeyvalues0_166_fu_94_m_axi_kvdram_V_ARUSER,
        m_axi_kvdram_V_RVALID => m_axi_kvdram_V_RVALID,
        m_axi_kvdram_V_RREADY => grp_readkeyvalues0_166_fu_94_m_axi_kvdram_V_RREADY,
        m_axi_kvdram_V_RDATA => m_axi_kvdram_V_RDATA,
        m_axi_kvdram_V_RLAST => m_axi_kvdram_V_RLAST,
        m_axi_kvdram_V_RID => m_axi_kvdram_V_RID,
        m_axi_kvdram_V_RUSER => m_axi_kvdram_V_RUSER,
        m_axi_kvdram_V_RRESP => m_axi_kvdram_V_RRESP,
        m_axi_kvdram_V_BVALID => ap_const_logic_0,
        m_axi_kvdram_V_BREADY => grp_readkeyvalues0_166_fu_94_m_axi_kvdram_V_BREADY,
        m_axi_kvdram_V_BRESP => ap_const_lv2_0,
        m_axi_kvdram_V_BID => ap_const_lv1_0,
        m_axi_kvdram_V_BUSER => ap_const_lv1_0,
        kvdram_V_offset => kvdram_V_offset,
        buffer_V_address0 => grp_readkeyvalues0_166_fu_94_buffer_V_address0,
        buffer_V_ce0 => grp_readkeyvalues0_166_fu_94_buffer_V_ce0,
        buffer_V_we0 => grp_readkeyvalues0_166_fu_94_buffer_V_we0,
        buffer_V_d0 => grp_readkeyvalues0_166_fu_94_buffer_V_d0,
        baseaddress => baseaddress,
        offset_kvs => grp_readkeyvalues0_166_fu_94_offset_kvs,
        size_kvs => grp_readkeyvalues0_166_fu_94_size_kvs);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_readkeyvalues0_166_fu_94_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_readkeyvalues0_166_fu_94_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    grp_readkeyvalues0_166_fu_94_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_readkeyvalues0_166_fu_94_ap_ready = ap_const_logic_1)) then 
                    grp_readkeyvalues0_166_fu_94_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (grp_readkeyvalues0_166_fu_94_ap_done = ap_const_logic_1))) then
                add_ln1437_reg_328 <= add_ln1437_fu_244_p2;
                select_ln1233_4_reg_313 <= select_ln1233_4_fu_175_p3;
                select_ln1233_5_reg_318 <= select_ln1233_5_fu_205_p3;
                select_ln1233_6_reg_323 <= select_ln1233_6_fu_236_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (grp_readkeyvalues0_166_fu_94_ap_done = ap_const_logic_1))) then
                add_ln1438_reg_333 <= add_ln1438_fu_249_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (grp_readkeyvalues0_166_fu_94_ap_done = ap_const_logic_1))) then
                add_ln1439_reg_338 <= add_ln1439_fu_254_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1) and (enable = ap_const_lv1_1))) then
                i_reg_298 <= i_fu_119_p2;
                icmp_ln1234_reg_303 <= icmp_ln1234_fu_125_p2;
                select_ln1233_reg_308 <= select_ln1233_fu_145_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    travstate_end_kvs_ca_reg_288(29 downto 0) <= travstate_end_kvs_ca_fu_109_p1(29 downto 0);
            end if;
        end if;
    end process;
    travstate_end_kvs_ca_reg_288(31 downto 30) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, enable, enable_read_read_fu_88_p2, ap_CS_fsm_state3, grp_readkeyvalues0_166_fu_94_ap_done, ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_block_state9_on_subcall_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((enable_read_read_fu_88_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1) and (enable = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (grp_readkeyvalues0_166_fu_94_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (grp_readkeyvalues0_166_fu_94_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (grp_readkeyvalues0_166_fu_94_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                if (((ap_const_boolean_0 = ap_block_state9_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXX";
        end case;
    end process;
    add_ln1234_fu_213_p2 <= std_logic_vector(unsigned(travstate_i_kvs) + unsigned(ap_const_lv32_800));
    add_ln1437_fu_244_p2 <= std_logic_vector(unsigned(offset_kvs) + unsigned(ap_const_lv32_200));
    add_ln1438_fu_249_p2 <= std_logic_vector(unsigned(offset_kvs) + unsigned(ap_const_lv32_400));
    add_ln1439_fu_254_p2 <= std_logic_vector(unsigned(offset_kvs) + unsigned(ap_const_lv32_600));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state9_on_subcall_done_assign_proc : process(enable, grp_readkeyvalues0_166_fu_94_ap_done)
    begin
                ap_block_state9_on_subcall_done <= ((grp_readkeyvalues0_166_fu_94_ap_done = ap_const_logic_0) and (enable = ap_const_lv1_1));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state9, ap_block_state9_on_subcall_done)
    begin
        if ((((ap_const_boolean_0 = ap_block_state9_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state9, ap_block_state9_on_subcall_done)
    begin
        if (((ap_const_boolean_0 = ap_block_state9_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    buffer0_V_address0 <= grp_readkeyvalues0_166_fu_94_buffer_V_address0;

    buffer0_V_ce0_assign_proc : process(ap_CS_fsm_state3, grp_readkeyvalues0_166_fu_94_buffer_V_ce0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            buffer0_V_ce0 <= grp_readkeyvalues0_166_fu_94_buffer_V_ce0;
        else 
            buffer0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer0_V_d0 <= grp_readkeyvalues0_166_fu_94_buffer_V_d0;

    buffer0_V_we0_assign_proc : process(ap_CS_fsm_state3, grp_readkeyvalues0_166_fu_94_buffer_V_we0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            buffer0_V_we0 <= grp_readkeyvalues0_166_fu_94_buffer_V_we0;
        else 
            buffer0_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_V_address0 <= grp_readkeyvalues0_166_fu_94_buffer_V_address0;

    buffer1_V_ce0_assign_proc : process(ap_CS_fsm_state5, grp_readkeyvalues0_166_fu_94_buffer_V_ce0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            buffer1_V_ce0 <= grp_readkeyvalues0_166_fu_94_buffer_V_ce0;
        else 
            buffer1_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_V_d0 <= grp_readkeyvalues0_166_fu_94_buffer_V_d0;

    buffer1_V_we0_assign_proc : process(ap_CS_fsm_state5, grp_readkeyvalues0_166_fu_94_buffer_V_we0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            buffer1_V_we0 <= grp_readkeyvalues0_166_fu_94_buffer_V_we0;
        else 
            buffer1_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer2_V_address0 <= grp_readkeyvalues0_166_fu_94_buffer_V_address0;

    buffer2_V_ce0_assign_proc : process(ap_CS_fsm_state7, grp_readkeyvalues0_166_fu_94_buffer_V_ce0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            buffer2_V_ce0 <= grp_readkeyvalues0_166_fu_94_buffer_V_ce0;
        else 
            buffer2_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer2_V_d0 <= grp_readkeyvalues0_166_fu_94_buffer_V_d0;

    buffer2_V_we0_assign_proc : process(ap_CS_fsm_state7, grp_readkeyvalues0_166_fu_94_buffer_V_we0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            buffer2_V_we0 <= grp_readkeyvalues0_166_fu_94_buffer_V_we0;
        else 
            buffer2_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer3_V_address0 <= grp_readkeyvalues0_166_fu_94_buffer_V_address0;

    buffer3_V_ce0_assign_proc : process(enable, grp_readkeyvalues0_166_fu_94_buffer_V_ce0, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) and (enable = ap_const_lv1_1))) then 
            buffer3_V_ce0 <= grp_readkeyvalues0_166_fu_94_buffer_V_ce0;
        else 
            buffer3_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer3_V_d0 <= grp_readkeyvalues0_166_fu_94_buffer_V_d0;

    buffer3_V_we0_assign_proc : process(enable, grp_readkeyvalues0_166_fu_94_buffer_V_we0, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) and (enable = ap_const_lv1_1))) then 
            buffer3_V_we0 <= grp_readkeyvalues0_166_fu_94_buffer_V_we0;
        else 
            buffer3_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    chunk0_size_fu_131_p2 <= std_logic_vector(unsigned(travstate_end_kvs_ca_fu_109_p1) - unsigned(travstate_i_kvs));
    chunk1_size_fu_163_p2 <= std_logic_vector(unsigned(travstate_end_kvs_ca_reg_288) - unsigned(i_reg_298));
    chunk2_size_fu_192_p2 <= std_logic_vector(unsigned(travstate_end_kvs_ca_reg_288) - unsigned(i_4_fu_153_p2));
    chunk3_size_fu_223_p2 <= std_logic_vector(unsigned(travstate_end_kvs_ca_reg_288) - unsigned(i_5_fu_182_p2));
    enable_read_read_fu_88_p2 <= enable;
    grp_readkeyvalues0_166_fu_94_ap_start <= grp_readkeyvalues0_166_fu_94_ap_start_reg;

    grp_readkeyvalues0_166_fu_94_offset_kvs_assign_proc : process(enable, offset_kvs, ap_CS_fsm_state3, add_ln1437_reg_328, add_ln1438_reg_333, ap_CS_fsm_state5, add_ln1439_reg_338, ap_CS_fsm_state7, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) and (enable = ap_const_lv1_1))) then 
            grp_readkeyvalues0_166_fu_94_offset_kvs <= add_ln1439_reg_338;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_readkeyvalues0_166_fu_94_offset_kvs <= add_ln1438_reg_333;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_readkeyvalues0_166_fu_94_offset_kvs <= add_ln1437_reg_328;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_readkeyvalues0_166_fu_94_offset_kvs <= offset_kvs;
        else 
            grp_readkeyvalues0_166_fu_94_offset_kvs <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_readkeyvalues0_166_fu_94_size_kvs_assign_proc : process(enable, select_ln1233_reg_308, select_ln1233_4_reg_313, ap_CS_fsm_state3, select_ln1233_5_reg_318, select_ln1233_6_reg_323, ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) and (enable = ap_const_lv1_1))) then 
            grp_readkeyvalues0_166_fu_94_size_kvs <= select_ln1233_6_reg_323;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_readkeyvalues0_166_fu_94_size_kvs <= select_ln1233_5_reg_318;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_readkeyvalues0_166_fu_94_size_kvs <= select_ln1233_4_reg_313;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_readkeyvalues0_166_fu_94_size_kvs <= select_ln1233_reg_308;
        else 
            grp_readkeyvalues0_166_fu_94_size_kvs <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    i_4_fu_153_p2 <= std_logic_vector(unsigned(travstate_i_kvs) + unsigned(ap_const_lv32_400));
    i_5_fu_182_p2 <= std_logic_vector(unsigned(travstate_i_kvs) + unsigned(ap_const_lv32_600));
    i_fu_119_p2 <= std_logic_vector(unsigned(travstate_i_kvs) + unsigned(ap_const_lv32_200));
    icmp_ln1233_fu_113_p2 <= "1" when (unsigned(travstate_end_kvs_ca_fu_109_p1) < unsigned(travstate_i_kvs)) else "0";
    icmp_ln1234_4_fu_158_p2 <= "1" when (unsigned(i_4_fu_153_p2) > unsigned(travstate_end_kvs_ca_reg_288)) else "0";
    icmp_ln1234_5_fu_187_p2 <= "1" when (unsigned(i_5_fu_182_p2) > unsigned(travstate_end_kvs_ca_reg_288)) else "0";
    icmp_ln1234_6_fu_218_p2 <= "1" when (unsigned(add_ln1234_fu_213_p2) > unsigned(travstate_end_kvs_ca_reg_288)) else "0";
    icmp_ln1234_fu_125_p2 <= "1" when (unsigned(i_fu_119_p2) > unsigned(travstate_end_kvs_ca_fu_109_p1)) else "0";
    m_axi_kvdram_V_ARADDR <= grp_readkeyvalues0_166_fu_94_m_axi_kvdram_V_ARADDR;
    m_axi_kvdram_V_ARBURST <= grp_readkeyvalues0_166_fu_94_m_axi_kvdram_V_ARBURST;
    m_axi_kvdram_V_ARCACHE <= grp_readkeyvalues0_166_fu_94_m_axi_kvdram_V_ARCACHE;
    m_axi_kvdram_V_ARID <= grp_readkeyvalues0_166_fu_94_m_axi_kvdram_V_ARID;
    m_axi_kvdram_V_ARLEN <= grp_readkeyvalues0_166_fu_94_m_axi_kvdram_V_ARLEN;
    m_axi_kvdram_V_ARLOCK <= grp_readkeyvalues0_166_fu_94_m_axi_kvdram_V_ARLOCK;
    m_axi_kvdram_V_ARPROT <= grp_readkeyvalues0_166_fu_94_m_axi_kvdram_V_ARPROT;
    m_axi_kvdram_V_ARQOS <= grp_readkeyvalues0_166_fu_94_m_axi_kvdram_V_ARQOS;
    m_axi_kvdram_V_ARREGION <= grp_readkeyvalues0_166_fu_94_m_axi_kvdram_V_ARREGION;
    m_axi_kvdram_V_ARSIZE <= grp_readkeyvalues0_166_fu_94_m_axi_kvdram_V_ARSIZE;
    m_axi_kvdram_V_ARUSER <= grp_readkeyvalues0_166_fu_94_m_axi_kvdram_V_ARUSER;

    m_axi_kvdram_V_ARVALID_assign_proc : process(enable, ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state7, grp_readkeyvalues0_166_fu_94_m_axi_kvdram_V_ARVALID, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_const_logic_1 = ap_CS_fsm_state9) and (enable = ap_const_lv1_1)))) then 
            m_axi_kvdram_V_ARVALID <= grp_readkeyvalues0_166_fu_94_m_axi_kvdram_V_ARVALID;
        else 
            m_axi_kvdram_V_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_kvdram_V_AWADDR <= ap_const_lv32_0;
    m_axi_kvdram_V_AWBURST <= ap_const_lv2_0;
    m_axi_kvdram_V_AWCACHE <= ap_const_lv4_0;
    m_axi_kvdram_V_AWID <= ap_const_lv1_0;
    m_axi_kvdram_V_AWLEN <= ap_const_lv32_0;
    m_axi_kvdram_V_AWLOCK <= ap_const_lv2_0;
    m_axi_kvdram_V_AWPROT <= ap_const_lv3_0;
    m_axi_kvdram_V_AWQOS <= ap_const_lv4_0;
    m_axi_kvdram_V_AWREGION <= ap_const_lv4_0;
    m_axi_kvdram_V_AWSIZE <= ap_const_lv3_0;
    m_axi_kvdram_V_AWUSER <= ap_const_lv1_0;
    m_axi_kvdram_V_AWVALID <= ap_const_logic_0;
    m_axi_kvdram_V_BREADY <= ap_const_logic_0;

    m_axi_kvdram_V_RREADY_assign_proc : process(enable, ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state7, grp_readkeyvalues0_166_fu_94_m_axi_kvdram_V_RREADY, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_const_logic_1 = ap_CS_fsm_state9) and (enable = ap_const_lv1_1)))) then 
            m_axi_kvdram_V_RREADY <= grp_readkeyvalues0_166_fu_94_m_axi_kvdram_V_RREADY;
        else 
            m_axi_kvdram_V_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_kvdram_V_WDATA <= ap_const_lv512_lc_1;
    m_axi_kvdram_V_WID <= ap_const_lv1_0;
    m_axi_kvdram_V_WLAST <= ap_const_logic_0;
    m_axi_kvdram_V_WSTRB <= ap_const_lv64_0;
    m_axi_kvdram_V_WUSER <= ap_const_lv1_0;
    m_axi_kvdram_V_WVALID <= ap_const_logic_0;
    select_ln1233_4_fu_175_p3 <= 
        ap_const_lv32_0 when (icmp_ln1234_reg_303(0) = '1') else 
        select_ln1234_4_fu_167_p3;
    select_ln1233_5_fu_205_p3 <= 
        ap_const_lv32_0 when (icmp_ln1234_4_fu_158_p2(0) = '1') else 
        select_ln1234_5_fu_197_p3;
    select_ln1233_6_fu_236_p3 <= 
        ap_const_lv32_0 when (icmp_ln1234_5_fu_187_p2(0) = '1') else 
        select_ln1234_6_fu_228_p3;
    select_ln1233_fu_145_p3 <= 
        ap_const_lv32_0 when (icmp_ln1233_fu_113_p2(0) = '1') else 
        select_ln1234_fu_137_p3;
    select_ln1234_4_fu_167_p3 <= 
        chunk1_size_fu_163_p2 when (icmp_ln1234_4_fu_158_p2(0) = '1') else 
        ap_const_lv32_200;
    select_ln1234_5_fu_197_p3 <= 
        chunk2_size_fu_192_p2 when (icmp_ln1234_5_fu_187_p2(0) = '1') else 
        ap_const_lv32_200;
    select_ln1234_6_fu_228_p3 <= 
        chunk3_size_fu_223_p2 when (icmp_ln1234_6_fu_218_p2(0) = '1') else 
        ap_const_lv32_200;
    select_ln1234_fu_137_p3 <= 
        chunk0_size_fu_131_p2 when (icmp_ln1234_fu_125_p2(0) = '1') else 
        ap_const_lv32_200;
    travstate_end_kvs_ca_fu_109_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(travstate_end_kvs),32));
end behav;
