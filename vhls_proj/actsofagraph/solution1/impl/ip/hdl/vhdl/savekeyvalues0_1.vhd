-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1.3
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity savekeyvalues0_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_dram_AWVALID : OUT STD_LOGIC;
    m_axi_dram_AWREADY : IN STD_LOGIC;
    m_axi_dram_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_dram_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_dram_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_dram_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_dram_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_dram_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_dram_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_dram_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_dram_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_dram_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_dram_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_dram_WVALID : OUT STD_LOGIC;
    m_axi_dram_WREADY : IN STD_LOGIC;
    m_axi_dram_WDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_dram_WSTRB : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_dram_WLAST : OUT STD_LOGIC;
    m_axi_dram_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_dram_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_dram_ARVALID : OUT STD_LOGIC;
    m_axi_dram_ARREADY : IN STD_LOGIC;
    m_axi_dram_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_dram_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_dram_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_dram_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_dram_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_dram_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_dram_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_dram_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_dram_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_dram_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_dram_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_dram_RVALID : IN STD_LOGIC;
    m_axi_dram_RREADY : OUT STD_LOGIC;
    m_axi_dram_RDATA : IN STD_LOGIC_VECTOR (63 downto 0);
    m_axi_dram_RLAST : IN STD_LOGIC;
    m_axi_dram_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_dram_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_dram_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_dram_BVALID : IN STD_LOGIC;
    m_axi_dram_BREADY : OUT STD_LOGIC;
    m_axi_dram_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_dram_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_dram_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    dram_offset : IN STD_LOGIC_VECTOR (28 downto 0);
    buffer_0_key_read : IN STD_LOGIC_VECTOR (31 downto 0);
    buffer_0_value_read : IN STD_LOGIC_VECTOR (31 downto 0);
    offset_kvs : IN STD_LOGIC_VECTOR (31 downto 0);
    dram_blk_n_AW : OUT STD_LOGIC;
    dram_blk_n_W : OUT STD_LOGIC;
    dram_blk_n_B : OUT STD_LOGIC );
end;


architecture behav of savekeyvalues0_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv32_18400 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000011000010000000000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal buffer_0_value_read_1_reg_133 : STD_LOGIC_VECTOR (31 downto 0);
    signal buffer_0_value_read_1_reg_133_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal buffer_0_key_read_1_reg_138 : STD_LOGIC_VECTOR (31 downto 0);
    signal buffer_0_key_read_1_reg_138_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln2517_fu_110_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal add_ln2517_reg_143 : STD_LOGIC_VECTOR (32 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal zext_ln2517_5_fu_116_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal add_ln2517_1_fu_96_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln2517_fu_102_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal zext_ln2517_4_fu_106_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to6 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln2517_reg_143 <= add_ln2517_fu_110_p2;
                buffer_0_key_read_1_reg_138 <= buffer_0_key_read;
                buffer_0_key_read_1_reg_138_pp0_iter1_reg <= buffer_0_key_read_1_reg_138;
                buffer_0_value_read_1_reg_133 <= buffer_0_value_read;
                buffer_0_value_read_1_reg_133_pp0_iter1_reg <= buffer_0_value_read_1_reg_133;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln2517_1_fu_96_p2 <= std_logic_vector(unsigned(offset_kvs) + unsigned(ap_const_lv32_18400));
    add_ln2517_fu_110_p2 <= std_logic_vector(unsigned(zext_ln2517_fu_102_p1) + unsigned(zext_ln2517_4_fu_106_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_start, ap_enable_reg_pp0_iter7, m_axi_dram_BVALID)
    begin
                ap_block_pp0_stage0_01001 <= (((ap_start = ap_const_logic_0) and (ap_start = ap_const_logic_1)) or ((m_axi_dram_BVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_start, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter7, m_axi_dram_AWREADY, m_axi_dram_WREADY, m_axi_dram_BVALID)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_start = ap_const_logic_0) and (ap_start = ap_const_logic_1)) or ((m_axi_dram_BVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1)) or ((m_axi_dram_WREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((m_axi_dram_AWREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_start, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter7, m_axi_dram_AWREADY, m_axi_dram_WREADY, m_axi_dram_BVALID)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_start = ap_const_logic_0) and (ap_start = ap_const_logic_1)) or ((m_axi_dram_BVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1)) or ((m_axi_dram_WREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((m_axi_dram_AWREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_start = ap_const_logic_0);
    end process;

        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state8_pp0_stage0_iter7_assign_proc : process(m_axi_dram_BVALID)
    begin
                ap_block_state8_pp0_stage0_iter7 <= (m_axi_dram_BVALID = ap_const_logic_0);
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter7, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7)
    begin
        if (((ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to6_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to6 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to6 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to6)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to6 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    dram_blk_n_AW_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter1, m_axi_dram_AWREADY)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            dram_blk_n_AW <= m_axi_dram_AWREADY;
        else 
            dram_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    dram_blk_n_B_assign_proc : process(ap_block_pp0_stage0, ap_enable_reg_pp0_iter7, m_axi_dram_BVALID)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1))) then 
            dram_blk_n_B <= m_axi_dram_BVALID;
        else 
            dram_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    dram_blk_n_W_assign_proc : process(ap_block_pp0_stage0, ap_enable_reg_pp0_iter2, m_axi_dram_WREADY)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            dram_blk_n_W <= m_axi_dram_WREADY;
        else 
            dram_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    m_axi_dram_ARADDR <= ap_const_lv32_0;
    m_axi_dram_ARBURST <= ap_const_lv2_0;
    m_axi_dram_ARCACHE <= ap_const_lv4_0;
    m_axi_dram_ARID <= ap_const_lv1_0;
    m_axi_dram_ARLEN <= ap_const_lv32_0;
    m_axi_dram_ARLOCK <= ap_const_lv2_0;
    m_axi_dram_ARPROT <= ap_const_lv3_0;
    m_axi_dram_ARQOS <= ap_const_lv4_0;
    m_axi_dram_ARREGION <= ap_const_lv4_0;
    m_axi_dram_ARSIZE <= ap_const_lv3_0;
    m_axi_dram_ARUSER <= ap_const_lv1_0;
    m_axi_dram_ARVALID <= ap_const_logic_0;
    m_axi_dram_AWADDR <= zext_ln2517_5_fu_116_p1(32 - 1 downto 0);
    m_axi_dram_AWBURST <= ap_const_lv2_0;
    m_axi_dram_AWCACHE <= ap_const_lv4_0;
    m_axi_dram_AWID <= ap_const_lv1_0;
    m_axi_dram_AWLEN <= ap_const_lv32_1;
    m_axi_dram_AWLOCK <= ap_const_lv2_0;
    m_axi_dram_AWPROT <= ap_const_lv3_0;
    m_axi_dram_AWQOS <= ap_const_lv4_0;
    m_axi_dram_AWREGION <= ap_const_lv4_0;
    m_axi_dram_AWSIZE <= ap_const_lv3_0;
    m_axi_dram_AWUSER <= ap_const_lv1_0;

    m_axi_dram_AWVALID_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            m_axi_dram_AWVALID <= ap_const_logic_1;
        else 
            m_axi_dram_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_dram_BREADY_assign_proc : process(ap_enable_reg_pp0_iter7, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            m_axi_dram_BREADY <= ap_const_logic_1;
        else 
            m_axi_dram_BREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_dram_RREADY <= ap_const_logic_0;
    m_axi_dram_WDATA <= (buffer_0_value_read_1_reg_133_pp0_iter1_reg & buffer_0_key_read_1_reg_138_pp0_iter1_reg);
    m_axi_dram_WID <= ap_const_lv1_0;
    m_axi_dram_WLAST <= ap_const_logic_0;
    m_axi_dram_WSTRB <= ap_const_lv8_FF;
    m_axi_dram_WUSER <= ap_const_lv1_0;

    m_axi_dram_WVALID_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            m_axi_dram_WVALID <= ap_const_logic_1;
        else 
            m_axi_dram_WVALID <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln2517_4_fu_106_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(dram_offset),33));
    zext_ln2517_5_fu_116_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln2517_reg_143),64));
    zext_ln2517_fu_102_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln2517_1_fu_96_p2),33));
end behav;
