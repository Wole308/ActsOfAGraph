// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1.3
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module savekeyvalues0_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_dram_AWVALID,
        m_axi_dram_AWREADY,
        m_axi_dram_AWADDR,
        m_axi_dram_AWID,
        m_axi_dram_AWLEN,
        m_axi_dram_AWSIZE,
        m_axi_dram_AWBURST,
        m_axi_dram_AWLOCK,
        m_axi_dram_AWCACHE,
        m_axi_dram_AWPROT,
        m_axi_dram_AWQOS,
        m_axi_dram_AWREGION,
        m_axi_dram_AWUSER,
        m_axi_dram_WVALID,
        m_axi_dram_WREADY,
        m_axi_dram_WDATA,
        m_axi_dram_WSTRB,
        m_axi_dram_WLAST,
        m_axi_dram_WID,
        m_axi_dram_WUSER,
        m_axi_dram_ARVALID,
        m_axi_dram_ARREADY,
        m_axi_dram_ARADDR,
        m_axi_dram_ARID,
        m_axi_dram_ARLEN,
        m_axi_dram_ARSIZE,
        m_axi_dram_ARBURST,
        m_axi_dram_ARLOCK,
        m_axi_dram_ARCACHE,
        m_axi_dram_ARPROT,
        m_axi_dram_ARQOS,
        m_axi_dram_ARREGION,
        m_axi_dram_ARUSER,
        m_axi_dram_RVALID,
        m_axi_dram_RREADY,
        m_axi_dram_RDATA,
        m_axi_dram_RLAST,
        m_axi_dram_RID,
        m_axi_dram_RUSER,
        m_axi_dram_RRESP,
        m_axi_dram_BVALID,
        m_axi_dram_BREADY,
        m_axi_dram_BRESP,
        m_axi_dram_BID,
        m_axi_dram_BUSER,
        dram_offset,
        buffer_0_key_read,
        buffer_0_value_read,
        offset_kvs,
        dram_blk_n_AW,
        dram_blk_n_W,
        dram_blk_n_B
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_dram_AWVALID;
input   m_axi_dram_AWREADY;
output  [31:0] m_axi_dram_AWADDR;
output  [0:0] m_axi_dram_AWID;
output  [31:0] m_axi_dram_AWLEN;
output  [2:0] m_axi_dram_AWSIZE;
output  [1:0] m_axi_dram_AWBURST;
output  [1:0] m_axi_dram_AWLOCK;
output  [3:0] m_axi_dram_AWCACHE;
output  [2:0] m_axi_dram_AWPROT;
output  [3:0] m_axi_dram_AWQOS;
output  [3:0] m_axi_dram_AWREGION;
output  [0:0] m_axi_dram_AWUSER;
output   m_axi_dram_WVALID;
input   m_axi_dram_WREADY;
output  [63:0] m_axi_dram_WDATA;
output  [7:0] m_axi_dram_WSTRB;
output   m_axi_dram_WLAST;
output  [0:0] m_axi_dram_WID;
output  [0:0] m_axi_dram_WUSER;
output   m_axi_dram_ARVALID;
input   m_axi_dram_ARREADY;
output  [31:0] m_axi_dram_ARADDR;
output  [0:0] m_axi_dram_ARID;
output  [31:0] m_axi_dram_ARLEN;
output  [2:0] m_axi_dram_ARSIZE;
output  [1:0] m_axi_dram_ARBURST;
output  [1:0] m_axi_dram_ARLOCK;
output  [3:0] m_axi_dram_ARCACHE;
output  [2:0] m_axi_dram_ARPROT;
output  [3:0] m_axi_dram_ARQOS;
output  [3:0] m_axi_dram_ARREGION;
output  [0:0] m_axi_dram_ARUSER;
input   m_axi_dram_RVALID;
output   m_axi_dram_RREADY;
input  [63:0] m_axi_dram_RDATA;
input   m_axi_dram_RLAST;
input  [0:0] m_axi_dram_RID;
input  [0:0] m_axi_dram_RUSER;
input  [1:0] m_axi_dram_RRESP;
input   m_axi_dram_BVALID;
output   m_axi_dram_BREADY;
input  [1:0] m_axi_dram_BRESP;
input  [0:0] m_axi_dram_BID;
input  [0:0] m_axi_dram_BUSER;
input  [28:0] dram_offset;
input  [31:0] buffer_0_key_read;
input  [31:0] buffer_0_value_read;
input  [31:0] offset_kvs;
output   dram_blk_n_AW;
output   dram_blk_n_W;
output   dram_blk_n_B;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg m_axi_dram_AWVALID;
reg m_axi_dram_WVALID;
reg m_axi_dram_BREADY;
reg dram_blk_n_AW;
reg dram_blk_n_W;
reg dram_blk_n_B;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_idle_pp0;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_state7_pp0_stage0_iter6;
reg    ap_block_state8_pp0_stage0_iter7;
reg    ap_block_pp0_stage0_11001;
reg   [31:0] buffer_0_value_read_1_reg_133;
reg   [31:0] buffer_0_value_read_1_reg_133_pp0_iter1_reg;
reg   [31:0] buffer_0_key_read_1_reg_138;
reg   [31:0] buffer_0_key_read_1_reg_138_pp0_iter1_reg;
wire   [32:0] add_ln2517_fu_110_p2;
reg   [32:0] add_ln2517_reg_143;
reg    ap_block_pp0_stage0_subdone;
wire   [63:0] zext_ln2517_5_fu_116_p1;
reg    ap_block_pp0_stage0_01001;
wire   [31:0] add_ln2517_1_fu_96_p2;
wire   [32:0] zext_ln2517_fu_102_p1;
wire   [32:0] zext_ln2517_4_fu_106_p1;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to6;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln2517_reg_143 <= add_ln2517_fu_110_p2;
        buffer_0_key_read_1_reg_138 <= buffer_0_key_read;
        buffer_0_key_read_1_reg_138_pp0_iter1_reg <= buffer_0_key_read_1_reg_138;
        buffer_0_value_read_1_reg_133 <= buffer_0_value_read;
        buffer_0_value_read_1_reg_133_pp0_iter1_reg <= buffer_0_value_read_1_reg_133;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((ap_enable_reg_pp0_iter7 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to6 = 1'b1;
    end else begin
        ap_idle_pp0_0to6 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to6 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        dram_blk_n_AW = m_axi_dram_AWREADY;
    end else begin
        dram_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        dram_blk_n_B = m_axi_dram_BVALID;
    end else begin
        dram_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        dram_blk_n_W = m_axi_dram_WREADY;
    end else begin
        dram_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        m_axi_dram_AWVALID = 1'b1;
    end else begin
        m_axi_dram_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter7 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        m_axi_dram_BREADY = 1'b1;
    end else begin
        m_axi_dram_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        m_axi_dram_WVALID = 1'b1;
    end else begin
        m_axi_dram_WVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln2517_1_fu_96_p2 = (offset_kvs + 32'd99328);

assign add_ln2517_fu_110_p2 = (zext_ln2517_fu_102_p1 + zext_ln2517_4_fu_106_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_start == 1'b0) & (ap_start == 1'b1)) | ((m_axi_dram_BVALID == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_start == 1'b0) & (ap_start == 1'b1)) | ((m_axi_dram_BVALID == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b1)) | ((m_axi_dram_WREADY == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((m_axi_dram_AWREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_start == 1'b0) & (ap_start == 1'b1)) | ((m_axi_dram_BVALID == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b1)) | ((m_axi_dram_WREADY == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((m_axi_dram_AWREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start == 1'b0);
end

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state8_pp0_stage0_iter7 = (m_axi_dram_BVALID == 1'b0);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign m_axi_dram_ARADDR = 32'd0;

assign m_axi_dram_ARBURST = 2'd0;

assign m_axi_dram_ARCACHE = 4'd0;

assign m_axi_dram_ARID = 1'd0;

assign m_axi_dram_ARLEN = 32'd0;

assign m_axi_dram_ARLOCK = 2'd0;

assign m_axi_dram_ARPROT = 3'd0;

assign m_axi_dram_ARQOS = 4'd0;

assign m_axi_dram_ARREGION = 4'd0;

assign m_axi_dram_ARSIZE = 3'd0;

assign m_axi_dram_ARUSER = 1'd0;

assign m_axi_dram_ARVALID = 1'b0;

assign m_axi_dram_AWADDR = zext_ln2517_5_fu_116_p1;

assign m_axi_dram_AWBURST = 2'd0;

assign m_axi_dram_AWCACHE = 4'd0;

assign m_axi_dram_AWID = 1'd0;

assign m_axi_dram_AWLEN = 32'd1;

assign m_axi_dram_AWLOCK = 2'd0;

assign m_axi_dram_AWPROT = 3'd0;

assign m_axi_dram_AWQOS = 4'd0;

assign m_axi_dram_AWREGION = 4'd0;

assign m_axi_dram_AWSIZE = 3'd0;

assign m_axi_dram_AWUSER = 1'd0;

assign m_axi_dram_RREADY = 1'b0;

assign m_axi_dram_WDATA = {{buffer_0_value_read_1_reg_133_pp0_iter1_reg}, {buffer_0_key_read_1_reg_138_pp0_iter1_reg}};

assign m_axi_dram_WID = 1'd0;

assign m_axi_dram_WLAST = 1'b0;

assign m_axi_dram_WSTRB = 8'd255;

assign m_axi_dram_WUSER = 1'd0;

assign zext_ln2517_4_fu_106_p1 = dram_offset;

assign zext_ln2517_5_fu_116_p1 = add_ln2517_reg_143;

assign zext_ln2517_fu_102_p1 = add_ln2517_1_fu_96_p2;

endmodule //savekeyvalues0_1
