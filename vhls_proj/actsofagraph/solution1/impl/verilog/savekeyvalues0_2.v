// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1.3
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module savekeyvalues0_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_kvdram_V_AWVALID,
        m_axi_kvdram_V_AWREADY,
        m_axi_kvdram_V_AWADDR,
        m_axi_kvdram_V_AWID,
        m_axi_kvdram_V_AWLEN,
        m_axi_kvdram_V_AWSIZE,
        m_axi_kvdram_V_AWBURST,
        m_axi_kvdram_V_AWLOCK,
        m_axi_kvdram_V_AWCACHE,
        m_axi_kvdram_V_AWPROT,
        m_axi_kvdram_V_AWQOS,
        m_axi_kvdram_V_AWREGION,
        m_axi_kvdram_V_AWUSER,
        m_axi_kvdram_V_WVALID,
        m_axi_kvdram_V_WREADY,
        m_axi_kvdram_V_WDATA,
        m_axi_kvdram_V_WSTRB,
        m_axi_kvdram_V_WLAST,
        m_axi_kvdram_V_WID,
        m_axi_kvdram_V_WUSER,
        m_axi_kvdram_V_ARVALID,
        m_axi_kvdram_V_ARREADY,
        m_axi_kvdram_V_ARADDR,
        m_axi_kvdram_V_ARID,
        m_axi_kvdram_V_ARLEN,
        m_axi_kvdram_V_ARSIZE,
        m_axi_kvdram_V_ARBURST,
        m_axi_kvdram_V_ARLOCK,
        m_axi_kvdram_V_ARCACHE,
        m_axi_kvdram_V_ARPROT,
        m_axi_kvdram_V_ARQOS,
        m_axi_kvdram_V_ARREGION,
        m_axi_kvdram_V_ARUSER,
        m_axi_kvdram_V_RVALID,
        m_axi_kvdram_V_RREADY,
        m_axi_kvdram_V_RDATA,
        m_axi_kvdram_V_RLAST,
        m_axi_kvdram_V_RID,
        m_axi_kvdram_V_RUSER,
        m_axi_kvdram_V_RRESP,
        m_axi_kvdram_V_BVALID,
        m_axi_kvdram_V_BREADY,
        m_axi_kvdram_V_BRESP,
        m_axi_kvdram_V_BID,
        m_axi_kvdram_V_BUSER,
        kvdram_V_offset,
        buffer30_key_address0,
        buffer30_key_ce0,
        buffer30_key_q0,
        buffer30_value_address0,
        buffer30_value_ce0,
        buffer30_value_q0,
        buffer31_key_address0,
        buffer31_key_ce0,
        buffer31_key_q0,
        buffer31_value_address0,
        buffer31_value_ce0,
        buffer31_value_q0,
        buffer32_key_address0,
        buffer32_key_ce0,
        buffer32_key_q0,
        buffer32_value_address0,
        buffer32_value_ce0,
        buffer32_value_q0,
        buffer33_key_address0,
        buffer33_key_ce0,
        buffer33_key_q0,
        buffer33_value_address0,
        buffer33_value_ce0,
        buffer33_value_q0,
        buffer34_key_address0,
        buffer34_key_ce0,
        buffer34_key_q0,
        buffer34_value_address0,
        buffer34_value_ce0,
        buffer34_value_q0,
        buffer35_key_address0,
        buffer35_key_ce0,
        buffer35_key_q0,
        buffer35_value_address0,
        buffer35_value_ce0,
        buffer35_value_q0,
        buffer36_key_address0,
        buffer36_key_ce0,
        buffer36_key_q0,
        buffer36_value_address0,
        buffer36_value_ce0,
        buffer36_value_q0,
        buffer37_key_address0,
        buffer37_key_ce0,
        buffer37_key_q0,
        buffer37_value_address0,
        buffer37_value_ce0,
        buffer37_value_q0,
        offset_kvs
);

parameter    ap_ST_fsm_state1 = 8'd1;
parameter    ap_ST_fsm_state2 = 8'd2;
parameter    ap_ST_fsm_pp0_stage0 = 8'd4;
parameter    ap_ST_fsm_state6 = 8'd8;
parameter    ap_ST_fsm_state7 = 8'd16;
parameter    ap_ST_fsm_state8 = 8'd32;
parameter    ap_ST_fsm_state9 = 8'd64;
parameter    ap_ST_fsm_state10 = 8'd128;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_kvdram_V_AWVALID;
input   m_axi_kvdram_V_AWREADY;
output  [31:0] m_axi_kvdram_V_AWADDR;
output  [0:0] m_axi_kvdram_V_AWID;
output  [31:0] m_axi_kvdram_V_AWLEN;
output  [2:0] m_axi_kvdram_V_AWSIZE;
output  [1:0] m_axi_kvdram_V_AWBURST;
output  [1:0] m_axi_kvdram_V_AWLOCK;
output  [3:0] m_axi_kvdram_V_AWCACHE;
output  [2:0] m_axi_kvdram_V_AWPROT;
output  [3:0] m_axi_kvdram_V_AWQOS;
output  [3:0] m_axi_kvdram_V_AWREGION;
output  [0:0] m_axi_kvdram_V_AWUSER;
output   m_axi_kvdram_V_WVALID;
input   m_axi_kvdram_V_WREADY;
output  [511:0] m_axi_kvdram_V_WDATA;
output  [63:0] m_axi_kvdram_V_WSTRB;
output   m_axi_kvdram_V_WLAST;
output  [0:0] m_axi_kvdram_V_WID;
output  [0:0] m_axi_kvdram_V_WUSER;
output   m_axi_kvdram_V_ARVALID;
input   m_axi_kvdram_V_ARREADY;
output  [31:0] m_axi_kvdram_V_ARADDR;
output  [0:0] m_axi_kvdram_V_ARID;
output  [31:0] m_axi_kvdram_V_ARLEN;
output  [2:0] m_axi_kvdram_V_ARSIZE;
output  [1:0] m_axi_kvdram_V_ARBURST;
output  [1:0] m_axi_kvdram_V_ARLOCK;
output  [3:0] m_axi_kvdram_V_ARCACHE;
output  [2:0] m_axi_kvdram_V_ARPROT;
output  [3:0] m_axi_kvdram_V_ARQOS;
output  [3:0] m_axi_kvdram_V_ARREGION;
output  [0:0] m_axi_kvdram_V_ARUSER;
input   m_axi_kvdram_V_RVALID;
output   m_axi_kvdram_V_RREADY;
input  [511:0] m_axi_kvdram_V_RDATA;
input   m_axi_kvdram_V_RLAST;
input  [0:0] m_axi_kvdram_V_RID;
input  [0:0] m_axi_kvdram_V_RUSER;
input  [1:0] m_axi_kvdram_V_RRESP;
input   m_axi_kvdram_V_BVALID;
output   m_axi_kvdram_V_BREADY;
input  [1:0] m_axi_kvdram_V_BRESP;
input  [0:0] m_axi_kvdram_V_BID;
input  [0:0] m_axi_kvdram_V_BUSER;
input  [25:0] kvdram_V_offset;
output  [11:0] buffer30_key_address0;
output   buffer30_key_ce0;
input  [31:0] buffer30_key_q0;
output  [11:0] buffer30_value_address0;
output   buffer30_value_ce0;
input  [31:0] buffer30_value_q0;
output  [11:0] buffer31_key_address0;
output   buffer31_key_ce0;
input  [31:0] buffer31_key_q0;
output  [11:0] buffer31_value_address0;
output   buffer31_value_ce0;
input  [31:0] buffer31_value_q0;
output  [11:0] buffer32_key_address0;
output   buffer32_key_ce0;
input  [31:0] buffer32_key_q0;
output  [11:0] buffer32_value_address0;
output   buffer32_value_ce0;
input  [31:0] buffer32_value_q0;
output  [11:0] buffer33_key_address0;
output   buffer33_key_ce0;
input  [31:0] buffer33_key_q0;
output  [11:0] buffer33_value_address0;
output   buffer33_value_ce0;
input  [31:0] buffer33_value_q0;
output  [11:0] buffer34_key_address0;
output   buffer34_key_ce0;
input  [31:0] buffer34_key_q0;
output  [11:0] buffer34_value_address0;
output   buffer34_value_ce0;
input  [31:0] buffer34_value_q0;
output  [11:0] buffer35_key_address0;
output   buffer35_key_ce0;
input  [31:0] buffer35_key_q0;
output  [11:0] buffer35_value_address0;
output   buffer35_value_ce0;
input  [31:0] buffer35_value_q0;
output  [11:0] buffer36_key_address0;
output   buffer36_key_ce0;
input  [31:0] buffer36_key_q0;
output  [11:0] buffer36_value_address0;
output   buffer36_value_ce0;
input  [31:0] buffer36_value_q0;
output  [11:0] buffer37_key_address0;
output   buffer37_key_ce0;
input  [31:0] buffer37_key_q0;
output  [11:0] buffer37_value_address0;
output   buffer37_value_ce0;
input  [31:0] buffer37_value_q0;
input  [29:0] offset_kvs;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg m_axi_kvdram_V_AWVALID;
reg m_axi_kvdram_V_WVALID;
reg m_axi_kvdram_V_BREADY;
reg buffer30_key_ce0;
reg buffer30_value_ce0;
reg buffer31_key_ce0;
reg buffer31_value_ce0;
reg buffer32_key_ce0;
reg buffer32_value_ce0;
reg buffer33_key_ce0;
reg buffer33_value_ce0;
reg buffer34_key_ce0;
reg buffer34_value_ce0;
reg buffer35_key_ce0;
reg buffer35_value_ce0;
reg buffer36_key_ce0;
reg buffer36_value_ce0;
reg buffer37_key_ce0;
reg buffer37_value_ce0;

(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    kvdram_V_blk_n_AW;
wire    ap_CS_fsm_state2;
reg    kvdram_V_blk_n_W;
reg    ap_enable_reg_pp0_iter2;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln2530_reg_429;
reg   [0:0] icmp_ln2530_reg_429_pp0_iter1_reg;
reg    kvdram_V_blk_n_B;
wire    ap_CS_fsm_state10;
reg   [8:0] i_0_reg_330;
wire   [30:0] add_ln392_fu_349_p2;
reg   [30:0] add_ln392_reg_418;
wire   [0:0] icmp_ln2530_fu_365_p2;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state3_pp0_stage0_iter0;
wire    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_state5_pp0_stage0_iter2;
reg    ap_block_state5_io;
reg    ap_block_pp0_stage0_11001;
wire   [8:0] i_fu_371_p2;
reg    ap_enable_reg_pp0_iter0;
reg   [31:0] buffer30_key_load_reg_518;
reg   [31:0] buffer30_value_load_reg_523;
reg   [31:0] buffer31_key_load_reg_528;
reg   [31:0] buffer31_value_load_reg_533;
reg   [31:0] buffer32_key_load_reg_538;
reg   [31:0] buffer32_value_load_reg_543;
reg   [31:0] buffer33_key_load_reg_548;
reg   [31:0] buffer33_value_load_reg_553;
reg   [31:0] buffer34_key_load_reg_558;
reg   [31:0] buffer34_value_load_reg_563;
reg   [31:0] buffer35_key_load_reg_568;
reg   [31:0] buffer35_value_load_reg_573;
reg   [31:0] buffer36_key_load_reg_578;
reg   [31:0] buffer36_value_load_reg_583;
reg   [31:0] buffer37_key_load_reg_588;
reg   [31:0] buffer37_value_load_reg_593;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
reg    ap_enable_reg_pp0_iter1;
wire   [63:0] zext_ln2535_fu_377_p1;
wire   [63:0] zext_ln392_2_fu_355_p1;
wire    ap_block_pp0_stage0_01001;
wire   [30:0] zext_ln392_fu_341_p1;
wire   [30:0] zext_ln392_1_fu_345_p1;
reg   [7:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 8'd1;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((m_axi_kvdram_V_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state3)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state3);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if (((m_axi_kvdram_V_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln2530_fu_365_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_0_reg_330 <= i_fu_371_p2;
    end else if (((m_axi_kvdram_V_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        i_0_reg_330 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        add_ln392_reg_418 <= add_ln392_fu_349_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln2530_reg_429 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buffer30_key_load_reg_518 <= buffer30_key_q0;
        buffer30_value_load_reg_523 <= buffer30_value_q0;
        buffer31_key_load_reg_528 <= buffer31_key_q0;
        buffer31_value_load_reg_533 <= buffer31_value_q0;
        buffer32_key_load_reg_538 <= buffer32_key_q0;
        buffer32_value_load_reg_543 <= buffer32_value_q0;
        buffer33_key_load_reg_548 <= buffer33_key_q0;
        buffer33_value_load_reg_553 <= buffer33_value_q0;
        buffer34_key_load_reg_558 <= buffer34_key_q0;
        buffer34_value_load_reg_563 <= buffer34_value_q0;
        buffer35_key_load_reg_568 <= buffer35_key_q0;
        buffer35_value_load_reg_573 <= buffer35_value_q0;
        buffer36_key_load_reg_578 <= buffer36_key_q0;
        buffer36_value_load_reg_583 <= buffer36_value_q0;
        buffer37_key_load_reg_588 <= buffer37_key_q0;
        buffer37_value_load_reg_593 <= buffer37_value_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln2530_reg_429 <= icmp_ln2530_fu_365_p2;
        icmp_ln2530_reg_429_pp0_iter1_reg <= icmp_ln2530_reg_429;
    end
end

always @ (*) begin
    if ((icmp_ln2530_fu_365_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if ((((m_axi_kvdram_V_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state10)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((m_axi_kvdram_V_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buffer30_key_ce0 = 1'b1;
    end else begin
        buffer30_key_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buffer30_value_ce0 = 1'b1;
    end else begin
        buffer30_value_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buffer31_key_ce0 = 1'b1;
    end else begin
        buffer31_key_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buffer31_value_ce0 = 1'b1;
    end else begin
        buffer31_value_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buffer32_key_ce0 = 1'b1;
    end else begin
        buffer32_key_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buffer32_value_ce0 = 1'b1;
    end else begin
        buffer32_value_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buffer33_key_ce0 = 1'b1;
    end else begin
        buffer33_key_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buffer33_value_ce0 = 1'b1;
    end else begin
        buffer33_value_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buffer34_key_ce0 = 1'b1;
    end else begin
        buffer34_key_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buffer34_value_ce0 = 1'b1;
    end else begin
        buffer34_value_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buffer35_key_ce0 = 1'b1;
    end else begin
        buffer35_key_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buffer35_value_ce0 = 1'b1;
    end else begin
        buffer35_value_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buffer36_key_ce0 = 1'b1;
    end else begin
        buffer36_key_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buffer36_value_ce0 = 1'b1;
    end else begin
        buffer36_value_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buffer37_key_ce0 = 1'b1;
    end else begin
        buffer37_key_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buffer37_value_ce0 = 1'b1;
    end else begin
        buffer37_value_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        kvdram_V_blk_n_AW = m_axi_kvdram_V_AWREADY;
    end else begin
        kvdram_V_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        kvdram_V_blk_n_B = m_axi_kvdram_V_BVALID;
    end else begin
        kvdram_V_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln2530_reg_429_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        kvdram_V_blk_n_W = m_axi_kvdram_V_WREADY;
    end else begin
        kvdram_V_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((m_axi_kvdram_V_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        m_axi_kvdram_V_AWVALID = 1'b1;
    end else begin
        m_axi_kvdram_V_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((m_axi_kvdram_V_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
        m_axi_kvdram_V_BREADY = 1'b1;
    end else begin
        m_axi_kvdram_V_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln2530_reg_429_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        m_axi_kvdram_V_WVALID = 1'b1;
    end else begin
        m_axi_kvdram_V_WVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((m_axi_kvdram_V_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln2530_fu_365_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1)) & ~((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln2530_fu_365_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            if (((m_axi_kvdram_V_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln392_fu_349_p2 = (zext_ln392_fu_341_p1 + zext_ln392_1_fu_345_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state5_io));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state5_io));
end

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state5_io = ((icmp_ln2530_reg_429_pp0_iter1_reg == 1'd0) & (m_axi_kvdram_V_WREADY == 1'b0));
end

assign ap_block_state5_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign buffer30_key_address0 = zext_ln2535_fu_377_p1;

assign buffer30_value_address0 = zext_ln2535_fu_377_p1;

assign buffer31_key_address0 = zext_ln2535_fu_377_p1;

assign buffer31_value_address0 = zext_ln2535_fu_377_p1;

assign buffer32_key_address0 = zext_ln2535_fu_377_p1;

assign buffer32_value_address0 = zext_ln2535_fu_377_p1;

assign buffer33_key_address0 = zext_ln2535_fu_377_p1;

assign buffer33_value_address0 = zext_ln2535_fu_377_p1;

assign buffer34_key_address0 = zext_ln2535_fu_377_p1;

assign buffer34_value_address0 = zext_ln2535_fu_377_p1;

assign buffer35_key_address0 = zext_ln2535_fu_377_p1;

assign buffer35_value_address0 = zext_ln2535_fu_377_p1;

assign buffer36_key_address0 = zext_ln2535_fu_377_p1;

assign buffer36_value_address0 = zext_ln2535_fu_377_p1;

assign buffer37_key_address0 = zext_ln2535_fu_377_p1;

assign buffer37_value_address0 = zext_ln2535_fu_377_p1;

assign i_fu_371_p2 = (i_0_reg_330 + 9'd1);

assign icmp_ln2530_fu_365_p2 = ((i_0_reg_330 == 9'd256) ? 1'b1 : 1'b0);

assign m_axi_kvdram_V_ARADDR = 32'd0;

assign m_axi_kvdram_V_ARBURST = 2'd0;

assign m_axi_kvdram_V_ARCACHE = 4'd0;

assign m_axi_kvdram_V_ARID = 1'd0;

assign m_axi_kvdram_V_ARLEN = 32'd0;

assign m_axi_kvdram_V_ARLOCK = 2'd0;

assign m_axi_kvdram_V_ARPROT = 3'd0;

assign m_axi_kvdram_V_ARQOS = 4'd0;

assign m_axi_kvdram_V_ARREGION = 4'd0;

assign m_axi_kvdram_V_ARSIZE = 3'd0;

assign m_axi_kvdram_V_ARUSER = 1'd0;

assign m_axi_kvdram_V_ARVALID = 1'b0;

assign m_axi_kvdram_V_AWADDR = zext_ln392_2_fu_355_p1;

assign m_axi_kvdram_V_AWBURST = 2'd0;

assign m_axi_kvdram_V_AWCACHE = 4'd0;

assign m_axi_kvdram_V_AWID = 1'd0;

assign m_axi_kvdram_V_AWLEN = 32'd256;

assign m_axi_kvdram_V_AWLOCK = 2'd0;

assign m_axi_kvdram_V_AWPROT = 3'd0;

assign m_axi_kvdram_V_AWQOS = 4'd0;

assign m_axi_kvdram_V_AWREGION = 4'd0;

assign m_axi_kvdram_V_AWSIZE = 3'd0;

assign m_axi_kvdram_V_AWUSER = 1'd0;

assign m_axi_kvdram_V_RREADY = 1'b0;

assign m_axi_kvdram_V_WDATA = {{{{{{{{{{{{{{{{buffer37_value_load_reg_593}, {buffer37_key_load_reg_588}}, {buffer36_value_load_reg_583}}, {buffer36_key_load_reg_578}}, {buffer35_value_load_reg_573}}, {buffer35_key_load_reg_568}}, {buffer34_value_load_reg_563}}, {buffer34_key_load_reg_558}}, {buffer33_value_load_reg_553}}, {buffer33_key_load_reg_548}}, {buffer32_value_load_reg_543}}, {buffer32_key_load_reg_538}}, {buffer31_value_load_reg_533}}, {buffer31_key_load_reg_528}}, {buffer30_value_load_reg_523}}, {buffer30_key_load_reg_518}};

assign m_axi_kvdram_V_WID = 1'd0;

assign m_axi_kvdram_V_WLAST = 1'b0;

assign m_axi_kvdram_V_WSTRB = 64'd18446744073709551615;

assign m_axi_kvdram_V_WUSER = 1'd0;

assign zext_ln2535_fu_377_p1 = i_0_reg_330;

assign zext_ln392_1_fu_345_p1 = kvdram_V_offset;

assign zext_ln392_2_fu_355_p1 = add_ln392_reg_418;

assign zext_ln392_fu_341_p1 = offset_kvs;

endmodule //savekeyvalues0_2
