#ifndef COMMON_H
#define COMMON_H
#include "config_params.h"
{%if((context['XWARE'] == "HW") or (context['XWARE'] == "SWEMU"))%}
#include <string.h>
#include <cmath>
#include <ap_int.h>
{%endif%}

#define {{context['XWARE']}} // SWEMU, HW, SW
#define {{context['SETUP']}} // ACTGRAPH_SETUP, GRAFBOOST_SETUP
#define {{context['ALGORITHM']}} // PR_ALGORITHM, BFS_ALGORITHM, SSSP_ALGORITHM, BC_ALGORITHM, ADVANCE_ALGORITHM
#define {{context['DATASET']}} 
#if (defined(SWEMU) || defined(HW))
#define FPGA_IMPL
#endif 
#define {{context['PLATFORM']}} // AWS_PLATFORM, CRABTREE_PLATFORM
#ifdef ADVANCE_ALGORITHM
#define PR_ALGORITHM
#endif 

#define ACTSMODEL_LW
#ifdef GRAFBOOST_SETUP
#define SORTREDUCEMODEL
#endif 

#define {{context['LOCKE']}}
#define _SINGLEKERNEL
#ifdef FPGA_IMPL
#define _WIDEWORD
#endif
#ifdef PR_ALGORITHM
#define ALLVERTEXISACTIVE_ALGORITHM
#else 
#define RANDOMVERTEXISACTIVE_ALGORITHM
#endif

#define {{context['KERNELNAME']}}
{%if(context['EVALUATION_TYPE'] == "EV_SIMPLETEST")%}
#define TESTKERNEL
{%endif%}
{%if(context['EVALUATION_TYPE'] == "EV_IMPACTOFRANGE")%}
#define TESTKERNEL_IMPACTOFRANGE
#define TESTKERNEL
{%endif%}
{%if(context['EVALUATION_TYPE'] == "EV_IMPACTOFPARTITIONFANOUT")%}
#define TESTKERNEL_IMPACTOFPARTITIONFANOUT
#define TESTKERNEL
{%endif%}
{%if(context['EVALUATION_TYPE'] == "EV_IMPACTOFNUMSUBWORKERS")%}
#define TESTKERNEL_IMPACTOFNUMSUBWORKERS
#define TESTKERNEL
{%endif%}
{%if(context['EVALUATION_TYPE'] == "EV_IMPACTOFBANDWIDTH")%}
#define TESTKERNEL_IMPACTOFBANDWIDTH
#define TESTKERNEL
{%endif%}
{%if(context['EVALUATION_TYPE'] == "EV_IMPACTOFPLATFORM")%}
#define TESTKERNEL_IMPACTOFPLATFORM
#define TESTKERNEL
{%endif%}
{%if(context['EVALUATION_TYPE'] == "EV_CREATENDGRAPH")%}
#define _GENERATE2DGRAPH //
{%endif%}
// #define TESTKERNEL_ACTSMAX //

////////////////

#if defined(ACTGRAPH_SETUP) && not defined(TESTKERNEL_ACTSMAX)// && defined(PR_ALGORITHM)
#if defined(_ORKUT_3M_106M) || defined(_HOLLYWOOD_1M_57M) || defined(_INDOCHINA_7M_194M) || defined(_KRON21_2M_91M) || defined(_ROADNET_2M_3M) || defined(_FLICKR_1M_10M)		
#define INMEMORYGP
#endif
#endif

#ifdef INMEMORYGP
#ifdef PR_ALGORITHM
	#define DISPATCHTYPE_ASYNC // 1
	#define MERGEPROCESSEDGESANDPARTITIONSTAGE // DEPRECIATEME.
	#define MERGEPARTITIONANDREDUCE
	// #define MERGEEDGESANDKVDRAMWORKSPACE
	#define SINELEVALUEVPTRTYPE // CRITICAL NEWCHANGE
	#define SINELEVALUEEDGETYPE // CRITICAL NEWCHANGE 
#endif 
#ifdef BFS_ALGORITHM
	#define DISPATCHTYPE2 //
	// #define DISPATCHTYPE_ASYNC
	#define COMPACTEDGES // 
	#define VARIABLEPRECISIONEDGEPACKING // FIXME. unused
	#define SINELEVALUEVPTRTYPE
	#define SINELEVALUEEDGETYPE
#endif 
#ifdef SSSP_ALGORITHM
	#define DISPATCHTYPE_SYNC // DISPATCHTYPE_SYNC, DISPATCHTYPE_ASYNC
	#define MERGEPROCESSEDGESANDPARTITIONSTAGE
	#define MERGEPARTITIONANDREDUCE
	#define SINELEVALUEVPTRTYPE
	#define SINELEVALUEEDGETYPE
#endif
#define COLLECTSTATSOFFLINE
#endif

#if defined(_HOLLYWOOD_1M_57M) || defined(_ROADNET_2M_3M) || defined(_FLICKR_1M_10M)		
#define GRAPHISUNDIRECTED
#else 
// #define GRAPHISUNDIRECTED
#endif 

////////////////

#define _DEBUGMODE_HEADER //
#if defined (FPGA_IMPL) && defined (HW)
#else
#define _DEBUGMODE_STATS // 
// #define _DEBUGMODE_CHECKS
#define _DEBUGMODE_CHECKS2 // 
#define _DEBUGMODE_CHECKS3 //
// #define _DEBUGMODE_PRINTS
// #define _DEBUGMODE_KERNELPRINTS
#define _DEBUGMODE_KERNELPRINTS2 //
#define _DEBUGMODE_KERNELPRINTS3 //
// #define _DEBUGMODE_RUNKERNELPRINTS //
// #define _DEBUGMODE_PROCACTVVSPRINTS //
#endif
// #define _DEBUGMODE_HOSTCHECKS
#define _DEBUGMODE_HOSTCHECKS2 //
// #define _DEBUGMODE_HOSTPRINTS
// #define _DEBUGMODE_HOSTPRINTS2 //
#define _DEBUGMODE_HOSTPRINTS3 //
// #define _DEBUGMODE_TIMERS
#define _DEBUGMODE_TIMERS2
#define _DEBUGMODE_TIMERS3

////////////////

#define PAGERANK 222
#define BREADTHFIRSTSEARCH 333
#define SSSP 444
#define BETWEENNESSCENTRALITY 555

////////////////
#define NUMSUBCPUTHREADS {{context['NUMSUBCPUTHREADS']}}
#define NUMUTILITYTHREADS 16 // NUMCPUTHREADS // FIXME?

////////////////

#define DATAWIDTH {{context['DATAWIDTH']}} 
#define VECTOR_SIZE {{context['VECTOR_SIZE']}}
#define VECTOR2_SIZE (VECTOR_SIZE * 2)
#define VECTOR1024_SIZE 16
#define DATATYPE_SIZE 32
#define NUMCOMPUTEUNITS {{context['NUMCOMPUTEUNITS']}}

#define NUMDRAMBANKS {{context['NUMDRAMBANKS']}}
#define NUMINSTANCES {{context['NUMINSTANCES']}}

#define NUM_PARTITIONS_POW {{context['NUM_PARTITIONS_POW']}}
#define NUM_PARTITIONS (1 << NUM_PARTITIONS_POW)

#if defined(ACTGRAPH_SETUP)
#define MAXNUMSSDPARTITIONS {{context['MAXNUMSSDPARTITIONS']}}
#define NUMSSDPARTITIONS_POW {{context['MAXNUMSSDPARTITIONS_POW']}}
#else 
#define MAXNUMSSDPARTITIONS 1
#define NUMSSDPARTITIONS_POW 0
#endif 
#define NUMSSDPARTITIONS (1 << NUMSSDPARTITIONS_POW)

#define MAXNUMVERTEXBANKS {{context['MAXNUMSSDPARTITIONS']}}
#define MAXNUMEDGEBANKS {{context['MAXNUMSSDPARTITIONS']}}
#define MAXNUMVERTICESPERBANK (KVDATA_RANGE / MAXNUMEDGEBANKS)
#define MAXNUMVERTICESPERBANK_KVS (MAXNUMVERTICESPERBANK / VECTOR_SIZE)

#define KVDATA_RANGE_POW {{context['KVDATA_RANGE_POW']}}
#define KVDATA_RANGE (1 << KVDATA_RANGE_POW)

#define NUMWORKERS {{context['NUMWORKERS']}}
#define NUMSUBWORKERS {{context['NUMSUBWORKERS']}}

////////////////

#define SKEWRATIO_POW 7
#define SKEWRATIO (1 << SKEWRATIO_POW) // 128

#define KVDATA_RANGE_PERSSDPARTITION_POW (KVDATA_RANGE_POW - NUMSSDPARTITIONS_POW)
#define KVDATA_RANGE_PERSSDPARTITION (1 << KVDATA_RANGE_PERSSDPARTITION_POW)
#define KVDATA_RANGE_PERSSDPARTITION_KVS (KVDATA_RANGE_PERSSDPARTITION / VECTOR_SIZE)

#define KVDATA_RANGE_PERSSDPARTITION2_POW (KVDATA_RANGE_POW - NUMSSDPARTITIONS_POW - SKEWRATIO_POW)
#define KVDATA_RANGE_PERSSDPARTITION2 (1 << KVDATA_RANGE_PERSSDPARTITION2_POW)
#define KVDATA_RANGE_PERSSDPARTITION2_KVS (KVDATA_RANGE_PERSSDPARTITION2 / VECTOR_SIZE)

#define BATCH_RANGE_POW KVDATA_RANGE_PERSSDPARTITION_POW
#define BATCH_RANGE (1 << BATCH_RANGE_POW)
#define BATCH_RANGE_KVS (BATCH_RANGE / VECTOR_SIZE)

#define BATCH_RANGE2_POW KVDATA_RANGE_PERSSDPARTITION2_POW
#define BATCH_RANGE2 (1 << BATCH_RANGE2_POW)
#define BATCH_RANGE2_KVS (BATCH_RANGE2 / VECTOR_SIZE)

#ifdef PR_ALGORITHM
#define SRAMSZ_POW 10
#endif 
#ifdef BFS_ALGORITHM
#define SRAMSZ_POW 14
#endif 
#ifdef SSSP_ALGORITHM
#define SRAMSZ_POW 10
#endif
#define SRAMSZ (1 << SRAMSZ_POW)

// packing efficiencies
#ifdef PR_ALGORITHM
#define VDATAPACKINGFACTOR 1
#endif 
#ifdef BFS_ALGORITHM
#define VDATAPACKINGFACTOR 16
#endif 
#ifdef SSSP_ALGORITHM
#define VDATAPACKINGFACTOR 1
#endif

// tree-depth:sramsz constraint
/** ACTS constraints equation! (NUM_PARTITIONS_POWx = KVDATA_RANGE_PERSSDPARTITION_POW - SRAMSZ_POW) */
#define TREE_DEPTH (((BATCH_RANGE_POW - SRAMSZ_POW) + (NUM_PARTITIONS_POW - 1)) / NUM_PARTITIONS_POW)

#define APPLYVERTEXBUFFERSZ_POW (BATCH_RANGE_POW - (TREE_DEPTH * NUM_PARTITIONS_POW))
#define APPLYVERTEXBUFFERSZ (1 << APPLYVERTEXBUFFERSZ_POW)
#define APPLYVERTEXBUFFERSZ_KVS (APPLYVERTEXBUFFERSZ / VECTOR_SIZE) 

#define REDUCESZ_POW (BATCH_RANGE_POW - (TREE_DEPTH * NUM_PARTITIONS_POW))
#define REDUCESZ (1 << REDUCESZ_POW) // 1024
#define REDUCEBUFFERSZ (REDUCESZ / 2) // 512

#define VMASKSZ ((REDUCESZ * (NUM_PARTITIONS / VECTOR_SIZE)) / 32) // 2048/32 =64
#define VMASKBUFFERSZ (VMASKSZ / 2) // =32

#define LOADFACTORFORREDUCE ((1024 * VECTOR_SIZE) / (APPLYVERTEXBUFFERSZ / VDATAPACKINGFACTOR)) // use REDUCESZ

#define NUMLASTLEVELPARTITIONS (1 << (NUM_PARTITIONS_POW * TREE_DEPTH))

////////////////

#ifdef INMEMORYGP
	#ifdef PR_ALGORITHM
	#define UNITKVDATA_BATCHSIZE 12000000
	#endif 
	#ifdef BFS_ALGORITHM
	#define UNITKVDATA_BATCHSIZE 6000000
	#endif 
	#ifdef SSSP_ALGORITHM
	#define UNITKVDATA_BATCHSIZE 12000000
	#endif
#else 
	#define UNITKVDATA_BATCHSIZE 12000000
#endif 
#define MAXKVDATA_BATCHSIZE (UNITKVDATA_BATCHSIZE * ((12 + (NUMSUBCPUTHREADS-1)) / NUMSUBCPUTHREADS))
#define MAXKVDATA_BATCHSIZE_KVS (MAXKVDATA_BATCHSIZE / VECTOR_SIZE)
#define KVDATA_BATCHSIZE MAXKVDATA_BATCHSIZE
#define KVDATA_BATCHSIZE_KVS (KVDATA_BATCHSIZE / VECTOR_SIZE)
#define EDGES_BATCHSIZE (MAXKVDATA_BATCHSIZE * NUMSUBCPUTHREADS)
#define EDGES_BATCHSIZE_KVS (EDGES_BATCHSIZE / VECTOR_SIZE)
#define PADDEDEDGES_BATCHSIZE (EDGES_BATCHSIZE + 1000000)

#if defined(FPGA_IMPL)
#define DRAMBATCHFACTOR 1//10
#else
#define DRAMBATCHFACTOR 1
#endif

////////////////

#define MESSAGES_SIZE 1024
#define MESSAGES_SIZE_KVS (MESSAGES_SIZE / VECTOR_SIZE)
#define MESSAGES_COMMANDID 0
#define MESSAGES_RUNKERNELCOMMANDID (MESSAGES_COMMANDID + 1)
#define MESSAGES_PROCESSCOMMANDID (MESSAGES_RUNKERNELCOMMANDID + 1)
#define MESSAGES_COLLECTSTATSCOMMANDID (MESSAGES_PROCESSCOMMANDID + 1)
#define MESSAGES_PARTITIONCOMMANDID (MESSAGES_COLLECTSTATSCOMMANDID + 1)
#define MESSAGES_APPLYUPDATESCOMMANDID (MESSAGES_PARTITIONCOMMANDID + 1)
#define MESSAGES_FINALNUMPARTITIONSID (MESSAGES_APPLYUPDATESCOMMANDID + 1)
#define MESSAGES_TREEDEPTHID (MESSAGES_FINALNUMPARTITIONSID + 1)
#define MESSAGES_SSDPARTITIONID (MESSAGES_TREEDEPTHID + 1)
#define MESSAGES_SRCVOFFSET (MESSAGES_SSDPARTITIONID + 1)
#define MESSAGES_SRCVSIZE (MESSAGES_SRCVOFFSET + 1)
#define MESSAGES_SRCVSIZE_KVS (MESSAGES_SRCVSIZE + 1)
#define MESSAGES_EDGESSIZE (MESSAGES_SRCVSIZE_KVS + 1)
#define MESSAGES_EDGESSIZE_KVS (MESSAGES_EDGESSIZE + 1)
#define MESSAGES_DESTVOFFSET (MESSAGES_EDGESSIZE_KVS + 1)
#define MESSAGES_ACTVVSIZE (MESSAGES_DESTVOFFSET + 1)
#define MESSAGES_FIRSTVID (MESSAGES_ACTVVSIZE + 1)
#define MESSAGES_FIRSTKEY (MESSAGES_FIRSTVID + 1)
#define MESSAGES_FIRSTVALUE (MESSAGES_FIRSTKEY + 1)
#define MESSAGES_TREEDEPTH (MESSAGES_FIRSTVALUE + 1)
#define MESSAGES_FINALNUMPARTITIONS (MESSAGES_TREEDEPTH + 1)
#define MESSAGES_BATCHSIZE (MESSAGES_FINALNUMPARTITIONS + 1)
#define MESSAGES_RUNSIZE (MESSAGES_BATCHSIZE + 1)
#define MESSAGES_RUNSIZE_KVS (MESSAGES_RUNSIZE + 1)
#define MESSAGES_NEXTBATCHOFFSET (MESSAGES_RUNSIZE_KVS + 1)
#define MESSAGES_GRAPHITERATIONID (MESSAGES_NEXTBATCHOFFSET + 1)
#define MESSAGES_GRAPHALGORITHMID (MESSAGES_GRAPHITERATIONID + 1)
#define MESSAGES_STATSALREADYCOLLECTED (MESSAGES_GRAPHALGORITHMID + 1)
#define MESSAGES_GROUPID (MESSAGES_STATSALREADYCOLLECTED + 1)
#define MESSAGES_BEGINLOP (MESSAGES_GROUPID + 1)
#define MESSAGES_ENDLOP (MESSAGES_BEGINLOP + 1)
#define MESSAGES_NUMLOPS (MESSAGES_ENDLOP + 1)
#define MESSAGES_BATCHRANGE (MESSAGES_NUMLOPS + 1)
#define MESSAGES_BATCHRANGE_KVS (MESSAGES_BATCHRANGE + 1)
#define MESSAGES_BATCHRANGE_POW (MESSAGES_BATCHRANGE_KVS + 1)
#define MESSAGES_APPLYVERTEXBUFFERSZ (MESSAGES_BATCHRANGE_POW + 1)
#define MESSAGES_APPLYVERTEXBUFFERSZ_KVS (MESSAGES_APPLYVERTEXBUFFERSZ + 1)
#define MESSAGES_APPLYVERTEXBUFFERSZ_POW (MESSAGES_APPLYVERTEXBUFFERSZ_KVS + 1)
#define MESSAGES_LOADFACTORFORREDUCE (MESSAGES_APPLYVERTEXBUFFERSZ_POW + 1)

#define MESSAGES_BASEOFFSET_MESSAGESDRAM_KVS (MESSAGES_LOADFACTORFORREDUCE + 1)
#define MESSAGES_BASEOFFSET_KVDRAM_KVS (MESSAGES_BASEOFFSET_MESSAGESDRAM_KVS + 1)
#define MESSAGES_BASEOFFSET_KVDRAMWORKSPACE_KVS (MESSAGES_BASEOFFSET_KVDRAM_KVS + 1)
#define MESSAGES_BASEOFFSET_STATSDRAM_KVS (MESSAGES_BASEOFFSET_KVDRAMWORKSPACE_KVS + 1)
#define MESSAGES_BASEOFFSET_EDGESDATA_KVS (MESSAGES_BASEOFFSET_STATSDRAM_KVS + 1)
#define MESSAGES_BASEOFFSET_VERTEXPTR_KVS (MESSAGES_BASEOFFSET_EDGESDATA_KVS + 1)
#define MESSAGES_BASEOFFSET_VERTICESDATA_KVS (MESSAGES_BASEOFFSET_VERTEXPTR_KVS + 1)
#define MESSAGES_BASEOFFSET_ACTIVEVERTICES_KVS (MESSAGES_BASEOFFSET_VERTICESDATA_KVS + 1)
#define MESSAGES_BASEOFFSET_VERTICESDATAMASK_KVS (MESSAGES_BASEOFFSET_ACTIVEVERTICES_KVS + 1)

#define MESSAGES_SIZE_KVSTATSSZ (MESSAGES_BASEOFFSET_VERTICESDATAMASK_KVS + 1)

#define MESSAGES_BASEOFFSET_RETURNVALUES (MESSAGES_SIZE_KVSTATSSZ + 1)

////////////////

#ifdef FPGA_IMPL
#define NUMFLAGS 1//2
#else 
#define NUMFLAGS 1
#endif

#define PROCESSEDGESCMD 1
#define PARTITIONCMD 2
#define APPLYUPDATESCMD 3

#define SRC_DST 5
#define DST_SRC 6
#define DST_SRC_EDGEW 7

#define DIRECTEDGRAPH 5
#define UNDIRECTEDGRAPH 6

#define ON 5
#define OFF 6

#define SOURCE 5
#define DEST 6

#define ACTSINFINITY 777777777

#define ACTIVE 1
#define INACTIVE 0

#define FINISHED 5
#define NOTFINISHED 6

#define NONE 6
#define NOTEXIST -1

#define STREAMING_ACCESS_TYPE 5
#define PARTIAL_ACCESS_TYPE 6

#define RESET   "\033[0m"
#define BOLDWHITE   "\033[1m\033[37m"
#define TIMINGRESULTSCOLOR BOLDWHITE

#define NUMBITSINCHAR 8
#define NUMBITSINUNSIGNEDINT (NUMBITSINCHAR * 4)

#define MIN(a,b) (((a)<(b))?(a):(b))
#define MAX(a,b) (((a)>(b))?(a):(b))

#define BitVal(data,y) ( (data>>y) & 1)      /** Return Data.Y value   **/
#define SetBit(data,y)    data |= (1 << y)    /** Set Data.Y   to 1    **/
#define ClearBit(data,y)  data &= ~(1 << y)   /** Clear Data.Y to 0    **/
#define TogleBit(data,y)     (data ^=BitVal(y))     /** Togle Data.Y  value  **/
#define Togle(data)   (data =~data )         /** Togle Data value     **/

#define GETMASK(index, size) (((1 << (size)) - 1) << (index))
#define READFROM(data, index, size) (((data) & GETMASK((index), (size))) >> (index))
#define WRITETO(data, index, size, value) ((data) = ((data) & (~GETMASK((index), (size)))) | ((value) << (index)))
#define FIELD(data, name, index, size) \
  inline decltype(data) name() { return READFROM(data, index, size); } \
  inline void set_##name(decltype(data) value) { WRITETO(data, index, size, value); }
#ifndef FPGA_IMPL // FIXME.
struct _bitData {
  unsigned int bitData;
  FIELD(bitData, one, 0, 1)
  FIELD(bitData, two, 1, 2)
};
#endif

#define INFINITI ((1 << 30) - 1)
// #define INFINITI (0xFFFFFFFF) // FIXME. is this better?

#define NAp 666
#define INVALIDDATA 123456789
#define UNUSEDDATA 987654321

#define NUM_KAPI 3 // number of kernel args per instance

// compact graph information
#define COMPACTPARAM_BITSIZE_TOTALDATA 52
#define COMPACTPARAM_BITSIZE_EACHDATA SRAMSZ_POW
#define COMPACTPARAM_BITSIZE_NUMITEMS 4
#define COMPACTPARAM_BITSIZE_STREETADDR 8
#define COMPACTPARAM_BITSIZE_LONGWORD 64

#define COMPACTPARAM_STARTOFFSET_DATA 0 // 0
#define COMPACTPARAM_STARTOFFSET_NUMITEMS (COMPACTPARAM_STARTOFFSET_DATA + COMPACTPARAM_BITSIZE_TOTALDATA) // 52
#define COMPACTPARAM_STARTOFFSET_STREETADDR (COMPACTPARAM_STARTOFFSET_NUMITEMS + COMPACTPARAM_BITSIZE_NUMITEMS) //56

#define COMPACTPARAM_ENDOFFSET_DATA (COMPACTPARAM_STARTOFFSET_DATA + COMPACTPARAM_BITSIZE_TOTALDATA) // 52
#define COMPACTPARAM_ENDOFFSET_NUMITEMS (COMPACTPARAM_ENDOFFSET_DATA + COMPACTPARAM_BITSIZE_NUMITEMS) // 56
#define COMPACTPARAM_ENDOFFSET_STREETADDR (COMPACTPARAM_ENDOFFSET_NUMITEMS + COMPACTPARAM_BITSIZE_STREETADDR) //56

#define COMPACTPARAM_ITEMSIZE_TOTALDATA 3

// inmemory BFS definitions // NB: don't change these (see acts.reduce_bfs)
#define UNVISITED 0
#define VISITED_IN_CURRENT_ITERATION 1
#define VISITED_IN_PAST_ITERATION 3

#define INACTIVEINNEXTITERATION 0
#define ACTIVEINNEXTITERATION 1

typedef unsigned int vertex_t;
#if (defined(_LARGEDATASET_1B) || defined(_LARGEDATASET_4B))
typedef unsigned long edge_t;
#else 
typedef unsigned int edge_t;
#endif 

typedef unsigned int keyy_t;
typedef unsigned int value_t;
typedef unsigned int value2_dt;

typedef struct {
	unsigned int key;
	unsigned int value;
} keyvalue_t;

#ifdef _WIDEWORD
typedef ap_uint<64> keyvalue_at;
#else
typedef keyvalue_t keyvalue_at;
#endif
// typedef keyvalue_t keyvalue_at;

typedef struct {
	// vertex_t vid;
	vertex_t outdegree;
} vertexprop_t;

typedef struct {
	#ifndef SINELEVALUEEDGETYPE
	keyy_t srcvid;
	#endif
	keyy_t dstvid; 
} edge_type;

typedef struct {
	keyy_t srcvid;
	keyy_t dstvid;
} edge2_type;

typedef struct {
	keyy_t key;
	#ifndef SINELEVALUEVPTRTYPE
	value_t value;
	#endif 
} vptr_type;

#ifdef _WIDEWORD
typedef ap_uint<1024> uint1024_dt;
#else
typedef struct {
	keyvalue_t data[16];
} uint1024_dt;
#endif

#ifdef _WIDEWORD
typedef ap_uint<DATAWIDTH> uint512_dt;
#else
typedef struct {
	keyvalue_t data[VECTOR_SIZE];
} uint512_dt;
#endif

typedef struct {
	keyvalue_t data[VECTOR_SIZE];
} uint512_vec_dt;

#ifdef _WIDEWORD
typedef ap_uint<256> uint256_dt;
#else
typedef struct {
	keyvalue_t data[4];
} uint256_dt;
#endif

#ifdef _WIDEWORD
typedef ap_uint<128> uint128_dt;
#else
typedef struct {
	keyvalue_t data[2];
} uint128_dt;
#endif

#ifdef _WIDEWORD
typedef ap_uint<64> uint64_dt;
#else
typedef struct {
	keyvalue_t data[1];
} uint64_dt;
#endif

typedef struct {
	unsigned long data;
} uuint64_dt;

#ifdef _WIDEWORD
typedef ap_uint<64> ulong_dt;
#else
typedef unsigned long ulong_dt;
#endif

typedef struct {
	unsigned int offset;
    unsigned int size;
} metadata_t;

typedef struct {
	unsigned int reof;
    unsigned int weof;
} tracker_t;

typedef struct {
	unsigned int begin;
    unsigned int size;
} margin_t;

typedef struct {
	unsigned int begin;
    unsigned int end;
} margin2_t;

typedef struct {
    vertexprop_t data[VECTOR_SIZE];
} vertexpropset_t;

typedef struct {
	vertex_t gvid;
	vertex_t lvid;
} lgvertex_t;

typedef struct {
	unsigned int type;
	unsigned int numedgebanks;
	unsigned int numvertexbanks;
	bool changed;
} heuristicstype_t;

typedef struct {
	keyy_t srcvid;
	keyy_t dstvid;
	value_t ew;
} smartedge_t;

typedef struct {
	unsigned int id;
	unsigned int offset;
	unsigned int size;
} block_t;

typedef struct {
	unsigned long totalsize;
    long double totaltime_SSDtransfers_ms;
	long double totaltime_OCLtransfers_ms;
	long double totaltime_ms;
	long double totaltime_overallexcludingOCLandSSDtransfers_ms;
	unsigned int graph_iterationidx; 
} runsummary_t;

typedef struct {
	unsigned int datasize;
	unsigned int message;
} kvresults_t;

/* typedef struct {
	unsigned int x;
	unsigned int numbits;
} mail_t; */
typedef struct {
	unsigned int x;
	unsigned int streetaddr;
	unsigned int houseno;
} mail_t;
#endif


